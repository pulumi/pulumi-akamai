# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCloudwrapperPropertiesResult',
    'AwaitableGetCloudwrapperPropertiesResult',
    'get_cloudwrapper_properties',
    'get_cloudwrapper_properties_output',
]

@pulumi.output_type
class GetCloudwrapperPropertiesResult:
    """
    A collection of values returned by getCloudwrapperProperties.
    """
    def __init__(__self__, contract_ids=None, id=None, properties=None, unused=None):
        if contract_ids and not isinstance(contract_ids, list):
            raise TypeError("Expected argument 'contract_ids' to be a list")
        pulumi.set(__self__, "contract_ids", contract_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if properties and not isinstance(properties, list):
            raise TypeError("Expected argument 'properties' to be a list")
        pulumi.set(__self__, "properties", properties)
        if unused and not isinstance(unused, bool):
            raise TypeError("Expected argument 'unused' to be a bool")
        pulumi.set(__self__, "unused", unused)

    @property
    @pulumi.getter(name="contractIds")
    def contract_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "contract_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        warnings.warn("""Required by the terraform plugin testing framework, always set to `akamai_cloudwrapper_properties`""", DeprecationWarning)
        pulumi.log.warn("""id is deprecated: Required by the terraform plugin testing framework, always set to `akamai_cloudwrapper_properties`""")

        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.GetCloudwrapperPropertiesPropertyResult']]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def unused(self) -> Optional[bool]:
        return pulumi.get(self, "unused")


class AwaitableGetCloudwrapperPropertiesResult(GetCloudwrapperPropertiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudwrapperPropertiesResult(
            contract_ids=self.contract_ids,
            id=self.id,
            properties=self.properties,
            unused=self.unused)


def get_cloudwrapper_properties(contract_ids: Optional[Sequence[str]] = None,
                                properties: Optional[Sequence[pulumi.InputType['GetCloudwrapperPropertiesPropertyArgs']]] = None,
                                unused: Optional[bool] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudwrapperPropertiesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['contractIds'] = contract_ids
    __args__['properties'] = properties
    __args__['unused'] = unused
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getCloudwrapperProperties:getCloudwrapperProperties', __args__, opts=opts, typ=GetCloudwrapperPropertiesResult).value

    return AwaitableGetCloudwrapperPropertiesResult(
        contract_ids=pulumi.get(__ret__, 'contract_ids'),
        id=pulumi.get(__ret__, 'id'),
        properties=pulumi.get(__ret__, 'properties'),
        unused=pulumi.get(__ret__, 'unused'))


@_utilities.lift_output_func(get_cloudwrapper_properties)
def get_cloudwrapper_properties_output(contract_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                       properties: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetCloudwrapperPropertiesPropertyArgs']]]]] = None,
                                       unused: Optional[pulumi.Input[Optional[bool]]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudwrapperPropertiesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
