# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetEdgeWorkerResult',
    'AwaitableGetEdgeWorkerResult',
    'get_edge_worker',
    'get_edge_worker_output',
]

@pulumi.output_type
class GetEdgeWorkerResult:
    """
    A collection of values returned by getEdgeWorker.
    """
    def __init__(__self__, edgeworker_id=None, group_id=None, id=None, local_bundle=None, local_bundle_hash=None, name=None, resource_tier_id=None, version=None, warnings=None):
        if edgeworker_id and not isinstance(edgeworker_id, int):
            raise TypeError("Expected argument 'edgeworker_id' to be a int")
        pulumi.set(__self__, "edgeworker_id", edgeworker_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if local_bundle and not isinstance(local_bundle, str):
            raise TypeError("Expected argument 'local_bundle' to be a str")
        pulumi.set(__self__, "local_bundle", local_bundle)
        if local_bundle_hash and not isinstance(local_bundle_hash, str):
            raise TypeError("Expected argument 'local_bundle_hash' to be a str")
        pulumi.set(__self__, "local_bundle_hash", local_bundle_hash)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_tier_id and not isinstance(resource_tier_id, int):
            raise TypeError("Expected argument 'resource_tier_id' to be a int")
        pulumi.set(__self__, "resource_tier_id", resource_tier_id)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)
        if warnings and not isinstance(warnings, list):
            raise TypeError("Expected argument 'warnings' to be a list")
        pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter(name="edgeworkerId")
    def edgeworker_id(self) -> int:
        return pulumi.get(self, "edgeworker_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localBundle")
    def local_bundle(self) -> Optional[str]:
        return pulumi.get(self, "local_bundle")

    @property
    @pulumi.getter(name="localBundleHash")
    def local_bundle_hash(self) -> str:
        return pulumi.get(self, "local_bundle_hash")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceTierId")
    def resource_tier_id(self) -> int:
        return pulumi.get(self, "resource_tier_id")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def warnings(self) -> Sequence[str]:
        return pulumi.get(self, "warnings")


class AwaitableGetEdgeWorkerResult(GetEdgeWorkerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEdgeWorkerResult(
            edgeworker_id=self.edgeworker_id,
            group_id=self.group_id,
            id=self.id,
            local_bundle=self.local_bundle,
            local_bundle_hash=self.local_bundle_hash,
            name=self.name,
            resource_tier_id=self.resource_tier_id,
            version=self.version,
            warnings=self.warnings)


def get_edge_worker(edgeworker_id: Optional[int] = None,
                    local_bundle: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEdgeWorkerResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['edgeworkerId'] = edgeworker_id
    __args__['localBundle'] = local_bundle
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getEdgeWorker:getEdgeWorker', __args__, opts=opts, typ=GetEdgeWorkerResult).value

    return AwaitableGetEdgeWorkerResult(
        edgeworker_id=pulumi.get(__ret__, 'edgeworker_id'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        local_bundle=pulumi.get(__ret__, 'local_bundle'),
        local_bundle_hash=pulumi.get(__ret__, 'local_bundle_hash'),
        name=pulumi.get(__ret__, 'name'),
        resource_tier_id=pulumi.get(__ret__, 'resource_tier_id'),
        version=pulumi.get(__ret__, 'version'),
        warnings=pulumi.get(__ret__, 'warnings'))


@_utilities.lift_output_func(get_edge_worker)
def get_edge_worker_output(edgeworker_id: Optional[pulumi.Input[int]] = None,
                           local_bundle: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEdgeWorkerResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
