# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetBotmanAkamaiBotCategoryResult',
    'AwaitableGetBotmanAkamaiBotCategoryResult',
    'get_botman_akamai_bot_category',
    'get_botman_akamai_bot_category_output',
]

@pulumi.output_type
class GetBotmanAkamaiBotCategoryResult:
    """
    A collection of values returned by getBotmanAkamaiBotCategory.
    """
    def __init__(__self__, category_name=None, id=None, json=None):
        if category_name and not isinstance(category_name, str):
            raise TypeError("Expected argument 'category_name' to be a str")
        pulumi.set(__self__, "category_name", category_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if json and not isinstance(json, str):
            raise TypeError("Expected argument 'json' to be a str")
        pulumi.set(__self__, "json", json)

    @property
    @pulumi.getter(name="categoryName")
    def category_name(self) -> Optional[str]:
        return pulumi.get(self, "category_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def json(self) -> str:
        return pulumi.get(self, "json")


class AwaitableGetBotmanAkamaiBotCategoryResult(GetBotmanAkamaiBotCategoryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBotmanAkamaiBotCategoryResult(
            category_name=self.category_name,
            id=self.id,
            json=self.json)


def get_botman_akamai_bot_category(category_name: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBotmanAkamaiBotCategoryResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['categoryName'] = category_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getBotmanAkamaiBotCategory:getBotmanAkamaiBotCategory', __args__, opts=opts, typ=GetBotmanAkamaiBotCategoryResult).value

    return AwaitableGetBotmanAkamaiBotCategoryResult(
        category_name=pulumi.get(__ret__, 'category_name'),
        id=pulumi.get(__ret__, 'id'),
        json=pulumi.get(__ret__, 'json'))


@_utilities.lift_output_func(get_botman_akamai_bot_category)
def get_botman_akamai_bot_category_output(category_name: Optional[pulumi.Input[Optional[str]]] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBotmanAkamaiBotCategoryResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
