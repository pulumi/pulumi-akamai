# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AppSecByPassNetworkListArgs', 'AppSecByPassNetworkList']

@pulumi.input_type
class AppSecByPassNetworkListArgs:
    def __init__(__self__, *,
                 bypass_network_lists: pulumi.Input[Sequence[pulumi.Input[str]]],
                 config_id: pulumi.Input[int]):
        """
        The set of arguments for constructing a AppSecByPassNetworkList resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bypass_network_lists: . JSON array of network IDs that comprise the bypass list.
        :param pulumi.Input[int] config_id: . Unique identifier of the security configuration associated with the network bypass lists being modified.
        """
        pulumi.set(__self__, "bypass_network_lists", bypass_network_lists)
        pulumi.set(__self__, "config_id", config_id)

    @property
    @pulumi.getter(name="bypassNetworkLists")
    def bypass_network_lists(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        . JSON array of network IDs that comprise the bypass list.
        """
        return pulumi.get(self, "bypass_network_lists")

    @bypass_network_lists.setter
    def bypass_network_lists(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "bypass_network_lists", value)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Input[int]:
        """
        . Unique identifier of the security configuration associated with the network bypass lists being modified.
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "config_id", value)


@pulumi.input_type
class _AppSecByPassNetworkListState:
    def __init__(__self__, *,
                 bypass_network_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 config_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering AppSecByPassNetworkList resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bypass_network_lists: . JSON array of network IDs that comprise the bypass list.
        :param pulumi.Input[int] config_id: . Unique identifier of the security configuration associated with the network bypass lists being modified.
        """
        if bypass_network_lists is not None:
            pulumi.set(__self__, "bypass_network_lists", bypass_network_lists)
        if config_id is not None:
            pulumi.set(__self__, "config_id", config_id)

    @property
    @pulumi.getter(name="bypassNetworkLists")
    def bypass_network_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        . JSON array of network IDs that comprise the bypass list.
        """
        return pulumi.get(self, "bypass_network_lists")

    @bypass_network_lists.setter
    def bypass_network_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bypass_network_lists", value)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[pulumi.Input[int]]:
        """
        . Unique identifier of the security configuration associated with the network bypass lists being modified.
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "config_id", value)


class AppSecByPassNetworkList(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bypass_network_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        **Scopes**: Security configuration

        Specifies the networks that appear on the bypass network list. Networks on this list are allowed to bypass the Web Application Firewall.

        Note that this resource is only applicable to WAP (Web Application Protector) configurations.

        **Related API Endpoint**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/bypass-network-lists](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putbypassnetworklistsforawapconfigversion)

        ## Example Usage

        Basic usage:

        ```python
        import pulumi
        import pulumi_akamai as akamai

        configuration = akamai.get_app_sec_configuration(name="Documentation")
        bypass_network_lists = akamai.AppSecByPassNetworkList("bypassNetworkLists",
            config_id=configuration.config_id,
            bypass_network_lists=[
                "DocumentationNetworkList",
                "TrainingNetworkList",
            ])
        ```
        ## Output Options

        The following options can be used to determine the information returned, and how that returned information is formatted:

        - `output_text`. Tabular report showing the updated list of bypass network IDs.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bypass_network_lists: . JSON array of network IDs that comprise the bypass list.
        :param pulumi.Input[int] config_id: . Unique identifier of the security configuration associated with the network bypass lists being modified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppSecByPassNetworkListArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        **Scopes**: Security configuration

        Specifies the networks that appear on the bypass network list. Networks on this list are allowed to bypass the Web Application Firewall.

        Note that this resource is only applicable to WAP (Web Application Protector) configurations.

        **Related API Endpoint**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/bypass-network-lists](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putbypassnetworklistsforawapconfigversion)

        ## Example Usage

        Basic usage:

        ```python
        import pulumi
        import pulumi_akamai as akamai

        configuration = akamai.get_app_sec_configuration(name="Documentation")
        bypass_network_lists = akamai.AppSecByPassNetworkList("bypassNetworkLists",
            config_id=configuration.config_id,
            bypass_network_lists=[
                "DocumentationNetworkList",
                "TrainingNetworkList",
            ])
        ```
        ## Output Options

        The following options can be used to determine the information returned, and how that returned information is formatted:

        - `output_text`. Tabular report showing the updated list of bypass network IDs.

        :param str resource_name: The name of the resource.
        :param AppSecByPassNetworkListArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppSecByPassNetworkListArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bypass_network_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppSecByPassNetworkListArgs.__new__(AppSecByPassNetworkListArgs)

            if bypass_network_lists is None and not opts.urn:
                raise TypeError("Missing required property 'bypass_network_lists'")
            __props__.__dict__["bypass_network_lists"] = bypass_network_lists
            if config_id is None and not opts.urn:
                raise TypeError("Missing required property 'config_id'")
            __props__.__dict__["config_id"] = config_id
        super(AppSecByPassNetworkList, __self__).__init__(
            'akamai:index/appSecByPassNetworkList:AppSecByPassNetworkList',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bypass_network_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            config_id: Optional[pulumi.Input[int]] = None) -> 'AppSecByPassNetworkList':
        """
        Get an existing AppSecByPassNetworkList resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bypass_network_lists: . JSON array of network IDs that comprise the bypass list.
        :param pulumi.Input[int] config_id: . Unique identifier of the security configuration associated with the network bypass lists being modified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppSecByPassNetworkListState.__new__(_AppSecByPassNetworkListState)

        __props__.__dict__["bypass_network_lists"] = bypass_network_lists
        __props__.__dict__["config_id"] = config_id
        return AppSecByPassNetworkList(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bypassNetworkLists")
    def bypass_network_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        . JSON array of network IDs that comprise the bypass list.
        """
        return pulumi.get(self, "bypass_network_lists")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Output[int]:
        """
        . Unique identifier of the security configuration associated with the network bypass lists being modified.
        """
        return pulumi.get(self, "config_id")

