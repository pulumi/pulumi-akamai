# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CpsThirdPartyEnrollmentArgs', 'CpsThirdPartyEnrollment']

@pulumi.input_type
class CpsThirdPartyEnrollmentArgs:
    def __init__(__self__, *,
                 admin_contact: pulumi.Input['CpsThirdPartyEnrollmentAdminContactArgs'],
                 common_name: pulumi.Input[str],
                 contract_id: pulumi.Input[str],
                 csr: pulumi.Input['CpsThirdPartyEnrollmentCsrArgs'],
                 network_configuration: pulumi.Input['CpsThirdPartyEnrollmentNetworkConfigurationArgs'],
                 organization: pulumi.Input['CpsThirdPartyEnrollmentOrganizationArgs'],
                 secure_network: pulumi.Input[str],
                 sni_only: pulumi.Input[bool],
                 tech_contact: pulumi.Input['CpsThirdPartyEnrollmentTechContactArgs'],
                 acknowledge_pre_verification_warnings: Optional[pulumi.Input[bool]] = None,
                 allow_duplicate_common_name: Optional[pulumi.Input[bool]] = None,
                 auto_approve_warnings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 certificate_chain_type: Optional[pulumi.Input[str]] = None,
                 change_management: Optional[pulumi.Input[bool]] = None,
                 exclude_sans: Optional[pulumi.Input[bool]] = None,
                 sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 signature_algorithm: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CpsThirdPartyEnrollment resource.
        :param pulumi.Input['CpsThirdPartyEnrollmentAdminContactArgs'] admin_contact: Contact information for the certificate administrator at your company.
        :param pulumi.Input[str] common_name: (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
        :param pulumi.Input[str] contract_id: (Required) A contract's ID, optionally with the `ctr_` prefix.
        :param pulumi.Input['CpsThirdPartyEnrollmentCsrArgs'] csr: When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
        :param pulumi.Input['CpsThirdPartyEnrollmentNetworkConfigurationArgs'] network_configuration: The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
        :param pulumi.Input['CpsThirdPartyEnrollmentOrganizationArgs'] organization: Your organization information.
        :param pulumi.Input[str] secure_network: The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai's standard secure network, but it isn't PCI compliant. `enhanced-tls` deploys your certificate to Akamai's more secure network with PCI compliance capability.
        :param pulumi.Input[bool] sni_only: Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can't change this setting once an enrollment is created.
        :param pulumi.Input['CpsThirdPartyEnrollmentTechContactArgs'] tech_contact: The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can't reach the `admin_contact`.
        :param pulumi.Input[bool] acknowledge_pre_verification_warnings: Whether you want to automatically acknowledge the validation warnings related to the current job state and proceed with the change.
        :param pulumi.Input[bool] allow_duplicate_common_name: (Optional) Boolean. Set to `true` if you want to reuse a common name that's part of an existing enrollment.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] auto_approve_warnings: The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `get_cps_warnings` data source.
        :param pulumi.Input[str] certificate_chain_type: Certificate trust chain type.
        :param pulumi.Input[bool] change_management: Boolean. Set to `true` to have CPS deploy first to staging for testing purposes. To deploy the certificate to production, use the `acknowledge_change_management` argument in the `CpsUploadCertificate` resource. <br> If you don't use this option, CPS will automatically deploy the certificate to both networks.
        :param pulumi.Input[bool] exclude_sans: If set to `true`, then the SANs in the enrollment don't appear in the CSR that you send to your CA.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sans: Additional common names to create a Subject Alternative Names (SAN) list.
        :param pulumi.Input[str] signature_algorithm: The SHA function. Changing this value may require running terraform destroy, terraform apply
        """
        pulumi.set(__self__, "admin_contact", admin_contact)
        pulumi.set(__self__, "common_name", common_name)
        pulumi.set(__self__, "contract_id", contract_id)
        pulumi.set(__self__, "csr", csr)
        pulumi.set(__self__, "network_configuration", network_configuration)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "secure_network", secure_network)
        pulumi.set(__self__, "sni_only", sni_only)
        pulumi.set(__self__, "tech_contact", tech_contact)
        if acknowledge_pre_verification_warnings is not None:
            pulumi.set(__self__, "acknowledge_pre_verification_warnings", acknowledge_pre_verification_warnings)
        if allow_duplicate_common_name is not None:
            pulumi.set(__self__, "allow_duplicate_common_name", allow_duplicate_common_name)
        if auto_approve_warnings is not None:
            pulumi.set(__self__, "auto_approve_warnings", auto_approve_warnings)
        if certificate_chain_type is not None:
            pulumi.set(__self__, "certificate_chain_type", certificate_chain_type)
        if change_management is not None:
            pulumi.set(__self__, "change_management", change_management)
        if exclude_sans is not None:
            pulumi.set(__self__, "exclude_sans", exclude_sans)
        if sans is not None:
            pulumi.set(__self__, "sans", sans)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)

    @property
    @pulumi.getter(name="adminContact")
    def admin_contact(self) -> pulumi.Input['CpsThirdPartyEnrollmentAdminContactArgs']:
        """
        Contact information for the certificate administrator at your company.
        """
        return pulumi.get(self, "admin_contact")

    @admin_contact.setter
    def admin_contact(self, value: pulumi.Input['CpsThirdPartyEnrollmentAdminContactArgs']):
        pulumi.set(self, "admin_contact", value)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> pulumi.Input[str]:
        """
        (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> pulumi.Input[str]:
        """
        (Required) A contract's ID, optionally with the `ctr_` prefix.
        """
        return pulumi.get(self, "contract_id")

    @contract_id.setter
    def contract_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "contract_id", value)

    @property
    @pulumi.getter
    def csr(self) -> pulumi.Input['CpsThirdPartyEnrollmentCsrArgs']:
        """
        When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
        """
        return pulumi.get(self, "csr")

    @csr.setter
    def csr(self, value: pulumi.Input['CpsThirdPartyEnrollmentCsrArgs']):
        pulumi.set(self, "csr", value)

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> pulumi.Input['CpsThirdPartyEnrollmentNetworkConfigurationArgs']:
        """
        The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
        """
        return pulumi.get(self, "network_configuration")

    @network_configuration.setter
    def network_configuration(self, value: pulumi.Input['CpsThirdPartyEnrollmentNetworkConfigurationArgs']):
        pulumi.set(self, "network_configuration", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input['CpsThirdPartyEnrollmentOrganizationArgs']:
        """
        Your organization information.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input['CpsThirdPartyEnrollmentOrganizationArgs']):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="secureNetwork")
    def secure_network(self) -> pulumi.Input[str]:
        """
        The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai's standard secure network, but it isn't PCI compliant. `enhanced-tls` deploys your certificate to Akamai's more secure network with PCI compliance capability.
        """
        return pulumi.get(self, "secure_network")

    @secure_network.setter
    def secure_network(self, value: pulumi.Input[str]):
        pulumi.set(self, "secure_network", value)

    @property
    @pulumi.getter(name="sniOnly")
    def sni_only(self) -> pulumi.Input[bool]:
        """
        Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can't change this setting once an enrollment is created.
        """
        return pulumi.get(self, "sni_only")

    @sni_only.setter
    def sni_only(self, value: pulumi.Input[bool]):
        pulumi.set(self, "sni_only", value)

    @property
    @pulumi.getter(name="techContact")
    def tech_contact(self) -> pulumi.Input['CpsThirdPartyEnrollmentTechContactArgs']:
        """
        The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can't reach the `admin_contact`.
        """
        return pulumi.get(self, "tech_contact")

    @tech_contact.setter
    def tech_contact(self, value: pulumi.Input['CpsThirdPartyEnrollmentTechContactArgs']):
        pulumi.set(self, "tech_contact", value)

    @property
    @pulumi.getter(name="acknowledgePreVerificationWarnings")
    def acknowledge_pre_verification_warnings(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether you want to automatically acknowledge the validation warnings related to the current job state and proceed with the change.
        """
        return pulumi.get(self, "acknowledge_pre_verification_warnings")

    @acknowledge_pre_verification_warnings.setter
    def acknowledge_pre_verification_warnings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "acknowledge_pre_verification_warnings", value)

    @property
    @pulumi.getter(name="allowDuplicateCommonName")
    def allow_duplicate_common_name(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Boolean. Set to `true` if you want to reuse a common name that's part of an existing enrollment.
        """
        return pulumi.get(self, "allow_duplicate_common_name")

    @allow_duplicate_common_name.setter
    def allow_duplicate_common_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_duplicate_common_name", value)

    @property
    @pulumi.getter(name="autoApproveWarnings")
    def auto_approve_warnings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `get_cps_warnings` data source.
        """
        return pulumi.get(self, "auto_approve_warnings")

    @auto_approve_warnings.setter
    def auto_approve_warnings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "auto_approve_warnings", value)

    @property
    @pulumi.getter(name="certificateChainType")
    def certificate_chain_type(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate trust chain type.
        """
        return pulumi.get(self, "certificate_chain_type")

    @certificate_chain_type.setter
    def certificate_chain_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_chain_type", value)

    @property
    @pulumi.getter(name="changeManagement")
    def change_management(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. Set to `true` to have CPS deploy first to staging for testing purposes. To deploy the certificate to production, use the `acknowledge_change_management` argument in the `CpsUploadCertificate` resource. <br> If you don't use this option, CPS will automatically deploy the certificate to both networks.
        """
        return pulumi.get(self, "change_management")

    @change_management.setter
    def change_management(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "change_management", value)

    @property
    @pulumi.getter(name="excludeSans")
    def exclude_sans(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to `true`, then the SANs in the enrollment don't appear in the CSR that you send to your CA.
        """
        return pulumi.get(self, "exclude_sans")

    @exclude_sans.setter
    def exclude_sans(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_sans", value)

    @property
    @pulumi.getter
    def sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Additional common names to create a Subject Alternative Names (SAN) list.
        """
        return pulumi.get(self, "sans")

    @sans.setter
    def sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sans", value)

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The SHA function. Changing this value may require running terraform destroy, terraform apply
        """
        return pulumi.get(self, "signature_algorithm")

    @signature_algorithm.setter
    def signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature_algorithm", value)


@pulumi.input_type
class _CpsThirdPartyEnrollmentState:
    def __init__(__self__, *,
                 acknowledge_pre_verification_warnings: Optional[pulumi.Input[bool]] = None,
                 admin_contact: Optional[pulumi.Input['CpsThirdPartyEnrollmentAdminContactArgs']] = None,
                 allow_duplicate_common_name: Optional[pulumi.Input[bool]] = None,
                 auto_approve_warnings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 certificate_chain_type: Optional[pulumi.Input[str]] = None,
                 change_management: Optional[pulumi.Input[bool]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 contract_id: Optional[pulumi.Input[str]] = None,
                 csr: Optional[pulumi.Input['CpsThirdPartyEnrollmentCsrArgs']] = None,
                 exclude_sans: Optional[pulumi.Input[bool]] = None,
                 network_configuration: Optional[pulumi.Input['CpsThirdPartyEnrollmentNetworkConfigurationArgs']] = None,
                 organization: Optional[pulumi.Input['CpsThirdPartyEnrollmentOrganizationArgs']] = None,
                 sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secure_network: Optional[pulumi.Input[str]] = None,
                 signature_algorithm: Optional[pulumi.Input[str]] = None,
                 sni_only: Optional[pulumi.Input[bool]] = None,
                 tech_contact: Optional[pulumi.Input['CpsThirdPartyEnrollmentTechContactArgs']] = None):
        """
        Input properties used for looking up and filtering CpsThirdPartyEnrollment resources.
        :param pulumi.Input[bool] acknowledge_pre_verification_warnings: Whether you want to automatically acknowledge the validation warnings related to the current job state and proceed with the change.
        :param pulumi.Input['CpsThirdPartyEnrollmentAdminContactArgs'] admin_contact: Contact information for the certificate administrator at your company.
        :param pulumi.Input[bool] allow_duplicate_common_name: (Optional) Boolean. Set to `true` if you want to reuse a common name that's part of an existing enrollment.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] auto_approve_warnings: The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `get_cps_warnings` data source.
        :param pulumi.Input[str] certificate_chain_type: Certificate trust chain type.
        :param pulumi.Input[bool] change_management: Boolean. Set to `true` to have CPS deploy first to staging for testing purposes. To deploy the certificate to production, use the `acknowledge_change_management` argument in the `CpsUploadCertificate` resource. <br> If you don't use this option, CPS will automatically deploy the certificate to both networks.
        :param pulumi.Input[str] common_name: (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
        :param pulumi.Input[str] contract_id: (Required) A contract's ID, optionally with the `ctr_` prefix.
        :param pulumi.Input['CpsThirdPartyEnrollmentCsrArgs'] csr: When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
        :param pulumi.Input[bool] exclude_sans: If set to `true`, then the SANs in the enrollment don't appear in the CSR that you send to your CA.
        :param pulumi.Input['CpsThirdPartyEnrollmentNetworkConfigurationArgs'] network_configuration: The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
        :param pulumi.Input['CpsThirdPartyEnrollmentOrganizationArgs'] organization: Your organization information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sans: Additional common names to create a Subject Alternative Names (SAN) list.
        :param pulumi.Input[str] secure_network: The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai's standard secure network, but it isn't PCI compliant. `enhanced-tls` deploys your certificate to Akamai's more secure network with PCI compliance capability.
        :param pulumi.Input[str] signature_algorithm: The SHA function. Changing this value may require running terraform destroy, terraform apply
        :param pulumi.Input[bool] sni_only: Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can't change this setting once an enrollment is created.
        :param pulumi.Input['CpsThirdPartyEnrollmentTechContactArgs'] tech_contact: The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can't reach the `admin_contact`.
        """
        if acknowledge_pre_verification_warnings is not None:
            pulumi.set(__self__, "acknowledge_pre_verification_warnings", acknowledge_pre_verification_warnings)
        if admin_contact is not None:
            pulumi.set(__self__, "admin_contact", admin_contact)
        if allow_duplicate_common_name is not None:
            pulumi.set(__self__, "allow_duplicate_common_name", allow_duplicate_common_name)
        if auto_approve_warnings is not None:
            pulumi.set(__self__, "auto_approve_warnings", auto_approve_warnings)
        if certificate_chain_type is not None:
            pulumi.set(__self__, "certificate_chain_type", certificate_chain_type)
        if change_management is not None:
            pulumi.set(__self__, "change_management", change_management)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if contract_id is not None:
            pulumi.set(__self__, "contract_id", contract_id)
        if csr is not None:
            pulumi.set(__self__, "csr", csr)
        if exclude_sans is not None:
            pulumi.set(__self__, "exclude_sans", exclude_sans)
        if network_configuration is not None:
            pulumi.set(__self__, "network_configuration", network_configuration)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if sans is not None:
            pulumi.set(__self__, "sans", sans)
        if secure_network is not None:
            pulumi.set(__self__, "secure_network", secure_network)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if sni_only is not None:
            pulumi.set(__self__, "sni_only", sni_only)
        if tech_contact is not None:
            pulumi.set(__self__, "tech_contact", tech_contact)

    @property
    @pulumi.getter(name="acknowledgePreVerificationWarnings")
    def acknowledge_pre_verification_warnings(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether you want to automatically acknowledge the validation warnings related to the current job state and proceed with the change.
        """
        return pulumi.get(self, "acknowledge_pre_verification_warnings")

    @acknowledge_pre_verification_warnings.setter
    def acknowledge_pre_verification_warnings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "acknowledge_pre_verification_warnings", value)

    @property
    @pulumi.getter(name="adminContact")
    def admin_contact(self) -> Optional[pulumi.Input['CpsThirdPartyEnrollmentAdminContactArgs']]:
        """
        Contact information for the certificate administrator at your company.
        """
        return pulumi.get(self, "admin_contact")

    @admin_contact.setter
    def admin_contact(self, value: Optional[pulumi.Input['CpsThirdPartyEnrollmentAdminContactArgs']]):
        pulumi.set(self, "admin_contact", value)

    @property
    @pulumi.getter(name="allowDuplicateCommonName")
    def allow_duplicate_common_name(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Boolean. Set to `true` if you want to reuse a common name that's part of an existing enrollment.
        """
        return pulumi.get(self, "allow_duplicate_common_name")

    @allow_duplicate_common_name.setter
    def allow_duplicate_common_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_duplicate_common_name", value)

    @property
    @pulumi.getter(name="autoApproveWarnings")
    def auto_approve_warnings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `get_cps_warnings` data source.
        """
        return pulumi.get(self, "auto_approve_warnings")

    @auto_approve_warnings.setter
    def auto_approve_warnings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "auto_approve_warnings", value)

    @property
    @pulumi.getter(name="certificateChainType")
    def certificate_chain_type(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate trust chain type.
        """
        return pulumi.get(self, "certificate_chain_type")

    @certificate_chain_type.setter
    def certificate_chain_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_chain_type", value)

    @property
    @pulumi.getter(name="changeManagement")
    def change_management(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. Set to `true` to have CPS deploy first to staging for testing purposes. To deploy the certificate to production, use the `acknowledge_change_management` argument in the `CpsUploadCertificate` resource. <br> If you don't use this option, CPS will automatically deploy the certificate to both networks.
        """
        return pulumi.get(self, "change_management")

    @change_management.setter
    def change_management(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "change_management", value)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) A contract's ID, optionally with the `ctr_` prefix.
        """
        return pulumi.get(self, "contract_id")

    @contract_id.setter
    def contract_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contract_id", value)

    @property
    @pulumi.getter
    def csr(self) -> Optional[pulumi.Input['CpsThirdPartyEnrollmentCsrArgs']]:
        """
        When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
        """
        return pulumi.get(self, "csr")

    @csr.setter
    def csr(self, value: Optional[pulumi.Input['CpsThirdPartyEnrollmentCsrArgs']]):
        pulumi.set(self, "csr", value)

    @property
    @pulumi.getter(name="excludeSans")
    def exclude_sans(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to `true`, then the SANs in the enrollment don't appear in the CSR that you send to your CA.
        """
        return pulumi.get(self, "exclude_sans")

    @exclude_sans.setter
    def exclude_sans(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_sans", value)

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> Optional[pulumi.Input['CpsThirdPartyEnrollmentNetworkConfigurationArgs']]:
        """
        The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
        """
        return pulumi.get(self, "network_configuration")

    @network_configuration.setter
    def network_configuration(self, value: Optional[pulumi.Input['CpsThirdPartyEnrollmentNetworkConfigurationArgs']]):
        pulumi.set(self, "network_configuration", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input['CpsThirdPartyEnrollmentOrganizationArgs']]:
        """
        Your organization information.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input['CpsThirdPartyEnrollmentOrganizationArgs']]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Additional common names to create a Subject Alternative Names (SAN) list.
        """
        return pulumi.get(self, "sans")

    @sans.setter
    def sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sans", value)

    @property
    @pulumi.getter(name="secureNetwork")
    def secure_network(self) -> Optional[pulumi.Input[str]]:
        """
        The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai's standard secure network, but it isn't PCI compliant. `enhanced-tls` deploys your certificate to Akamai's more secure network with PCI compliance capability.
        """
        return pulumi.get(self, "secure_network")

    @secure_network.setter
    def secure_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure_network", value)

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The SHA function. Changing this value may require running terraform destroy, terraform apply
        """
        return pulumi.get(self, "signature_algorithm")

    @signature_algorithm.setter
    def signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature_algorithm", value)

    @property
    @pulumi.getter(name="sniOnly")
    def sni_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can't change this setting once an enrollment is created.
        """
        return pulumi.get(self, "sni_only")

    @sni_only.setter
    def sni_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sni_only", value)

    @property
    @pulumi.getter(name="techContact")
    def tech_contact(self) -> Optional[pulumi.Input['CpsThirdPartyEnrollmentTechContactArgs']]:
        """
        The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can't reach the `admin_contact`.
        """
        return pulumi.get(self, "tech_contact")

    @tech_contact.setter
    def tech_contact(self, value: Optional[pulumi.Input['CpsThirdPartyEnrollmentTechContactArgs']]):
        pulumi.set(self, "tech_contact", value)


class CpsThirdPartyEnrollment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acknowledge_pre_verification_warnings: Optional[pulumi.Input[bool]] = None,
                 admin_contact: Optional[pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentAdminContactArgs']]] = None,
                 allow_duplicate_common_name: Optional[pulumi.Input[bool]] = None,
                 auto_approve_warnings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 certificate_chain_type: Optional[pulumi.Input[str]] = None,
                 change_management: Optional[pulumi.Input[bool]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 contract_id: Optional[pulumi.Input[str]] = None,
                 csr: Optional[pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentCsrArgs']]] = None,
                 exclude_sans: Optional[pulumi.Input[bool]] = None,
                 network_configuration: Optional[pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentNetworkConfigurationArgs']]] = None,
                 organization: Optional[pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentOrganizationArgs']]] = None,
                 sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secure_network: Optional[pulumi.Input[str]] = None,
                 signature_algorithm: Optional[pulumi.Input[str]] = None,
                 sni_only: Optional[pulumi.Input[bool]] = None,
                 tech_contact: Optional[pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentTechContactArgs']]] = None,
                 __props__=None):
        """
        ## Example Usage

        Basic usage:

        ```python
        import pulumi
        import pulumi_akamai as akamai

        enrollment = akamai.CpsThirdPartyEnrollment("enrollment",
            contract_id="C-0N7RAC7",
            common_name="*.example.com",
            secure_network="enhanced-tls",
            sni_only=True,
            auto_approve_warnings=[
                "DNS_NAME_LONGER_THEN_255_CHARS",
                "CERTIFICATE_EXPIRATION_DATE_BEYOND_MAX_DAYS",
                "TRUST_CHAIN_EMPTY_AND_CERTIFICATE_SIGNED_BY_NON_STANDARD_ROOT",
            ],
            signature_algorithm="SHA-256",
            admin_contact=akamai.CpsThirdPartyEnrollmentAdminContactArgs(
                first_name="Mario",
                last_name="Rossi",
                phone="+1-311-555-2368",
                email="mrossi@example.com",
                address_line_one="150 Broadway",
                city="Cambridge",
                country_code="US",
                organization="Example Corp.",
                postal_code="02142",
                region="MA",
                title="Administrator",
            ),
            tech_contact=akamai.CpsThirdPartyEnrollmentTechContactArgs(
                first_name="Juan",
                last_name="Perez",
                phone="+1-311-555-2369",
                email="jperez@example.com",
                address_line_one="150 Broadway",
                city="Cambridge",
                country_code="US",
                organization="Example Corp.",
                postal_code="02142",
                region="MA",
                title="Administrator",
            ),
            csr=akamai.CpsThirdPartyEnrollmentCsrArgs(
                country_code="US",
                city="Cambridge",
                organization="Example Corp.",
                organizational_unit="Corp IT",
                state="MA",
            ),
            network_configuration=akamai.CpsThirdPartyEnrollmentNetworkConfigurationArgs(
                disallowed_tls_versions=[
                    "TLSv1",
                    "TLSv1_1",
                ],
                clone_dns_names=False,
                geography="core",
                ocsp_stapling="on",
                preferred_ciphers="ak-akamai-default",
                must_have_ciphers="ak-akamai-default",
                quic_enabled=False,
            ),
            organization=akamai.CpsThirdPartyEnrollmentOrganizationArgs(
                name="Example Corp.",
                phone="+1-311-555-2370",
                address_line_one="150 Broadway",
                city="Cambridge",
                country_code="US",
                postal_code="02142",
                region="MA",
            ))
        pulumi.export("enrollmentId", enrollment.id)
        ```
        ## Attributes reference

        The resource returns this attribute:

        * `id` - The unique identifier for this enrollment.

        ## Import

        Basic Usagehcl resource "akamai_cps_third_party_enrollment" "example" { (resource arguments) } You can import your Akamai third-party enrollment using a comma-delimited string of the enrollment ID and

         contract ID, optionally with the `ctr_` prefix. You have to enter the IDs in this order`enrollment_id,contract_id` For example

        ```sh
         $ pulumi import akamai:index/cpsThirdPartyEnrollment:CpsThirdPartyEnrollment example 12345,1-AB123
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] acknowledge_pre_verification_warnings: Whether you want to automatically acknowledge the validation warnings related to the current job state and proceed with the change.
        :param pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentAdminContactArgs']] admin_contact: Contact information for the certificate administrator at your company.
        :param pulumi.Input[bool] allow_duplicate_common_name: (Optional) Boolean. Set to `true` if you want to reuse a common name that's part of an existing enrollment.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] auto_approve_warnings: The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `get_cps_warnings` data source.
        :param pulumi.Input[str] certificate_chain_type: Certificate trust chain type.
        :param pulumi.Input[bool] change_management: Boolean. Set to `true` to have CPS deploy first to staging for testing purposes. To deploy the certificate to production, use the `acknowledge_change_management` argument in the `CpsUploadCertificate` resource. <br> If you don't use this option, CPS will automatically deploy the certificate to both networks.
        :param pulumi.Input[str] common_name: (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
        :param pulumi.Input[str] contract_id: (Required) A contract's ID, optionally with the `ctr_` prefix.
        :param pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentCsrArgs']] csr: When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
        :param pulumi.Input[bool] exclude_sans: If set to `true`, then the SANs in the enrollment don't appear in the CSR that you send to your CA.
        :param pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentNetworkConfigurationArgs']] network_configuration: The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
        :param pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentOrganizationArgs']] organization: Your organization information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sans: Additional common names to create a Subject Alternative Names (SAN) list.
        :param pulumi.Input[str] secure_network: The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai's standard secure network, but it isn't PCI compliant. `enhanced-tls` deploys your certificate to Akamai's more secure network with PCI compliance capability.
        :param pulumi.Input[str] signature_algorithm: The SHA function. Changing this value may require running terraform destroy, terraform apply
        :param pulumi.Input[bool] sni_only: Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can't change this setting once an enrollment is created.
        :param pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentTechContactArgs']] tech_contact: The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can't reach the `admin_contact`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CpsThirdPartyEnrollmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        Basic usage:

        ```python
        import pulumi
        import pulumi_akamai as akamai

        enrollment = akamai.CpsThirdPartyEnrollment("enrollment",
            contract_id="C-0N7RAC7",
            common_name="*.example.com",
            secure_network="enhanced-tls",
            sni_only=True,
            auto_approve_warnings=[
                "DNS_NAME_LONGER_THEN_255_CHARS",
                "CERTIFICATE_EXPIRATION_DATE_BEYOND_MAX_DAYS",
                "TRUST_CHAIN_EMPTY_AND_CERTIFICATE_SIGNED_BY_NON_STANDARD_ROOT",
            ],
            signature_algorithm="SHA-256",
            admin_contact=akamai.CpsThirdPartyEnrollmentAdminContactArgs(
                first_name="Mario",
                last_name="Rossi",
                phone="+1-311-555-2368",
                email="mrossi@example.com",
                address_line_one="150 Broadway",
                city="Cambridge",
                country_code="US",
                organization="Example Corp.",
                postal_code="02142",
                region="MA",
                title="Administrator",
            ),
            tech_contact=akamai.CpsThirdPartyEnrollmentTechContactArgs(
                first_name="Juan",
                last_name="Perez",
                phone="+1-311-555-2369",
                email="jperez@example.com",
                address_line_one="150 Broadway",
                city="Cambridge",
                country_code="US",
                organization="Example Corp.",
                postal_code="02142",
                region="MA",
                title="Administrator",
            ),
            csr=akamai.CpsThirdPartyEnrollmentCsrArgs(
                country_code="US",
                city="Cambridge",
                organization="Example Corp.",
                organizational_unit="Corp IT",
                state="MA",
            ),
            network_configuration=akamai.CpsThirdPartyEnrollmentNetworkConfigurationArgs(
                disallowed_tls_versions=[
                    "TLSv1",
                    "TLSv1_1",
                ],
                clone_dns_names=False,
                geography="core",
                ocsp_stapling="on",
                preferred_ciphers="ak-akamai-default",
                must_have_ciphers="ak-akamai-default",
                quic_enabled=False,
            ),
            organization=akamai.CpsThirdPartyEnrollmentOrganizationArgs(
                name="Example Corp.",
                phone="+1-311-555-2370",
                address_line_one="150 Broadway",
                city="Cambridge",
                country_code="US",
                postal_code="02142",
                region="MA",
            ))
        pulumi.export("enrollmentId", enrollment.id)
        ```
        ## Attributes reference

        The resource returns this attribute:

        * `id` - The unique identifier for this enrollment.

        ## Import

        Basic Usagehcl resource "akamai_cps_third_party_enrollment" "example" { (resource arguments) } You can import your Akamai third-party enrollment using a comma-delimited string of the enrollment ID and

         contract ID, optionally with the `ctr_` prefix. You have to enter the IDs in this order`enrollment_id,contract_id` For example

        ```sh
         $ pulumi import akamai:index/cpsThirdPartyEnrollment:CpsThirdPartyEnrollment example 12345,1-AB123
        ```

        :param str resource_name: The name of the resource.
        :param CpsThirdPartyEnrollmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CpsThirdPartyEnrollmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acknowledge_pre_verification_warnings: Optional[pulumi.Input[bool]] = None,
                 admin_contact: Optional[pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentAdminContactArgs']]] = None,
                 allow_duplicate_common_name: Optional[pulumi.Input[bool]] = None,
                 auto_approve_warnings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 certificate_chain_type: Optional[pulumi.Input[str]] = None,
                 change_management: Optional[pulumi.Input[bool]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 contract_id: Optional[pulumi.Input[str]] = None,
                 csr: Optional[pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentCsrArgs']]] = None,
                 exclude_sans: Optional[pulumi.Input[bool]] = None,
                 network_configuration: Optional[pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentNetworkConfigurationArgs']]] = None,
                 organization: Optional[pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentOrganizationArgs']]] = None,
                 sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secure_network: Optional[pulumi.Input[str]] = None,
                 signature_algorithm: Optional[pulumi.Input[str]] = None,
                 sni_only: Optional[pulumi.Input[bool]] = None,
                 tech_contact: Optional[pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentTechContactArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CpsThirdPartyEnrollmentArgs.__new__(CpsThirdPartyEnrollmentArgs)

            __props__.__dict__["acknowledge_pre_verification_warnings"] = acknowledge_pre_verification_warnings
            if admin_contact is None and not opts.urn:
                raise TypeError("Missing required property 'admin_contact'")
            __props__.__dict__["admin_contact"] = admin_contact
            __props__.__dict__["allow_duplicate_common_name"] = allow_duplicate_common_name
            __props__.__dict__["auto_approve_warnings"] = auto_approve_warnings
            __props__.__dict__["certificate_chain_type"] = certificate_chain_type
            __props__.__dict__["change_management"] = change_management
            if common_name is None and not opts.urn:
                raise TypeError("Missing required property 'common_name'")
            __props__.__dict__["common_name"] = common_name
            if contract_id is None and not opts.urn:
                raise TypeError("Missing required property 'contract_id'")
            __props__.__dict__["contract_id"] = contract_id
            if csr is None and not opts.urn:
                raise TypeError("Missing required property 'csr'")
            __props__.__dict__["csr"] = csr
            __props__.__dict__["exclude_sans"] = exclude_sans
            if network_configuration is None and not opts.urn:
                raise TypeError("Missing required property 'network_configuration'")
            __props__.__dict__["network_configuration"] = network_configuration
            if organization is None and not opts.urn:
                raise TypeError("Missing required property 'organization'")
            __props__.__dict__["organization"] = organization
            __props__.__dict__["sans"] = sans
            if secure_network is None and not opts.urn:
                raise TypeError("Missing required property 'secure_network'")
            __props__.__dict__["secure_network"] = secure_network
            __props__.__dict__["signature_algorithm"] = signature_algorithm
            if sni_only is None and not opts.urn:
                raise TypeError("Missing required property 'sni_only'")
            __props__.__dict__["sni_only"] = sni_only
            if tech_contact is None and not opts.urn:
                raise TypeError("Missing required property 'tech_contact'")
            __props__.__dict__["tech_contact"] = tech_contact
        super(CpsThirdPartyEnrollment, __self__).__init__(
            'akamai:index/cpsThirdPartyEnrollment:CpsThirdPartyEnrollment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acknowledge_pre_verification_warnings: Optional[pulumi.Input[bool]] = None,
            admin_contact: Optional[pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentAdminContactArgs']]] = None,
            allow_duplicate_common_name: Optional[pulumi.Input[bool]] = None,
            auto_approve_warnings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            certificate_chain_type: Optional[pulumi.Input[str]] = None,
            change_management: Optional[pulumi.Input[bool]] = None,
            common_name: Optional[pulumi.Input[str]] = None,
            contract_id: Optional[pulumi.Input[str]] = None,
            csr: Optional[pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentCsrArgs']]] = None,
            exclude_sans: Optional[pulumi.Input[bool]] = None,
            network_configuration: Optional[pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentNetworkConfigurationArgs']]] = None,
            organization: Optional[pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentOrganizationArgs']]] = None,
            sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            secure_network: Optional[pulumi.Input[str]] = None,
            signature_algorithm: Optional[pulumi.Input[str]] = None,
            sni_only: Optional[pulumi.Input[bool]] = None,
            tech_contact: Optional[pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentTechContactArgs']]] = None) -> 'CpsThirdPartyEnrollment':
        """
        Get an existing CpsThirdPartyEnrollment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] acknowledge_pre_verification_warnings: Whether you want to automatically acknowledge the validation warnings related to the current job state and proceed with the change.
        :param pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentAdminContactArgs']] admin_contact: Contact information for the certificate administrator at your company.
        :param pulumi.Input[bool] allow_duplicate_common_name: (Optional) Boolean. Set to `true` if you want to reuse a common name that's part of an existing enrollment.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] auto_approve_warnings: The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `get_cps_warnings` data source.
        :param pulumi.Input[str] certificate_chain_type: Certificate trust chain type.
        :param pulumi.Input[bool] change_management: Boolean. Set to `true` to have CPS deploy first to staging for testing purposes. To deploy the certificate to production, use the `acknowledge_change_management` argument in the `CpsUploadCertificate` resource. <br> If you don't use this option, CPS will automatically deploy the certificate to both networks.
        :param pulumi.Input[str] common_name: (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
        :param pulumi.Input[str] contract_id: (Required) A contract's ID, optionally with the `ctr_` prefix.
        :param pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentCsrArgs']] csr: When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
        :param pulumi.Input[bool] exclude_sans: If set to `true`, then the SANs in the enrollment don't appear in the CSR that you send to your CA.
        :param pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentNetworkConfigurationArgs']] network_configuration: The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
        :param pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentOrganizationArgs']] organization: Your organization information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sans: Additional common names to create a Subject Alternative Names (SAN) list.
        :param pulumi.Input[str] secure_network: The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai's standard secure network, but it isn't PCI compliant. `enhanced-tls` deploys your certificate to Akamai's more secure network with PCI compliance capability.
        :param pulumi.Input[str] signature_algorithm: The SHA function. Changing this value may require running terraform destroy, terraform apply
        :param pulumi.Input[bool] sni_only: Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can't change this setting once an enrollment is created.
        :param pulumi.Input[pulumi.InputType['CpsThirdPartyEnrollmentTechContactArgs']] tech_contact: The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can't reach the `admin_contact`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CpsThirdPartyEnrollmentState.__new__(_CpsThirdPartyEnrollmentState)

        __props__.__dict__["acknowledge_pre_verification_warnings"] = acknowledge_pre_verification_warnings
        __props__.__dict__["admin_contact"] = admin_contact
        __props__.__dict__["allow_duplicate_common_name"] = allow_duplicate_common_name
        __props__.__dict__["auto_approve_warnings"] = auto_approve_warnings
        __props__.__dict__["certificate_chain_type"] = certificate_chain_type
        __props__.__dict__["change_management"] = change_management
        __props__.__dict__["common_name"] = common_name
        __props__.__dict__["contract_id"] = contract_id
        __props__.__dict__["csr"] = csr
        __props__.__dict__["exclude_sans"] = exclude_sans
        __props__.__dict__["network_configuration"] = network_configuration
        __props__.__dict__["organization"] = organization
        __props__.__dict__["sans"] = sans
        __props__.__dict__["secure_network"] = secure_network
        __props__.__dict__["signature_algorithm"] = signature_algorithm
        __props__.__dict__["sni_only"] = sni_only
        __props__.__dict__["tech_contact"] = tech_contact
        return CpsThirdPartyEnrollment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acknowledgePreVerificationWarnings")
    def acknowledge_pre_verification_warnings(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether you want to automatically acknowledge the validation warnings related to the current job state and proceed with the change.
        """
        return pulumi.get(self, "acknowledge_pre_verification_warnings")

    @property
    @pulumi.getter(name="adminContact")
    def admin_contact(self) -> pulumi.Output['outputs.CpsThirdPartyEnrollmentAdminContact']:
        """
        Contact information for the certificate administrator at your company.
        """
        return pulumi.get(self, "admin_contact")

    @property
    @pulumi.getter(name="allowDuplicateCommonName")
    def allow_duplicate_common_name(self) -> pulumi.Output[Optional[bool]]:
        """
        (Optional) Boolean. Set to `true` if you want to reuse a common name that's part of an existing enrollment.
        """
        return pulumi.get(self, "allow_duplicate_common_name")

    @property
    @pulumi.getter(name="autoApproveWarnings")
    def auto_approve_warnings(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `get_cps_warnings` data source.
        """
        return pulumi.get(self, "auto_approve_warnings")

    @property
    @pulumi.getter(name="certificateChainType")
    def certificate_chain_type(self) -> pulumi.Output[Optional[str]]:
        """
        Certificate trust chain type.
        """
        return pulumi.get(self, "certificate_chain_type")

    @property
    @pulumi.getter(name="changeManagement")
    def change_management(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean. Set to `true` to have CPS deploy first to staging for testing purposes. To deploy the certificate to production, use the `acknowledge_change_management` argument in the `CpsUploadCertificate` resource. <br> If you don't use this option, CPS will automatically deploy the certificate to both networks.
        """
        return pulumi.get(self, "change_management")

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> pulumi.Output[str]:
        """
        (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
        """
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> pulumi.Output[str]:
        """
        (Required) A contract's ID, optionally with the `ctr_` prefix.
        """
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter
    def csr(self) -> pulumi.Output['outputs.CpsThirdPartyEnrollmentCsr']:
        """
        When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
        """
        return pulumi.get(self, "csr")

    @property
    @pulumi.getter(name="excludeSans")
    def exclude_sans(self) -> pulumi.Output[Optional[bool]]:
        """
        If set to `true`, then the SANs in the enrollment don't appear in the CSR that you send to your CA.
        """
        return pulumi.get(self, "exclude_sans")

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> pulumi.Output['outputs.CpsThirdPartyEnrollmentNetworkConfiguration']:
        """
        The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
        """
        return pulumi.get(self, "network_configuration")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output['outputs.CpsThirdPartyEnrollmentOrganization']:
        """
        Your organization information.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def sans(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Additional common names to create a Subject Alternative Names (SAN) list.
        """
        return pulumi.get(self, "sans")

    @property
    @pulumi.getter(name="secureNetwork")
    def secure_network(self) -> pulumi.Output[str]:
        """
        The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai's standard secure network, but it isn't PCI compliant. `enhanced-tls` deploys your certificate to Akamai's more secure network with PCI compliance capability.
        """
        return pulumi.get(self, "secure_network")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> pulumi.Output[Optional[str]]:
        """
        The SHA function. Changing this value may require running terraform destroy, terraform apply
        """
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter(name="sniOnly")
    def sni_only(self) -> pulumi.Output[bool]:
        """
        Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can't change this setting once an enrollment is created.
        """
        return pulumi.get(self, "sni_only")

    @property
    @pulumi.getter(name="techContact")
    def tech_contact(self) -> pulumi.Output['outputs.CpsThirdPartyEnrollmentTechContact']:
        """
        The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can't reach the `admin_contact`.
        """
        return pulumi.get(self, "tech_contact")

