# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetPropertyRulesTemplateResult',
    'AwaitableGetPropertyRulesTemplateResult',
    'get_property_rules_template',
    'get_property_rules_template_output',
]

@pulumi.output_type
class GetPropertyRulesTemplateResult:
    """
    A collection of values returned by getPropertyRulesTemplate.
    """
    def __init__(__self__, id=None, json=None, template_file=None, templates=None, var_definition_file=None, var_values_file=None, variables=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if json and not isinstance(json, str):
            raise TypeError("Expected argument 'json' to be a str")
        pulumi.set(__self__, "json", json)
        if template_file and not isinstance(template_file, str):
            raise TypeError("Expected argument 'template_file' to be a str")
        pulumi.set(__self__, "template_file", template_file)
        if templates and not isinstance(templates, list):
            raise TypeError("Expected argument 'templates' to be a list")
        pulumi.set(__self__, "templates", templates)
        if var_definition_file and not isinstance(var_definition_file, str):
            raise TypeError("Expected argument 'var_definition_file' to be a str")
        pulumi.set(__self__, "var_definition_file", var_definition_file)
        if var_values_file and not isinstance(var_values_file, str):
            raise TypeError("Expected argument 'var_values_file' to be a str")
        pulumi.set(__self__, "var_values_file", var_values_file)
        if variables and not isinstance(variables, list):
            raise TypeError("Expected argument 'variables' to be a list")
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def json(self) -> str:
        return pulumi.get(self, "json")

    @property
    @pulumi.getter(name="templateFile")
    def template_file(self) -> Optional[str]:
        return pulumi.get(self, "template_file")

    @property
    @pulumi.getter
    def templates(self) -> Optional[Sequence['outputs.GetPropertyRulesTemplateTemplateResult']]:
        return pulumi.get(self, "templates")

    @property
    @pulumi.getter(name="varDefinitionFile")
    def var_definition_file(self) -> Optional[str]:
        return pulumi.get(self, "var_definition_file")

    @property
    @pulumi.getter(name="varValuesFile")
    def var_values_file(self) -> Optional[str]:
        return pulumi.get(self, "var_values_file")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetPropertyRulesTemplateVariableResult']]:
        return pulumi.get(self, "variables")


class AwaitableGetPropertyRulesTemplateResult(GetPropertyRulesTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPropertyRulesTemplateResult(
            id=self.id,
            json=self.json,
            template_file=self.template_file,
            templates=self.templates,
            var_definition_file=self.var_definition_file,
            var_values_file=self.var_values_file,
            variables=self.variables)


def get_property_rules_template(template_file: Optional[str] = None,
                                templates: Optional[Sequence[pulumi.InputType['GetPropertyRulesTemplateTemplateArgs']]] = None,
                                var_definition_file: Optional[str] = None,
                                var_values_file: Optional[str] = None,
                                variables: Optional[Sequence[pulumi.InputType['GetPropertyRulesTemplateVariableArgs']]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPropertyRulesTemplateResult:
    """
    The `get_property_rules_template` data source lets you define a rule tree. A rule tree is a nested block of property rules in JSON format that includes match criteria and behaviors. You can break a rule tree out into smaller JSON  template files that cover individual rules.

    With this data source, you define which JSON template files to use for your property. You can also set values for variables.

    This data source uses the rule template format from the [Property Manager CLI](https://github.com/akamai/cli-property-manager#set-up-property-snippets).

    > You can define variables either by using the Property Manager CLI syntax or by using standard variables.

    ## How to work with JSON template files

    You have a few options when working with rule template files:

    * Use a single JSON file that includes all rules for the property.
    * Create separate JSON template files for each rule and store them in the `property-snippets` directory.
    * Reference individual template files directly in this data source.

    ### Create a set of JSON template files

    If you have a set of JSON template files you want to call:

    1. Put them all in a directory called `property-snippets`.
    2. Make sure the `property-snippets` folder only contains `.json` files.
    3. Add the `template_dir` argument. For example: `template_dir = "property-snippets/"`.

    > This directory name is different from the one required for the Property Manager CLI, which is called `config-snippets`.

    ## How to use property variables with a template

    You can also add variables to a template by using a string like `“${env.<variableName>}"`. These property variables follow the file structure and syntax used when [creating a pipeline in the Property Manager CLI](https://github.com/akamai/cli-property-manager#create-and-set-up-a-new-pipeline).

    You need to create these files when using property variables:

    * a `variableDefinitions.json` file to define your variables and their default values.
    * one or more `variables.json` files to define settings specific to an environment. <br> The file name should always be `variables.json`. If using multiple environments, set up a directory for each environment to store this file in.

    > Property variables are separate from variables.

    ## Example Usage

    ### JSON Template Files

    Here are some examples of how you can set up your JSON template files for use with this data source.
    ### Single JSON template that calls other templates

    Here's an example of a JSON template file with nested templates:

    ```python
    import pulumi
    ```
    ### Individual JSON rule template file

    Here’s a simple default rule example that you can include inside the `template_data` argument:

    ```python
    import pulumi
    ```
    ### Add Templates To The Data Source

    Here are some examples of how you can call your JSON template files with this data source.
    ### Call individual template files with this data source

    This second example shows how to call a specific JSON template using the `template_data` field:

    ```python
    import pulumi
    import json
    import pulumi_akamai as akamai

    example_property_rules_template = akamai.get_property_rules_template(templates=[akamai.GetPropertyRulesTemplateTemplateArgs(
        template_data=json.dumps({
            "rules": {
                "name": "default",
                "children": ["#include:rules.json"],
            },
        }),
        template_dir="property-snippets/",
    )])
    example_property = akamai.Property("exampleProperty",
        contract_id=var["contractid"],
        group_id=var["groupid"],
        rule_format="v2020-03-04",
        rules=example_property_rules_template.json)
    ```
    ### Variables

    You can add variables individually or reference variable definition files.
    ## Attributes reference

    This data source returns this attribute:

    * `json` - The fully expanded template with variables and all nested templates resolved.


    :param str template_file: The absolute path to your top-level JSON template file. The top-level template combines smaller, nested JSON templates to form your property rule tree. This argument conflicts with the `template` argument.
    :param Sequence[pulumi.InputType['GetPropertyRulesTemplateTemplateArgs']] templates: The template you use in your configuration. This argument conflicts with the `template_file` argument.
    :param str var_definition_file: Required when using `var_values_file`. The absolute path to the file containing variable definitions and defaults. This argument conflicts with the `variables` argument.
    :param str var_values_file: Required when using `var_definition_file`. The absolute path to the file containing variable values. This argument conflicts with the `variables` argument.
    :param Sequence[pulumi.InputType['GetPropertyRulesTemplateVariableArgs']] variables: The definition of one or more variables. This argument conflicts with the `var_definition_file` and `var_values_file` arguments. A `variables` block includes:
    """
    __args__ = dict()
    __args__['templateFile'] = template_file
    __args__['templates'] = templates
    __args__['varDefinitionFile'] = var_definition_file
    __args__['varValuesFile'] = var_values_file
    __args__['variables'] = variables
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getPropertyRulesTemplate:getPropertyRulesTemplate', __args__, opts=opts, typ=GetPropertyRulesTemplateResult).value

    return AwaitableGetPropertyRulesTemplateResult(
        id=__ret__.id,
        json=__ret__.json,
        template_file=__ret__.template_file,
        templates=__ret__.templates,
        var_definition_file=__ret__.var_definition_file,
        var_values_file=__ret__.var_values_file,
        variables=__ret__.variables)


@_utilities.lift_output_func(get_property_rules_template)
def get_property_rules_template_output(template_file: Optional[pulumi.Input[Optional[str]]] = None,
                                       templates: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetPropertyRulesTemplateTemplateArgs']]]]] = None,
                                       var_definition_file: Optional[pulumi.Input[Optional[str]]] = None,
                                       var_values_file: Optional[pulumi.Input[Optional[str]]] = None,
                                       variables: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetPropertyRulesTemplateVariableArgs']]]]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPropertyRulesTemplateResult]:
    """
    The `get_property_rules_template` data source lets you define a rule tree. A rule tree is a nested block of property rules in JSON format that includes match criteria and behaviors. You can break a rule tree out into smaller JSON  template files that cover individual rules.

    With this data source, you define which JSON template files to use for your property. You can also set values for variables.

    This data source uses the rule template format from the [Property Manager CLI](https://github.com/akamai/cli-property-manager#set-up-property-snippets).

    > You can define variables either by using the Property Manager CLI syntax or by using standard variables.

    ## How to work with JSON template files

    You have a few options when working with rule template files:

    * Use a single JSON file that includes all rules for the property.
    * Create separate JSON template files for each rule and store them in the `property-snippets` directory.
    * Reference individual template files directly in this data source.

    ### Create a set of JSON template files

    If you have a set of JSON template files you want to call:

    1. Put them all in a directory called `property-snippets`.
    2. Make sure the `property-snippets` folder only contains `.json` files.
    3. Add the `template_dir` argument. For example: `template_dir = "property-snippets/"`.

    > This directory name is different from the one required for the Property Manager CLI, which is called `config-snippets`.

    ## How to use property variables with a template

    You can also add variables to a template by using a string like `“${env.<variableName>}"`. These property variables follow the file structure and syntax used when [creating a pipeline in the Property Manager CLI](https://github.com/akamai/cli-property-manager#create-and-set-up-a-new-pipeline).

    You need to create these files when using property variables:

    * a `variableDefinitions.json` file to define your variables and their default values.
    * one or more `variables.json` files to define settings specific to an environment. <br> The file name should always be `variables.json`. If using multiple environments, set up a directory for each environment to store this file in.

    > Property variables are separate from variables.

    ## Example Usage

    ### JSON Template Files

    Here are some examples of how you can set up your JSON template files for use with this data source.
    ### Single JSON template that calls other templates

    Here's an example of a JSON template file with nested templates:

    ```python
    import pulumi
    ```
    ### Individual JSON rule template file

    Here’s a simple default rule example that you can include inside the `template_data` argument:

    ```python
    import pulumi
    ```
    ### Add Templates To The Data Source

    Here are some examples of how you can call your JSON template files with this data source.
    ### Call individual template files with this data source

    This second example shows how to call a specific JSON template using the `template_data` field:

    ```python
    import pulumi
    import json
    import pulumi_akamai as akamai

    example_property_rules_template = akamai.get_property_rules_template(templates=[akamai.GetPropertyRulesTemplateTemplateArgs(
        template_data=json.dumps({
            "rules": {
                "name": "default",
                "children": ["#include:rules.json"],
            },
        }),
        template_dir="property-snippets/",
    )])
    example_property = akamai.Property("exampleProperty",
        contract_id=var["contractid"],
        group_id=var["groupid"],
        rule_format="v2020-03-04",
        rules=example_property_rules_template.json)
    ```
    ### Variables

    You can add variables individually or reference variable definition files.
    ## Attributes reference

    This data source returns this attribute:

    * `json` - The fully expanded template with variables and all nested templates resolved.


    :param str template_file: The absolute path to your top-level JSON template file. The top-level template combines smaller, nested JSON templates to form your property rule tree. This argument conflicts with the `template` argument.
    :param Sequence[pulumi.InputType['GetPropertyRulesTemplateTemplateArgs']] templates: The template you use in your configuration. This argument conflicts with the `template_file` argument.
    :param str var_definition_file: Required when using `var_values_file`. The absolute path to the file containing variable definitions and defaults. This argument conflicts with the `variables` argument.
    :param str var_values_file: Required when using `var_definition_file`. The absolute path to the file containing variable values. This argument conflicts with the `variables` argument.
    :param Sequence[pulumi.InputType['GetPropertyRulesTemplateVariableArgs']] variables: The definition of one or more variables. This argument conflicts with the `var_definition_file` and `var_values_file` arguments. A `variables` block includes:
    """
    ...
