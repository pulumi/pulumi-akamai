# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'AppSecSiemSettingsExceptionsArgs',
    'AppSecSiemSettingsExceptionsArgsDict',
    'ClientlistListItemArgs',
    'ClientlistListItemArgsDict',
    'CloudAccessKeyCredentialsAArgs',
    'CloudAccessKeyCredentialsAArgsDict',
    'CloudAccessKeyCredentialsBArgs',
    'CloudAccessKeyCredentialsBArgsDict',
    'CloudAccessKeyNetworkConfigurationArgs',
    'CloudAccessKeyNetworkConfigurationArgsDict',
    'CloudAccessKeyTimeoutsArgs',
    'CloudAccessKeyTimeoutsArgsDict',
    'CloudletsApplicationLoadBalancerActivationTimeoutsArgs',
    'CloudletsApplicationLoadBalancerActivationTimeoutsArgsDict',
    'CloudletsApplicationLoadBalancerDataCenterArgs',
    'CloudletsApplicationLoadBalancerDataCenterArgsDict',
    'CloudletsApplicationLoadBalancerLivenessSettingsArgs',
    'CloudletsApplicationLoadBalancerLivenessSettingsArgsDict',
    'CloudletsPolicyActivationTimeoutsArgs',
    'CloudletsPolicyActivationTimeoutsArgsDict',
    'CloudletsPolicyTimeoutsArgs',
    'CloudletsPolicyTimeoutsArgsDict',
    'CloudwrapperActivationTimeoutsArgs',
    'CloudwrapperActivationTimeoutsArgsDict',
    'CloudwrapperConfigurationLocationArgs',
    'CloudwrapperConfigurationLocationArgsDict',
    'CloudwrapperConfigurationLocationCapacityArgs',
    'CloudwrapperConfigurationLocationCapacityArgsDict',
    'CloudwrapperConfigurationTimeoutsArgs',
    'CloudwrapperConfigurationTimeoutsArgsDict',
    'CpCodeTimeoutsArgs',
    'CpCodeTimeoutsArgsDict',
    'CpsDvEnrollmentAdminContactArgs',
    'CpsDvEnrollmentAdminContactArgsDict',
    'CpsDvEnrollmentCsrArgs',
    'CpsDvEnrollmentCsrArgsDict',
    'CpsDvEnrollmentDnsChallengeArgs',
    'CpsDvEnrollmentDnsChallengeArgsDict',
    'CpsDvEnrollmentHttpChallengeArgs',
    'CpsDvEnrollmentHttpChallengeArgsDict',
    'CpsDvEnrollmentNetworkConfigurationArgs',
    'CpsDvEnrollmentNetworkConfigurationArgsDict',
    'CpsDvEnrollmentNetworkConfigurationClientMutualAuthenticationArgs',
    'CpsDvEnrollmentNetworkConfigurationClientMutualAuthenticationArgsDict',
    'CpsDvEnrollmentOrganizationArgs',
    'CpsDvEnrollmentOrganizationArgsDict',
    'CpsDvEnrollmentTechContactArgs',
    'CpsDvEnrollmentTechContactArgsDict',
    'CpsDvEnrollmentTimeoutsArgs',
    'CpsDvEnrollmentTimeoutsArgsDict',
    'CpsDvValidationTimeoutsArgs',
    'CpsDvValidationTimeoutsArgsDict',
    'CpsThirdPartyEnrollmentAdminContactArgs',
    'CpsThirdPartyEnrollmentAdminContactArgsDict',
    'CpsThirdPartyEnrollmentCsrArgs',
    'CpsThirdPartyEnrollmentCsrArgsDict',
    'CpsThirdPartyEnrollmentNetworkConfigurationArgs',
    'CpsThirdPartyEnrollmentNetworkConfigurationArgsDict',
    'CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthenticationArgs',
    'CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthenticationArgsDict',
    'CpsThirdPartyEnrollmentOrganizationArgs',
    'CpsThirdPartyEnrollmentOrganizationArgsDict',
    'CpsThirdPartyEnrollmentTechContactArgs',
    'CpsThirdPartyEnrollmentTechContactArgsDict',
    'CpsThirdPartyEnrollmentTimeoutsArgs',
    'CpsThirdPartyEnrollmentTimeoutsArgsDict',
    'CpsUploadCertificateTimeoutsArgs',
    'CpsUploadCertificateTimeoutsArgsDict',
    'DatastreamAzureConnectorArgs',
    'DatastreamAzureConnectorArgsDict',
    'DatastreamDatadogConnectorArgs',
    'DatastreamDatadogConnectorArgsDict',
    'DatastreamDeliveryConfigurationArgs',
    'DatastreamDeliveryConfigurationArgsDict',
    'DatastreamDeliveryConfigurationFrequencyArgs',
    'DatastreamDeliveryConfigurationFrequencyArgsDict',
    'DatastreamElasticsearchConnectorArgs',
    'DatastreamElasticsearchConnectorArgsDict',
    'DatastreamGcsConnectorArgs',
    'DatastreamGcsConnectorArgsDict',
    'DatastreamHttpsConnectorArgs',
    'DatastreamHttpsConnectorArgsDict',
    'DatastreamLogglyConnectorArgs',
    'DatastreamLogglyConnectorArgsDict',
    'DatastreamNewRelicConnectorArgs',
    'DatastreamNewRelicConnectorArgsDict',
    'DatastreamOracleConnectorArgs',
    'DatastreamOracleConnectorArgsDict',
    'DatastreamS3ConnectorArgs',
    'DatastreamS3ConnectorArgsDict',
    'DatastreamSplunkConnectorArgs',
    'DatastreamSplunkConnectorArgsDict',
    'DatastreamSumologicConnectorArgs',
    'DatastreamSumologicConnectorArgsDict',
    'DnsZoneOutboundZoneTransferArgs',
    'DnsZoneOutboundZoneTransferArgsDict',
    'DnsZoneOutboundZoneTransferTsigKeyArgs',
    'DnsZoneOutboundZoneTransferTsigKeyArgsDict',
    'DnsZoneTsigKeyArgs',
    'DnsZoneTsigKeyArgsDict',
    'EdgeHostNameTimeoutsArgs',
    'EdgeHostNameTimeoutsArgsDict',
    'EdgeWorkerTimeoutsArgs',
    'EdgeWorkerTimeoutsArgsDict',
    'EdgeWorkersActivationTimeoutsArgs',
    'EdgeWorkersActivationTimeoutsArgsDict',
    'EdgekvGroupItemsTimeoutsArgs',
    'EdgekvGroupItemsTimeoutsArgsDict',
    'GtmAsmapAssignmentArgs',
    'GtmAsmapAssignmentArgsDict',
    'GtmAsmapDefaultDatacenterArgs',
    'GtmAsmapDefaultDatacenterArgsDict',
    'GtmCidrmapAssignmentArgs',
    'GtmCidrmapAssignmentArgsDict',
    'GtmCidrmapDefaultDatacenterArgs',
    'GtmCidrmapDefaultDatacenterArgsDict',
    'GtmDatacenterDefaultLoadObjectArgs',
    'GtmDatacenterDefaultLoadObjectArgsDict',
    'GtmGeomapAssignmentArgs',
    'GtmGeomapAssignmentArgsDict',
    'GtmGeomapDefaultDatacenterArgs',
    'GtmGeomapDefaultDatacenterArgsDict',
    'GtmPropertyLivenessTestArgs',
    'GtmPropertyLivenessTestArgsDict',
    'GtmPropertyLivenessTestHttpHeaderArgs',
    'GtmPropertyLivenessTestHttpHeaderArgsDict',
    'GtmPropertyStaticRrSetArgs',
    'GtmPropertyStaticRrSetArgsDict',
    'GtmPropertyTrafficTargetArgs',
    'GtmPropertyTrafficTargetArgsDict',
    'GtmResourceResourceInstanceArgs',
    'GtmResourceResourceInstanceArgsDict',
    'IamCidrBlockActionsArgs',
    'IamCidrBlockActionsArgsDict',
    'IamUserUserNotificationsArgs',
    'IamUserUserNotificationsArgsDict',
    'PropertyActivationComplianceRecordArgs',
    'PropertyActivationComplianceRecordArgsDict',
    'PropertyActivationComplianceRecordNoncomplianceReasonEmergencyArgs',
    'PropertyActivationComplianceRecordNoncomplianceReasonEmergencyArgsDict',
    'PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs',
    'PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgsDict',
    'PropertyActivationComplianceRecordNoncomplianceReasonNoneArgs',
    'PropertyActivationComplianceRecordNoncomplianceReasonNoneArgsDict',
    'PropertyActivationComplianceRecordNoncomplianceReasonOtherArgs',
    'PropertyActivationComplianceRecordNoncomplianceReasonOtherArgsDict',
    'PropertyActivationRuleErrorArgs',
    'PropertyActivationRuleErrorArgsDict',
    'PropertyActivationTimeoutsArgs',
    'PropertyActivationTimeoutsArgsDict',
    'PropertyHostnameArgs',
    'PropertyHostnameArgsDict',
    'PropertyHostnameBucketHostnamesArgs',
    'PropertyHostnameBucketHostnamesArgsDict',
    'PropertyHostnameCertStatusArgs',
    'PropertyHostnameCertStatusArgsDict',
    'PropertyIncludeActivationComplianceRecordArgs',
    'PropertyIncludeActivationComplianceRecordArgsDict',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergencyArgs',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergencyArgsDict',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgsDict',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoneArgs',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoneArgsDict',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonOtherArgs',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonOtherArgsDict',
    'PropertyIncludeActivationTimeoutsArgs',
    'PropertyIncludeActivationTimeoutsArgsDict',
    'PropertyRuleErrorArgs',
    'PropertyRuleErrorArgsDict',
    'PropertyRuleWarningArgs',
    'PropertyRuleWarningArgsDict',
    'ProviderConfigArgs',
    'ProviderConfigArgsDict',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleArgs',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleArgsDict',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchArgs',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchArgsDict',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgsDict',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleArgs',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleArgsDict',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingArgs',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingArgsDict',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchArgs',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchArgsDict',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueArgs',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueArgsDict',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleArgs',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleArgsDict',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsArgs',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsArgsDict',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchArgs',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchArgsDict',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueArgs',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueArgsDict',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleArgs',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleArgsDict',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchArgs',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchArgsDict',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueArgs',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueArgsDict',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleArgs',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleArgsDict',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsArgs',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsArgsDict',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleMatchArgs',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleMatchArgsDict',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueArgs',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueArgsDict',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleArgs',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleArgsDict',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsArgs',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsArgsDict',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchArgs',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchArgsDict',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueArgs',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueArgsDict',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict',
    'GetCloudletsRequestControlMatchRuleMatchRuleArgs',
    'GetCloudletsRequestControlMatchRuleMatchRuleArgsDict',
    'GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs',
    'GetCloudletsRequestControlMatchRuleMatchRuleMatchArgsDict',
    'GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueArgs',
    'GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueArgsDict',
    'GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs',
    'GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict',
    'GetCloudletsSharedPolicyActivationsArgs',
    'GetCloudletsSharedPolicyActivationsArgsDict',
    'GetCloudletsSharedPolicyActivationsProductionArgs',
    'GetCloudletsSharedPolicyActivationsProductionArgsDict',
    'GetCloudletsSharedPolicyActivationsProductionEffectiveArgs',
    'GetCloudletsSharedPolicyActivationsProductionEffectiveArgsDict',
    'GetCloudletsSharedPolicyActivationsProductionLatestArgs',
    'GetCloudletsSharedPolicyActivationsProductionLatestArgsDict',
    'GetCloudletsSharedPolicyActivationsStagingArgs',
    'GetCloudletsSharedPolicyActivationsStagingArgsDict',
    'GetCloudletsSharedPolicyActivationsStagingEffectiveArgs',
    'GetCloudletsSharedPolicyActivationsStagingEffectiveArgsDict',
    'GetCloudletsSharedPolicyActivationsStagingLatestArgs',
    'GetCloudletsSharedPolicyActivationsStagingLatestArgsDict',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleArgs',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleArgsDict',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchArgs',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchArgsDict',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgsDict',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict',
    'GetCloudwrapperCapacitiesCapacityArgs',
    'GetCloudwrapperCapacitiesCapacityArgsDict',
    'GetCloudwrapperCapacitiesCapacityApprovedArgs',
    'GetCloudwrapperCapacitiesCapacityApprovedArgsDict',
    'GetCloudwrapperCapacitiesCapacityAssignedArgs',
    'GetCloudwrapperCapacitiesCapacityAssignedArgsDict',
    'GetCloudwrapperCapacitiesCapacityUnassignedArgs',
    'GetCloudwrapperCapacitiesCapacityUnassignedArgsDict',
    'GetCloudwrapperConfigurationLocationArgs',
    'GetCloudwrapperConfigurationLocationArgsDict',
    'GetCloudwrapperConfigurationLocationCapacityArgs',
    'GetCloudwrapperConfigurationLocationCapacityArgsDict',
    'GetCloudwrapperConfigurationMultiCdnSettingsArgs',
    'GetCloudwrapperConfigurationMultiCdnSettingsArgsDict',
    'GetCloudwrapperConfigurationMultiCdnSettingsBoccArgs',
    'GetCloudwrapperConfigurationMultiCdnSettingsBoccArgsDict',
    'GetCloudwrapperConfigurationMultiCdnSettingsCdnArgs',
    'GetCloudwrapperConfigurationMultiCdnSettingsCdnArgsDict',
    'GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs',
    'GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyArgsDict',
    'GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsArgs',
    'GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsArgsDict',
    'GetCloudwrapperConfigurationMultiCdnSettingsOriginArgs',
    'GetCloudwrapperConfigurationMultiCdnSettingsOriginArgsDict',
    'GetCloudwrapperConfigurationsConfigurationArgs',
    'GetCloudwrapperConfigurationsConfigurationArgsDict',
    'GetCloudwrapperConfigurationsConfigurationLocationArgs',
    'GetCloudwrapperConfigurationsConfigurationLocationArgsDict',
    'GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs',
    'GetCloudwrapperConfigurationsConfigurationLocationCapacityArgsDict',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgsDict',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccArgs',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccArgsDict',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgsDict',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgsDict',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsArgs',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsArgsDict',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginArgs',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginArgsDict',
    'GetCloudwrapperLocationsLocationArgs',
    'GetCloudwrapperLocationsLocationArgsDict',
    'GetCloudwrapperLocationsLocationTrafficTypeArgs',
    'GetCloudwrapperLocationsLocationTrafficTypeArgsDict',
    'GetCloudwrapperPropertiesPropertyArgs',
    'GetCloudwrapperPropertiesPropertyArgsDict',
    'GetGtmAsmapAssignmentArgs',
    'GetGtmAsmapAssignmentArgsDict',
    'GetGtmAsmapDefaultDatacenterArgs',
    'GetGtmAsmapDefaultDatacenterArgsDict',
    'GetGtmAsmapLinkArgs',
    'GetGtmAsmapLinkArgsDict',
    'GetGtmCidrmapAssignmentArgs',
    'GetGtmCidrmapAssignmentArgsDict',
    'GetGtmCidrmapDefaultDatacenterArgs',
    'GetGtmCidrmapDefaultDatacenterArgsDict',
    'GetGtmCidrmapLinkArgs',
    'GetGtmCidrmapLinkArgsDict',
    'GetGtmDomainAsMapArgs',
    'GetGtmDomainAsMapArgsDict',
    'GetGtmDomainAsMapAssignmentArgs',
    'GetGtmDomainAsMapAssignmentArgsDict',
    'GetGtmDomainAsMapDefaultDatacenterArgs',
    'GetGtmDomainAsMapDefaultDatacenterArgsDict',
    'GetGtmDomainAsMapLinkArgs',
    'GetGtmDomainAsMapLinkArgsDict',
    'GetGtmDomainCidrMapArgs',
    'GetGtmDomainCidrMapArgsDict',
    'GetGtmDomainCidrMapAssignmentArgs',
    'GetGtmDomainCidrMapAssignmentArgsDict',
    'GetGtmDomainCidrMapDefaultDatacenterArgs',
    'GetGtmDomainCidrMapDefaultDatacenterArgsDict',
    'GetGtmDomainCidrMapLinkArgs',
    'GetGtmDomainCidrMapLinkArgsDict',
    'GetGtmDomainDatacenterArgs',
    'GetGtmDomainDatacenterArgsDict',
    'GetGtmDomainDatacenterDefaultLoadObjectArgs',
    'GetGtmDomainDatacenterDefaultLoadObjectArgsDict',
    'GetGtmDomainDatacenterLinkArgs',
    'GetGtmDomainDatacenterLinkArgsDict',
    'GetGtmDomainGeographicMapArgs',
    'GetGtmDomainGeographicMapArgsDict',
    'GetGtmDomainGeographicMapAssignmentArgs',
    'GetGtmDomainGeographicMapAssignmentArgsDict',
    'GetGtmDomainGeographicMapDefaultDatacenterArgs',
    'GetGtmDomainGeographicMapDefaultDatacenterArgsDict',
    'GetGtmDomainGeographicMapLinkArgs',
    'GetGtmDomainGeographicMapLinkArgsDict',
    'GetGtmDomainLinkArgs',
    'GetGtmDomainLinkArgsDict',
    'GetGtmDomainPropertyArgs',
    'GetGtmDomainPropertyArgsDict',
    'GetGtmDomainPropertyLinkArgs',
    'GetGtmDomainPropertyLinkArgsDict',
    'GetGtmDomainPropertyLivenessTestArgs',
    'GetGtmDomainPropertyLivenessTestArgsDict',
    'GetGtmDomainPropertyLivenessTestHttpHeaderArgs',
    'GetGtmDomainPropertyLivenessTestHttpHeaderArgsDict',
    'GetGtmDomainPropertyStaticRrSetArgs',
    'GetGtmDomainPropertyStaticRrSetArgsDict',
    'GetGtmDomainPropertyTrafficTargetArgs',
    'GetGtmDomainPropertyTrafficTargetArgsDict',
    'GetGtmDomainResourceArgs',
    'GetGtmDomainResourceArgsDict',
    'GetGtmDomainResourceLinkArgs',
    'GetGtmDomainResourceLinkArgsDict',
    'GetGtmDomainResourceResourceInstanceArgs',
    'GetGtmDomainResourceResourceInstanceArgsDict',
    'GetGtmDomainStatusArgs',
    'GetGtmDomainStatusArgsDict',
    'GetGtmDomainStatusLinkArgs',
    'GetGtmDomainStatusLinkArgsDict',
    'GetGtmDomainsDomainArgs',
    'GetGtmDomainsDomainArgsDict',
    'GetGtmDomainsDomainLinkArgs',
    'GetGtmDomainsDomainLinkArgsDict',
    'GetGtmResourceLinkArgs',
    'GetGtmResourceLinkArgsDict',
    'GetGtmResourceResourceInstanceArgs',
    'GetGtmResourceResourceInstanceArgsDict',
    'GetGtmResourcesResourceArgs',
    'GetGtmResourcesResourceArgsDict',
    'GetGtmResourcesResourceLinkArgs',
    'GetGtmResourcesResourceLinkArgsDict',
    'GetGtmResourcesResourceResourceInstanceArgs',
    'GetGtmResourcesResourceResourceInstanceArgsDict',
    'GetImagingPolicyImagePolicyArgs',
    'GetImagingPolicyImagePolicyArgsDict',
    'GetImagingPolicyImagePolicyBreakpointsArgs',
    'GetImagingPolicyImagePolicyBreakpointsArgsDict',
    'GetImagingPolicyImagePolicyOutputArgs',
    'GetImagingPolicyImagePolicyOutputArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationBlurArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationBlurArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationContrastArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationContrastArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationGoopArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationGoopArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationHslArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationHslArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationHsvArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationHsvArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorArgsDict',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskArgsDict',
    'GetImagingPolicyImagePolicyTransformationArgs',
    'GetImagingPolicyImagePolicyTransformationArgsDict',
    'GetImagingPolicyImagePolicyTransformationAppendArgs',
    'GetImagingPolicyImagePolicyTransformationAppendArgsDict',
    'GetImagingPolicyImagePolicyTransformationAppendImageArgs',
    'GetImagingPolicyImagePolicyTransformationAppendImageArgsDict',
    'GetImagingPolicyImagePolicyTransformationAppendImageBoxImageArgs',
    'GetImagingPolicyImagePolicyTransformationAppendImageBoxImageArgsDict',
    'GetImagingPolicyImagePolicyTransformationAppendImageCircleImageArgs',
    'GetImagingPolicyImagePolicyTransformationAppendImageCircleImageArgsDict',
    'GetImagingPolicyImagePolicyTransformationAppendImageTextImageArgs',
    'GetImagingPolicyImagePolicyTransformationAppendImageTextImageArgsDict',
    'GetImagingPolicyImagePolicyTransformationAppendImageUrlImageArgs',
    'GetImagingPolicyImagePolicyTransformationAppendImageUrlImageArgsDict',
    'GetImagingPolicyImagePolicyTransformationAspectCropArgs',
    'GetImagingPolicyImagePolicyTransformationAspectCropArgsDict',
    'GetImagingPolicyImagePolicyTransformationBackgroundColorArgs',
    'GetImagingPolicyImagePolicyTransformationBackgroundColorArgsDict',
    'GetImagingPolicyImagePolicyTransformationBlurArgs',
    'GetImagingPolicyImagePolicyTransformationBlurArgsDict',
    'GetImagingPolicyImagePolicyTransformationChromaKeyArgs',
    'GetImagingPolicyImagePolicyTransformationChromaKeyArgsDict',
    'GetImagingPolicyImagePolicyTransformationCompositeArgs',
    'GetImagingPolicyImagePolicyTransformationCompositeArgsDict',
    'GetImagingPolicyImagePolicyTransformationCompositeImageArgs',
    'GetImagingPolicyImagePolicyTransformationCompositeImageArgsDict',
    'GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageArgs',
    'GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageArgsDict',
    'GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs',
    'GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgsDict',
    'GetImagingPolicyImagePolicyTransformationCompositeImageTextImageArgs',
    'GetImagingPolicyImagePolicyTransformationCompositeImageTextImageArgsDict',
    'GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageArgs',
    'GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageArgsDict',
    'GetImagingPolicyImagePolicyTransformationCompoundArgs',
    'GetImagingPolicyImagePolicyTransformationCompoundArgsDict',
    'GetImagingPolicyImagePolicyTransformationContrastArgs',
    'GetImagingPolicyImagePolicyTransformationContrastArgsDict',
    'GetImagingPolicyImagePolicyTransformationCropArgs',
    'GetImagingPolicyImagePolicyTransformationCropArgsDict',
    'GetImagingPolicyImagePolicyTransformationFaceCropArgs',
    'GetImagingPolicyImagePolicyTransformationFaceCropArgsDict',
    'GetImagingPolicyImagePolicyTransformationFeatureCropArgs',
    'GetImagingPolicyImagePolicyTransformationFeatureCropArgsDict',
    'GetImagingPolicyImagePolicyTransformationFitAndFillArgs',
    'GetImagingPolicyImagePolicyTransformationFitAndFillArgsDict',
    'GetImagingPolicyImagePolicyTransformationGoopArgs',
    'GetImagingPolicyImagePolicyTransformationGoopArgsDict',
    'GetImagingPolicyImagePolicyTransformationGrayscaleArgs',
    'GetImagingPolicyImagePolicyTransformationGrayscaleArgsDict',
    'GetImagingPolicyImagePolicyTransformationHslArgs',
    'GetImagingPolicyImagePolicyTransformationHslArgsDict',
    'GetImagingPolicyImagePolicyTransformationHsvArgs',
    'GetImagingPolicyImagePolicyTransformationHsvArgsDict',
    'GetImagingPolicyImagePolicyTransformationIfDimensionArgs',
    'GetImagingPolicyImagePolicyTransformationIfDimensionArgsDict',
    'GetImagingPolicyImagePolicyTransformationIfOrientationArgs',
    'GetImagingPolicyImagePolicyTransformationIfOrientationArgsDict',
    'GetImagingPolicyImagePolicyTransformationImQueryArgs',
    'GetImagingPolicyImagePolicyTransformationImQueryArgsDict',
    'GetImagingPolicyImagePolicyTransformationMaxColorArgs',
    'GetImagingPolicyImagePolicyTransformationMaxColorArgsDict',
    'GetImagingPolicyImagePolicyTransformationMirrorArgs',
    'GetImagingPolicyImagePolicyTransformationMirrorArgsDict',
    'GetImagingPolicyImagePolicyTransformationMonoHueArgs',
    'GetImagingPolicyImagePolicyTransformationMonoHueArgsDict',
    'GetImagingPolicyImagePolicyTransformationOpacityArgs',
    'GetImagingPolicyImagePolicyTransformationOpacityArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeArgsDict',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeArgsDict',
    'GetImagingPolicyImagePolicyTransformationRelativeCropArgs',
    'GetImagingPolicyImagePolicyTransformationRelativeCropArgsDict',
    'GetImagingPolicyImagePolicyTransformationRemoveColorArgs',
    'GetImagingPolicyImagePolicyTransformationRemoveColorArgsDict',
    'GetImagingPolicyImagePolicyTransformationResizeArgs',
    'GetImagingPolicyImagePolicyTransformationResizeArgsDict',
    'GetImagingPolicyImagePolicyTransformationRotateArgs',
    'GetImagingPolicyImagePolicyTransformationRotateArgsDict',
    'GetImagingPolicyImagePolicyTransformationScaleArgs',
    'GetImagingPolicyImagePolicyTransformationScaleArgsDict',
    'GetImagingPolicyImagePolicyTransformationShearsArgs',
    'GetImagingPolicyImagePolicyTransformationShearsArgsDict',
    'GetImagingPolicyImagePolicyTransformationSmartCropArgs',
    'GetImagingPolicyImagePolicyTransformationSmartCropArgsDict',
    'GetImagingPolicyImagePolicyTransformationTrimArgs',
    'GetImagingPolicyImagePolicyTransformationTrimArgsDict',
    'GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs',
    'GetImagingPolicyImagePolicyTransformationUnsharpMaskArgsDict',
    'GetImagingPolicyImagePolicyVariableArgs',
    'GetImagingPolicyImagePolicyVariableArgsDict',
    'GetImagingPolicyImagePolicyVariableEnumOptionArgs',
    'GetImagingPolicyImagePolicyVariableEnumOptionArgsDict',
    'GetImagingPolicyVideoPolicyArgs',
    'GetImagingPolicyVideoPolicyArgsDict',
    'GetImagingPolicyVideoPolicyBreakpointsArgs',
    'GetImagingPolicyVideoPolicyBreakpointsArgsDict',
    'GetImagingPolicyVideoPolicyOutputArgs',
    'GetImagingPolicyVideoPolicyOutputArgsDict',
    'GetImagingPolicyVideoPolicyVariableArgs',
    'GetImagingPolicyVideoPolicyVariableArgsDict',
    'GetImagingPolicyVideoPolicyVariableEnumOptionArgs',
    'GetImagingPolicyVideoPolicyVariableEnumOptionArgsDict',
    'GetPropertyIncludesParentPropertyArgs',
    'GetPropertyIncludesParentPropertyArgsDict',
    'GetPropertyRulesTemplateTemplateArgs',
    'GetPropertyRulesTemplateTemplateArgsDict',
    'GetPropertyRulesTemplateVariableArgs',
    'GetPropertyRulesTemplateVariableArgsDict',
]

MYPY = False

if not MYPY:
    class AppSecSiemSettingsExceptionsArgsDict(TypedDict):
        api_request_constraints: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Whether there should be an exception to include api request constraints events in SIEM
        """
        apr_protections: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Whether there should be an exception to include apr protection events in SIEM
        """
        bot_managements: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Whether there should be an exception to include bot management events in SIEM
        """
        client_reps: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Whether there should be an exception to include client reputation events in SIEM
        """
        custom_rules: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Whether there should be an exception to include custom rules events in SIEM
        """
        ip_geos: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Whether there should be an exception to include ip geo events in SIEM
        """
        malware_protections: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Whether there should be an exception to include malware protection events in SIEM
        """
        rates: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Whether there should be an exception to include rate events in SIEM
        """
        slow_posts: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Whether there should be an exception to include slow post events in SIEM
        """
        url_protections: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Whether there should be an exception to include url protection events in SIEM
        """
        wafs: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Whether there should be an exception to include waf events in SIEM
        """
elif False:
    AppSecSiemSettingsExceptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AppSecSiemSettingsExceptionsArgs:
    def __init__(__self__, *,
                 api_request_constraints: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 apr_protections: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 bot_managements: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 client_reps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 custom_rules: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ip_geos: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 malware_protections: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 rates: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 slow_posts: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 url_protections: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 wafs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] api_request_constraints: Whether there should be an exception to include api request constraints events in SIEM
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] apr_protections: Whether there should be an exception to include apr protection events in SIEM
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] bot_managements: Whether there should be an exception to include bot management events in SIEM
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] client_reps: Whether there should be an exception to include client reputation events in SIEM
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] custom_rules: Whether there should be an exception to include custom rules events in SIEM
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ip_geos: Whether there should be an exception to include ip geo events in SIEM
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] malware_protections: Whether there should be an exception to include malware protection events in SIEM
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] rates: Whether there should be an exception to include rate events in SIEM
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] slow_posts: Whether there should be an exception to include slow post events in SIEM
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] url_protections: Whether there should be an exception to include url protection events in SIEM
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] wafs: Whether there should be an exception to include waf events in SIEM
        """
        if api_request_constraints is not None:
            pulumi.set(__self__, "api_request_constraints", api_request_constraints)
        if apr_protections is not None:
            pulumi.set(__self__, "apr_protections", apr_protections)
        if bot_managements is not None:
            pulumi.set(__self__, "bot_managements", bot_managements)
        if client_reps is not None:
            pulumi.set(__self__, "client_reps", client_reps)
        if custom_rules is not None:
            pulumi.set(__self__, "custom_rules", custom_rules)
        if ip_geos is not None:
            pulumi.set(__self__, "ip_geos", ip_geos)
        if malware_protections is not None:
            pulumi.set(__self__, "malware_protections", malware_protections)
        if rates is not None:
            pulumi.set(__self__, "rates", rates)
        if slow_posts is not None:
            pulumi.set(__self__, "slow_posts", slow_posts)
        if url_protections is not None:
            pulumi.set(__self__, "url_protections", url_protections)
        if wafs is not None:
            pulumi.set(__self__, "wafs", wafs)

    @property
    @pulumi.getter(name="apiRequestConstraints")
    def api_request_constraints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Whether there should be an exception to include api request constraints events in SIEM
        """
        return pulumi.get(self, "api_request_constraints")

    @api_request_constraints.setter
    def api_request_constraints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "api_request_constraints", value)

    @property
    @pulumi.getter(name="aprProtections")
    def apr_protections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Whether there should be an exception to include apr protection events in SIEM
        """
        return pulumi.get(self, "apr_protections")

    @apr_protections.setter
    def apr_protections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "apr_protections", value)

    @property
    @pulumi.getter(name="botManagements")
    def bot_managements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Whether there should be an exception to include bot management events in SIEM
        """
        return pulumi.get(self, "bot_managements")

    @bot_managements.setter
    def bot_managements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "bot_managements", value)

    @property
    @pulumi.getter(name="clientReps")
    def client_reps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Whether there should be an exception to include client reputation events in SIEM
        """
        return pulumi.get(self, "client_reps")

    @client_reps.setter
    def client_reps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "client_reps", value)

    @property
    @pulumi.getter(name="customRules")
    def custom_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Whether there should be an exception to include custom rules events in SIEM
        """
        return pulumi.get(self, "custom_rules")

    @custom_rules.setter
    def custom_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "custom_rules", value)

    @property
    @pulumi.getter(name="ipGeos")
    def ip_geos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Whether there should be an exception to include ip geo events in SIEM
        """
        return pulumi.get(self, "ip_geos")

    @ip_geos.setter
    def ip_geos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ip_geos", value)

    @property
    @pulumi.getter(name="malwareProtections")
    def malware_protections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Whether there should be an exception to include malware protection events in SIEM
        """
        return pulumi.get(self, "malware_protections")

    @malware_protections.setter
    def malware_protections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "malware_protections", value)

    @property
    @pulumi.getter
    def rates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Whether there should be an exception to include rate events in SIEM
        """
        return pulumi.get(self, "rates")

    @rates.setter
    def rates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "rates", value)

    @property
    @pulumi.getter(name="slowPosts")
    def slow_posts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Whether there should be an exception to include slow post events in SIEM
        """
        return pulumi.get(self, "slow_posts")

    @slow_posts.setter
    def slow_posts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "slow_posts", value)

    @property
    @pulumi.getter(name="urlProtections")
    def url_protections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Whether there should be an exception to include url protection events in SIEM
        """
        return pulumi.get(self, "url_protections")

    @url_protections.setter
    def url_protections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "url_protections", value)

    @property
    @pulumi.getter
    def wafs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Whether there should be an exception to include waf events in SIEM
        """
        return pulumi.get(self, "wafs")

    @wafs.setter
    def wafs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "wafs", value)


if not MYPY:
    class ClientlistListItemArgsDict(TypedDict):
        value: pulumi.Input[builtins.str]
        """
        Value of the item. (i.e. IP address, AS Number, GEO, ...etc)
        """
        description: NotRequired[pulumi.Input[builtins.str]]
        """
        A description of the item.
        """
        expiration_date: NotRequired[pulumi.Input[builtins.str]]
        """
        The item expiration date.
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The item tags.
        """
elif False:
    ClientlistListItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClientlistListItemArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[builtins.str],
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 expiration_date: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] value: Value of the item. (i.e. IP address, AS Number, GEO, ...etc)
        :param pulumi.Input[builtins.str] description: A description of the item.
        :param pulumi.Input[builtins.str] expiration_date: The item expiration date.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] tags: The item tags.
        """
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        Value of the item. (i.e. IP address, AS Number, GEO, ...etc)
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A description of the item.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The item expiration date.
        """
        return pulumi.get(self, "expiration_date")

    @expiration_date.setter
    def expiration_date(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "expiration_date", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The item tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class CloudAccessKeyCredentialsAArgsDict(TypedDict):
        cloud_access_key_id: pulumi.Input[builtins.str]
        """
        Access key id from cloud provider which is used to sign API requests
        """
        cloud_secret_access_key: pulumi.Input[builtins.str]
        """
        Cloud Access secret from cloud provider which is used to sign API requests
        """
        primary_key: pulumi.Input[builtins.bool]
        """
        Boolean value which helps to define if credentials should be assigned to property
        """
        version: NotRequired[pulumi.Input[builtins.int]]
        """
        Numeric access key version associated with specific pair of cloud access credentials used to sign API requests
        """
        version_guid: NotRequired[pulumi.Input[builtins.str]]
        """
        The unique identifier assigned to specific access key version
        """
elif False:
    CloudAccessKeyCredentialsAArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudAccessKeyCredentialsAArgs:
    def __init__(__self__, *,
                 cloud_access_key_id: pulumi.Input[builtins.str],
                 cloud_secret_access_key: pulumi.Input[builtins.str],
                 primary_key: pulumi.Input[builtins.bool],
                 version: Optional[pulumi.Input[builtins.int]] = None,
                 version_guid: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] cloud_access_key_id: Access key id from cloud provider which is used to sign API requests
        :param pulumi.Input[builtins.str] cloud_secret_access_key: Cloud Access secret from cloud provider which is used to sign API requests
        :param pulumi.Input[builtins.bool] primary_key: Boolean value which helps to define if credentials should be assigned to property
        :param pulumi.Input[builtins.int] version: Numeric access key version associated with specific pair of cloud access credentials used to sign API requests
        :param pulumi.Input[builtins.str] version_guid: The unique identifier assigned to specific access key version
        """
        pulumi.set(__self__, "cloud_access_key_id", cloud_access_key_id)
        pulumi.set(__self__, "cloud_secret_access_key", cloud_secret_access_key)
        pulumi.set(__self__, "primary_key", primary_key)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_guid is not None:
            pulumi.set(__self__, "version_guid", version_guid)

    @property
    @pulumi.getter(name="cloudAccessKeyId")
    def cloud_access_key_id(self) -> pulumi.Input[builtins.str]:
        """
        Access key id from cloud provider which is used to sign API requests
        """
        return pulumi.get(self, "cloud_access_key_id")

    @cloud_access_key_id.setter
    def cloud_access_key_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cloud_access_key_id", value)

    @property
    @pulumi.getter(name="cloudSecretAccessKey")
    def cloud_secret_access_key(self) -> pulumi.Input[builtins.str]:
        """
        Cloud Access secret from cloud provider which is used to sign API requests
        """
        return pulumi.get(self, "cloud_secret_access_key")

    @cloud_secret_access_key.setter
    def cloud_secret_access_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cloud_secret_access_key", value)

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> pulumi.Input[builtins.bool]:
        """
        Boolean value which helps to define if credentials should be assigned to property
        """
        return pulumi.get(self, "primary_key")

    @primary_key.setter
    def primary_key(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "primary_key", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Numeric access key version associated with specific pair of cloud access credentials used to sign API requests
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionGuid")
    def version_guid(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique identifier assigned to specific access key version
        """
        return pulumi.get(self, "version_guid")

    @version_guid.setter
    def version_guid(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "version_guid", value)


if not MYPY:
    class CloudAccessKeyCredentialsBArgsDict(TypedDict):
        cloud_access_key_id: pulumi.Input[builtins.str]
        """
        Access key id from cloud provider which is used to sign API requests
        """
        cloud_secret_access_key: pulumi.Input[builtins.str]
        """
        Cloud Access secret from cloud provider which is used to sign API requests
        """
        primary_key: pulumi.Input[builtins.bool]
        """
        Boolean value which helps to define if credentials should be assigned to property
        """
        version: NotRequired[pulumi.Input[builtins.int]]
        """
        Numeric access key version associated with specific pair of cloud access credentials used to sign API requests
        """
        version_guid: NotRequired[pulumi.Input[builtins.str]]
        """
        The unique identifier assigned to specific access key version
        """
elif False:
    CloudAccessKeyCredentialsBArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudAccessKeyCredentialsBArgs:
    def __init__(__self__, *,
                 cloud_access_key_id: pulumi.Input[builtins.str],
                 cloud_secret_access_key: pulumi.Input[builtins.str],
                 primary_key: pulumi.Input[builtins.bool],
                 version: Optional[pulumi.Input[builtins.int]] = None,
                 version_guid: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] cloud_access_key_id: Access key id from cloud provider which is used to sign API requests
        :param pulumi.Input[builtins.str] cloud_secret_access_key: Cloud Access secret from cloud provider which is used to sign API requests
        :param pulumi.Input[builtins.bool] primary_key: Boolean value which helps to define if credentials should be assigned to property
        :param pulumi.Input[builtins.int] version: Numeric access key version associated with specific pair of cloud access credentials used to sign API requests
        :param pulumi.Input[builtins.str] version_guid: The unique identifier assigned to specific access key version
        """
        pulumi.set(__self__, "cloud_access_key_id", cloud_access_key_id)
        pulumi.set(__self__, "cloud_secret_access_key", cloud_secret_access_key)
        pulumi.set(__self__, "primary_key", primary_key)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_guid is not None:
            pulumi.set(__self__, "version_guid", version_guid)

    @property
    @pulumi.getter(name="cloudAccessKeyId")
    def cloud_access_key_id(self) -> pulumi.Input[builtins.str]:
        """
        Access key id from cloud provider which is used to sign API requests
        """
        return pulumi.get(self, "cloud_access_key_id")

    @cloud_access_key_id.setter
    def cloud_access_key_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cloud_access_key_id", value)

    @property
    @pulumi.getter(name="cloudSecretAccessKey")
    def cloud_secret_access_key(self) -> pulumi.Input[builtins.str]:
        """
        Cloud Access secret from cloud provider which is used to sign API requests
        """
        return pulumi.get(self, "cloud_secret_access_key")

    @cloud_secret_access_key.setter
    def cloud_secret_access_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cloud_secret_access_key", value)

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> pulumi.Input[builtins.bool]:
        """
        Boolean value which helps to define if credentials should be assigned to property
        """
        return pulumi.get(self, "primary_key")

    @primary_key.setter
    def primary_key(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "primary_key", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Numeric access key version associated with specific pair of cloud access credentials used to sign API requests
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionGuid")
    def version_guid(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique identifier assigned to specific access key version
        """
        return pulumi.get(self, "version_guid")

    @version_guid.setter
    def version_guid(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "version_guid", value)


if not MYPY:
    class CloudAccessKeyNetworkConfigurationArgsDict(TypedDict):
        security_network: pulumi.Input[builtins.str]
        """
        The API deploys the access key to this secure network
        """
        additional_cdn: NotRequired[pulumi.Input[builtins.str]]
        """
        Additional type of the deployment network that the access key will be deployed to.
        """
elif False:
    CloudAccessKeyNetworkConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudAccessKeyNetworkConfigurationArgs:
    def __init__(__self__, *,
                 security_network: pulumi.Input[builtins.str],
                 additional_cdn: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] security_network: The API deploys the access key to this secure network
        :param pulumi.Input[builtins.str] additional_cdn: Additional type of the deployment network that the access key will be deployed to.
        """
        pulumi.set(__self__, "security_network", security_network)
        if additional_cdn is not None:
            pulumi.set(__self__, "additional_cdn", additional_cdn)

    @property
    @pulumi.getter(name="securityNetwork")
    def security_network(self) -> pulumi.Input[builtins.str]:
        """
        The API deploys the access key to this secure network
        """
        return pulumi.get(self, "security_network")

    @security_network.setter
    def security_network(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "security_network", value)

    @property
    @pulumi.getter(name="additionalCdn")
    def additional_cdn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Additional type of the deployment network that the access key will be deployed to.
        """
        return pulumi.get(self, "additional_cdn")

    @additional_cdn.setter
    def additional_cdn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "additional_cdn", value)


if not MYPY:
    class CloudAccessKeyTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional configurable resource create timeout. By default it's 60 minutes with 1 minute polling interval.
        """
        delete: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional configurable resource delete timeout. By default it's 60 minutes with 1 minute polling interval.
        """
        update: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional configurable resource update timeout. By default it's 60 minutes with 1 minute polling interval.
        """
elif False:
    CloudAccessKeyTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudAccessKeyTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[builtins.str]] = None,
                 delete: Optional[pulumi.Input[builtins.str]] = None,
                 update: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] create: Optional configurable resource create timeout. By default it's 60 minutes with 1 minute polling interval.
        :param pulumi.Input[builtins.str] delete: Optional configurable resource delete timeout. By default it's 60 minutes with 1 minute polling interval.
        :param pulumi.Input[builtins.str] update: Optional configurable resource update timeout. By default it's 60 minutes with 1 minute polling interval.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional configurable resource create timeout. By default it's 60 minutes with 1 minute polling interval.
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional configurable resource delete timeout. By default it's 60 minutes with 1 minute polling interval.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional configurable resource update timeout. By default it's 60 minutes with 1 minute polling interval.
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "update", value)


if not MYPY:
    class CloudletsApplicationLoadBalancerActivationTimeoutsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[builtins.str]]
elif False:
    CloudletsApplicationLoadBalancerActivationTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudletsApplicationLoadBalancerActivationTimeoutsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[builtins.str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default", value)


if not MYPY:
    class CloudletsApplicationLoadBalancerDataCenterArgsDict(TypedDict):
        continent: pulumi.Input[builtins.str]
        """
        The continent on which the data center is located
        """
        country: pulumi.Input[builtins.str]
        """
        The country in which the data center is located
        """
        latitude: pulumi.Input[builtins.float]
        """
        The latitude value for the data center. This member supports six decimal places of precision.
        """
        longitude: pulumi.Input[builtins.float]
        """
        The longitude value for the data center. This member supports six decimal places of precision.
        """
        origin_id: pulumi.Input[builtins.str]
        """
        The ID of an origin that represents the data center. The conditional origin, which is defined in the Property Manager API, must have an originType of either CUSTOMER or NET_STORAGE
        """
        percent: pulumi.Input[builtins.float]
        """
        The percent of traffic that is sent to the data center. The total for all data centers must equal 100%.
        """
        city: NotRequired[pulumi.Input[builtins.str]]
        """
        The city in which the data center is located.
        """
        cloud_server_host_header_override: NotRequired[pulumi.Input[builtins.bool]]
        """
        Describes if cloud server host header is overridden
        """
        cloud_service: NotRequired[pulumi.Input[builtins.bool]]
        """
        Describes if this datacenter is a cloud service
        """
        hostname: NotRequired[pulumi.Input[builtins.str]]
        """
        This should match the 'hostname' value defined for this datacenter in Property Manager
        """
        liveness_hosts: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        An array of strings that represent the origin servers used to poll the data centers in an application load balancer configuration. These servers support basic HTTP polling.
        """
        state_or_province: NotRequired[pulumi.Input[builtins.str]]
        """
        The state, province, or region where the data center is located
        """
elif False:
    CloudletsApplicationLoadBalancerDataCenterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudletsApplicationLoadBalancerDataCenterArgs:
    def __init__(__self__, *,
                 continent: pulumi.Input[builtins.str],
                 country: pulumi.Input[builtins.str],
                 latitude: pulumi.Input[builtins.float],
                 longitude: pulumi.Input[builtins.float],
                 origin_id: pulumi.Input[builtins.str],
                 percent: pulumi.Input[builtins.float],
                 city: Optional[pulumi.Input[builtins.str]] = None,
                 cloud_server_host_header_override: Optional[pulumi.Input[builtins.bool]] = None,
                 cloud_service: Optional[pulumi.Input[builtins.bool]] = None,
                 hostname: Optional[pulumi.Input[builtins.str]] = None,
                 liveness_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 state_or_province: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] continent: The continent on which the data center is located
        :param pulumi.Input[builtins.str] country: The country in which the data center is located
        :param pulumi.Input[builtins.float] latitude: The latitude value for the data center. This member supports six decimal places of precision.
        :param pulumi.Input[builtins.float] longitude: The longitude value for the data center. This member supports six decimal places of precision.
        :param pulumi.Input[builtins.str] origin_id: The ID of an origin that represents the data center. The conditional origin, which is defined in the Property Manager API, must have an originType of either CUSTOMER or NET_STORAGE
        :param pulumi.Input[builtins.float] percent: The percent of traffic that is sent to the data center. The total for all data centers must equal 100%.
        :param pulumi.Input[builtins.str] city: The city in which the data center is located.
        :param pulumi.Input[builtins.bool] cloud_server_host_header_override: Describes if cloud server host header is overridden
        :param pulumi.Input[builtins.bool] cloud_service: Describes if this datacenter is a cloud service
        :param pulumi.Input[builtins.str] hostname: This should match the 'hostname' value defined for this datacenter in Property Manager
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] liveness_hosts: An array of strings that represent the origin servers used to poll the data centers in an application load balancer configuration. These servers support basic HTTP polling.
        :param pulumi.Input[builtins.str] state_or_province: The state, province, or region where the data center is located
        """
        pulumi.set(__self__, "continent", continent)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "origin_id", origin_id)
        pulumi.set(__self__, "percent", percent)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if cloud_server_host_header_override is not None:
            pulumi.set(__self__, "cloud_server_host_header_override", cloud_server_host_header_override)
        if cloud_service is not None:
            pulumi.set(__self__, "cloud_service", cloud_service)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if liveness_hosts is not None:
            pulumi.set(__self__, "liveness_hosts", liveness_hosts)
        if state_or_province is not None:
            pulumi.set(__self__, "state_or_province", state_or_province)

    @property
    @pulumi.getter
    def continent(self) -> pulumi.Input[builtins.str]:
        """
        The continent on which the data center is located
        """
        return pulumi.get(self, "continent")

    @continent.setter
    def continent(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "continent", value)

    @property
    @pulumi.getter
    def country(self) -> pulumi.Input[builtins.str]:
        """
        The country in which the data center is located
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def latitude(self) -> pulumi.Input[builtins.float]:
        """
        The latitude value for the data center. This member supports six decimal places of precision.
        """
        return pulumi.get(self, "latitude")

    @latitude.setter
    def latitude(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "latitude", value)

    @property
    @pulumi.getter
    def longitude(self) -> pulumi.Input[builtins.float]:
        """
        The longitude value for the data center. This member supports six decimal places of precision.
        """
        return pulumi.get(self, "longitude")

    @longitude.setter
    def longitude(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "longitude", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> pulumi.Input[builtins.str]:
        """
        The ID of an origin that represents the data center. The conditional origin, which is defined in the Property Manager API, must have an originType of either CUSTOMER or NET_STORAGE
        """
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter
    def percent(self) -> pulumi.Input[builtins.float]:
        """
        The percent of traffic that is sent to the data center. The total for all data centers must equal 100%.
        """
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "percent", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The city in which the data center is located.
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="cloudServerHostHeaderOverride")
    def cloud_server_host_header_override(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Describes if cloud server host header is overridden
        """
        return pulumi.get(self, "cloud_server_host_header_override")

    @cloud_server_host_header_override.setter
    def cloud_server_host_header_override(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cloud_server_host_header_override", value)

    @property
    @pulumi.getter(name="cloudService")
    def cloud_service(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Describes if this datacenter is a cloud service
        """
        return pulumi.get(self, "cloud_service")

    @cloud_service.setter
    def cloud_service(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cloud_service", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This should match the 'hostname' value defined for this datacenter in Property Manager
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="livenessHosts")
    def liveness_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        An array of strings that represent the origin servers used to poll the data centers in an application load balancer configuration. These servers support basic HTTP polling.
        """
        return pulumi.get(self, "liveness_hosts")

    @liveness_hosts.setter
    def liveness_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "liveness_hosts", value)

    @property
    @pulumi.getter(name="stateOrProvince")
    def state_or_province(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The state, province, or region where the data center is located
        """
        return pulumi.get(self, "state_or_province")

    @state_or_province.setter
    def state_or_province(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state_or_province", value)


if not MYPY:
    class CloudletsApplicationLoadBalancerLivenessSettingsArgsDict(TypedDict):
        path: pulumi.Input[builtins.str]
        """
        The path to the test object used for liveness testing. The function of the test object is to help determine whether the data center is functioning.
        """
        port: pulumi.Input[builtins.int]
        """
        The port for the test object. The default port is 80, which is standard for HTTP. Enter 443 if you are using HTTPS.
        """
        protocol: pulumi.Input[builtins.str]
        """
        The protocol or scheme for the database, either HTTP or HTTPS.
        """
        additional_headers: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Maps additional case-insensitive HTTP header names included to the liveness testing requests
        """
        host_header: NotRequired[pulumi.Input[builtins.str]]
        """
        The Host header for the liveness HTTP request
        """
        interval: NotRequired[pulumi.Input[builtins.int]]
        """
        Describes how often the liveness test will be performed. Optional defaults to 60 seconds, minimum is 10 seconds.
        """
        peer_certificate_verification: NotRequired[pulumi.Input[builtins.bool]]
        """
        Describes whether or not to validate the origin certificate for an HTTPS request
        """
        request_string: NotRequired[pulumi.Input[builtins.str]]
        """
        The request which will be used for TCP(S) tests
        """
        response_string: NotRequired[pulumi.Input[builtins.str]]
        status3xx_failure: NotRequired[pulumi.Input[builtins.bool]]
        """
        Set to true to mark the liveness test as failed when the request returns a 3xx (redirection) status code.
        """
        status4xx_failure: NotRequired[pulumi.Input[builtins.bool]]
        """
        Set to true to mark the liveness test as failed when the request returns a 4xx (client error) status code.
        """
        status5xx_failure: NotRequired[pulumi.Input[builtins.bool]]
        """
        Set to true to mark the liveness test as failed when the request returns a 5xx (server error) status code.
        """
        timeout: NotRequired[pulumi.Input[builtins.float]]
        """
        The number of seconds the system waits before failing the liveness test. The default is 25 seconds.
        """
elif False:
    CloudletsApplicationLoadBalancerLivenessSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudletsApplicationLoadBalancerLivenessSettingsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[builtins.str],
                 port: pulumi.Input[builtins.int],
                 protocol: pulumi.Input[builtins.str],
                 additional_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 host_header: Optional[pulumi.Input[builtins.str]] = None,
                 interval: Optional[pulumi.Input[builtins.int]] = None,
                 peer_certificate_verification: Optional[pulumi.Input[builtins.bool]] = None,
                 request_string: Optional[pulumi.Input[builtins.str]] = None,
                 response_string: Optional[pulumi.Input[builtins.str]] = None,
                 status3xx_failure: Optional[pulumi.Input[builtins.bool]] = None,
                 status4xx_failure: Optional[pulumi.Input[builtins.bool]] = None,
                 status5xx_failure: Optional[pulumi.Input[builtins.bool]] = None,
                 timeout: Optional[pulumi.Input[builtins.float]] = None):
        """
        :param pulumi.Input[builtins.str] path: The path to the test object used for liveness testing. The function of the test object is to help determine whether the data center is functioning.
        :param pulumi.Input[builtins.int] port: The port for the test object. The default port is 80, which is standard for HTTP. Enter 443 if you are using HTTPS.
        :param pulumi.Input[builtins.str] protocol: The protocol or scheme for the database, either HTTP or HTTPS.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] additional_headers: Maps additional case-insensitive HTTP header names included to the liveness testing requests
        :param pulumi.Input[builtins.str] host_header: The Host header for the liveness HTTP request
        :param pulumi.Input[builtins.int] interval: Describes how often the liveness test will be performed. Optional defaults to 60 seconds, minimum is 10 seconds.
        :param pulumi.Input[builtins.bool] peer_certificate_verification: Describes whether or not to validate the origin certificate for an HTTPS request
        :param pulumi.Input[builtins.str] request_string: The request which will be used for TCP(S) tests
        :param pulumi.Input[builtins.bool] status3xx_failure: Set to true to mark the liveness test as failed when the request returns a 3xx (redirection) status code.
        :param pulumi.Input[builtins.bool] status4xx_failure: Set to true to mark the liveness test as failed when the request returns a 4xx (client error) status code.
        :param pulumi.Input[builtins.bool] status5xx_failure: Set to true to mark the liveness test as failed when the request returns a 5xx (server error) status code.
        :param pulumi.Input[builtins.float] timeout: The number of seconds the system waits before failing the liveness test. The default is 25 seconds.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if additional_headers is not None:
            pulumi.set(__self__, "additional_headers", additional_headers)
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if peer_certificate_verification is not None:
            pulumi.set(__self__, "peer_certificate_verification", peer_certificate_verification)
        if request_string is not None:
            pulumi.set(__self__, "request_string", request_string)
        if response_string is not None:
            pulumi.set(__self__, "response_string", response_string)
        if status3xx_failure is not None:
            pulumi.set(__self__, "status3xx_failure", status3xx_failure)
        if status4xx_failure is not None:
            pulumi.set(__self__, "status4xx_failure", status4xx_failure)
        if status5xx_failure is not None:
            pulumi.set(__self__, "status5xx_failure", status5xx_failure)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[builtins.str]:
        """
        The path to the test object used for liveness testing. The function of the test object is to help determine whether the data center is functioning.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[builtins.int]:
        """
        The port for the test object. The default port is 80, which is standard for HTTP. Enter 443 if you are using HTTPS.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[builtins.str]:
        """
        The protocol or scheme for the database, either HTTP or HTTPS.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="additionalHeaders")
    def additional_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Maps additional case-insensitive HTTP header names included to the liveness testing requests
        """
        return pulumi.get(self, "additional_headers")

    @additional_headers.setter
    def additional_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "additional_headers", value)

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Host header for the liveness HTTP request
        """
        return pulumi.get(self, "host_header")

    @host_header.setter
    def host_header(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "host_header", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Describes how often the liveness test will be performed. Optional defaults to 60 seconds, minimum is 10 seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="peerCertificateVerification")
    def peer_certificate_verification(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Describes whether or not to validate the origin certificate for an HTTPS request
        """
        return pulumi.get(self, "peer_certificate_verification")

    @peer_certificate_verification.setter
    def peer_certificate_verification(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "peer_certificate_verification", value)

    @property
    @pulumi.getter(name="requestString")
    def request_string(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The request which will be used for TCP(S) tests
        """
        return pulumi.get(self, "request_string")

    @request_string.setter
    def request_string(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "request_string", value)

    @property
    @pulumi.getter(name="responseString")
    def response_string(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "response_string")

    @response_string.setter
    def response_string(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "response_string", value)

    @property
    @pulumi.getter(name="status3xxFailure")
    def status3xx_failure(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Set to true to mark the liveness test as failed when the request returns a 3xx (redirection) status code.
        """
        return pulumi.get(self, "status3xx_failure")

    @status3xx_failure.setter
    def status3xx_failure(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "status3xx_failure", value)

    @property
    @pulumi.getter(name="status4xxFailure")
    def status4xx_failure(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Set to true to mark the liveness test as failed when the request returns a 4xx (client error) status code.
        """
        return pulumi.get(self, "status4xx_failure")

    @status4xx_failure.setter
    def status4xx_failure(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "status4xx_failure", value)

    @property
    @pulumi.getter(name="status5xxFailure")
    def status5xx_failure(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Set to true to mark the liveness test as failed when the request returns a 5xx (server error) status code.
        """
        return pulumi.get(self, "status5xx_failure")

    @status5xx_failure.setter
    def status5xx_failure(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "status5xx_failure", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        The number of seconds the system waits before failing the liveness test. The default is 25 seconds.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "timeout", value)


if not MYPY:
    class CloudletsPolicyActivationTimeoutsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[builtins.str]]
elif False:
    CloudletsPolicyActivationTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudletsPolicyActivationTimeoutsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[builtins.str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default", value)


if not MYPY:
    class CloudletsPolicyTimeoutsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[builtins.str]]
elif False:
    CloudletsPolicyTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudletsPolicyTimeoutsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[builtins.str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default", value)


if not MYPY:
    class CloudwrapperActivationTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional configurable activation timeout to be used on resource create. By default it's 4h with 1m pooling interval.
        """
        update: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional configurable activation timeout to be used on resource update. By default it's 4h with 1m pooling interval.
        """
elif False:
    CloudwrapperActivationTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudwrapperActivationTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[builtins.str]] = None,
                 update: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] create: Optional configurable activation timeout to be used on resource create. By default it's 4h with 1m pooling interval.
        :param pulumi.Input[builtins.str] update: Optional configurable activation timeout to be used on resource update. By default it's 4h with 1m pooling interval.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional configurable activation timeout to be used on resource create. By default it's 4h with 1m pooling interval.
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional configurable activation timeout to be used on resource update. By default it's 4h with 1m pooling interval.
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "update", value)


if not MYPY:
    class CloudwrapperConfigurationLocationArgsDict(TypedDict):
        comments: pulumi.Input[builtins.str]
        """
        Additional comments provided by the user.
        """
        traffic_type_id: pulumi.Input[builtins.int]
        """
        Unique identifier for the location and traffic type combination
        """
        capacity: NotRequired[pulumi.Input['CloudwrapperConfigurationLocationCapacityArgsDict']]
        """
        The capacity assigned to this configuration's location
        """
elif False:
    CloudwrapperConfigurationLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudwrapperConfigurationLocationArgs:
    def __init__(__self__, *,
                 comments: pulumi.Input[builtins.str],
                 traffic_type_id: pulumi.Input[builtins.int],
                 capacity: Optional[pulumi.Input['CloudwrapperConfigurationLocationCapacityArgs']] = None):
        """
        :param pulumi.Input[builtins.str] comments: Additional comments provided by the user.
        :param pulumi.Input[builtins.int] traffic_type_id: Unique identifier for the location and traffic type combination
        :param pulumi.Input['CloudwrapperConfigurationLocationCapacityArgs'] capacity: The capacity assigned to this configuration's location
        """
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "traffic_type_id", traffic_type_id)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Input[builtins.str]:
        """
        Additional comments provided by the user.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="trafficTypeId")
    def traffic_type_id(self) -> pulumi.Input[builtins.int]:
        """
        Unique identifier for the location and traffic type combination
        """
        return pulumi.get(self, "traffic_type_id")

    @traffic_type_id.setter
    def traffic_type_id(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "traffic_type_id", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input['CloudwrapperConfigurationLocationCapacityArgs']]:
        """
        The capacity assigned to this configuration's location
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input['CloudwrapperConfigurationLocationCapacityArgs']]):
        pulumi.set(self, "capacity", value)


if not MYPY:
    class CloudwrapperConfigurationLocationCapacityArgsDict(TypedDict):
        unit: pulumi.Input[builtins.str]
        """
        Unit of capacity. Can be either 'GB' or 'TB'.
        """
        value: pulumi.Input[builtins.int]
        """
        Value of capacity.
        """
elif False:
    CloudwrapperConfigurationLocationCapacityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudwrapperConfigurationLocationCapacityArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.int]):
        """
        :param pulumi.Input[builtins.str] unit: Unit of capacity. Can be either 'GB' or 'TB'.
        :param pulumi.Input[builtins.int] value: Value of capacity.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[builtins.str]:
        """
        Unit of capacity. Can be either 'GB' or 'TB'.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.int]:
        """
        Value of capacity.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "value", value)


if not MYPY:
    class CloudwrapperConfigurationTimeoutsArgsDict(TypedDict):
        delete: NotRequired[pulumi.Input[builtins.str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
elif False:
    CloudwrapperConfigurationTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudwrapperConfigurationTimeoutsArgs:
    def __init__(__self__, *,
                 delete: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        if delete is not None:
            pulumi.set(__self__, "delete", delete)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete", value)


if not MYPY:
    class CpCodeTimeoutsArgsDict(TypedDict):
        update: NotRequired[pulumi.Input[builtins.str]]
elif False:
    CpCodeTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpCodeTimeoutsArgs:
    def __init__(__self__, *,
                 update: Optional[pulumi.Input[builtins.str]] = None):
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "update", value)


if not MYPY:
    class CpsDvEnrollmentAdminContactArgsDict(TypedDict):
        email: pulumi.Input[builtins.str]
        """
        E-mail address of the contact
        """
        first_name: pulumi.Input[builtins.str]
        """
        First name of the contact
        """
        last_name: pulumi.Input[builtins.str]
        """
        Last name of the contact
        """
        phone: pulumi.Input[builtins.str]
        """
        Phone number of the contact
        """
        address_line_one: NotRequired[pulumi.Input[builtins.str]]
        """
        The address of the contact
        """
        address_line_two: NotRequired[pulumi.Input[builtins.str]]
        """
        The address of the contact
        """
        city: NotRequired[pulumi.Input[builtins.str]]
        """
        City of residence of the contact
        """
        country_code: NotRequired[pulumi.Input[builtins.str]]
        """
        Country code of the contact
        """
        organization: NotRequired[pulumi.Input[builtins.str]]
        """
        Organization where contact is hired
        """
        postal_code: NotRequired[pulumi.Input[builtins.str]]
        """
        Postal code of the contact
        """
        region: NotRequired[pulumi.Input[builtins.str]]
        """
        The region of the contact
        """
        title: NotRequired[pulumi.Input[builtins.str]]
        """
        Title of the the contact
        """
elif False:
    CpsDvEnrollmentAdminContactArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsDvEnrollmentAdminContactArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[builtins.str],
                 first_name: pulumi.Input[builtins.str],
                 last_name: pulumi.Input[builtins.str],
                 phone: pulumi.Input[builtins.str],
                 address_line_one: Optional[pulumi.Input[builtins.str]] = None,
                 address_line_two: Optional[pulumi.Input[builtins.str]] = None,
                 city: Optional[pulumi.Input[builtins.str]] = None,
                 country_code: Optional[pulumi.Input[builtins.str]] = None,
                 organization: Optional[pulumi.Input[builtins.str]] = None,
                 postal_code: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] email: E-mail address of the contact
        :param pulumi.Input[builtins.str] first_name: First name of the contact
        :param pulumi.Input[builtins.str] last_name: Last name of the contact
        :param pulumi.Input[builtins.str] phone: Phone number of the contact
        :param pulumi.Input[builtins.str] address_line_one: The address of the contact
        :param pulumi.Input[builtins.str] address_line_two: The address of the contact
        :param pulumi.Input[builtins.str] city: City of residence of the contact
        :param pulumi.Input[builtins.str] country_code: Country code of the contact
        :param pulumi.Input[builtins.str] organization: Organization where contact is hired
        :param pulumi.Input[builtins.str] postal_code: Postal code of the contact
        :param pulumi.Input[builtins.str] region: The region of the contact
        :param pulumi.Input[builtins.str] title: Title of the the contact
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "phone", phone)
        if address_line_one is not None:
            pulumi.set(__self__, "address_line_one", address_line_one)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[builtins.str]:
        """
        E-mail address of the contact
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> pulumi.Input[builtins.str]:
        """
        First name of the contact
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> pulumi.Input[builtins.str]:
        """
        Last name of the contact
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter
    def phone(self) -> pulumi.Input[builtins.str]:
        """
        Phone number of the contact
        """
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The address of the contact
        """
        return pulumi.get(self, "address_line_one")

    @address_line_one.setter
    def address_line_one(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "address_line_one", value)

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The address of the contact
        """
        return pulumi.get(self, "address_line_two")

    @address_line_two.setter
    def address_line_two(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "address_line_two", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        City of residence of the contact
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Country code of the contact
        """
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Organization where contact is hired
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Postal code of the contact
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The region of the contact
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Title of the the contact
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class CpsDvEnrollmentCsrArgsDict(TypedDict):
        city: pulumi.Input[builtins.str]
        """
        City where organization is located
        """
        country_code: pulumi.Input[builtins.str]
        """
        The code of the country where organization is located
        """
        organization: pulumi.Input[builtins.str]
        """
        Name of organization used in all legal documents
        """
        organizational_unit: NotRequired[pulumi.Input[builtins.str]]
        """
        Organizational unit of organization
        """
        preferred_trust_chain: NotRequired[pulumi.Input[builtins.str]]
        """
        For the Let's Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
        """
        state: NotRequired[pulumi.Input[builtins.str]]
        """
        State or province of organization location
        """
elif False:
    CpsDvEnrollmentCsrArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsDvEnrollmentCsrArgs:
    def __init__(__self__, *,
                 city: pulumi.Input[builtins.str],
                 country_code: pulumi.Input[builtins.str],
                 organization: pulumi.Input[builtins.str],
                 organizational_unit: Optional[pulumi.Input[builtins.str]] = None,
                 preferred_trust_chain: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] city: City where organization is located
        :param pulumi.Input[builtins.str] country_code: The code of the country where organization is located
        :param pulumi.Input[builtins.str] organization: Name of organization used in all legal documents
        :param pulumi.Input[builtins.str] organizational_unit: Organizational unit of organization
        :param pulumi.Input[builtins.str] preferred_trust_chain: For the Let's Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
        :param pulumi.Input[builtins.str] state: State or province of organization location
        """
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if preferred_trust_chain is not None:
            pulumi.set(__self__, "preferred_trust_chain", preferred_trust_chain)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def city(self) -> pulumi.Input[builtins.str]:
        """
        City where organization is located
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> pulumi.Input[builtins.str]:
        """
        The code of the country where organization is located
        """
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[builtins.str]:
        """
        Name of organization used in all legal documents
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Organizational unit of organization
        """
        return pulumi.get(self, "organizational_unit")

    @organizational_unit.setter
    def organizational_unit(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "organizational_unit", value)

    @property
    @pulumi.getter(name="preferredTrustChain")
    def preferred_trust_chain(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        For the Let's Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
        """
        return pulumi.get(self, "preferred_trust_chain")

    @preferred_trust_chain.setter
    def preferred_trust_chain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "preferred_trust_chain", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        State or province of organization location
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class CpsDvEnrollmentDnsChallengeArgsDict(TypedDict):
        domain: NotRequired[pulumi.Input[builtins.str]]
        """
        Domain for which the challenges were completed
        """
        full_path: NotRequired[pulumi.Input[builtins.str]]
        """
        The domain name where Akamai publishes the response body to validate
        """
        response_body: NotRequired[pulumi.Input[builtins.str]]
        """
        The unique content of the challenge
        """
elif False:
    CpsDvEnrollmentDnsChallengeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsDvEnrollmentDnsChallengeArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[builtins.str]] = None,
                 full_path: Optional[pulumi.Input[builtins.str]] = None,
                 response_body: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] domain: Domain for which the challenges were completed
        :param pulumi.Input[builtins.str] full_path: The domain name where Akamai publishes the response body to validate
        :param pulumi.Input[builtins.str] response_body: The unique content of the challenge
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if full_path is not None:
            pulumi.set(__self__, "full_path", full_path)
        if response_body is not None:
            pulumi.set(__self__, "response_body", response_body)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Domain for which the challenges were completed
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="fullPath")
    def full_path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The domain name where Akamai publishes the response body to validate
        """
        return pulumi.get(self, "full_path")

    @full_path.setter
    def full_path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "full_path", value)

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique content of the challenge
        """
        return pulumi.get(self, "response_body")

    @response_body.setter
    def response_body(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "response_body", value)


if not MYPY:
    class CpsDvEnrollmentHttpChallengeArgsDict(TypedDict):
        domain: NotRequired[pulumi.Input[builtins.str]]
        """
        Domain for which the challenges were completed
        """
        full_path: NotRequired[pulumi.Input[builtins.str]]
        """
        The URL where Akamai publishes the response body to validate
        """
        response_body: NotRequired[pulumi.Input[builtins.str]]
        """
        The unique content of the challenge
        """
elif False:
    CpsDvEnrollmentHttpChallengeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsDvEnrollmentHttpChallengeArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[builtins.str]] = None,
                 full_path: Optional[pulumi.Input[builtins.str]] = None,
                 response_body: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] domain: Domain for which the challenges were completed
        :param pulumi.Input[builtins.str] full_path: The URL where Akamai publishes the response body to validate
        :param pulumi.Input[builtins.str] response_body: The unique content of the challenge
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if full_path is not None:
            pulumi.set(__self__, "full_path", full_path)
        if response_body is not None:
            pulumi.set(__self__, "response_body", response_body)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Domain for which the challenges were completed
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="fullPath")
    def full_path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The URL where Akamai publishes the response body to validate
        """
        return pulumi.get(self, "full_path")

    @full_path.setter
    def full_path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "full_path", value)

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique content of the challenge
        """
        return pulumi.get(self, "response_body")

    @response_body.setter
    def response_body(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "response_body", value)


if not MYPY:
    class CpsDvEnrollmentNetworkConfigurationArgsDict(TypedDict):
        geography: pulumi.Input[builtins.str]
        """
        Geography type used for enrollment
        """
        client_mutual_authentication: NotRequired[pulumi.Input['CpsDvEnrollmentNetworkConfigurationClientMutualAuthenticationArgsDict']]
        """
        The trust chain configuration used for client mutual authentication
        """
        clone_dns_names: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enable CPS to direct traffic using all the SANs listed in the SANs parameter when enrollment is created. Default is false
        """
        disallowed_tls_versions: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        TLS versions which are disallowed
        """
        must_have_ciphers: NotRequired[pulumi.Input[builtins.str]]
        """
        Mandatory Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
        """
        ocsp_stapling: NotRequired[pulumi.Input[builtins.str]]
        """
        Enable OCSP stapling. Default is 'on'
        """
        preferred_ciphers: NotRequired[pulumi.Input[builtins.str]]
        """
        Preferred Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
        """
        quic_enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enable QUIC protocol. Default is false
        """
elif False:
    CpsDvEnrollmentNetworkConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsDvEnrollmentNetworkConfigurationArgs:
    def __init__(__self__, *,
                 geography: pulumi.Input[builtins.str],
                 client_mutual_authentication: Optional[pulumi.Input['CpsDvEnrollmentNetworkConfigurationClientMutualAuthenticationArgs']] = None,
                 clone_dns_names: Optional[pulumi.Input[builtins.bool]] = None,
                 disallowed_tls_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 must_have_ciphers: Optional[pulumi.Input[builtins.str]] = None,
                 ocsp_stapling: Optional[pulumi.Input[builtins.str]] = None,
                 preferred_ciphers: Optional[pulumi.Input[builtins.str]] = None,
                 quic_enabled: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] geography: Geography type used for enrollment
        :param pulumi.Input['CpsDvEnrollmentNetworkConfigurationClientMutualAuthenticationArgs'] client_mutual_authentication: The trust chain configuration used for client mutual authentication
        :param pulumi.Input[builtins.bool] clone_dns_names: Enable CPS to direct traffic using all the SANs listed in the SANs parameter when enrollment is created. Default is false
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] disallowed_tls_versions: TLS versions which are disallowed
        :param pulumi.Input[builtins.str] must_have_ciphers: Mandatory Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
        :param pulumi.Input[builtins.str] ocsp_stapling: Enable OCSP stapling. Default is 'on'
        :param pulumi.Input[builtins.str] preferred_ciphers: Preferred Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
        :param pulumi.Input[builtins.bool] quic_enabled: Enable QUIC protocol. Default is false
        """
        pulumi.set(__self__, "geography", geography)
        if client_mutual_authentication is not None:
            pulumi.set(__self__, "client_mutual_authentication", client_mutual_authentication)
        if clone_dns_names is not None:
            pulumi.set(__self__, "clone_dns_names", clone_dns_names)
        if disallowed_tls_versions is not None:
            pulumi.set(__self__, "disallowed_tls_versions", disallowed_tls_versions)
        if must_have_ciphers is not None:
            pulumi.set(__self__, "must_have_ciphers", must_have_ciphers)
        if ocsp_stapling is not None:
            pulumi.set(__self__, "ocsp_stapling", ocsp_stapling)
        if preferred_ciphers is not None:
            pulumi.set(__self__, "preferred_ciphers", preferred_ciphers)
        if quic_enabled is not None:
            pulumi.set(__self__, "quic_enabled", quic_enabled)

    @property
    @pulumi.getter
    def geography(self) -> pulumi.Input[builtins.str]:
        """
        Geography type used for enrollment
        """
        return pulumi.get(self, "geography")

    @geography.setter
    def geography(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "geography", value)

    @property
    @pulumi.getter(name="clientMutualAuthentication")
    def client_mutual_authentication(self) -> Optional[pulumi.Input['CpsDvEnrollmentNetworkConfigurationClientMutualAuthenticationArgs']]:
        """
        The trust chain configuration used for client mutual authentication
        """
        return pulumi.get(self, "client_mutual_authentication")

    @client_mutual_authentication.setter
    def client_mutual_authentication(self, value: Optional[pulumi.Input['CpsDvEnrollmentNetworkConfigurationClientMutualAuthenticationArgs']]):
        pulumi.set(self, "client_mutual_authentication", value)

    @property
    @pulumi.getter(name="cloneDnsNames")
    def clone_dns_names(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable CPS to direct traffic using all the SANs listed in the SANs parameter when enrollment is created. Default is false
        """
        return pulumi.get(self, "clone_dns_names")

    @clone_dns_names.setter
    def clone_dns_names(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "clone_dns_names", value)

    @property
    @pulumi.getter(name="disallowedTlsVersions")
    def disallowed_tls_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        TLS versions which are disallowed
        """
        return pulumi.get(self, "disallowed_tls_versions")

    @disallowed_tls_versions.setter
    def disallowed_tls_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "disallowed_tls_versions", value)

    @property
    @pulumi.getter(name="mustHaveCiphers")
    def must_have_ciphers(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Mandatory Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
        """
        return pulumi.get(self, "must_have_ciphers")

    @must_have_ciphers.setter
    def must_have_ciphers(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "must_have_ciphers", value)

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Enable OCSP stapling. Default is 'on'
        """
        return pulumi.get(self, "ocsp_stapling")

    @ocsp_stapling.setter
    def ocsp_stapling(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ocsp_stapling", value)

    @property
    @pulumi.getter(name="preferredCiphers")
    def preferred_ciphers(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Preferred Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
        """
        return pulumi.get(self, "preferred_ciphers")

    @preferred_ciphers.setter
    def preferred_ciphers(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "preferred_ciphers", value)

    @property
    @pulumi.getter(name="quicEnabled")
    def quic_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable QUIC protocol. Default is false
        """
        return pulumi.get(self, "quic_enabled")

    @quic_enabled.setter
    def quic_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "quic_enabled", value)


if not MYPY:
    class CpsDvEnrollmentNetworkConfigurationClientMutualAuthenticationArgsDict(TypedDict):
        ocsp_enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enable OCSP stapling
        """
        send_ca_list_to_client: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enable the server to send the certificate authority (CA) list to the client
        """
        set_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The identifier of the set of trust chains, created in the Trust Chain Manager
        """
elif False:
    CpsDvEnrollmentNetworkConfigurationClientMutualAuthenticationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsDvEnrollmentNetworkConfigurationClientMutualAuthenticationArgs:
    def __init__(__self__, *,
                 ocsp_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 send_ca_list_to_client: Optional[pulumi.Input[builtins.bool]] = None,
                 set_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.bool] ocsp_enabled: Enable OCSP stapling
        :param pulumi.Input[builtins.bool] send_ca_list_to_client: Enable the server to send the certificate authority (CA) list to the client
        :param pulumi.Input[builtins.str] set_id: The identifier of the set of trust chains, created in the Trust Chain Manager
        """
        if ocsp_enabled is not None:
            pulumi.set(__self__, "ocsp_enabled", ocsp_enabled)
        if send_ca_list_to_client is not None:
            pulumi.set(__self__, "send_ca_list_to_client", send_ca_list_to_client)
        if set_id is not None:
            pulumi.set(__self__, "set_id", set_id)

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable OCSP stapling
        """
        return pulumi.get(self, "ocsp_enabled")

    @ocsp_enabled.setter
    def ocsp_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ocsp_enabled", value)

    @property
    @pulumi.getter(name="sendCaListToClient")
    def send_ca_list_to_client(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable the server to send the certificate authority (CA) list to the client
        """
        return pulumi.get(self, "send_ca_list_to_client")

    @send_ca_list_to_client.setter
    def send_ca_list_to_client(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "send_ca_list_to_client", value)

    @property
    @pulumi.getter(name="setId")
    def set_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The identifier of the set of trust chains, created in the Trust Chain Manager
        """
        return pulumi.get(self, "set_id")

    @set_id.setter
    def set_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "set_id", value)


if not MYPY:
    class CpsDvEnrollmentOrganizationArgsDict(TypedDict):
        address_line_one: pulumi.Input[builtins.str]
        """
        The address of organization
        """
        city: pulumi.Input[builtins.str]
        """
        City of organization
        """
        country_code: pulumi.Input[builtins.str]
        """
        Country code of organization
        """
        name: pulumi.Input[builtins.str]
        """
        Name of organization
        """
        phone: pulumi.Input[builtins.str]
        """
        Phone number of organization
        """
        postal_code: pulumi.Input[builtins.str]
        """
        Postal code of organization
        """
        region: pulumi.Input[builtins.str]
        """
        The region of organization
        """
        address_line_two: NotRequired[pulumi.Input[builtins.str]]
        """
        The address of organization
        """
elif False:
    CpsDvEnrollmentOrganizationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsDvEnrollmentOrganizationArgs:
    def __init__(__self__, *,
                 address_line_one: pulumi.Input[builtins.str],
                 city: pulumi.Input[builtins.str],
                 country_code: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 phone: pulumi.Input[builtins.str],
                 postal_code: pulumi.Input[builtins.str],
                 region: pulumi.Input[builtins.str],
                 address_line_two: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] address_line_one: The address of organization
        :param pulumi.Input[builtins.str] city: City of organization
        :param pulumi.Input[builtins.str] country_code: Country code of organization
        :param pulumi.Input[builtins.str] name: Name of organization
        :param pulumi.Input[builtins.str] phone: Phone number of organization
        :param pulumi.Input[builtins.str] postal_code: Postal code of organization
        :param pulumi.Input[builtins.str] region: The region of organization
        :param pulumi.Input[builtins.str] address_line_two: The address of organization
        """
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> pulumi.Input[builtins.str]:
        """
        The address of organization
        """
        return pulumi.get(self, "address_line_one")

    @address_line_one.setter
    def address_line_one(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "address_line_one", value)

    @property
    @pulumi.getter
    def city(self) -> pulumi.Input[builtins.str]:
        """
        City of organization
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> pulumi.Input[builtins.str]:
        """
        Country code of organization
        """
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of organization
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def phone(self) -> pulumi.Input[builtins.str]:
        """
        Phone number of organization
        """
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> pulumi.Input[builtins.str]:
        """
        Postal code of organization
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[builtins.str]:
        """
        The region of organization
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The address of organization
        """
        return pulumi.get(self, "address_line_two")

    @address_line_two.setter
    def address_line_two(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "address_line_two", value)


if not MYPY:
    class CpsDvEnrollmentTechContactArgsDict(TypedDict):
        email: pulumi.Input[builtins.str]
        """
        E-mail address of the contact
        """
        first_name: pulumi.Input[builtins.str]
        """
        First name of the contact
        """
        last_name: pulumi.Input[builtins.str]
        """
        Last name of the contact
        """
        phone: pulumi.Input[builtins.str]
        """
        Phone number of the contact
        """
        address_line_one: NotRequired[pulumi.Input[builtins.str]]
        """
        The address of the contact
        """
        address_line_two: NotRequired[pulumi.Input[builtins.str]]
        """
        The address of the contact
        """
        city: NotRequired[pulumi.Input[builtins.str]]
        """
        City of residence of the contact
        """
        country_code: NotRequired[pulumi.Input[builtins.str]]
        """
        Country code of the contact
        """
        organization: NotRequired[pulumi.Input[builtins.str]]
        """
        Organization where contact is hired
        """
        postal_code: NotRequired[pulumi.Input[builtins.str]]
        """
        Postal code of the contact
        """
        region: NotRequired[pulumi.Input[builtins.str]]
        """
        The region of the contact
        """
        title: NotRequired[pulumi.Input[builtins.str]]
        """
        Title of the the contact
        """
elif False:
    CpsDvEnrollmentTechContactArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsDvEnrollmentTechContactArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[builtins.str],
                 first_name: pulumi.Input[builtins.str],
                 last_name: pulumi.Input[builtins.str],
                 phone: pulumi.Input[builtins.str],
                 address_line_one: Optional[pulumi.Input[builtins.str]] = None,
                 address_line_two: Optional[pulumi.Input[builtins.str]] = None,
                 city: Optional[pulumi.Input[builtins.str]] = None,
                 country_code: Optional[pulumi.Input[builtins.str]] = None,
                 organization: Optional[pulumi.Input[builtins.str]] = None,
                 postal_code: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] email: E-mail address of the contact
        :param pulumi.Input[builtins.str] first_name: First name of the contact
        :param pulumi.Input[builtins.str] last_name: Last name of the contact
        :param pulumi.Input[builtins.str] phone: Phone number of the contact
        :param pulumi.Input[builtins.str] address_line_one: The address of the contact
        :param pulumi.Input[builtins.str] address_line_two: The address of the contact
        :param pulumi.Input[builtins.str] city: City of residence of the contact
        :param pulumi.Input[builtins.str] country_code: Country code of the contact
        :param pulumi.Input[builtins.str] organization: Organization where contact is hired
        :param pulumi.Input[builtins.str] postal_code: Postal code of the contact
        :param pulumi.Input[builtins.str] region: The region of the contact
        :param pulumi.Input[builtins.str] title: Title of the the contact
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "phone", phone)
        if address_line_one is not None:
            pulumi.set(__self__, "address_line_one", address_line_one)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[builtins.str]:
        """
        E-mail address of the contact
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> pulumi.Input[builtins.str]:
        """
        First name of the contact
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> pulumi.Input[builtins.str]:
        """
        Last name of the contact
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter
    def phone(self) -> pulumi.Input[builtins.str]:
        """
        Phone number of the contact
        """
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The address of the contact
        """
        return pulumi.get(self, "address_line_one")

    @address_line_one.setter
    def address_line_one(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "address_line_one", value)

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The address of the contact
        """
        return pulumi.get(self, "address_line_two")

    @address_line_two.setter
    def address_line_two(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "address_line_two", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        City of residence of the contact
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Country code of the contact
        """
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Organization where contact is hired
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Postal code of the contact
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The region of the contact
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Title of the the contact
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class CpsDvEnrollmentTimeoutsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[builtins.str]]
elif False:
    CpsDvEnrollmentTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsDvEnrollmentTimeoutsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[builtins.str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default", value)


if not MYPY:
    class CpsDvValidationTimeoutsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[builtins.str]]
elif False:
    CpsDvValidationTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsDvValidationTimeoutsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[builtins.str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default", value)


if not MYPY:
    class CpsThirdPartyEnrollmentAdminContactArgsDict(TypedDict):
        email: pulumi.Input[builtins.str]
        """
        E-mail address of the contact
        """
        first_name: pulumi.Input[builtins.str]
        """
        First name of the contact
        """
        last_name: pulumi.Input[builtins.str]
        """
        Last name of the contact
        """
        phone: pulumi.Input[builtins.str]
        """
        Phone number of the contact
        """
        address_line_one: NotRequired[pulumi.Input[builtins.str]]
        """
        The address of the contact
        """
        address_line_two: NotRequired[pulumi.Input[builtins.str]]
        """
        The address of the contact
        """
        city: NotRequired[pulumi.Input[builtins.str]]
        """
        City of residence of the contact
        """
        country_code: NotRequired[pulumi.Input[builtins.str]]
        """
        Country code of the contact
        """
        organization: NotRequired[pulumi.Input[builtins.str]]
        """
        Organization where contact is hired
        """
        postal_code: NotRequired[pulumi.Input[builtins.str]]
        """
        Postal code of the contact
        """
        region: NotRequired[pulumi.Input[builtins.str]]
        """
        The region of the contact
        """
        title: NotRequired[pulumi.Input[builtins.str]]
        """
        Title of the the contact
        """
elif False:
    CpsThirdPartyEnrollmentAdminContactArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsThirdPartyEnrollmentAdminContactArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[builtins.str],
                 first_name: pulumi.Input[builtins.str],
                 last_name: pulumi.Input[builtins.str],
                 phone: pulumi.Input[builtins.str],
                 address_line_one: Optional[pulumi.Input[builtins.str]] = None,
                 address_line_two: Optional[pulumi.Input[builtins.str]] = None,
                 city: Optional[pulumi.Input[builtins.str]] = None,
                 country_code: Optional[pulumi.Input[builtins.str]] = None,
                 organization: Optional[pulumi.Input[builtins.str]] = None,
                 postal_code: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] email: E-mail address of the contact
        :param pulumi.Input[builtins.str] first_name: First name of the contact
        :param pulumi.Input[builtins.str] last_name: Last name of the contact
        :param pulumi.Input[builtins.str] phone: Phone number of the contact
        :param pulumi.Input[builtins.str] address_line_one: The address of the contact
        :param pulumi.Input[builtins.str] address_line_two: The address of the contact
        :param pulumi.Input[builtins.str] city: City of residence of the contact
        :param pulumi.Input[builtins.str] country_code: Country code of the contact
        :param pulumi.Input[builtins.str] organization: Organization where contact is hired
        :param pulumi.Input[builtins.str] postal_code: Postal code of the contact
        :param pulumi.Input[builtins.str] region: The region of the contact
        :param pulumi.Input[builtins.str] title: Title of the the contact
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "phone", phone)
        if address_line_one is not None:
            pulumi.set(__self__, "address_line_one", address_line_one)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[builtins.str]:
        """
        E-mail address of the contact
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> pulumi.Input[builtins.str]:
        """
        First name of the contact
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> pulumi.Input[builtins.str]:
        """
        Last name of the contact
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter
    def phone(self) -> pulumi.Input[builtins.str]:
        """
        Phone number of the contact
        """
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The address of the contact
        """
        return pulumi.get(self, "address_line_one")

    @address_line_one.setter
    def address_line_one(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "address_line_one", value)

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The address of the contact
        """
        return pulumi.get(self, "address_line_two")

    @address_line_two.setter
    def address_line_two(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "address_line_two", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        City of residence of the contact
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Country code of the contact
        """
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Organization where contact is hired
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Postal code of the contact
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The region of the contact
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Title of the the contact
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class CpsThirdPartyEnrollmentCsrArgsDict(TypedDict):
        city: pulumi.Input[builtins.str]
        """
        City where organization is located
        """
        country_code: pulumi.Input[builtins.str]
        """
        The code of the country where organization is located
        """
        organization: pulumi.Input[builtins.str]
        """
        Name of organization used in all legal documents
        """
        organizational_unit: NotRequired[pulumi.Input[builtins.str]]
        """
        Organizational unit of organization
        """
        preferred_trust_chain: NotRequired[pulumi.Input[builtins.str]]
        """
        For the Let's Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
        """
        state: NotRequired[pulumi.Input[builtins.str]]
        """
        State or province of organization location
        """
elif False:
    CpsThirdPartyEnrollmentCsrArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsThirdPartyEnrollmentCsrArgs:
    def __init__(__self__, *,
                 city: pulumi.Input[builtins.str],
                 country_code: pulumi.Input[builtins.str],
                 organization: pulumi.Input[builtins.str],
                 organizational_unit: Optional[pulumi.Input[builtins.str]] = None,
                 preferred_trust_chain: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] city: City where organization is located
        :param pulumi.Input[builtins.str] country_code: The code of the country where organization is located
        :param pulumi.Input[builtins.str] organization: Name of organization used in all legal documents
        :param pulumi.Input[builtins.str] organizational_unit: Organizational unit of organization
        :param pulumi.Input[builtins.str] preferred_trust_chain: For the Let's Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
        :param pulumi.Input[builtins.str] state: State or province of organization location
        """
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if preferred_trust_chain is not None:
            pulumi.set(__self__, "preferred_trust_chain", preferred_trust_chain)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def city(self) -> pulumi.Input[builtins.str]:
        """
        City where organization is located
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> pulumi.Input[builtins.str]:
        """
        The code of the country where organization is located
        """
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[builtins.str]:
        """
        Name of organization used in all legal documents
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Organizational unit of organization
        """
        return pulumi.get(self, "organizational_unit")

    @organizational_unit.setter
    def organizational_unit(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "organizational_unit", value)

    @property
    @pulumi.getter(name="preferredTrustChain")
    def preferred_trust_chain(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        For the Let's Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
        """
        return pulumi.get(self, "preferred_trust_chain")

    @preferred_trust_chain.setter
    def preferred_trust_chain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "preferred_trust_chain", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        State or province of organization location
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class CpsThirdPartyEnrollmentNetworkConfigurationArgsDict(TypedDict):
        geography: pulumi.Input[builtins.str]
        """
        Geography type used for enrollment
        """
        client_mutual_authentication: NotRequired[pulumi.Input['CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthenticationArgsDict']]
        """
        The trust chain configuration used for client mutual authentication
        """
        clone_dns_names: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enable CPS to direct traffic using all the SANs listed in the SANs parameter when enrollment is created. Default is false
        """
        disallowed_tls_versions: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        TLS versions which are disallowed
        """
        must_have_ciphers: NotRequired[pulumi.Input[builtins.str]]
        """
        Mandatory Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
        """
        ocsp_stapling: NotRequired[pulumi.Input[builtins.str]]
        """
        Enable OCSP stapling. Default is 'on'
        """
        preferred_ciphers: NotRequired[pulumi.Input[builtins.str]]
        """
        Preferred Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
        """
        quic_enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enable QUIC protocol. Default is false
        """
elif False:
    CpsThirdPartyEnrollmentNetworkConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsThirdPartyEnrollmentNetworkConfigurationArgs:
    def __init__(__self__, *,
                 geography: pulumi.Input[builtins.str],
                 client_mutual_authentication: Optional[pulumi.Input['CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthenticationArgs']] = None,
                 clone_dns_names: Optional[pulumi.Input[builtins.bool]] = None,
                 disallowed_tls_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 must_have_ciphers: Optional[pulumi.Input[builtins.str]] = None,
                 ocsp_stapling: Optional[pulumi.Input[builtins.str]] = None,
                 preferred_ciphers: Optional[pulumi.Input[builtins.str]] = None,
                 quic_enabled: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] geography: Geography type used for enrollment
        :param pulumi.Input['CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthenticationArgs'] client_mutual_authentication: The trust chain configuration used for client mutual authentication
        :param pulumi.Input[builtins.bool] clone_dns_names: Enable CPS to direct traffic using all the SANs listed in the SANs parameter when enrollment is created. Default is false
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] disallowed_tls_versions: TLS versions which are disallowed
        :param pulumi.Input[builtins.str] must_have_ciphers: Mandatory Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
        :param pulumi.Input[builtins.str] ocsp_stapling: Enable OCSP stapling. Default is 'on'
        :param pulumi.Input[builtins.str] preferred_ciphers: Preferred Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
        :param pulumi.Input[builtins.bool] quic_enabled: Enable QUIC protocol. Default is false
        """
        pulumi.set(__self__, "geography", geography)
        if client_mutual_authentication is not None:
            pulumi.set(__self__, "client_mutual_authentication", client_mutual_authentication)
        if clone_dns_names is not None:
            pulumi.set(__self__, "clone_dns_names", clone_dns_names)
        if disallowed_tls_versions is not None:
            pulumi.set(__self__, "disallowed_tls_versions", disallowed_tls_versions)
        if must_have_ciphers is not None:
            pulumi.set(__self__, "must_have_ciphers", must_have_ciphers)
        if ocsp_stapling is not None:
            pulumi.set(__self__, "ocsp_stapling", ocsp_stapling)
        if preferred_ciphers is not None:
            pulumi.set(__self__, "preferred_ciphers", preferred_ciphers)
        if quic_enabled is not None:
            pulumi.set(__self__, "quic_enabled", quic_enabled)

    @property
    @pulumi.getter
    def geography(self) -> pulumi.Input[builtins.str]:
        """
        Geography type used for enrollment
        """
        return pulumi.get(self, "geography")

    @geography.setter
    def geography(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "geography", value)

    @property
    @pulumi.getter(name="clientMutualAuthentication")
    def client_mutual_authentication(self) -> Optional[pulumi.Input['CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthenticationArgs']]:
        """
        The trust chain configuration used for client mutual authentication
        """
        return pulumi.get(self, "client_mutual_authentication")

    @client_mutual_authentication.setter
    def client_mutual_authentication(self, value: Optional[pulumi.Input['CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthenticationArgs']]):
        pulumi.set(self, "client_mutual_authentication", value)

    @property
    @pulumi.getter(name="cloneDnsNames")
    def clone_dns_names(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable CPS to direct traffic using all the SANs listed in the SANs parameter when enrollment is created. Default is false
        """
        return pulumi.get(self, "clone_dns_names")

    @clone_dns_names.setter
    def clone_dns_names(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "clone_dns_names", value)

    @property
    @pulumi.getter(name="disallowedTlsVersions")
    def disallowed_tls_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        TLS versions which are disallowed
        """
        return pulumi.get(self, "disallowed_tls_versions")

    @disallowed_tls_versions.setter
    def disallowed_tls_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "disallowed_tls_versions", value)

    @property
    @pulumi.getter(name="mustHaveCiphers")
    def must_have_ciphers(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Mandatory Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
        """
        return pulumi.get(self, "must_have_ciphers")

    @must_have_ciphers.setter
    def must_have_ciphers(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "must_have_ciphers", value)

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Enable OCSP stapling. Default is 'on'
        """
        return pulumi.get(self, "ocsp_stapling")

    @ocsp_stapling.setter
    def ocsp_stapling(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ocsp_stapling", value)

    @property
    @pulumi.getter(name="preferredCiphers")
    def preferred_ciphers(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Preferred Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
        """
        return pulumi.get(self, "preferred_ciphers")

    @preferred_ciphers.setter
    def preferred_ciphers(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "preferred_ciphers", value)

    @property
    @pulumi.getter(name="quicEnabled")
    def quic_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable QUIC protocol. Default is false
        """
        return pulumi.get(self, "quic_enabled")

    @quic_enabled.setter
    def quic_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "quic_enabled", value)


if not MYPY:
    class CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthenticationArgsDict(TypedDict):
        ocsp_enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enable OCSP stapling
        """
        send_ca_list_to_client: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enable the server to send the certificate authority (CA) list to the client
        """
        set_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The identifier of the set of trust chains, created in the Trust Chain Manager
        """
elif False:
    CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthenticationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthenticationArgs:
    def __init__(__self__, *,
                 ocsp_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 send_ca_list_to_client: Optional[pulumi.Input[builtins.bool]] = None,
                 set_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.bool] ocsp_enabled: Enable OCSP stapling
        :param pulumi.Input[builtins.bool] send_ca_list_to_client: Enable the server to send the certificate authority (CA) list to the client
        :param pulumi.Input[builtins.str] set_id: The identifier of the set of trust chains, created in the Trust Chain Manager
        """
        if ocsp_enabled is not None:
            pulumi.set(__self__, "ocsp_enabled", ocsp_enabled)
        if send_ca_list_to_client is not None:
            pulumi.set(__self__, "send_ca_list_to_client", send_ca_list_to_client)
        if set_id is not None:
            pulumi.set(__self__, "set_id", set_id)

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable OCSP stapling
        """
        return pulumi.get(self, "ocsp_enabled")

    @ocsp_enabled.setter
    def ocsp_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ocsp_enabled", value)

    @property
    @pulumi.getter(name="sendCaListToClient")
    def send_ca_list_to_client(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable the server to send the certificate authority (CA) list to the client
        """
        return pulumi.get(self, "send_ca_list_to_client")

    @send_ca_list_to_client.setter
    def send_ca_list_to_client(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "send_ca_list_to_client", value)

    @property
    @pulumi.getter(name="setId")
    def set_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The identifier of the set of trust chains, created in the Trust Chain Manager
        """
        return pulumi.get(self, "set_id")

    @set_id.setter
    def set_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "set_id", value)


if not MYPY:
    class CpsThirdPartyEnrollmentOrganizationArgsDict(TypedDict):
        address_line_one: pulumi.Input[builtins.str]
        """
        The address of organization
        """
        city: pulumi.Input[builtins.str]
        """
        City of organization
        """
        country_code: pulumi.Input[builtins.str]
        """
        Country code of organization
        """
        name: pulumi.Input[builtins.str]
        """
        Name of organization
        """
        phone: pulumi.Input[builtins.str]
        """
        Phone number of organization
        """
        postal_code: pulumi.Input[builtins.str]
        """
        Postal code of organization
        """
        region: pulumi.Input[builtins.str]
        """
        The region of organization
        """
        address_line_two: NotRequired[pulumi.Input[builtins.str]]
        """
        The address of organization
        """
elif False:
    CpsThirdPartyEnrollmentOrganizationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsThirdPartyEnrollmentOrganizationArgs:
    def __init__(__self__, *,
                 address_line_one: pulumi.Input[builtins.str],
                 city: pulumi.Input[builtins.str],
                 country_code: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 phone: pulumi.Input[builtins.str],
                 postal_code: pulumi.Input[builtins.str],
                 region: pulumi.Input[builtins.str],
                 address_line_two: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] address_line_one: The address of organization
        :param pulumi.Input[builtins.str] city: City of organization
        :param pulumi.Input[builtins.str] country_code: Country code of organization
        :param pulumi.Input[builtins.str] name: Name of organization
        :param pulumi.Input[builtins.str] phone: Phone number of organization
        :param pulumi.Input[builtins.str] postal_code: Postal code of organization
        :param pulumi.Input[builtins.str] region: The region of organization
        :param pulumi.Input[builtins.str] address_line_two: The address of organization
        """
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> pulumi.Input[builtins.str]:
        """
        The address of organization
        """
        return pulumi.get(self, "address_line_one")

    @address_line_one.setter
    def address_line_one(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "address_line_one", value)

    @property
    @pulumi.getter
    def city(self) -> pulumi.Input[builtins.str]:
        """
        City of organization
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> pulumi.Input[builtins.str]:
        """
        Country code of organization
        """
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of organization
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def phone(self) -> pulumi.Input[builtins.str]:
        """
        Phone number of organization
        """
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> pulumi.Input[builtins.str]:
        """
        Postal code of organization
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[builtins.str]:
        """
        The region of organization
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The address of organization
        """
        return pulumi.get(self, "address_line_two")

    @address_line_two.setter
    def address_line_two(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "address_line_two", value)


if not MYPY:
    class CpsThirdPartyEnrollmentTechContactArgsDict(TypedDict):
        email: pulumi.Input[builtins.str]
        """
        E-mail address of the contact
        """
        first_name: pulumi.Input[builtins.str]
        """
        First name of the contact
        """
        last_name: pulumi.Input[builtins.str]
        """
        Last name of the contact
        """
        phone: pulumi.Input[builtins.str]
        """
        Phone number of the contact
        """
        address_line_one: NotRequired[pulumi.Input[builtins.str]]
        """
        The address of the contact
        """
        address_line_two: NotRequired[pulumi.Input[builtins.str]]
        """
        The address of the contact
        """
        city: NotRequired[pulumi.Input[builtins.str]]
        """
        City of residence of the contact
        """
        country_code: NotRequired[pulumi.Input[builtins.str]]
        """
        Country code of the contact
        """
        organization: NotRequired[pulumi.Input[builtins.str]]
        """
        Organization where contact is hired
        """
        postal_code: NotRequired[pulumi.Input[builtins.str]]
        """
        Postal code of the contact
        """
        region: NotRequired[pulumi.Input[builtins.str]]
        """
        The region of the contact
        """
        title: NotRequired[pulumi.Input[builtins.str]]
        """
        Title of the the contact
        """
elif False:
    CpsThirdPartyEnrollmentTechContactArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsThirdPartyEnrollmentTechContactArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[builtins.str],
                 first_name: pulumi.Input[builtins.str],
                 last_name: pulumi.Input[builtins.str],
                 phone: pulumi.Input[builtins.str],
                 address_line_one: Optional[pulumi.Input[builtins.str]] = None,
                 address_line_two: Optional[pulumi.Input[builtins.str]] = None,
                 city: Optional[pulumi.Input[builtins.str]] = None,
                 country_code: Optional[pulumi.Input[builtins.str]] = None,
                 organization: Optional[pulumi.Input[builtins.str]] = None,
                 postal_code: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] email: E-mail address of the contact
        :param pulumi.Input[builtins.str] first_name: First name of the contact
        :param pulumi.Input[builtins.str] last_name: Last name of the contact
        :param pulumi.Input[builtins.str] phone: Phone number of the contact
        :param pulumi.Input[builtins.str] address_line_one: The address of the contact
        :param pulumi.Input[builtins.str] address_line_two: The address of the contact
        :param pulumi.Input[builtins.str] city: City of residence of the contact
        :param pulumi.Input[builtins.str] country_code: Country code of the contact
        :param pulumi.Input[builtins.str] organization: Organization where contact is hired
        :param pulumi.Input[builtins.str] postal_code: Postal code of the contact
        :param pulumi.Input[builtins.str] region: The region of the contact
        :param pulumi.Input[builtins.str] title: Title of the the contact
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "phone", phone)
        if address_line_one is not None:
            pulumi.set(__self__, "address_line_one", address_line_one)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[builtins.str]:
        """
        E-mail address of the contact
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> pulumi.Input[builtins.str]:
        """
        First name of the contact
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> pulumi.Input[builtins.str]:
        """
        Last name of the contact
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter
    def phone(self) -> pulumi.Input[builtins.str]:
        """
        Phone number of the contact
        """
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The address of the contact
        """
        return pulumi.get(self, "address_line_one")

    @address_line_one.setter
    def address_line_one(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "address_line_one", value)

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The address of the contact
        """
        return pulumi.get(self, "address_line_two")

    @address_line_two.setter
    def address_line_two(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "address_line_two", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        City of residence of the contact
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Country code of the contact
        """
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Organization where contact is hired
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Postal code of the contact
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The region of the contact
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Title of the the contact
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class CpsThirdPartyEnrollmentTimeoutsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[builtins.str]]
elif False:
    CpsThirdPartyEnrollmentTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsThirdPartyEnrollmentTimeoutsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[builtins.str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default", value)


if not MYPY:
    class CpsUploadCertificateTimeoutsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[builtins.str]]
elif False:
    CpsUploadCertificateTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CpsUploadCertificateTimeoutsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[builtins.str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default", value)


if not MYPY:
    class DatastreamAzureConnectorArgsDict(TypedDict):
        access_key: pulumi.Input[builtins.str]
        """
        Access keys associated with Azure Storage account
        """
        account_name: pulumi.Input[builtins.str]
        """
        Specifies the Azure Storage account name
        """
        container_name: pulumi.Input[builtins.str]
        """
        Specifies the Azure Storage container name
        """
        display_name: pulumi.Input[builtins.str]
        """
        The name of the connector
        """
        path: pulumi.Input[builtins.str]
        """
        The path to the folder within Azure Storage container where logs will be stored
        """
        compress_logs: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether the logs should be compressed
        """
elif False:
    DatastreamAzureConnectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatastreamAzureConnectorArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[builtins.str],
                 account_name: pulumi.Input[builtins.str],
                 container_name: pulumi.Input[builtins.str],
                 display_name: pulumi.Input[builtins.str],
                 path: pulumi.Input[builtins.str],
                 compress_logs: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] access_key: Access keys associated with Azure Storage account
        :param pulumi.Input[builtins.str] account_name: Specifies the Azure Storage account name
        :param pulumi.Input[builtins.str] container_name: Specifies the Azure Storage container name
        :param pulumi.Input[builtins.str] display_name: The name of the connector
        :param pulumi.Input[builtins.str] path: The path to the folder within Azure Storage container where logs will be stored
        :param pulumi.Input[builtins.bool] compress_logs: Indicates whether the logs should be compressed
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "path", path)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[builtins.str]:
        """
        Access keys associated with Azure Storage account
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[builtins.str]:
        """
        Specifies the Azure Storage account name
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> pulumi.Input[builtins.str]:
        """
        Specifies the Azure Storage container name
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the connector
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[builtins.str]:
        """
        The path to the folder within Azure Storage container where logs will be stored
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether the logs should be compressed
        """
        return pulumi.get(self, "compress_logs")

    @compress_logs.setter
    def compress_logs(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "compress_logs", value)


if not MYPY:
    class DatastreamDatadogConnectorArgsDict(TypedDict):
        auth_token: pulumi.Input[builtins.str]
        """
        The API key associated with Datadog account
        """
        display_name: pulumi.Input[builtins.str]
        """
        The name of the connector
        """
        endpoint: pulumi.Input[builtins.str]
        """
        The Datadog endpoint where logs will be stored
        """
        compress_logs: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether the logs should be compressed
        """
        service: NotRequired[pulumi.Input[builtins.str]]
        """
        The service of the Datadog connector
        """
        source: NotRequired[pulumi.Input[builtins.str]]
        """
        The source of the Datadog connector
        """
        tags: NotRequired[pulumi.Input[builtins.str]]
        """
        The tags of the Datadog connector
        """
elif False:
    DatastreamDatadogConnectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatastreamDatadogConnectorArgs:
    def __init__(__self__, *,
                 auth_token: pulumi.Input[builtins.str],
                 display_name: pulumi.Input[builtins.str],
                 endpoint: pulumi.Input[builtins.str],
                 compress_logs: Optional[pulumi.Input[builtins.bool]] = None,
                 service: Optional[pulumi.Input[builtins.str]] = None,
                 source: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] auth_token: The API key associated with Datadog account
        :param pulumi.Input[builtins.str] display_name: The name of the connector
        :param pulumi.Input[builtins.str] endpoint: The Datadog endpoint where logs will be stored
        :param pulumi.Input[builtins.bool] compress_logs: Indicates whether the logs should be compressed
        :param pulumi.Input[builtins.str] service: The service of the Datadog connector
        :param pulumi.Input[builtins.str] source: The source of the Datadog connector
        :param pulumi.Input[builtins.str] tags: The tags of the Datadog connector
        """
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> pulumi.Input[builtins.str]:
        """
        The API key associated with Datadog account
        """
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the connector
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[builtins.str]:
        """
        The Datadog endpoint where logs will be stored
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether the logs should be compressed
        """
        return pulumi.get(self, "compress_logs")

    @compress_logs.setter
    def compress_logs(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "compress_logs", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The service of the Datadog connector
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The source of the Datadog connector
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The tags of the Datadog connector
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class DatastreamDeliveryConfigurationArgsDict(TypedDict):
        format: pulumi.Input[builtins.str]
        """
        The format in which logs will be received
        """
        frequency: pulumi.Input['DatastreamDeliveryConfigurationFrequencyArgsDict']
        """
        The frequency of collecting logs from each uploader and sending these logs to a destination
        """
        field_delimiter: NotRequired[pulumi.Input[builtins.str]]
        """
        A delimiter that you use to separate data set fields in log lines
        """
        upload_file_prefix: NotRequired[pulumi.Input[builtins.str]]
        """
        The prefix of the log file that will be send to a destination
        """
        upload_file_suffix: NotRequired[pulumi.Input[builtins.str]]
        """
        The suffix of the log file that will be send to a destination
        """
elif False:
    DatastreamDeliveryConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatastreamDeliveryConfigurationArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[builtins.str],
                 frequency: pulumi.Input['DatastreamDeliveryConfigurationFrequencyArgs'],
                 field_delimiter: Optional[pulumi.Input[builtins.str]] = None,
                 upload_file_prefix: Optional[pulumi.Input[builtins.str]] = None,
                 upload_file_suffix: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] format: The format in which logs will be received
        :param pulumi.Input['DatastreamDeliveryConfigurationFrequencyArgs'] frequency: The frequency of collecting logs from each uploader and sending these logs to a destination
        :param pulumi.Input[builtins.str] field_delimiter: A delimiter that you use to separate data set fields in log lines
        :param pulumi.Input[builtins.str] upload_file_prefix: The prefix of the log file that will be send to a destination
        :param pulumi.Input[builtins.str] upload_file_suffix: The suffix of the log file that will be send to a destination
        """
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "frequency", frequency)
        if field_delimiter is not None:
            pulumi.set(__self__, "field_delimiter", field_delimiter)
        if upload_file_prefix is not None:
            pulumi.set(__self__, "upload_file_prefix", upload_file_prefix)
        if upload_file_suffix is not None:
            pulumi.set(__self__, "upload_file_suffix", upload_file_suffix)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[builtins.str]:
        """
        The format in which logs will be received
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Input['DatastreamDeliveryConfigurationFrequencyArgs']:
        """
        The frequency of collecting logs from each uploader and sending these logs to a destination
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input['DatastreamDeliveryConfigurationFrequencyArgs']):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A delimiter that you use to separate data set fields in log lines
        """
        return pulumi.get(self, "field_delimiter")

    @field_delimiter.setter
    def field_delimiter(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "field_delimiter", value)

    @property
    @pulumi.getter(name="uploadFilePrefix")
    def upload_file_prefix(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The prefix of the log file that will be send to a destination
        """
        return pulumi.get(self, "upload_file_prefix")

    @upload_file_prefix.setter
    def upload_file_prefix(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "upload_file_prefix", value)

    @property
    @pulumi.getter(name="uploadFileSuffix")
    def upload_file_suffix(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The suffix of the log file that will be send to a destination
        """
        return pulumi.get(self, "upload_file_suffix")

    @upload_file_suffix.setter
    def upload_file_suffix(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "upload_file_suffix", value)


if not MYPY:
    class DatastreamDeliveryConfigurationFrequencyArgsDict(TypedDict):
        interval_in_secs: pulumi.Input[builtins.int]
        """
        The time in seconds after which the system bundles log lines into a file and sends it to a destination
        """
elif False:
    DatastreamDeliveryConfigurationFrequencyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatastreamDeliveryConfigurationFrequencyArgs:
    def __init__(__self__, *,
                 interval_in_secs: pulumi.Input[builtins.int]):
        """
        :param pulumi.Input[builtins.int] interval_in_secs: The time in seconds after which the system bundles log lines into a file and sends it to a destination
        """
        pulumi.set(__self__, "interval_in_secs", interval_in_secs)

    @property
    @pulumi.getter(name="intervalInSecs")
    def interval_in_secs(self) -> pulumi.Input[builtins.int]:
        """
        The time in seconds after which the system bundles log lines into a file and sends it to a destination
        """
        return pulumi.get(self, "interval_in_secs")

    @interval_in_secs.setter
    def interval_in_secs(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "interval_in_secs", value)


if not MYPY:
    class DatastreamElasticsearchConnectorArgsDict(TypedDict):
        display_name: pulumi.Input[builtins.str]
        """
        The name of the connector.
        """
        endpoint: pulumi.Input[builtins.str]
        """
        The Elasticsearch bulk endpoint URL in the https://hostname.elastic-cloud.com:9243/_bulk/ format. Set indexName in the appropriate field instead of providing it in the URL. You can use Akamaized property hostnames as endpoint URLs. See Stream logs to Elasticsearch.
        """
        index_name: pulumi.Input[builtins.str]
        """
        The index name of the Elastic cloud where you want to store log files.
        """
        password: pulumi.Input[builtins.str]
        """
        The Elasticsearch basic access authentication password.
        """
        user_name: pulumi.Input[builtins.str]
        """
        The Elasticsearch basic access authentication username.
        """
        ca_cert: NotRequired[pulumi.Input[builtins.str]]
        """
        The certification authority (CA) certificate used to verify the origin server's certificate. If the certificate is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
        """
        client_cert: NotRequired[pulumi.Input[builtins.str]]
        """
        The PEM-formatted digital certificate you want to authenticate requests to your destination with. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
        """
        client_key: NotRequired[pulumi.Input[builtins.str]]
        """
        The private key in the non-encrypted PKCS8 format you want to use to authenticate with the backend server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
        """
        content_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The type of the resource passed in the request's custom header. For details, see Additional options in the DataStream user guide.
        """
        custom_header_name: NotRequired[pulumi.Input[builtins.str]]
        """
        A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters. For details, see Additional options in the DataStream user guide.
        """
        custom_header_value: NotRequired[pulumi.Input[builtins.str]]
        """
        The custom header's contents passed with the request that contains information about the client connection. For details, see Additional options in the DataStream user guide.
        """
        m_tls: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether mTLS is enabled or not.
        """
        tls_hostname: NotRequired[pulumi.Input[builtins.str]]
        """
        The hostname that verifies the server's certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
        """
elif False:
    DatastreamElasticsearchConnectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatastreamElasticsearchConnectorArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[builtins.str],
                 endpoint: pulumi.Input[builtins.str],
                 index_name: pulumi.Input[builtins.str],
                 password: pulumi.Input[builtins.str],
                 user_name: pulumi.Input[builtins.str],
                 ca_cert: Optional[pulumi.Input[builtins.str]] = None,
                 client_cert: Optional[pulumi.Input[builtins.str]] = None,
                 client_key: Optional[pulumi.Input[builtins.str]] = None,
                 content_type: Optional[pulumi.Input[builtins.str]] = None,
                 custom_header_name: Optional[pulumi.Input[builtins.str]] = None,
                 custom_header_value: Optional[pulumi.Input[builtins.str]] = None,
                 m_tls: Optional[pulumi.Input[builtins.bool]] = None,
                 tls_hostname: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] display_name: The name of the connector.
        :param pulumi.Input[builtins.str] endpoint: The Elasticsearch bulk endpoint URL in the https://hostname.elastic-cloud.com:9243/_bulk/ format. Set indexName in the appropriate field instead of providing it in the URL. You can use Akamaized property hostnames as endpoint URLs. See Stream logs to Elasticsearch.
        :param pulumi.Input[builtins.str] index_name: The index name of the Elastic cloud where you want to store log files.
        :param pulumi.Input[builtins.str] password: The Elasticsearch basic access authentication password.
        :param pulumi.Input[builtins.str] user_name: The Elasticsearch basic access authentication username.
        :param pulumi.Input[builtins.str] ca_cert: The certification authority (CA) certificate used to verify the origin server's certificate. If the certificate is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
        :param pulumi.Input[builtins.str] client_cert: The PEM-formatted digital certificate you want to authenticate requests to your destination with. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
        :param pulumi.Input[builtins.str] client_key: The private key in the non-encrypted PKCS8 format you want to use to authenticate with the backend server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
        :param pulumi.Input[builtins.str] content_type: The type of the resource passed in the request's custom header. For details, see Additional options in the DataStream user guide.
        :param pulumi.Input[builtins.str] custom_header_name: A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters. For details, see Additional options in the DataStream user guide.
        :param pulumi.Input[builtins.str] custom_header_value: The custom header's contents passed with the request that contains information about the client connection. For details, see Additional options in the DataStream user guide.
        :param pulumi.Input[builtins.bool] m_tls: Indicates whether mTLS is enabled or not.
        :param pulumi.Input[builtins.str] tls_hostname: The hostname that verifies the server's certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "index_name", index_name)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if client_cert is not None:
            pulumi.set(__self__, "client_cert", client_cert)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)
        if m_tls is not None:
            pulumi.set(__self__, "m_tls", m_tls)
        if tls_hostname is not None:
            pulumi.set(__self__, "tls_hostname", tls_hostname)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the connector.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[builtins.str]:
        """
        The Elasticsearch bulk endpoint URL in the https://hostname.elastic-cloud.com:9243/_bulk/ format. Set indexName in the appropriate field instead of providing it in the URL. You can use Akamaized property hostnames as endpoint URLs. See Stream logs to Elasticsearch.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> pulumi.Input[builtins.str]:
        """
        The index name of the Elastic cloud where you want to store log files.
        """
        return pulumi.get(self, "index_name")

    @index_name.setter
    def index_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "index_name", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[builtins.str]:
        """
        The Elasticsearch basic access authentication password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[builtins.str]:
        """
        The Elasticsearch basic access authentication username.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The certification authority (CA) certificate used to verify the origin server's certificate. If the certificate is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
        """
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The PEM-formatted digital certificate you want to authenticate requests to your destination with. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
        """
        return pulumi.get(self, "client_cert")

    @client_cert.setter
    def client_cert(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "client_cert", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The private key in the non-encrypted PKCS8 format you want to use to authenticate with the backend server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
        """
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of the resource passed in the request's custom header. For details, see Additional options in the DataStream user guide.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters. For details, see Additional options in the DataStream user guide.
        """
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The custom header's contents passed with the request that contains information about the client connection. For details, see Additional options in the DataStream user guide.
        """
        return pulumi.get(self, "custom_header_value")

    @custom_header_value.setter
    def custom_header_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_header_value", value)

    @property
    @pulumi.getter(name="mTls")
    def m_tls(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether mTLS is enabled or not.
        """
        return pulumi.get(self, "m_tls")

    @m_tls.setter
    def m_tls(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "m_tls", value)

    @property
    @pulumi.getter(name="tlsHostname")
    def tls_hostname(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The hostname that verifies the server's certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
        """
        return pulumi.get(self, "tls_hostname")

    @tls_hostname.setter
    def tls_hostname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tls_hostname", value)


if not MYPY:
    class DatastreamGcsConnectorArgsDict(TypedDict):
        bucket: pulumi.Input[builtins.str]
        """
        The name of the storage bucket created in Google Cloud account
        """
        display_name: pulumi.Input[builtins.str]
        """
        The name of the connector
        """
        private_key: pulumi.Input[builtins.str]
        """
        The contents of the JSON private key generated and downloaded in Google Cloud Storage account
        """
        project_id: pulumi.Input[builtins.str]
        """
        The unique ID of Google Cloud project
        """
        service_account_name: pulumi.Input[builtins.str]
        """
        The name of the service account with the storage.object.create permission or Storage Object Creator role
        """
        compress_logs: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether the logs should be compressed
        """
        path: NotRequired[pulumi.Input[builtins.str]]
        """
        The path to the folder within Google Cloud bucket where logs will be stored
        """
elif False:
    DatastreamGcsConnectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatastreamGcsConnectorArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[builtins.str],
                 display_name: pulumi.Input[builtins.str],
                 private_key: pulumi.Input[builtins.str],
                 project_id: pulumi.Input[builtins.str],
                 service_account_name: pulumi.Input[builtins.str],
                 compress_logs: Optional[pulumi.Input[builtins.bool]] = None,
                 path: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] bucket: The name of the storage bucket created in Google Cloud account
        :param pulumi.Input[builtins.str] display_name: The name of the connector
        :param pulumi.Input[builtins.str] private_key: The contents of the JSON private key generated and downloaded in Google Cloud Storage account
        :param pulumi.Input[builtins.str] project_id: The unique ID of Google Cloud project
        :param pulumi.Input[builtins.str] service_account_name: The name of the service account with the storage.object.create permission or Storage Object Creator role
        :param pulumi.Input[builtins.bool] compress_logs: Indicates whether the logs should be compressed
        :param pulumi.Input[builtins.str] path: The path to the folder within Google Cloud bucket where logs will be stored
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "service_account_name", service_account_name)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[builtins.str]:
        """
        The name of the storage bucket created in Google Cloud account
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the connector
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[builtins.str]:
        """
        The contents of the JSON private key generated and downloaded in Google Cloud Storage account
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[builtins.str]:
        """
        The unique ID of Google Cloud project
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the service account with the storage.object.create permission or Storage Object Creator role
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether the logs should be compressed
        """
        return pulumi.get(self, "compress_logs")

    @compress_logs.setter
    def compress_logs(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "compress_logs", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The path to the folder within Google Cloud bucket where logs will be stored
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class DatastreamHttpsConnectorArgsDict(TypedDict):
        authentication_type: pulumi.Input[builtins.str]
        """
        Either NONE for no authentication, or BASIC for username and password authentication
        """
        display_name: pulumi.Input[builtins.str]
        """
        The name of the connector
        """
        endpoint: pulumi.Input[builtins.str]
        """
        URL where logs will be stored
        """
        ca_cert: NotRequired[pulumi.Input[builtins.str]]
        """
        The certification authority (CA) certificate used to verify the origin server's certificate. If the certificate is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
        """
        client_cert: NotRequired[pulumi.Input[builtins.str]]
        """
        The digital certificate in the PEM format you want to use to authenticate requests to your destination. If you want to use mutual authentication, you need to provide both the client certificate and the client key (in the PEM format).
        """
        client_key: NotRequired[pulumi.Input[builtins.str]]
        """
        The private key in the non-encrypted PKCS8 format you want to use to authenticate with the back-end server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
        """
        compress_logs: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether the logs should be compressed
        """
        content_type: NotRequired[pulumi.Input[builtins.str]]
        """
        Content type to pass in the log file header
        """
        custom_header_name: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of custom header passed with the request to the destination
        """
        custom_header_value: NotRequired[pulumi.Input[builtins.str]]
        """
        The custom header's contents passed with the request to the destination
        """
        m_tls: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether mTLS is enabled or not.
        """
        password: NotRequired[pulumi.Input[builtins.str]]
        """
        Password set for custom HTTPS endpoint for authentication
        """
        tls_hostname: NotRequired[pulumi.Input[builtins.str]]
        """
        The hostname that verifies the server's certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
        """
        user_name: NotRequired[pulumi.Input[builtins.str]]
        """
        Username used for authentication
        """
elif False:
    DatastreamHttpsConnectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatastreamHttpsConnectorArgs:
    def __init__(__self__, *,
                 authentication_type: pulumi.Input[builtins.str],
                 display_name: pulumi.Input[builtins.str],
                 endpoint: pulumi.Input[builtins.str],
                 ca_cert: Optional[pulumi.Input[builtins.str]] = None,
                 client_cert: Optional[pulumi.Input[builtins.str]] = None,
                 client_key: Optional[pulumi.Input[builtins.str]] = None,
                 compress_logs: Optional[pulumi.Input[builtins.bool]] = None,
                 content_type: Optional[pulumi.Input[builtins.str]] = None,
                 custom_header_name: Optional[pulumi.Input[builtins.str]] = None,
                 custom_header_value: Optional[pulumi.Input[builtins.str]] = None,
                 m_tls: Optional[pulumi.Input[builtins.bool]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 tls_hostname: Optional[pulumi.Input[builtins.str]] = None,
                 user_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] authentication_type: Either NONE for no authentication, or BASIC for username and password authentication
        :param pulumi.Input[builtins.str] display_name: The name of the connector
        :param pulumi.Input[builtins.str] endpoint: URL where logs will be stored
        :param pulumi.Input[builtins.str] ca_cert: The certification authority (CA) certificate used to verify the origin server's certificate. If the certificate is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
        :param pulumi.Input[builtins.str] client_cert: The digital certificate in the PEM format you want to use to authenticate requests to your destination. If you want to use mutual authentication, you need to provide both the client certificate and the client key (in the PEM format).
        :param pulumi.Input[builtins.str] client_key: The private key in the non-encrypted PKCS8 format you want to use to authenticate with the back-end server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
        :param pulumi.Input[builtins.bool] compress_logs: Indicates whether the logs should be compressed
        :param pulumi.Input[builtins.str] content_type: Content type to pass in the log file header
        :param pulumi.Input[builtins.str] custom_header_name: The name of custom header passed with the request to the destination
        :param pulumi.Input[builtins.str] custom_header_value: The custom header's contents passed with the request to the destination
        :param pulumi.Input[builtins.bool] m_tls: Indicates whether mTLS is enabled or not.
        :param pulumi.Input[builtins.str] password: Password set for custom HTTPS endpoint for authentication
        :param pulumi.Input[builtins.str] tls_hostname: The hostname that verifies the server's certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
        :param pulumi.Input[builtins.str] user_name: Username used for authentication
        """
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if client_cert is not None:
            pulumi.set(__self__, "client_cert", client_cert)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)
        if m_tls is not None:
            pulumi.set(__self__, "m_tls", m_tls)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tls_hostname is not None:
            pulumi.set(__self__, "tls_hostname", tls_hostname)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> pulumi.Input[builtins.str]:
        """
        Either NONE for no authentication, or BASIC for username and password authentication
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the connector
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[builtins.str]:
        """
        URL where logs will be stored
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The certification authority (CA) certificate used to verify the origin server's certificate. If the certificate is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
        """
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The digital certificate in the PEM format you want to use to authenticate requests to your destination. If you want to use mutual authentication, you need to provide both the client certificate and the client key (in the PEM format).
        """
        return pulumi.get(self, "client_cert")

    @client_cert.setter
    def client_cert(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "client_cert", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The private key in the non-encrypted PKCS8 format you want to use to authenticate with the back-end server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
        """
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether the logs should be compressed
        """
        return pulumi.get(self, "compress_logs")

    @compress_logs.setter
    def compress_logs(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "compress_logs", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Content type to pass in the log file header
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of custom header passed with the request to the destination
        """
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The custom header's contents passed with the request to the destination
        """
        return pulumi.get(self, "custom_header_value")

    @custom_header_value.setter
    def custom_header_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_header_value", value)

    @property
    @pulumi.getter(name="mTls")
    def m_tls(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether mTLS is enabled or not.
        """
        return pulumi.get(self, "m_tls")

    @m_tls.setter
    def m_tls(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "m_tls", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Password set for custom HTTPS endpoint for authentication
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="tlsHostname")
    def tls_hostname(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The hostname that verifies the server's certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
        """
        return pulumi.get(self, "tls_hostname")

    @tls_hostname.setter
    def tls_hostname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tls_hostname", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Username used for authentication
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class DatastreamLogglyConnectorArgsDict(TypedDict):
        auth_token: pulumi.Input[builtins.str]
        """
        The unique HTTP code for your Loggly bulk endpoint.
        """
        display_name: pulumi.Input[builtins.str]
        """
        The name of the connector.
        """
        endpoint: pulumi.Input[builtins.str]
        """
        The Loggly bulk endpoint URL in the https://hostname.loggly.com/bulk/ format. Set the endpoint code in the authToken field instead of providing it in the URL. You can use Akamaized property hostnames as endpoint URLs. See Stream logs to Loggly.
        """
        content_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The type of the resource passed in the request's custom header. For details, see Additional options in the DataStream user guide.
        """
        custom_header_name: NotRequired[pulumi.Input[builtins.str]]
        """
        A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters. For details, see Additional options in the DataStream user guide.
        """
        custom_header_value: NotRequired[pulumi.Input[builtins.str]]
        """
        The custom header's contents passed with the request that contains information about the client connection. For details, see Additional options in the DataStream user guide.
        """
        tags: NotRequired[pulumi.Input[builtins.str]]
        """
        The tags you can use to segment and filter log events in Loggly. See Tags in the Loggly documentation.
        """
elif False:
    DatastreamLogglyConnectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatastreamLogglyConnectorArgs:
    def __init__(__self__, *,
                 auth_token: pulumi.Input[builtins.str],
                 display_name: pulumi.Input[builtins.str],
                 endpoint: pulumi.Input[builtins.str],
                 content_type: Optional[pulumi.Input[builtins.str]] = None,
                 custom_header_name: Optional[pulumi.Input[builtins.str]] = None,
                 custom_header_value: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] auth_token: The unique HTTP code for your Loggly bulk endpoint.
        :param pulumi.Input[builtins.str] display_name: The name of the connector.
        :param pulumi.Input[builtins.str] endpoint: The Loggly bulk endpoint URL in the https://hostname.loggly.com/bulk/ format. Set the endpoint code in the authToken field instead of providing it in the URL. You can use Akamaized property hostnames as endpoint URLs. See Stream logs to Loggly.
        :param pulumi.Input[builtins.str] content_type: The type of the resource passed in the request's custom header. For details, see Additional options in the DataStream user guide.
        :param pulumi.Input[builtins.str] custom_header_name: A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters. For details, see Additional options in the DataStream user guide.
        :param pulumi.Input[builtins.str] custom_header_value: The custom header's contents passed with the request that contains information about the client connection. For details, see Additional options in the DataStream user guide.
        :param pulumi.Input[builtins.str] tags: The tags you can use to segment and filter log events in Loggly. See Tags in the Loggly documentation.
        """
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> pulumi.Input[builtins.str]:
        """
        The unique HTTP code for your Loggly bulk endpoint.
        """
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the connector.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[builtins.str]:
        """
        The Loggly bulk endpoint URL in the https://hostname.loggly.com/bulk/ format. Set the endpoint code in the authToken field instead of providing it in the URL. You can use Akamaized property hostnames as endpoint URLs. See Stream logs to Loggly.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of the resource passed in the request's custom header. For details, see Additional options in the DataStream user guide.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters. For details, see Additional options in the DataStream user guide.
        """
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The custom header's contents passed with the request that contains information about the client connection. For details, see Additional options in the DataStream user guide.
        """
        return pulumi.get(self, "custom_header_value")

    @custom_header_value.setter
    def custom_header_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_header_value", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The tags you can use to segment and filter log events in Loggly. See Tags in the Loggly documentation.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class DatastreamNewRelicConnectorArgsDict(TypedDict):
        auth_token: pulumi.Input[builtins.str]
        """
        Your Log API token for your account in New Relic.
        """
        display_name: pulumi.Input[builtins.str]
        """
        The name of the connector.
        """
        endpoint: pulumi.Input[builtins.str]
        """
        A New Relic endpoint URL you want to send your logs to. The endpoint URL should follow the https://<newrelic.com>/log/v1/ format format. See Introduction to the Log API https://docs.newrelic.com/docs/logs/log-api/introduction-log-api/ if you want to retrieve your New Relic endpoint URL.
        """
        content_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The type of the resource passed in the request's custom header. For details, see Additional options in the DataStream user guide.
        """
        custom_header_name: NotRequired[pulumi.Input[builtins.str]]
        """
        A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters. For details, see Additional options in the DataStream user guide.
        """
        custom_header_value: NotRequired[pulumi.Input[builtins.str]]
        """
        The custom header's contents passed with the request that contains information about the client connection. For details, see Additional options in the DataStream user guide.
        """
elif False:
    DatastreamNewRelicConnectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatastreamNewRelicConnectorArgs:
    def __init__(__self__, *,
                 auth_token: pulumi.Input[builtins.str],
                 display_name: pulumi.Input[builtins.str],
                 endpoint: pulumi.Input[builtins.str],
                 content_type: Optional[pulumi.Input[builtins.str]] = None,
                 custom_header_name: Optional[pulumi.Input[builtins.str]] = None,
                 custom_header_value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] auth_token: Your Log API token for your account in New Relic.
        :param pulumi.Input[builtins.str] display_name: The name of the connector.
        :param pulumi.Input[builtins.str] endpoint: A New Relic endpoint URL you want to send your logs to. The endpoint URL should follow the https://<newrelic.com>/log/v1/ format format. See Introduction to the Log API https://docs.newrelic.com/docs/logs/log-api/introduction-log-api/ if you want to retrieve your New Relic endpoint URL.
        :param pulumi.Input[builtins.str] content_type: The type of the resource passed in the request's custom header. For details, see Additional options in the DataStream user guide.
        :param pulumi.Input[builtins.str] custom_header_name: A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters. For details, see Additional options in the DataStream user guide.
        :param pulumi.Input[builtins.str] custom_header_value: The custom header's contents passed with the request that contains information about the client connection. For details, see Additional options in the DataStream user guide.
        """
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> pulumi.Input[builtins.str]:
        """
        Your Log API token for your account in New Relic.
        """
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the connector.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[builtins.str]:
        """
        A New Relic endpoint URL you want to send your logs to. The endpoint URL should follow the https://<newrelic.com>/log/v1/ format format. See Introduction to the Log API https://docs.newrelic.com/docs/logs/log-api/introduction-log-api/ if you want to retrieve your New Relic endpoint URL.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of the resource passed in the request's custom header. For details, see Additional options in the DataStream user guide.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters. For details, see Additional options in the DataStream user guide.
        """
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The custom header's contents passed with the request that contains information about the client connection. For details, see Additional options in the DataStream user guide.
        """
        return pulumi.get(self, "custom_header_value")

    @custom_header_value.setter
    def custom_header_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_header_value", value)


if not MYPY:
    class DatastreamOracleConnectorArgsDict(TypedDict):
        access_key: pulumi.Input[builtins.str]
        """
        The access key identifier used to authenticate requests to the Oracle Cloud account
        """
        bucket: pulumi.Input[builtins.str]
        """
        The name of the Oracle Cloud Storage bucket
        """
        display_name: pulumi.Input[builtins.str]
        """
        The name of the connector
        """
        namespace: pulumi.Input[builtins.str]
        """
        The namespace of Oracle Cloud Storage account
        """
        path: pulumi.Input[builtins.str]
        """
        The path to the folder within your Oracle Cloud Storage bucket where logs will be stored
        """
        region: pulumi.Input[builtins.str]
        """
        The Oracle Cloud Storage region where bucket resides
        """
        secret_access_key: pulumi.Input[builtins.str]
        """
        The secret access key identifier used to authenticate requests to the Oracle Cloud account
        """
        compress_logs: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether the logs should be compressed
        """
elif False:
    DatastreamOracleConnectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatastreamOracleConnectorArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[builtins.str],
                 bucket: pulumi.Input[builtins.str],
                 display_name: pulumi.Input[builtins.str],
                 namespace: pulumi.Input[builtins.str],
                 path: pulumi.Input[builtins.str],
                 region: pulumi.Input[builtins.str],
                 secret_access_key: pulumi.Input[builtins.str],
                 compress_logs: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] access_key: The access key identifier used to authenticate requests to the Oracle Cloud account
        :param pulumi.Input[builtins.str] bucket: The name of the Oracle Cloud Storage bucket
        :param pulumi.Input[builtins.str] display_name: The name of the connector
        :param pulumi.Input[builtins.str] namespace: The namespace of Oracle Cloud Storage account
        :param pulumi.Input[builtins.str] path: The path to the folder within your Oracle Cloud Storage bucket where logs will be stored
        :param pulumi.Input[builtins.str] region: The Oracle Cloud Storage region where bucket resides
        :param pulumi.Input[builtins.str] secret_access_key: The secret access key identifier used to authenticate requests to the Oracle Cloud account
        :param pulumi.Input[builtins.bool] compress_logs: Indicates whether the logs should be compressed
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[builtins.str]:
        """
        The access key identifier used to authenticate requests to the Oracle Cloud account
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[builtins.str]:
        """
        The name of the Oracle Cloud Storage bucket
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the connector
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[builtins.str]:
        """
        The namespace of Oracle Cloud Storage account
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[builtins.str]:
        """
        The path to the folder within your Oracle Cloud Storage bucket where logs will be stored
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[builtins.str]:
        """
        The Oracle Cloud Storage region where bucket resides
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> pulumi.Input[builtins.str]:
        """
        The secret access key identifier used to authenticate requests to the Oracle Cloud account
        """
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether the logs should be compressed
        """
        return pulumi.get(self, "compress_logs")

    @compress_logs.setter
    def compress_logs(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "compress_logs", value)


if not MYPY:
    class DatastreamS3ConnectorArgsDict(TypedDict):
        access_key: pulumi.Input[builtins.str]
        """
        The access key identifier used to authenticate requests to the Amazon S3 account
        """
        bucket: pulumi.Input[builtins.str]
        """
        The name of the Amazon S3 bucket
        """
        display_name: pulumi.Input[builtins.str]
        """
        The name of the connector
        """
        path: pulumi.Input[builtins.str]
        """
        The path to the folder within Amazon S3 bucket where logs will be stored
        """
        region: pulumi.Input[builtins.str]
        """
        The AWS region where Amazon S3 bucket resides
        """
        secret_access_key: pulumi.Input[builtins.str]
        """
        The secret access key identifier used to authenticate requests to the Amazon S3 account
        """
        compress_logs: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether the logs should be compressed
        """
elif False:
    DatastreamS3ConnectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatastreamS3ConnectorArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[builtins.str],
                 bucket: pulumi.Input[builtins.str],
                 display_name: pulumi.Input[builtins.str],
                 path: pulumi.Input[builtins.str],
                 region: pulumi.Input[builtins.str],
                 secret_access_key: pulumi.Input[builtins.str],
                 compress_logs: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] access_key: The access key identifier used to authenticate requests to the Amazon S3 account
        :param pulumi.Input[builtins.str] bucket: The name of the Amazon S3 bucket
        :param pulumi.Input[builtins.str] display_name: The name of the connector
        :param pulumi.Input[builtins.str] path: The path to the folder within Amazon S3 bucket where logs will be stored
        :param pulumi.Input[builtins.str] region: The AWS region where Amazon S3 bucket resides
        :param pulumi.Input[builtins.str] secret_access_key: The secret access key identifier used to authenticate requests to the Amazon S3 account
        :param pulumi.Input[builtins.bool] compress_logs: Indicates whether the logs should be compressed
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[builtins.str]:
        """
        The access key identifier used to authenticate requests to the Amazon S3 account
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[builtins.str]:
        """
        The name of the Amazon S3 bucket
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the connector
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[builtins.str]:
        """
        The path to the folder within Amazon S3 bucket where logs will be stored
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[builtins.str]:
        """
        The AWS region where Amazon S3 bucket resides
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> pulumi.Input[builtins.str]:
        """
        The secret access key identifier used to authenticate requests to the Amazon S3 account
        """
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether the logs should be compressed
        """
        return pulumi.get(self, "compress_logs")

    @compress_logs.setter
    def compress_logs(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "compress_logs", value)


if not MYPY:
    class DatastreamSplunkConnectorArgsDict(TypedDict):
        display_name: pulumi.Input[builtins.str]
        """
        The name of the connector
        """
        endpoint: pulumi.Input[builtins.str]
        """
        The raw event Splunk URL where logs will be stored
        """
        event_collector_token: pulumi.Input[builtins.str]
        """
        The Event Collector token associated with Splunk account
        """
        ca_cert: NotRequired[pulumi.Input[builtins.str]]
        """
        The certification authority (CA) certificate used to verify the origin server's certificate. If the certificate is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
        """
        client_cert: NotRequired[pulumi.Input[builtins.str]]
        """
        The digital certificate in the PEM format you want to use to authenticate requests to your destination. If you want to use mutual authentication, you need to provide both the client certificate and the client key (in the PEM format).
        """
        client_key: NotRequired[pulumi.Input[builtins.str]]
        """
        The private key in the non-encrypted PKCS8 format you want to use to authenticate with the back-end server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
        """
        compress_logs: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether the logs should be compressed
        """
        custom_header_name: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of custom header passed with the request to the destination
        """
        custom_header_value: NotRequired[pulumi.Input[builtins.str]]
        """
        The custom header's contents passed with the request to the destination
        """
        m_tls: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether mTLS is enabled or not.
        """
        tls_hostname: NotRequired[pulumi.Input[builtins.str]]
        """
        The hostname that verifies the server's certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
        """
elif False:
    DatastreamSplunkConnectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatastreamSplunkConnectorArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[builtins.str],
                 endpoint: pulumi.Input[builtins.str],
                 event_collector_token: pulumi.Input[builtins.str],
                 ca_cert: Optional[pulumi.Input[builtins.str]] = None,
                 client_cert: Optional[pulumi.Input[builtins.str]] = None,
                 client_key: Optional[pulumi.Input[builtins.str]] = None,
                 compress_logs: Optional[pulumi.Input[builtins.bool]] = None,
                 custom_header_name: Optional[pulumi.Input[builtins.str]] = None,
                 custom_header_value: Optional[pulumi.Input[builtins.str]] = None,
                 m_tls: Optional[pulumi.Input[builtins.bool]] = None,
                 tls_hostname: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] display_name: The name of the connector
        :param pulumi.Input[builtins.str] endpoint: The raw event Splunk URL where logs will be stored
        :param pulumi.Input[builtins.str] event_collector_token: The Event Collector token associated with Splunk account
        :param pulumi.Input[builtins.str] ca_cert: The certification authority (CA) certificate used to verify the origin server's certificate. If the certificate is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
        :param pulumi.Input[builtins.str] client_cert: The digital certificate in the PEM format you want to use to authenticate requests to your destination. If you want to use mutual authentication, you need to provide both the client certificate and the client key (in the PEM format).
        :param pulumi.Input[builtins.str] client_key: The private key in the non-encrypted PKCS8 format you want to use to authenticate with the back-end server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
        :param pulumi.Input[builtins.bool] compress_logs: Indicates whether the logs should be compressed
        :param pulumi.Input[builtins.str] custom_header_name: The name of custom header passed with the request to the destination
        :param pulumi.Input[builtins.str] custom_header_value: The custom header's contents passed with the request to the destination
        :param pulumi.Input[builtins.bool] m_tls: Indicates whether mTLS is enabled or not.
        :param pulumi.Input[builtins.str] tls_hostname: The hostname that verifies the server's certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "event_collector_token", event_collector_token)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if client_cert is not None:
            pulumi.set(__self__, "client_cert", client_cert)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)
        if m_tls is not None:
            pulumi.set(__self__, "m_tls", m_tls)
        if tls_hostname is not None:
            pulumi.set(__self__, "tls_hostname", tls_hostname)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the connector
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[builtins.str]:
        """
        The raw event Splunk URL where logs will be stored
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="eventCollectorToken")
    def event_collector_token(self) -> pulumi.Input[builtins.str]:
        """
        The Event Collector token associated with Splunk account
        """
        return pulumi.get(self, "event_collector_token")

    @event_collector_token.setter
    def event_collector_token(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "event_collector_token", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The certification authority (CA) certificate used to verify the origin server's certificate. If the certificate is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
        """
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The digital certificate in the PEM format you want to use to authenticate requests to your destination. If you want to use mutual authentication, you need to provide both the client certificate and the client key (in the PEM format).
        """
        return pulumi.get(self, "client_cert")

    @client_cert.setter
    def client_cert(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "client_cert", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The private key in the non-encrypted PKCS8 format you want to use to authenticate with the back-end server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
        """
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether the logs should be compressed
        """
        return pulumi.get(self, "compress_logs")

    @compress_logs.setter
    def compress_logs(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "compress_logs", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of custom header passed with the request to the destination
        """
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The custom header's contents passed with the request to the destination
        """
        return pulumi.get(self, "custom_header_value")

    @custom_header_value.setter
    def custom_header_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_header_value", value)

    @property
    @pulumi.getter(name="mTls")
    def m_tls(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether mTLS is enabled or not.
        """
        return pulumi.get(self, "m_tls")

    @m_tls.setter
    def m_tls(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "m_tls", value)

    @property
    @pulumi.getter(name="tlsHostname")
    def tls_hostname(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The hostname that verifies the server's certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
        """
        return pulumi.get(self, "tls_hostname")

    @tls_hostname.setter
    def tls_hostname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tls_hostname", value)


if not MYPY:
    class DatastreamSumologicConnectorArgsDict(TypedDict):
        collector_code: pulumi.Input[builtins.str]
        """
        The unique HTTP collector code of Sumo Logic endpoint
        """
        display_name: pulumi.Input[builtins.str]
        """
        The name of the connector
        """
        endpoint: pulumi.Input[builtins.str]
        """
        The Sumo Logic collection endpoint where logs will be stored
        """
        compress_logs: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether the logs should be compressed
        """
        content_type: NotRequired[pulumi.Input[builtins.str]]
        """
        Content type to pass in the log file header
        """
        custom_header_name: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of custom header passed with the request to the destination
        """
        custom_header_value: NotRequired[pulumi.Input[builtins.str]]
        """
        The custom header's contents passed with the request to the destination
        """
elif False:
    DatastreamSumologicConnectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatastreamSumologicConnectorArgs:
    def __init__(__self__, *,
                 collector_code: pulumi.Input[builtins.str],
                 display_name: pulumi.Input[builtins.str],
                 endpoint: pulumi.Input[builtins.str],
                 compress_logs: Optional[pulumi.Input[builtins.bool]] = None,
                 content_type: Optional[pulumi.Input[builtins.str]] = None,
                 custom_header_name: Optional[pulumi.Input[builtins.str]] = None,
                 custom_header_value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] collector_code: The unique HTTP collector code of Sumo Logic endpoint
        :param pulumi.Input[builtins.str] display_name: The name of the connector
        :param pulumi.Input[builtins.str] endpoint: The Sumo Logic collection endpoint where logs will be stored
        :param pulumi.Input[builtins.bool] compress_logs: Indicates whether the logs should be compressed
        :param pulumi.Input[builtins.str] content_type: Content type to pass in the log file header
        :param pulumi.Input[builtins.str] custom_header_name: The name of custom header passed with the request to the destination
        :param pulumi.Input[builtins.str] custom_header_value: The custom header's contents passed with the request to the destination
        """
        pulumi.set(__self__, "collector_code", collector_code)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)

    @property
    @pulumi.getter(name="collectorCode")
    def collector_code(self) -> pulumi.Input[builtins.str]:
        """
        The unique HTTP collector code of Sumo Logic endpoint
        """
        return pulumi.get(self, "collector_code")

    @collector_code.setter
    def collector_code(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "collector_code", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the connector
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[builtins.str]:
        """
        The Sumo Logic collection endpoint where logs will be stored
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether the logs should be compressed
        """
        return pulumi.get(self, "compress_logs")

    @compress_logs.setter
    def compress_logs(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "compress_logs", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Content type to pass in the log file header
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of custom header passed with the request to the destination
        """
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The custom header's contents passed with the request to the destination
        """
        return pulumi.get(self, "custom_header_value")

    @custom_header_value.setter
    def custom_header_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_header_value", value)


if not MYPY:
    class DnsZoneOutboundZoneTransferArgsDict(TypedDict):
        acls: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The access control list, defined as IPv4 and IPv6 CIDR blocks.
        """
        enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enables outbound zone transfer.
        """
        notify_targets: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Customer secondary nameservers to notify, if NOTIFY requests are desired. Up to 64 IPv4 or IPv6 addresses. If no targets are specified, you can manually request zone transfer updates as needed.
        """
        tsig_key: NotRequired[pulumi.Input['DnsZoneOutboundZoneTransferTsigKeyArgsDict']]
        """
        The TSIG key used for outbound zone transfers.
        """
elif False:
    DnsZoneOutboundZoneTransferArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DnsZoneOutboundZoneTransferArgs:
    def __init__(__self__, *,
                 acls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 notify_targets: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 tsig_key: Optional[pulumi.Input['DnsZoneOutboundZoneTransferTsigKeyArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] acls: The access control list, defined as IPv4 and IPv6 CIDR blocks.
        :param pulumi.Input[builtins.bool] enabled: Enables outbound zone transfer.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] notify_targets: Customer secondary nameservers to notify, if NOTIFY requests are desired. Up to 64 IPv4 or IPv6 addresses. If no targets are specified, you can manually request zone transfer updates as needed.
        :param pulumi.Input['DnsZoneOutboundZoneTransferTsigKeyArgs'] tsig_key: The TSIG key used for outbound zone transfers.
        """
        if acls is not None:
            pulumi.set(__self__, "acls", acls)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if notify_targets is not None:
            pulumi.set(__self__, "notify_targets", notify_targets)
        if tsig_key is not None:
            pulumi.set(__self__, "tsig_key", tsig_key)

    @property
    @pulumi.getter
    def acls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The access control list, defined as IPv4 and IPv6 CIDR blocks.
        """
        return pulumi.get(self, "acls")

    @acls.setter
    def acls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "acls", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enables outbound zone transfer.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="notifyTargets")
    def notify_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Customer secondary nameservers to notify, if NOTIFY requests are desired. Up to 64 IPv4 or IPv6 addresses. If no targets are specified, you can manually request zone transfer updates as needed.
        """
        return pulumi.get(self, "notify_targets")

    @notify_targets.setter
    def notify_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "notify_targets", value)

    @property
    @pulumi.getter(name="tsigKey")
    def tsig_key(self) -> Optional[pulumi.Input['DnsZoneOutboundZoneTransferTsigKeyArgs']]:
        """
        The TSIG key used for outbound zone transfers.
        """
        return pulumi.get(self, "tsig_key")

    @tsig_key.setter
    def tsig_key(self, value: Optional[pulumi.Input['DnsZoneOutboundZoneTransferTsigKeyArgs']]):
        pulumi.set(self, "tsig_key", value)


if not MYPY:
    class DnsZoneOutboundZoneTransferTsigKeyArgsDict(TypedDict):
        algorithm: pulumi.Input[builtins.str]
        """
        The algorithm used to encode the TSIG key's secret data. Possible values are: hmac-md5, hmac-sha1, hmac-sha224, hmac-sha256, hmac-sha384, hmac-sha512, or HMAC-MD5.SIG-ALG.REG.INT.
        """
        name: pulumi.Input[builtins.str]
        """
        The zone name.
        """
        secret: pulumi.Input[builtins.str]
        """
        A Base64-encoded string of data. When decoded, it needs to contain the correct number of bits for the chosen algorithm. If the input isn't correctly padded, the server applies the padding.
        """
elif False:
    DnsZoneOutboundZoneTransferTsigKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DnsZoneOutboundZoneTransferTsigKeyArgs:
    def __init__(__self__, *,
                 algorithm: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 secret: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] algorithm: The algorithm used to encode the TSIG key's secret data. Possible values are: hmac-md5, hmac-sha1, hmac-sha224, hmac-sha256, hmac-sha384, hmac-sha512, or HMAC-MD5.SIG-ALG.REG.INT.
        :param pulumi.Input[builtins.str] name: The zone name.
        :param pulumi.Input[builtins.str] secret: A Base64-encoded string of data. When decoded, it needs to contain the correct number of bits for the chosen algorithm. If the input isn't correctly padded, the server applies the padding.
        """
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Input[builtins.str]:
        """
        The algorithm used to encode the TSIG key's secret data. Possible values are: hmac-md5, hmac-sha1, hmac-sha224, hmac-sha256, hmac-sha384, hmac-sha512, or HMAC-MD5.SIG-ALG.REG.INT.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[builtins.str]:
        """
        A Base64-encoded string of data. When decoded, it needs to contain the correct number of bits for the chosen algorithm. If the input isn't correctly padded, the server applies the padding.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "secret", value)


if not MYPY:
    class DnsZoneTsigKeyArgsDict(TypedDict):
        algorithm: pulumi.Input[builtins.str]
        name: pulumi.Input[builtins.str]
        secret: pulumi.Input[builtins.str]
elif False:
    DnsZoneTsigKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DnsZoneTsigKeyArgs:
    def __init__(__self__, *,
                 algorithm: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 secret: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "secret", value)


if not MYPY:
    class EdgeHostNameTimeoutsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[builtins.str]]
elif False:
    EdgeHostNameTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EdgeHostNameTimeoutsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[builtins.str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default", value)


if not MYPY:
    class EdgeWorkerTimeoutsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[builtins.str]]
elif False:
    EdgeWorkerTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EdgeWorkerTimeoutsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[builtins.str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default", value)


if not MYPY:
    class EdgeWorkersActivationTimeoutsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[builtins.str]]
        delete: NotRequired[pulumi.Input[builtins.str]]
elif False:
    EdgeWorkersActivationTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EdgeWorkersActivationTimeoutsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[builtins.str]] = None,
                 delete: Optional[pulumi.Input[builtins.str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete", value)


if not MYPY:
    class EdgekvGroupItemsTimeoutsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[builtins.str]]
elif False:
    EdgekvGroupItemsTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EdgekvGroupItemsTimeoutsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[builtins.str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default", value)


if not MYPY:
    class GtmAsmapAssignmentArgsDict(TypedDict):
        as_numbers: pulumi.Input[Sequence[pulumi.Input[builtins.int]]]
        datacenter_id: pulumi.Input[builtins.int]
        nickname: pulumi.Input[builtins.str]
elif False:
    GtmAsmapAssignmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GtmAsmapAssignmentArgs:
    def __init__(__self__, *,
                 as_numbers: pulumi.Input[Sequence[pulumi.Input[builtins.int]]],
                 datacenter_id: pulumi.Input[builtins.int],
                 nickname: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "as_numbers", as_numbers)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="asNumbers")
    def as_numbers(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.int]]]:
        return pulumi.get(self, "as_numbers")

    @as_numbers.setter
    def as_numbers(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.int]]]):
        pulumi.set(self, "as_numbers", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "nickname", value)


if not MYPY:
    class GtmAsmapDefaultDatacenterArgsDict(TypedDict):
        datacenter_id: pulumi.Input[builtins.int]
        nickname: NotRequired[pulumi.Input[builtins.str]]
elif False:
    GtmAsmapDefaultDatacenterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GtmAsmapDefaultDatacenterArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[builtins.int],
                 nickname: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if nickname is not None:
            pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "nickname", value)


if not MYPY:
    class GtmCidrmapAssignmentArgsDict(TypedDict):
        datacenter_id: pulumi.Input[builtins.int]
        nickname: pulumi.Input[builtins.str]
        blocks: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    GtmCidrmapAssignmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GtmCidrmapAssignmentArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[builtins.int],
                 nickname: pulumi.Input[builtins.str],
                 blocks: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)
        if blocks is not None:
            pulumi.set(__self__, "blocks", blocks)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "nickname", value)

    @property
    @pulumi.getter
    def blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "blocks")

    @blocks.setter
    def blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "blocks", value)


if not MYPY:
    class GtmCidrmapDefaultDatacenterArgsDict(TypedDict):
        datacenter_id: pulumi.Input[builtins.int]
        nickname: NotRequired[pulumi.Input[builtins.str]]
elif False:
    GtmCidrmapDefaultDatacenterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GtmCidrmapDefaultDatacenterArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[builtins.int],
                 nickname: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if nickname is not None:
            pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "nickname", value)


if not MYPY:
    class GtmDatacenterDefaultLoadObjectArgsDict(TypedDict):
        load_object: NotRequired[pulumi.Input[builtins.str]]
        load_object_port: NotRequired[pulumi.Input[builtins.int]]
        load_servers: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    GtmDatacenterDefaultLoadObjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GtmDatacenterDefaultLoadObjectArgs:
    def __init__(__self__, *,
                 load_object: Optional[pulumi.Input[builtins.str]] = None,
                 load_object_port: Optional[pulumi.Input[builtins.int]] = None,
                 load_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        if load_object is not None:
            pulumi.set(__self__, "load_object", load_object)
        if load_object_port is not None:
            pulumi.set(__self__, "load_object_port", load_object_port)
        if load_servers is not None:
            pulumi.set(__self__, "load_servers", load_servers)

    @property
    @pulumi.getter(name="loadObject")
    def load_object(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "load_object")

    @load_object.setter
    def load_object(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "load_object", value)

    @property
    @pulumi.getter(name="loadObjectPort")
    def load_object_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "load_object_port")

    @load_object_port.setter
    def load_object_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "load_object_port", value)

    @property
    @pulumi.getter(name="loadServers")
    def load_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "load_servers")

    @load_servers.setter
    def load_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "load_servers", value)


if not MYPY:
    class GtmGeomapAssignmentArgsDict(TypedDict):
        datacenter_id: pulumi.Input[builtins.int]
        nickname: pulumi.Input[builtins.str]
        countries: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    GtmGeomapAssignmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GtmGeomapAssignmentArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[builtins.int],
                 nickname: pulumi.Input[builtins.str],
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "nickname", value)

    @property
    @pulumi.getter
    def countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "countries", value)


if not MYPY:
    class GtmGeomapDefaultDatacenterArgsDict(TypedDict):
        datacenter_id: pulumi.Input[builtins.int]
        nickname: NotRequired[pulumi.Input[builtins.str]]
elif False:
    GtmGeomapDefaultDatacenterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GtmGeomapDefaultDatacenterArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[builtins.int],
                 nickname: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if nickname is not None:
            pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "nickname", value)


if not MYPY:
    class GtmPropertyLivenessTestArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        test_interval: pulumi.Input[builtins.int]
        test_object_protocol: pulumi.Input[builtins.str]
        test_timeout: pulumi.Input[builtins.float]
        alternate_ca_certificates: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        answers_required: NotRequired[pulumi.Input[builtins.bool]]
        disable_nonstandard_port_warning: NotRequired[pulumi.Input[builtins.bool]]
        disabled: NotRequired[pulumi.Input[builtins.bool]]
        error_penalty: NotRequired[pulumi.Input[builtins.float]]
        http_error3xx: NotRequired[pulumi.Input[builtins.bool]]
        http_error4xx: NotRequired[pulumi.Input[builtins.bool]]
        http_error5xx: NotRequired[pulumi.Input[builtins.bool]]
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['GtmPropertyLivenessTestHttpHeaderArgsDict']]]]
        http_method: NotRequired[pulumi.Input[builtins.str]]
        http_request_body: NotRequired[pulumi.Input[builtins.str]]
        peer_certificate_verification: NotRequired[pulumi.Input[builtins.bool]]
        pre2023_security_posture: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
        """
        recursion_requested: NotRequired[pulumi.Input[builtins.bool]]
        request_string: NotRequired[pulumi.Input[builtins.str]]
        resource_type: NotRequired[pulumi.Input[builtins.str]]
        response_string: NotRequired[pulumi.Input[builtins.str]]
        ssl_client_certificate: NotRequired[pulumi.Input[builtins.str]]
        ssl_client_private_key: NotRequired[pulumi.Input[builtins.str]]
        test_object: NotRequired[pulumi.Input[builtins.str]]
        test_object_password: NotRequired[pulumi.Input[builtins.str]]
        test_object_port: NotRequired[pulumi.Input[builtins.int]]
        test_object_username: NotRequired[pulumi.Input[builtins.str]]
        timeout_penalty: NotRequired[pulumi.Input[builtins.float]]
elif False:
    GtmPropertyLivenessTestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GtmPropertyLivenessTestArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 test_interval: pulumi.Input[builtins.int],
                 test_object_protocol: pulumi.Input[builtins.str],
                 test_timeout: pulumi.Input[builtins.float],
                 alternate_ca_certificates: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 answers_required: Optional[pulumi.Input[builtins.bool]] = None,
                 disable_nonstandard_port_warning: Optional[pulumi.Input[builtins.bool]] = None,
                 disabled: Optional[pulumi.Input[builtins.bool]] = None,
                 error_penalty: Optional[pulumi.Input[builtins.float]] = None,
                 http_error3xx: Optional[pulumi.Input[builtins.bool]] = None,
                 http_error4xx: Optional[pulumi.Input[builtins.bool]] = None,
                 http_error5xx: Optional[pulumi.Input[builtins.bool]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['GtmPropertyLivenessTestHttpHeaderArgs']]]] = None,
                 http_method: Optional[pulumi.Input[builtins.str]] = None,
                 http_request_body: Optional[pulumi.Input[builtins.str]] = None,
                 peer_certificate_verification: Optional[pulumi.Input[builtins.bool]] = None,
                 pre2023_security_posture: Optional[pulumi.Input[builtins.bool]] = None,
                 recursion_requested: Optional[pulumi.Input[builtins.bool]] = None,
                 request_string: Optional[pulumi.Input[builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[builtins.str]] = None,
                 response_string: Optional[pulumi.Input[builtins.str]] = None,
                 ssl_client_certificate: Optional[pulumi.Input[builtins.str]] = None,
                 ssl_client_private_key: Optional[pulumi.Input[builtins.str]] = None,
                 test_object: Optional[pulumi.Input[builtins.str]] = None,
                 test_object_password: Optional[pulumi.Input[builtins.str]] = None,
                 test_object_port: Optional[pulumi.Input[builtins.int]] = None,
                 test_object_username: Optional[pulumi.Input[builtins.str]] = None,
                 timeout_penalty: Optional[pulumi.Input[builtins.float]] = None):
        """
        :param pulumi.Input[builtins.bool] pre2023_security_posture: Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "test_interval", test_interval)
        pulumi.set(__self__, "test_object_protocol", test_object_protocol)
        pulumi.set(__self__, "test_timeout", test_timeout)
        if alternate_ca_certificates is not None:
            pulumi.set(__self__, "alternate_ca_certificates", alternate_ca_certificates)
        if answers_required is not None:
            pulumi.set(__self__, "answers_required", answers_required)
        if disable_nonstandard_port_warning is not None:
            pulumi.set(__self__, "disable_nonstandard_port_warning", disable_nonstandard_port_warning)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if error_penalty is not None:
            pulumi.set(__self__, "error_penalty", error_penalty)
        if http_error3xx is not None:
            pulumi.set(__self__, "http_error3xx", http_error3xx)
        if http_error4xx is not None:
            pulumi.set(__self__, "http_error4xx", http_error4xx)
        if http_error5xx is not None:
            pulumi.set(__self__, "http_error5xx", http_error5xx)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if http_method is not None:
            pulumi.set(__self__, "http_method", http_method)
        if http_request_body is not None:
            pulumi.set(__self__, "http_request_body", http_request_body)
        if peer_certificate_verification is not None:
            pulumi.set(__self__, "peer_certificate_verification", peer_certificate_verification)
        if pre2023_security_posture is not None:
            pulumi.set(__self__, "pre2023_security_posture", pre2023_security_posture)
        if recursion_requested is not None:
            pulumi.set(__self__, "recursion_requested", recursion_requested)
        if request_string is not None:
            pulumi.set(__self__, "request_string", request_string)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if response_string is not None:
            pulumi.set(__self__, "response_string", response_string)
        if ssl_client_certificate is not None:
            pulumi.set(__self__, "ssl_client_certificate", ssl_client_certificate)
        if ssl_client_private_key is not None:
            pulumi.set(__self__, "ssl_client_private_key", ssl_client_private_key)
        if test_object is not None:
            pulumi.set(__self__, "test_object", test_object)
        if test_object_password is not None:
            pulumi.set(__self__, "test_object_password", test_object_password)
        if test_object_port is not None:
            pulumi.set(__self__, "test_object_port", test_object_port)
        if test_object_username is not None:
            pulumi.set(__self__, "test_object_username", test_object_username)
        if timeout_penalty is not None:
            pulumi.set(__self__, "timeout_penalty", timeout_penalty)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="testInterval")
    def test_interval(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "test_interval")

    @test_interval.setter
    def test_interval(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "test_interval", value)

    @property
    @pulumi.getter(name="testObjectProtocol")
    def test_object_protocol(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "test_object_protocol")

    @test_object_protocol.setter
    def test_object_protocol(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "test_object_protocol", value)

    @property
    @pulumi.getter(name="testTimeout")
    def test_timeout(self) -> pulumi.Input[builtins.float]:
        return pulumi.get(self, "test_timeout")

    @test_timeout.setter
    def test_timeout(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "test_timeout", value)

    @property
    @pulumi.getter(name="alternateCaCertificates")
    def alternate_ca_certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "alternate_ca_certificates")

    @alternate_ca_certificates.setter
    def alternate_ca_certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "alternate_ca_certificates", value)

    @property
    @pulumi.getter(name="answersRequired")
    def answers_required(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "answers_required")

    @answers_required.setter
    def answers_required(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "answers_required", value)

    @property
    @pulumi.getter(name="disableNonstandardPortWarning")
    def disable_nonstandard_port_warning(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "disable_nonstandard_port_warning")

    @disable_nonstandard_port_warning.setter
    def disable_nonstandard_port_warning(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "disable_nonstandard_port_warning", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="errorPenalty")
    def error_penalty(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "error_penalty")

    @error_penalty.setter
    def error_penalty(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "error_penalty", value)

    @property
    @pulumi.getter(name="httpError3xx")
    def http_error3xx(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "http_error3xx")

    @http_error3xx.setter
    def http_error3xx(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "http_error3xx", value)

    @property
    @pulumi.getter(name="httpError4xx")
    def http_error4xx(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "http_error4xx")

    @http_error4xx.setter
    def http_error4xx(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "http_error4xx", value)

    @property
    @pulumi.getter(name="httpError5xx")
    def http_error5xx(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "http_error5xx")

    @http_error5xx.setter
    def http_error5xx(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "http_error5xx", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GtmPropertyLivenessTestHttpHeaderArgs']]]]:
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GtmPropertyLivenessTestHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "http_method")

    @http_method.setter
    def http_method(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "http_method", value)

    @property
    @pulumi.getter(name="httpRequestBody")
    def http_request_body(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "http_request_body")

    @http_request_body.setter
    def http_request_body(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "http_request_body", value)

    @property
    @pulumi.getter(name="peerCertificateVerification")
    def peer_certificate_verification(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "peer_certificate_verification")

    @peer_certificate_verification.setter
    def peer_certificate_verification(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "peer_certificate_verification", value)

    @property
    @pulumi.getter(name="pre2023SecurityPosture")
    def pre2023_security_posture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
        """
        return pulumi.get(self, "pre2023_security_posture")

    @pre2023_security_posture.setter
    def pre2023_security_posture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "pre2023_security_posture", value)

    @property
    @pulumi.getter(name="recursionRequested")
    def recursion_requested(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "recursion_requested")

    @recursion_requested.setter
    def recursion_requested(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "recursion_requested", value)

    @property
    @pulumi.getter(name="requestString")
    def request_string(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "request_string")

    @request_string.setter
    def request_string(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "request_string", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="responseString")
    def response_string(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "response_string")

    @response_string.setter
    def response_string(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "response_string", value)

    @property
    @pulumi.getter(name="sslClientCertificate")
    def ssl_client_certificate(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ssl_client_certificate")

    @ssl_client_certificate.setter
    def ssl_client_certificate(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ssl_client_certificate", value)

    @property
    @pulumi.getter(name="sslClientPrivateKey")
    def ssl_client_private_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ssl_client_private_key")

    @ssl_client_private_key.setter
    def ssl_client_private_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ssl_client_private_key", value)

    @property
    @pulumi.getter(name="testObject")
    def test_object(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "test_object")

    @test_object.setter
    def test_object(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "test_object", value)

    @property
    @pulumi.getter(name="testObjectPassword")
    def test_object_password(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "test_object_password")

    @test_object_password.setter
    def test_object_password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "test_object_password", value)

    @property
    @pulumi.getter(name="testObjectPort")
    def test_object_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "test_object_port")

    @test_object_port.setter
    def test_object_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "test_object_port", value)

    @property
    @pulumi.getter(name="testObjectUsername")
    def test_object_username(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "test_object_username")

    @test_object_username.setter
    def test_object_username(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "test_object_username", value)

    @property
    @pulumi.getter(name="timeoutPenalty")
    def timeout_penalty(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "timeout_penalty")

    @timeout_penalty.setter
    def timeout_penalty(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "timeout_penalty", value)


if not MYPY:
    class GtmPropertyLivenessTestHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    GtmPropertyLivenessTestHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GtmPropertyLivenessTestHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class GtmPropertyStaticRrSetArgsDict(TypedDict):
        rdatas: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        ttl: NotRequired[pulumi.Input[builtins.int]]
        type: NotRequired[pulumi.Input[builtins.str]]
elif False:
    GtmPropertyStaticRrSetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GtmPropertyStaticRrSetArgs:
    def __init__(__self__, *,
                 rdatas: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        if rdatas is not None:
            pulumi.set(__self__, "rdatas", rdatas)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def rdatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "rdatas")

    @rdatas.setter
    def rdatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "rdatas", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class GtmPropertyTrafficTargetArgsDict(TypedDict):
        datacenter_id: NotRequired[pulumi.Input[builtins.int]]
        enabled: NotRequired[pulumi.Input[builtins.bool]]
        handout_cname: NotRequired[pulumi.Input[builtins.str]]
        precedence: NotRequired[pulumi.Input[builtins.int]]
        servers: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        weight: NotRequired[pulumi.Input[builtins.float]]
elif False:
    GtmPropertyTrafficTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GtmPropertyTrafficTargetArgs:
    def __init__(__self__, *,
                 datacenter_id: Optional[pulumi.Input[builtins.int]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 handout_cname: Optional[pulumi.Input[builtins.str]] = None,
                 precedence: Optional[pulumi.Input[builtins.int]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 weight: Optional[pulumi.Input[builtins.float]] = None):
        if datacenter_id is not None:
            pulumi.set(__self__, "datacenter_id", datacenter_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if handout_cname is not None:
            pulumi.set(__self__, "handout_cname", handout_cname)
        if precedence is not None:
            pulumi.set(__self__, "precedence", precedence)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="handoutCname")
    def handout_cname(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "handout_cname")

    @handout_cname.setter
    def handout_cname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "handout_cname", value)

    @property
    @pulumi.getter
    def precedence(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "precedence")

    @precedence.setter
    def precedence(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "precedence", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class GtmResourceResourceInstanceArgsDict(TypedDict):
        datacenter_id: pulumi.Input[builtins.int]
        load_object: NotRequired[pulumi.Input[builtins.str]]
        load_object_port: NotRequired[pulumi.Input[builtins.int]]
        load_servers: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        use_default_load_object: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    GtmResourceResourceInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GtmResourceResourceInstanceArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[builtins.int],
                 load_object: Optional[pulumi.Input[builtins.str]] = None,
                 load_object_port: Optional[pulumi.Input[builtins.int]] = None,
                 load_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 use_default_load_object: Optional[pulumi.Input[builtins.bool]] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if load_object is not None:
            pulumi.set(__self__, "load_object", load_object)
        if load_object_port is not None:
            pulumi.set(__self__, "load_object_port", load_object_port)
        if load_servers is not None:
            pulumi.set(__self__, "load_servers", load_servers)
        if use_default_load_object is not None:
            pulumi.set(__self__, "use_default_load_object", use_default_load_object)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="loadObject")
    def load_object(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "load_object")

    @load_object.setter
    def load_object(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "load_object", value)

    @property
    @pulumi.getter(name="loadObjectPort")
    def load_object_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "load_object_port")

    @load_object_port.setter
    def load_object_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "load_object_port", value)

    @property
    @pulumi.getter(name="loadServers")
    def load_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "load_servers")

    @load_servers.setter
    def load_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "load_servers", value)

    @property
    @pulumi.getter(name="useDefaultLoadObject")
    def use_default_load_object(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "use_default_load_object")

    @use_default_load_object.setter
    def use_default_load_object(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "use_default_load_object", value)


if not MYPY:
    class IamCidrBlockActionsArgsDict(TypedDict):
        delete: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether you can delete this CIDR block. You can't delete a CIDR block from an IP address not on the allowlist, or if the CIDR block is the only one on the allowlist.
        """
        edit: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether you can edit this CIDR block. You can't edit CIDR block from an IP address not on the allowlist, or if the CIDR block is the only one on the allowlist.
        """
elif False:
    IamCidrBlockActionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IamCidrBlockActionsArgs:
    def __init__(__self__, *,
                 delete: Optional[pulumi.Input[builtins.bool]] = None,
                 edit: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.bool] delete: Whether you can delete this CIDR block. You can't delete a CIDR block from an IP address not on the allowlist, or if the CIDR block is the only one on the allowlist.
        :param pulumi.Input[builtins.bool] edit: Whether you can edit this CIDR block. You can't edit CIDR block from an IP address not on the allowlist, or if the CIDR block is the only one on the allowlist.
        """
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if edit is not None:
            pulumi.set(__self__, "edit", edit)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether you can delete this CIDR block. You can't delete a CIDR block from an IP address not on the allowlist, or if the CIDR block is the only one on the allowlist.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether you can edit this CIDR block. You can't edit CIDR block from an IP address not on the allowlist, or if the CIDR block is the only one on the allowlist.
        """
        return pulumi.get(self, "edit")

    @edit.setter
    def edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "edit", value)


if not MYPY:
    class IamUserUserNotificationsArgsDict(TypedDict):
        enable_email_notifications: pulumi.Input[builtins.bool]
        """
        Enables email notifications.
        """
        password_expiry: pulumi.Input[builtins.bool]
        """
        Enables notifications for expiring passwords.
        """
        proactives: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        Products for which the user gets notifications for service issues.
        """
        upgrades: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        Products for which the user receives notifications for upgrades.
        """
        api_client_credential_expiry_notification: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enables notifications for expiring API client credentials.
        """
        new_user_notification: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enables notifications for group administrators when the user creates other new users.
        """
elif False:
    IamUserUserNotificationsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IamUserUserNotificationsArgs:
    def __init__(__self__, *,
                 enable_email_notifications: pulumi.Input[builtins.bool],
                 password_expiry: pulumi.Input[builtins.bool],
                 proactives: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 upgrades: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 api_client_credential_expiry_notification: Optional[pulumi.Input[builtins.bool]] = None,
                 new_user_notification: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.bool] enable_email_notifications: Enables email notifications.
        :param pulumi.Input[builtins.bool] password_expiry: Enables notifications for expiring passwords.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] proactives: Products for which the user gets notifications for service issues.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] upgrades: Products for which the user receives notifications for upgrades.
        :param pulumi.Input[builtins.bool] api_client_credential_expiry_notification: Enables notifications for expiring API client credentials.
        :param pulumi.Input[builtins.bool] new_user_notification: Enables notifications for group administrators when the user creates other new users.
        """
        pulumi.set(__self__, "enable_email_notifications", enable_email_notifications)
        pulumi.set(__self__, "password_expiry", password_expiry)
        pulumi.set(__self__, "proactives", proactives)
        pulumi.set(__self__, "upgrades", upgrades)
        if api_client_credential_expiry_notification is not None:
            pulumi.set(__self__, "api_client_credential_expiry_notification", api_client_credential_expiry_notification)
        if new_user_notification is not None:
            pulumi.set(__self__, "new_user_notification", new_user_notification)

    @property
    @pulumi.getter(name="enableEmailNotifications")
    def enable_email_notifications(self) -> pulumi.Input[builtins.bool]:
        """
        Enables email notifications.
        """
        return pulumi.get(self, "enable_email_notifications")

    @enable_email_notifications.setter
    def enable_email_notifications(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enable_email_notifications", value)

    @property
    @pulumi.getter(name="passwordExpiry")
    def password_expiry(self) -> pulumi.Input[builtins.bool]:
        """
        Enables notifications for expiring passwords.
        """
        return pulumi.get(self, "password_expiry")

    @password_expiry.setter
    def password_expiry(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "password_expiry", value)

    @property
    @pulumi.getter
    def proactives(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        Products for which the user gets notifications for service issues.
        """
        return pulumi.get(self, "proactives")

    @proactives.setter
    def proactives(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "proactives", value)

    @property
    @pulumi.getter
    def upgrades(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        Products for which the user receives notifications for upgrades.
        """
        return pulumi.get(self, "upgrades")

    @upgrades.setter
    def upgrades(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "upgrades", value)

    @property
    @pulumi.getter(name="apiClientCredentialExpiryNotification")
    def api_client_credential_expiry_notification(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enables notifications for expiring API client credentials.
        """
        return pulumi.get(self, "api_client_credential_expiry_notification")

    @api_client_credential_expiry_notification.setter
    def api_client_credential_expiry_notification(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "api_client_credential_expiry_notification", value)

    @property
    @pulumi.getter(name="newUserNotification")
    def new_user_notification(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enables notifications for group administrators when the user creates other new users.
        """
        return pulumi.get(self, "new_user_notification")

    @new_user_notification.setter
    def new_user_notification(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "new_user_notification", value)


if not MYPY:
    class PropertyActivationComplianceRecordArgsDict(TypedDict):
        noncompliance_reason_emergency: NotRequired[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonEmergencyArgsDict']]
        """
        Provides an audit record when activating on a production network with noncompliance reason as `EMERGENCY`
        """
        noncompliance_reason_no_production_traffic: NotRequired[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgsDict']]
        """
        Provides an audit record when activating on a production network with noncompliance reason as `NO_PRODUCTION_TRAFFIC`
        """
        noncompliance_reason_none: NotRequired[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonNoneArgsDict']]
        """
        Provides an audit record when activating on a production network with noncompliance reason as `NONE`
        """
        noncompliance_reason_other: NotRequired[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonOtherArgsDict']]
        """
        Provides an audit record when activating on a production network with noncompliance reason as `OTHER`
        """
elif False:
    PropertyActivationComplianceRecordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyActivationComplianceRecordArgs:
    def __init__(__self__, *,
                 noncompliance_reason_emergency: Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonEmergencyArgs']] = None,
                 noncompliance_reason_no_production_traffic: Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs']] = None,
                 noncompliance_reason_none: Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonNoneArgs']] = None,
                 noncompliance_reason_other: Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonOtherArgs']] = None):
        """
        :param pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonEmergencyArgs'] noncompliance_reason_emergency: Provides an audit record when activating on a production network with noncompliance reason as `EMERGENCY`
        :param pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs'] noncompliance_reason_no_production_traffic: Provides an audit record when activating on a production network with noncompliance reason as `NO_PRODUCTION_TRAFFIC`
        :param pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonNoneArgs'] noncompliance_reason_none: Provides an audit record when activating on a production network with noncompliance reason as `NONE`
        :param pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonOtherArgs'] noncompliance_reason_other: Provides an audit record when activating on a production network with noncompliance reason as `OTHER`
        """
        if noncompliance_reason_emergency is not None:
            pulumi.set(__self__, "noncompliance_reason_emergency", noncompliance_reason_emergency)
        if noncompliance_reason_no_production_traffic is not None:
            pulumi.set(__self__, "noncompliance_reason_no_production_traffic", noncompliance_reason_no_production_traffic)
        if noncompliance_reason_none is not None:
            pulumi.set(__self__, "noncompliance_reason_none", noncompliance_reason_none)
        if noncompliance_reason_other is not None:
            pulumi.set(__self__, "noncompliance_reason_other", noncompliance_reason_other)

    @property
    @pulumi.getter(name="noncomplianceReasonEmergency")
    def noncompliance_reason_emergency(self) -> Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonEmergencyArgs']]:
        """
        Provides an audit record when activating on a production network with noncompliance reason as `EMERGENCY`
        """
        return pulumi.get(self, "noncompliance_reason_emergency")

    @noncompliance_reason_emergency.setter
    def noncompliance_reason_emergency(self, value: Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonEmergencyArgs']]):
        pulumi.set(self, "noncompliance_reason_emergency", value)

    @property
    @pulumi.getter(name="noncomplianceReasonNoProductionTraffic")
    def noncompliance_reason_no_production_traffic(self) -> Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs']]:
        """
        Provides an audit record when activating on a production network with noncompliance reason as `NO_PRODUCTION_TRAFFIC`
        """
        return pulumi.get(self, "noncompliance_reason_no_production_traffic")

    @noncompliance_reason_no_production_traffic.setter
    def noncompliance_reason_no_production_traffic(self, value: Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs']]):
        pulumi.set(self, "noncompliance_reason_no_production_traffic", value)

    @property
    @pulumi.getter(name="noncomplianceReasonNone")
    def noncompliance_reason_none(self) -> Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonNoneArgs']]:
        """
        Provides an audit record when activating on a production network with noncompliance reason as `NONE`
        """
        return pulumi.get(self, "noncompliance_reason_none")

    @noncompliance_reason_none.setter
    def noncompliance_reason_none(self, value: Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonNoneArgs']]):
        pulumi.set(self, "noncompliance_reason_none", value)

    @property
    @pulumi.getter(name="noncomplianceReasonOther")
    def noncompliance_reason_other(self) -> Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonOtherArgs']]:
        """
        Provides an audit record when activating on a production network with noncompliance reason as `OTHER`
        """
        return pulumi.get(self, "noncompliance_reason_other")

    @noncompliance_reason_other.setter
    def noncompliance_reason_other(self, value: Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonOtherArgs']]):
        pulumi.set(self, "noncompliance_reason_other", value)


if not MYPY:
    class PropertyActivationComplianceRecordNoncomplianceReasonEmergencyArgsDict(TypedDict):
        ticket_id: NotRequired[pulumi.Input[builtins.str]]
        """
        Identifies the ticket that describes the need for the activation
        """
elif False:
    PropertyActivationComplianceRecordNoncomplianceReasonEmergencyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyActivationComplianceRecordNoncomplianceReasonEmergencyArgs:
    def __init__(__self__, *,
                 ticket_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] ticket_id: Identifies the ticket that describes the need for the activation
        """
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifies the ticket that describes the need for the activation
        """
        return pulumi.get(self, "ticket_id")

    @ticket_id.setter
    def ticket_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ticket_id", value)


if not MYPY:
    class PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgsDict(TypedDict):
        ticket_id: NotRequired[pulumi.Input[builtins.str]]
        """
        Identifies the ticket that describes the need for the activation
        """
elif False:
    PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs:
    def __init__(__self__, *,
                 ticket_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] ticket_id: Identifies the ticket that describes the need for the activation
        """
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifies the ticket that describes the need for the activation
        """
        return pulumi.get(self, "ticket_id")

    @ticket_id.setter
    def ticket_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ticket_id", value)


if not MYPY:
    class PropertyActivationComplianceRecordNoncomplianceReasonNoneArgsDict(TypedDict):
        customer_email: NotRequired[pulumi.Input[builtins.str]]
        """
        Identifies the customer
        """
        peer_reviewed_by: NotRequired[pulumi.Input[builtins.str]]
        """
        Identifies person who has independently approved the activation request
        """
        ticket_id: NotRequired[pulumi.Input[builtins.str]]
        """
        Identifies the ticket that describes the need for the activation
        """
        unit_tested: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether the metadata to activate has been fully tested
        """
elif False:
    PropertyActivationComplianceRecordNoncomplianceReasonNoneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyActivationComplianceRecordNoncomplianceReasonNoneArgs:
    def __init__(__self__, *,
                 customer_email: Optional[pulumi.Input[builtins.str]] = None,
                 peer_reviewed_by: Optional[pulumi.Input[builtins.str]] = None,
                 ticket_id: Optional[pulumi.Input[builtins.str]] = None,
                 unit_tested: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] customer_email: Identifies the customer
        :param pulumi.Input[builtins.str] peer_reviewed_by: Identifies person who has independently approved the activation request
        :param pulumi.Input[builtins.str] ticket_id: Identifies the ticket that describes the need for the activation
        :param pulumi.Input[builtins.bool] unit_tested: Whether the metadata to activate has been fully tested
        """
        if customer_email is not None:
            pulumi.set(__self__, "customer_email", customer_email)
        if peer_reviewed_by is not None:
            pulumi.set(__self__, "peer_reviewed_by", peer_reviewed_by)
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)
        if unit_tested is not None:
            pulumi.set(__self__, "unit_tested", unit_tested)

    @property
    @pulumi.getter(name="customerEmail")
    def customer_email(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifies the customer
        """
        return pulumi.get(self, "customer_email")

    @customer_email.setter
    def customer_email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "customer_email", value)

    @property
    @pulumi.getter(name="peerReviewedBy")
    def peer_reviewed_by(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifies person who has independently approved the activation request
        """
        return pulumi.get(self, "peer_reviewed_by")

    @peer_reviewed_by.setter
    def peer_reviewed_by(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "peer_reviewed_by", value)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifies the ticket that describes the need for the activation
        """
        return pulumi.get(self, "ticket_id")

    @ticket_id.setter
    def ticket_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ticket_id", value)

    @property
    @pulumi.getter(name="unitTested")
    def unit_tested(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether the metadata to activate has been fully tested
        """
        return pulumi.get(self, "unit_tested")

    @unit_tested.setter
    def unit_tested(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "unit_tested", value)


if not MYPY:
    class PropertyActivationComplianceRecordNoncomplianceReasonOtherArgsDict(TypedDict):
        other_noncompliance_reason: NotRequired[pulumi.Input[builtins.str]]
        """
        Describes the reason why the activation must occur immediately, out of compliance with the standard procedure
        """
        ticket_id: NotRequired[pulumi.Input[builtins.str]]
        """
        Identifies the ticket that describes the need for the activation
        """
elif False:
    PropertyActivationComplianceRecordNoncomplianceReasonOtherArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyActivationComplianceRecordNoncomplianceReasonOtherArgs:
    def __init__(__self__, *,
                 other_noncompliance_reason: Optional[pulumi.Input[builtins.str]] = None,
                 ticket_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] other_noncompliance_reason: Describes the reason why the activation must occur immediately, out of compliance with the standard procedure
        :param pulumi.Input[builtins.str] ticket_id: Identifies the ticket that describes the need for the activation
        """
        if other_noncompliance_reason is not None:
            pulumi.set(__self__, "other_noncompliance_reason", other_noncompliance_reason)
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="otherNoncomplianceReason")
    def other_noncompliance_reason(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Describes the reason why the activation must occur immediately, out of compliance with the standard procedure
        """
        return pulumi.get(self, "other_noncompliance_reason")

    @other_noncompliance_reason.setter
    def other_noncompliance_reason(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "other_noncompliance_reason", value)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifies the ticket that describes the need for the activation
        """
        return pulumi.get(self, "ticket_id")

    @ticket_id.setter
    def ticket_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ticket_id", value)


if not MYPY:
    class PropertyActivationRuleErrorArgsDict(TypedDict):
        behavior_name: NotRequired[pulumi.Input[builtins.str]]
        detail: NotRequired[pulumi.Input[builtins.str]]
        error_location: NotRequired[pulumi.Input[builtins.str]]
        instance: NotRequired[pulumi.Input[builtins.str]]
        status_code: NotRequired[pulumi.Input[builtins.int]]
        title: NotRequired[pulumi.Input[builtins.str]]
        type: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PropertyActivationRuleErrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyActivationRuleErrorArgs:
    def __init__(__self__, *,
                 behavior_name: Optional[pulumi.Input[builtins.str]] = None,
                 detail: Optional[pulumi.Input[builtins.str]] = None,
                 error_location: Optional[pulumi.Input[builtins.str]] = None,
                 instance: Optional[pulumi.Input[builtins.str]] = None,
                 status_code: Optional[pulumi.Input[builtins.int]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        if behavior_name is not None:
            pulumi.set(__self__, "behavior_name", behavior_name)
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if error_location is not None:
            pulumi.set(__self__, "error_location", error_location)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="behaviorName")
    def behavior_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "behavior_name")

    @behavior_name.setter
    def behavior_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "behavior_name", value)

    @property
    @pulumi.getter
    def detail(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "detail")

    @detail.setter
    def detail(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "detail", value)

    @property
    @pulumi.getter(name="errorLocation")
    def error_location(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "error_location")

    @error_location.setter
    def error_location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "error_location", value)

    @property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class PropertyActivationTimeoutsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PropertyActivationTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyActivationTimeoutsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[builtins.str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default", value)


if not MYPY:
    class PropertyHostnameArgsDict(TypedDict):
        cert_provisioning_type: pulumi.Input[builtins.str]
        cname_from: pulumi.Input[builtins.str]
        cname_to: pulumi.Input[builtins.str]
        cert_statuses: NotRequired[pulumi.Input[Sequence[pulumi.Input['PropertyHostnameCertStatusArgsDict']]]]
        cname_type: NotRequired[pulumi.Input[builtins.str]]
        edge_hostname_id: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PropertyHostnameArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyHostnameArgs:
    def __init__(__self__, *,
                 cert_provisioning_type: pulumi.Input[builtins.str],
                 cname_from: pulumi.Input[builtins.str],
                 cname_to: pulumi.Input[builtins.str],
                 cert_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['PropertyHostnameCertStatusArgs']]]] = None,
                 cname_type: Optional[pulumi.Input[builtins.str]] = None,
                 edge_hostname_id: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "cert_provisioning_type", cert_provisioning_type)
        pulumi.set(__self__, "cname_from", cname_from)
        pulumi.set(__self__, "cname_to", cname_to)
        if cert_statuses is not None:
            pulumi.set(__self__, "cert_statuses", cert_statuses)
        if cname_type is not None:
            pulumi.set(__self__, "cname_type", cname_type)
        if edge_hostname_id is not None:
            pulumi.set(__self__, "edge_hostname_id", edge_hostname_id)

    @property
    @pulumi.getter(name="certProvisioningType")
    def cert_provisioning_type(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "cert_provisioning_type")

    @cert_provisioning_type.setter
    def cert_provisioning_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cert_provisioning_type", value)

    @property
    @pulumi.getter(name="cnameFrom")
    def cname_from(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "cname_from")

    @cname_from.setter
    def cname_from(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cname_from", value)

    @property
    @pulumi.getter(name="cnameTo")
    def cname_to(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "cname_to")

    @cname_to.setter
    def cname_to(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cname_to", value)

    @property
    @pulumi.getter(name="certStatuses")
    def cert_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PropertyHostnameCertStatusArgs']]]]:
        return pulumi.get(self, "cert_statuses")

    @cert_statuses.setter
    def cert_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PropertyHostnameCertStatusArgs']]]]):
        pulumi.set(self, "cert_statuses", value)

    @property
    @pulumi.getter(name="cnameType")
    def cname_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "cname_type")

    @cname_type.setter
    def cname_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cname_type", value)

    @property
    @pulumi.getter(name="edgeHostnameId")
    def edge_hostname_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "edge_hostname_id")

    @edge_hostname_id.setter
    def edge_hostname_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "edge_hostname_id", value)


if not MYPY:
    class PropertyHostnameBucketHostnamesArgsDict(TypedDict):
        cert_provisioning_type: pulumi.Input[builtins.str]
        """
        Indicates the type of the certificate used in the property hostname. Either `CPS_MANAGED` for certificates you create with the Certificate Provisioning System (CPS) API, or `DEFAULT` for Domain Validation (DV) certificates deployed automatically.
        """
        edge_hostname_id: pulumi.Input[builtins.str]
        """
        Identifies the edge hostname you mapped your traffic to on the production network.
        """
        cname_to: NotRequired[pulumi.Input[builtins.str]]
        """
        The edge hostname you point the property hostname to so that you can start serving traffic through Akamai servers. This member corresponds to the edge hostname object's `edgeHostnameDomain` member.
        """
elif False:
    PropertyHostnameBucketHostnamesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyHostnameBucketHostnamesArgs:
    def __init__(__self__, *,
                 cert_provisioning_type: pulumi.Input[builtins.str],
                 edge_hostname_id: pulumi.Input[builtins.str],
                 cname_to: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] cert_provisioning_type: Indicates the type of the certificate used in the property hostname. Either `CPS_MANAGED` for certificates you create with the Certificate Provisioning System (CPS) API, or `DEFAULT` for Domain Validation (DV) certificates deployed automatically.
        :param pulumi.Input[builtins.str] edge_hostname_id: Identifies the edge hostname you mapped your traffic to on the production network.
        :param pulumi.Input[builtins.str] cname_to: The edge hostname you point the property hostname to so that you can start serving traffic through Akamai servers. This member corresponds to the edge hostname object's `edgeHostnameDomain` member.
        """
        pulumi.set(__self__, "cert_provisioning_type", cert_provisioning_type)
        pulumi.set(__self__, "edge_hostname_id", edge_hostname_id)
        if cname_to is not None:
            pulumi.set(__self__, "cname_to", cname_to)

    @property
    @pulumi.getter(name="certProvisioningType")
    def cert_provisioning_type(self) -> pulumi.Input[builtins.str]:
        """
        Indicates the type of the certificate used in the property hostname. Either `CPS_MANAGED` for certificates you create with the Certificate Provisioning System (CPS) API, or `DEFAULT` for Domain Validation (DV) certificates deployed automatically.
        """
        return pulumi.get(self, "cert_provisioning_type")

    @cert_provisioning_type.setter
    def cert_provisioning_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cert_provisioning_type", value)

    @property
    @pulumi.getter(name="edgeHostnameId")
    def edge_hostname_id(self) -> pulumi.Input[builtins.str]:
        """
        Identifies the edge hostname you mapped your traffic to on the production network.
        """
        return pulumi.get(self, "edge_hostname_id")

    @edge_hostname_id.setter
    def edge_hostname_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "edge_hostname_id", value)

    @property
    @pulumi.getter(name="cnameTo")
    def cname_to(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The edge hostname you point the property hostname to so that you can start serving traffic through Akamai servers. This member corresponds to the edge hostname object's `edgeHostnameDomain` member.
        """
        return pulumi.get(self, "cname_to")

    @cname_to.setter
    def cname_to(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cname_to", value)


if not MYPY:
    class PropertyHostnameCertStatusArgsDict(TypedDict):
        hostname: NotRequired[pulumi.Input[builtins.str]]
        """
        The hostname part of the CNAME record used to validate the certificate's domain.
        """
        production_status: NotRequired[pulumi.Input[builtins.str]]
        """
        The certificate's deployment status on the production network.
        """
        staging_status: NotRequired[pulumi.Input[builtins.str]]
        """
        The certificate's deployment status on the staging network.
        """
        target: NotRequired[pulumi.Input[builtins.str]]
        """
        The destination part of the CNAME record used to validate the certificate's domain.
        """
elif False:
    PropertyHostnameCertStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyHostnameCertStatusArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[builtins.str]] = None,
                 production_status: Optional[pulumi.Input[builtins.str]] = None,
                 staging_status: Optional[pulumi.Input[builtins.str]] = None,
                 target: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] hostname: The hostname part of the CNAME record used to validate the certificate's domain.
        :param pulumi.Input[builtins.str] production_status: The certificate's deployment status on the production network.
        :param pulumi.Input[builtins.str] staging_status: The certificate's deployment status on the staging network.
        :param pulumi.Input[builtins.str] target: The destination part of the CNAME record used to validate the certificate's domain.
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if production_status is not None:
            pulumi.set(__self__, "production_status", production_status)
        if staging_status is not None:
            pulumi.set(__self__, "staging_status", staging_status)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The hostname part of the CNAME record used to validate the certificate's domain.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="productionStatus")
    def production_status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The certificate's deployment status on the production network.
        """
        return pulumi.get(self, "production_status")

    @production_status.setter
    def production_status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "production_status", value)

    @property
    @pulumi.getter(name="stagingStatus")
    def staging_status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The certificate's deployment status on the staging network.
        """
        return pulumi.get(self, "staging_status")

    @staging_status.setter
    def staging_status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "staging_status", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The destination part of the CNAME record used to validate the certificate's domain.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "target", value)


if not MYPY:
    class PropertyIncludeActivationComplianceRecordArgsDict(TypedDict):
        noncompliance_reason_emergency: NotRequired[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergencyArgsDict']]
        """
        Provides an audit record when activating on a production network with noncompliance reason as `EMERGENCY`
        """
        noncompliance_reason_no_production_traffic: NotRequired[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgsDict']]
        """
        Provides an audit record when activating on a production network with noncompliance reason as `NO_PRODUCTION_TRAFFIC`
        """
        noncompliance_reason_none: NotRequired[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoneArgsDict']]
        """
        Provides an audit record when activating on a production network with noncompliance reason as `NONE`
        """
        noncompliance_reason_other: NotRequired[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonOtherArgsDict']]
        """
        Provides an audit record when activating on a production network with noncompliance reason as `OTHER`
        """
elif False:
    PropertyIncludeActivationComplianceRecordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyIncludeActivationComplianceRecordArgs:
    def __init__(__self__, *,
                 noncompliance_reason_emergency: Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergencyArgs']] = None,
                 noncompliance_reason_no_production_traffic: Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs']] = None,
                 noncompliance_reason_none: Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoneArgs']] = None,
                 noncompliance_reason_other: Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonOtherArgs']] = None):
        """
        :param pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergencyArgs'] noncompliance_reason_emergency: Provides an audit record when activating on a production network with noncompliance reason as `EMERGENCY`
        :param pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs'] noncompliance_reason_no_production_traffic: Provides an audit record when activating on a production network with noncompliance reason as `NO_PRODUCTION_TRAFFIC`
        :param pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoneArgs'] noncompliance_reason_none: Provides an audit record when activating on a production network with noncompliance reason as `NONE`
        :param pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonOtherArgs'] noncompliance_reason_other: Provides an audit record when activating on a production network with noncompliance reason as `OTHER`
        """
        if noncompliance_reason_emergency is not None:
            pulumi.set(__self__, "noncompliance_reason_emergency", noncompliance_reason_emergency)
        if noncompliance_reason_no_production_traffic is not None:
            pulumi.set(__self__, "noncompliance_reason_no_production_traffic", noncompliance_reason_no_production_traffic)
        if noncompliance_reason_none is not None:
            pulumi.set(__self__, "noncompliance_reason_none", noncompliance_reason_none)
        if noncompliance_reason_other is not None:
            pulumi.set(__self__, "noncompliance_reason_other", noncompliance_reason_other)

    @property
    @pulumi.getter(name="noncomplianceReasonEmergency")
    def noncompliance_reason_emergency(self) -> Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergencyArgs']]:
        """
        Provides an audit record when activating on a production network with noncompliance reason as `EMERGENCY`
        """
        return pulumi.get(self, "noncompliance_reason_emergency")

    @noncompliance_reason_emergency.setter
    def noncompliance_reason_emergency(self, value: Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergencyArgs']]):
        pulumi.set(self, "noncompliance_reason_emergency", value)

    @property
    @pulumi.getter(name="noncomplianceReasonNoProductionTraffic")
    def noncompliance_reason_no_production_traffic(self) -> Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs']]:
        """
        Provides an audit record when activating on a production network with noncompliance reason as `NO_PRODUCTION_TRAFFIC`
        """
        return pulumi.get(self, "noncompliance_reason_no_production_traffic")

    @noncompliance_reason_no_production_traffic.setter
    def noncompliance_reason_no_production_traffic(self, value: Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs']]):
        pulumi.set(self, "noncompliance_reason_no_production_traffic", value)

    @property
    @pulumi.getter(name="noncomplianceReasonNone")
    def noncompliance_reason_none(self) -> Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoneArgs']]:
        """
        Provides an audit record when activating on a production network with noncompliance reason as `NONE`
        """
        return pulumi.get(self, "noncompliance_reason_none")

    @noncompliance_reason_none.setter
    def noncompliance_reason_none(self, value: Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoneArgs']]):
        pulumi.set(self, "noncompliance_reason_none", value)

    @property
    @pulumi.getter(name="noncomplianceReasonOther")
    def noncompliance_reason_other(self) -> Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonOtherArgs']]:
        """
        Provides an audit record when activating on a production network with noncompliance reason as `OTHER`
        """
        return pulumi.get(self, "noncompliance_reason_other")

    @noncompliance_reason_other.setter
    def noncompliance_reason_other(self, value: Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonOtherArgs']]):
        pulumi.set(self, "noncompliance_reason_other", value)


if not MYPY:
    class PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergencyArgsDict(TypedDict):
        ticket_id: NotRequired[pulumi.Input[builtins.str]]
        """
        Identifies the ticket that describes the need for the activation
        """
elif False:
    PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergencyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergencyArgs:
    def __init__(__self__, *,
                 ticket_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] ticket_id: Identifies the ticket that describes the need for the activation
        """
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifies the ticket that describes the need for the activation
        """
        return pulumi.get(self, "ticket_id")

    @ticket_id.setter
    def ticket_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ticket_id", value)


if not MYPY:
    class PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgsDict(TypedDict):
        ticket_id: NotRequired[pulumi.Input[builtins.str]]
        """
        Identifies the ticket that describes the need for the activation
        """
elif False:
    PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs:
    def __init__(__self__, *,
                 ticket_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] ticket_id: Identifies the ticket that describes the need for the activation
        """
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifies the ticket that describes the need for the activation
        """
        return pulumi.get(self, "ticket_id")

    @ticket_id.setter
    def ticket_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ticket_id", value)


if not MYPY:
    class PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoneArgsDict(TypedDict):
        customer_email: NotRequired[pulumi.Input[builtins.str]]
        """
        Identifies the customer
        """
        peer_reviewed_by: NotRequired[pulumi.Input[builtins.str]]
        """
        Identifies person who has independently approved the activation request
        """
        ticket_id: NotRequired[pulumi.Input[builtins.str]]
        """
        Identifies the ticket that describes the need for the activation
        """
        unit_tested: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether the metadata to activate has been fully tested
        """
elif False:
    PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoneArgs:
    def __init__(__self__, *,
                 customer_email: Optional[pulumi.Input[builtins.str]] = None,
                 peer_reviewed_by: Optional[pulumi.Input[builtins.str]] = None,
                 ticket_id: Optional[pulumi.Input[builtins.str]] = None,
                 unit_tested: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] customer_email: Identifies the customer
        :param pulumi.Input[builtins.str] peer_reviewed_by: Identifies person who has independently approved the activation request
        :param pulumi.Input[builtins.str] ticket_id: Identifies the ticket that describes the need for the activation
        :param pulumi.Input[builtins.bool] unit_tested: Whether the metadata to activate has been fully tested
        """
        if customer_email is not None:
            pulumi.set(__self__, "customer_email", customer_email)
        if peer_reviewed_by is not None:
            pulumi.set(__self__, "peer_reviewed_by", peer_reviewed_by)
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)
        if unit_tested is not None:
            pulumi.set(__self__, "unit_tested", unit_tested)

    @property
    @pulumi.getter(name="customerEmail")
    def customer_email(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifies the customer
        """
        return pulumi.get(self, "customer_email")

    @customer_email.setter
    def customer_email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "customer_email", value)

    @property
    @pulumi.getter(name="peerReviewedBy")
    def peer_reviewed_by(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifies person who has independently approved the activation request
        """
        return pulumi.get(self, "peer_reviewed_by")

    @peer_reviewed_by.setter
    def peer_reviewed_by(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "peer_reviewed_by", value)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifies the ticket that describes the need for the activation
        """
        return pulumi.get(self, "ticket_id")

    @ticket_id.setter
    def ticket_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ticket_id", value)

    @property
    @pulumi.getter(name="unitTested")
    def unit_tested(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether the metadata to activate has been fully tested
        """
        return pulumi.get(self, "unit_tested")

    @unit_tested.setter
    def unit_tested(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "unit_tested", value)


if not MYPY:
    class PropertyIncludeActivationComplianceRecordNoncomplianceReasonOtherArgsDict(TypedDict):
        other_noncompliance_reason: NotRequired[pulumi.Input[builtins.str]]
        """
        Describes the reason why the activation must occur immediately, out of compliance with the standard procedure
        """
        ticket_id: NotRequired[pulumi.Input[builtins.str]]
        """
        Identifies the ticket that describes the need for the activation
        """
elif False:
    PropertyIncludeActivationComplianceRecordNoncomplianceReasonOtherArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyIncludeActivationComplianceRecordNoncomplianceReasonOtherArgs:
    def __init__(__self__, *,
                 other_noncompliance_reason: Optional[pulumi.Input[builtins.str]] = None,
                 ticket_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] other_noncompliance_reason: Describes the reason why the activation must occur immediately, out of compliance with the standard procedure
        :param pulumi.Input[builtins.str] ticket_id: Identifies the ticket that describes the need for the activation
        """
        if other_noncompliance_reason is not None:
            pulumi.set(__self__, "other_noncompliance_reason", other_noncompliance_reason)
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="otherNoncomplianceReason")
    def other_noncompliance_reason(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Describes the reason why the activation must occur immediately, out of compliance with the standard procedure
        """
        return pulumi.get(self, "other_noncompliance_reason")

    @other_noncompliance_reason.setter
    def other_noncompliance_reason(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "other_noncompliance_reason", value)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifies the ticket that describes the need for the activation
        """
        return pulumi.get(self, "ticket_id")

    @ticket_id.setter
    def ticket_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ticket_id", value)


if not MYPY:
    class PropertyIncludeActivationTimeoutsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PropertyIncludeActivationTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyIncludeActivationTimeoutsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[builtins.str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default", value)


if not MYPY:
    class PropertyRuleErrorArgsDict(TypedDict):
        behavior_name: NotRequired[pulumi.Input[builtins.str]]
        detail: NotRequired[pulumi.Input[builtins.str]]
        error_location: NotRequired[pulumi.Input[builtins.str]]
        instance: NotRequired[pulumi.Input[builtins.str]]
        status_code: NotRequired[pulumi.Input[builtins.int]]
        title: NotRequired[pulumi.Input[builtins.str]]
        type: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PropertyRuleErrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyRuleErrorArgs:
    def __init__(__self__, *,
                 behavior_name: Optional[pulumi.Input[builtins.str]] = None,
                 detail: Optional[pulumi.Input[builtins.str]] = None,
                 error_location: Optional[pulumi.Input[builtins.str]] = None,
                 instance: Optional[pulumi.Input[builtins.str]] = None,
                 status_code: Optional[pulumi.Input[builtins.int]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        if behavior_name is not None:
            pulumi.set(__self__, "behavior_name", behavior_name)
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if error_location is not None:
            pulumi.set(__self__, "error_location", error_location)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="behaviorName")
    def behavior_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "behavior_name")

    @behavior_name.setter
    def behavior_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "behavior_name", value)

    @property
    @pulumi.getter
    def detail(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "detail")

    @detail.setter
    def detail(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "detail", value)

    @property
    @pulumi.getter(name="errorLocation")
    def error_location(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "error_location")

    @error_location.setter
    def error_location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "error_location", value)

    @property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class PropertyRuleWarningArgsDict(TypedDict):
        behavior_name: NotRequired[pulumi.Input[builtins.str]]
        detail: NotRequired[pulumi.Input[builtins.str]]
        error_location: NotRequired[pulumi.Input[builtins.str]]
        instance: NotRequired[pulumi.Input[builtins.str]]
        status_code: NotRequired[pulumi.Input[builtins.int]]
        title: NotRequired[pulumi.Input[builtins.str]]
        type: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PropertyRuleWarningArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PropertyRuleWarningArgs:
    def __init__(__self__, *,
                 behavior_name: Optional[pulumi.Input[builtins.str]] = None,
                 detail: Optional[pulumi.Input[builtins.str]] = None,
                 error_location: Optional[pulumi.Input[builtins.str]] = None,
                 instance: Optional[pulumi.Input[builtins.str]] = None,
                 status_code: Optional[pulumi.Input[builtins.int]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        if behavior_name is not None:
            pulumi.set(__self__, "behavior_name", behavior_name)
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if error_location is not None:
            pulumi.set(__self__, "error_location", error_location)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="behaviorName")
    def behavior_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "behavior_name")

    @behavior_name.setter
    def behavior_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "behavior_name", value)

    @property
    @pulumi.getter
    def detail(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "detail")

    @detail.setter
    def detail(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "detail", value)

    @property
    @pulumi.getter(name="errorLocation")
    def error_location(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "error_location")

    @error_location.setter
    def error_location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "error_location", value)

    @property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ProviderConfigArgsDict(TypedDict):
        access_token: pulumi.Input[builtins.str]
        client_secret: pulumi.Input[builtins.str]
        client_token: pulumi.Input[builtins.str]
        host: pulumi.Input[builtins.str]
        account_key: NotRequired[pulumi.Input[builtins.str]]
        max_body: NotRequired[pulumi.Input[builtins.int]]
elif False:
    ProviderConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProviderConfigArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[builtins.str],
                 client_secret: pulumi.Input[builtins.str],
                 client_token: pulumi.Input[builtins.str],
                 host: pulumi.Input[builtins.str],
                 account_key: Optional[pulumi.Input[builtins.str]] = None,
                 max_body: Optional[pulumi.Input[builtins.int]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "client_token", client_token)
        pulumi.set(__self__, "host", host)
        if account_key is not None:
            pulumi.set(__self__, "account_key", account_key)
        if max_body is not None:
            pulumi.set(__self__, "max_body", max_body)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "client_token")

    @client_token.setter
    def client_token(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "client_token", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="accountKey")
    def account_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "account_key")

    @account_key.setter
    def account_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "account_key", value)

    @property
    @pulumi.getter(name="maxBody")
    def max_body(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "max_body")

    @max_body.setter
    def max_body(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_body", value)


if not MYPY:
    class GetCloudletsApiPrioritizationMatchRuleMatchRuleArgsDict(TypedDict):
        pass_through_percent: builtins.float
        """
        The range 0.0: 99.0 specifies the percentage of requests that pass through to the origin. The value of 100 means the request always passes through to the origin. A value of -1 means send everyone to the waiting room.
        """
        type: builtins.str
        """
        The type of Cloudlet the rule is for
        """
        disabled: NotRequired[builtins.bool]
        """
        If set to true, disables a rule so it is not evaluated against incoming requests.
        """
        end: NotRequired[builtins.int]
        """
        The end time for this match (in seconds since the epoch)
        """
        match_url: NotRequired[builtins.str]
        """
        If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        """
        matches: NotRequired[Sequence['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchArgsDict']]
        """
        Defines a set of match objects
        """
        name: NotRequired[builtins.str]
        """
        The name of the rule
        """
        start: NotRequired[builtins.int]
        """
        The start time for this match (in seconds since the epoch)
        """
elif False:
    GetCloudletsApiPrioritizationMatchRuleMatchRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsApiPrioritizationMatchRuleMatchRuleArgs:
    def __init__(__self__, *,
                 pass_through_percent: builtins.float,
                 type: builtins.str,
                 disabled: Optional[builtins.bool] = None,
                 end: Optional[builtins.int] = None,
                 match_url: Optional[builtins.str] = None,
                 matches: Optional[Sequence['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchArgs']] = None,
                 name: Optional[builtins.str] = None,
                 start: Optional[builtins.int] = None):
        """
        :param builtins.float pass_through_percent: The range 0.0: 99.0 specifies the percentage of requests that pass through to the origin. The value of 100 means the request always passes through to the origin. A value of -1 means send everyone to the waiting room.
        :param builtins.str type: The type of Cloudlet the rule is for
        :param builtins.bool disabled: If set to true, disables a rule so it is not evaluated against incoming requests.
        :param builtins.int end: The end time for this match (in seconds since the epoch)
        :param builtins.str match_url: If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        :param Sequence['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchArgs'] matches: Defines a set of match objects
        :param builtins.str name: The name of the rule
        :param builtins.int start: The start time for this match (in seconds since the epoch)
        """
        pulumi.set(__self__, "pass_through_percent", pass_through_percent)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="passThroughPercent")
    def pass_through_percent(self) -> builtins.float:
        """
        The range 0.0: 99.0 specifies the percentage of requests that pass through to the origin. The value of 100 means the request always passes through to the origin. A value of -1 means send everyone to the waiting room.
        """
        return pulumi.get(self, "pass_through_percent")

    @pass_through_percent.setter
    def pass_through_percent(self, value: builtins.float):
        pulumi.set(self, "pass_through_percent", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of Cloudlet the rule is for
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[builtins.bool]:
        """
        If set to true, disables a rule so it is not evaluated against incoming requests.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[builtins.bool]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[builtins.int]:
        """
        The end time for this match (in seconds since the epoch)
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[builtins.int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[builtins.str]:
        """
        If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        """
        return pulumi.get(self, "match_url")

    @match_url.setter
    def match_url(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_url", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchArgs']]:
        """
        Defines a set of match objects
        """
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[Sequence['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchArgs']]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[builtins.int]:
        """
        The start time for this match (in seconds since the epoch)
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[builtins.int]):
        pulumi.set(self, "start", value)


if not MYPY:
    class GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchArgsDict(TypedDict):
        case_sensitive: NotRequired[builtins.bool]
        """
        If true, the match is case sensitive
        """
        check_ips: NotRequired[builtins.str]
        """
        For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        """
        match_operator: NotRequired[builtins.str]
        """
        Valid entries for this property: contains, exists, and equals
        """
        match_type: NotRequired[builtins.str]
        """
        The type of match used
        """
        match_value: NotRequired[builtins.str]
        """
        Depends on the matchType
        """
        negate: NotRequired[builtins.bool]
        """
        If true, negates the match
        """
        object_match_values: NotRequired[Sequence['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgsDict']]
        """
        An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
elif False:
    GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[builtins.bool] = None,
                 check_ips: Optional[builtins.str] = None,
                 match_operator: Optional[builtins.str] = None,
                 match_type: Optional[builtins.str] = None,
                 match_value: Optional[builtins.str] = None,
                 negate: Optional[builtins.bool] = None,
                 object_match_values: Optional[Sequence['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs']] = None):
        """
        :param builtins.bool case_sensitive: If true, the match is case sensitive
        :param builtins.str check_ips: For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        :param builtins.str match_operator: Valid entries for this property: contains, exists, and equals
        :param builtins.str match_type: The type of match used
        :param builtins.str match_value: Depends on the matchType
        :param builtins.bool negate: If true, negates the match
        :param Sequence['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs'] object_match_values: An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[builtins.bool]:
        """
        If true, the match is case sensitive
        """
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[builtins.str]:
        """
        For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        """
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[builtins.str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[builtins.str]:
        """
        Valid entries for this property: contains, exists, and equals
        """
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[builtins.str]:
        """
        The type of match used
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[builtins.str]:
        """
        Depends on the matchType
        """
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[builtins.bool]:
        """
        If true, negates the match
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[builtins.bool]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs']]:
        """
        An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
        return pulumi.get(self, "object_match_values")

    @object_match_values.setter
    def object_match_values(self, value: Optional[Sequence['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs']]):
        pulumi.set(self, "object_match_values", value)


if not MYPY:
    class GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgsDict(TypedDict):
        type: builtins.str
        """
        The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        """
        name: NotRequired[builtins.str]
        """
        If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        """
        name_case_sensitive: NotRequired[builtins.bool]
        """
        Set to true if the entry for the name property should be evaluated based on case sensitivity
        """
        name_has_wildcard: NotRequired[builtins.bool]
        """
        Set to true if the entry for the name property includes wildcards
        """
        options: NotRequired['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict']
        """
        If using the object type, use this set to list the values to match on (use only with the object type)
        """
        values: NotRequired[Sequence[builtins.str]]
        """
        The value attributes in the incoming request to match on (use only with simple type)
        """
elif False:
    GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs:
    def __init__(__self__, *,
                 type: builtins.str,
                 name: Optional[builtins.str] = None,
                 name_case_sensitive: Optional[builtins.bool] = None,
                 name_has_wildcard: Optional[builtins.bool] = None,
                 options: Optional['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs'] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str type: The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        :param builtins.str name: If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        :param builtins.bool name_case_sensitive: Set to true if the entry for the name property should be evaluated based on case sensitivity
        :param builtins.bool name_has_wildcard: Set to true if the entry for the name property includes wildcards
        :param 'GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs' options: If using the object type, use this set to list the values to match on (use only with the object type)
        :param Sequence[builtins.str] values: The value attributes in the incoming request to match on (use only with simple type)
        """
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[builtins.bool]:
        """
        Set to true if the entry for the name property should be evaluated based on case sensitivity
        """
        return pulumi.get(self, "name_case_sensitive")

    @name_case_sensitive.setter
    def name_case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "name_case_sensitive", value)

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[builtins.bool]:
        """
        Set to true if the entry for the name property includes wildcards
        """
        return pulumi.get(self, "name_has_wildcard")

    @name_has_wildcard.setter
    def name_has_wildcard(self, value: Optional[builtins.bool]):
        pulumi.set(self, "name_has_wildcard", value)

    @property
    @pulumi.getter
    def options(self) -> Optional['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']:
        """
        If using the object type, use this set to list the values to match on (use only with the object type)
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        The value attributes in the incoming request to match on (use only with simple type)
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict(TypedDict):
        value_case_sensitive: NotRequired[builtins.bool]
        """
        Set to true if the entries for the value property should be evaluated based on case sensitivity
        """
        value_escaped: NotRequired[builtins.bool]
        """
        Set to true if provided value should be compared in escaped form
        """
        value_has_wildcard: NotRequired[builtins.bool]
        """
        Set to true if the entries for the value property include wildcards
        """
        values: NotRequired[Sequence[builtins.str]]
        """
        The value attributes in the incoming request to match on
        """
elif False:
    GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs:
    def __init__(__self__, *,
                 value_case_sensitive: Optional[builtins.bool] = None,
                 value_escaped: Optional[builtins.bool] = None,
                 value_has_wildcard: Optional[builtins.bool] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.bool value_case_sensitive: Set to true if the entries for the value property should be evaluated based on case sensitivity
        :param builtins.bool value_escaped: Set to true if provided value should be compared in escaped form
        :param builtins.bool value_has_wildcard: Set to true if the entries for the value property include wildcards
        :param Sequence[builtins.str] values: The value attributes in the incoming request to match on
        """
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[builtins.bool]:
        """
        Set to true if the entries for the value property should be evaluated based on case sensitivity
        """
        return pulumi.get(self, "value_case_sensitive")

    @value_case_sensitive.setter
    def value_case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_case_sensitive", value)

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[builtins.bool]:
        """
        Set to true if provided value should be compared in escaped form
        """
        return pulumi.get(self, "value_escaped")

    @value_escaped.setter
    def value_escaped(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_escaped", value)

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[builtins.bool]:
        """
        Set to true if the entries for the value property include wildcards
        """
        return pulumi.get(self, "value_has_wildcard")

    @value_has_wildcard.setter
    def value_has_wildcard(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_has_wildcard", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        The value attributes in the incoming request to match on
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleArgsDict(TypedDict):
        forward_settings: Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingArgsDict']
        """
        This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
        """
        type: builtins.str
        """
        The type of Cloudlet the rule is for
        """
        disabled: NotRequired[builtins.bool]
        """
        If set to true, disables a rule so it is not evaluated against incoming requests.
        """
        end: NotRequired[builtins.int]
        """
        The end time for this match (in seconds since the epoch)
        """
        id: NotRequired[builtins.int]
        """
        Akamai internal use only
        """
        match_url: NotRequired[builtins.str]
        """
        If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        """
        matches: NotRequired[Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchArgsDict']]
        """
        Defines a set of match objects
        """
        matches_always: NotRequired[builtins.bool]
        """
        Is used in some cloudlets to support default rules (rule that is always matched)
        """
        name: NotRequired[builtins.str]
        """
        The name of the rule
        """
        start: NotRequired[builtins.int]
        """
        The start time for this match (in seconds since the epoch)
        """
elif False:
    GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleArgs:
    def __init__(__self__, *,
                 forward_settings: Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingArgs'],
                 type: builtins.str,
                 disabled: Optional[builtins.bool] = None,
                 end: Optional[builtins.int] = None,
                 id: Optional[builtins.int] = None,
                 match_url: Optional[builtins.str] = None,
                 matches: Optional[Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchArgs']] = None,
                 matches_always: Optional[builtins.bool] = None,
                 name: Optional[builtins.str] = None,
                 start: Optional[builtins.int] = None):
        """
        :param Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingArgs'] forward_settings: This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
        :param builtins.str type: The type of Cloudlet the rule is for
        :param builtins.bool disabled: If set to true, disables a rule so it is not evaluated against incoming requests.
        :param builtins.int end: The end time for this match (in seconds since the epoch)
        :param builtins.int id: Akamai internal use only
        :param builtins.str match_url: If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        :param Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchArgs'] matches: Defines a set of match objects
        :param builtins.bool matches_always: Is used in some cloudlets to support default rules (rule that is always matched)
        :param builtins.str name: The name of the rule
        :param builtins.int start: The start time for this match (in seconds since the epoch)
        """
        pulumi.set(__self__, "forward_settings", forward_settings)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if matches_always is not None:
            pulumi.set(__self__, "matches_always", matches_always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="forwardSettings")
    def forward_settings(self) -> Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingArgs']:
        """
        This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
        """
        return pulumi.get(self, "forward_settings")

    @forward_settings.setter
    def forward_settings(self, value: Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingArgs']):
        pulumi.set(self, "forward_settings", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of Cloudlet the rule is for
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[builtins.bool]:
        """
        If set to true, disables a rule so it is not evaluated against incoming requests.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[builtins.bool]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[builtins.int]:
        """
        The end time for this match (in seconds since the epoch)
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[builtins.int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        Akamai internal use only
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[builtins.int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[builtins.str]:
        """
        If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        """
        return pulumi.get(self, "match_url")

    @match_url.setter
    def match_url(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_url", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchArgs']]:
        """
        Defines a set of match objects
        """
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchArgs']]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter(name="matchesAlways")
    def matches_always(self) -> Optional[builtins.bool]:
        """
        Is used in some cloudlets to support default rules (rule that is always matched)
        """
        return pulumi.get(self, "matches_always")

    @matches_always.setter
    def matches_always(self, value: Optional[builtins.bool]):
        pulumi.set(self, "matches_always", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[builtins.int]:
        """
        The start time for this match (in seconds since the epoch)
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[builtins.int]):
        pulumi.set(self, "start", value)


if not MYPY:
    class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingArgsDict(TypedDict):
        origin_id: builtins.str
        """
        The ID of the Conditional Origin requests are forwarded to
        """
elif False:
    GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingArgs:
    def __init__(__self__, *,
                 origin_id: builtins.str):
        """
        :param builtins.str origin_id: The ID of the Conditional Origin requests are forwarded to
        """
        pulumi.set(__self__, "origin_id", origin_id)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> builtins.str:
        """
        The ID of the Conditional Origin requests are forwarded to
        """
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: builtins.str):
        pulumi.set(self, "origin_id", value)


if not MYPY:
    class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchArgsDict(TypedDict):
        case_sensitive: NotRequired[builtins.bool]
        """
        If true, the match is case sensitive
        """
        check_ips: NotRequired[builtins.str]
        """
        For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        """
        match_operator: NotRequired[builtins.str]
        """
        Valid entries for this property: contains, exists, and equals
        """
        match_type: NotRequired[builtins.str]
        """
        The type of match used
        """
        match_value: NotRequired[builtins.str]
        """
        Depends on the matchType
        """
        negate: NotRequired[builtins.bool]
        """
        If true, negates the match
        """
        object_match_values: NotRequired[Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueArgsDict']]
        """
        An object used when a rule either includes more complex match criteria, like multiple value attributes, or a range match
        """
elif False:
    GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[builtins.bool] = None,
                 check_ips: Optional[builtins.str] = None,
                 match_operator: Optional[builtins.str] = None,
                 match_type: Optional[builtins.str] = None,
                 match_value: Optional[builtins.str] = None,
                 negate: Optional[builtins.bool] = None,
                 object_match_values: Optional[Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueArgs']] = None):
        """
        :param builtins.bool case_sensitive: If true, the match is case sensitive
        :param builtins.str check_ips: For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        :param builtins.str match_operator: Valid entries for this property: contains, exists, and equals
        :param builtins.str match_type: The type of match used
        :param builtins.str match_value: Depends on the matchType
        :param builtins.bool negate: If true, negates the match
        :param Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueArgs'] object_match_values: An object used when a rule either includes more complex match criteria, like multiple value attributes, or a range match
        """
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[builtins.bool]:
        """
        If true, the match is case sensitive
        """
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[builtins.str]:
        """
        For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        """
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[builtins.str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[builtins.str]:
        """
        Valid entries for this property: contains, exists, and equals
        """
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[builtins.str]:
        """
        The type of match used
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[builtins.str]:
        """
        Depends on the matchType
        """
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[builtins.bool]:
        """
        If true, negates the match
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[builtins.bool]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueArgs']]:
        """
        An object used when a rule either includes more complex match criteria, like multiple value attributes, or a range match
        """
        return pulumi.get(self, "object_match_values")

    @object_match_values.setter
    def object_match_values(self, value: Optional[Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueArgs']]):
        pulumi.set(self, "object_match_values", value)


if not MYPY:
    class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueArgsDict(TypedDict):
        type: builtins.str
        """
        The array type, which can be one of the following: object, range, or simple. Use the simple option when adding only an array of string-based values
        """
        name: NotRequired[builtins.str]
        """
        If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        """
        name_case_sensitive: NotRequired[builtins.bool]
        """
        Set to true if the entry for the name property should be evaluated based on case sensitivity
        """
        name_has_wildcard: NotRequired[builtins.bool]
        """
        Set to true if the entry for the name property includes wildcards
        """
        options: NotRequired['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict']
        """
        If using the object type, use this set to list the values to match on (use only with the object type)
        """
        values: NotRequired[Sequence[builtins.str]]
        """
        The value attributes in the incoming request to match on (use only with simple or range type)
        """
elif False:
    GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueArgs:
    def __init__(__self__, *,
                 type: builtins.str,
                 name: Optional[builtins.str] = None,
                 name_case_sensitive: Optional[builtins.bool] = None,
                 name_has_wildcard: Optional[builtins.bool] = None,
                 options: Optional['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs'] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str type: The array type, which can be one of the following: object, range, or simple. Use the simple option when adding only an array of string-based values
        :param builtins.str name: If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        :param builtins.bool name_case_sensitive: Set to true if the entry for the name property should be evaluated based on case sensitivity
        :param builtins.bool name_has_wildcard: Set to true if the entry for the name property includes wildcards
        :param 'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs' options: If using the object type, use this set to list the values to match on (use only with the object type)
        :param Sequence[builtins.str] values: The value attributes in the incoming request to match on (use only with simple or range type)
        """
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The array type, which can be one of the following: object, range, or simple. Use the simple option when adding only an array of string-based values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[builtins.bool]:
        """
        Set to true if the entry for the name property should be evaluated based on case sensitivity
        """
        return pulumi.get(self, "name_case_sensitive")

    @name_case_sensitive.setter
    def name_case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "name_case_sensitive", value)

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[builtins.bool]:
        """
        Set to true if the entry for the name property includes wildcards
        """
        return pulumi.get(self, "name_has_wildcard")

    @name_has_wildcard.setter
    def name_has_wildcard(self, value: Optional[builtins.bool]):
        pulumi.set(self, "name_has_wildcard", value)

    @property
    @pulumi.getter
    def options(self) -> Optional['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']:
        """
        If using the object type, use this set to list the values to match on (use only with the object type)
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        The value attributes in the incoming request to match on (use only with simple or range type)
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict(TypedDict):
        value_case_sensitive: NotRequired[builtins.bool]
        """
        Set to true if the entries for the value property should be evaluated based on case sensitivity
        """
        value_escaped: NotRequired[builtins.bool]
        """
        Set to true if provided value should be compared in escaped form
        """
        value_has_wildcard: NotRequired[builtins.bool]
        """
        Set to true if the entries for the value property include wildcards
        """
        values: NotRequired[Sequence[builtins.str]]
        """
        The value attributes in the incoming request to match on
        """
elif False:
    GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs:
    def __init__(__self__, *,
                 value_case_sensitive: Optional[builtins.bool] = None,
                 value_escaped: Optional[builtins.bool] = None,
                 value_has_wildcard: Optional[builtins.bool] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.bool value_case_sensitive: Set to true if the entries for the value property should be evaluated based on case sensitivity
        :param builtins.bool value_escaped: Set to true if provided value should be compared in escaped form
        :param builtins.bool value_has_wildcard: Set to true if the entries for the value property include wildcards
        :param Sequence[builtins.str] values: The value attributes in the incoming request to match on
        """
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[builtins.bool]:
        """
        Set to true if the entries for the value property should be evaluated based on case sensitivity
        """
        return pulumi.get(self, "value_case_sensitive")

    @value_case_sensitive.setter
    def value_case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_case_sensitive", value)

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[builtins.bool]:
        """
        Set to true if provided value should be compared in escaped form
        """
        return pulumi.get(self, "value_escaped")

    @value_escaped.setter
    def value_escaped(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_escaped", value)

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[builtins.bool]:
        """
        Set to true if the entries for the value property include wildcards
        """
        return pulumi.get(self, "value_has_wildcard")

    @value_has_wildcard.setter
    def value_has_wildcard(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_has_wildcard", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        The value attributes in the incoming request to match on
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetCloudletsAudienceSegmentationMatchRuleMatchRuleArgsDict(TypedDict):
        forward_settings: 'GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsArgsDict'
        """
        This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
        """
        type: builtins.str
        """
        The type of Cloudlet the rule is for
        """
        disabled: NotRequired[builtins.bool]
        """
        If set to true, disables a rule so it is not evaluated against incoming requests.
        """
        end: NotRequired[builtins.int]
        """
        The end time for this match (in seconds since the epoch)
        """
        match_url: NotRequired[builtins.str]
        """
        If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        """
        matches: NotRequired[Sequence['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchArgsDict']]
        """
        Defines a set of match objects
        """
        name: NotRequired[builtins.str]
        """
        The name of the rule
        """
        start: NotRequired[builtins.int]
        """
        The start time for this match (in seconds since the epoch)
        """
elif False:
    GetCloudletsAudienceSegmentationMatchRuleMatchRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleArgs:
    def __init__(__self__, *,
                 forward_settings: 'GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsArgs',
                 type: builtins.str,
                 disabled: Optional[builtins.bool] = None,
                 end: Optional[builtins.int] = None,
                 match_url: Optional[builtins.str] = None,
                 matches: Optional[Sequence['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchArgs']] = None,
                 name: Optional[builtins.str] = None,
                 start: Optional[builtins.int] = None):
        """
        :param 'GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsArgs' forward_settings: This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
        :param builtins.str type: The type of Cloudlet the rule is for
        :param builtins.bool disabled: If set to true, disables a rule so it is not evaluated against incoming requests.
        :param builtins.int end: The end time for this match (in seconds since the epoch)
        :param builtins.str match_url: If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        :param Sequence['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchArgs'] matches: Defines a set of match objects
        :param builtins.str name: The name of the rule
        :param builtins.int start: The start time for this match (in seconds since the epoch)
        """
        pulumi.set(__self__, "forward_settings", forward_settings)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="forwardSettings")
    def forward_settings(self) -> 'GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsArgs':
        """
        This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
        """
        return pulumi.get(self, "forward_settings")

    @forward_settings.setter
    def forward_settings(self, value: 'GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsArgs'):
        pulumi.set(self, "forward_settings", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of Cloudlet the rule is for
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[builtins.bool]:
        """
        If set to true, disables a rule so it is not evaluated against incoming requests.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[builtins.bool]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[builtins.int]:
        """
        The end time for this match (in seconds since the epoch)
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[builtins.int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[builtins.str]:
        """
        If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        """
        return pulumi.get(self, "match_url")

    @match_url.setter
    def match_url(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_url", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchArgs']]:
        """
        Defines a set of match objects
        """
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[Sequence['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchArgs']]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[builtins.int]:
        """
        The start time for this match (in seconds since the epoch)
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[builtins.int]):
        pulumi.set(self, "start", value)


if not MYPY:
    class GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsArgsDict(TypedDict):
        origin_id: NotRequired[builtins.str]
        """
        The ID of the Conditional Origin requests are forwarded to
        """
        path_and_qs: NotRequired[builtins.str]
        """
        If a value is provided and match conditions are met, this property defines the path/resource/query string to rewrite URL for the incoming request.
        """
        use_incoming_query_string: NotRequired[builtins.bool]
        """
        If set to true, the Cloudlet includes the query string from the request in the rewritten or forwarded URL.
        """
elif False:
    GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsArgs:
    def __init__(__self__, *,
                 origin_id: Optional[builtins.str] = None,
                 path_and_qs: Optional[builtins.str] = None,
                 use_incoming_query_string: Optional[builtins.bool] = None):
        """
        :param builtins.str origin_id: The ID of the Conditional Origin requests are forwarded to
        :param builtins.str path_and_qs: If a value is provided and match conditions are met, this property defines the path/resource/query string to rewrite URL for the incoming request.
        :param builtins.bool use_incoming_query_string: If set to true, the Cloudlet includes the query string from the request in the rewritten or forwarded URL.
        """
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if path_and_qs is not None:
            pulumi.set(__self__, "path_and_qs", path_and_qs)
        if use_incoming_query_string is not None:
            pulumi.set(__self__, "use_incoming_query_string", use_incoming_query_string)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[builtins.str]:
        """
        The ID of the Conditional Origin requests are forwarded to
        """
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: Optional[builtins.str]):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="pathAndQs")
    def path_and_qs(self) -> Optional[builtins.str]:
        """
        If a value is provided and match conditions are met, this property defines the path/resource/query string to rewrite URL for the incoming request.
        """
        return pulumi.get(self, "path_and_qs")

    @path_and_qs.setter
    def path_and_qs(self, value: Optional[builtins.str]):
        pulumi.set(self, "path_and_qs", value)

    @property
    @pulumi.getter(name="useIncomingQueryString")
    def use_incoming_query_string(self) -> Optional[builtins.bool]:
        """
        If set to true, the Cloudlet includes the query string from the request in the rewritten or forwarded URL.
        """
        return pulumi.get(self, "use_incoming_query_string")

    @use_incoming_query_string.setter
    def use_incoming_query_string(self, value: Optional[builtins.bool]):
        pulumi.set(self, "use_incoming_query_string", value)


if not MYPY:
    class GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchArgsDict(TypedDict):
        case_sensitive: NotRequired[builtins.bool]
        """
        If true, the match is case sensitive
        """
        check_ips: NotRequired[builtins.str]
        """
        For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        """
        match_operator: NotRequired[builtins.str]
        """
        Valid entries for this property: contains, exists, and equals
        """
        match_type: NotRequired[builtins.str]
        """
        The type of match used
        """
        match_value: NotRequired[builtins.str]
        """
        Depends on the matchType
        """
        negate: NotRequired[builtins.bool]
        """
        If true, negates the match
        """
        object_match_values: NotRequired[Sequence['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueArgsDict']]
        """
        An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
elif False:
    GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[builtins.bool] = None,
                 check_ips: Optional[builtins.str] = None,
                 match_operator: Optional[builtins.str] = None,
                 match_type: Optional[builtins.str] = None,
                 match_value: Optional[builtins.str] = None,
                 negate: Optional[builtins.bool] = None,
                 object_match_values: Optional[Sequence['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueArgs']] = None):
        """
        :param builtins.bool case_sensitive: If true, the match is case sensitive
        :param builtins.str check_ips: For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        :param builtins.str match_operator: Valid entries for this property: contains, exists, and equals
        :param builtins.str match_type: The type of match used
        :param builtins.str match_value: Depends on the matchType
        :param builtins.bool negate: If true, negates the match
        :param Sequence['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueArgs'] object_match_values: An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[builtins.bool]:
        """
        If true, the match is case sensitive
        """
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[builtins.str]:
        """
        For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        """
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[builtins.str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[builtins.str]:
        """
        Valid entries for this property: contains, exists, and equals
        """
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[builtins.str]:
        """
        The type of match used
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[builtins.str]:
        """
        Depends on the matchType
        """
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[builtins.bool]:
        """
        If true, negates the match
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[builtins.bool]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueArgs']]:
        """
        An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
        return pulumi.get(self, "object_match_values")

    @object_match_values.setter
    def object_match_values(self, value: Optional[Sequence['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueArgs']]):
        pulumi.set(self, "object_match_values", value)


if not MYPY:
    class GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueArgsDict(TypedDict):
        type: builtins.str
        """
        The array type, which can be one of the following: object or simple or range. Use the simple option when adding only an array of string-based values
        """
        name: NotRequired[builtins.str]
        """
        If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        """
        name_case_sensitive: NotRequired[builtins.bool]
        """
        Set to true if the entry for the name property should be evaluated based on case sensitivity
        """
        name_has_wildcard: NotRequired[builtins.bool]
        """
        Set to true if the entry for the name property includes wildcards
        """
        options: NotRequired['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict']
        """
        If using the object type, use this set to list the values to match on (use only with the object type)
        """
        values: NotRequired[Sequence[builtins.str]]
        """
        The value attributes in the incoming request to match on (use only with simple or range type)
        """
elif False:
    GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueArgs:
    def __init__(__self__, *,
                 type: builtins.str,
                 name: Optional[builtins.str] = None,
                 name_case_sensitive: Optional[builtins.bool] = None,
                 name_has_wildcard: Optional[builtins.bool] = None,
                 options: Optional['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs'] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str type: The array type, which can be one of the following: object or simple or range. Use the simple option when adding only an array of string-based values
        :param builtins.str name: If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        :param builtins.bool name_case_sensitive: Set to true if the entry for the name property should be evaluated based on case sensitivity
        :param builtins.bool name_has_wildcard: Set to true if the entry for the name property includes wildcards
        :param 'GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs' options: If using the object type, use this set to list the values to match on (use only with the object type)
        :param Sequence[builtins.str] values: The value attributes in the incoming request to match on (use only with simple or range type)
        """
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The array type, which can be one of the following: object or simple or range. Use the simple option when adding only an array of string-based values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[builtins.bool]:
        """
        Set to true if the entry for the name property should be evaluated based on case sensitivity
        """
        return pulumi.get(self, "name_case_sensitive")

    @name_case_sensitive.setter
    def name_case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "name_case_sensitive", value)

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[builtins.bool]:
        """
        Set to true if the entry for the name property includes wildcards
        """
        return pulumi.get(self, "name_has_wildcard")

    @name_has_wildcard.setter
    def name_has_wildcard(self, value: Optional[builtins.bool]):
        pulumi.set(self, "name_has_wildcard", value)

    @property
    @pulumi.getter
    def options(self) -> Optional['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']:
        """
        If using the object type, use this set to list the values to match on (use only with the object type)
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        The value attributes in the incoming request to match on (use only with simple or range type)
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict(TypedDict):
        value_case_sensitive: NotRequired[builtins.bool]
        """
        Set to true if the entries for the value property should be evaluated based on case sensitivity
        """
        value_escaped: NotRequired[builtins.bool]
        """
        Set to true if provided value should be compared in escaped form
        """
        value_has_wildcard: NotRequired[builtins.bool]
        """
        Set to true if the entries for the value property include wildcards
        """
        values: NotRequired[Sequence[builtins.str]]
        """
        The value attributes in the incoming request to match on
        """
elif False:
    GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs:
    def __init__(__self__, *,
                 value_case_sensitive: Optional[builtins.bool] = None,
                 value_escaped: Optional[builtins.bool] = None,
                 value_has_wildcard: Optional[builtins.bool] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.bool value_case_sensitive: Set to true if the entries for the value property should be evaluated based on case sensitivity
        :param builtins.bool value_escaped: Set to true if provided value should be compared in escaped form
        :param builtins.bool value_has_wildcard: Set to true if the entries for the value property include wildcards
        :param Sequence[builtins.str] values: The value attributes in the incoming request to match on
        """
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[builtins.bool]:
        """
        Set to true if the entries for the value property should be evaluated based on case sensitivity
        """
        return pulumi.get(self, "value_case_sensitive")

    @value_case_sensitive.setter
    def value_case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_case_sensitive", value)

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[builtins.bool]:
        """
        Set to true if provided value should be compared in escaped form
        """
        return pulumi.get(self, "value_escaped")

    @value_escaped.setter
    def value_escaped(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_escaped", value)

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[builtins.bool]:
        """
        Set to true if the entries for the value property include wildcards
        """
        return pulumi.get(self, "value_has_wildcard")

    @value_has_wildcard.setter
    def value_has_wildcard(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_has_wildcard", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        The value attributes in the incoming request to match on
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetCloudletsEdgeRedirectorMatchRuleMatchRuleArgsDict(TypedDict):
        redirect_url: builtins.str
        """
        The URL Edge Redirector redirects the request to. If using use_relative_url, you can enter a path for the value
        """
        status_code: builtins.int
        """
        The HTTP response status code (allowed values: 301, 302, 303, 307, 308)
        """
        type: builtins.str
        """
        The type of Cloudlet the rule is for
        """
        disabled: NotRequired[builtins.bool]
        """
        If set to true, disables a rule so it is not evaluated against incoming requests.
        """
        end: NotRequired[builtins.int]
        """
        The end time for this match (in seconds since the epoch)
        """
        match_url: NotRequired[builtins.str]
        """
        If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        """
        matches: NotRequired[Sequence['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchArgsDict']]
        """
        Defines a set of match objects
        """
        matches_always: NotRequired[builtins.bool]
        """
        Is used in some cloudlets to support default rules (rule that is always matched)
        """
        name: NotRequired[builtins.str]
        """
        The name of the rule
        """
        start: NotRequired[builtins.int]
        """
        The start time for this match (in seconds since the epoch)
        """
        use_incoming_query_string: NotRequired[builtins.bool]
        """
        If set to true, the Cloudlet includes the query string from the request in the rewritten or forwarded URL
        """
        use_relative_url: NotRequired[builtins.str]
        """
        If set to relative_url, takes the path entered for the redirectUrl and sets it in the response’s Location header. If set to copy_scheme_hostname, creates an absolute path by taking the protocol and hostname from the incoming request and combining them with path information entered for the redirectUrl. If this property is not included, or is set to none, then the redirect_url should be fully-qualified URL
        """
elif False:
    GetCloudletsEdgeRedirectorMatchRuleMatchRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsEdgeRedirectorMatchRuleMatchRuleArgs:
    def __init__(__self__, *,
                 redirect_url: builtins.str,
                 status_code: builtins.int,
                 type: builtins.str,
                 disabled: Optional[builtins.bool] = None,
                 end: Optional[builtins.int] = None,
                 match_url: Optional[builtins.str] = None,
                 matches: Optional[Sequence['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchArgs']] = None,
                 matches_always: Optional[builtins.bool] = None,
                 name: Optional[builtins.str] = None,
                 start: Optional[builtins.int] = None,
                 use_incoming_query_string: Optional[builtins.bool] = None,
                 use_relative_url: Optional[builtins.str] = None):
        """
        :param builtins.str redirect_url: The URL Edge Redirector redirects the request to. If using use_relative_url, you can enter a path for the value
        :param builtins.int status_code: The HTTP response status code (allowed values: 301, 302, 303, 307, 308)
        :param builtins.str type: The type of Cloudlet the rule is for
        :param builtins.bool disabled: If set to true, disables a rule so it is not evaluated against incoming requests.
        :param builtins.int end: The end time for this match (in seconds since the epoch)
        :param builtins.str match_url: If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        :param Sequence['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchArgs'] matches: Defines a set of match objects
        :param builtins.bool matches_always: Is used in some cloudlets to support default rules (rule that is always matched)
        :param builtins.str name: The name of the rule
        :param builtins.int start: The start time for this match (in seconds since the epoch)
        :param builtins.bool use_incoming_query_string: If set to true, the Cloudlet includes the query string from the request in the rewritten or forwarded URL
        :param builtins.str use_relative_url: If set to relative_url, takes the path entered for the redirectUrl and sets it in the response’s Location header. If set to copy_scheme_hostname, creates an absolute path by taking the protocol and hostname from the incoming request and combining them with path information entered for the redirectUrl. If this property is not included, or is set to none, then the redirect_url should be fully-qualified URL
        """
        pulumi.set(__self__, "redirect_url", redirect_url)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if matches_always is not None:
            pulumi.set(__self__, "matches_always", matches_always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)
        if use_incoming_query_string is not None:
            pulumi.set(__self__, "use_incoming_query_string", use_incoming_query_string)
        if use_relative_url is not None:
            pulumi.set(__self__, "use_relative_url", use_relative_url)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> builtins.str:
        """
        The URL Edge Redirector redirects the request to. If using use_relative_url, you can enter a path for the value
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: builtins.str):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> builtins.int:
        """
        The HTTP response status code (allowed values: 301, 302, 303, 307, 308)
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: builtins.int):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of Cloudlet the rule is for
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[builtins.bool]:
        """
        If set to true, disables a rule so it is not evaluated against incoming requests.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[builtins.bool]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[builtins.int]:
        """
        The end time for this match (in seconds since the epoch)
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[builtins.int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[builtins.str]:
        """
        If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        """
        return pulumi.get(self, "match_url")

    @match_url.setter
    def match_url(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_url", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchArgs']]:
        """
        Defines a set of match objects
        """
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[Sequence['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchArgs']]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter(name="matchesAlways")
    def matches_always(self) -> Optional[builtins.bool]:
        """
        Is used in some cloudlets to support default rules (rule that is always matched)
        """
        return pulumi.get(self, "matches_always")

    @matches_always.setter
    def matches_always(self, value: Optional[builtins.bool]):
        pulumi.set(self, "matches_always", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[builtins.int]:
        """
        The start time for this match (in seconds since the epoch)
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[builtins.int]):
        pulumi.set(self, "start", value)

    @property
    @pulumi.getter(name="useIncomingQueryString")
    def use_incoming_query_string(self) -> Optional[builtins.bool]:
        """
        If set to true, the Cloudlet includes the query string from the request in the rewritten or forwarded URL
        """
        return pulumi.get(self, "use_incoming_query_string")

    @use_incoming_query_string.setter
    def use_incoming_query_string(self, value: Optional[builtins.bool]):
        pulumi.set(self, "use_incoming_query_string", value)

    @property
    @pulumi.getter(name="useRelativeUrl")
    def use_relative_url(self) -> Optional[builtins.str]:
        """
        If set to relative_url, takes the path entered for the redirectUrl and sets it in the response’s Location header. If set to copy_scheme_hostname, creates an absolute path by taking the protocol and hostname from the incoming request and combining them with path information entered for the redirectUrl. If this property is not included, or is set to none, then the redirect_url should be fully-qualified URL
        """
        return pulumi.get(self, "use_relative_url")

    @use_relative_url.setter
    def use_relative_url(self, value: Optional[builtins.str]):
        pulumi.set(self, "use_relative_url", value)


if not MYPY:
    class GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchArgsDict(TypedDict):
        case_sensitive: NotRequired[builtins.bool]
        """
        If true, the match is case sensitive
        """
        check_ips: NotRequired[builtins.str]
        """
        For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        """
        match_operator: NotRequired[builtins.str]
        """
        Valid entries for this property: contains, exists, and equals
        """
        match_type: NotRequired[builtins.str]
        """
        The type of match used
        """
        match_value: NotRequired[builtins.str]
        """
        Depends on the matchType
        """
        negate: NotRequired[builtins.bool]
        """
        If true, negates the match
        """
        object_match_values: NotRequired[Sequence['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueArgsDict']]
        """
        An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
elif False:
    GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[builtins.bool] = None,
                 check_ips: Optional[builtins.str] = None,
                 match_operator: Optional[builtins.str] = None,
                 match_type: Optional[builtins.str] = None,
                 match_value: Optional[builtins.str] = None,
                 negate: Optional[builtins.bool] = None,
                 object_match_values: Optional[Sequence['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueArgs']] = None):
        """
        :param builtins.bool case_sensitive: If true, the match is case sensitive
        :param builtins.str check_ips: For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        :param builtins.str match_operator: Valid entries for this property: contains, exists, and equals
        :param builtins.str match_type: The type of match used
        :param builtins.str match_value: Depends on the matchType
        :param builtins.bool negate: If true, negates the match
        :param Sequence['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueArgs'] object_match_values: An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[builtins.bool]:
        """
        If true, the match is case sensitive
        """
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[builtins.str]:
        """
        For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        """
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[builtins.str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[builtins.str]:
        """
        Valid entries for this property: contains, exists, and equals
        """
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[builtins.str]:
        """
        The type of match used
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[builtins.str]:
        """
        Depends on the matchType
        """
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[builtins.bool]:
        """
        If true, negates the match
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[builtins.bool]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueArgs']]:
        """
        An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
        return pulumi.get(self, "object_match_values")

    @object_match_values.setter
    def object_match_values(self, value: Optional[Sequence['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueArgs']]):
        pulumi.set(self, "object_match_values", value)


if not MYPY:
    class GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueArgsDict(TypedDict):
        type: builtins.str
        """
        The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        """
        name: NotRequired[builtins.str]
        """
        If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        """
        name_case_sensitive: NotRequired[builtins.bool]
        """
        Set to true if the entry for the name property should be evaluated based on case sensitivity
        """
        name_has_wildcard: NotRequired[builtins.bool]
        """
        Set to true if the entry for the name property includes wildcards
        """
        options: NotRequired['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict']
        """
        If using the object type, use this set to list the values to match on (use only with the object type)
        """
        values: NotRequired[Sequence[builtins.str]]
        """
        The value attributes in the incoming request to match on (use only with simple type)
        """
elif False:
    GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueArgs:
    def __init__(__self__, *,
                 type: builtins.str,
                 name: Optional[builtins.str] = None,
                 name_case_sensitive: Optional[builtins.bool] = None,
                 name_has_wildcard: Optional[builtins.bool] = None,
                 options: Optional['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs'] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str type: The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        :param builtins.str name: If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        :param builtins.bool name_case_sensitive: Set to true if the entry for the name property should be evaluated based on case sensitivity
        :param builtins.bool name_has_wildcard: Set to true if the entry for the name property includes wildcards
        :param 'GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs' options: If using the object type, use this set to list the values to match on (use only with the object type)
        :param Sequence[builtins.str] values: The value attributes in the incoming request to match on (use only with simple type)
        """
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[builtins.bool]:
        """
        Set to true if the entry for the name property should be evaluated based on case sensitivity
        """
        return pulumi.get(self, "name_case_sensitive")

    @name_case_sensitive.setter
    def name_case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "name_case_sensitive", value)

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[builtins.bool]:
        """
        Set to true if the entry for the name property includes wildcards
        """
        return pulumi.get(self, "name_has_wildcard")

    @name_has_wildcard.setter
    def name_has_wildcard(self, value: Optional[builtins.bool]):
        pulumi.set(self, "name_has_wildcard", value)

    @property
    @pulumi.getter
    def options(self) -> Optional['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']:
        """
        If using the object type, use this set to list the values to match on (use only with the object type)
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        The value attributes in the incoming request to match on (use only with simple type)
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict(TypedDict):
        value_case_sensitive: NotRequired[builtins.bool]
        """
        Set to true if the entries for the value property should be evaluated based on case sensitivity
        """
        value_escaped: NotRequired[builtins.bool]
        """
        Set to true if provided value should be compared in escaped form
        """
        value_has_wildcard: NotRequired[builtins.bool]
        """
        Set to true if the entries for the value property include wildcards
        """
        values: NotRequired[Sequence[builtins.str]]
        """
        The value attributes in the incoming request to match on
        """
elif False:
    GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs:
    def __init__(__self__, *,
                 value_case_sensitive: Optional[builtins.bool] = None,
                 value_escaped: Optional[builtins.bool] = None,
                 value_has_wildcard: Optional[builtins.bool] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.bool value_case_sensitive: Set to true if the entries for the value property should be evaluated based on case sensitivity
        :param builtins.bool value_escaped: Set to true if provided value should be compared in escaped form
        :param builtins.bool value_has_wildcard: Set to true if the entries for the value property include wildcards
        :param Sequence[builtins.str] values: The value attributes in the incoming request to match on
        """
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[builtins.bool]:
        """
        Set to true if the entries for the value property should be evaluated based on case sensitivity
        """
        return pulumi.get(self, "value_case_sensitive")

    @value_case_sensitive.setter
    def value_case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_case_sensitive", value)

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[builtins.bool]:
        """
        Set to true if provided value should be compared in escaped form
        """
        return pulumi.get(self, "value_escaped")

    @value_escaped.setter
    def value_escaped(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_escaped", value)

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[builtins.bool]:
        """
        Set to true if the entries for the value property include wildcards
        """
        return pulumi.get(self, "value_has_wildcard")

    @value_has_wildcard.setter
    def value_has_wildcard(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_has_wildcard", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        The value attributes in the incoming request to match on
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetCloudletsForwardRewriteMatchRuleMatchRuleArgsDict(TypedDict):
        forward_settings: 'GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsArgsDict'
        """
        This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
        """
        type: builtins.str
        """
        The type of Cloudlet the rule is for
        """
        disabled: NotRequired[builtins.bool]
        """
        If set to true, disables a rule so it is not evaluated against incoming requests.
        """
        end: NotRequired[builtins.int]
        """
        The end time for this match (in seconds since the epoch)
        """
        match_url: NotRequired[builtins.str]
        """
        If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        """
        matches: NotRequired[Sequence['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchArgsDict']]
        """
        Defines a set of match objects
        """
        name: NotRequired[builtins.str]
        """
        The name of the rule
        """
        start: NotRequired[builtins.int]
        """
        The start time for this match (in seconds since the epoch)
        """
elif False:
    GetCloudletsForwardRewriteMatchRuleMatchRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleArgs:
    def __init__(__self__, *,
                 forward_settings: 'GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsArgs',
                 type: builtins.str,
                 disabled: Optional[builtins.bool] = None,
                 end: Optional[builtins.int] = None,
                 match_url: Optional[builtins.str] = None,
                 matches: Optional[Sequence['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchArgs']] = None,
                 name: Optional[builtins.str] = None,
                 start: Optional[builtins.int] = None):
        """
        :param 'GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsArgs' forward_settings: This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
        :param builtins.str type: The type of Cloudlet the rule is for
        :param builtins.bool disabled: If set to true, disables a rule so it is not evaluated against incoming requests.
        :param builtins.int end: The end time for this match (in seconds since the epoch)
        :param builtins.str match_url: If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        :param Sequence['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchArgs'] matches: Defines a set of match objects
        :param builtins.str name: The name of the rule
        :param builtins.int start: The start time for this match (in seconds since the epoch)
        """
        pulumi.set(__self__, "forward_settings", forward_settings)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="forwardSettings")
    def forward_settings(self) -> 'GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsArgs':
        """
        This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
        """
        return pulumi.get(self, "forward_settings")

    @forward_settings.setter
    def forward_settings(self, value: 'GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsArgs'):
        pulumi.set(self, "forward_settings", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of Cloudlet the rule is for
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[builtins.bool]:
        """
        If set to true, disables a rule so it is not evaluated against incoming requests.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[builtins.bool]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[builtins.int]:
        """
        The end time for this match (in seconds since the epoch)
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[builtins.int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[builtins.str]:
        """
        If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        """
        return pulumi.get(self, "match_url")

    @match_url.setter
    def match_url(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_url", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchArgs']]:
        """
        Defines a set of match objects
        """
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[Sequence['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchArgs']]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[builtins.int]:
        """
        The start time for this match (in seconds since the epoch)
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[builtins.int]):
        pulumi.set(self, "start", value)


if not MYPY:
    class GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsArgsDict(TypedDict):
        origin_id: NotRequired[builtins.str]
        """
        The ID of the Conditional Origin requests are forwarded to
        """
        path_and_qs: NotRequired[builtins.str]
        """
        If a value is provided and match conditions are met, this property defines the path/resource/query string to rewrite URL for the incoming request.
        """
        use_incoming_query_string: NotRequired[builtins.bool]
        """
        If set to true, the Cloudlet includes the query string from the request in the rewritten or forwarded URL.
        """
elif False:
    GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsArgs:
    def __init__(__self__, *,
                 origin_id: Optional[builtins.str] = None,
                 path_and_qs: Optional[builtins.str] = None,
                 use_incoming_query_string: Optional[builtins.bool] = None):
        """
        :param builtins.str origin_id: The ID of the Conditional Origin requests are forwarded to
        :param builtins.str path_and_qs: If a value is provided and match conditions are met, this property defines the path/resource/query string to rewrite URL for the incoming request.
        :param builtins.bool use_incoming_query_string: If set to true, the Cloudlet includes the query string from the request in the rewritten or forwarded URL.
        """
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if path_and_qs is not None:
            pulumi.set(__self__, "path_and_qs", path_and_qs)
        if use_incoming_query_string is not None:
            pulumi.set(__self__, "use_incoming_query_string", use_incoming_query_string)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[builtins.str]:
        """
        The ID of the Conditional Origin requests are forwarded to
        """
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: Optional[builtins.str]):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="pathAndQs")
    def path_and_qs(self) -> Optional[builtins.str]:
        """
        If a value is provided and match conditions are met, this property defines the path/resource/query string to rewrite URL for the incoming request.
        """
        return pulumi.get(self, "path_and_qs")

    @path_and_qs.setter
    def path_and_qs(self, value: Optional[builtins.str]):
        pulumi.set(self, "path_and_qs", value)

    @property
    @pulumi.getter(name="useIncomingQueryString")
    def use_incoming_query_string(self) -> Optional[builtins.bool]:
        """
        If set to true, the Cloudlet includes the query string from the request in the rewritten or forwarded URL.
        """
        return pulumi.get(self, "use_incoming_query_string")

    @use_incoming_query_string.setter
    def use_incoming_query_string(self, value: Optional[builtins.bool]):
        pulumi.set(self, "use_incoming_query_string", value)


if not MYPY:
    class GetCloudletsForwardRewriteMatchRuleMatchRuleMatchArgsDict(TypedDict):
        case_sensitive: NotRequired[builtins.bool]
        """
        If true, the match is case sensitive
        """
        check_ips: NotRequired[builtins.str]
        """
        For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        """
        match_operator: NotRequired[builtins.str]
        """
        Valid entries for this property: contains, exists, and equals
        """
        match_type: NotRequired[builtins.str]
        """
        The type of match used
        """
        match_value: NotRequired[builtins.str]
        """
        Depends on the matchType
        """
        negate: NotRequired[builtins.bool]
        """
        If true, negates the match
        """
        object_match_values: NotRequired[Sequence['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueArgsDict']]
        """
        An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
elif False:
    GetCloudletsForwardRewriteMatchRuleMatchRuleMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleMatchArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[builtins.bool] = None,
                 check_ips: Optional[builtins.str] = None,
                 match_operator: Optional[builtins.str] = None,
                 match_type: Optional[builtins.str] = None,
                 match_value: Optional[builtins.str] = None,
                 negate: Optional[builtins.bool] = None,
                 object_match_values: Optional[Sequence['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueArgs']] = None):
        """
        :param builtins.bool case_sensitive: If true, the match is case sensitive
        :param builtins.str check_ips: For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        :param builtins.str match_operator: Valid entries for this property: contains, exists, and equals
        :param builtins.str match_type: The type of match used
        :param builtins.str match_value: Depends on the matchType
        :param builtins.bool negate: If true, negates the match
        :param Sequence['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueArgs'] object_match_values: An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[builtins.bool]:
        """
        If true, the match is case sensitive
        """
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[builtins.str]:
        """
        For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        """
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[builtins.str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[builtins.str]:
        """
        Valid entries for this property: contains, exists, and equals
        """
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[builtins.str]:
        """
        The type of match used
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[builtins.str]:
        """
        Depends on the matchType
        """
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[builtins.bool]:
        """
        If true, negates the match
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[builtins.bool]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueArgs']]:
        """
        An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
        return pulumi.get(self, "object_match_values")

    @object_match_values.setter
    def object_match_values(self, value: Optional[Sequence['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueArgs']]):
        pulumi.set(self, "object_match_values", value)


if not MYPY:
    class GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueArgsDict(TypedDict):
        type: builtins.str
        """
        The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        """
        name: NotRequired[builtins.str]
        """
        If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        """
        name_case_sensitive: NotRequired[builtins.bool]
        """
        Set to true if the entry for the name property should be evaluated based on case sensitivity
        """
        name_has_wildcard: NotRequired[builtins.bool]
        """
        Set to true if the entry for the name property includes wildcards
        """
        options: NotRequired['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict']
        """
        If using the object type, use this set to list the values to match on (use only with the object type)
        """
        values: NotRequired[Sequence[builtins.str]]
        """
        The value attributes in the incoming request to match on (use only with simple or range type)
        """
elif False:
    GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueArgs:
    def __init__(__self__, *,
                 type: builtins.str,
                 name: Optional[builtins.str] = None,
                 name_case_sensitive: Optional[builtins.bool] = None,
                 name_has_wildcard: Optional[builtins.bool] = None,
                 options: Optional['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs'] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str type: The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        :param builtins.str name: If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        :param builtins.bool name_case_sensitive: Set to true if the entry for the name property should be evaluated based on case sensitivity
        :param builtins.bool name_has_wildcard: Set to true if the entry for the name property includes wildcards
        :param 'GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs' options: If using the object type, use this set to list the values to match on (use only with the object type)
        :param Sequence[builtins.str] values: The value attributes in the incoming request to match on (use only with simple or range type)
        """
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[builtins.bool]:
        """
        Set to true if the entry for the name property should be evaluated based on case sensitivity
        """
        return pulumi.get(self, "name_case_sensitive")

    @name_case_sensitive.setter
    def name_case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "name_case_sensitive", value)

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[builtins.bool]:
        """
        Set to true if the entry for the name property includes wildcards
        """
        return pulumi.get(self, "name_has_wildcard")

    @name_has_wildcard.setter
    def name_has_wildcard(self, value: Optional[builtins.bool]):
        pulumi.set(self, "name_has_wildcard", value)

    @property
    @pulumi.getter
    def options(self) -> Optional['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']:
        """
        If using the object type, use this set to list the values to match on (use only with the object type)
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        The value attributes in the incoming request to match on (use only with simple or range type)
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict(TypedDict):
        value_case_sensitive: NotRequired[builtins.bool]
        """
        Set to true if the entries for the value property should be evaluated based on case sensitivity
        """
        value_escaped: NotRequired[builtins.bool]
        """
        Set to true if provided value should be compared in escaped form
        """
        value_has_wildcard: NotRequired[builtins.bool]
        """
        Set to true if the entries for the value property include wildcards
        """
        values: NotRequired[Sequence[builtins.str]]
        """
        The value attributes in the incoming request to match on
        """
elif False:
    GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs:
    def __init__(__self__, *,
                 value_case_sensitive: Optional[builtins.bool] = None,
                 value_escaped: Optional[builtins.bool] = None,
                 value_has_wildcard: Optional[builtins.bool] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.bool value_case_sensitive: Set to true if the entries for the value property should be evaluated based on case sensitivity
        :param builtins.bool value_escaped: Set to true if provided value should be compared in escaped form
        :param builtins.bool value_has_wildcard: Set to true if the entries for the value property include wildcards
        :param Sequence[builtins.str] values: The value attributes in the incoming request to match on
        """
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[builtins.bool]:
        """
        Set to true if the entries for the value property should be evaluated based on case sensitivity
        """
        return pulumi.get(self, "value_case_sensitive")

    @value_case_sensitive.setter
    def value_case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_case_sensitive", value)

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[builtins.bool]:
        """
        Set to true if provided value should be compared in escaped form
        """
        return pulumi.get(self, "value_escaped")

    @value_escaped.setter
    def value_escaped(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_escaped", value)

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[builtins.bool]:
        """
        Set to true if the entries for the value property include wildcards
        """
        return pulumi.get(self, "value_has_wildcard")

    @value_has_wildcard.setter
    def value_has_wildcard(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_has_wildcard", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        The value attributes in the incoming request to match on
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetCloudletsPhasedReleaseMatchRuleMatchRuleArgsDict(TypedDict):
        forward_settings: 'GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsArgsDict'
        """
        This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
        """
        type: builtins.str
        """
        The type of Cloudlet the rule is for. It is known as Continuous Deployment (CD) too.
        """
        disabled: NotRequired[builtins.bool]
        """
        If set to true, disables a rule so it is not evaluated against incoming requests.
        """
        end: NotRequired[builtins.int]
        """
        The end time for this match (in seconds since the epoch)
        """
        match_url: NotRequired[builtins.str]
        """
        If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        """
        matches: NotRequired[Sequence['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchArgsDict']]
        """
        Defines a set of match objects
        """
        matches_always: NotRequired[builtins.bool]
        """
        Is used in some cloudlets to support default rules (rule that is always matched)
        """
        name: NotRequired[builtins.str]
        """
        The name of the rule
        """
        start: NotRequired[builtins.int]
        """
        The start time for this match (in seconds since the epoch)
        """
elif False:
    GetCloudletsPhasedReleaseMatchRuleMatchRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleArgs:
    def __init__(__self__, *,
                 forward_settings: 'GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsArgs',
                 type: builtins.str,
                 disabled: Optional[builtins.bool] = None,
                 end: Optional[builtins.int] = None,
                 match_url: Optional[builtins.str] = None,
                 matches: Optional[Sequence['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchArgs']] = None,
                 matches_always: Optional[builtins.bool] = None,
                 name: Optional[builtins.str] = None,
                 start: Optional[builtins.int] = None):
        """
        :param 'GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsArgs' forward_settings: This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
        :param builtins.str type: The type of Cloudlet the rule is for. It is known as Continuous Deployment (CD) too.
        :param builtins.bool disabled: If set to true, disables a rule so it is not evaluated against incoming requests.
        :param builtins.int end: The end time for this match (in seconds since the epoch)
        :param builtins.str match_url: If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        :param Sequence['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchArgs'] matches: Defines a set of match objects
        :param builtins.bool matches_always: Is used in some cloudlets to support default rules (rule that is always matched)
        :param builtins.str name: The name of the rule
        :param builtins.int start: The start time for this match (in seconds since the epoch)
        """
        pulumi.set(__self__, "forward_settings", forward_settings)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if matches_always is not None:
            pulumi.set(__self__, "matches_always", matches_always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="forwardSettings")
    def forward_settings(self) -> 'GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsArgs':
        """
        This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
        """
        return pulumi.get(self, "forward_settings")

    @forward_settings.setter
    def forward_settings(self, value: 'GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsArgs'):
        pulumi.set(self, "forward_settings", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of Cloudlet the rule is for. It is known as Continuous Deployment (CD) too.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[builtins.bool]:
        """
        If set to true, disables a rule so it is not evaluated against incoming requests.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[builtins.bool]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[builtins.int]:
        """
        The end time for this match (in seconds since the epoch)
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[builtins.int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[builtins.str]:
        """
        If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        """
        return pulumi.get(self, "match_url")

    @match_url.setter
    def match_url(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_url", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchArgs']]:
        """
        Defines a set of match objects
        """
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[Sequence['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchArgs']]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter(name="matchesAlways")
    def matches_always(self) -> Optional[builtins.bool]:
        """
        Is used in some cloudlets to support default rules (rule that is always matched)
        """
        return pulumi.get(self, "matches_always")

    @matches_always.setter
    def matches_always(self, value: Optional[builtins.bool]):
        pulumi.set(self, "matches_always", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[builtins.int]:
        """
        The start time for this match (in seconds since the epoch)
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[builtins.int]):
        pulumi.set(self, "start", value)


if not MYPY:
    class GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsArgsDict(TypedDict):
        origin_id: builtins.str
        """
        The ID of the Conditional Origin requests are forwarded to
        """
        percent: builtins.int
        """
        The percent of traffic that is sent to the data center.
        """
elif False:
    GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsArgs:
    def __init__(__self__, *,
                 origin_id: builtins.str,
                 percent: builtins.int):
        """
        :param builtins.str origin_id: The ID of the Conditional Origin requests are forwarded to
        :param builtins.int percent: The percent of traffic that is sent to the data center.
        """
        pulumi.set(__self__, "origin_id", origin_id)
        pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> builtins.str:
        """
        The ID of the Conditional Origin requests are forwarded to
        """
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: builtins.str):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter
    def percent(self) -> builtins.int:
        """
        The percent of traffic that is sent to the data center.
        """
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: builtins.int):
        pulumi.set(self, "percent", value)


if not MYPY:
    class GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchArgsDict(TypedDict):
        case_sensitive: NotRequired[builtins.bool]
        """
        If true, the match is case sensitive
        """
        check_ips: NotRequired[builtins.str]
        """
        For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        """
        match_operator: NotRequired[builtins.str]
        """
        Valid entries for this property: contains, exists, and equals
        """
        match_type: NotRequired[builtins.str]
        """
        The type of match used
        """
        match_value: NotRequired[builtins.str]
        """
        Depends on the matchType
        """
        negate: NotRequired[builtins.bool]
        """
        If true, negates the match
        """
        object_match_values: NotRequired[Sequence['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueArgsDict']]
        """
        An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
elif False:
    GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[builtins.bool] = None,
                 check_ips: Optional[builtins.str] = None,
                 match_operator: Optional[builtins.str] = None,
                 match_type: Optional[builtins.str] = None,
                 match_value: Optional[builtins.str] = None,
                 negate: Optional[builtins.bool] = None,
                 object_match_values: Optional[Sequence['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueArgs']] = None):
        """
        :param builtins.bool case_sensitive: If true, the match is case sensitive
        :param builtins.str check_ips: For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        :param builtins.str match_operator: Valid entries for this property: contains, exists, and equals
        :param builtins.str match_type: The type of match used
        :param builtins.str match_value: Depends on the matchType
        :param builtins.bool negate: If true, negates the match
        :param Sequence['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueArgs'] object_match_values: An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[builtins.bool]:
        """
        If true, the match is case sensitive
        """
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[builtins.str]:
        """
        For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        """
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[builtins.str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[builtins.str]:
        """
        Valid entries for this property: contains, exists, and equals
        """
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[builtins.str]:
        """
        The type of match used
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[builtins.str]:
        """
        Depends on the matchType
        """
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[builtins.bool]:
        """
        If true, negates the match
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[builtins.bool]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueArgs']]:
        """
        An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
        return pulumi.get(self, "object_match_values")

    @object_match_values.setter
    def object_match_values(self, value: Optional[Sequence['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueArgs']]):
        pulumi.set(self, "object_match_values", value)


if not MYPY:
    class GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueArgsDict(TypedDict):
        type: builtins.str
        """
        The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        """
        name: NotRequired[builtins.str]
        """
        If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        """
        name_case_sensitive: NotRequired[builtins.bool]
        """
        Set to true if the entry for the name property should be evaluated based on case sensitivity
        """
        name_has_wildcard: NotRequired[builtins.bool]
        """
        Set to true if the entry for the name property includes wildcards
        """
        options: NotRequired['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict']
        """
        If using the object type, use this set to list the values to match on (use only with the object type)
        """
        values: NotRequired[Sequence[builtins.str]]
        """
        The value attributes in the incoming request to match on (use only with simple or range type)
        """
elif False:
    GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueArgs:
    def __init__(__self__, *,
                 type: builtins.str,
                 name: Optional[builtins.str] = None,
                 name_case_sensitive: Optional[builtins.bool] = None,
                 name_has_wildcard: Optional[builtins.bool] = None,
                 options: Optional['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs'] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str type: The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        :param builtins.str name: If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        :param builtins.bool name_case_sensitive: Set to true if the entry for the name property should be evaluated based on case sensitivity
        :param builtins.bool name_has_wildcard: Set to true if the entry for the name property includes wildcards
        :param 'GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs' options: If using the object type, use this set to list the values to match on (use only with the object type)
        :param Sequence[builtins.str] values: The value attributes in the incoming request to match on (use only with simple or range type)
        """
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[builtins.bool]:
        """
        Set to true if the entry for the name property should be evaluated based on case sensitivity
        """
        return pulumi.get(self, "name_case_sensitive")

    @name_case_sensitive.setter
    def name_case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "name_case_sensitive", value)

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[builtins.bool]:
        """
        Set to true if the entry for the name property includes wildcards
        """
        return pulumi.get(self, "name_has_wildcard")

    @name_has_wildcard.setter
    def name_has_wildcard(self, value: Optional[builtins.bool]):
        pulumi.set(self, "name_has_wildcard", value)

    @property
    @pulumi.getter
    def options(self) -> Optional['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']:
        """
        If using the object type, use this set to list the values to match on (use only with the object type)
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        The value attributes in the incoming request to match on (use only with simple or range type)
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict(TypedDict):
        value_case_sensitive: NotRequired[builtins.bool]
        """
        Set to true if the entries for the value property should be evaluated based on case sensitivity
        """
        value_escaped: NotRequired[builtins.bool]
        """
        Set to true if provided value should be compared in escaped form
        """
        value_has_wildcard: NotRequired[builtins.bool]
        """
        Set to true if the entries for the value property include wildcards
        """
        values: NotRequired[Sequence[builtins.str]]
        """
        The value attributes in the incoming request to match on
        """
elif False:
    GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs:
    def __init__(__self__, *,
                 value_case_sensitive: Optional[builtins.bool] = None,
                 value_escaped: Optional[builtins.bool] = None,
                 value_has_wildcard: Optional[builtins.bool] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.bool value_case_sensitive: Set to true if the entries for the value property should be evaluated based on case sensitivity
        :param builtins.bool value_escaped: Set to true if provided value should be compared in escaped form
        :param builtins.bool value_has_wildcard: Set to true if the entries for the value property include wildcards
        :param Sequence[builtins.str] values: The value attributes in the incoming request to match on
        """
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[builtins.bool]:
        """
        Set to true if the entries for the value property should be evaluated based on case sensitivity
        """
        return pulumi.get(self, "value_case_sensitive")

    @value_case_sensitive.setter
    def value_case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_case_sensitive", value)

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[builtins.bool]:
        """
        Set to true if provided value should be compared in escaped form
        """
        return pulumi.get(self, "value_escaped")

    @value_escaped.setter
    def value_escaped(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_escaped", value)

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[builtins.bool]:
        """
        Set to true if the entries for the value property include wildcards
        """
        return pulumi.get(self, "value_has_wildcard")

    @value_has_wildcard.setter
    def value_has_wildcard(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_has_wildcard", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        The value attributes in the incoming request to match on
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetCloudletsRequestControlMatchRuleMatchRuleArgsDict(TypedDict):
        allow_deny: builtins.str
        """
        If set to allow, the request is sent to origin when all conditions are true. If deny, the request is denied when all conditions are true. If denybranded, the request is denied and rerouted according to the configuration of the Request Control behavior
        """
        type: builtins.str
        """
        The type of Cloudlet the rule is for
        """
        disabled: NotRequired[builtins.bool]
        """
        If set to true, disables a rule so it is not evaluated against incoming requests.
        """
        end: NotRequired[builtins.int]
        """
        The end time for this match (in seconds since the epoch)
        """
        matches: NotRequired[Sequence['GetCloudletsRequestControlMatchRuleMatchRuleMatchArgsDict']]
        """
        Defines a set of match objects
        """
        matches_always: NotRequired[builtins.bool]
        """
        Is used in some cloudlets to support default rules (rule that is always matched)
        """
        name: NotRequired[builtins.str]
        """
        The name of the rule
        """
        start: NotRequired[builtins.int]
        """
        The start time for this match (in seconds since the epoch)
        """
elif False:
    GetCloudletsRequestControlMatchRuleMatchRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsRequestControlMatchRuleMatchRuleArgs:
    def __init__(__self__, *,
                 allow_deny: builtins.str,
                 type: builtins.str,
                 disabled: Optional[builtins.bool] = None,
                 end: Optional[builtins.int] = None,
                 matches: Optional[Sequence['GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs']] = None,
                 matches_always: Optional[builtins.bool] = None,
                 name: Optional[builtins.str] = None,
                 start: Optional[builtins.int] = None):
        """
        :param builtins.str allow_deny: If set to allow, the request is sent to origin when all conditions are true. If deny, the request is denied when all conditions are true. If denybranded, the request is denied and rerouted according to the configuration of the Request Control behavior
        :param builtins.str type: The type of Cloudlet the rule is for
        :param builtins.bool disabled: If set to true, disables a rule so it is not evaluated against incoming requests.
        :param builtins.int end: The end time for this match (in seconds since the epoch)
        :param Sequence['GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs'] matches: Defines a set of match objects
        :param builtins.bool matches_always: Is used in some cloudlets to support default rules (rule that is always matched)
        :param builtins.str name: The name of the rule
        :param builtins.int start: The start time for this match (in seconds since the epoch)
        """
        pulumi.set(__self__, "allow_deny", allow_deny)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if matches_always is not None:
            pulumi.set(__self__, "matches_always", matches_always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="allowDeny")
    def allow_deny(self) -> builtins.str:
        """
        If set to allow, the request is sent to origin when all conditions are true. If deny, the request is denied when all conditions are true. If denybranded, the request is denied and rerouted according to the configuration of the Request Control behavior
        """
        return pulumi.get(self, "allow_deny")

    @allow_deny.setter
    def allow_deny(self, value: builtins.str):
        pulumi.set(self, "allow_deny", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of Cloudlet the rule is for
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[builtins.bool]:
        """
        If set to true, disables a rule so it is not evaluated against incoming requests.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[builtins.bool]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[builtins.int]:
        """
        The end time for this match (in seconds since the epoch)
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[builtins.int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs']]:
        """
        Defines a set of match objects
        """
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[Sequence['GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs']]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter(name="matchesAlways")
    def matches_always(self) -> Optional[builtins.bool]:
        """
        Is used in some cloudlets to support default rules (rule that is always matched)
        """
        return pulumi.get(self, "matches_always")

    @matches_always.setter
    def matches_always(self, value: Optional[builtins.bool]):
        pulumi.set(self, "matches_always", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[builtins.int]:
        """
        The start time for this match (in seconds since the epoch)
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[builtins.int]):
        pulumi.set(self, "start", value)


if not MYPY:
    class GetCloudletsRequestControlMatchRuleMatchRuleMatchArgsDict(TypedDict):
        case_sensitive: NotRequired[builtins.bool]
        """
        If true, the match is case sensitive
        """
        check_ips: NotRequired[builtins.str]
        """
        For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        """
        match_operator: NotRequired[builtins.str]
        """
        Valid entries for this property: contains, exists, and equals
        """
        match_type: NotRequired[builtins.str]
        """
        The type of match used
        """
        match_value: NotRequired[builtins.str]
        """
        Depends on the matchType
        """
        negate: NotRequired[builtins.bool]
        """
        If true, negates the match
        """
        object_match_values: NotRequired[Sequence['GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueArgsDict']]
        """
        An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
elif False:
    GetCloudletsRequestControlMatchRuleMatchRuleMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[builtins.bool] = None,
                 check_ips: Optional[builtins.str] = None,
                 match_operator: Optional[builtins.str] = None,
                 match_type: Optional[builtins.str] = None,
                 match_value: Optional[builtins.str] = None,
                 negate: Optional[builtins.bool] = None,
                 object_match_values: Optional[Sequence['GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueArgs']] = None):
        """
        :param builtins.bool case_sensitive: If true, the match is case sensitive
        :param builtins.str check_ips: For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        :param builtins.str match_operator: Valid entries for this property: contains, exists, and equals
        :param builtins.str match_type: The type of match used
        :param builtins.str match_value: Depends on the matchType
        :param builtins.bool negate: If true, negates the match
        :param Sequence['GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueArgs'] object_match_values: An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[builtins.bool]:
        """
        If true, the match is case sensitive
        """
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[builtins.str]:
        """
        For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        """
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[builtins.str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[builtins.str]:
        """
        Valid entries for this property: contains, exists, and equals
        """
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[builtins.str]:
        """
        The type of match used
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[builtins.str]:
        """
        Depends on the matchType
        """
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[builtins.bool]:
        """
        If true, negates the match
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[builtins.bool]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueArgs']]:
        """
        An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
        return pulumi.get(self, "object_match_values")

    @object_match_values.setter
    def object_match_values(self, value: Optional[Sequence['GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueArgs']]):
        pulumi.set(self, "object_match_values", value)


if not MYPY:
    class GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueArgsDict(TypedDict):
        type: builtins.str
        """
        The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        """
        name: NotRequired[builtins.str]
        """
        If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        """
        name_case_sensitive: NotRequired[builtins.bool]
        """
        Set to true if the entry for the name property should be evaluated based on case sensitivity
        """
        name_has_wildcard: NotRequired[builtins.bool]
        """
        Set to true if the entry for the name property includes wildcards
        """
        options: NotRequired['GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict']
        """
        If using the object type, use this set to list the values to match on (use only with the object type)
        """
        values: NotRequired[Sequence[builtins.str]]
        """
        The value attributes in the incoming request to match on (use only with simple type)
        """
elif False:
    GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueArgs:
    def __init__(__self__, *,
                 type: builtins.str,
                 name: Optional[builtins.str] = None,
                 name_case_sensitive: Optional[builtins.bool] = None,
                 name_has_wildcard: Optional[builtins.bool] = None,
                 options: Optional['GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs'] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str type: The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        :param builtins.str name: If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        :param builtins.bool name_case_sensitive: Set to true if the entry for the name property should be evaluated based on case sensitivity
        :param builtins.bool name_has_wildcard: Set to true if the entry for the name property includes wildcards
        :param 'GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs' options: If using the object type, use this set to list the values to match on (use only with the object type)
        :param Sequence[builtins.str] values: The value attributes in the incoming request to match on (use only with simple type)
        """
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[builtins.bool]:
        """
        Set to true if the entry for the name property should be evaluated based on case sensitivity
        """
        return pulumi.get(self, "name_case_sensitive")

    @name_case_sensitive.setter
    def name_case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "name_case_sensitive", value)

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[builtins.bool]:
        """
        Set to true if the entry for the name property includes wildcards
        """
        return pulumi.get(self, "name_has_wildcard")

    @name_has_wildcard.setter
    def name_has_wildcard(self, value: Optional[builtins.bool]):
        pulumi.set(self, "name_has_wildcard", value)

    @property
    @pulumi.getter
    def options(self) -> Optional['GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']:
        """
        If using the object type, use this set to list the values to match on (use only with the object type)
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional['GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        The value attributes in the incoming request to match on (use only with simple type)
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict(TypedDict):
        value_case_sensitive: NotRequired[builtins.bool]
        """
        Set to true if the entries for the value property should be evaluated based on case sensitivity
        """
        value_escaped: NotRequired[builtins.bool]
        """
        Set to true if provided value should be compared in escaped form
        """
        value_has_wildcard: NotRequired[builtins.bool]
        """
        Set to true if the entries for the value property include wildcards
        """
        values: NotRequired[Sequence[builtins.str]]
        """
        The value attributes in the incoming request to match on
        """
elif False:
    GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs:
    def __init__(__self__, *,
                 value_case_sensitive: Optional[builtins.bool] = None,
                 value_escaped: Optional[builtins.bool] = None,
                 value_has_wildcard: Optional[builtins.bool] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.bool value_case_sensitive: Set to true if the entries for the value property should be evaluated based on case sensitivity
        :param builtins.bool value_escaped: Set to true if provided value should be compared in escaped form
        :param builtins.bool value_has_wildcard: Set to true if the entries for the value property include wildcards
        :param Sequence[builtins.str] values: The value attributes in the incoming request to match on
        """
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[builtins.bool]:
        """
        Set to true if the entries for the value property should be evaluated based on case sensitivity
        """
        return pulumi.get(self, "value_case_sensitive")

    @value_case_sensitive.setter
    def value_case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_case_sensitive", value)

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[builtins.bool]:
        """
        Set to true if provided value should be compared in escaped form
        """
        return pulumi.get(self, "value_escaped")

    @value_escaped.setter
    def value_escaped(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_escaped", value)

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[builtins.bool]:
        """
        Set to true if the entries for the value property include wildcards
        """
        return pulumi.get(self, "value_has_wildcard")

    @value_has_wildcard.setter
    def value_has_wildcard(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_has_wildcard", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        The value attributes in the incoming request to match on
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetCloudletsSharedPolicyActivationsArgsDict(TypedDict):
        production: NotRequired['GetCloudletsSharedPolicyActivationsProductionArgsDict']
        """
        The policy version number that's currently in use on this network and the status of the most recent activation or deactivation operation for this policy's versions.
        """
        staging: NotRequired['GetCloudletsSharedPolicyActivationsStagingArgsDict']
        """
        The policy version number that's currently in use on this network and the status of the most recent activation or deactivation operation for this policy's versions.
        """
elif False:
    GetCloudletsSharedPolicyActivationsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsSharedPolicyActivationsArgs:
    def __init__(__self__, *,
                 production: Optional['GetCloudletsSharedPolicyActivationsProductionArgs'] = None,
                 staging: Optional['GetCloudletsSharedPolicyActivationsStagingArgs'] = None):
        """
        :param 'GetCloudletsSharedPolicyActivationsProductionArgs' production: The policy version number that's currently in use on this network and the status of the most recent activation or deactivation operation for this policy's versions.
        :param 'GetCloudletsSharedPolicyActivationsStagingArgs' staging: The policy version number that's currently in use on this network and the status of the most recent activation or deactivation operation for this policy's versions.
        """
        if production is not None:
            pulumi.set(__self__, "production", production)
        if staging is not None:
            pulumi.set(__self__, "staging", staging)

    @property
    @pulumi.getter
    def production(self) -> Optional['GetCloudletsSharedPolicyActivationsProductionArgs']:
        """
        The policy version number that's currently in use on this network and the status of the most recent activation or deactivation operation for this policy's versions.
        """
        return pulumi.get(self, "production")

    @production.setter
    def production(self, value: Optional['GetCloudletsSharedPolicyActivationsProductionArgs']):
        pulumi.set(self, "production", value)

    @property
    @pulumi.getter
    def staging(self) -> Optional['GetCloudletsSharedPolicyActivationsStagingArgs']:
        """
        The policy version number that's currently in use on this network and the status of the most recent activation or deactivation operation for this policy's versions.
        """
        return pulumi.get(self, "staging")

    @staging.setter
    def staging(self, value: Optional['GetCloudletsSharedPolicyActivationsStagingArgs']):
        pulumi.set(self, "staging", value)


if not MYPY:
    class GetCloudletsSharedPolicyActivationsProductionArgsDict(TypedDict):
        effective: NotRequired['GetCloudletsSharedPolicyActivationsProductionEffectiveArgsDict']
        """
        The status of the activation that's currently in use on this network, or null if the policy has no activations.
        """
        latest: NotRequired['GetCloudletsSharedPolicyActivationsProductionLatestArgsDict']
        """
        The status of the latest activation or null if the policy has no activations.
        """
elif False:
    GetCloudletsSharedPolicyActivationsProductionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsSharedPolicyActivationsProductionArgs:
    def __init__(__self__, *,
                 effective: Optional['GetCloudletsSharedPolicyActivationsProductionEffectiveArgs'] = None,
                 latest: Optional['GetCloudletsSharedPolicyActivationsProductionLatestArgs'] = None):
        """
        :param 'GetCloudletsSharedPolicyActivationsProductionEffectiveArgs' effective: The status of the activation that's currently in use on this network, or null if the policy has no activations.
        :param 'GetCloudletsSharedPolicyActivationsProductionLatestArgs' latest: The status of the latest activation or null if the policy has no activations.
        """
        if effective is not None:
            pulumi.set(__self__, "effective", effective)
        if latest is not None:
            pulumi.set(__self__, "latest", latest)

    @property
    @pulumi.getter
    def effective(self) -> Optional['GetCloudletsSharedPolicyActivationsProductionEffectiveArgs']:
        """
        The status of the activation that's currently in use on this network, or null if the policy has no activations.
        """
        return pulumi.get(self, "effective")

    @effective.setter
    def effective(self, value: Optional['GetCloudletsSharedPolicyActivationsProductionEffectiveArgs']):
        pulumi.set(self, "effective", value)

    @property
    @pulumi.getter
    def latest(self) -> Optional['GetCloudletsSharedPolicyActivationsProductionLatestArgs']:
        """
        The status of the latest activation or null if the policy has no activations.
        """
        return pulumi.get(self, "latest")

    @latest.setter
    def latest(self, value: Optional['GetCloudletsSharedPolicyActivationsProductionLatestArgs']):
        pulumi.set(self, "latest", value)


if not MYPY:
    class GetCloudletsSharedPolicyActivationsProductionEffectiveArgsDict(TypedDict):
        activation_id: builtins.int
        """
        Identifies the activation.
        """
        created_by: builtins.str
        """
        The username who created the activation.
        """
        created_date: builtins.str
        """
        ISO 8601 timestamp indicating when the activation was created.
        """
        finish_date: builtins.str
        """
        ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
        """
        network: builtins.str
        """
        The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
        """
        operation: builtins.str
        """
        The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
        """
        policy_id: builtins.int
        """
        Identifies the shared policy.
        """
        policy_version: builtins.int
        """
        The number of the policy version.
        """
        policy_version_deleted: builtins.bool
        """
        Indicates if the policy version is deleted.
        """
        status: builtins.str
        """
        The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
        """
elif False:
    GetCloudletsSharedPolicyActivationsProductionEffectiveArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsSharedPolicyActivationsProductionEffectiveArgs:
    def __init__(__self__, *,
                 activation_id: builtins.int,
                 created_by: builtins.str,
                 created_date: builtins.str,
                 finish_date: builtins.str,
                 network: builtins.str,
                 operation: builtins.str,
                 policy_id: builtins.int,
                 policy_version: builtins.int,
                 policy_version_deleted: builtins.bool,
                 status: builtins.str):
        """
        :param builtins.int activation_id: Identifies the activation.
        :param builtins.str created_by: The username who created the activation.
        :param builtins.str created_date: ISO 8601 timestamp indicating when the activation was created.
        :param builtins.str finish_date: ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
        :param builtins.str network: The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
        :param builtins.str operation: The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
        :param builtins.int policy_id: Identifies the shared policy.
        :param builtins.int policy_version: The number of the policy version.
        :param builtins.bool policy_version_deleted: Indicates if the policy version is deleted.
        :param builtins.str status: The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
        """
        pulumi.set(__self__, "activation_id", activation_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_date", created_date)
        pulumi.set(__self__, "finish_date", finish_date)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_version", policy_version)
        pulumi.set(__self__, "policy_version_deleted", policy_version_deleted)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="activationId")
    def activation_id(self) -> builtins.int:
        """
        Identifies the activation.
        """
        return pulumi.get(self, "activation_id")

    @activation_id.setter
    def activation_id(self, value: builtins.int):
        pulumi.set(self, "activation_id", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        The username who created the activation.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: builtins.str):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> builtins.str:
        """
        ISO 8601 timestamp indicating when the activation was created.
        """
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: builtins.str):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter(name="finishDate")
    def finish_date(self) -> builtins.str:
        """
        ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
        """
        return pulumi.get(self, "finish_date")

    @finish_date.setter
    def finish_date(self, value: builtins.str):
        pulumi.set(self, "finish_date", value)

    @property
    @pulumi.getter
    def network(self) -> builtins.str:
        """
        The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: builtins.str):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def operation(self) -> builtins.str:
        """
        The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: builtins.str):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> builtins.int:
        """
        Identifies the shared policy.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: builtins.int):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyVersion")
    def policy_version(self) -> builtins.int:
        """
        The number of the policy version.
        """
        return pulumi.get(self, "policy_version")

    @policy_version.setter
    def policy_version(self, value: builtins.int):
        pulumi.set(self, "policy_version", value)

    @property
    @pulumi.getter(name="policyVersionDeleted")
    def policy_version_deleted(self) -> builtins.bool:
        """
        Indicates if the policy version is deleted.
        """
        return pulumi.get(self, "policy_version_deleted")

    @policy_version_deleted.setter
    def policy_version_deleted(self, value: builtins.bool):
        pulumi.set(self, "policy_version_deleted", value)

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: builtins.str):
        pulumi.set(self, "status", value)


if not MYPY:
    class GetCloudletsSharedPolicyActivationsProductionLatestArgsDict(TypedDict):
        activation_id: builtins.int
        """
        Identifies the activation.
        """
        created_by: builtins.str
        """
        The username who created the activation.
        """
        created_date: builtins.str
        """
        ISO 8601 timestamp indicating when the activation was created.
        """
        finish_date: builtins.str
        """
        ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
        """
        network: builtins.str
        """
        The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
        """
        operation: builtins.str
        """
        The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
        """
        policy_id: builtins.int
        """
        Identifies the shared policy.
        """
        policy_version: builtins.int
        """
        The number of the policy version.
        """
        policy_version_deleted: builtins.bool
        """
        Indicates if the policy version is deleted.
        """
        status: builtins.str
        """
        The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
        """
elif False:
    GetCloudletsSharedPolicyActivationsProductionLatestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsSharedPolicyActivationsProductionLatestArgs:
    def __init__(__self__, *,
                 activation_id: builtins.int,
                 created_by: builtins.str,
                 created_date: builtins.str,
                 finish_date: builtins.str,
                 network: builtins.str,
                 operation: builtins.str,
                 policy_id: builtins.int,
                 policy_version: builtins.int,
                 policy_version_deleted: builtins.bool,
                 status: builtins.str):
        """
        :param builtins.int activation_id: Identifies the activation.
        :param builtins.str created_by: The username who created the activation.
        :param builtins.str created_date: ISO 8601 timestamp indicating when the activation was created.
        :param builtins.str finish_date: ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
        :param builtins.str network: The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
        :param builtins.str operation: The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
        :param builtins.int policy_id: Identifies the shared policy.
        :param builtins.int policy_version: The number of the policy version.
        :param builtins.bool policy_version_deleted: Indicates if the policy version is deleted.
        :param builtins.str status: The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
        """
        pulumi.set(__self__, "activation_id", activation_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_date", created_date)
        pulumi.set(__self__, "finish_date", finish_date)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_version", policy_version)
        pulumi.set(__self__, "policy_version_deleted", policy_version_deleted)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="activationId")
    def activation_id(self) -> builtins.int:
        """
        Identifies the activation.
        """
        return pulumi.get(self, "activation_id")

    @activation_id.setter
    def activation_id(self, value: builtins.int):
        pulumi.set(self, "activation_id", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        The username who created the activation.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: builtins.str):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> builtins.str:
        """
        ISO 8601 timestamp indicating when the activation was created.
        """
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: builtins.str):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter(name="finishDate")
    def finish_date(self) -> builtins.str:
        """
        ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
        """
        return pulumi.get(self, "finish_date")

    @finish_date.setter
    def finish_date(self, value: builtins.str):
        pulumi.set(self, "finish_date", value)

    @property
    @pulumi.getter
    def network(self) -> builtins.str:
        """
        The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: builtins.str):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def operation(self) -> builtins.str:
        """
        The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: builtins.str):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> builtins.int:
        """
        Identifies the shared policy.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: builtins.int):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyVersion")
    def policy_version(self) -> builtins.int:
        """
        The number of the policy version.
        """
        return pulumi.get(self, "policy_version")

    @policy_version.setter
    def policy_version(self, value: builtins.int):
        pulumi.set(self, "policy_version", value)

    @property
    @pulumi.getter(name="policyVersionDeleted")
    def policy_version_deleted(self) -> builtins.bool:
        """
        Indicates if the policy version is deleted.
        """
        return pulumi.get(self, "policy_version_deleted")

    @policy_version_deleted.setter
    def policy_version_deleted(self, value: builtins.bool):
        pulumi.set(self, "policy_version_deleted", value)

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: builtins.str):
        pulumi.set(self, "status", value)


if not MYPY:
    class GetCloudletsSharedPolicyActivationsStagingArgsDict(TypedDict):
        effective: NotRequired['GetCloudletsSharedPolicyActivationsStagingEffectiveArgsDict']
        """
        The status of the activation that's currently in use on this network, or null if the policy has no activations.
        """
        latest: NotRequired['GetCloudletsSharedPolicyActivationsStagingLatestArgsDict']
        """
        The status of the latest activation or null if the policy has no activations.
        """
elif False:
    GetCloudletsSharedPolicyActivationsStagingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsSharedPolicyActivationsStagingArgs:
    def __init__(__self__, *,
                 effective: Optional['GetCloudletsSharedPolicyActivationsStagingEffectiveArgs'] = None,
                 latest: Optional['GetCloudletsSharedPolicyActivationsStagingLatestArgs'] = None):
        """
        :param 'GetCloudletsSharedPolicyActivationsStagingEffectiveArgs' effective: The status of the activation that's currently in use on this network, or null if the policy has no activations.
        :param 'GetCloudletsSharedPolicyActivationsStagingLatestArgs' latest: The status of the latest activation or null if the policy has no activations.
        """
        if effective is not None:
            pulumi.set(__self__, "effective", effective)
        if latest is not None:
            pulumi.set(__self__, "latest", latest)

    @property
    @pulumi.getter
    def effective(self) -> Optional['GetCloudletsSharedPolicyActivationsStagingEffectiveArgs']:
        """
        The status of the activation that's currently in use on this network, or null if the policy has no activations.
        """
        return pulumi.get(self, "effective")

    @effective.setter
    def effective(self, value: Optional['GetCloudletsSharedPolicyActivationsStagingEffectiveArgs']):
        pulumi.set(self, "effective", value)

    @property
    @pulumi.getter
    def latest(self) -> Optional['GetCloudletsSharedPolicyActivationsStagingLatestArgs']:
        """
        The status of the latest activation or null if the policy has no activations.
        """
        return pulumi.get(self, "latest")

    @latest.setter
    def latest(self, value: Optional['GetCloudletsSharedPolicyActivationsStagingLatestArgs']):
        pulumi.set(self, "latest", value)


if not MYPY:
    class GetCloudletsSharedPolicyActivationsStagingEffectiveArgsDict(TypedDict):
        activation_id: builtins.int
        """
        Identifies the activation.
        """
        created_by: builtins.str
        """
        The username who created the activation.
        """
        created_date: builtins.str
        """
        ISO 8601 timestamp indicating when the activation was created.
        """
        finish_date: builtins.str
        """
        ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
        """
        network: builtins.str
        """
        The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
        """
        operation: builtins.str
        """
        The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
        """
        policy_id: builtins.int
        """
        Identifies the shared policy.
        """
        policy_version: builtins.int
        """
        The number of the policy version.
        """
        policy_version_deleted: builtins.bool
        """
        Indicates if the policy version is deleted.
        """
        status: builtins.str
        """
        The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
        """
elif False:
    GetCloudletsSharedPolicyActivationsStagingEffectiveArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsSharedPolicyActivationsStagingEffectiveArgs:
    def __init__(__self__, *,
                 activation_id: builtins.int,
                 created_by: builtins.str,
                 created_date: builtins.str,
                 finish_date: builtins.str,
                 network: builtins.str,
                 operation: builtins.str,
                 policy_id: builtins.int,
                 policy_version: builtins.int,
                 policy_version_deleted: builtins.bool,
                 status: builtins.str):
        """
        :param builtins.int activation_id: Identifies the activation.
        :param builtins.str created_by: The username who created the activation.
        :param builtins.str created_date: ISO 8601 timestamp indicating when the activation was created.
        :param builtins.str finish_date: ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
        :param builtins.str network: The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
        :param builtins.str operation: The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
        :param builtins.int policy_id: Identifies the shared policy.
        :param builtins.int policy_version: The number of the policy version.
        :param builtins.bool policy_version_deleted: Indicates if the policy version is deleted.
        :param builtins.str status: The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
        """
        pulumi.set(__self__, "activation_id", activation_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_date", created_date)
        pulumi.set(__self__, "finish_date", finish_date)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_version", policy_version)
        pulumi.set(__self__, "policy_version_deleted", policy_version_deleted)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="activationId")
    def activation_id(self) -> builtins.int:
        """
        Identifies the activation.
        """
        return pulumi.get(self, "activation_id")

    @activation_id.setter
    def activation_id(self, value: builtins.int):
        pulumi.set(self, "activation_id", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        The username who created the activation.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: builtins.str):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> builtins.str:
        """
        ISO 8601 timestamp indicating when the activation was created.
        """
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: builtins.str):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter(name="finishDate")
    def finish_date(self) -> builtins.str:
        """
        ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
        """
        return pulumi.get(self, "finish_date")

    @finish_date.setter
    def finish_date(self, value: builtins.str):
        pulumi.set(self, "finish_date", value)

    @property
    @pulumi.getter
    def network(self) -> builtins.str:
        """
        The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: builtins.str):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def operation(self) -> builtins.str:
        """
        The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: builtins.str):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> builtins.int:
        """
        Identifies the shared policy.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: builtins.int):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyVersion")
    def policy_version(self) -> builtins.int:
        """
        The number of the policy version.
        """
        return pulumi.get(self, "policy_version")

    @policy_version.setter
    def policy_version(self, value: builtins.int):
        pulumi.set(self, "policy_version", value)

    @property
    @pulumi.getter(name="policyVersionDeleted")
    def policy_version_deleted(self) -> builtins.bool:
        """
        Indicates if the policy version is deleted.
        """
        return pulumi.get(self, "policy_version_deleted")

    @policy_version_deleted.setter
    def policy_version_deleted(self, value: builtins.bool):
        pulumi.set(self, "policy_version_deleted", value)

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: builtins.str):
        pulumi.set(self, "status", value)


if not MYPY:
    class GetCloudletsSharedPolicyActivationsStagingLatestArgsDict(TypedDict):
        activation_id: builtins.int
        """
        Identifies the activation.
        """
        created_by: builtins.str
        """
        The username who created the activation.
        """
        created_date: builtins.str
        """
        ISO 8601 timestamp indicating when the activation was created.
        """
        finish_date: builtins.str
        """
        ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
        """
        network: builtins.str
        """
        The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
        """
        operation: builtins.str
        """
        The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
        """
        policy_id: builtins.int
        """
        Identifies the shared policy.
        """
        policy_version: builtins.int
        """
        The number of the policy version.
        """
        policy_version_deleted: builtins.bool
        """
        Indicates if the policy version is deleted.
        """
        status: builtins.str
        """
        The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
        """
elif False:
    GetCloudletsSharedPolicyActivationsStagingLatestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsSharedPolicyActivationsStagingLatestArgs:
    def __init__(__self__, *,
                 activation_id: builtins.int,
                 created_by: builtins.str,
                 created_date: builtins.str,
                 finish_date: builtins.str,
                 network: builtins.str,
                 operation: builtins.str,
                 policy_id: builtins.int,
                 policy_version: builtins.int,
                 policy_version_deleted: builtins.bool,
                 status: builtins.str):
        """
        :param builtins.int activation_id: Identifies the activation.
        :param builtins.str created_by: The username who created the activation.
        :param builtins.str created_date: ISO 8601 timestamp indicating when the activation was created.
        :param builtins.str finish_date: ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
        :param builtins.str network: The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
        :param builtins.str operation: The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
        :param builtins.int policy_id: Identifies the shared policy.
        :param builtins.int policy_version: The number of the policy version.
        :param builtins.bool policy_version_deleted: Indicates if the policy version is deleted.
        :param builtins.str status: The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
        """
        pulumi.set(__self__, "activation_id", activation_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_date", created_date)
        pulumi.set(__self__, "finish_date", finish_date)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_version", policy_version)
        pulumi.set(__self__, "policy_version_deleted", policy_version_deleted)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="activationId")
    def activation_id(self) -> builtins.int:
        """
        Identifies the activation.
        """
        return pulumi.get(self, "activation_id")

    @activation_id.setter
    def activation_id(self, value: builtins.int):
        pulumi.set(self, "activation_id", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        The username who created the activation.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: builtins.str):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> builtins.str:
        """
        ISO 8601 timestamp indicating when the activation was created.
        """
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: builtins.str):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter(name="finishDate")
    def finish_date(self) -> builtins.str:
        """
        ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
        """
        return pulumi.get(self, "finish_date")

    @finish_date.setter
    def finish_date(self, value: builtins.str):
        pulumi.set(self, "finish_date", value)

    @property
    @pulumi.getter
    def network(self) -> builtins.str:
        """
        The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: builtins.str):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def operation(self) -> builtins.str:
        """
        The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: builtins.str):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> builtins.int:
        """
        Identifies the shared policy.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: builtins.int):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyVersion")
    def policy_version(self) -> builtins.int:
        """
        The number of the policy version.
        """
        return pulumi.get(self, "policy_version")

    @policy_version.setter
    def policy_version(self, value: builtins.int):
        pulumi.set(self, "policy_version", value)

    @property
    @pulumi.getter(name="policyVersionDeleted")
    def policy_version_deleted(self) -> builtins.bool:
        """
        Indicates if the policy version is deleted.
        """
        return pulumi.get(self, "policy_version_deleted")

    @policy_version_deleted.setter
    def policy_version_deleted(self, value: builtins.bool):
        pulumi.set(self, "policy_version_deleted", value)

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: builtins.str):
        pulumi.set(self, "status", value)


if not MYPY:
    class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleArgsDict(TypedDict):
        pass_through_percent: builtins.float
        """
        The range 0.0: 99.0 specifies the percentage of requests that pass through to the origin. The value of 100 means the request always passes through to the origin. A value of -1 means send everyone to the waiting room.
        """
        type: builtins.str
        """
        The type of Cloudlet the rule is for
        """
        disabled: NotRequired[builtins.bool]
        """
        If set to true, disables a rule so it is not evaluated against incoming requests.
        """
        end: NotRequired[builtins.int]
        """
        The end time for this match (in seconds since the epoch)
        """
        match_url: NotRequired[builtins.str]
        """
        If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        """
        matches: NotRequired[Sequence['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchArgsDict']]
        """
        Defines a set of match objects
        """
        name: NotRequired[builtins.str]
        """
        The name of the rule
        """
        start: NotRequired[builtins.int]
        """
        The start time for this match (in seconds since the epoch)
        """
elif False:
    GetCloudletsVisitorPrioritizationMatchRuleMatchRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleArgs:
    def __init__(__self__, *,
                 pass_through_percent: builtins.float,
                 type: builtins.str,
                 disabled: Optional[builtins.bool] = None,
                 end: Optional[builtins.int] = None,
                 match_url: Optional[builtins.str] = None,
                 matches: Optional[Sequence['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchArgs']] = None,
                 name: Optional[builtins.str] = None,
                 start: Optional[builtins.int] = None):
        """
        :param builtins.float pass_through_percent: The range 0.0: 99.0 specifies the percentage of requests that pass through to the origin. The value of 100 means the request always passes through to the origin. A value of -1 means send everyone to the waiting room.
        :param builtins.str type: The type of Cloudlet the rule is for
        :param builtins.bool disabled: If set to true, disables a rule so it is not evaluated against incoming requests.
        :param builtins.int end: The end time for this match (in seconds since the epoch)
        :param builtins.str match_url: If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        :param Sequence['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchArgs'] matches: Defines a set of match objects
        :param builtins.str name: The name of the rule
        :param builtins.int start: The start time for this match (in seconds since the epoch)
        """
        pulumi.set(__self__, "pass_through_percent", pass_through_percent)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="passThroughPercent")
    def pass_through_percent(self) -> builtins.float:
        """
        The range 0.0: 99.0 specifies the percentage of requests that pass through to the origin. The value of 100 means the request always passes through to the origin. A value of -1 means send everyone to the waiting room.
        """
        return pulumi.get(self, "pass_through_percent")

    @pass_through_percent.setter
    def pass_through_percent(self, value: builtins.float):
        pulumi.set(self, "pass_through_percent", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of Cloudlet the rule is for
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[builtins.bool]:
        """
        If set to true, disables a rule so it is not evaluated against incoming requests.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[builtins.bool]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[builtins.int]:
        """
        The end time for this match (in seconds since the epoch)
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[builtins.int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[builtins.str]:
        """
        If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
        """
        return pulumi.get(self, "match_url")

    @match_url.setter
    def match_url(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_url", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchArgs']]:
        """
        Defines a set of match objects
        """
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[Sequence['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchArgs']]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[builtins.int]:
        """
        The start time for this match (in seconds since the epoch)
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[builtins.int]):
        pulumi.set(self, "start", value)


if not MYPY:
    class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchArgsDict(TypedDict):
        case_sensitive: NotRequired[builtins.bool]
        """
        If true, the match is case sensitive
        """
        check_ips: NotRequired[builtins.str]
        """
        For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        """
        match_operator: NotRequired[builtins.str]
        """
        Valid entries for this property: contains, exists, and equals
        """
        match_type: NotRequired[builtins.str]
        """
        The type of match used
        """
        match_value: NotRequired[builtins.str]
        """
        Depends on the matchType
        """
        negate: NotRequired[builtins.bool]
        """
        If true, negates the match
        """
        object_match_values: NotRequired[Sequence['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgsDict']]
        """
        An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
elif False:
    GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[builtins.bool] = None,
                 check_ips: Optional[builtins.str] = None,
                 match_operator: Optional[builtins.str] = None,
                 match_type: Optional[builtins.str] = None,
                 match_value: Optional[builtins.str] = None,
                 negate: Optional[builtins.bool] = None,
                 object_match_values: Optional[Sequence['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs']] = None):
        """
        :param builtins.bool case_sensitive: If true, the match is case sensitive
        :param builtins.str check_ips: For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        :param builtins.str match_operator: Valid entries for this property: contains, exists, and equals
        :param builtins.str match_type: The type of match used
        :param builtins.str match_value: Depends on the matchType
        :param builtins.bool negate: If true, negates the match
        :param Sequence['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs'] object_match_values: An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[builtins.bool]:
        """
        If true, the match is case sensitive
        """
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[builtins.str]:
        """
        For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
        """
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[builtins.str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[builtins.str]:
        """
        Valid entries for this property: contains, exists, and equals
        """
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[builtins.str]:
        """
        The type of match used
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[builtins.str]:
        """
        Depends on the matchType
        """
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[builtins.str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[builtins.bool]:
        """
        If true, negates the match
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[builtins.bool]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs']]:
        """
        An object used when a rule either includes more complex match criteria, like multiple value attributes
        """
        return pulumi.get(self, "object_match_values")

    @object_match_values.setter
    def object_match_values(self, value: Optional[Sequence['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs']]):
        pulumi.set(self, "object_match_values", value)


if not MYPY:
    class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgsDict(TypedDict):
        type: builtins.str
        """
        The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        """
        name: NotRequired[builtins.str]
        """
        If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        """
        name_case_sensitive: NotRequired[builtins.bool]
        """
        Set to true if the entry for the name property should be evaluated based on case sensitivity
        """
        name_has_wildcard: NotRequired[builtins.bool]
        """
        Set to true if the entry for the name property includes wildcards
        """
        options: NotRequired['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict']
        """
        If using the object type, use this set to list the values to match on (use only with the object type)
        """
        values: NotRequired[Sequence[builtins.str]]
        """
        The value attributes in the incoming request to match on (use only with simple type)
        """
elif False:
    GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs:
    def __init__(__self__, *,
                 type: builtins.str,
                 name: Optional[builtins.str] = None,
                 name_case_sensitive: Optional[builtins.bool] = None,
                 name_has_wildcard: Optional[builtins.bool] = None,
                 options: Optional['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs'] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str type: The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        :param builtins.str name: If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        :param builtins.bool name_case_sensitive: Set to true if the entry for the name property should be evaluated based on case sensitivity
        :param builtins.bool name_has_wildcard: Set to true if the entry for the name property includes wildcards
        :param 'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs' options: If using the object type, use this set to list the values to match on (use only with the object type)
        :param Sequence[builtins.str] values: The value attributes in the incoming request to match on (use only with simple type)
        """
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[builtins.bool]:
        """
        Set to true if the entry for the name property should be evaluated based on case sensitivity
        """
        return pulumi.get(self, "name_case_sensitive")

    @name_case_sensitive.setter
    def name_case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "name_case_sensitive", value)

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[builtins.bool]:
        """
        Set to true if the entry for the name property includes wildcards
        """
        return pulumi.get(self, "name_has_wildcard")

    @name_has_wildcard.setter
    def name_has_wildcard(self, value: Optional[builtins.bool]):
        pulumi.set(self, "name_has_wildcard", value)

    @property
    @pulumi.getter
    def options(self) -> Optional['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']:
        """
        If using the object type, use this set to list the values to match on (use only with the object type)
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        The value attributes in the incoming request to match on (use only with simple type)
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict(TypedDict):
        value_case_sensitive: NotRequired[builtins.bool]
        """
        Set to true if the entries for the value property should be evaluated based on case sensitivity
        """
        value_escaped: NotRequired[builtins.bool]
        """
        Set to true if provided value should be compared in escaped form
        """
        value_has_wildcard: NotRequired[builtins.bool]
        """
        Set to true if the entries for the value property include wildcards
        """
        values: NotRequired[Sequence[builtins.str]]
        """
        The value attributes in the incoming request to match on
        """
elif False:
    GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs:
    def __init__(__self__, *,
                 value_case_sensitive: Optional[builtins.bool] = None,
                 value_escaped: Optional[builtins.bool] = None,
                 value_has_wildcard: Optional[builtins.bool] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.bool value_case_sensitive: Set to true if the entries for the value property should be evaluated based on case sensitivity
        :param builtins.bool value_escaped: Set to true if provided value should be compared in escaped form
        :param builtins.bool value_has_wildcard: Set to true if the entries for the value property include wildcards
        :param Sequence[builtins.str] values: The value attributes in the incoming request to match on
        """
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[builtins.bool]:
        """
        Set to true if the entries for the value property should be evaluated based on case sensitivity
        """
        return pulumi.get(self, "value_case_sensitive")

    @value_case_sensitive.setter
    def value_case_sensitive(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_case_sensitive", value)

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[builtins.bool]:
        """
        Set to true if provided value should be compared in escaped form
        """
        return pulumi.get(self, "value_escaped")

    @value_escaped.setter
    def value_escaped(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_escaped", value)

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[builtins.bool]:
        """
        Set to true if the entries for the value property include wildcards
        """
        return pulumi.get(self, "value_has_wildcard")

    @value_has_wildcard.setter
    def value_has_wildcard(self, value: Optional[builtins.bool]):
        pulumi.set(self, "value_has_wildcard", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        The value attributes in the incoming request to match on
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetCloudwrapperCapacitiesCapacityArgsDict(TypedDict):
        approved: 'GetCloudwrapperCapacitiesCapacityApprovedArgsDict'
        """
        Capacity allocated for the location.
        """
        assigned: 'GetCloudwrapperCapacitiesCapacityAssignedArgsDict'
        """
        Capacity already assigned to Cloud Wrapper configurations.
        """
        contract_id: builtins.str
        """
        Contract ID having Cloud Wrapper entitlement.
        """
        location_id: builtins.int
        """
        Unique identifier of the configured location.
        """
        location_name: builtins.str
        """
        Name of the location.
        """
        type: builtins.str
        """
        The type of property this capacity is related to.
        """
        unassigned: 'GetCloudwrapperCapacitiesCapacityUnassignedArgsDict'
        """
        Capacity value that can be assigned to Cloud Wrapper configurations.
        """
elif False:
    GetCloudwrapperCapacitiesCapacityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperCapacitiesCapacityArgs:
    def __init__(__self__, *,
                 approved: 'GetCloudwrapperCapacitiesCapacityApprovedArgs',
                 assigned: 'GetCloudwrapperCapacitiesCapacityAssignedArgs',
                 contract_id: builtins.str,
                 location_id: builtins.int,
                 location_name: builtins.str,
                 type: builtins.str,
                 unassigned: 'GetCloudwrapperCapacitiesCapacityUnassignedArgs'):
        """
        :param 'GetCloudwrapperCapacitiesCapacityApprovedArgs' approved: Capacity allocated for the location.
        :param 'GetCloudwrapperCapacitiesCapacityAssignedArgs' assigned: Capacity already assigned to Cloud Wrapper configurations.
        :param builtins.str contract_id: Contract ID having Cloud Wrapper entitlement.
        :param builtins.int location_id: Unique identifier of the configured location.
        :param builtins.str location_name: Name of the location.
        :param builtins.str type: The type of property this capacity is related to.
        :param 'GetCloudwrapperCapacitiesCapacityUnassignedArgs' unassigned: Capacity value that can be assigned to Cloud Wrapper configurations.
        """
        pulumi.set(__self__, "approved", approved)
        pulumi.set(__self__, "assigned", assigned)
        pulumi.set(__self__, "contract_id", contract_id)
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "location_name", location_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unassigned", unassigned)

    @property
    @pulumi.getter
    def approved(self) -> 'GetCloudwrapperCapacitiesCapacityApprovedArgs':
        """
        Capacity allocated for the location.
        """
        return pulumi.get(self, "approved")

    @approved.setter
    def approved(self, value: 'GetCloudwrapperCapacitiesCapacityApprovedArgs'):
        pulumi.set(self, "approved", value)

    @property
    @pulumi.getter
    def assigned(self) -> 'GetCloudwrapperCapacitiesCapacityAssignedArgs':
        """
        Capacity already assigned to Cloud Wrapper configurations.
        """
        return pulumi.get(self, "assigned")

    @assigned.setter
    def assigned(self, value: 'GetCloudwrapperCapacitiesCapacityAssignedArgs'):
        pulumi.set(self, "assigned", value)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> builtins.str:
        """
        Contract ID having Cloud Wrapper entitlement.
        """
        return pulumi.get(self, "contract_id")

    @contract_id.setter
    def contract_id(self, value: builtins.str):
        pulumi.set(self, "contract_id", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> builtins.int:
        """
        Unique identifier of the configured location.
        """
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: builtins.int):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> builtins.str:
        """
        Name of the location.
        """
        return pulumi.get(self, "location_name")

    @location_name.setter
    def location_name(self, value: builtins.str):
        pulumi.set(self, "location_name", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of property this capacity is related to.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unassigned(self) -> 'GetCloudwrapperCapacitiesCapacityUnassignedArgs':
        """
        Capacity value that can be assigned to Cloud Wrapper configurations.
        """
        return pulumi.get(self, "unassigned")

    @unassigned.setter
    def unassigned(self, value: 'GetCloudwrapperCapacitiesCapacityUnassignedArgs'):
        pulumi.set(self, "unassigned", value)


if not MYPY:
    class GetCloudwrapperCapacitiesCapacityApprovedArgsDict(TypedDict):
        unit: builtins.str
        value: builtins.int
elif False:
    GetCloudwrapperCapacitiesCapacityApprovedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperCapacitiesCapacityApprovedArgs:
    def __init__(__self__, *,
                 unit: builtins.str,
                 value: builtins.int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> builtins.str:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: builtins.str):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> builtins.int:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: builtins.int):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetCloudwrapperCapacitiesCapacityAssignedArgsDict(TypedDict):
        unit: builtins.str
        value: builtins.int
elif False:
    GetCloudwrapperCapacitiesCapacityAssignedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperCapacitiesCapacityAssignedArgs:
    def __init__(__self__, *,
                 unit: builtins.str,
                 value: builtins.int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> builtins.str:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: builtins.str):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> builtins.int:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: builtins.int):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetCloudwrapperCapacitiesCapacityUnassignedArgsDict(TypedDict):
        unit: builtins.str
        value: builtins.int
elif False:
    GetCloudwrapperCapacitiesCapacityUnassignedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperCapacitiesCapacityUnassignedArgs:
    def __init__(__self__, *,
                 unit: builtins.str,
                 value: builtins.int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> builtins.str:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: builtins.str):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> builtins.int:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: builtins.int):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetCloudwrapperConfigurationLocationArgsDict(TypedDict):
        capacity: 'GetCloudwrapperConfigurationLocationCapacityArgsDict'
        """
        The capacity assigned to this configuration's location.
        """
        comments: builtins.str
        """
        Additional comments provided by user.
        """
        map_name: builtins.str
        """
        The name of the map.
        """
        traffic_type_id: builtins.int
        """
        Unique identifier for the location and traffic type combination.
        """
elif False:
    GetCloudwrapperConfigurationLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperConfigurationLocationArgs:
    def __init__(__self__, *,
                 capacity: 'GetCloudwrapperConfigurationLocationCapacityArgs',
                 comments: builtins.str,
                 map_name: builtins.str,
                 traffic_type_id: builtins.int):
        """
        :param 'GetCloudwrapperConfigurationLocationCapacityArgs' capacity: The capacity assigned to this configuration's location.
        :param builtins.str comments: Additional comments provided by user.
        :param builtins.str map_name: The name of the map.
        :param builtins.int traffic_type_id: Unique identifier for the location and traffic type combination.
        """
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "map_name", map_name)
        pulumi.set(__self__, "traffic_type_id", traffic_type_id)

    @property
    @pulumi.getter
    def capacity(self) -> 'GetCloudwrapperConfigurationLocationCapacityArgs':
        """
        The capacity assigned to this configuration's location.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: 'GetCloudwrapperConfigurationLocationCapacityArgs'):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def comments(self) -> builtins.str:
        """
        Additional comments provided by user.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: builtins.str):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="mapName")
    def map_name(self) -> builtins.str:
        """
        The name of the map.
        """
        return pulumi.get(self, "map_name")

    @map_name.setter
    def map_name(self, value: builtins.str):
        pulumi.set(self, "map_name", value)

    @property
    @pulumi.getter(name="trafficTypeId")
    def traffic_type_id(self) -> builtins.int:
        """
        Unique identifier for the location and traffic type combination.
        """
        return pulumi.get(self, "traffic_type_id")

    @traffic_type_id.setter
    def traffic_type_id(self, value: builtins.int):
        pulumi.set(self, "traffic_type_id", value)


if not MYPY:
    class GetCloudwrapperConfigurationLocationCapacityArgsDict(TypedDict):
        unit: builtins.str
        value: builtins.int
elif False:
    GetCloudwrapperConfigurationLocationCapacityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperConfigurationLocationCapacityArgs:
    def __init__(__self__, *,
                 unit: builtins.str,
                 value: builtins.int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> builtins.str:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: builtins.str):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> builtins.int:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: builtins.int):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetCloudwrapperConfigurationMultiCdnSettingsArgsDict(TypedDict):
        enable_soft_alerts: builtins.bool
        """
        Option to opt out of alerts based on soft limits of bandwidth usage.
        """
        bocc: NotRequired['GetCloudwrapperConfigurationMultiCdnSettingsBoccArgsDict']
        """
        Specify diagnostic data beacons details.
        """
        cdns: NotRequired[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsCdnArgsDict']]
        """
        List of CDN added for the configuration.
        """
        data_streams: NotRequired['GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsArgsDict']
        """
        Specifies data streams details.
        """
        origins: NotRequired[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsOriginArgsDict']]
        """
        List of origins corresponding to the properties selected in the configuration.
        """
elif False:
    GetCloudwrapperConfigurationMultiCdnSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperConfigurationMultiCdnSettingsArgs:
    def __init__(__self__, *,
                 enable_soft_alerts: builtins.bool,
                 bocc: Optional['GetCloudwrapperConfigurationMultiCdnSettingsBoccArgs'] = None,
                 cdns: Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsCdnArgs']] = None,
                 data_streams: Optional['GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsArgs'] = None,
                 origins: Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsOriginArgs']] = None):
        """
        :param builtins.bool enable_soft_alerts: Option to opt out of alerts based on soft limits of bandwidth usage.
        :param 'GetCloudwrapperConfigurationMultiCdnSettingsBoccArgs' bocc: Specify diagnostic data beacons details.
        :param Sequence['GetCloudwrapperConfigurationMultiCdnSettingsCdnArgs'] cdns: List of CDN added for the configuration.
        :param 'GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsArgs' data_streams: Specifies data streams details.
        :param Sequence['GetCloudwrapperConfigurationMultiCdnSettingsOriginArgs'] origins: List of origins corresponding to the properties selected in the configuration.
        """
        pulumi.set(__self__, "enable_soft_alerts", enable_soft_alerts)
        if bocc is not None:
            pulumi.set(__self__, "bocc", bocc)
        if cdns is not None:
            pulumi.set(__self__, "cdns", cdns)
        if data_streams is not None:
            pulumi.set(__self__, "data_streams", data_streams)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)

    @property
    @pulumi.getter(name="enableSoftAlerts")
    def enable_soft_alerts(self) -> builtins.bool:
        """
        Option to opt out of alerts based on soft limits of bandwidth usage.
        """
        return pulumi.get(self, "enable_soft_alerts")

    @enable_soft_alerts.setter
    def enable_soft_alerts(self, value: builtins.bool):
        pulumi.set(self, "enable_soft_alerts", value)

    @property
    @pulumi.getter
    def bocc(self) -> Optional['GetCloudwrapperConfigurationMultiCdnSettingsBoccArgs']:
        """
        Specify diagnostic data beacons details.
        """
        return pulumi.get(self, "bocc")

    @bocc.setter
    def bocc(self, value: Optional['GetCloudwrapperConfigurationMultiCdnSettingsBoccArgs']):
        pulumi.set(self, "bocc", value)

    @property
    @pulumi.getter
    def cdns(self) -> Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsCdnArgs']]:
        """
        List of CDN added for the configuration.
        """
        return pulumi.get(self, "cdns")

    @cdns.setter
    def cdns(self, value: Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsCdnArgs']]):
        pulumi.set(self, "cdns", value)

    @property
    @pulumi.getter(name="dataStreams")
    def data_streams(self) -> Optional['GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsArgs']:
        """
        Specifies data streams details.
        """
        return pulumi.get(self, "data_streams")

    @data_streams.setter
    def data_streams(self, value: Optional['GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsArgs']):
        pulumi.set(self, "data_streams", value)

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsOriginArgs']]:
        """
        List of origins corresponding to the properties selected in the configuration.
        """
        return pulumi.get(self, "origins")

    @origins.setter
    def origins(self, value: Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsOriginArgs']]):
        pulumi.set(self, "origins", value)


if not MYPY:
    class GetCloudwrapperConfigurationMultiCdnSettingsBoccArgsDict(TypedDict):
        conditional_sampling_frequency: builtins.str
        """
        The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
        """
        enabled: builtins.bool
        """
        Enable diagnostic data beacons for consumption by the Broadcast Operations Control Center.
        """
        forward_type: builtins.str
        """
        Select whether to beacon diagnostics data for internal ORIGIN_ONLY, MIDGRESS_ONLY, or both ORIGIN_AND_MIDGRESS forwards.
        """
        request_type: builtins.str
        """
        Select whether to beacon diagnostics data for EDGE_ONLY or EDGE_AND_MIDGRESS requests.
        """
        sampling_frequency: builtins.str
        """
        The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
        """
elif False:
    GetCloudwrapperConfigurationMultiCdnSettingsBoccArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperConfigurationMultiCdnSettingsBoccArgs:
    def __init__(__self__, *,
                 conditional_sampling_frequency: builtins.str,
                 enabled: builtins.bool,
                 forward_type: builtins.str,
                 request_type: builtins.str,
                 sampling_frequency: builtins.str):
        """
        :param builtins.str conditional_sampling_frequency: The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
        :param builtins.bool enabled: Enable diagnostic data beacons for consumption by the Broadcast Operations Control Center.
        :param builtins.str forward_type: Select whether to beacon diagnostics data for internal ORIGIN_ONLY, MIDGRESS_ONLY, or both ORIGIN_AND_MIDGRESS forwards.
        :param builtins.str request_type: Select whether to beacon diagnostics data for EDGE_ONLY or EDGE_AND_MIDGRESS requests.
        :param builtins.str sampling_frequency: The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
        """
        pulumi.set(__self__, "conditional_sampling_frequency", conditional_sampling_frequency)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "forward_type", forward_type)
        pulumi.set(__self__, "request_type", request_type)
        pulumi.set(__self__, "sampling_frequency", sampling_frequency)

    @property
    @pulumi.getter(name="conditionalSamplingFrequency")
    def conditional_sampling_frequency(self) -> builtins.str:
        """
        The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
        """
        return pulumi.get(self, "conditional_sampling_frequency")

    @conditional_sampling_frequency.setter
    def conditional_sampling_frequency(self, value: builtins.str):
        pulumi.set(self, "conditional_sampling_frequency", value)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Enable diagnostic data beacons for consumption by the Broadcast Operations Control Center.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: builtins.bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="forwardType")
    def forward_type(self) -> builtins.str:
        """
        Select whether to beacon diagnostics data for internal ORIGIN_ONLY, MIDGRESS_ONLY, or both ORIGIN_AND_MIDGRESS forwards.
        """
        return pulumi.get(self, "forward_type")

    @forward_type.setter
    def forward_type(self, value: builtins.str):
        pulumi.set(self, "forward_type", value)

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> builtins.str:
        """
        Select whether to beacon diagnostics data for EDGE_ONLY or EDGE_AND_MIDGRESS requests.
        """
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: builtins.str):
        pulumi.set(self, "request_type", value)

    @property
    @pulumi.getter(name="samplingFrequency")
    def sampling_frequency(self) -> builtins.str:
        """
        The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
        """
        return pulumi.get(self, "sampling_frequency")

    @sampling_frequency.setter
    def sampling_frequency(self, value: builtins.str):
        pulumi.set(self, "sampling_frequency", value)


if not MYPY:
    class GetCloudwrapperConfigurationMultiCdnSettingsCdnArgsDict(TypedDict):
        cdn_code: builtins.str
        """
        Unique identifier for the CDN.
        """
        enabled: builtins.bool
        """
        Enable CDN.
        """
        https_only: builtins.bool
        """
        Specify whether CDN communication is HTTPS only.
        """
        ip_acl_cidrs: Sequence[builtins.str]
        """
        Configure an access control list using IP addresses in CIDR notation.
        """
        cdn_auth_keys: NotRequired[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyArgsDict']]
        """
        List of auth keys configured for the CDN.
        """
elif False:
    GetCloudwrapperConfigurationMultiCdnSettingsCdnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperConfigurationMultiCdnSettingsCdnArgs:
    def __init__(__self__, *,
                 cdn_code: builtins.str,
                 enabled: builtins.bool,
                 https_only: builtins.bool,
                 ip_acl_cidrs: Sequence[builtins.str],
                 cdn_auth_keys: Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs']] = None):
        """
        :param builtins.str cdn_code: Unique identifier for the CDN.
        :param builtins.bool enabled: Enable CDN.
        :param builtins.bool https_only: Specify whether CDN communication is HTTPS only.
        :param Sequence[builtins.str] ip_acl_cidrs: Configure an access control list using IP addresses in CIDR notation.
        :param Sequence['GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs'] cdn_auth_keys: List of auth keys configured for the CDN.
        """
        pulumi.set(__self__, "cdn_code", cdn_code)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "https_only", https_only)
        pulumi.set(__self__, "ip_acl_cidrs", ip_acl_cidrs)
        if cdn_auth_keys is not None:
            pulumi.set(__self__, "cdn_auth_keys", cdn_auth_keys)

    @property
    @pulumi.getter(name="cdnCode")
    def cdn_code(self) -> builtins.str:
        """
        Unique identifier for the CDN.
        """
        return pulumi.get(self, "cdn_code")

    @cdn_code.setter
    def cdn_code(self, value: builtins.str):
        pulumi.set(self, "cdn_code", value)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Enable CDN.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: builtins.bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="httpsOnly")
    def https_only(self) -> builtins.bool:
        """
        Specify whether CDN communication is HTTPS only.
        """
        return pulumi.get(self, "https_only")

    @https_only.setter
    def https_only(self, value: builtins.bool):
        pulumi.set(self, "https_only", value)

    @property
    @pulumi.getter(name="ipAclCidrs")
    def ip_acl_cidrs(self) -> Sequence[builtins.str]:
        """
        Configure an access control list using IP addresses in CIDR notation.
        """
        return pulumi.get(self, "ip_acl_cidrs")

    @ip_acl_cidrs.setter
    def ip_acl_cidrs(self, value: Sequence[builtins.str]):
        pulumi.set(self, "ip_acl_cidrs", value)

    @property
    @pulumi.getter(name="cdnAuthKeys")
    def cdn_auth_keys(self) -> Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs']]:
        """
        List of auth keys configured for the CDN.
        """
        return pulumi.get(self, "cdn_auth_keys")

    @cdn_auth_keys.setter
    def cdn_auth_keys(self, value: Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs']]):
        pulumi.set(self, "cdn_auth_keys", value)


if not MYPY:
    class GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyArgsDict(TypedDict):
        auth_key_name: builtins.str
        """
        The name of the auth key.
        """
        expiry_date: builtins.str
        """
        The expirty date of an auth key.
        """
        header_name: builtins.str
        """
        The header name of an auth key.
        """
        secret: builtins.str
        """
        The secret of an auth key.
        """
elif False:
    GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs:
    def __init__(__self__, *,
                 auth_key_name: builtins.str,
                 expiry_date: builtins.str,
                 header_name: builtins.str,
                 secret: builtins.str):
        """
        :param builtins.str auth_key_name: The name of the auth key.
        :param builtins.str expiry_date: The expirty date of an auth key.
        :param builtins.str header_name: The header name of an auth key.
        :param builtins.str secret: The secret of an auth key.
        """
        pulumi.set(__self__, "auth_key_name", auth_key_name)
        pulumi.set(__self__, "expiry_date", expiry_date)
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="authKeyName")
    def auth_key_name(self) -> builtins.str:
        """
        The name of the auth key.
        """
        return pulumi.get(self, "auth_key_name")

    @auth_key_name.setter
    def auth_key_name(self, value: builtins.str):
        pulumi.set(self, "auth_key_name", value)

    @property
    @pulumi.getter(name="expiryDate")
    def expiry_date(self) -> builtins.str:
        """
        The expirty date of an auth key.
        """
        return pulumi.get(self, "expiry_date")

    @expiry_date.setter
    def expiry_date(self, value: builtins.str):
        pulumi.set(self, "expiry_date", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> builtins.str:
        """
        The header name of an auth key.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: builtins.str):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def secret(self) -> builtins.str:
        """
        The secret of an auth key.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: builtins.str):
        pulumi.set(self, "secret", value)


if not MYPY:
    class GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsArgsDict(TypedDict):
        data_stream_ids: Sequence[builtins.int]
        """
        Unique identifiers of the Data Streams.
        """
        enabled: builtins.bool
        """
        Enables DataStream reporting.
        """
        sampling_rate: builtins.int
        """
        Specifies the percentage of log data you want to collect for this configuration.
        """
elif False:
    GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsArgs:
    def __init__(__self__, *,
                 data_stream_ids: Sequence[builtins.int],
                 enabled: builtins.bool,
                 sampling_rate: builtins.int):
        """
        :param Sequence[builtins.int] data_stream_ids: Unique identifiers of the Data Streams.
        :param builtins.bool enabled: Enables DataStream reporting.
        :param builtins.int sampling_rate: Specifies the percentage of log data you want to collect for this configuration.
        """
        pulumi.set(__self__, "data_stream_ids", data_stream_ids)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "sampling_rate", sampling_rate)

    @property
    @pulumi.getter(name="dataStreamIds")
    def data_stream_ids(self) -> Sequence[builtins.int]:
        """
        Unique identifiers of the Data Streams.
        """
        return pulumi.get(self, "data_stream_ids")

    @data_stream_ids.setter
    def data_stream_ids(self, value: Sequence[builtins.int]):
        pulumi.set(self, "data_stream_ids", value)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Enables DataStream reporting.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: builtins.bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> builtins.int:
        """
        Specifies the percentage of log data you want to collect for this configuration.
        """
        return pulumi.get(self, "sampling_rate")

    @sampling_rate.setter
    def sampling_rate(self, value: builtins.int):
        pulumi.set(self, "sampling_rate", value)


if not MYPY:
    class GetCloudwrapperConfigurationMultiCdnSettingsOriginArgsDict(TypedDict):
        hostname: builtins.str
        """
        Origins hostname corresponding to the Akamai Delivery Property.
        """
        origin_id: builtins.str
        """
        Origin identifier and will be used to generated Multi CDN host names.
        """
        property_id: builtins.int
        """
        Property ID of the property that origin belongs to.
        """
elif False:
    GetCloudwrapperConfigurationMultiCdnSettingsOriginArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperConfigurationMultiCdnSettingsOriginArgs:
    def __init__(__self__, *,
                 hostname: builtins.str,
                 origin_id: builtins.str,
                 property_id: builtins.int):
        """
        :param builtins.str hostname: Origins hostname corresponding to the Akamai Delivery Property.
        :param builtins.str origin_id: Origin identifier and will be used to generated Multi CDN host names.
        :param builtins.int property_id: Property ID of the property that origin belongs to.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "origin_id", origin_id)
        pulumi.set(__self__, "property_id", property_id)

    @property
    @pulumi.getter
    def hostname(self) -> builtins.str:
        """
        Origins hostname corresponding to the Akamai Delivery Property.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: builtins.str):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> builtins.str:
        """
        Origin identifier and will be used to generated Multi CDN host names.
        """
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: builtins.str):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> builtins.int:
        """
        Property ID of the property that origin belongs to.
        """
        return pulumi.get(self, "property_id")

    @property_id.setter
    def property_id(self, value: builtins.int):
        pulumi.set(self, "property_id", value)


if not MYPY:
    class GetCloudwrapperConfigurationsConfigurationArgsDict(TypedDict):
        capacity_alerts_threshold: builtins.int
        """
        Represents the threshold for sending alerts.
        """
        comments: builtins.str
        """
        Additional information provided by user which can help to differentiate or track changes of the configuration.
        """
        config_name: builtins.str
        """
        Name of the configuration.
        """
        contract_id: builtins.str
        """
        Contract ID with Cloud Wrapper entitlement.
        """
        id: builtins.int
        """
        Unique identifier of a Cloud Wrapper configuration.
        """
        last_activated_by: builtins.str
        """
        User to last activate the configuration.
        """
        last_activated_date: builtins.str
        """
        ISO format date that represents when the configuration was last activated successfully.
        """
        last_updated_by: builtins.str
        """
        User to last modify the configuration.
        """
        last_updated_date: builtins.str
        """
        ISO format date that represents when the configuration was last edited.
        """
        notification_emails: Sequence[builtins.str]
        """
        Email addresses to receive notifications.
        """
        property_ids: Sequence[builtins.str]
        """
        List of properties belonging to media delivery products. Properties need to be unique across configurations.
        """
        retain_idle_objects: builtins.bool
        """
        Retain idle objects beyond their max idle lifetime.
        """
        status: builtins.str
        """
        Current state of the provisioning of the configuration, either SAVED, IN_PROGRESS, ACTIVE, DELETE_IN_PROGRESS, or FAILED.
        """
        locations: NotRequired[Sequence['GetCloudwrapperConfigurationsConfigurationLocationArgsDict']]
        """
        List of all unused properties.
        """
        multi_cdn_settings: NotRequired['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgsDict']
        """
        Specify details about the Multi CDN settings.
        """
elif False:
    GetCloudwrapperConfigurationsConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationArgs:
    def __init__(__self__, *,
                 capacity_alerts_threshold: builtins.int,
                 comments: builtins.str,
                 config_name: builtins.str,
                 contract_id: builtins.str,
                 id: builtins.int,
                 last_activated_by: builtins.str,
                 last_activated_date: builtins.str,
                 last_updated_by: builtins.str,
                 last_updated_date: builtins.str,
                 notification_emails: Sequence[builtins.str],
                 property_ids: Sequence[builtins.str],
                 retain_idle_objects: builtins.bool,
                 status: builtins.str,
                 locations: Optional[Sequence['GetCloudwrapperConfigurationsConfigurationLocationArgs']] = None,
                 multi_cdn_settings: Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs'] = None):
        """
        :param builtins.int capacity_alerts_threshold: Represents the threshold for sending alerts.
        :param builtins.str comments: Additional information provided by user which can help to differentiate or track changes of the configuration.
        :param builtins.str config_name: Name of the configuration.
        :param builtins.str contract_id: Contract ID with Cloud Wrapper entitlement.
        :param builtins.int id: Unique identifier of a Cloud Wrapper configuration.
        :param builtins.str last_activated_by: User to last activate the configuration.
        :param builtins.str last_activated_date: ISO format date that represents when the configuration was last activated successfully.
        :param builtins.str last_updated_by: User to last modify the configuration.
        :param builtins.str last_updated_date: ISO format date that represents when the configuration was last edited.
        :param Sequence[builtins.str] notification_emails: Email addresses to receive notifications.
        :param Sequence[builtins.str] property_ids: List of properties belonging to media delivery products. Properties need to be unique across configurations.
        :param builtins.bool retain_idle_objects: Retain idle objects beyond their max idle lifetime.
        :param builtins.str status: Current state of the provisioning of the configuration, either SAVED, IN_PROGRESS, ACTIVE, DELETE_IN_PROGRESS, or FAILED.
        :param Sequence['GetCloudwrapperConfigurationsConfigurationLocationArgs'] locations: List of all unused properties.
        :param 'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs' multi_cdn_settings: Specify details about the Multi CDN settings.
        """
        pulumi.set(__self__, "capacity_alerts_threshold", capacity_alerts_threshold)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "config_name", config_name)
        pulumi.set(__self__, "contract_id", contract_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_activated_by", last_activated_by)
        pulumi.set(__self__, "last_activated_date", last_activated_date)
        pulumi.set(__self__, "last_updated_by", last_updated_by)
        pulumi.set(__self__, "last_updated_date", last_updated_date)
        pulumi.set(__self__, "notification_emails", notification_emails)
        pulumi.set(__self__, "property_ids", property_ids)
        pulumi.set(__self__, "retain_idle_objects", retain_idle_objects)
        pulumi.set(__self__, "status", status)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if multi_cdn_settings is not None:
            pulumi.set(__self__, "multi_cdn_settings", multi_cdn_settings)

    @property
    @pulumi.getter(name="capacityAlertsThreshold")
    def capacity_alerts_threshold(self) -> builtins.int:
        """
        Represents the threshold for sending alerts.
        """
        return pulumi.get(self, "capacity_alerts_threshold")

    @capacity_alerts_threshold.setter
    def capacity_alerts_threshold(self, value: builtins.int):
        pulumi.set(self, "capacity_alerts_threshold", value)

    @property
    @pulumi.getter
    def comments(self) -> builtins.str:
        """
        Additional information provided by user which can help to differentiate or track changes of the configuration.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: builtins.str):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> builtins.str:
        """
        Name of the configuration.
        """
        return pulumi.get(self, "config_name")

    @config_name.setter
    def config_name(self, value: builtins.str):
        pulumi.set(self, "config_name", value)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> builtins.str:
        """
        Contract ID with Cloud Wrapper entitlement.
        """
        return pulumi.get(self, "contract_id")

    @contract_id.setter
    def contract_id(self, value: builtins.str):
        pulumi.set(self, "contract_id", value)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier of a Cloud Wrapper configuration.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: builtins.int):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lastActivatedBy")
    def last_activated_by(self) -> builtins.str:
        """
        User to last activate the configuration.
        """
        return pulumi.get(self, "last_activated_by")

    @last_activated_by.setter
    def last_activated_by(self, value: builtins.str):
        pulumi.set(self, "last_activated_by", value)

    @property
    @pulumi.getter(name="lastActivatedDate")
    def last_activated_date(self) -> builtins.str:
        """
        ISO format date that represents when the configuration was last activated successfully.
        """
        return pulumi.get(self, "last_activated_date")

    @last_activated_date.setter
    def last_activated_date(self, value: builtins.str):
        pulumi.set(self, "last_activated_date", value)

    @property
    @pulumi.getter(name="lastUpdatedBy")
    def last_updated_by(self) -> builtins.str:
        """
        User to last modify the configuration.
        """
        return pulumi.get(self, "last_updated_by")

    @last_updated_by.setter
    def last_updated_by(self, value: builtins.str):
        pulumi.set(self, "last_updated_by", value)

    @property
    @pulumi.getter(name="lastUpdatedDate")
    def last_updated_date(self) -> builtins.str:
        """
        ISO format date that represents when the configuration was last edited.
        """
        return pulumi.get(self, "last_updated_date")

    @last_updated_date.setter
    def last_updated_date(self, value: builtins.str):
        pulumi.set(self, "last_updated_date", value)

    @property
    @pulumi.getter(name="notificationEmails")
    def notification_emails(self) -> Sequence[builtins.str]:
        """
        Email addresses to receive notifications.
        """
        return pulumi.get(self, "notification_emails")

    @notification_emails.setter
    def notification_emails(self, value: Sequence[builtins.str]):
        pulumi.set(self, "notification_emails", value)

    @property
    @pulumi.getter(name="propertyIds")
    def property_ids(self) -> Sequence[builtins.str]:
        """
        List of properties belonging to media delivery products. Properties need to be unique across configurations.
        """
        return pulumi.get(self, "property_ids")

    @property_ids.setter
    def property_ids(self, value: Sequence[builtins.str]):
        pulumi.set(self, "property_ids", value)

    @property
    @pulumi.getter(name="retainIdleObjects")
    def retain_idle_objects(self) -> builtins.bool:
        """
        Retain idle objects beyond their max idle lifetime.
        """
        return pulumi.get(self, "retain_idle_objects")

    @retain_idle_objects.setter
    def retain_idle_objects(self, value: builtins.bool):
        pulumi.set(self, "retain_idle_objects", value)

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Current state of the provisioning of the configuration, either SAVED, IN_PROGRESS, ACTIVE, DELETE_IN_PROGRESS, or FAILED.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: builtins.str):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['GetCloudwrapperConfigurationsConfigurationLocationArgs']]:
        """
        List of all unused properties.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[Sequence['GetCloudwrapperConfigurationsConfigurationLocationArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="multiCdnSettings")
    def multi_cdn_settings(self) -> Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs']:
        """
        Specify details about the Multi CDN settings.
        """
        return pulumi.get(self, "multi_cdn_settings")

    @multi_cdn_settings.setter
    def multi_cdn_settings(self, value: Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs']):
        pulumi.set(self, "multi_cdn_settings", value)


if not MYPY:
    class GetCloudwrapperConfigurationsConfigurationLocationArgsDict(TypedDict):
        capacity: 'GetCloudwrapperConfigurationsConfigurationLocationCapacityArgsDict'
        """
        The capacity assigned to this configuration's location.
        """
        comments: builtins.str
        """
        Additional comments provided by user.
        """
        map_name: builtins.str
        """
        The name of the map.
        """
        traffic_type_id: builtins.int
        """
        Unique identifier for the location and traffic type combination.
        """
elif False:
    GetCloudwrapperConfigurationsConfigurationLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationLocationArgs:
    def __init__(__self__, *,
                 capacity: 'GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs',
                 comments: builtins.str,
                 map_name: builtins.str,
                 traffic_type_id: builtins.int):
        """
        :param 'GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs' capacity: The capacity assigned to this configuration's location.
        :param builtins.str comments: Additional comments provided by user.
        :param builtins.str map_name: The name of the map.
        :param builtins.int traffic_type_id: Unique identifier for the location and traffic type combination.
        """
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "map_name", map_name)
        pulumi.set(__self__, "traffic_type_id", traffic_type_id)

    @property
    @pulumi.getter
    def capacity(self) -> 'GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs':
        """
        The capacity assigned to this configuration's location.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: 'GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs'):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def comments(self) -> builtins.str:
        """
        Additional comments provided by user.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: builtins.str):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="mapName")
    def map_name(self) -> builtins.str:
        """
        The name of the map.
        """
        return pulumi.get(self, "map_name")

    @map_name.setter
    def map_name(self, value: builtins.str):
        pulumi.set(self, "map_name", value)

    @property
    @pulumi.getter(name="trafficTypeId")
    def traffic_type_id(self) -> builtins.int:
        """
        Unique identifier for the location and traffic type combination.
        """
        return pulumi.get(self, "traffic_type_id")

    @traffic_type_id.setter
    def traffic_type_id(self, value: builtins.int):
        pulumi.set(self, "traffic_type_id", value)


if not MYPY:
    class GetCloudwrapperConfigurationsConfigurationLocationCapacityArgsDict(TypedDict):
        unit: builtins.str
        value: builtins.int
elif False:
    GetCloudwrapperConfigurationsConfigurationLocationCapacityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs:
    def __init__(__self__, *,
                 unit: builtins.str,
                 value: builtins.int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> builtins.str:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: builtins.str):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> builtins.int:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: builtins.int):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgsDict(TypedDict):
        enable_soft_alerts: builtins.bool
        """
        Option to opt out of alerts based on soft limits of bandwidth usage.
        """
        bocc: NotRequired['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccArgsDict']
        """
        Specify diagnostic data beacons details.
        """
        cdns: NotRequired[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgsDict']]
        """
        List of CDN added for the configuration.
        """
        data_streams: NotRequired['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsArgsDict']
        """
        Specifies data streams details.
        """
        origins: NotRequired[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginArgsDict']]
        """
        List of origins corresponding to the properties selected in the configuration.
        """
elif False:
    GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs:
    def __init__(__self__, *,
                 enable_soft_alerts: builtins.bool,
                 bocc: Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccArgs'] = None,
                 cdns: Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs']] = None,
                 data_streams: Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsArgs'] = None,
                 origins: Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginArgs']] = None):
        """
        :param builtins.bool enable_soft_alerts: Option to opt out of alerts based on soft limits of bandwidth usage.
        :param 'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccArgs' bocc: Specify diagnostic data beacons details.
        :param Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs'] cdns: List of CDN added for the configuration.
        :param 'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsArgs' data_streams: Specifies data streams details.
        :param Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginArgs'] origins: List of origins corresponding to the properties selected in the configuration.
        """
        pulumi.set(__self__, "enable_soft_alerts", enable_soft_alerts)
        if bocc is not None:
            pulumi.set(__self__, "bocc", bocc)
        if cdns is not None:
            pulumi.set(__self__, "cdns", cdns)
        if data_streams is not None:
            pulumi.set(__self__, "data_streams", data_streams)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)

    @property
    @pulumi.getter(name="enableSoftAlerts")
    def enable_soft_alerts(self) -> builtins.bool:
        """
        Option to opt out of alerts based on soft limits of bandwidth usage.
        """
        return pulumi.get(self, "enable_soft_alerts")

    @enable_soft_alerts.setter
    def enable_soft_alerts(self, value: builtins.bool):
        pulumi.set(self, "enable_soft_alerts", value)

    @property
    @pulumi.getter
    def bocc(self) -> Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccArgs']:
        """
        Specify diagnostic data beacons details.
        """
        return pulumi.get(self, "bocc")

    @bocc.setter
    def bocc(self, value: Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccArgs']):
        pulumi.set(self, "bocc", value)

    @property
    @pulumi.getter
    def cdns(self) -> Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs']]:
        """
        List of CDN added for the configuration.
        """
        return pulumi.get(self, "cdns")

    @cdns.setter
    def cdns(self, value: Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs']]):
        pulumi.set(self, "cdns", value)

    @property
    @pulumi.getter(name="dataStreams")
    def data_streams(self) -> Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsArgs']:
        """
        Specifies data streams details.
        """
        return pulumi.get(self, "data_streams")

    @data_streams.setter
    def data_streams(self, value: Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsArgs']):
        pulumi.set(self, "data_streams", value)

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginArgs']]:
        """
        List of origins corresponding to the properties selected in the configuration.
        """
        return pulumi.get(self, "origins")

    @origins.setter
    def origins(self, value: Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginArgs']]):
        pulumi.set(self, "origins", value)


if not MYPY:
    class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccArgsDict(TypedDict):
        conditional_sampling_frequency: builtins.str
        """
        The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
        """
        enabled: builtins.bool
        """
        Enable diagnostic data beacons for consumption by the Broadcast Operations Control Center.
        """
        forward_type: builtins.str
        """
        Select whether to beacon diagnostics data for internal ORIGIN_ONLY, MIDGRESS_ONLY, or both ORIGIN_AND_MIDGRESS forwards.
        """
        request_type: builtins.str
        """
        Select whether to beacon diagnostics data for EDGE_ONLY or EDGE_AND_MIDGRESS requests.
        """
        sampling_frequency: builtins.str
        """
        The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
        """
elif False:
    GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccArgs:
    def __init__(__self__, *,
                 conditional_sampling_frequency: builtins.str,
                 enabled: builtins.bool,
                 forward_type: builtins.str,
                 request_type: builtins.str,
                 sampling_frequency: builtins.str):
        """
        :param builtins.str conditional_sampling_frequency: The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
        :param builtins.bool enabled: Enable diagnostic data beacons for consumption by the Broadcast Operations Control Center.
        :param builtins.str forward_type: Select whether to beacon diagnostics data for internal ORIGIN_ONLY, MIDGRESS_ONLY, or both ORIGIN_AND_MIDGRESS forwards.
        :param builtins.str request_type: Select whether to beacon diagnostics data for EDGE_ONLY or EDGE_AND_MIDGRESS requests.
        :param builtins.str sampling_frequency: The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
        """
        pulumi.set(__self__, "conditional_sampling_frequency", conditional_sampling_frequency)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "forward_type", forward_type)
        pulumi.set(__self__, "request_type", request_type)
        pulumi.set(__self__, "sampling_frequency", sampling_frequency)

    @property
    @pulumi.getter(name="conditionalSamplingFrequency")
    def conditional_sampling_frequency(self) -> builtins.str:
        """
        The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
        """
        return pulumi.get(self, "conditional_sampling_frequency")

    @conditional_sampling_frequency.setter
    def conditional_sampling_frequency(self, value: builtins.str):
        pulumi.set(self, "conditional_sampling_frequency", value)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Enable diagnostic data beacons for consumption by the Broadcast Operations Control Center.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: builtins.bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="forwardType")
    def forward_type(self) -> builtins.str:
        """
        Select whether to beacon diagnostics data for internal ORIGIN_ONLY, MIDGRESS_ONLY, or both ORIGIN_AND_MIDGRESS forwards.
        """
        return pulumi.get(self, "forward_type")

    @forward_type.setter
    def forward_type(self, value: builtins.str):
        pulumi.set(self, "forward_type", value)

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> builtins.str:
        """
        Select whether to beacon diagnostics data for EDGE_ONLY or EDGE_AND_MIDGRESS requests.
        """
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: builtins.str):
        pulumi.set(self, "request_type", value)

    @property
    @pulumi.getter(name="samplingFrequency")
    def sampling_frequency(self) -> builtins.str:
        """
        The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
        """
        return pulumi.get(self, "sampling_frequency")

    @sampling_frequency.setter
    def sampling_frequency(self, value: builtins.str):
        pulumi.set(self, "sampling_frequency", value)


if not MYPY:
    class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgsDict(TypedDict):
        cdn_code: builtins.str
        """
        Unique identifier for the CDN.
        """
        enabled: builtins.bool
        """
        Enable CDN.
        """
        https_only: builtins.bool
        """
        Specify whether CDN communication is HTTPS only.
        """
        ip_acl_cidrs: Sequence[builtins.str]
        """
        Configure an access control list using IP addresses in CIDR notation.
        """
        cdn_auth_keys: NotRequired[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgsDict']]
        """
        List of auth keys configured for the CDN.
        """
elif False:
    GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs:
    def __init__(__self__, *,
                 cdn_code: builtins.str,
                 enabled: builtins.bool,
                 https_only: builtins.bool,
                 ip_acl_cidrs: Sequence[builtins.str],
                 cdn_auth_keys: Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs']] = None):
        """
        :param builtins.str cdn_code: Unique identifier for the CDN.
        :param builtins.bool enabled: Enable CDN.
        :param builtins.bool https_only: Specify whether CDN communication is HTTPS only.
        :param Sequence[builtins.str] ip_acl_cidrs: Configure an access control list using IP addresses in CIDR notation.
        :param Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs'] cdn_auth_keys: List of auth keys configured for the CDN.
        """
        pulumi.set(__self__, "cdn_code", cdn_code)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "https_only", https_only)
        pulumi.set(__self__, "ip_acl_cidrs", ip_acl_cidrs)
        if cdn_auth_keys is not None:
            pulumi.set(__self__, "cdn_auth_keys", cdn_auth_keys)

    @property
    @pulumi.getter(name="cdnCode")
    def cdn_code(self) -> builtins.str:
        """
        Unique identifier for the CDN.
        """
        return pulumi.get(self, "cdn_code")

    @cdn_code.setter
    def cdn_code(self, value: builtins.str):
        pulumi.set(self, "cdn_code", value)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Enable CDN.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: builtins.bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="httpsOnly")
    def https_only(self) -> builtins.bool:
        """
        Specify whether CDN communication is HTTPS only.
        """
        return pulumi.get(self, "https_only")

    @https_only.setter
    def https_only(self, value: builtins.bool):
        pulumi.set(self, "https_only", value)

    @property
    @pulumi.getter(name="ipAclCidrs")
    def ip_acl_cidrs(self) -> Sequence[builtins.str]:
        """
        Configure an access control list using IP addresses in CIDR notation.
        """
        return pulumi.get(self, "ip_acl_cidrs")

    @ip_acl_cidrs.setter
    def ip_acl_cidrs(self, value: Sequence[builtins.str]):
        pulumi.set(self, "ip_acl_cidrs", value)

    @property
    @pulumi.getter(name="cdnAuthKeys")
    def cdn_auth_keys(self) -> Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs']]:
        """
        List of auth keys configured for the CDN.
        """
        return pulumi.get(self, "cdn_auth_keys")

    @cdn_auth_keys.setter
    def cdn_auth_keys(self, value: Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs']]):
        pulumi.set(self, "cdn_auth_keys", value)


if not MYPY:
    class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgsDict(TypedDict):
        auth_key_name: builtins.str
        """
        The name of the auth key.
        """
        expiry_date: builtins.str
        """
        The expirty date of an auth key.
        """
        header_name: builtins.str
        """
        The header name of an auth key.
        """
        secret: builtins.str
        """
        The secret of an auth key.
        """
elif False:
    GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs:
    def __init__(__self__, *,
                 auth_key_name: builtins.str,
                 expiry_date: builtins.str,
                 header_name: builtins.str,
                 secret: builtins.str):
        """
        :param builtins.str auth_key_name: The name of the auth key.
        :param builtins.str expiry_date: The expirty date of an auth key.
        :param builtins.str header_name: The header name of an auth key.
        :param builtins.str secret: The secret of an auth key.
        """
        pulumi.set(__self__, "auth_key_name", auth_key_name)
        pulumi.set(__self__, "expiry_date", expiry_date)
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="authKeyName")
    def auth_key_name(self) -> builtins.str:
        """
        The name of the auth key.
        """
        return pulumi.get(self, "auth_key_name")

    @auth_key_name.setter
    def auth_key_name(self, value: builtins.str):
        pulumi.set(self, "auth_key_name", value)

    @property
    @pulumi.getter(name="expiryDate")
    def expiry_date(self) -> builtins.str:
        """
        The expirty date of an auth key.
        """
        return pulumi.get(self, "expiry_date")

    @expiry_date.setter
    def expiry_date(self, value: builtins.str):
        pulumi.set(self, "expiry_date", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> builtins.str:
        """
        The header name of an auth key.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: builtins.str):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def secret(self) -> builtins.str:
        """
        The secret of an auth key.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: builtins.str):
        pulumi.set(self, "secret", value)


if not MYPY:
    class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsArgsDict(TypedDict):
        data_stream_ids: Sequence[builtins.int]
        """
        Unique identifiers of the Data Streams.
        """
        enabled: builtins.bool
        """
        Enables DataStream reporting.
        """
        sampling_rate: builtins.int
        """
        Specifies the percentage of log data you want to collect for this configuration.
        """
elif False:
    GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsArgs:
    def __init__(__self__, *,
                 data_stream_ids: Sequence[builtins.int],
                 enabled: builtins.bool,
                 sampling_rate: builtins.int):
        """
        :param Sequence[builtins.int] data_stream_ids: Unique identifiers of the Data Streams.
        :param builtins.bool enabled: Enables DataStream reporting.
        :param builtins.int sampling_rate: Specifies the percentage of log data you want to collect for this configuration.
        """
        pulumi.set(__self__, "data_stream_ids", data_stream_ids)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "sampling_rate", sampling_rate)

    @property
    @pulumi.getter(name="dataStreamIds")
    def data_stream_ids(self) -> Sequence[builtins.int]:
        """
        Unique identifiers of the Data Streams.
        """
        return pulumi.get(self, "data_stream_ids")

    @data_stream_ids.setter
    def data_stream_ids(self, value: Sequence[builtins.int]):
        pulumi.set(self, "data_stream_ids", value)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Enables DataStream reporting.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: builtins.bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> builtins.int:
        """
        Specifies the percentage of log data you want to collect for this configuration.
        """
        return pulumi.get(self, "sampling_rate")

    @sampling_rate.setter
    def sampling_rate(self, value: builtins.int):
        pulumi.set(self, "sampling_rate", value)


if not MYPY:
    class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginArgsDict(TypedDict):
        hostname: builtins.str
        """
        Origins hostname corresponding to the Akamai Delivery Property.
        """
        origin_id: builtins.str
        """
        Origin identifier and will be used to generated Multi CDN host names.
        """
        property_id: builtins.int
        """
        Property ID of the property that origin belongs to.
        """
elif False:
    GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginArgs:
    def __init__(__self__, *,
                 hostname: builtins.str,
                 origin_id: builtins.str,
                 property_id: builtins.int):
        """
        :param builtins.str hostname: Origins hostname corresponding to the Akamai Delivery Property.
        :param builtins.str origin_id: Origin identifier and will be used to generated Multi CDN host names.
        :param builtins.int property_id: Property ID of the property that origin belongs to.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "origin_id", origin_id)
        pulumi.set(__self__, "property_id", property_id)

    @property
    @pulumi.getter
    def hostname(self) -> builtins.str:
        """
        Origins hostname corresponding to the Akamai Delivery Property.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: builtins.str):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> builtins.str:
        """
        Origin identifier and will be used to generated Multi CDN host names.
        """
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: builtins.str):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> builtins.int:
        """
        Property ID of the property that origin belongs to.
        """
        return pulumi.get(self, "property_id")

    @property_id.setter
    def property_id(self, value: builtins.int):
        pulumi.set(self, "property_id", value)


if not MYPY:
    class GetCloudwrapperLocationsLocationArgsDict(TypedDict):
        location_id: builtins.int
        """
        Unique identifier of the location.
        """
        location_name: builtins.str
        """
        Name of the location.
        """
        multi_cdn_location_id: builtins.str
        """
        Unique identifier of the multi CDN location.
        """
        traffic_types: NotRequired[Sequence['GetCloudwrapperLocationsLocationTrafficTypeArgsDict']]
        """
        List of traffic types for the location.
        """
elif False:
    GetCloudwrapperLocationsLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperLocationsLocationArgs:
    def __init__(__self__, *,
                 location_id: builtins.int,
                 location_name: builtins.str,
                 multi_cdn_location_id: builtins.str,
                 traffic_types: Optional[Sequence['GetCloudwrapperLocationsLocationTrafficTypeArgs']] = None):
        """
        :param builtins.int location_id: Unique identifier of the location.
        :param builtins.str location_name: Name of the location.
        :param builtins.str multi_cdn_location_id: Unique identifier of the multi CDN location.
        :param Sequence['GetCloudwrapperLocationsLocationTrafficTypeArgs'] traffic_types: List of traffic types for the location.
        """
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "location_name", location_name)
        pulumi.set(__self__, "multi_cdn_location_id", multi_cdn_location_id)
        if traffic_types is not None:
            pulumi.set(__self__, "traffic_types", traffic_types)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> builtins.int:
        """
        Unique identifier of the location.
        """
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: builtins.int):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> builtins.str:
        """
        Name of the location.
        """
        return pulumi.get(self, "location_name")

    @location_name.setter
    def location_name(self, value: builtins.str):
        pulumi.set(self, "location_name", value)

    @property
    @pulumi.getter(name="multiCdnLocationId")
    def multi_cdn_location_id(self) -> builtins.str:
        """
        Unique identifier of the multi CDN location.
        """
        return pulumi.get(self, "multi_cdn_location_id")

    @multi_cdn_location_id.setter
    def multi_cdn_location_id(self, value: builtins.str):
        pulumi.set(self, "multi_cdn_location_id", value)

    @property
    @pulumi.getter(name="trafficTypes")
    def traffic_types(self) -> Optional[Sequence['GetCloudwrapperLocationsLocationTrafficTypeArgs']]:
        """
        List of traffic types for the location.
        """
        return pulumi.get(self, "traffic_types")

    @traffic_types.setter
    def traffic_types(self, value: Optional[Sequence['GetCloudwrapperLocationsLocationTrafficTypeArgs']]):
        pulumi.set(self, "traffic_types", value)


if not MYPY:
    class GetCloudwrapperLocationsLocationTrafficTypeArgsDict(TypedDict):
        location_id: builtins.str
        """
        Represents the failover map.
        """
        traffic_type: builtins.str
        """
        Represents the traffic type. LIVE applies to low-latency media traffic, such as live streaming. LIVE_VOD applies to redundant media traffic, like video on demand content. WEB_STANDARD_TLS or WEB_ENHANCED_TLS applies to web content using Standard TLS security or Enhanced TLS security, respectively.
        """
        traffic_type_id: builtins.int
        """
        Unique identifier for the location and traffic type combination.
        """
elif False:
    GetCloudwrapperLocationsLocationTrafficTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperLocationsLocationTrafficTypeArgs:
    def __init__(__self__, *,
                 location_id: builtins.str,
                 traffic_type: builtins.str,
                 traffic_type_id: builtins.int):
        """
        :param builtins.str location_id: Represents the failover map.
        :param builtins.str traffic_type: Represents the traffic type. LIVE applies to low-latency media traffic, such as live streaming. LIVE_VOD applies to redundant media traffic, like video on demand content. WEB_STANDARD_TLS or WEB_ENHANCED_TLS applies to web content using Standard TLS security or Enhanced TLS security, respectively.
        :param builtins.int traffic_type_id: Unique identifier for the location and traffic type combination.
        """
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "traffic_type", traffic_type)
        pulumi.set(__self__, "traffic_type_id", traffic_type_id)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> builtins.str:
        """
        Represents the failover map.
        """
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: builtins.str):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> builtins.str:
        """
        Represents the traffic type. LIVE applies to low-latency media traffic, such as live streaming. LIVE_VOD applies to redundant media traffic, like video on demand content. WEB_STANDARD_TLS or WEB_ENHANCED_TLS applies to web content using Standard TLS security or Enhanced TLS security, respectively.
        """
        return pulumi.get(self, "traffic_type")

    @traffic_type.setter
    def traffic_type(self, value: builtins.str):
        pulumi.set(self, "traffic_type", value)

    @property
    @pulumi.getter(name="trafficTypeId")
    def traffic_type_id(self) -> builtins.int:
        """
        Unique identifier for the location and traffic type combination.
        """
        return pulumi.get(self, "traffic_type_id")

    @traffic_type_id.setter
    def traffic_type_id(self, value: builtins.int):
        pulumi.set(self, "traffic_type_id", value)


if not MYPY:
    class GetCloudwrapperPropertiesPropertyArgsDict(TypedDict):
        contract_id: builtins.str
        """
        Contract ID having Cloud Wrapper entitlement.
        """
        group_id: builtins.int
        """
        ID of the group which the property belongs to.
        """
        property_id: builtins.int
        """
        Property ID of the property.
        """
        property_name: builtins.str
        """
        Name of the property belonging to the origin.
        """
        type: builtins.str
        """
        The type of property. MEDIA applies to live or video on demand content. WEB applies to website or app content.
        """
elif False:
    GetCloudwrapperPropertiesPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCloudwrapperPropertiesPropertyArgs:
    def __init__(__self__, *,
                 contract_id: builtins.str,
                 group_id: builtins.int,
                 property_id: builtins.int,
                 property_name: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str contract_id: Contract ID having Cloud Wrapper entitlement.
        :param builtins.int group_id: ID of the group which the property belongs to.
        :param builtins.int property_id: Property ID of the property.
        :param builtins.str property_name: Name of the property belonging to the origin.
        :param builtins.str type: The type of property. MEDIA applies to live or video on demand content. WEB applies to website or app content.
        """
        pulumi.set(__self__, "contract_id", contract_id)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "property_id", property_id)
        pulumi.set(__self__, "property_name", property_name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> builtins.str:
        """
        Contract ID having Cloud Wrapper entitlement.
        """
        return pulumi.get(self, "contract_id")

    @contract_id.setter
    def contract_id(self, value: builtins.str):
        pulumi.set(self, "contract_id", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> builtins.int:
        """
        ID of the group which the property belongs to.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: builtins.int):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> builtins.int:
        """
        Property ID of the property.
        """
        return pulumi.get(self, "property_id")

    @property_id.setter
    def property_id(self, value: builtins.int):
        pulumi.set(self, "property_id", value)

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> builtins.str:
        """
        Name of the property belonging to the origin.
        """
        return pulumi.get(self, "property_name")

    @property_name.setter
    def property_name(self, value: builtins.str):
        pulumi.set(self, "property_name", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of property. MEDIA applies to live or video on demand content. WEB applies to website or app content.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)


if not MYPY:
    class GetGtmAsmapAssignmentArgsDict(TypedDict):
        as_numbers: Sequence[builtins.int]
        """
        Specifies an array of AS numbers.
        """
        datacenter_id: builtins.int
        """
        A unique identifier for an existing data center in the domain.
        """
        nickname: builtins.str
        """
        A descriptive label for the group.
        """
elif False:
    GetGtmAsmapAssignmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmAsmapAssignmentArgs:
    def __init__(__self__, *,
                 as_numbers: Sequence[builtins.int],
                 datacenter_id: builtins.int,
                 nickname: builtins.str):
        """
        :param Sequence[builtins.int] as_numbers: Specifies an array of AS numbers.
        :param builtins.int datacenter_id: A unique identifier for an existing data center in the domain.
        :param builtins.str nickname: A descriptive label for the group.
        """
        pulumi.set(__self__, "as_numbers", as_numbers)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="asNumbers")
    def as_numbers(self) -> Sequence[builtins.int]:
        """
        Specifies an array of AS numbers.
        """
        return pulumi.get(self, "as_numbers")

    @as_numbers.setter
    def as_numbers(self, value: Sequence[builtins.int]):
        pulumi.set(self, "as_numbers", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> builtins.int:
        """
        A unique identifier for an existing data center in the domain.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: builtins.int):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> builtins.str:
        """
        A descriptive label for the group.
        """
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: builtins.str):
        pulumi.set(self, "nickname", value)


if not MYPY:
    class GetGtmAsmapDefaultDatacenterArgsDict(TypedDict):
        datacenter_id: builtins.int
        """
        For each property, an identifier for all other AS zones
        """
        nickname: builtins.str
        """
        A descriptive label for all other AS zones
        """
elif False:
    GetGtmAsmapDefaultDatacenterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmAsmapDefaultDatacenterArgs:
    def __init__(__self__, *,
                 datacenter_id: builtins.int,
                 nickname: builtins.str):
        """
        :param builtins.int datacenter_id: For each property, an identifier for all other AS zones
        :param builtins.str nickname: A descriptive label for all other AS zones
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> builtins.int:
        """
        For each property, an identifier for all other AS zones
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: builtins.int):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> builtins.str:
        """
        A descriptive label for all other AS zones
        """
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: builtins.str):
        pulumi.set(self, "nickname", value)


if not MYPY:
    class GetGtmAsmapLinkArgsDict(TypedDict):
        href: builtins.str
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        rel: builtins.str
        """
        Indicates the link relationship of the object.
        """
elif False:
    GetGtmAsmapLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmAsmapLinkArgs:
    def __init__(__self__, *,
                 href: builtins.str,
                 rel: builtins.str):
        """
        :param builtins.str href: A hypermedia link to the complete URL that uniquely defines a resource.
        :param builtins.str rel: Indicates the link relationship of the object.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @property
    @pulumi.getter
    def href(self) -> builtins.str:
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: builtins.str):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def rel(self) -> builtins.str:
        """
        Indicates the link relationship of the object.
        """
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: builtins.str):
        pulumi.set(self, "rel", value)


if not MYPY:
    class GetGtmCidrmapAssignmentArgsDict(TypedDict):
        blocks: Sequence[builtins.str]
        """
        Specifies an array of CIDR blocks.
        """
        datacenter_id: builtins.int
        """
        A unique identifier for an existing data center in the domain.
        """
        nickname: builtins.str
        """
        A descriptive label for the CIDR zone group.
        """
elif False:
    GetGtmCidrmapAssignmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmCidrmapAssignmentArgs:
    def __init__(__self__, *,
                 blocks: Sequence[builtins.str],
                 datacenter_id: builtins.int,
                 nickname: builtins.str):
        """
        :param Sequence[builtins.str] blocks: Specifies an array of CIDR blocks.
        :param builtins.int datacenter_id: A unique identifier for an existing data center in the domain.
        :param builtins.str nickname: A descriptive label for the CIDR zone group.
        """
        pulumi.set(__self__, "blocks", blocks)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter
    def blocks(self) -> Sequence[builtins.str]:
        """
        Specifies an array of CIDR blocks.
        """
        return pulumi.get(self, "blocks")

    @blocks.setter
    def blocks(self, value: Sequence[builtins.str]):
        pulumi.set(self, "blocks", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> builtins.int:
        """
        A unique identifier for an existing data center in the domain.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: builtins.int):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> builtins.str:
        """
        A descriptive label for the CIDR zone group.
        """
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: builtins.str):
        pulumi.set(self, "nickname", value)


if not MYPY:
    class GetGtmCidrmapDefaultDatacenterArgsDict(TypedDict):
        datacenter_id: builtins.int
        """
        For each property, an identifier for all other CIDR zones' CNAME.
        """
        nickname: builtins.str
        """
        A descriptive label for all other CIDR blocks.
        """
elif False:
    GetGtmCidrmapDefaultDatacenterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmCidrmapDefaultDatacenterArgs:
    def __init__(__self__, *,
                 datacenter_id: builtins.int,
                 nickname: builtins.str):
        """
        :param builtins.int datacenter_id: For each property, an identifier for all other CIDR zones' CNAME.
        :param builtins.str nickname: A descriptive label for all other CIDR blocks.
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> builtins.int:
        """
        For each property, an identifier for all other CIDR zones' CNAME.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: builtins.int):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> builtins.str:
        """
        A descriptive label for all other CIDR blocks.
        """
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: builtins.str):
        pulumi.set(self, "nickname", value)


if not MYPY:
    class GetGtmCidrmapLinkArgsDict(TypedDict):
        href: builtins.str
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        rel: builtins.str
        """
        Indicates the link relationship of the object.
        """
elif False:
    GetGtmCidrmapLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmCidrmapLinkArgs:
    def __init__(__self__, *,
                 href: builtins.str,
                 rel: builtins.str):
        """
        :param builtins.str href: A hypermedia link to the complete URL that uniquely defines a resource.
        :param builtins.str rel: Indicates the link relationship of the object.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @property
    @pulumi.getter
    def href(self) -> builtins.str:
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: builtins.str):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def rel(self) -> builtins.str:
        """
        Indicates the link relationship of the object.
        """
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: builtins.str):
        pulumi.set(self, "rel", value)


if not MYPY:
    class GetGtmDomainAsMapArgsDict(TypedDict):
        name: builtins.str
        """
        A descriptive label for the AS map.
        """
        assignments: NotRequired[Sequence['GetGtmDomainAsMapAssignmentArgsDict']]
        """
        Contains information about the AS zone groupings of AS IDs.
        """
        default_datacenter: NotRequired['GetGtmDomainAsMapDefaultDatacenterArgsDict']
        """
        A placeholder for all other AS zones, AS IDs not found in these AS zones.
        """
        links: NotRequired[Sequence['GetGtmDomainAsMapLinkArgsDict']]
        """
        Specifies the URL path that allows direct navigation to the As map.
        """
elif False:
    GetGtmDomainAsMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainAsMapArgs:
    def __init__(__self__, *,
                 name: builtins.str,
                 assignments: Optional[Sequence['GetGtmDomainAsMapAssignmentArgs']] = None,
                 default_datacenter: Optional['GetGtmDomainAsMapDefaultDatacenterArgs'] = None,
                 links: Optional[Sequence['GetGtmDomainAsMapLinkArgs']] = None):
        """
        :param builtins.str name: A descriptive label for the AS map.
        :param Sequence['GetGtmDomainAsMapAssignmentArgs'] assignments: Contains information about the AS zone groupings of AS IDs.
        :param 'GetGtmDomainAsMapDefaultDatacenterArgs' default_datacenter: A placeholder for all other AS zones, AS IDs not found in these AS zones.
        :param Sequence['GetGtmDomainAsMapLinkArgs'] links: Specifies the URL path that allows direct navigation to the As map.
        """
        pulumi.set(__self__, "name", name)
        if assignments is not None:
            pulumi.set(__self__, "assignments", assignments)
        if default_datacenter is not None:
            pulumi.set(__self__, "default_datacenter", default_datacenter)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A descriptive label for the AS map.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def assignments(self) -> Optional[Sequence['GetGtmDomainAsMapAssignmentArgs']]:
        """
        Contains information about the AS zone groupings of AS IDs.
        """
        return pulumi.get(self, "assignments")

    @assignments.setter
    def assignments(self, value: Optional[Sequence['GetGtmDomainAsMapAssignmentArgs']]):
        pulumi.set(self, "assignments", value)

    @property
    @pulumi.getter(name="defaultDatacenter")
    def default_datacenter(self) -> Optional['GetGtmDomainAsMapDefaultDatacenterArgs']:
        """
        A placeholder for all other AS zones, AS IDs not found in these AS zones.
        """
        return pulumi.get(self, "default_datacenter")

    @default_datacenter.setter
    def default_datacenter(self, value: Optional['GetGtmDomainAsMapDefaultDatacenterArgs']):
        pulumi.set(self, "default_datacenter", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['GetGtmDomainAsMapLinkArgs']]:
        """
        Specifies the URL path that allows direct navigation to the As map.
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[Sequence['GetGtmDomainAsMapLinkArgs']]):
        pulumi.set(self, "links", value)


if not MYPY:
    class GetGtmDomainAsMapAssignmentArgsDict(TypedDict):
        as_numbers: Sequence[builtins.int]
        """
        Specifies an array of AS numbers.
        """
        datacenter_id: builtins.int
        """
        A unique identifier for an existing data center in the domain.
        """
        nickname: builtins.str
        """
        A descriptive label for all other AS zones.
        """
elif False:
    GetGtmDomainAsMapAssignmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainAsMapAssignmentArgs:
    def __init__(__self__, *,
                 as_numbers: Sequence[builtins.int],
                 datacenter_id: builtins.int,
                 nickname: builtins.str):
        """
        :param Sequence[builtins.int] as_numbers: Specifies an array of AS numbers.
        :param builtins.int datacenter_id: A unique identifier for an existing data center in the domain.
        :param builtins.str nickname: A descriptive label for all other AS zones.
        """
        pulumi.set(__self__, "as_numbers", as_numbers)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="asNumbers")
    def as_numbers(self) -> Sequence[builtins.int]:
        """
        Specifies an array of AS numbers.
        """
        return pulumi.get(self, "as_numbers")

    @as_numbers.setter
    def as_numbers(self, value: Sequence[builtins.int]):
        pulumi.set(self, "as_numbers", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> builtins.int:
        """
        A unique identifier for an existing data center in the domain.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: builtins.int):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> builtins.str:
        """
        A descriptive label for all other AS zones.
        """
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: builtins.str):
        pulumi.set(self, "nickname", value)


if not MYPY:
    class GetGtmDomainAsMapDefaultDatacenterArgsDict(TypedDict):
        datacenter_id: builtins.int
        """
        For each property, an identifier for all other AS zones' CNAME.
        """
        nickname: builtins.str
        """
        A descriptive label for all other AS zones.
        """
elif False:
    GetGtmDomainAsMapDefaultDatacenterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainAsMapDefaultDatacenterArgs:
    def __init__(__self__, *,
                 datacenter_id: builtins.int,
                 nickname: builtins.str):
        """
        :param builtins.int datacenter_id: For each property, an identifier for all other AS zones' CNAME.
        :param builtins.str nickname: A descriptive label for all other AS zones.
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> builtins.int:
        """
        For each property, an identifier for all other AS zones' CNAME.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: builtins.int):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> builtins.str:
        """
        A descriptive label for all other AS zones.
        """
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: builtins.str):
        pulumi.set(self, "nickname", value)


if not MYPY:
    class GetGtmDomainAsMapLinkArgsDict(TypedDict):
        href: builtins.str
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        rel: builtins.str
        """
        Indicates the link relationship of the object.
        """
elif False:
    GetGtmDomainAsMapLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainAsMapLinkArgs:
    def __init__(__self__, *,
                 href: builtins.str,
                 rel: builtins.str):
        """
        :param builtins.str href: A hypermedia link to the complete URL that uniquely defines a resource.
        :param builtins.str rel: Indicates the link relationship of the object.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @property
    @pulumi.getter
    def href(self) -> builtins.str:
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: builtins.str):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def rel(self) -> builtins.str:
        """
        Indicates the link relationship of the object.
        """
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: builtins.str):
        pulumi.set(self, "rel", value)


if not MYPY:
    class GetGtmDomainCidrMapArgsDict(TypedDict):
        name: builtins.str
        """
        Unique name for the CIDR map.
        """
        assignments: NotRequired[Sequence['GetGtmDomainCidrMapAssignmentArgsDict']]
        """
        Contains information about the CIDR zone groupings of CIDR blocks.
        """
        default_datacenter: NotRequired['GetGtmDomainCidrMapDefaultDatacenterArgsDict']
        """
        A placeholder for all other CIDR zones, CIDR blocks not found in these CIDR zones.
        """
        links: NotRequired[Sequence['GetGtmDomainCidrMapLinkArgsDict']]
        """
        Specifies the URL path that allows direct navigation to the CIDR map.
        """
elif False:
    GetGtmDomainCidrMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainCidrMapArgs:
    def __init__(__self__, *,
                 name: builtins.str,
                 assignments: Optional[Sequence['GetGtmDomainCidrMapAssignmentArgs']] = None,
                 default_datacenter: Optional['GetGtmDomainCidrMapDefaultDatacenterArgs'] = None,
                 links: Optional[Sequence['GetGtmDomainCidrMapLinkArgs']] = None):
        """
        :param builtins.str name: Unique name for the CIDR map.
        :param Sequence['GetGtmDomainCidrMapAssignmentArgs'] assignments: Contains information about the CIDR zone groupings of CIDR blocks.
        :param 'GetGtmDomainCidrMapDefaultDatacenterArgs' default_datacenter: A placeholder for all other CIDR zones, CIDR blocks not found in these CIDR zones.
        :param Sequence['GetGtmDomainCidrMapLinkArgs'] links: Specifies the URL path that allows direct navigation to the CIDR map.
        """
        pulumi.set(__self__, "name", name)
        if assignments is not None:
            pulumi.set(__self__, "assignments", assignments)
        if default_datacenter is not None:
            pulumi.set(__self__, "default_datacenter", default_datacenter)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Unique name for the CIDR map.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def assignments(self) -> Optional[Sequence['GetGtmDomainCidrMapAssignmentArgs']]:
        """
        Contains information about the CIDR zone groupings of CIDR blocks.
        """
        return pulumi.get(self, "assignments")

    @assignments.setter
    def assignments(self, value: Optional[Sequence['GetGtmDomainCidrMapAssignmentArgs']]):
        pulumi.set(self, "assignments", value)

    @property
    @pulumi.getter(name="defaultDatacenter")
    def default_datacenter(self) -> Optional['GetGtmDomainCidrMapDefaultDatacenterArgs']:
        """
        A placeholder for all other CIDR zones, CIDR blocks not found in these CIDR zones.
        """
        return pulumi.get(self, "default_datacenter")

    @default_datacenter.setter
    def default_datacenter(self, value: Optional['GetGtmDomainCidrMapDefaultDatacenterArgs']):
        pulumi.set(self, "default_datacenter", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['GetGtmDomainCidrMapLinkArgs']]:
        """
        Specifies the URL path that allows direct navigation to the CIDR map.
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[Sequence['GetGtmDomainCidrMapLinkArgs']]):
        pulumi.set(self, "links", value)


if not MYPY:
    class GetGtmDomainCidrMapAssignmentArgsDict(TypedDict):
        blocks: Sequence[builtins.str]
        """
        Specifies an array of CIDR blocks.
        """
        datacenter_id: builtins.int
        """
        A unique identifier for an existing data center in the domain.
        """
        nickname: builtins.str
        """
        A descriptive label for all other AS zones.
        """
elif False:
    GetGtmDomainCidrMapAssignmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainCidrMapAssignmentArgs:
    def __init__(__self__, *,
                 blocks: Sequence[builtins.str],
                 datacenter_id: builtins.int,
                 nickname: builtins.str):
        """
        :param Sequence[builtins.str] blocks: Specifies an array of CIDR blocks.
        :param builtins.int datacenter_id: A unique identifier for an existing data center in the domain.
        :param builtins.str nickname: A descriptive label for all other AS zones.
        """
        pulumi.set(__self__, "blocks", blocks)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter
    def blocks(self) -> Sequence[builtins.str]:
        """
        Specifies an array of CIDR blocks.
        """
        return pulumi.get(self, "blocks")

    @blocks.setter
    def blocks(self, value: Sequence[builtins.str]):
        pulumi.set(self, "blocks", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> builtins.int:
        """
        A unique identifier for an existing data center in the domain.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: builtins.int):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> builtins.str:
        """
        A descriptive label for all other AS zones.
        """
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: builtins.str):
        pulumi.set(self, "nickname", value)


if not MYPY:
    class GetGtmDomainCidrMapDefaultDatacenterArgsDict(TypedDict):
        datacenter_id: builtins.int
        """
        For each property, an identifier for all other CIDR zones' CNAME.
        """
        nickname: builtins.str
        """
        A descriptive label for all other CIDR blocks.
        """
elif False:
    GetGtmDomainCidrMapDefaultDatacenterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainCidrMapDefaultDatacenterArgs:
    def __init__(__self__, *,
                 datacenter_id: builtins.int,
                 nickname: builtins.str):
        """
        :param builtins.int datacenter_id: For each property, an identifier for all other CIDR zones' CNAME.
        :param builtins.str nickname: A descriptive label for all other CIDR blocks.
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> builtins.int:
        """
        For each property, an identifier for all other CIDR zones' CNAME.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: builtins.int):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> builtins.str:
        """
        A descriptive label for all other CIDR blocks.
        """
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: builtins.str):
        pulumi.set(self, "nickname", value)


if not MYPY:
    class GetGtmDomainCidrMapLinkArgsDict(TypedDict):
        href: builtins.str
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        rel: builtins.str
        """
        Indicates the link relationship of the object.
        """
elif False:
    GetGtmDomainCidrMapLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainCidrMapLinkArgs:
    def __init__(__self__, *,
                 href: builtins.str,
                 rel: builtins.str):
        """
        :param builtins.str href: A hypermedia link to the complete URL that uniquely defines a resource.
        :param builtins.str rel: Indicates the link relationship of the object.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @property
    @pulumi.getter
    def href(self) -> builtins.str:
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: builtins.str):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def rel(self) -> builtins.str:
        """
        Indicates the link relationship of the object.
        """
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: builtins.str):
        pulumi.set(self, "rel", value)


if not MYPY:
    class GetGtmDomainDatacenterArgsDict(TypedDict):
        city: builtins.str
        """
        The name of the city where the data center is located.
        """
        clone_of: builtins.int
        """
        Identifies the data center's ID of which this data center is a clone.
        """
        cloud_server_host_header_override: builtins.bool
        """
        Balances load between two or more servers in a cloud environment.
        """
        cloud_server_targeting: builtins.bool
        """
        Balances load between two or more servers in a cloud environment.
        """
        continent: builtins.str
        """
        A two-letter code that specifies the continent where the data center maps to.
        """
        country: builtins.str
        """
        A two-letter ISO 3166 country code that specifies the country where the data center is located.
        """
        datacenter_id: builtins.int
        """
        A unique identifier for an existing data center in the domain.
        """
        latitude: builtins.float
        """
        Specifies the geographic latitude of the data center's position.
        """
        longitude: builtins.float
        """
        Specifies the geographic longitude of the data center's position.
        """
        nickname: builtins.str
        """
        A descriptive label for the datacenter.
        """
        score_penalty: builtins.int
        """
        Influences the score for a datacenter.
        """
        server_monitor_pool: builtins.str
        """
        The name of the pool from which servermonitors are drawn for liveness tests in this datacenter. If omitted (null), the domain-wide default is used. (If no domain-wide default is specified, the pool used is all servermonitors in the same continent as the datacenter.).
        """
        state_or_province: builtins.str
        """
        Specifies a two-letter ISO 3166 country code for the state of province, where the data center is located.
        """
        virtual: builtins.bool
        """
        Indicates whether or not the data center is virtual or physical.
        """
        default_load_objects: NotRequired[Sequence['GetGtmDomainDatacenterDefaultLoadObjectArgsDict']]
        """
        Specifies the load reporting interface between you and the GTM system.
        """
        links: NotRequired[Sequence['GetGtmDomainDatacenterLinkArgsDict']]
        """
        Provides a URL path that allows direct navigation to a data center.
        """
elif False:
    GetGtmDomainDatacenterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainDatacenterArgs:
    def __init__(__self__, *,
                 city: builtins.str,
                 clone_of: builtins.int,
                 cloud_server_host_header_override: builtins.bool,
                 cloud_server_targeting: builtins.bool,
                 continent: builtins.str,
                 country: builtins.str,
                 datacenter_id: builtins.int,
                 latitude: builtins.float,
                 longitude: builtins.float,
                 nickname: builtins.str,
                 score_penalty: builtins.int,
                 server_monitor_pool: builtins.str,
                 state_or_province: builtins.str,
                 virtual: builtins.bool,
                 default_load_objects: Optional[Sequence['GetGtmDomainDatacenterDefaultLoadObjectArgs']] = None,
                 links: Optional[Sequence['GetGtmDomainDatacenterLinkArgs']] = None):
        """
        :param builtins.str city: The name of the city where the data center is located.
        :param builtins.int clone_of: Identifies the data center's ID of which this data center is a clone.
        :param builtins.bool cloud_server_host_header_override: Balances load between two or more servers in a cloud environment.
        :param builtins.bool cloud_server_targeting: Balances load between two or more servers in a cloud environment.
        :param builtins.str continent: A two-letter code that specifies the continent where the data center maps to.
        :param builtins.str country: A two-letter ISO 3166 country code that specifies the country where the data center is located.
        :param builtins.int datacenter_id: A unique identifier for an existing data center in the domain.
        :param builtins.float latitude: Specifies the geographic latitude of the data center's position.
        :param builtins.float longitude: Specifies the geographic longitude of the data center's position.
        :param builtins.str nickname: A descriptive label for the datacenter.
        :param builtins.int score_penalty: Influences the score for a datacenter.
        :param builtins.str server_monitor_pool: The name of the pool from which servermonitors are drawn for liveness tests in this datacenter. If omitted (null), the domain-wide default is used. (If no domain-wide default is specified, the pool used is all servermonitors in the same continent as the datacenter.).
        :param builtins.str state_or_province: Specifies a two-letter ISO 3166 country code for the state of province, where the data center is located.
        :param builtins.bool virtual: Indicates whether or not the data center is virtual or physical.
        :param Sequence['GetGtmDomainDatacenterDefaultLoadObjectArgs'] default_load_objects: Specifies the load reporting interface between you and the GTM system.
        :param Sequence['GetGtmDomainDatacenterLinkArgs'] links: Provides a URL path that allows direct navigation to a data center.
        """
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "clone_of", clone_of)
        pulumi.set(__self__, "cloud_server_host_header_override", cloud_server_host_header_override)
        pulumi.set(__self__, "cloud_server_targeting", cloud_server_targeting)
        pulumi.set(__self__, "continent", continent)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "nickname", nickname)
        pulumi.set(__self__, "score_penalty", score_penalty)
        pulumi.set(__self__, "server_monitor_pool", server_monitor_pool)
        pulumi.set(__self__, "state_or_province", state_or_province)
        pulumi.set(__self__, "virtual", virtual)
        if default_load_objects is not None:
            pulumi.set(__self__, "default_load_objects", default_load_objects)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def city(self) -> builtins.str:
        """
        The name of the city where the data center is located.
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: builtins.str):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="cloneOf")
    def clone_of(self) -> builtins.int:
        """
        Identifies the data center's ID of which this data center is a clone.
        """
        return pulumi.get(self, "clone_of")

    @clone_of.setter
    def clone_of(self, value: builtins.int):
        pulumi.set(self, "clone_of", value)

    @property
    @pulumi.getter(name="cloudServerHostHeaderOverride")
    def cloud_server_host_header_override(self) -> builtins.bool:
        """
        Balances load between two or more servers in a cloud environment.
        """
        return pulumi.get(self, "cloud_server_host_header_override")

    @cloud_server_host_header_override.setter
    def cloud_server_host_header_override(self, value: builtins.bool):
        pulumi.set(self, "cloud_server_host_header_override", value)

    @property
    @pulumi.getter(name="cloudServerTargeting")
    def cloud_server_targeting(self) -> builtins.bool:
        """
        Balances load between two or more servers in a cloud environment.
        """
        return pulumi.get(self, "cloud_server_targeting")

    @cloud_server_targeting.setter
    def cloud_server_targeting(self, value: builtins.bool):
        pulumi.set(self, "cloud_server_targeting", value)

    @property
    @pulumi.getter
    def continent(self) -> builtins.str:
        """
        A two-letter code that specifies the continent where the data center maps to.
        """
        return pulumi.get(self, "continent")

    @continent.setter
    def continent(self, value: builtins.str):
        pulumi.set(self, "continent", value)

    @property
    @pulumi.getter
    def country(self) -> builtins.str:
        """
        A two-letter ISO 3166 country code that specifies the country where the data center is located.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: builtins.str):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> builtins.int:
        """
        A unique identifier for an existing data center in the domain.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: builtins.int):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def latitude(self) -> builtins.float:
        """
        Specifies the geographic latitude of the data center's position.
        """
        return pulumi.get(self, "latitude")

    @latitude.setter
    def latitude(self, value: builtins.float):
        pulumi.set(self, "latitude", value)

    @property
    @pulumi.getter
    def longitude(self) -> builtins.float:
        """
        Specifies the geographic longitude of the data center's position.
        """
        return pulumi.get(self, "longitude")

    @longitude.setter
    def longitude(self, value: builtins.float):
        pulumi.set(self, "longitude", value)

    @property
    @pulumi.getter
    def nickname(self) -> builtins.str:
        """
        A descriptive label for the datacenter.
        """
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: builtins.str):
        pulumi.set(self, "nickname", value)

    @property
    @pulumi.getter(name="scorePenalty")
    def score_penalty(self) -> builtins.int:
        """
        Influences the score for a datacenter.
        """
        return pulumi.get(self, "score_penalty")

    @score_penalty.setter
    def score_penalty(self, value: builtins.int):
        pulumi.set(self, "score_penalty", value)

    @property
    @pulumi.getter(name="serverMonitorPool")
    def server_monitor_pool(self) -> builtins.str:
        """
        The name of the pool from which servermonitors are drawn for liveness tests in this datacenter. If omitted (null), the domain-wide default is used. (If no domain-wide default is specified, the pool used is all servermonitors in the same continent as the datacenter.).
        """
        return pulumi.get(self, "server_monitor_pool")

    @server_monitor_pool.setter
    def server_monitor_pool(self, value: builtins.str):
        pulumi.set(self, "server_monitor_pool", value)

    @property
    @pulumi.getter(name="stateOrProvince")
    def state_or_province(self) -> builtins.str:
        """
        Specifies a two-letter ISO 3166 country code for the state of province, where the data center is located.
        """
        return pulumi.get(self, "state_or_province")

    @state_or_province.setter
    def state_or_province(self, value: builtins.str):
        pulumi.set(self, "state_or_province", value)

    @property
    @pulumi.getter
    def virtual(self) -> builtins.bool:
        """
        Indicates whether or not the data center is virtual or physical.
        """
        return pulumi.get(self, "virtual")

    @virtual.setter
    def virtual(self, value: builtins.bool):
        pulumi.set(self, "virtual", value)

    @property
    @pulumi.getter(name="defaultLoadObjects")
    def default_load_objects(self) -> Optional[Sequence['GetGtmDomainDatacenterDefaultLoadObjectArgs']]:
        """
        Specifies the load reporting interface between you and the GTM system.
        """
        return pulumi.get(self, "default_load_objects")

    @default_load_objects.setter
    def default_load_objects(self, value: Optional[Sequence['GetGtmDomainDatacenterDefaultLoadObjectArgs']]):
        pulumi.set(self, "default_load_objects", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['GetGtmDomainDatacenterLinkArgs']]:
        """
        Provides a URL path that allows direct navigation to a data center.
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[Sequence['GetGtmDomainDatacenterLinkArgs']]):
        pulumi.set(self, "links", value)


if not MYPY:
    class GetGtmDomainDatacenterDefaultLoadObjectArgsDict(TypedDict):
        load_object: builtins.str
        """
        Specifies the load object that GTM requests.
        """
        load_object_port: builtins.int
        """
        Specifies the TCP port to connect to when requesting the load object.
        """
        load_servers: Sequence[builtins.str]
        """
        Specifies the list of servers to requests the load object from.
        """
elif False:
    GetGtmDomainDatacenterDefaultLoadObjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainDatacenterDefaultLoadObjectArgs:
    def __init__(__self__, *,
                 load_object: builtins.str,
                 load_object_port: builtins.int,
                 load_servers: Sequence[builtins.str]):
        """
        :param builtins.str load_object: Specifies the load object that GTM requests.
        :param builtins.int load_object_port: Specifies the TCP port to connect to when requesting the load object.
        :param Sequence[builtins.str] load_servers: Specifies the list of servers to requests the load object from.
        """
        pulumi.set(__self__, "load_object", load_object)
        pulumi.set(__self__, "load_object_port", load_object_port)
        pulumi.set(__self__, "load_servers", load_servers)

    @property
    @pulumi.getter(name="loadObject")
    def load_object(self) -> builtins.str:
        """
        Specifies the load object that GTM requests.
        """
        return pulumi.get(self, "load_object")

    @load_object.setter
    def load_object(self, value: builtins.str):
        pulumi.set(self, "load_object", value)

    @property
    @pulumi.getter(name="loadObjectPort")
    def load_object_port(self) -> builtins.int:
        """
        Specifies the TCP port to connect to when requesting the load object.
        """
        return pulumi.get(self, "load_object_port")

    @load_object_port.setter
    def load_object_port(self, value: builtins.int):
        pulumi.set(self, "load_object_port", value)

    @property
    @pulumi.getter(name="loadServers")
    def load_servers(self) -> Sequence[builtins.str]:
        """
        Specifies the list of servers to requests the load object from.
        """
        return pulumi.get(self, "load_servers")

    @load_servers.setter
    def load_servers(self, value: Sequence[builtins.str]):
        pulumi.set(self, "load_servers", value)


if not MYPY:
    class GetGtmDomainDatacenterLinkArgsDict(TypedDict):
        href: builtins.str
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        rel: builtins.str
        """
        Indicates the link relationship of the object.
        """
elif False:
    GetGtmDomainDatacenterLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainDatacenterLinkArgs:
    def __init__(__self__, *,
                 href: builtins.str,
                 rel: builtins.str):
        """
        :param builtins.str href: A hypermedia link to the complete URL that uniquely defines a resource.
        :param builtins.str rel: Indicates the link relationship of the object.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @property
    @pulumi.getter
    def href(self) -> builtins.str:
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: builtins.str):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def rel(self) -> builtins.str:
        """
        Indicates the link relationship of the object.
        """
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: builtins.str):
        pulumi.set(self, "rel", value)


if not MYPY:
    class GetGtmDomainGeographicMapArgsDict(TypedDict):
        name: builtins.str
        """
        A descriptive label for the geographic map.
        """
        assignments: NotRequired[Sequence['GetGtmDomainGeographicMapAssignmentArgsDict']]
        """
        Contains information about the geographic zone groupings of countries.
        """
        default_datacenter: NotRequired['GetGtmDomainGeographicMapDefaultDatacenterArgsDict']
        """
        A placeholder for all other geographic zones, countries not found in these geographic zones.
        """
        links: NotRequired[Sequence['GetGtmDomainGeographicMapLinkArgsDict']]
        """
        Specifies the URL path that allows direct navigation to the geographic map.
        """
elif False:
    GetGtmDomainGeographicMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainGeographicMapArgs:
    def __init__(__self__, *,
                 name: builtins.str,
                 assignments: Optional[Sequence['GetGtmDomainGeographicMapAssignmentArgs']] = None,
                 default_datacenter: Optional['GetGtmDomainGeographicMapDefaultDatacenterArgs'] = None,
                 links: Optional[Sequence['GetGtmDomainGeographicMapLinkArgs']] = None):
        """
        :param builtins.str name: A descriptive label for the geographic map.
        :param Sequence['GetGtmDomainGeographicMapAssignmentArgs'] assignments: Contains information about the geographic zone groupings of countries.
        :param 'GetGtmDomainGeographicMapDefaultDatacenterArgs' default_datacenter: A placeholder for all other geographic zones, countries not found in these geographic zones.
        :param Sequence['GetGtmDomainGeographicMapLinkArgs'] links: Specifies the URL path that allows direct navigation to the geographic map.
        """
        pulumi.set(__self__, "name", name)
        if assignments is not None:
            pulumi.set(__self__, "assignments", assignments)
        if default_datacenter is not None:
            pulumi.set(__self__, "default_datacenter", default_datacenter)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A descriptive label for the geographic map.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def assignments(self) -> Optional[Sequence['GetGtmDomainGeographicMapAssignmentArgs']]:
        """
        Contains information about the geographic zone groupings of countries.
        """
        return pulumi.get(self, "assignments")

    @assignments.setter
    def assignments(self, value: Optional[Sequence['GetGtmDomainGeographicMapAssignmentArgs']]):
        pulumi.set(self, "assignments", value)

    @property
    @pulumi.getter(name="defaultDatacenter")
    def default_datacenter(self) -> Optional['GetGtmDomainGeographicMapDefaultDatacenterArgs']:
        """
        A placeholder for all other geographic zones, countries not found in these geographic zones.
        """
        return pulumi.get(self, "default_datacenter")

    @default_datacenter.setter
    def default_datacenter(self, value: Optional['GetGtmDomainGeographicMapDefaultDatacenterArgs']):
        pulumi.set(self, "default_datacenter", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['GetGtmDomainGeographicMapLinkArgs']]:
        """
        Specifies the URL path that allows direct navigation to the geographic map.
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[Sequence['GetGtmDomainGeographicMapLinkArgs']]):
        pulumi.set(self, "links", value)


if not MYPY:
    class GetGtmDomainGeographicMapAssignmentArgsDict(TypedDict):
        countries: Sequence[builtins.str]
        """
        Specifies an array of two-letter ISO 3166 `country` codes.
        """
        datacenter_id: builtins.int
        """
        A unique identifier for an existing data center in the domain.
        """
        nickname: builtins.str
        """
        A descriptive label for all other AS zones.
        """
elif False:
    GetGtmDomainGeographicMapAssignmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainGeographicMapAssignmentArgs:
    def __init__(__self__, *,
                 countries: Sequence[builtins.str],
                 datacenter_id: builtins.int,
                 nickname: builtins.str):
        """
        :param Sequence[builtins.str] countries: Specifies an array of two-letter ISO 3166 `country` codes.
        :param builtins.int datacenter_id: A unique identifier for an existing data center in the domain.
        :param builtins.str nickname: A descriptive label for all other AS zones.
        """
        pulumi.set(__self__, "countries", countries)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter
    def countries(self) -> Sequence[builtins.str]:
        """
        Specifies an array of two-letter ISO 3166 `country` codes.
        """
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Sequence[builtins.str]):
        pulumi.set(self, "countries", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> builtins.int:
        """
        A unique identifier for an existing data center in the domain.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: builtins.int):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> builtins.str:
        """
        A descriptive label for all other AS zones.
        """
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: builtins.str):
        pulumi.set(self, "nickname", value)


if not MYPY:
    class GetGtmDomainGeographicMapDefaultDatacenterArgsDict(TypedDict):
        datacenter_id: builtins.int
        """
        An identifier for all other geographic zones' CNAME.
        """
        nickname: builtins.str
        """
        A descriptive label for all other geographic zones.
        """
elif False:
    GetGtmDomainGeographicMapDefaultDatacenterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainGeographicMapDefaultDatacenterArgs:
    def __init__(__self__, *,
                 datacenter_id: builtins.int,
                 nickname: builtins.str):
        """
        :param builtins.int datacenter_id: An identifier for all other geographic zones' CNAME.
        :param builtins.str nickname: A descriptive label for all other geographic zones.
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> builtins.int:
        """
        An identifier for all other geographic zones' CNAME.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: builtins.int):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> builtins.str:
        """
        A descriptive label for all other geographic zones.
        """
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: builtins.str):
        pulumi.set(self, "nickname", value)


if not MYPY:
    class GetGtmDomainGeographicMapLinkArgsDict(TypedDict):
        href: builtins.str
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        rel: builtins.str
        """
        Indicates the link relationship of the object.
        """
elif False:
    GetGtmDomainGeographicMapLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainGeographicMapLinkArgs:
    def __init__(__self__, *,
                 href: builtins.str,
                 rel: builtins.str):
        """
        :param builtins.str href: A hypermedia link to the complete URL that uniquely defines a resource.
        :param builtins.str rel: Indicates the link relationship of the object.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @property
    @pulumi.getter
    def href(self) -> builtins.str:
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: builtins.str):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def rel(self) -> builtins.str:
        """
        Indicates the link relationship of the object.
        """
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: builtins.str):
        pulumi.set(self, "rel", value)


if not MYPY:
    class GetGtmDomainLinkArgsDict(TypedDict):
        href: builtins.str
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        rel: builtins.str
        """
        Indicates the link relationship of the object.
        """
elif False:
    GetGtmDomainLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainLinkArgs:
    def __init__(__self__, *,
                 href: builtins.str,
                 rel: builtins.str):
        """
        :param builtins.str href: A hypermedia link to the complete URL that uniquely defines a resource.
        :param builtins.str rel: Indicates the link relationship of the object.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @property
    @pulumi.getter
    def href(self) -> builtins.str:
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: builtins.str):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def rel(self) -> builtins.str:
        """
        Indicates the link relationship of the object.
        """
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: builtins.str):
        pulumi.set(self, "rel", value)


if not MYPY:
    class GetGtmDomainPropertyArgsDict(TypedDict):
        backup_cname: builtins.str
        """
        Specifies a backup CNAME.
        """
        backup_ip: builtins.str
        """
        Specifies a backup IP.
        """
        balance_by_download_score: builtins.bool
        """
        Indicates whether download score based load balancing is enabled.
        """
        cname: builtins.str
        """
        Indicates the fully qualified name aliased to a particular property.
        """
        comments: builtins.str
        """
        Descriptive comments for the property.
        """
        dynamic_ttl: builtins.int
        """
        Indicates the TTL in seconds for records that might change dynamically based on liveness and load balancing.
        """
        failback_delay: builtins.int
        """
        Specifies the failback delay in seconds.
        """
        failover_delay: builtins.int
        """
        Specifies the failover delay in seconds.
        """
        ghost_demand_reporting: builtins.bool
        """
        Whether an alternate way to collect load feedback from a GTM Performance domain is enabled.
        """
        handout_limit: builtins.int
        """
        Indicates the limit for the number of live IPs handed out to a DNS request.
        """
        handout_mode: builtins.str
        """
        Specifies how IPs are returned when more than one IP is alive and available.
        """
        health_max: builtins.float
        """
        Defines the absolute limit beyond which IPs are declared unhealthy.
        """
        health_multiplier: builtins.float
        """
        Configures a cutoff value that is computed from the median scores.
        """
        health_threshold: builtins.float
        """
        Configures a cutoff value that is computed from the median scores.
        """
        ipv6: builtins.bool
        """
        Indicates the type of IP address handed out by a property.
        """
        last_modified: builtins.str
        """
        An ISO 8601 timestamp that indicates when the property was last changed.
        """
        load_imbalance_percentage: builtins.float
        """
        Indicates the percent of load imbalance factor for the domain.
        """
        map_name: builtins.str
        """
        A descriptive label for a geographic or a CIDR map that's required if the property is either geographic or cidrmapping.
        """
        max_unreachable_penalty: builtins.int
        """
        For performance domains, this specifies a penalty value that's added to liveness test scores when data centers show an aggregated loss fraction higher than the penalty value.
        """
        min_live_fraction: builtins.float
        """
        Specifies what fraction of the servers need to respond to requests so GTM considers the data center up and able to receive traffic.
        """
        name: builtins.str
        """
        A descriptive label for the property.
        """
        score_aggregation_type: builtins.str
        """
        Specifies how GTM aggregates liveness test scores across different tests, when multiple tests are configured.
        """
        static_ttl: builtins.int
        """
        Specifies the TTL in seconds for static resource records that don't change based on the requesting name server IP.
        """
        stickness_bonus_constant: builtins.int
        """
        Specifies a percentage used to configure data center affinity.
        """
        stickness_bonus_percentage: builtins.int
        """
        Specifies a percentage used to configure data center affinity.
        """
        type: builtins.str
        """
        Specifies the load balancing behvior for the property.
        """
        unreachable_threshold: builtins.float
        """
        For performance domains, this specifies a penalty value that's added to liveness test scores when data centers have an aggregated loss fraction higher than this value.
        """
        use_computed_targets: builtins.bool
        """
        For load-feedback domains only, this specifies that you want GTM to automatically compute target load.
        """
        weighted_hash_bits_for_ipv4: builtins.int
        """
        For weighted hashed properties, how many leading bits of the client nameserver IP address to include when computing a hash for picking a datacenter for a client nameserver using IPv4; the default value is 32 (the entire address).
        """
        weighted_hash_bits_for_ipv6: builtins.int
        """
        For weighted hashed properties, how many leading bits of the client nameserver IP address to include when computing a hash for picking a datacenter for a client nameserver using IPv6; the default value is 128 (the entire address).
        """
        links: NotRequired[Sequence['GetGtmDomainPropertyLinkArgsDict']]
        """
        Provides a URL path that allows direct navigation to the property.
        """
        liveness_tests: NotRequired[Sequence['GetGtmDomainPropertyLivenessTestArgsDict']]
        """
        Contains information about liveness tests.
        """
        static_rr_sets: NotRequired[Sequence['GetGtmDomainPropertyStaticRrSetArgsDict']]
        """
        Contains static recordsets.
        """
        traffic_targets: NotRequired[Sequence['GetGtmDomainPropertyTrafficTargetArgsDict']]
        """
        Traffic targets for the property.
        """
elif False:
    GetGtmDomainPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainPropertyArgs:
    def __init__(__self__, *,
                 backup_cname: builtins.str,
                 backup_ip: builtins.str,
                 balance_by_download_score: builtins.bool,
                 cname: builtins.str,
                 comments: builtins.str,
                 dynamic_ttl: builtins.int,
                 failback_delay: builtins.int,
                 failover_delay: builtins.int,
                 ghost_demand_reporting: builtins.bool,
                 handout_limit: builtins.int,
                 handout_mode: builtins.str,
                 health_max: builtins.float,
                 health_multiplier: builtins.float,
                 health_threshold: builtins.float,
                 ipv6: builtins.bool,
                 last_modified: builtins.str,
                 load_imbalance_percentage: builtins.float,
                 map_name: builtins.str,
                 max_unreachable_penalty: builtins.int,
                 min_live_fraction: builtins.float,
                 name: builtins.str,
                 score_aggregation_type: builtins.str,
                 static_ttl: builtins.int,
                 stickness_bonus_constant: builtins.int,
                 stickness_bonus_percentage: builtins.int,
                 type: builtins.str,
                 unreachable_threshold: builtins.float,
                 use_computed_targets: builtins.bool,
                 weighted_hash_bits_for_ipv4: builtins.int,
                 weighted_hash_bits_for_ipv6: builtins.int,
                 links: Optional[Sequence['GetGtmDomainPropertyLinkArgs']] = None,
                 liveness_tests: Optional[Sequence['GetGtmDomainPropertyLivenessTestArgs']] = None,
                 static_rr_sets: Optional[Sequence['GetGtmDomainPropertyStaticRrSetArgs']] = None,
                 traffic_targets: Optional[Sequence['GetGtmDomainPropertyTrafficTargetArgs']] = None):
        """
        :param builtins.str backup_cname: Specifies a backup CNAME.
        :param builtins.str backup_ip: Specifies a backup IP.
        :param builtins.bool balance_by_download_score: Indicates whether download score based load balancing is enabled.
        :param builtins.str cname: Indicates the fully qualified name aliased to a particular property.
        :param builtins.str comments: Descriptive comments for the property.
        :param builtins.int dynamic_ttl: Indicates the TTL in seconds for records that might change dynamically based on liveness and load balancing.
        :param builtins.int failback_delay: Specifies the failback delay in seconds.
        :param builtins.int failover_delay: Specifies the failover delay in seconds.
        :param builtins.bool ghost_demand_reporting: Whether an alternate way to collect load feedback from a GTM Performance domain is enabled.
        :param builtins.int handout_limit: Indicates the limit for the number of live IPs handed out to a DNS request.
        :param builtins.str handout_mode: Specifies how IPs are returned when more than one IP is alive and available.
        :param builtins.float health_max: Defines the absolute limit beyond which IPs are declared unhealthy.
        :param builtins.float health_multiplier: Configures a cutoff value that is computed from the median scores.
        :param builtins.float health_threshold: Configures a cutoff value that is computed from the median scores.
        :param builtins.bool ipv6: Indicates the type of IP address handed out by a property.
        :param builtins.str last_modified: An ISO 8601 timestamp that indicates when the property was last changed.
        :param builtins.float load_imbalance_percentage: Indicates the percent of load imbalance factor for the domain.
        :param builtins.str map_name: A descriptive label for a geographic or a CIDR map that's required if the property is either geographic or cidrmapping.
        :param builtins.int max_unreachable_penalty: For performance domains, this specifies a penalty value that's added to liveness test scores when data centers show an aggregated loss fraction higher than the penalty value.
        :param builtins.float min_live_fraction: Specifies what fraction of the servers need to respond to requests so GTM considers the data center up and able to receive traffic.
        :param builtins.str name: A descriptive label for the property.
        :param builtins.str score_aggregation_type: Specifies how GTM aggregates liveness test scores across different tests, when multiple tests are configured.
        :param builtins.int static_ttl: Specifies the TTL in seconds for static resource records that don't change based on the requesting name server IP.
        :param builtins.int stickness_bonus_constant: Specifies a percentage used to configure data center affinity.
        :param builtins.int stickness_bonus_percentage: Specifies a percentage used to configure data center affinity.
        :param builtins.str type: Specifies the load balancing behvior for the property.
        :param builtins.float unreachable_threshold: For performance domains, this specifies a penalty value that's added to liveness test scores when data centers have an aggregated loss fraction higher than this value.
        :param builtins.bool use_computed_targets: For load-feedback domains only, this specifies that you want GTM to automatically compute target load.
        :param builtins.int weighted_hash_bits_for_ipv4: For weighted hashed properties, how many leading bits of the client nameserver IP address to include when computing a hash for picking a datacenter for a client nameserver using IPv4; the default value is 32 (the entire address).
        :param builtins.int weighted_hash_bits_for_ipv6: For weighted hashed properties, how many leading bits of the client nameserver IP address to include when computing a hash for picking a datacenter for a client nameserver using IPv6; the default value is 128 (the entire address).
        :param Sequence['GetGtmDomainPropertyLinkArgs'] links: Provides a URL path that allows direct navigation to the property.
        :param Sequence['GetGtmDomainPropertyLivenessTestArgs'] liveness_tests: Contains information about liveness tests.
        :param Sequence['GetGtmDomainPropertyStaticRrSetArgs'] static_rr_sets: Contains static recordsets.
        :param Sequence['GetGtmDomainPropertyTrafficTargetArgs'] traffic_targets: Traffic targets for the property.
        """
        pulumi.set(__self__, "backup_cname", backup_cname)
        pulumi.set(__self__, "backup_ip", backup_ip)
        pulumi.set(__self__, "balance_by_download_score", balance_by_download_score)
        pulumi.set(__self__, "cname", cname)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "dynamic_ttl", dynamic_ttl)
        pulumi.set(__self__, "failback_delay", failback_delay)
        pulumi.set(__self__, "failover_delay", failover_delay)
        pulumi.set(__self__, "ghost_demand_reporting", ghost_demand_reporting)
        pulumi.set(__self__, "handout_limit", handout_limit)
        pulumi.set(__self__, "handout_mode", handout_mode)
        pulumi.set(__self__, "health_max", health_max)
        pulumi.set(__self__, "health_multiplier", health_multiplier)
        pulumi.set(__self__, "health_threshold", health_threshold)
        pulumi.set(__self__, "ipv6", ipv6)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "load_imbalance_percentage", load_imbalance_percentage)
        pulumi.set(__self__, "map_name", map_name)
        pulumi.set(__self__, "max_unreachable_penalty", max_unreachable_penalty)
        pulumi.set(__self__, "min_live_fraction", min_live_fraction)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "score_aggregation_type", score_aggregation_type)
        pulumi.set(__self__, "static_ttl", static_ttl)
        pulumi.set(__self__, "stickness_bonus_constant", stickness_bonus_constant)
        pulumi.set(__self__, "stickness_bonus_percentage", stickness_bonus_percentage)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unreachable_threshold", unreachable_threshold)
        pulumi.set(__self__, "use_computed_targets", use_computed_targets)
        pulumi.set(__self__, "weighted_hash_bits_for_ipv4", weighted_hash_bits_for_ipv4)
        pulumi.set(__self__, "weighted_hash_bits_for_ipv6", weighted_hash_bits_for_ipv6)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if liveness_tests is not None:
            pulumi.set(__self__, "liveness_tests", liveness_tests)
        if static_rr_sets is not None:
            pulumi.set(__self__, "static_rr_sets", static_rr_sets)
        if traffic_targets is not None:
            pulumi.set(__self__, "traffic_targets", traffic_targets)

    @property
    @pulumi.getter(name="backupCname")
    def backup_cname(self) -> builtins.str:
        """
        Specifies a backup CNAME.
        """
        return pulumi.get(self, "backup_cname")

    @backup_cname.setter
    def backup_cname(self, value: builtins.str):
        pulumi.set(self, "backup_cname", value)

    @property
    @pulumi.getter(name="backupIp")
    def backup_ip(self) -> builtins.str:
        """
        Specifies a backup IP.
        """
        return pulumi.get(self, "backup_ip")

    @backup_ip.setter
    def backup_ip(self, value: builtins.str):
        pulumi.set(self, "backup_ip", value)

    @property
    @pulumi.getter(name="balanceByDownloadScore")
    def balance_by_download_score(self) -> builtins.bool:
        """
        Indicates whether download score based load balancing is enabled.
        """
        return pulumi.get(self, "balance_by_download_score")

    @balance_by_download_score.setter
    def balance_by_download_score(self, value: builtins.bool):
        pulumi.set(self, "balance_by_download_score", value)

    @property
    @pulumi.getter
    def cname(self) -> builtins.str:
        """
        Indicates the fully qualified name aliased to a particular property.
        """
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: builtins.str):
        pulumi.set(self, "cname", value)

    @property
    @pulumi.getter
    def comments(self) -> builtins.str:
        """
        Descriptive comments for the property.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: builtins.str):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dynamicTtl")
    def dynamic_ttl(self) -> builtins.int:
        """
        Indicates the TTL in seconds for records that might change dynamically based on liveness and load balancing.
        """
        return pulumi.get(self, "dynamic_ttl")

    @dynamic_ttl.setter
    def dynamic_ttl(self, value: builtins.int):
        pulumi.set(self, "dynamic_ttl", value)

    @property
    @pulumi.getter(name="failbackDelay")
    def failback_delay(self) -> builtins.int:
        """
        Specifies the failback delay in seconds.
        """
        return pulumi.get(self, "failback_delay")

    @failback_delay.setter
    def failback_delay(self, value: builtins.int):
        pulumi.set(self, "failback_delay", value)

    @property
    @pulumi.getter(name="failoverDelay")
    def failover_delay(self) -> builtins.int:
        """
        Specifies the failover delay in seconds.
        """
        return pulumi.get(self, "failover_delay")

    @failover_delay.setter
    def failover_delay(self, value: builtins.int):
        pulumi.set(self, "failover_delay", value)

    @property
    @pulumi.getter(name="ghostDemandReporting")
    def ghost_demand_reporting(self) -> builtins.bool:
        """
        Whether an alternate way to collect load feedback from a GTM Performance domain is enabled.
        """
        return pulumi.get(self, "ghost_demand_reporting")

    @ghost_demand_reporting.setter
    def ghost_demand_reporting(self, value: builtins.bool):
        pulumi.set(self, "ghost_demand_reporting", value)

    @property
    @pulumi.getter(name="handoutLimit")
    def handout_limit(self) -> builtins.int:
        """
        Indicates the limit for the number of live IPs handed out to a DNS request.
        """
        return pulumi.get(self, "handout_limit")

    @handout_limit.setter
    def handout_limit(self, value: builtins.int):
        pulumi.set(self, "handout_limit", value)

    @property
    @pulumi.getter(name="handoutMode")
    def handout_mode(self) -> builtins.str:
        """
        Specifies how IPs are returned when more than one IP is alive and available.
        """
        return pulumi.get(self, "handout_mode")

    @handout_mode.setter
    def handout_mode(self, value: builtins.str):
        pulumi.set(self, "handout_mode", value)

    @property
    @pulumi.getter(name="healthMax")
    def health_max(self) -> builtins.float:
        """
        Defines the absolute limit beyond which IPs are declared unhealthy.
        """
        return pulumi.get(self, "health_max")

    @health_max.setter
    def health_max(self, value: builtins.float):
        pulumi.set(self, "health_max", value)

    @property
    @pulumi.getter(name="healthMultiplier")
    def health_multiplier(self) -> builtins.float:
        """
        Configures a cutoff value that is computed from the median scores.
        """
        return pulumi.get(self, "health_multiplier")

    @health_multiplier.setter
    def health_multiplier(self, value: builtins.float):
        pulumi.set(self, "health_multiplier", value)

    @property
    @pulumi.getter(name="healthThreshold")
    def health_threshold(self) -> builtins.float:
        """
        Configures a cutoff value that is computed from the median scores.
        """
        return pulumi.get(self, "health_threshold")

    @health_threshold.setter
    def health_threshold(self, value: builtins.float):
        pulumi.set(self, "health_threshold", value)

    @property
    @pulumi.getter
    def ipv6(self) -> builtins.bool:
        """
        Indicates the type of IP address handed out by a property.
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: builtins.bool):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> builtins.str:
        """
        An ISO 8601 timestamp that indicates when the property was last changed.
        """
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: builtins.str):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter(name="loadImbalancePercentage")
    def load_imbalance_percentage(self) -> builtins.float:
        """
        Indicates the percent of load imbalance factor for the domain.
        """
        return pulumi.get(self, "load_imbalance_percentage")

    @load_imbalance_percentage.setter
    def load_imbalance_percentage(self, value: builtins.float):
        pulumi.set(self, "load_imbalance_percentage", value)

    @property
    @pulumi.getter(name="mapName")
    def map_name(self) -> builtins.str:
        """
        A descriptive label for a geographic or a CIDR map that's required if the property is either geographic or cidrmapping.
        """
        return pulumi.get(self, "map_name")

    @map_name.setter
    def map_name(self, value: builtins.str):
        pulumi.set(self, "map_name", value)

    @property
    @pulumi.getter(name="maxUnreachablePenalty")
    def max_unreachable_penalty(self) -> builtins.int:
        """
        For performance domains, this specifies a penalty value that's added to liveness test scores when data centers show an aggregated loss fraction higher than the penalty value.
        """
        return pulumi.get(self, "max_unreachable_penalty")

    @max_unreachable_penalty.setter
    def max_unreachable_penalty(self, value: builtins.int):
        pulumi.set(self, "max_unreachable_penalty", value)

    @property
    @pulumi.getter(name="minLiveFraction")
    def min_live_fraction(self) -> builtins.float:
        """
        Specifies what fraction of the servers need to respond to requests so GTM considers the data center up and able to receive traffic.
        """
        return pulumi.get(self, "min_live_fraction")

    @min_live_fraction.setter
    def min_live_fraction(self, value: builtins.float):
        pulumi.set(self, "min_live_fraction", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A descriptive label for the property.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="scoreAggregationType")
    def score_aggregation_type(self) -> builtins.str:
        """
        Specifies how GTM aggregates liveness test scores across different tests, when multiple tests are configured.
        """
        return pulumi.get(self, "score_aggregation_type")

    @score_aggregation_type.setter
    def score_aggregation_type(self, value: builtins.str):
        pulumi.set(self, "score_aggregation_type", value)

    @property
    @pulumi.getter(name="staticTtl")
    def static_ttl(self) -> builtins.int:
        """
        Specifies the TTL in seconds for static resource records that don't change based on the requesting name server IP.
        """
        return pulumi.get(self, "static_ttl")

    @static_ttl.setter
    def static_ttl(self, value: builtins.int):
        pulumi.set(self, "static_ttl", value)

    @property
    @pulumi.getter(name="sticknessBonusConstant")
    def stickness_bonus_constant(self) -> builtins.int:
        """
        Specifies a percentage used to configure data center affinity.
        """
        return pulumi.get(self, "stickness_bonus_constant")

    @stickness_bonus_constant.setter
    def stickness_bonus_constant(self, value: builtins.int):
        pulumi.set(self, "stickness_bonus_constant", value)

    @property
    @pulumi.getter(name="sticknessBonusPercentage")
    def stickness_bonus_percentage(self) -> builtins.int:
        """
        Specifies a percentage used to configure data center affinity.
        """
        return pulumi.get(self, "stickness_bonus_percentage")

    @stickness_bonus_percentage.setter
    def stickness_bonus_percentage(self, value: builtins.int):
        pulumi.set(self, "stickness_bonus_percentage", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Specifies the load balancing behvior for the property.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="unreachableThreshold")
    def unreachable_threshold(self) -> builtins.float:
        """
        For performance domains, this specifies a penalty value that's added to liveness test scores when data centers have an aggregated loss fraction higher than this value.
        """
        return pulumi.get(self, "unreachable_threshold")

    @unreachable_threshold.setter
    def unreachable_threshold(self, value: builtins.float):
        pulumi.set(self, "unreachable_threshold", value)

    @property
    @pulumi.getter(name="useComputedTargets")
    def use_computed_targets(self) -> builtins.bool:
        """
        For load-feedback domains only, this specifies that you want GTM to automatically compute target load.
        """
        return pulumi.get(self, "use_computed_targets")

    @use_computed_targets.setter
    def use_computed_targets(self, value: builtins.bool):
        pulumi.set(self, "use_computed_targets", value)

    @property
    @pulumi.getter(name="weightedHashBitsForIpv4")
    def weighted_hash_bits_for_ipv4(self) -> builtins.int:
        """
        For weighted hashed properties, how many leading bits of the client nameserver IP address to include when computing a hash for picking a datacenter for a client nameserver using IPv4; the default value is 32 (the entire address).
        """
        return pulumi.get(self, "weighted_hash_bits_for_ipv4")

    @weighted_hash_bits_for_ipv4.setter
    def weighted_hash_bits_for_ipv4(self, value: builtins.int):
        pulumi.set(self, "weighted_hash_bits_for_ipv4", value)

    @property
    @pulumi.getter(name="weightedHashBitsForIpv6")
    def weighted_hash_bits_for_ipv6(self) -> builtins.int:
        """
        For weighted hashed properties, how many leading bits of the client nameserver IP address to include when computing a hash for picking a datacenter for a client nameserver using IPv6; the default value is 128 (the entire address).
        """
        return pulumi.get(self, "weighted_hash_bits_for_ipv6")

    @weighted_hash_bits_for_ipv6.setter
    def weighted_hash_bits_for_ipv6(self, value: builtins.int):
        pulumi.set(self, "weighted_hash_bits_for_ipv6", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['GetGtmDomainPropertyLinkArgs']]:
        """
        Provides a URL path that allows direct navigation to the property.
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[Sequence['GetGtmDomainPropertyLinkArgs']]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter(name="livenessTests")
    def liveness_tests(self) -> Optional[Sequence['GetGtmDomainPropertyLivenessTestArgs']]:
        """
        Contains information about liveness tests.
        """
        return pulumi.get(self, "liveness_tests")

    @liveness_tests.setter
    def liveness_tests(self, value: Optional[Sequence['GetGtmDomainPropertyLivenessTestArgs']]):
        pulumi.set(self, "liveness_tests", value)

    @property
    @pulumi.getter(name="staticRrSets")
    def static_rr_sets(self) -> Optional[Sequence['GetGtmDomainPropertyStaticRrSetArgs']]:
        """
        Contains static recordsets.
        """
        return pulumi.get(self, "static_rr_sets")

    @static_rr_sets.setter
    def static_rr_sets(self, value: Optional[Sequence['GetGtmDomainPropertyStaticRrSetArgs']]):
        pulumi.set(self, "static_rr_sets", value)

    @property
    @pulumi.getter(name="trafficTargets")
    def traffic_targets(self) -> Optional[Sequence['GetGtmDomainPropertyTrafficTargetArgs']]:
        """
        Traffic targets for the property.
        """
        return pulumi.get(self, "traffic_targets")

    @traffic_targets.setter
    def traffic_targets(self, value: Optional[Sequence['GetGtmDomainPropertyTrafficTargetArgs']]):
        pulumi.set(self, "traffic_targets", value)


if not MYPY:
    class GetGtmDomainPropertyLinkArgsDict(TypedDict):
        href: builtins.str
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        rel: builtins.str
        """
        Indicates the link relationship of the object.
        """
elif False:
    GetGtmDomainPropertyLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainPropertyLinkArgs:
    def __init__(__self__, *,
                 href: builtins.str,
                 rel: builtins.str):
        """
        :param builtins.str href: A hypermedia link to the complete URL that uniquely defines a resource.
        :param builtins.str rel: Indicates the link relationship of the object.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @property
    @pulumi.getter
    def href(self) -> builtins.str:
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: builtins.str):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def rel(self) -> builtins.str:
        """
        Indicates the link relationship of the object.
        """
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: builtins.str):
        pulumi.set(self, "rel", value)


if not MYPY:
    class GetGtmDomainPropertyLivenessTestArgsDict(TypedDict):
        alternate_ca_certificates: Sequence[builtins.str]
        """
        List of alternate trust anchors (CA certificates)
        """
        answers_required: builtins.bool
        """
        If testObjectProtocol is DNS, DOH or DOT, requires an answer to the DNS query to be considered a success.
        """
        disable_nonstandard_port_warning: builtins.bool
        """
        Disables warnings when non-standard ports are used.
        """
        disabled: builtins.bool
        """
        Disables the liveness test.
        """
        error_penalty: builtins.float
        """
        Specifies the score that's reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
        """
        http_error3xx: builtins.bool
        """
        Treats a 3xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
        """
        http_error4xx: builtins.bool
        """
        Treats a 4xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
        """
        http_error5xx: builtins.bool
        """
        Treats a 5xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
        """
        http_method: builtins.str
        """
        Contains HTTP method to send if the `testObjectProtocol` is `http` or `https`. Supported values are `TRACE`, `HEAD`, `OPTIONS`, `GET`, `PUT`, `POST`, `PATCH`, `DELETE`. When omitted or `null`, this value defaults to `GET`.
        """
        http_request_body: builtins.str
        """
        Contains Base64-encoded HTTP request body to send if the `testObjectProtocol` is `http` or `https`. When omitted or `null`, omits the request body from the request.
        """
        name: builtins.str
        """
        A descriptive name for the liveness test.
        """
        peer_certificate_verification: builtins.bool
        """
        Validates the origin certificate. Applies only to tests with testObjectProtocol of https.
        """
        pre2023_security_posture: builtins.bool
        """
        Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
        """
        recursion_requested: builtins.bool
        """
        Indicates that if testObjectProtocol is DNS, DOH or DOT, the DNS query is recursive.
        """
        request_string: builtins.str
        """
        Specifies a request string.
        """
        resource_type: builtins.str
        """
        Specifies the query type, if testObjectProtocol is DNS.
        """
        response_string: builtins.str
        """
        Specifies a response string.
        """
        ssl_client_certificate: builtins.str
        """
        Indicates a base64-encoded certificate.
        """
        ssl_client_private_key: builtins.str
        """
        Indicates a base64-encoded private key.
        """
        test_interval: builtins.int
        """
        Indicates the interval at which the liveness test is run, in seconds.
        """
        test_object: builtins.str
        """
        Specifies the static text that acts as a stand-in for the data that you're sending on the network.
        """
        test_object_password: builtins.str
        """
        Specifies the test object's password.
        """
        test_object_port: builtins.int
        """
        Specifies the port number for the testObject.
        """
        test_object_protocol: builtins.str
        """
        Specifies the test protocol.
        """
        test_object_username: builtins.str
        """
        A descriptive name for the testObject.
        """
        test_timeout: builtins.float
        """
        Specifies the duration of the liveness test before it fails.
        """
        timeout_penalty: builtins.float
        """
        Specifies the timeout penalty score.
        """
        http_headers: NotRequired[Sequence['GetGtmDomainPropertyLivenessTestHttpHeaderArgsDict']]
        """
        List of HTTP headers for the liveness test.
        """
elif False:
    GetGtmDomainPropertyLivenessTestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainPropertyLivenessTestArgs:
    def __init__(__self__, *,
                 alternate_ca_certificates: Sequence[builtins.str],
                 answers_required: builtins.bool,
                 disable_nonstandard_port_warning: builtins.bool,
                 disabled: builtins.bool,
                 error_penalty: builtins.float,
                 http_error3xx: builtins.bool,
                 http_error4xx: builtins.bool,
                 http_error5xx: builtins.bool,
                 http_method: builtins.str,
                 http_request_body: builtins.str,
                 name: builtins.str,
                 peer_certificate_verification: builtins.bool,
                 pre2023_security_posture: builtins.bool,
                 recursion_requested: builtins.bool,
                 request_string: builtins.str,
                 resource_type: builtins.str,
                 response_string: builtins.str,
                 ssl_client_certificate: builtins.str,
                 ssl_client_private_key: builtins.str,
                 test_interval: builtins.int,
                 test_object: builtins.str,
                 test_object_password: builtins.str,
                 test_object_port: builtins.int,
                 test_object_protocol: builtins.str,
                 test_object_username: builtins.str,
                 test_timeout: builtins.float,
                 timeout_penalty: builtins.float,
                 http_headers: Optional[Sequence['GetGtmDomainPropertyLivenessTestHttpHeaderArgs']] = None):
        """
        :param Sequence[builtins.str] alternate_ca_certificates: List of alternate trust anchors (CA certificates)
        :param builtins.bool answers_required: If testObjectProtocol is DNS, DOH or DOT, requires an answer to the DNS query to be considered a success.
        :param builtins.bool disable_nonstandard_port_warning: Disables warnings when non-standard ports are used.
        :param builtins.bool disabled: Disables the liveness test.
        :param builtins.float error_penalty: Specifies the score that's reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
        :param builtins.bool http_error3xx: Treats a 3xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
        :param builtins.bool http_error4xx: Treats a 4xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
        :param builtins.bool http_error5xx: Treats a 5xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
        :param builtins.str http_method: Contains HTTP method to send if the `testObjectProtocol` is `http` or `https`. Supported values are `TRACE`, `HEAD`, `OPTIONS`, `GET`, `PUT`, `POST`, `PATCH`, `DELETE`. When omitted or `null`, this value defaults to `GET`.
        :param builtins.str http_request_body: Contains Base64-encoded HTTP request body to send if the `testObjectProtocol` is `http` or `https`. When omitted or `null`, omits the request body from the request.
        :param builtins.str name: A descriptive name for the liveness test.
        :param builtins.bool peer_certificate_verification: Validates the origin certificate. Applies only to tests with testObjectProtocol of https.
        :param builtins.bool pre2023_security_posture: Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
        :param builtins.bool recursion_requested: Indicates that if testObjectProtocol is DNS, DOH or DOT, the DNS query is recursive.
        :param builtins.str request_string: Specifies a request string.
        :param builtins.str resource_type: Specifies the query type, if testObjectProtocol is DNS.
        :param builtins.str response_string: Specifies a response string.
        :param builtins.str ssl_client_certificate: Indicates a base64-encoded certificate.
        :param builtins.str ssl_client_private_key: Indicates a base64-encoded private key.
        :param builtins.int test_interval: Indicates the interval at which the liveness test is run, in seconds.
        :param builtins.str test_object: Specifies the static text that acts as a stand-in for the data that you're sending on the network.
        :param builtins.str test_object_password: Specifies the test object's password.
        :param builtins.int test_object_port: Specifies the port number for the testObject.
        :param builtins.str test_object_protocol: Specifies the test protocol.
        :param builtins.str test_object_username: A descriptive name for the testObject.
        :param builtins.float test_timeout: Specifies the duration of the liveness test before it fails.
        :param builtins.float timeout_penalty: Specifies the timeout penalty score.
        :param Sequence['GetGtmDomainPropertyLivenessTestHttpHeaderArgs'] http_headers: List of HTTP headers for the liveness test.
        """
        pulumi.set(__self__, "alternate_ca_certificates", alternate_ca_certificates)
        pulumi.set(__self__, "answers_required", answers_required)
        pulumi.set(__self__, "disable_nonstandard_port_warning", disable_nonstandard_port_warning)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "error_penalty", error_penalty)
        pulumi.set(__self__, "http_error3xx", http_error3xx)
        pulumi.set(__self__, "http_error4xx", http_error4xx)
        pulumi.set(__self__, "http_error5xx", http_error5xx)
        pulumi.set(__self__, "http_method", http_method)
        pulumi.set(__self__, "http_request_body", http_request_body)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "peer_certificate_verification", peer_certificate_verification)
        pulumi.set(__self__, "pre2023_security_posture", pre2023_security_posture)
        pulumi.set(__self__, "recursion_requested", recursion_requested)
        pulumi.set(__self__, "request_string", request_string)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "response_string", response_string)
        pulumi.set(__self__, "ssl_client_certificate", ssl_client_certificate)
        pulumi.set(__self__, "ssl_client_private_key", ssl_client_private_key)
        pulumi.set(__self__, "test_interval", test_interval)
        pulumi.set(__self__, "test_object", test_object)
        pulumi.set(__self__, "test_object_password", test_object_password)
        pulumi.set(__self__, "test_object_port", test_object_port)
        pulumi.set(__self__, "test_object_protocol", test_object_protocol)
        pulumi.set(__self__, "test_object_username", test_object_username)
        pulumi.set(__self__, "test_timeout", test_timeout)
        pulumi.set(__self__, "timeout_penalty", timeout_penalty)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)

    @property
    @pulumi.getter(name="alternateCaCertificates")
    def alternate_ca_certificates(self) -> Sequence[builtins.str]:
        """
        List of alternate trust anchors (CA certificates)
        """
        return pulumi.get(self, "alternate_ca_certificates")

    @alternate_ca_certificates.setter
    def alternate_ca_certificates(self, value: Sequence[builtins.str]):
        pulumi.set(self, "alternate_ca_certificates", value)

    @property
    @pulumi.getter(name="answersRequired")
    def answers_required(self) -> builtins.bool:
        """
        If testObjectProtocol is DNS, DOH or DOT, requires an answer to the DNS query to be considered a success.
        """
        return pulumi.get(self, "answers_required")

    @answers_required.setter
    def answers_required(self, value: builtins.bool):
        pulumi.set(self, "answers_required", value)

    @property
    @pulumi.getter(name="disableNonstandardPortWarning")
    def disable_nonstandard_port_warning(self) -> builtins.bool:
        """
        Disables warnings when non-standard ports are used.
        """
        return pulumi.get(self, "disable_nonstandard_port_warning")

    @disable_nonstandard_port_warning.setter
    def disable_nonstandard_port_warning(self, value: builtins.bool):
        pulumi.set(self, "disable_nonstandard_port_warning", value)

    @property
    @pulumi.getter
    def disabled(self) -> builtins.bool:
        """
        Disables the liveness test.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: builtins.bool):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="errorPenalty")
    def error_penalty(self) -> builtins.float:
        """
        Specifies the score that's reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
        """
        return pulumi.get(self, "error_penalty")

    @error_penalty.setter
    def error_penalty(self, value: builtins.float):
        pulumi.set(self, "error_penalty", value)

    @property
    @pulumi.getter(name="httpError3xx")
    def http_error3xx(self) -> builtins.bool:
        """
        Treats a 3xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
        """
        return pulumi.get(self, "http_error3xx")

    @http_error3xx.setter
    def http_error3xx(self, value: builtins.bool):
        pulumi.set(self, "http_error3xx", value)

    @property
    @pulumi.getter(name="httpError4xx")
    def http_error4xx(self) -> builtins.bool:
        """
        Treats a 4xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
        """
        return pulumi.get(self, "http_error4xx")

    @http_error4xx.setter
    def http_error4xx(self, value: builtins.bool):
        pulumi.set(self, "http_error4xx", value)

    @property
    @pulumi.getter(name="httpError5xx")
    def http_error5xx(self) -> builtins.bool:
        """
        Treats a 5xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
        """
        return pulumi.get(self, "http_error5xx")

    @http_error5xx.setter
    def http_error5xx(self, value: builtins.bool):
        pulumi.set(self, "http_error5xx", value)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> builtins.str:
        """
        Contains HTTP method to send if the `testObjectProtocol` is `http` or `https`. Supported values are `TRACE`, `HEAD`, `OPTIONS`, `GET`, `PUT`, `POST`, `PATCH`, `DELETE`. When omitted or `null`, this value defaults to `GET`.
        """
        return pulumi.get(self, "http_method")

    @http_method.setter
    def http_method(self, value: builtins.str):
        pulumi.set(self, "http_method", value)

    @property
    @pulumi.getter(name="httpRequestBody")
    def http_request_body(self) -> builtins.str:
        """
        Contains Base64-encoded HTTP request body to send if the `testObjectProtocol` is `http` or `https`. When omitted or `null`, omits the request body from the request.
        """
        return pulumi.get(self, "http_request_body")

    @http_request_body.setter
    def http_request_body(self, value: builtins.str):
        pulumi.set(self, "http_request_body", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A descriptive name for the liveness test.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="peerCertificateVerification")
    def peer_certificate_verification(self) -> builtins.bool:
        """
        Validates the origin certificate. Applies only to tests with testObjectProtocol of https.
        """
        return pulumi.get(self, "peer_certificate_verification")

    @peer_certificate_verification.setter
    def peer_certificate_verification(self, value: builtins.bool):
        pulumi.set(self, "peer_certificate_verification", value)

    @property
    @pulumi.getter(name="pre2023SecurityPosture")
    def pre2023_security_posture(self) -> builtins.bool:
        """
        Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
        """
        return pulumi.get(self, "pre2023_security_posture")

    @pre2023_security_posture.setter
    def pre2023_security_posture(self, value: builtins.bool):
        pulumi.set(self, "pre2023_security_posture", value)

    @property
    @pulumi.getter(name="recursionRequested")
    def recursion_requested(self) -> builtins.bool:
        """
        Indicates that if testObjectProtocol is DNS, DOH or DOT, the DNS query is recursive.
        """
        return pulumi.get(self, "recursion_requested")

    @recursion_requested.setter
    def recursion_requested(self, value: builtins.bool):
        pulumi.set(self, "recursion_requested", value)

    @property
    @pulumi.getter(name="requestString")
    def request_string(self) -> builtins.str:
        """
        Specifies a request string.
        """
        return pulumi.get(self, "request_string")

    @request_string.setter
    def request_string(self, value: builtins.str):
        pulumi.set(self, "request_string", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        Specifies the query type, if testObjectProtocol is DNS.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: builtins.str):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="responseString")
    def response_string(self) -> builtins.str:
        """
        Specifies a response string.
        """
        return pulumi.get(self, "response_string")

    @response_string.setter
    def response_string(self, value: builtins.str):
        pulumi.set(self, "response_string", value)

    @property
    @pulumi.getter(name="sslClientCertificate")
    def ssl_client_certificate(self) -> builtins.str:
        """
        Indicates a base64-encoded certificate.
        """
        return pulumi.get(self, "ssl_client_certificate")

    @ssl_client_certificate.setter
    def ssl_client_certificate(self, value: builtins.str):
        pulumi.set(self, "ssl_client_certificate", value)

    @property
    @pulumi.getter(name="sslClientPrivateKey")
    def ssl_client_private_key(self) -> builtins.str:
        """
        Indicates a base64-encoded private key.
        """
        return pulumi.get(self, "ssl_client_private_key")

    @ssl_client_private_key.setter
    def ssl_client_private_key(self, value: builtins.str):
        pulumi.set(self, "ssl_client_private_key", value)

    @property
    @pulumi.getter(name="testInterval")
    def test_interval(self) -> builtins.int:
        """
        Indicates the interval at which the liveness test is run, in seconds.
        """
        return pulumi.get(self, "test_interval")

    @test_interval.setter
    def test_interval(self, value: builtins.int):
        pulumi.set(self, "test_interval", value)

    @property
    @pulumi.getter(name="testObject")
    def test_object(self) -> builtins.str:
        """
        Specifies the static text that acts as a stand-in for the data that you're sending on the network.
        """
        return pulumi.get(self, "test_object")

    @test_object.setter
    def test_object(self, value: builtins.str):
        pulumi.set(self, "test_object", value)

    @property
    @pulumi.getter(name="testObjectPassword")
    def test_object_password(self) -> builtins.str:
        """
        Specifies the test object's password.
        """
        return pulumi.get(self, "test_object_password")

    @test_object_password.setter
    def test_object_password(self, value: builtins.str):
        pulumi.set(self, "test_object_password", value)

    @property
    @pulumi.getter(name="testObjectPort")
    def test_object_port(self) -> builtins.int:
        """
        Specifies the port number for the testObject.
        """
        return pulumi.get(self, "test_object_port")

    @test_object_port.setter
    def test_object_port(self, value: builtins.int):
        pulumi.set(self, "test_object_port", value)

    @property
    @pulumi.getter(name="testObjectProtocol")
    def test_object_protocol(self) -> builtins.str:
        """
        Specifies the test protocol.
        """
        return pulumi.get(self, "test_object_protocol")

    @test_object_protocol.setter
    def test_object_protocol(self, value: builtins.str):
        pulumi.set(self, "test_object_protocol", value)

    @property
    @pulumi.getter(name="testObjectUsername")
    def test_object_username(self) -> builtins.str:
        """
        A descriptive name for the testObject.
        """
        return pulumi.get(self, "test_object_username")

    @test_object_username.setter
    def test_object_username(self, value: builtins.str):
        pulumi.set(self, "test_object_username", value)

    @property
    @pulumi.getter(name="testTimeout")
    def test_timeout(self) -> builtins.float:
        """
        Specifies the duration of the liveness test before it fails.
        """
        return pulumi.get(self, "test_timeout")

    @test_timeout.setter
    def test_timeout(self, value: builtins.float):
        pulumi.set(self, "test_timeout", value)

    @property
    @pulumi.getter(name="timeoutPenalty")
    def timeout_penalty(self) -> builtins.float:
        """
        Specifies the timeout penalty score.
        """
        return pulumi.get(self, "timeout_penalty")

    @timeout_penalty.setter
    def timeout_penalty(self, value: builtins.float):
        pulumi.set(self, "timeout_penalty", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['GetGtmDomainPropertyLivenessTestHttpHeaderArgs']]:
        """
        List of HTTP headers for the liveness test.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[Sequence['GetGtmDomainPropertyLivenessTestHttpHeaderArgs']]):
        pulumi.set(self, "http_headers", value)


if not MYPY:
    class GetGtmDomainPropertyLivenessTestHttpHeaderArgsDict(TypedDict):
        name: builtins.str
        """
        Name of the HTTP header.
        """
        value: builtins.str
        """
        Value of the HTTP header.
        """
elif False:
    GetGtmDomainPropertyLivenessTestHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainPropertyLivenessTestHttpHeaderArgs:
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str name: Name of the HTTP header.
        :param builtins.str value: Value of the HTTP header.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the HTTP header.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of the HTTP header.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: builtins.str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetGtmDomainPropertyStaticRrSetArgsDict(TypedDict):
        rdatas: Sequence[builtins.str]
        """
        An array of data strings, representing multiple records within a set.
        """
        ttl: builtins.int
        """
        The number of seconds that this record should live in a resolver's cache before being refetched.
        """
        type: builtins.str
        """
        The record type.
        """
elif False:
    GetGtmDomainPropertyStaticRrSetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainPropertyStaticRrSetArgs:
    def __init__(__self__, *,
                 rdatas: Sequence[builtins.str],
                 ttl: builtins.int,
                 type: builtins.str):
        """
        :param Sequence[builtins.str] rdatas: An array of data strings, representing multiple records within a set.
        :param builtins.int ttl: The number of seconds that this record should live in a resolver's cache before being refetched.
        :param builtins.str type: The record type.
        """
        pulumi.set(__self__, "rdatas", rdatas)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def rdatas(self) -> Sequence[builtins.str]:
        """
        An array of data strings, representing multiple records within a set.
        """
        return pulumi.get(self, "rdatas")

    @rdatas.setter
    def rdatas(self, value: Sequence[builtins.str]):
        pulumi.set(self, "rdatas", value)

    @property
    @pulumi.getter
    def ttl(self) -> builtins.int:
        """
        The number of seconds that this record should live in a resolver's cache before being refetched.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: builtins.int):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The record type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)


if not MYPY:
    class GetGtmDomainPropertyTrafficTargetArgsDict(TypedDict):
        datacenter_id: builtins.int
        """
        A unique identifier for an existing data center in the domain.
        """
        enabled: builtins.bool
        """
        Indicates whether the traffic target is used.
        """
        handout_cname: builtins.str
        """
        Specifies an optional data center for the property.
        """
        name: builtins.str
        """
        An alternative label for the traffic target.
        """
        precedence: builtins.int
        """
        Non-negative integer that ranks the order of the backups that GTM will hand out in the event that the primary Traffic Target has been declared down
        """
        servers: Sequence[builtins.str]
        """
        Identifies the IP address or the hostnames of the servers.
        """
        weight: builtins.float
        """
        Specifies the traffic target weight for the target.
        """
elif False:
    GetGtmDomainPropertyTrafficTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainPropertyTrafficTargetArgs:
    def __init__(__self__, *,
                 datacenter_id: builtins.int,
                 enabled: builtins.bool,
                 handout_cname: builtins.str,
                 name: builtins.str,
                 precedence: builtins.int,
                 servers: Sequence[builtins.str],
                 weight: builtins.float):
        """
        :param builtins.int datacenter_id: A unique identifier for an existing data center in the domain.
        :param builtins.bool enabled: Indicates whether the traffic target is used.
        :param builtins.str handout_cname: Specifies an optional data center for the property.
        :param builtins.str name: An alternative label for the traffic target.
        :param builtins.int precedence: Non-negative integer that ranks the order of the backups that GTM will hand out in the event that the primary Traffic Target has been declared down
        :param Sequence[builtins.str] servers: Identifies the IP address or the hostnames of the servers.
        :param builtins.float weight: Specifies the traffic target weight for the target.
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "handout_cname", handout_cname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "precedence", precedence)
        pulumi.set(__self__, "servers", servers)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> builtins.int:
        """
        A unique identifier for an existing data center in the domain.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: builtins.int):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Indicates whether the traffic target is used.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: builtins.bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="handoutCname")
    def handout_cname(self) -> builtins.str:
        """
        Specifies an optional data center for the property.
        """
        return pulumi.get(self, "handout_cname")

    @handout_cname.setter
    def handout_cname(self, value: builtins.str):
        pulumi.set(self, "handout_cname", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        An alternative label for the traffic target.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def precedence(self) -> builtins.int:
        """
        Non-negative integer that ranks the order of the backups that GTM will hand out in the event that the primary Traffic Target has been declared down
        """
        return pulumi.get(self, "precedence")

    @precedence.setter
    def precedence(self, value: builtins.int):
        pulumi.set(self, "precedence", value)

    @property
    @pulumi.getter
    def servers(self) -> Sequence[builtins.str]:
        """
        Identifies the IP address or the hostnames of the servers.
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Sequence[builtins.str]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter
    def weight(self) -> builtins.float:
        """
        Specifies the traffic target weight for the target.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: builtins.float):
        pulumi.set(self, "weight", value)


if not MYPY:
    class GetGtmDomainResourceArgsDict(TypedDict):
        aggregation_type: builtins.str
        """
        Specifies how GTM handles different load numbers when multiple load servers are used for a data center or property.
        """
        constrained_property: builtins.str
        """
        Specifies the name of the property that this resource constraints.
        """
        decay_rate: builtins.float
        """
        For internal use only.
        """
        description: builtins.str
        """
        A descriptive note to help you track what the resource constraints.
        """
        host_header: builtins.str
        """
        Specifies the host header used when fetching the load object.
        """
        leader_string: builtins.str
        """
        Specifies the text that comes before the loadObject.
        """
        least_squares_decay: builtins.float
        """
        For internal use only.
        """
        load_imbalance_percentage: builtins.float
        """
        Indicates the percent of load imbalance factor for the domain.
        """
        max_u_multiplicative_increment: builtins.float
        """
        For internal use only.
        """
        name: builtins.str
        """
        A descriptive label for the resource.
        """
        type: builtins.str
        """
        Indicates the kind of loadObject format used to determine the load on the resource.
        """
        upper_bound: builtins.int
        """
        An optional sanity check that specifies the maximum allowed value for any component of the load object.
        """
        links: NotRequired[Sequence['GetGtmDomainResourceLinkArgsDict']]
        """
        Specifies the URL path that allows direct navigation to the resource.
        """
        resource_instances: NotRequired[Sequence['GetGtmDomainResourceResourceInstanceArgsDict']]
        """
        List of resource instances.
        """
elif False:
    GetGtmDomainResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainResourceArgs:
    def __init__(__self__, *,
                 aggregation_type: builtins.str,
                 constrained_property: builtins.str,
                 decay_rate: builtins.float,
                 description: builtins.str,
                 host_header: builtins.str,
                 leader_string: builtins.str,
                 least_squares_decay: builtins.float,
                 load_imbalance_percentage: builtins.float,
                 max_u_multiplicative_increment: builtins.float,
                 name: builtins.str,
                 type: builtins.str,
                 upper_bound: builtins.int,
                 links: Optional[Sequence['GetGtmDomainResourceLinkArgs']] = None,
                 resource_instances: Optional[Sequence['GetGtmDomainResourceResourceInstanceArgs']] = None):
        """
        :param builtins.str aggregation_type: Specifies how GTM handles different load numbers when multiple load servers are used for a data center or property.
        :param builtins.str constrained_property: Specifies the name of the property that this resource constraints.
        :param builtins.float decay_rate: For internal use only.
        :param builtins.str description: A descriptive note to help you track what the resource constraints.
        :param builtins.str host_header: Specifies the host header used when fetching the load object.
        :param builtins.str leader_string: Specifies the text that comes before the loadObject.
        :param builtins.float least_squares_decay: For internal use only.
        :param builtins.float load_imbalance_percentage: Indicates the percent of load imbalance factor for the domain.
        :param builtins.float max_u_multiplicative_increment: For internal use only.
        :param builtins.str name: A descriptive label for the resource.
        :param builtins.str type: Indicates the kind of loadObject format used to determine the load on the resource.
        :param builtins.int upper_bound: An optional sanity check that specifies the maximum allowed value for any component of the load object.
        :param Sequence['GetGtmDomainResourceLinkArgs'] links: Specifies the URL path that allows direct navigation to the resource.
        :param Sequence['GetGtmDomainResourceResourceInstanceArgs'] resource_instances: List of resource instances.
        """
        pulumi.set(__self__, "aggregation_type", aggregation_type)
        pulumi.set(__self__, "constrained_property", constrained_property)
        pulumi.set(__self__, "decay_rate", decay_rate)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "host_header", host_header)
        pulumi.set(__self__, "leader_string", leader_string)
        pulumi.set(__self__, "least_squares_decay", least_squares_decay)
        pulumi.set(__self__, "load_imbalance_percentage", load_imbalance_percentage)
        pulumi.set(__self__, "max_u_multiplicative_increment", max_u_multiplicative_increment)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "upper_bound", upper_bound)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if resource_instances is not None:
            pulumi.set(__self__, "resource_instances", resource_instances)

    @property
    @pulumi.getter(name="aggregationType")
    def aggregation_type(self) -> builtins.str:
        """
        Specifies how GTM handles different load numbers when multiple load servers are used for a data center or property.
        """
        return pulumi.get(self, "aggregation_type")

    @aggregation_type.setter
    def aggregation_type(self, value: builtins.str):
        pulumi.set(self, "aggregation_type", value)

    @property
    @pulumi.getter(name="constrainedProperty")
    def constrained_property(self) -> builtins.str:
        """
        Specifies the name of the property that this resource constraints.
        """
        return pulumi.get(self, "constrained_property")

    @constrained_property.setter
    def constrained_property(self, value: builtins.str):
        pulumi.set(self, "constrained_property", value)

    @property
    @pulumi.getter(name="decayRate")
    def decay_rate(self) -> builtins.float:
        """
        For internal use only.
        """
        return pulumi.get(self, "decay_rate")

    @decay_rate.setter
    def decay_rate(self, value: builtins.float):
        pulumi.set(self, "decay_rate", value)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A descriptive note to help you track what the resource constraints.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: builtins.str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> builtins.str:
        """
        Specifies the host header used when fetching the load object.
        """
        return pulumi.get(self, "host_header")

    @host_header.setter
    def host_header(self, value: builtins.str):
        pulumi.set(self, "host_header", value)

    @property
    @pulumi.getter(name="leaderString")
    def leader_string(self) -> builtins.str:
        """
        Specifies the text that comes before the loadObject.
        """
        return pulumi.get(self, "leader_string")

    @leader_string.setter
    def leader_string(self, value: builtins.str):
        pulumi.set(self, "leader_string", value)

    @property
    @pulumi.getter(name="leastSquaresDecay")
    def least_squares_decay(self) -> builtins.float:
        """
        For internal use only.
        """
        return pulumi.get(self, "least_squares_decay")

    @least_squares_decay.setter
    def least_squares_decay(self, value: builtins.float):
        pulumi.set(self, "least_squares_decay", value)

    @property
    @pulumi.getter(name="loadImbalancePercentage")
    def load_imbalance_percentage(self) -> builtins.float:
        """
        Indicates the percent of load imbalance factor for the domain.
        """
        return pulumi.get(self, "load_imbalance_percentage")

    @load_imbalance_percentage.setter
    def load_imbalance_percentage(self, value: builtins.float):
        pulumi.set(self, "load_imbalance_percentage", value)

    @property
    @pulumi.getter(name="maxUMultiplicativeIncrement")
    def max_u_multiplicative_increment(self) -> builtins.float:
        """
        For internal use only.
        """
        return pulumi.get(self, "max_u_multiplicative_increment")

    @max_u_multiplicative_increment.setter
    def max_u_multiplicative_increment(self, value: builtins.float):
        pulumi.set(self, "max_u_multiplicative_increment", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A descriptive label for the resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Indicates the kind of loadObject format used to determine the load on the resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> builtins.int:
        """
        An optional sanity check that specifies the maximum allowed value for any component of the load object.
        """
        return pulumi.get(self, "upper_bound")

    @upper_bound.setter
    def upper_bound(self, value: builtins.int):
        pulumi.set(self, "upper_bound", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['GetGtmDomainResourceLinkArgs']]:
        """
        Specifies the URL path that allows direct navigation to the resource.
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[Sequence['GetGtmDomainResourceLinkArgs']]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter(name="resourceInstances")
    def resource_instances(self) -> Optional[Sequence['GetGtmDomainResourceResourceInstanceArgs']]:
        """
        List of resource instances.
        """
        return pulumi.get(self, "resource_instances")

    @resource_instances.setter
    def resource_instances(self, value: Optional[Sequence['GetGtmDomainResourceResourceInstanceArgs']]):
        pulumi.set(self, "resource_instances", value)


if not MYPY:
    class GetGtmDomainResourceLinkArgsDict(TypedDict):
        href: builtins.str
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        rel: builtins.str
        """
        Indicates the link relationship of the object.
        """
elif False:
    GetGtmDomainResourceLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainResourceLinkArgs:
    def __init__(__self__, *,
                 href: builtins.str,
                 rel: builtins.str):
        """
        :param builtins.str href: A hypermedia link to the complete URL that uniquely defines a resource.
        :param builtins.str rel: Indicates the link relationship of the object.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @property
    @pulumi.getter
    def href(self) -> builtins.str:
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: builtins.str):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def rel(self) -> builtins.str:
        """
        Indicates the link relationship of the object.
        """
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: builtins.str):
        pulumi.set(self, "rel", value)


if not MYPY:
    class GetGtmDomainResourceResourceInstanceArgsDict(TypedDict):
        datacenter_id: builtins.int
        """
        A unique identifier for an existing data center in the domain.
        """
        load_object: builtins.str
        """
        Identifies the load object file used to report real-time information about the current load, maximum allowable load and target load on each resource.
        """
        load_object_port: builtins.int
        """
        Specifies the TCP port of the loadObject.
        """
        load_servers: Sequence[builtins.str]
        """
        Specifies the list of servers to requests the load object from.
        """
        use_default_load_object: builtins.bool
        """
        Whether to use default loadObject.
        """
elif False:
    GetGtmDomainResourceResourceInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainResourceResourceInstanceArgs:
    def __init__(__self__, *,
                 datacenter_id: builtins.int,
                 load_object: builtins.str,
                 load_object_port: builtins.int,
                 load_servers: Sequence[builtins.str],
                 use_default_load_object: builtins.bool):
        """
        :param builtins.int datacenter_id: A unique identifier for an existing data center in the domain.
        :param builtins.str load_object: Identifies the load object file used to report real-time information about the current load, maximum allowable load and target load on each resource.
        :param builtins.int load_object_port: Specifies the TCP port of the loadObject.
        :param Sequence[builtins.str] load_servers: Specifies the list of servers to requests the load object from.
        :param builtins.bool use_default_load_object: Whether to use default loadObject.
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "load_object", load_object)
        pulumi.set(__self__, "load_object_port", load_object_port)
        pulumi.set(__self__, "load_servers", load_servers)
        pulumi.set(__self__, "use_default_load_object", use_default_load_object)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> builtins.int:
        """
        A unique identifier for an existing data center in the domain.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: builtins.int):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="loadObject")
    def load_object(self) -> builtins.str:
        """
        Identifies the load object file used to report real-time information about the current load, maximum allowable load and target load on each resource.
        """
        return pulumi.get(self, "load_object")

    @load_object.setter
    def load_object(self, value: builtins.str):
        pulumi.set(self, "load_object", value)

    @property
    @pulumi.getter(name="loadObjectPort")
    def load_object_port(self) -> builtins.int:
        """
        Specifies the TCP port of the loadObject.
        """
        return pulumi.get(self, "load_object_port")

    @load_object_port.setter
    def load_object_port(self, value: builtins.int):
        pulumi.set(self, "load_object_port", value)

    @property
    @pulumi.getter(name="loadServers")
    def load_servers(self) -> Sequence[builtins.str]:
        """
        Specifies the list of servers to requests the load object from.
        """
        return pulumi.get(self, "load_servers")

    @load_servers.setter
    def load_servers(self, value: Sequence[builtins.str]):
        pulumi.set(self, "load_servers", value)

    @property
    @pulumi.getter(name="useDefaultLoadObject")
    def use_default_load_object(self) -> builtins.bool:
        """
        Whether to use default loadObject.
        """
        return pulumi.get(self, "use_default_load_object")

    @use_default_load_object.setter
    def use_default_load_object(self, value: builtins.bool):
        pulumi.set(self, "use_default_load_object", value)


if not MYPY:
    class GetGtmDomainStatusArgsDict(TypedDict):
        change_id: builtins.str
        """
        A unique identifier generated when a change occurs to the domain.
        """
        message: builtins.str
        """
        A notification generated when a change occurs to the domain.
        """
        passing_validation: builtins.bool
        """
        Indicates if the domain validates.
        """
        propagation_status: builtins.str
        """
        Tracks the status of the domain's propagation state.
        """
        propagation_status_date: builtins.str
        """
        An ISO 8601 timestamp indicating when a change occurs to the domain.
        """
        links: NotRequired[Sequence['GetGtmDomainStatusLinkArgsDict']]
        """
        Specifies the URL path that allows direct navigation to the domain.
        """
elif False:
    GetGtmDomainStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainStatusArgs:
    def __init__(__self__, *,
                 change_id: builtins.str,
                 message: builtins.str,
                 passing_validation: builtins.bool,
                 propagation_status: builtins.str,
                 propagation_status_date: builtins.str,
                 links: Optional[Sequence['GetGtmDomainStatusLinkArgs']] = None):
        """
        :param builtins.str change_id: A unique identifier generated when a change occurs to the domain.
        :param builtins.str message: A notification generated when a change occurs to the domain.
        :param builtins.bool passing_validation: Indicates if the domain validates.
        :param builtins.str propagation_status: Tracks the status of the domain's propagation state.
        :param builtins.str propagation_status_date: An ISO 8601 timestamp indicating when a change occurs to the domain.
        :param Sequence['GetGtmDomainStatusLinkArgs'] links: Specifies the URL path that allows direct navigation to the domain.
        """
        pulumi.set(__self__, "change_id", change_id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "passing_validation", passing_validation)
        pulumi.set(__self__, "propagation_status", propagation_status)
        pulumi.set(__self__, "propagation_status_date", propagation_status_date)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter(name="changeId")
    def change_id(self) -> builtins.str:
        """
        A unique identifier generated when a change occurs to the domain.
        """
        return pulumi.get(self, "change_id")

    @change_id.setter
    def change_id(self, value: builtins.str):
        pulumi.set(self, "change_id", value)

    @property
    @pulumi.getter
    def message(self) -> builtins.str:
        """
        A notification generated when a change occurs to the domain.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: builtins.str):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="passingValidation")
    def passing_validation(self) -> builtins.bool:
        """
        Indicates if the domain validates.
        """
        return pulumi.get(self, "passing_validation")

    @passing_validation.setter
    def passing_validation(self, value: builtins.bool):
        pulumi.set(self, "passing_validation", value)

    @property
    @pulumi.getter(name="propagationStatus")
    def propagation_status(self) -> builtins.str:
        """
        Tracks the status of the domain's propagation state.
        """
        return pulumi.get(self, "propagation_status")

    @propagation_status.setter
    def propagation_status(self, value: builtins.str):
        pulumi.set(self, "propagation_status", value)

    @property
    @pulumi.getter(name="propagationStatusDate")
    def propagation_status_date(self) -> builtins.str:
        """
        An ISO 8601 timestamp indicating when a change occurs to the domain.
        """
        return pulumi.get(self, "propagation_status_date")

    @propagation_status_date.setter
    def propagation_status_date(self, value: builtins.str):
        pulumi.set(self, "propagation_status_date", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['GetGtmDomainStatusLinkArgs']]:
        """
        Specifies the URL path that allows direct navigation to the domain.
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[Sequence['GetGtmDomainStatusLinkArgs']]):
        pulumi.set(self, "links", value)


if not MYPY:
    class GetGtmDomainStatusLinkArgsDict(TypedDict):
        href: builtins.str
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        rel: builtins.str
        """
        Indicates the link relationship of the object.
        """
elif False:
    GetGtmDomainStatusLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainStatusLinkArgs:
    def __init__(__self__, *,
                 href: builtins.str,
                 rel: builtins.str):
        """
        :param builtins.str href: A hypermedia link to the complete URL that uniquely defines a resource.
        :param builtins.str rel: Indicates the link relationship of the object.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @property
    @pulumi.getter
    def href(self) -> builtins.str:
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: builtins.str):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def rel(self) -> builtins.str:
        """
        Indicates the link relationship of the object.
        """
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: builtins.str):
        pulumi.set(self, "rel", value)


if not MYPY:
    class GetGtmDomainsDomainArgsDict(TypedDict):
        acg_id: builtins.str
        """
        The contract's identifier, with which the domain is associated.
        """
        activation_state: builtins.str
        """
        'PENDING' when a change has been made but not yet propagated; 'COMPLETE' when the last configuration change has propagated successfully; 'DENIED' if the domain configuration failed validation; 'DELETED' if the domain has been deleted.
        """
        change_id: builtins.str
        """
        UUID that identifies a version of the domain configuration.
        """
        delete_request_id: builtins.str
        """
        UUID for delete request during domain deletion. Null if the domain is not being deleted.
        """
        last_modified: builtins.str
        """
        An ISO 8601 timestamp that indicates the time of the last domain change.
        """
        last_modified_by: builtins.str
        """
        The email address of the administrator who made the last change to the domain.
        """
        modification_comments: builtins.str
        """
        A descriptive note about changes to the domain.
        """
        name: builtins.str
        """
        A unique domain name.
        """
        sign_and_serve: builtins.bool
        """
        If set (true) we will sign the domain's resource records so that they can be validated by a validating resolver.
        """
        sign_and_serve_algorithm: builtins.str
        """
        The signing algorithm to use for signAndServe. One of the following values: RSA_SHA1, RSA_SHA256, RSA_SHA512, ECDSA_P256_SHA256, ECDSA_P384_SHA384, ED25519, ED448.
        """
        status: builtins.str
        """
        The current status of the domain.
        """
        links: NotRequired[Sequence['GetGtmDomainsDomainLinkArgsDict']]
        """
        Provides a URL path that allows direct navigation to the domain.
        """
elif False:
    GetGtmDomainsDomainArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainsDomainArgs:
    def __init__(__self__, *,
                 acg_id: builtins.str,
                 activation_state: builtins.str,
                 change_id: builtins.str,
                 delete_request_id: builtins.str,
                 last_modified: builtins.str,
                 last_modified_by: builtins.str,
                 modification_comments: builtins.str,
                 name: builtins.str,
                 sign_and_serve: builtins.bool,
                 sign_and_serve_algorithm: builtins.str,
                 status: builtins.str,
                 links: Optional[Sequence['GetGtmDomainsDomainLinkArgs']] = None):
        """
        :param builtins.str acg_id: The contract's identifier, with which the domain is associated.
        :param builtins.str activation_state: 'PENDING' when a change has been made but not yet propagated; 'COMPLETE' when the last configuration change has propagated successfully; 'DENIED' if the domain configuration failed validation; 'DELETED' if the domain has been deleted.
        :param builtins.str change_id: UUID that identifies a version of the domain configuration.
        :param builtins.str delete_request_id: UUID for delete request during domain deletion. Null if the domain is not being deleted.
        :param builtins.str last_modified: An ISO 8601 timestamp that indicates the time of the last domain change.
        :param builtins.str last_modified_by: The email address of the administrator who made the last change to the domain.
        :param builtins.str modification_comments: A descriptive note about changes to the domain.
        :param builtins.str name: A unique domain name.
        :param builtins.bool sign_and_serve: If set (true) we will sign the domain's resource records so that they can be validated by a validating resolver.
        :param builtins.str sign_and_serve_algorithm: The signing algorithm to use for signAndServe. One of the following values: RSA_SHA1, RSA_SHA256, RSA_SHA512, ECDSA_P256_SHA256, ECDSA_P384_SHA384, ED25519, ED448.
        :param builtins.str status: The current status of the domain.
        :param Sequence['GetGtmDomainsDomainLinkArgs'] links: Provides a URL path that allows direct navigation to the domain.
        """
        pulumi.set(__self__, "acg_id", acg_id)
        pulumi.set(__self__, "activation_state", activation_state)
        pulumi.set(__self__, "change_id", change_id)
        pulumi.set(__self__, "delete_request_id", delete_request_id)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "last_modified_by", last_modified_by)
        pulumi.set(__self__, "modification_comments", modification_comments)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sign_and_serve", sign_and_serve)
        pulumi.set(__self__, "sign_and_serve_algorithm", sign_and_serve_algorithm)
        pulumi.set(__self__, "status", status)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter(name="acgId")
    def acg_id(self) -> builtins.str:
        """
        The contract's identifier, with which the domain is associated.
        """
        return pulumi.get(self, "acg_id")

    @acg_id.setter
    def acg_id(self, value: builtins.str):
        pulumi.set(self, "acg_id", value)

    @property
    @pulumi.getter(name="activationState")
    def activation_state(self) -> builtins.str:
        """
        'PENDING' when a change has been made but not yet propagated; 'COMPLETE' when the last configuration change has propagated successfully; 'DENIED' if the domain configuration failed validation; 'DELETED' if the domain has been deleted.
        """
        return pulumi.get(self, "activation_state")

    @activation_state.setter
    def activation_state(self, value: builtins.str):
        pulumi.set(self, "activation_state", value)

    @property
    @pulumi.getter(name="changeId")
    def change_id(self) -> builtins.str:
        """
        UUID that identifies a version of the domain configuration.
        """
        return pulumi.get(self, "change_id")

    @change_id.setter
    def change_id(self, value: builtins.str):
        pulumi.set(self, "change_id", value)

    @property
    @pulumi.getter(name="deleteRequestId")
    def delete_request_id(self) -> builtins.str:
        """
        UUID for delete request during domain deletion. Null if the domain is not being deleted.
        """
        return pulumi.get(self, "delete_request_id")

    @delete_request_id.setter
    def delete_request_id(self, value: builtins.str):
        pulumi.set(self, "delete_request_id", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> builtins.str:
        """
        An ISO 8601 timestamp that indicates the time of the last domain change.
        """
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: builtins.str):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> builtins.str:
        """
        The email address of the administrator who made the last change to the domain.
        """
        return pulumi.get(self, "last_modified_by")

    @last_modified_by.setter
    def last_modified_by(self, value: builtins.str):
        pulumi.set(self, "last_modified_by", value)

    @property
    @pulumi.getter(name="modificationComments")
    def modification_comments(self) -> builtins.str:
        """
        A descriptive note about changes to the domain.
        """
        return pulumi.get(self, "modification_comments")

    @modification_comments.setter
    def modification_comments(self, value: builtins.str):
        pulumi.set(self, "modification_comments", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A unique domain name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="signAndServe")
    def sign_and_serve(self) -> builtins.bool:
        """
        If set (true) we will sign the domain's resource records so that they can be validated by a validating resolver.
        """
        return pulumi.get(self, "sign_and_serve")

    @sign_and_serve.setter
    def sign_and_serve(self, value: builtins.bool):
        pulumi.set(self, "sign_and_serve", value)

    @property
    @pulumi.getter(name="signAndServeAlgorithm")
    def sign_and_serve_algorithm(self) -> builtins.str:
        """
        The signing algorithm to use for signAndServe. One of the following values: RSA_SHA1, RSA_SHA256, RSA_SHA512, ECDSA_P256_SHA256, ECDSA_P384_SHA384, ED25519, ED448.
        """
        return pulumi.get(self, "sign_and_serve_algorithm")

    @sign_and_serve_algorithm.setter
    def sign_and_serve_algorithm(self, value: builtins.str):
        pulumi.set(self, "sign_and_serve_algorithm", value)

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The current status of the domain.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: builtins.str):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['GetGtmDomainsDomainLinkArgs']]:
        """
        Provides a URL path that allows direct navigation to the domain.
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[Sequence['GetGtmDomainsDomainLinkArgs']]):
        pulumi.set(self, "links", value)


if not MYPY:
    class GetGtmDomainsDomainLinkArgsDict(TypedDict):
        href: builtins.str
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        rel: builtins.str
        """
        Indicates the link relationship of the object.
        """
elif False:
    GetGtmDomainsDomainLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmDomainsDomainLinkArgs:
    def __init__(__self__, *,
                 href: builtins.str,
                 rel: builtins.str):
        """
        :param builtins.str href: A hypermedia link to the complete URL that uniquely defines a resource.
        :param builtins.str rel: Indicates the link relationship of the object.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @property
    @pulumi.getter
    def href(self) -> builtins.str:
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: builtins.str):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def rel(self) -> builtins.str:
        """
        Indicates the link relationship of the object.
        """
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: builtins.str):
        pulumi.set(self, "rel", value)


if not MYPY:
    class GetGtmResourceLinkArgsDict(TypedDict):
        href: builtins.str
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        rel: builtins.str
        """
        Indicates the link relationship of the object.
        """
elif False:
    GetGtmResourceLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmResourceLinkArgs:
    def __init__(__self__, *,
                 href: builtins.str,
                 rel: builtins.str):
        """
        :param builtins.str href: A hypermedia link to the complete URL that uniquely defines a resource.
        :param builtins.str rel: Indicates the link relationship of the object.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @property
    @pulumi.getter
    def href(self) -> builtins.str:
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: builtins.str):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def rel(self) -> builtins.str:
        """
        Indicates the link relationship of the object.
        """
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: builtins.str):
        pulumi.set(self, "rel", value)


if not MYPY:
    class GetGtmResourceResourceInstanceArgsDict(TypedDict):
        datacenter_id: builtins.int
        """
        A unique identifier for an existing data center in the domain.
        """
        load_object: builtins.str
        """
        Identifies the load object file used to report real-time information about the current load, maximum allowable load and target load on each resource.
        """
        load_object_port: builtins.int
        """
        Specifies the TCP port of the loadObject.
        """
        load_servers: Sequence[builtins.str]
        """
        Specifies the list of servers to requests the load object from.
        """
        use_default_load_object: builtins.bool
        """
        Whether to use default loadObject.
        """
elif False:
    GetGtmResourceResourceInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmResourceResourceInstanceArgs:
    def __init__(__self__, *,
                 datacenter_id: builtins.int,
                 load_object: builtins.str,
                 load_object_port: builtins.int,
                 load_servers: Sequence[builtins.str],
                 use_default_load_object: builtins.bool):
        """
        :param builtins.int datacenter_id: A unique identifier for an existing data center in the domain.
        :param builtins.str load_object: Identifies the load object file used to report real-time information about the current load, maximum allowable load and target load on each resource.
        :param builtins.int load_object_port: Specifies the TCP port of the loadObject.
        :param Sequence[builtins.str] load_servers: Specifies the list of servers to requests the load object from.
        :param builtins.bool use_default_load_object: Whether to use default loadObject.
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "load_object", load_object)
        pulumi.set(__self__, "load_object_port", load_object_port)
        pulumi.set(__self__, "load_servers", load_servers)
        pulumi.set(__self__, "use_default_load_object", use_default_load_object)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> builtins.int:
        """
        A unique identifier for an existing data center in the domain.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: builtins.int):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="loadObject")
    def load_object(self) -> builtins.str:
        """
        Identifies the load object file used to report real-time information about the current load, maximum allowable load and target load on each resource.
        """
        return pulumi.get(self, "load_object")

    @load_object.setter
    def load_object(self, value: builtins.str):
        pulumi.set(self, "load_object", value)

    @property
    @pulumi.getter(name="loadObjectPort")
    def load_object_port(self) -> builtins.int:
        """
        Specifies the TCP port of the loadObject.
        """
        return pulumi.get(self, "load_object_port")

    @load_object_port.setter
    def load_object_port(self, value: builtins.int):
        pulumi.set(self, "load_object_port", value)

    @property
    @pulumi.getter(name="loadServers")
    def load_servers(self) -> Sequence[builtins.str]:
        """
        Specifies the list of servers to requests the load object from.
        """
        return pulumi.get(self, "load_servers")

    @load_servers.setter
    def load_servers(self, value: Sequence[builtins.str]):
        pulumi.set(self, "load_servers", value)

    @property
    @pulumi.getter(name="useDefaultLoadObject")
    def use_default_load_object(self) -> builtins.bool:
        """
        Whether to use default loadObject.
        """
        return pulumi.get(self, "use_default_load_object")

    @use_default_load_object.setter
    def use_default_load_object(self, value: builtins.bool):
        pulumi.set(self, "use_default_load_object", value)


if not MYPY:
    class GetGtmResourcesResourceArgsDict(TypedDict):
        aggregation_type: builtins.str
        """
        Specifies how GTM handles different load numbers when multiple load servers are used for a data center or property.
        """
        constrained_property: builtins.str
        """
        Specifies the name of the property that this resource constraints.
        """
        decay_rate: builtins.float
        """
        For internal use only.
        """
        description: builtins.str
        """
        A descriptive note which allows to track what is constrained by this resource.
        """
        host_header: builtins.str
        """
        Specifies the host header used when fetching the load object.
        """
        leader_string: builtins.str
        """
        Specifies the text that comes before the load object.
        """
        least_squares_decay: builtins.float
        """
        For internal use only.
        """
        load_imbalance_percentage: builtins.float
        """
        Indicates the percentage of load imbalance for the domain.
        """
        max_u_multiplicative_increment: builtins.float
        """
        For internal use only.
        """
        name: builtins.str
        """
        A descriptive label for the resource.
        """
        type: builtins.str
        """
        Indicates the type of load object used to determine the load on the resource.
        """
        upper_bound: builtins.int
        """
        An optional sanity check that specifies the maximum allowed value for any component of the load object.
        """
        links: NotRequired[Sequence['GetGtmResourcesResourceLinkArgsDict']]
        """
        Specifies the URL path that allows direct navigation to the resource.
        """
        resource_instances: NotRequired[Sequence['GetGtmResourcesResourceResourceInstanceArgsDict']]
        """
        Instances of the resource.
        """
elif False:
    GetGtmResourcesResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmResourcesResourceArgs:
    def __init__(__self__, *,
                 aggregation_type: builtins.str,
                 constrained_property: builtins.str,
                 decay_rate: builtins.float,
                 description: builtins.str,
                 host_header: builtins.str,
                 leader_string: builtins.str,
                 least_squares_decay: builtins.float,
                 load_imbalance_percentage: builtins.float,
                 max_u_multiplicative_increment: builtins.float,
                 name: builtins.str,
                 type: builtins.str,
                 upper_bound: builtins.int,
                 links: Optional[Sequence['GetGtmResourcesResourceLinkArgs']] = None,
                 resource_instances: Optional[Sequence['GetGtmResourcesResourceResourceInstanceArgs']] = None):
        """
        :param builtins.str aggregation_type: Specifies how GTM handles different load numbers when multiple load servers are used for a data center or property.
        :param builtins.str constrained_property: Specifies the name of the property that this resource constraints.
        :param builtins.float decay_rate: For internal use only.
        :param builtins.str description: A descriptive note which allows to track what is constrained by this resource.
        :param builtins.str host_header: Specifies the host header used when fetching the load object.
        :param builtins.str leader_string: Specifies the text that comes before the load object.
        :param builtins.float least_squares_decay: For internal use only.
        :param builtins.float load_imbalance_percentage: Indicates the percentage of load imbalance for the domain.
        :param builtins.float max_u_multiplicative_increment: For internal use only.
        :param builtins.str name: A descriptive label for the resource.
        :param builtins.str type: Indicates the type of load object used to determine the load on the resource.
        :param builtins.int upper_bound: An optional sanity check that specifies the maximum allowed value for any component of the load object.
        :param Sequence['GetGtmResourcesResourceLinkArgs'] links: Specifies the URL path that allows direct navigation to the resource.
        :param Sequence['GetGtmResourcesResourceResourceInstanceArgs'] resource_instances: Instances of the resource.
        """
        pulumi.set(__self__, "aggregation_type", aggregation_type)
        pulumi.set(__self__, "constrained_property", constrained_property)
        pulumi.set(__self__, "decay_rate", decay_rate)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "host_header", host_header)
        pulumi.set(__self__, "leader_string", leader_string)
        pulumi.set(__self__, "least_squares_decay", least_squares_decay)
        pulumi.set(__self__, "load_imbalance_percentage", load_imbalance_percentage)
        pulumi.set(__self__, "max_u_multiplicative_increment", max_u_multiplicative_increment)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "upper_bound", upper_bound)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if resource_instances is not None:
            pulumi.set(__self__, "resource_instances", resource_instances)

    @property
    @pulumi.getter(name="aggregationType")
    def aggregation_type(self) -> builtins.str:
        """
        Specifies how GTM handles different load numbers when multiple load servers are used for a data center or property.
        """
        return pulumi.get(self, "aggregation_type")

    @aggregation_type.setter
    def aggregation_type(self, value: builtins.str):
        pulumi.set(self, "aggregation_type", value)

    @property
    @pulumi.getter(name="constrainedProperty")
    def constrained_property(self) -> builtins.str:
        """
        Specifies the name of the property that this resource constraints.
        """
        return pulumi.get(self, "constrained_property")

    @constrained_property.setter
    def constrained_property(self, value: builtins.str):
        pulumi.set(self, "constrained_property", value)

    @property
    @pulumi.getter(name="decayRate")
    def decay_rate(self) -> builtins.float:
        """
        For internal use only.
        """
        return pulumi.get(self, "decay_rate")

    @decay_rate.setter
    def decay_rate(self, value: builtins.float):
        pulumi.set(self, "decay_rate", value)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A descriptive note which allows to track what is constrained by this resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: builtins.str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> builtins.str:
        """
        Specifies the host header used when fetching the load object.
        """
        return pulumi.get(self, "host_header")

    @host_header.setter
    def host_header(self, value: builtins.str):
        pulumi.set(self, "host_header", value)

    @property
    @pulumi.getter(name="leaderString")
    def leader_string(self) -> builtins.str:
        """
        Specifies the text that comes before the load object.
        """
        return pulumi.get(self, "leader_string")

    @leader_string.setter
    def leader_string(self, value: builtins.str):
        pulumi.set(self, "leader_string", value)

    @property
    @pulumi.getter(name="leastSquaresDecay")
    def least_squares_decay(self) -> builtins.float:
        """
        For internal use only.
        """
        return pulumi.get(self, "least_squares_decay")

    @least_squares_decay.setter
    def least_squares_decay(self, value: builtins.float):
        pulumi.set(self, "least_squares_decay", value)

    @property
    @pulumi.getter(name="loadImbalancePercentage")
    def load_imbalance_percentage(self) -> builtins.float:
        """
        Indicates the percentage of load imbalance for the domain.
        """
        return pulumi.get(self, "load_imbalance_percentage")

    @load_imbalance_percentage.setter
    def load_imbalance_percentage(self, value: builtins.float):
        pulumi.set(self, "load_imbalance_percentage", value)

    @property
    @pulumi.getter(name="maxUMultiplicativeIncrement")
    def max_u_multiplicative_increment(self) -> builtins.float:
        """
        For internal use only.
        """
        return pulumi.get(self, "max_u_multiplicative_increment")

    @max_u_multiplicative_increment.setter
    def max_u_multiplicative_increment(self, value: builtins.float):
        pulumi.set(self, "max_u_multiplicative_increment", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A descriptive label for the resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Indicates the type of load object used to determine the load on the resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> builtins.int:
        """
        An optional sanity check that specifies the maximum allowed value for any component of the load object.
        """
        return pulumi.get(self, "upper_bound")

    @upper_bound.setter
    def upper_bound(self, value: builtins.int):
        pulumi.set(self, "upper_bound", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['GetGtmResourcesResourceLinkArgs']]:
        """
        Specifies the URL path that allows direct navigation to the resource.
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[Sequence['GetGtmResourcesResourceLinkArgs']]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter(name="resourceInstances")
    def resource_instances(self) -> Optional[Sequence['GetGtmResourcesResourceResourceInstanceArgs']]:
        """
        Instances of the resource.
        """
        return pulumi.get(self, "resource_instances")

    @resource_instances.setter
    def resource_instances(self, value: Optional[Sequence['GetGtmResourcesResourceResourceInstanceArgs']]):
        pulumi.set(self, "resource_instances", value)


if not MYPY:
    class GetGtmResourcesResourceLinkArgsDict(TypedDict):
        href: builtins.str
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        rel: builtins.str
        """
        Indicates the link relationship of the object.
        """
elif False:
    GetGtmResourcesResourceLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmResourcesResourceLinkArgs:
    def __init__(__self__, *,
                 href: builtins.str,
                 rel: builtins.str):
        """
        :param builtins.str href: A hypermedia link to the complete URL that uniquely defines a resource.
        :param builtins.str rel: Indicates the link relationship of the object.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @property
    @pulumi.getter
    def href(self) -> builtins.str:
        """
        A hypermedia link to the complete URL that uniquely defines a resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: builtins.str):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def rel(self) -> builtins.str:
        """
        Indicates the link relationship of the object.
        """
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: builtins.str):
        pulumi.set(self, "rel", value)


if not MYPY:
    class GetGtmResourcesResourceResourceInstanceArgsDict(TypedDict):
        datacenter_id: builtins.int
        """
        A unique identifier for an existing data center in the domain.
        """
        load_object: builtins.str
        """
        Identifies the load object file used to report real-time information about the current load, maximum allowable load and target load on each resource.
        """
        load_object_port: builtins.int
        """
        Specifies the TCP port of the loadObject.
        """
        load_servers: Sequence[builtins.str]
        """
        Specifies the list of servers to requests the load object from.
        """
        use_default_load_object: builtins.bool
        """
        Whether to use default loadObject.
        """
elif False:
    GetGtmResourcesResourceResourceInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetGtmResourcesResourceResourceInstanceArgs:
    def __init__(__self__, *,
                 datacenter_id: builtins.int,
                 load_object: builtins.str,
                 load_object_port: builtins.int,
                 load_servers: Sequence[builtins.str],
                 use_default_load_object: builtins.bool):
        """
        :param builtins.int datacenter_id: A unique identifier for an existing data center in the domain.
        :param builtins.str load_object: Identifies the load object file used to report real-time information about the current load, maximum allowable load and target load on each resource.
        :param builtins.int load_object_port: Specifies the TCP port of the loadObject.
        :param Sequence[builtins.str] load_servers: Specifies the list of servers to requests the load object from.
        :param builtins.bool use_default_load_object: Whether to use default loadObject.
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "load_object", load_object)
        pulumi.set(__self__, "load_object_port", load_object_port)
        pulumi.set(__self__, "load_servers", load_servers)
        pulumi.set(__self__, "use_default_load_object", use_default_load_object)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> builtins.int:
        """
        A unique identifier for an existing data center in the domain.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: builtins.int):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="loadObject")
    def load_object(self) -> builtins.str:
        """
        Identifies the load object file used to report real-time information about the current load, maximum allowable load and target load on each resource.
        """
        return pulumi.get(self, "load_object")

    @load_object.setter
    def load_object(self, value: builtins.str):
        pulumi.set(self, "load_object", value)

    @property
    @pulumi.getter(name="loadObjectPort")
    def load_object_port(self) -> builtins.int:
        """
        Specifies the TCP port of the loadObject.
        """
        return pulumi.get(self, "load_object_port")

    @load_object_port.setter
    def load_object_port(self, value: builtins.int):
        pulumi.set(self, "load_object_port", value)

    @property
    @pulumi.getter(name="loadServers")
    def load_servers(self) -> Sequence[builtins.str]:
        """
        Specifies the list of servers to requests the load object from.
        """
        return pulumi.get(self, "load_servers")

    @load_servers.setter
    def load_servers(self, value: Sequence[builtins.str]):
        pulumi.set(self, "load_servers", value)

    @property
    @pulumi.getter(name="useDefaultLoadObject")
    def use_default_load_object(self) -> builtins.bool:
        """
        Whether to use default loadObject.
        """
        return pulumi.get(self, "use_default_load_object")

    @use_default_load_object.setter
    def use_default_load_object(self, value: builtins.bool):
        pulumi.set(self, "use_default_load_object", value)


if not MYPY:
    class GetImagingPolicyImagePolicyArgsDict(TypedDict):
        breakpoints: NotRequired['GetImagingPolicyImagePolicyBreakpointsArgsDict']
        """
        The breakpoint widths (in pixels) to use to create derivative images/videos.
        """
        hosts: NotRequired[Sequence[builtins.str]]
        """
        Hosts that are allowed for image/video URLs within transformations or variables.
        """
        output: NotRequired['GetImagingPolicyImagePolicyOutputArgsDict']
        """
        Dictates the output quality (either `quality` or `perceptualQuality`) and formats that are created for each resized image. If unspecified, image formats are created to support all browsers at the default quality level (`85`), which includes formats such as WEBP, JPEG2000 and JPEG-XR for specific browsers.
        """
        post_breakpoint_transformations: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationArgsDict']]
        """
        Post-processing Transformations are applied to the image after image and quality settings have been applied.
        """
        rollout_duration: NotRequired[builtins.str]
        """
        The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
        """
        serve_stale_duration: NotRequired[builtins.str]
        """
        The amount of time in seconds that the policy will serve stale images. During the serve stale period realtime images will attempt to use the offline image from the previous policy version first if possible.
        """
        transformations: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationArgsDict']]
        """
        Set of image transformations to apply to the source image. If unspecified, no operations are performed.
        """
        variables: NotRequired[Sequence['GetImagingPolicyImagePolicyVariableArgsDict']]
        """
        Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don't have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image's request URL.
        """
elif False:
    GetImagingPolicyImagePolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyArgs:
    def __init__(__self__, *,
                 breakpoints: Optional['GetImagingPolicyImagePolicyBreakpointsArgs'] = None,
                 hosts: Optional[Sequence[builtins.str]] = None,
                 output: Optional['GetImagingPolicyImagePolicyOutputArgs'] = None,
                 post_breakpoint_transformations: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']] = None,
                 rollout_duration: Optional[builtins.str] = None,
                 serve_stale_duration: Optional[builtins.str] = None,
                 transformations: Optional[Sequence['GetImagingPolicyImagePolicyTransformationArgs']] = None,
                 variables: Optional[Sequence['GetImagingPolicyImagePolicyVariableArgs']] = None):
        """
        :param 'GetImagingPolicyImagePolicyBreakpointsArgs' breakpoints: The breakpoint widths (in pixels) to use to create derivative images/videos.
        :param Sequence[builtins.str] hosts: Hosts that are allowed for image/video URLs within transformations or variables.
        :param 'GetImagingPolicyImagePolicyOutputArgs' output: Dictates the output quality (either `quality` or `perceptualQuality`) and formats that are created for each resized image. If unspecified, image formats are created to support all browsers at the default quality level (`85`), which includes formats such as WEBP, JPEG2000 and JPEG-XR for specific browsers.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] post_breakpoint_transformations: Post-processing Transformations are applied to the image after image and quality settings have been applied.
        :param builtins.str rollout_duration: The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
        :param builtins.str serve_stale_duration: The amount of time in seconds that the policy will serve stale images. During the serve stale period realtime images will attempt to use the offline image from the previous policy version first if possible.
        :param Sequence['GetImagingPolicyImagePolicyTransformationArgs'] transformations: Set of image transformations to apply to the source image. If unspecified, no operations are performed.
        :param Sequence['GetImagingPolicyImagePolicyVariableArgs'] variables: Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don't have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image's request URL.
        """
        if breakpoints is not None:
            pulumi.set(__self__, "breakpoints", breakpoints)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if post_breakpoint_transformations is not None:
            pulumi.set(__self__, "post_breakpoint_transformations", post_breakpoint_transformations)
        if rollout_duration is not None:
            pulumi.set(__self__, "rollout_duration", rollout_duration)
        if serve_stale_duration is not None:
            pulumi.set(__self__, "serve_stale_duration", serve_stale_duration)
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def breakpoints(self) -> Optional['GetImagingPolicyImagePolicyBreakpointsArgs']:
        """
        The breakpoint widths (in pixels) to use to create derivative images/videos.
        """
        return pulumi.get(self, "breakpoints")

    @breakpoints.setter
    def breakpoints(self, value: Optional['GetImagingPolicyImagePolicyBreakpointsArgs']):
        pulumi.set(self, "breakpoints", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[builtins.str]]:
        """
        Hosts that are allowed for image/video URLs within transformations or variables.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def output(self) -> Optional['GetImagingPolicyImagePolicyOutputArgs']:
        """
        Dictates the output quality (either `quality` or `perceptualQuality`) and formats that are created for each resized image. If unspecified, image formats are created to support all browsers at the default quality level (`85`), which includes formats such as WEBP, JPEG2000 and JPEG-XR for specific browsers.
        """
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional['GetImagingPolicyImagePolicyOutputArgs']):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="postBreakpointTransformations")
    def post_breakpoint_transformations(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']]:
        """
        Post-processing Transformations are applied to the image after image and quality settings have been applied.
        """
        return pulumi.get(self, "post_breakpoint_transformations")

    @post_breakpoint_transformations.setter
    def post_breakpoint_transformations(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']]):
        pulumi.set(self, "post_breakpoint_transformations", value)

    @property
    @pulumi.getter(name="rolloutDuration")
    def rollout_duration(self) -> Optional[builtins.str]:
        """
        The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
        """
        return pulumi.get(self, "rollout_duration")

    @rollout_duration.setter
    def rollout_duration(self, value: Optional[builtins.str]):
        pulumi.set(self, "rollout_duration", value)

    @property
    @pulumi.getter(name="serveStaleDuration")
    def serve_stale_duration(self) -> Optional[builtins.str]:
        """
        The amount of time in seconds that the policy will serve stale images. During the serve stale period realtime images will attempt to use the offline image from the previous policy version first if possible.
        """
        return pulumi.get(self, "serve_stale_duration")

    @serve_stale_duration.setter
    def serve_stale_duration(self, value: Optional[builtins.str]):
        pulumi.set(self, "serve_stale_duration", value)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationArgs']]:
        """
        Set of image transformations to apply to the source image. If unspecified, no operations are performed.
        """
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationArgs']]):
        pulumi.set(self, "transformations", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetImagingPolicyImagePolicyVariableArgs']]:
        """
        Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don't have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image's request URL.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetImagingPolicyImagePolicyVariableArgs']]):
        pulumi.set(self, "variables", value)


if not MYPY:
    class GetImagingPolicyImagePolicyBreakpointsArgsDict(TypedDict):
        widths: NotRequired[Sequence[builtins.int]]
elif False:
    GetImagingPolicyImagePolicyBreakpointsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyBreakpointsArgs:
    def __init__(__self__, *,
                 widths: Optional[Sequence[builtins.int]] = None):
        if widths is not None:
            pulumi.set(__self__, "widths", widths)

    @property
    @pulumi.getter
    def widths(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "widths")

    @widths.setter
    def widths(self, value: Optional[Sequence[builtins.int]]):
        pulumi.set(self, "widths", value)


if not MYPY:
    class GetImagingPolicyImagePolicyOutputArgsDict(TypedDict):
        adaptive_quality: NotRequired[builtins.str]
        """
        Override the quality of image to serve when Image & Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of images for users with faster connections.
        """
        allow_pristine_on_downsize: NotRequired[builtins.str]
        """
        Whether a pristine image wider than the requested breakpoint is allowed as a derivative image if it has the fewest bytes. This will not have an affect if transformations are present.
        """
        allowed_formats: NotRequired[Sequence[builtins.str]]
        """
        The graphics file formats allowed for browser specific results.
        """
        forced_formats: NotRequired[Sequence[builtins.str]]
        """
        The forced extra formats for the `imFormat` query parameter, which requests a specific browser type. By default, Image and Video Manager detects the browser and returns the appropriate image.
        """
        perceptual_quality: NotRequired[builtins.str]
        """
        Mutually exclusive with quality. The perceptual quality to use when comparing resulting images, which overrides the `quality` setting. Perceptual quality tunes each image format's quality parameter dynamically based on the human-perceived quality of the output image. This can result in better byte savings (as compared to using regular quality) as many images can be encoded at a much lower quality without compromising perception of the image. In addition, certain images may need to be encoded at a slightly higher quality in order to maintain human-perceived quality. Values are tiered `high`, `mediumHigh`, `medium`, `mediumLow`, or `low`.
        """
        perceptual_quality_floor: NotRequired[builtins.str]
        """
        Only applies with perceptualQuality set. Sets a minimum image quality to respect when using perceptual quality. Perceptual quality will not reduce the quality below this value even if it determines the compressed image to be acceptably visually similar.
        """
        perceptual_quality_var: NotRequired[builtins.str]
        """
        Mutually exclusive with quality. The perceptual quality to use when comparing resulting images, which overrides the `quality` setting. Perceptual quality tunes each image format's quality parameter dynamically based on the human-perceived quality of the output image. This can result in better byte savings (as compared to using regular quality) as many images can be encoded at a much lower quality without compromising perception of the image. In addition, certain images may need to be encoded at a slightly higher quality in order to maintain human-perceived quality. Values are tiered `high`, `mediumHigh`, `medium`, `mediumLow`, or `low`.
        """
        prefer_modern_formats: NotRequired[builtins.str]
        """
        Whether derivative image formats should be selected with a preference for modern formats (such as WebP and Avif) instead the format that results in the fewest bytes.
        """
        quality: NotRequired[builtins.str]
        """
        Mutually exclusive with perceptualQuality, used by default if neither is specified. The chosen quality of the output images. Using a quality value from 1-100 resembles JPEG quality across output formats.
        """
        quality_var: NotRequired[builtins.str]
        """
        Mutually exclusive with perceptualQuality, used by default if neither is specified. The chosen quality of the output images. Using a quality value from 1-100 resembles JPEG quality across output formats.
        """
elif False:
    GetImagingPolicyImagePolicyOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyOutputArgs:
    def __init__(__self__, *,
                 adaptive_quality: Optional[builtins.str] = None,
                 allow_pristine_on_downsize: Optional[builtins.str] = None,
                 allowed_formats: Optional[Sequence[builtins.str]] = None,
                 forced_formats: Optional[Sequence[builtins.str]] = None,
                 perceptual_quality: Optional[builtins.str] = None,
                 perceptual_quality_floor: Optional[builtins.str] = None,
                 perceptual_quality_var: Optional[builtins.str] = None,
                 prefer_modern_formats: Optional[builtins.str] = None,
                 quality: Optional[builtins.str] = None,
                 quality_var: Optional[builtins.str] = None):
        """
        :param builtins.str adaptive_quality: Override the quality of image to serve when Image & Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of images for users with faster connections.
        :param builtins.str allow_pristine_on_downsize: Whether a pristine image wider than the requested breakpoint is allowed as a derivative image if it has the fewest bytes. This will not have an affect if transformations are present.
        :param Sequence[builtins.str] allowed_formats: The graphics file formats allowed for browser specific results.
        :param Sequence[builtins.str] forced_formats: The forced extra formats for the `imFormat` query parameter, which requests a specific browser type. By default, Image and Video Manager detects the browser and returns the appropriate image.
        :param builtins.str perceptual_quality: Mutually exclusive with quality. The perceptual quality to use when comparing resulting images, which overrides the `quality` setting. Perceptual quality tunes each image format's quality parameter dynamically based on the human-perceived quality of the output image. This can result in better byte savings (as compared to using regular quality) as many images can be encoded at a much lower quality without compromising perception of the image. In addition, certain images may need to be encoded at a slightly higher quality in order to maintain human-perceived quality. Values are tiered `high`, `mediumHigh`, `medium`, `mediumLow`, or `low`.
        :param builtins.str perceptual_quality_floor: Only applies with perceptualQuality set. Sets a minimum image quality to respect when using perceptual quality. Perceptual quality will not reduce the quality below this value even if it determines the compressed image to be acceptably visually similar.
        :param builtins.str perceptual_quality_var: Mutually exclusive with quality. The perceptual quality to use when comparing resulting images, which overrides the `quality` setting. Perceptual quality tunes each image format's quality parameter dynamically based on the human-perceived quality of the output image. This can result in better byte savings (as compared to using regular quality) as many images can be encoded at a much lower quality without compromising perception of the image. In addition, certain images may need to be encoded at a slightly higher quality in order to maintain human-perceived quality. Values are tiered `high`, `mediumHigh`, `medium`, `mediumLow`, or `low`.
        :param builtins.str prefer_modern_formats: Whether derivative image formats should be selected with a preference for modern formats (such as WebP and Avif) instead the format that results in the fewest bytes.
        :param builtins.str quality: Mutually exclusive with perceptualQuality, used by default if neither is specified. The chosen quality of the output images. Using a quality value from 1-100 resembles JPEG quality across output formats.
        :param builtins.str quality_var: Mutually exclusive with perceptualQuality, used by default if neither is specified. The chosen quality of the output images. Using a quality value from 1-100 resembles JPEG quality across output formats.
        """
        if adaptive_quality is not None:
            pulumi.set(__self__, "adaptive_quality", adaptive_quality)
        if allow_pristine_on_downsize is not None:
            pulumi.set(__self__, "allow_pristine_on_downsize", allow_pristine_on_downsize)
        if allowed_formats is not None:
            pulumi.set(__self__, "allowed_formats", allowed_formats)
        if forced_formats is not None:
            pulumi.set(__self__, "forced_formats", forced_formats)
        if perceptual_quality is not None:
            pulumi.set(__self__, "perceptual_quality", perceptual_quality)
        if perceptual_quality_floor is not None:
            pulumi.set(__self__, "perceptual_quality_floor", perceptual_quality_floor)
        if perceptual_quality_var is not None:
            pulumi.set(__self__, "perceptual_quality_var", perceptual_quality_var)
        if prefer_modern_formats is not None:
            pulumi.set(__self__, "prefer_modern_formats", prefer_modern_formats)
        if quality is not None:
            pulumi.set(__self__, "quality", quality)
        if quality_var is not None:
            pulumi.set(__self__, "quality_var", quality_var)

    @property
    @pulumi.getter(name="adaptiveQuality")
    def adaptive_quality(self) -> Optional[builtins.str]:
        """
        Override the quality of image to serve when Image & Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of images for users with faster connections.
        """
        return pulumi.get(self, "adaptive_quality")

    @adaptive_quality.setter
    def adaptive_quality(self, value: Optional[builtins.str]):
        pulumi.set(self, "adaptive_quality", value)

    @property
    @pulumi.getter(name="allowPristineOnDownsize")
    def allow_pristine_on_downsize(self) -> Optional[builtins.str]:
        """
        Whether a pristine image wider than the requested breakpoint is allowed as a derivative image if it has the fewest bytes. This will not have an affect if transformations are present.
        """
        return pulumi.get(self, "allow_pristine_on_downsize")

    @allow_pristine_on_downsize.setter
    def allow_pristine_on_downsize(self, value: Optional[builtins.str]):
        pulumi.set(self, "allow_pristine_on_downsize", value)

    @property
    @pulumi.getter(name="allowedFormats")
    def allowed_formats(self) -> Optional[Sequence[builtins.str]]:
        """
        The graphics file formats allowed for browser specific results.
        """
        return pulumi.get(self, "allowed_formats")

    @allowed_formats.setter
    def allowed_formats(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "allowed_formats", value)

    @property
    @pulumi.getter(name="forcedFormats")
    def forced_formats(self) -> Optional[Sequence[builtins.str]]:
        """
        The forced extra formats for the `imFormat` query parameter, which requests a specific browser type. By default, Image and Video Manager detects the browser and returns the appropriate image.
        """
        return pulumi.get(self, "forced_formats")

    @forced_formats.setter
    def forced_formats(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "forced_formats", value)

    @property
    @pulumi.getter(name="perceptualQuality")
    def perceptual_quality(self) -> Optional[builtins.str]:
        """
        Mutually exclusive with quality. The perceptual quality to use when comparing resulting images, which overrides the `quality` setting. Perceptual quality tunes each image format's quality parameter dynamically based on the human-perceived quality of the output image. This can result in better byte savings (as compared to using regular quality) as many images can be encoded at a much lower quality without compromising perception of the image. In addition, certain images may need to be encoded at a slightly higher quality in order to maintain human-perceived quality. Values are tiered `high`, `mediumHigh`, `medium`, `mediumLow`, or `low`.
        """
        return pulumi.get(self, "perceptual_quality")

    @perceptual_quality.setter
    def perceptual_quality(self, value: Optional[builtins.str]):
        pulumi.set(self, "perceptual_quality", value)

    @property
    @pulumi.getter(name="perceptualQualityFloor")
    def perceptual_quality_floor(self) -> Optional[builtins.str]:
        """
        Only applies with perceptualQuality set. Sets a minimum image quality to respect when using perceptual quality. Perceptual quality will not reduce the quality below this value even if it determines the compressed image to be acceptably visually similar.
        """
        return pulumi.get(self, "perceptual_quality_floor")

    @perceptual_quality_floor.setter
    def perceptual_quality_floor(self, value: Optional[builtins.str]):
        pulumi.set(self, "perceptual_quality_floor", value)

    @property
    @pulumi.getter(name="perceptualQualityVar")
    def perceptual_quality_var(self) -> Optional[builtins.str]:
        """
        Mutually exclusive with quality. The perceptual quality to use when comparing resulting images, which overrides the `quality` setting. Perceptual quality tunes each image format's quality parameter dynamically based on the human-perceived quality of the output image. This can result in better byte savings (as compared to using regular quality) as many images can be encoded at a much lower quality without compromising perception of the image. In addition, certain images may need to be encoded at a slightly higher quality in order to maintain human-perceived quality. Values are tiered `high`, `mediumHigh`, `medium`, `mediumLow`, or `low`.
        """
        return pulumi.get(self, "perceptual_quality_var")

    @perceptual_quality_var.setter
    def perceptual_quality_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "perceptual_quality_var", value)

    @property
    @pulumi.getter(name="preferModernFormats")
    def prefer_modern_formats(self) -> Optional[builtins.str]:
        """
        Whether derivative image formats should be selected with a preference for modern formats (such as WebP and Avif) instead the format that results in the fewest bytes.
        """
        return pulumi.get(self, "prefer_modern_formats")

    @prefer_modern_formats.setter
    def prefer_modern_formats(self, value: Optional[builtins.str]):
        pulumi.set(self, "prefer_modern_formats", value)

    @property
    @pulumi.getter
    def quality(self) -> Optional[builtins.str]:
        """
        Mutually exclusive with perceptualQuality, used by default if neither is specified. The chosen quality of the output images. Using a quality value from 1-100 resembles JPEG quality across output formats.
        """
        return pulumi.get(self, "quality")

    @quality.setter
    def quality(self, value: Optional[builtins.str]):
        pulumi.set(self, "quality", value)

    @property
    @pulumi.getter(name="qualityVar")
    def quality_var(self) -> Optional[builtins.str]:
        """
        Mutually exclusive with perceptualQuality, used by default if neither is specified. The chosen quality of the output images. Using a quality value from 1-100 resembles JPEG quality across output formats.
        """
        return pulumi.get(self, "quality_var")

    @quality_var.setter
    def quality_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "quality_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationArgsDict(TypedDict):
        background_colors: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorArgsDict']]
        """
        Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
        """
        blurs: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationBlurArgsDict']]
        """
        Applies a Gaussian blur to the image.
        """
        chroma_keys: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyArgsDict']]
        """
        Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a 'green screen' technique commonly used to isolate and remove background colors.
        """
        composites: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeArgsDict']]
        """
        Applies another image to the source image, either as an overlay or an underlay. The image that's underneath is visible in areas that are beyond the edges of the top image or that are less than 100% opaque. A common use of an overlay composite is to add a watermark.
        """
        compounds: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundArgsDict']]
        contrasts: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationContrastArgsDict']]
        """
        Adjusts both the contrast and brightness of an image.
        """
        goops: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationGoopArgsDict']]
        """
        Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
        """
        grayscales: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleArgsDict']]
        """
        Restricts image color to shades of gray only.
        """
        hsls: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationHslArgsDict']]
        """
        Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
        """
        hsvs: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationHsvArgsDict']]
        """
        Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
        """
        if_dimensions: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionArgsDict']]
        if_orientations: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationArgsDict']]
        max_colors: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorArgsDict']]
        """
        Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
        """
        mirrors: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgsDict']]
        """
        Flips an image horizontally, vertically, or both.
        """
        mono_hues: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueArgsDict']]
        """
        Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
        """
        opacities: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityArgsDict']]
        """
        Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
        """
        remove_colors: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorArgsDict']]
        """
        Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
        """
        unsharp_masks: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskArgsDict']]
        """
        Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationArgs:
    def __init__(__self__, *,
                 background_colors: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorArgs']] = None,
                 blurs: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationBlurArgs']] = None,
                 chroma_keys: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyArgs']] = None,
                 composites: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeArgs']] = None,
                 compounds: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundArgs']] = None,
                 contrasts: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationContrastArgs']] = None,
                 goops: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationGoopArgs']] = None,
                 grayscales: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleArgs']] = None,
                 hsls: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationHslArgs']] = None,
                 hsvs: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationHsvArgs']] = None,
                 if_dimensions: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionArgs']] = None,
                 if_orientations: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationArgs']] = None,
                 max_colors: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorArgs']] = None,
                 mirrors: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs']] = None,
                 mono_hues: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueArgs']] = None,
                 opacities: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityArgs']] = None,
                 remove_colors: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorArgs']] = None,
                 unsharp_masks: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskArgs']] = None):
        """
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorArgs'] background_colors: Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationBlurArgs'] blurs: Applies a Gaussian blur to the image.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyArgs'] chroma_keys: Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a 'green screen' technique commonly used to isolate and remove background colors.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeArgs'] composites: Applies another image to the source image, either as an overlay or an underlay. The image that's underneath is visible in areas that are beyond the edges of the top image or that are less than 100% opaque. A common use of an overlay composite is to add a watermark.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationContrastArgs'] contrasts: Adjusts both the contrast and brightness of an image.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationGoopArgs'] goops: Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleArgs'] grayscales: Restricts image color to shades of gray only.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationHslArgs'] hsls: Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationHsvArgs'] hsvs: Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorArgs'] max_colors: Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs'] mirrors: Flips an image horizontally, vertically, or both.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueArgs'] mono_hues: Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityArgs'] opacities: Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorArgs'] remove_colors: Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskArgs'] unsharp_masks: Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
        """
        if background_colors is not None:
            pulumi.set(__self__, "background_colors", background_colors)
        if blurs is not None:
            pulumi.set(__self__, "blurs", blurs)
        if chroma_keys is not None:
            pulumi.set(__self__, "chroma_keys", chroma_keys)
        if composites is not None:
            pulumi.set(__self__, "composites", composites)
        if compounds is not None:
            pulumi.set(__self__, "compounds", compounds)
        if contrasts is not None:
            pulumi.set(__self__, "contrasts", contrasts)
        if goops is not None:
            pulumi.set(__self__, "goops", goops)
        if grayscales is not None:
            pulumi.set(__self__, "grayscales", grayscales)
        if hsls is not None:
            pulumi.set(__self__, "hsls", hsls)
        if hsvs is not None:
            pulumi.set(__self__, "hsvs", hsvs)
        if if_dimensions is not None:
            pulumi.set(__self__, "if_dimensions", if_dimensions)
        if if_orientations is not None:
            pulumi.set(__self__, "if_orientations", if_orientations)
        if max_colors is not None:
            pulumi.set(__self__, "max_colors", max_colors)
        if mirrors is not None:
            pulumi.set(__self__, "mirrors", mirrors)
        if mono_hues is not None:
            pulumi.set(__self__, "mono_hues", mono_hues)
        if opacities is not None:
            pulumi.set(__self__, "opacities", opacities)
        if remove_colors is not None:
            pulumi.set(__self__, "remove_colors", remove_colors)
        if unsharp_masks is not None:
            pulumi.set(__self__, "unsharp_masks", unsharp_masks)

    @property
    @pulumi.getter(name="backgroundColors")
    def background_colors(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorArgs']]:
        """
        Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
        """
        return pulumi.get(self, "background_colors")

    @background_colors.setter
    def background_colors(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorArgs']]):
        pulumi.set(self, "background_colors", value)

    @property
    @pulumi.getter
    def blurs(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationBlurArgs']]:
        """
        Applies a Gaussian blur to the image.
        """
        return pulumi.get(self, "blurs")

    @blurs.setter
    def blurs(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationBlurArgs']]):
        pulumi.set(self, "blurs", value)

    @property
    @pulumi.getter(name="chromaKeys")
    def chroma_keys(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyArgs']]:
        """
        Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a 'green screen' technique commonly used to isolate and remove background colors.
        """
        return pulumi.get(self, "chroma_keys")

    @chroma_keys.setter
    def chroma_keys(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyArgs']]):
        pulumi.set(self, "chroma_keys", value)

    @property
    @pulumi.getter
    def composites(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeArgs']]:
        """
        Applies another image to the source image, either as an overlay or an underlay. The image that's underneath is visible in areas that are beyond the edges of the top image or that are less than 100% opaque. A common use of an overlay composite is to add a watermark.
        """
        return pulumi.get(self, "composites")

    @composites.setter
    def composites(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeArgs']]):
        pulumi.set(self, "composites", value)

    @property
    @pulumi.getter
    def compounds(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundArgs']]:
        return pulumi.get(self, "compounds")

    @compounds.setter
    def compounds(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundArgs']]):
        pulumi.set(self, "compounds", value)

    @property
    @pulumi.getter
    def contrasts(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationContrastArgs']]:
        """
        Adjusts both the contrast and brightness of an image.
        """
        return pulumi.get(self, "contrasts")

    @contrasts.setter
    def contrasts(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationContrastArgs']]):
        pulumi.set(self, "contrasts", value)

    @property
    @pulumi.getter
    def goops(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationGoopArgs']]:
        """
        Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
        """
        return pulumi.get(self, "goops")

    @goops.setter
    def goops(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationGoopArgs']]):
        pulumi.set(self, "goops", value)

    @property
    @pulumi.getter
    def grayscales(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleArgs']]:
        """
        Restricts image color to shades of gray only.
        """
        return pulumi.get(self, "grayscales")

    @grayscales.setter
    def grayscales(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleArgs']]):
        pulumi.set(self, "grayscales", value)

    @property
    @pulumi.getter
    def hsls(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationHslArgs']]:
        """
        Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
        """
        return pulumi.get(self, "hsls")

    @hsls.setter
    def hsls(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationHslArgs']]):
        pulumi.set(self, "hsls", value)

    @property
    @pulumi.getter
    def hsvs(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationHsvArgs']]:
        """
        Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
        """
        return pulumi.get(self, "hsvs")

    @hsvs.setter
    def hsvs(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationHsvArgs']]):
        pulumi.set(self, "hsvs", value)

    @property
    @pulumi.getter(name="ifDimensions")
    def if_dimensions(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionArgs']]:
        return pulumi.get(self, "if_dimensions")

    @if_dimensions.setter
    def if_dimensions(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionArgs']]):
        pulumi.set(self, "if_dimensions", value)

    @property
    @pulumi.getter(name="ifOrientations")
    def if_orientations(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationArgs']]:
        return pulumi.get(self, "if_orientations")

    @if_orientations.setter
    def if_orientations(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationArgs']]):
        pulumi.set(self, "if_orientations", value)

    @property
    @pulumi.getter(name="maxColors")
    def max_colors(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorArgs']]:
        """
        Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
        """
        return pulumi.get(self, "max_colors")

    @max_colors.setter
    def max_colors(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorArgs']]):
        pulumi.set(self, "max_colors", value)

    @property
    @pulumi.getter
    def mirrors(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs']]:
        """
        Flips an image horizontally, vertically, or both.
        """
        return pulumi.get(self, "mirrors")

    @mirrors.setter
    def mirrors(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs']]):
        pulumi.set(self, "mirrors", value)

    @property
    @pulumi.getter(name="monoHues")
    def mono_hues(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueArgs']]:
        """
        Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
        """
        return pulumi.get(self, "mono_hues")

    @mono_hues.setter
    def mono_hues(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueArgs']]):
        pulumi.set(self, "mono_hues", value)

    @property
    @pulumi.getter
    def opacities(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityArgs']]:
        """
        Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
        """
        return pulumi.get(self, "opacities")

    @opacities.setter
    def opacities(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityArgs']]):
        pulumi.set(self, "opacities", value)

    @property
    @pulumi.getter(name="removeColors")
    def remove_colors(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorArgs']]:
        """
        Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
        """
        return pulumi.get(self, "remove_colors")

    @remove_colors.setter
    def remove_colors(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorArgs']]):
        pulumi.set(self, "remove_colors", value)

    @property
    @pulumi.getter(name="unsharpMasks")
    def unsharp_masks(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskArgs']]:
        """
        Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
        """
        return pulumi.get(self, "unsharp_masks")

    @unsharp_masks.setter
    def unsharp_masks(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskArgs']]):
        pulumi.set(self, "unsharp_masks", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorArgsDict(TypedDict):
        color: NotRequired[builtins.str]
        """
        The hexadecimal CSS color value for the background.
        """
        color_var: NotRequired[builtins.str]
        """
        The hexadecimal CSS color value for the background.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorArgs:
    def __init__(__self__, *,
                 color: Optional[builtins.str] = None,
                 color_var: Optional[builtins.str] = None):
        """
        :param builtins.str color: The hexadecimal CSS color value for the background.
        :param builtins.str color_var: The hexadecimal CSS color value for the background.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[builtins.str]:
        """
        The hexadecimal CSS color value for the background.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[builtins.str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[builtins.str]:
        """
        The hexadecimal CSS color value for the background.
        """
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "color_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationBlurArgsDict(TypedDict):
        sigma: NotRequired[builtins.str]
        """
        The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
        """
        sigma_var: NotRequired[builtins.str]
        """
        The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationBlurArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationBlurArgs:
    def __init__(__self__, *,
                 sigma: Optional[builtins.str] = None,
                 sigma_var: Optional[builtins.str] = None):
        """
        :param builtins.str sigma: The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
        :param builtins.str sigma_var: The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
        """
        if sigma is not None:
            pulumi.set(__self__, "sigma", sigma)
        if sigma_var is not None:
            pulumi.set(__self__, "sigma_var", sigma_var)

    @property
    @pulumi.getter
    def sigma(self) -> Optional[builtins.str]:
        """
        The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
        """
        return pulumi.get(self, "sigma")

    @sigma.setter
    def sigma(self, value: Optional[builtins.str]):
        pulumi.set(self, "sigma", value)

    @property
    @pulumi.getter(name="sigmaVar")
    def sigma_var(self) -> Optional[builtins.str]:
        """
        The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
        """
        return pulumi.get(self, "sigma_var")

    @sigma_var.setter
    def sigma_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "sigma_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyArgsDict(TypedDict):
        hue: NotRequired[builtins.str]
        """
        The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
        """
        hue_feather: NotRequired[builtins.str]
        """
        How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
        """
        hue_feather_var: NotRequired[builtins.str]
        """
        How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
        """
        hue_tolerance: NotRequired[builtins.str]
        """
        How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
        """
        hue_tolerance_var: NotRequired[builtins.str]
        """
        How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
        """
        hue_var: NotRequired[builtins.str]
        """
        The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
        """
        lightness_feather: NotRequired[builtins.str]
        """
        How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
        """
        lightness_feather_var: NotRequired[builtins.str]
        """
        How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
        """
        lightness_tolerance: NotRequired[builtins.str]
        """
        How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
        """
        lightness_tolerance_var: NotRequired[builtins.str]
        """
        How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
        """
        saturation_feather: NotRequired[builtins.str]
        """
        How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
        """
        saturation_feather_var: NotRequired[builtins.str]
        """
        How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
        """
        saturation_tolerance: NotRequired[builtins.str]
        """
        How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
        """
        saturation_tolerance_var: NotRequired[builtins.str]
        """
        How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyArgs:
    def __init__(__self__, *,
                 hue: Optional[builtins.str] = None,
                 hue_feather: Optional[builtins.str] = None,
                 hue_feather_var: Optional[builtins.str] = None,
                 hue_tolerance: Optional[builtins.str] = None,
                 hue_tolerance_var: Optional[builtins.str] = None,
                 hue_var: Optional[builtins.str] = None,
                 lightness_feather: Optional[builtins.str] = None,
                 lightness_feather_var: Optional[builtins.str] = None,
                 lightness_tolerance: Optional[builtins.str] = None,
                 lightness_tolerance_var: Optional[builtins.str] = None,
                 saturation_feather: Optional[builtins.str] = None,
                 saturation_feather_var: Optional[builtins.str] = None,
                 saturation_tolerance: Optional[builtins.str] = None,
                 saturation_tolerance_var: Optional[builtins.str] = None):
        """
        :param builtins.str hue: The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
        :param builtins.str hue_feather: How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
        :param builtins.str hue_feather_var: How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
        :param builtins.str hue_tolerance: How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
        :param builtins.str hue_tolerance_var: How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
        :param builtins.str hue_var: The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
        :param builtins.str lightness_feather: How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
        :param builtins.str lightness_feather_var: How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
        :param builtins.str lightness_tolerance: How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
        :param builtins.str lightness_tolerance_var: How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
        :param builtins.str saturation_feather: How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
        :param builtins.str saturation_feather_var: How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
        :param builtins.str saturation_tolerance: How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
        :param builtins.str saturation_tolerance_var: How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
        """
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_feather is not None:
            pulumi.set(__self__, "hue_feather", hue_feather)
        if hue_feather_var is not None:
            pulumi.set(__self__, "hue_feather_var", hue_feather_var)
        if hue_tolerance is not None:
            pulumi.set(__self__, "hue_tolerance", hue_tolerance)
        if hue_tolerance_var is not None:
            pulumi.set(__self__, "hue_tolerance_var", hue_tolerance_var)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if lightness_feather is not None:
            pulumi.set(__self__, "lightness_feather", lightness_feather)
        if lightness_feather_var is not None:
            pulumi.set(__self__, "lightness_feather_var", lightness_feather_var)
        if lightness_tolerance is not None:
            pulumi.set(__self__, "lightness_tolerance", lightness_tolerance)
        if lightness_tolerance_var is not None:
            pulumi.set(__self__, "lightness_tolerance_var", lightness_tolerance_var)
        if saturation_feather is not None:
            pulumi.set(__self__, "saturation_feather", saturation_feather)
        if saturation_feather_var is not None:
            pulumi.set(__self__, "saturation_feather_var", saturation_feather_var)
        if saturation_tolerance is not None:
            pulumi.set(__self__, "saturation_tolerance", saturation_tolerance)
        if saturation_tolerance_var is not None:
            pulumi.set(__self__, "saturation_tolerance_var", saturation_tolerance_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[builtins.str]:
        """
        The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
        """
        return pulumi.get(self, "hue")

    @hue.setter
    def hue(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue", value)

    @property
    @pulumi.getter(name="hueFeather")
    def hue_feather(self) -> Optional[builtins.str]:
        """
        How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
        """
        return pulumi.get(self, "hue_feather")

    @hue_feather.setter
    def hue_feather(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue_feather", value)

    @property
    @pulumi.getter(name="hueFeatherVar")
    def hue_feather_var(self) -> Optional[builtins.str]:
        """
        How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
        """
        return pulumi.get(self, "hue_feather_var")

    @hue_feather_var.setter
    def hue_feather_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue_feather_var", value)

    @property
    @pulumi.getter(name="hueTolerance")
    def hue_tolerance(self) -> Optional[builtins.str]:
        """
        How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
        """
        return pulumi.get(self, "hue_tolerance")

    @hue_tolerance.setter
    def hue_tolerance(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue_tolerance", value)

    @property
    @pulumi.getter(name="hueToleranceVar")
    def hue_tolerance_var(self) -> Optional[builtins.str]:
        """
        How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
        """
        return pulumi.get(self, "hue_tolerance_var")

    @hue_tolerance_var.setter
    def hue_tolerance_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue_tolerance_var", value)

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[builtins.str]:
        """
        The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
        """
        return pulumi.get(self, "hue_var")

    @hue_var.setter
    def hue_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue_var", value)

    @property
    @pulumi.getter(name="lightnessFeather")
    def lightness_feather(self) -> Optional[builtins.str]:
        """
        How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
        """
        return pulumi.get(self, "lightness_feather")

    @lightness_feather.setter
    def lightness_feather(self, value: Optional[builtins.str]):
        pulumi.set(self, "lightness_feather", value)

    @property
    @pulumi.getter(name="lightnessFeatherVar")
    def lightness_feather_var(self) -> Optional[builtins.str]:
        """
        How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
        """
        return pulumi.get(self, "lightness_feather_var")

    @lightness_feather_var.setter
    def lightness_feather_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "lightness_feather_var", value)

    @property
    @pulumi.getter(name="lightnessTolerance")
    def lightness_tolerance(self) -> Optional[builtins.str]:
        """
        How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
        """
        return pulumi.get(self, "lightness_tolerance")

    @lightness_tolerance.setter
    def lightness_tolerance(self, value: Optional[builtins.str]):
        pulumi.set(self, "lightness_tolerance", value)

    @property
    @pulumi.getter(name="lightnessToleranceVar")
    def lightness_tolerance_var(self) -> Optional[builtins.str]:
        """
        How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
        """
        return pulumi.get(self, "lightness_tolerance_var")

    @lightness_tolerance_var.setter
    def lightness_tolerance_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "lightness_tolerance_var", value)

    @property
    @pulumi.getter(name="saturationFeather")
    def saturation_feather(self) -> Optional[builtins.str]:
        """
        How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
        """
        return pulumi.get(self, "saturation_feather")

    @saturation_feather.setter
    def saturation_feather(self, value: Optional[builtins.str]):
        pulumi.set(self, "saturation_feather", value)

    @property
    @pulumi.getter(name="saturationFeatherVar")
    def saturation_feather_var(self) -> Optional[builtins.str]:
        """
        How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
        """
        return pulumi.get(self, "saturation_feather_var")

    @saturation_feather_var.setter
    def saturation_feather_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "saturation_feather_var", value)

    @property
    @pulumi.getter(name="saturationTolerance")
    def saturation_tolerance(self) -> Optional[builtins.str]:
        """
        How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
        """
        return pulumi.get(self, "saturation_tolerance")

    @saturation_tolerance.setter
    def saturation_tolerance(self, value: Optional[builtins.str]):
        pulumi.set(self, "saturation_tolerance", value)

    @property
    @pulumi.getter(name="saturationToleranceVar")
    def saturation_tolerance_var(self) -> Optional[builtins.str]:
        """
        How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
        """
        return pulumi.get(self, "saturation_tolerance_var")

    @saturation_tolerance_var.setter
    def saturation_tolerance_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "saturation_tolerance_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeArgsDict(TypedDict):
        image: 'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageArgsDict'
        gravity: NotRequired[builtins.str]
        """
        Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
        """
        gravity_var: NotRequired[builtins.str]
        """
        Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
        """
        placement: NotRequired[builtins.str]
        """
        Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
        """
        placement_var: NotRequired[builtins.str]
        """
        Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
        """
        scale: NotRequired[builtins.str]
        """
        A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
        """
        scale_dimension: NotRequired[builtins.str]
        """
        The dimension, either `width` or `height`, of the source image to scale.
        """
        scale_dimension_var: NotRequired[builtins.str]
        """
        The dimension, either `width` or `height`, of the source image to scale.
        """
        scale_var: NotRequired[builtins.str]
        """
        A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
        """
        x_position: NotRequired[builtins.str]
        """
        The x-axis position of the image to apply.
        """
        x_position_var: NotRequired[builtins.str]
        """
        The x-axis position of the image to apply.
        """
        y_position: NotRequired[builtins.str]
        """
        The y-axis position of the image to apply.
        """
        y_position_var: NotRequired[builtins.str]
        """
        The y-axis position of the image to apply.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeArgs:
    def __init__(__self__, *,
                 image: 'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageArgs',
                 gravity: Optional[builtins.str] = None,
                 gravity_var: Optional[builtins.str] = None,
                 placement: Optional[builtins.str] = None,
                 placement_var: Optional[builtins.str] = None,
                 scale: Optional[builtins.str] = None,
                 scale_dimension: Optional[builtins.str] = None,
                 scale_dimension_var: Optional[builtins.str] = None,
                 scale_var: Optional[builtins.str] = None,
                 x_position: Optional[builtins.str] = None,
                 x_position_var: Optional[builtins.str] = None,
                 y_position: Optional[builtins.str] = None,
                 y_position_var: Optional[builtins.str] = None):
        """
        :param builtins.str gravity: Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
        :param builtins.str gravity_var: Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
        :param builtins.str placement: Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
        :param builtins.str placement_var: Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
        :param builtins.str scale: A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
        :param builtins.str scale_dimension: The dimension, either `width` or `height`, of the source image to scale.
        :param builtins.str scale_dimension_var: The dimension, either `width` or `height`, of the source image to scale.
        :param builtins.str scale_var: A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
        :param builtins.str x_position: The x-axis position of the image to apply.
        :param builtins.str x_position_var: The x-axis position of the image to apply.
        :param builtins.str y_position: The y-axis position of the image to apply.
        :param builtins.str y_position_var: The y-axis position of the image to apply.
        """
        pulumi.set(__self__, "image", image)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if placement_var is not None:
            pulumi.set(__self__, "placement_var", placement_var)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)
        if scale_dimension is not None:
            pulumi.set(__self__, "scale_dimension", scale_dimension)
        if scale_dimension_var is not None:
            pulumi.set(__self__, "scale_dimension_var", scale_dimension_var)
        if scale_var is not None:
            pulumi.set(__self__, "scale_var", scale_var)
        if x_position is not None:
            pulumi.set(__self__, "x_position", x_position)
        if x_position_var is not None:
            pulumi.set(__self__, "x_position_var", x_position_var)
        if y_position is not None:
            pulumi.set(__self__, "y_position", y_position)
        if y_position_var is not None:
            pulumi.set(__self__, "y_position_var", y_position_var)

    @property
    @pulumi.getter
    def image(self) -> 'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageArgs':
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: 'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageArgs'):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def gravity(self) -> Optional[builtins.str]:
        """
        Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
        """
        return pulumi.get(self, "gravity")

    @gravity.setter
    def gravity(self, value: Optional[builtins.str]):
        pulumi.set(self, "gravity", value)

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[builtins.str]:
        """
        Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
        """
        return pulumi.get(self, "gravity_var")

    @gravity_var.setter
    def gravity_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "gravity_var", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[builtins.str]:
        """
        Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
        """
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[builtins.str]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="placementVar")
    def placement_var(self) -> Optional[builtins.str]:
        """
        Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
        """
        return pulumi.get(self, "placement_var")

    @placement_var.setter
    def placement_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "placement_var", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[builtins.str]:
        """
        A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
        """
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[builtins.str]):
        pulumi.set(self, "scale", value)

    @property
    @pulumi.getter(name="scaleDimension")
    def scale_dimension(self) -> Optional[builtins.str]:
        """
        The dimension, either `width` or `height`, of the source image to scale.
        """
        return pulumi.get(self, "scale_dimension")

    @scale_dimension.setter
    def scale_dimension(self, value: Optional[builtins.str]):
        pulumi.set(self, "scale_dimension", value)

    @property
    @pulumi.getter(name="scaleDimensionVar")
    def scale_dimension_var(self) -> Optional[builtins.str]:
        """
        The dimension, either `width` or `height`, of the source image to scale.
        """
        return pulumi.get(self, "scale_dimension_var")

    @scale_dimension_var.setter
    def scale_dimension_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "scale_dimension_var", value)

    @property
    @pulumi.getter(name="scaleVar")
    def scale_var(self) -> Optional[builtins.str]:
        """
        A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
        """
        return pulumi.get(self, "scale_var")

    @scale_var.setter
    def scale_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "scale_var", value)

    @property
    @pulumi.getter(name="xPosition")
    def x_position(self) -> Optional[builtins.str]:
        """
        The x-axis position of the image to apply.
        """
        return pulumi.get(self, "x_position")

    @x_position.setter
    def x_position(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_position", value)

    @property
    @pulumi.getter(name="xPositionVar")
    def x_position_var(self) -> Optional[builtins.str]:
        """
        The x-axis position of the image to apply.
        """
        return pulumi.get(self, "x_position_var")

    @x_position_var.setter
    def x_position_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_position_var", value)

    @property
    @pulumi.getter(name="yPosition")
    def y_position(self) -> Optional[builtins.str]:
        """
        The y-axis position of the image to apply.
        """
        return pulumi.get(self, "y_position")

    @y_position.setter
    def y_position(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_position", value)

    @property
    @pulumi.getter(name="yPositionVar")
    def y_position_var(self) -> Optional[builtins.str]:
        """
        The y-axis position of the image to apply.
        """
        return pulumi.get(self, "y_position_var")

    @y_position_var.setter
    def y_position_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_position_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageArgsDict(TypedDict):
        box_images: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageArgsDict']]
        """
        A rectangular box, with a specified color and applied transformation.
        """
        circle_images: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageArgsDict']]
        """
        A rectangular box, with a specified color and applied transformation.
        """
        text_images: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageArgsDict']]
        """
        A snippet of text. Defines font family and size, fill color, and outline stroke width and color.
        """
        url_images: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageArgsDict']]
        """
        An image loaded from a URL.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageArgs:
    def __init__(__self__, *,
                 box_images: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageArgs']] = None,
                 circle_images: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageArgs']] = None,
                 text_images: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageArgs']] = None,
                 url_images: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageArgs']] = None):
        """
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageArgs'] box_images: A rectangular box, with a specified color and applied transformation.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageArgs'] circle_images: A rectangular box, with a specified color and applied transformation.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageArgs'] text_images: A snippet of text. Defines font family and size, fill color, and outline stroke width and color.
        :param Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageArgs'] url_images: An image loaded from a URL.
        """
        if box_images is not None:
            pulumi.set(__self__, "box_images", box_images)
        if circle_images is not None:
            pulumi.set(__self__, "circle_images", circle_images)
        if text_images is not None:
            pulumi.set(__self__, "text_images", text_images)
        if url_images is not None:
            pulumi.set(__self__, "url_images", url_images)

    @property
    @pulumi.getter(name="boxImages")
    def box_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageArgs']]:
        """
        A rectangular box, with a specified color and applied transformation.
        """
        return pulumi.get(self, "box_images")

    @box_images.setter
    def box_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageArgs']]):
        pulumi.set(self, "box_images", value)

    @property
    @pulumi.getter(name="circleImages")
    def circle_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageArgs']]:
        """
        A rectangular box, with a specified color and applied transformation.
        """
        return pulumi.get(self, "circle_images")

    @circle_images.setter
    def circle_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageArgs']]):
        pulumi.set(self, "circle_images", value)

    @property
    @pulumi.getter(name="textImages")
    def text_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageArgs']]:
        """
        A snippet of text. Defines font family and size, fill color, and outline stroke width and color.
        """
        return pulumi.get(self, "text_images")

    @text_images.setter
    def text_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageArgs']]):
        pulumi.set(self, "text_images", value)

    @property
    @pulumi.getter(name="urlImages")
    def url_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageArgs']]:
        """
        An image loaded from a URL.
        """
        return pulumi.get(self, "url_images")

    @url_images.setter
    def url_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageArgs']]):
        pulumi.set(self, "url_images", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageArgsDict(TypedDict):
        color: NotRequired[builtins.str]
        """
        The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        color_var: NotRequired[builtins.str]
        """
        The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        height: NotRequired[builtins.str]
        """
        The height of the box in pixels.
        """
        height_var: NotRequired[builtins.str]
        """
        The height of the box in pixels.
        """
        transformation: NotRequired['GetImagingPolicyImagePolicyPostBreakpointTransformationArgsDict']
        width: NotRequired[builtins.str]
        """
        The width of the box in pixels.
        """
        width_var: NotRequired[builtins.str]
        """
        The width of the box in pixels.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageArgs:
    def __init__(__self__, *,
                 color: Optional[builtins.str] = None,
                 color_var: Optional[builtins.str] = None,
                 height: Optional[builtins.str] = None,
                 height_var: Optional[builtins.str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 width: Optional[builtins.str] = None,
                 width_var: Optional[builtins.str] = None):
        """
        :param builtins.str color: The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        :param builtins.str color_var: The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        :param builtins.str height: The height of the box in pixels.
        :param builtins.str height_var: The height of the box in pixels.
        :param builtins.str width: The width of the box in pixels.
        :param builtins.str width_var: The width of the box in pixels.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[builtins.str]:
        """
        The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[builtins.str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[builtins.str]:
        """
        The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "color_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[builtins.str]:
        """
        The height of the box in pixels.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[builtins.str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[builtins.str]:
        """
        The height of the box in pixels.
        """
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.str]:
        """
        The width of the box in pixels.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[builtins.str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[builtins.str]:
        """
        The width of the box in pixels.
        """
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "width_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageArgsDict(TypedDict):
        color: NotRequired[builtins.str]
        """
        The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        color_var: NotRequired[builtins.str]
        """
        The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        diameter: NotRequired[builtins.str]
        """
        The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        """
        diameter_var: NotRequired[builtins.str]
        """
        The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        """
        transformation: NotRequired['GetImagingPolicyImagePolicyPostBreakpointTransformationArgsDict']
        width: NotRequired[builtins.str]
        """
        The width of the box in pixels.
        """
        width_var: NotRequired[builtins.str]
        """
        The width of the box in pixels.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageArgs:
    def __init__(__self__, *,
                 color: Optional[builtins.str] = None,
                 color_var: Optional[builtins.str] = None,
                 diameter: Optional[builtins.str] = None,
                 diameter_var: Optional[builtins.str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 width: Optional[builtins.str] = None,
                 width_var: Optional[builtins.str] = None):
        """
        :param builtins.str color: The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        :param builtins.str color_var: The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        :param builtins.str diameter: The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        :param builtins.str diameter_var: The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        :param builtins.str width: The width of the box in pixels.
        :param builtins.str width_var: The width of the box in pixels.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if diameter is not None:
            pulumi.set(__self__, "diameter", diameter)
        if diameter_var is not None:
            pulumi.set(__self__, "diameter_var", diameter_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[builtins.str]:
        """
        The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[builtins.str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[builtins.str]:
        """
        The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "color_var", value)

    @property
    @pulumi.getter
    def diameter(self) -> Optional[builtins.str]:
        """
        The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        """
        return pulumi.get(self, "diameter")

    @diameter.setter
    def diameter(self, value: Optional[builtins.str]):
        pulumi.set(self, "diameter", value)

    @property
    @pulumi.getter(name="diameterVar")
    def diameter_var(self) -> Optional[builtins.str]:
        """
        The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        """
        return pulumi.get(self, "diameter_var")

    @diameter_var.setter
    def diameter_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "diameter_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.str]:
        """
        The width of the box in pixels.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[builtins.str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[builtins.str]:
        """
        The width of the box in pixels.
        """
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "width_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageArgsDict(TypedDict):
        fill: NotRequired[builtins.str]
        """
        The main fill color of the text.
        """
        fill_var: NotRequired[builtins.str]
        """
        The main fill color of the text.
        """
        size: NotRequired[builtins.str]
        """
        The size in pixels to render the text.
        """
        size_var: NotRequired[builtins.str]
        """
        The size in pixels to render the text.
        """
        stroke: NotRequired[builtins.str]
        """
        The color for the outline of the text.
        """
        stroke_size: NotRequired[builtins.str]
        """
        The thickness in points for the outline of the text.
        """
        stroke_size_var: NotRequired[builtins.str]
        """
        The thickness in points for the outline of the text.
        """
        stroke_var: NotRequired[builtins.str]
        """
        The color for the outline of the text.
        """
        text: NotRequired[builtins.str]
        """
        The line of text to render.
        """
        text_var: NotRequired[builtins.str]
        """
        The line of text to render.
        """
        transformation: NotRequired['GetImagingPolicyImagePolicyPostBreakpointTransformationArgsDict']
        typeface: NotRequired[builtins.str]
        """
        The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        """
        typeface_var: NotRequired[builtins.str]
        """
        The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageArgs:
    def __init__(__self__, *,
                 fill: Optional[builtins.str] = None,
                 fill_var: Optional[builtins.str] = None,
                 size: Optional[builtins.str] = None,
                 size_var: Optional[builtins.str] = None,
                 stroke: Optional[builtins.str] = None,
                 stroke_size: Optional[builtins.str] = None,
                 stroke_size_var: Optional[builtins.str] = None,
                 stroke_var: Optional[builtins.str] = None,
                 text: Optional[builtins.str] = None,
                 text_var: Optional[builtins.str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 typeface: Optional[builtins.str] = None,
                 typeface_var: Optional[builtins.str] = None):
        """
        :param builtins.str fill: The main fill color of the text.
        :param builtins.str fill_var: The main fill color of the text.
        :param builtins.str size: The size in pixels to render the text.
        :param builtins.str size_var: The size in pixels to render the text.
        :param builtins.str stroke: The color for the outline of the text.
        :param builtins.str stroke_size: The thickness in points for the outline of the text.
        :param builtins.str stroke_size_var: The thickness in points for the outline of the text.
        :param builtins.str stroke_var: The color for the outline of the text.
        :param builtins.str text: The line of text to render.
        :param builtins.str text_var: The line of text to render.
        :param builtins.str typeface: The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        :param builtins.str typeface_var: The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        """
        if fill is not None:
            pulumi.set(__self__, "fill", fill)
        if fill_var is not None:
            pulumi.set(__self__, "fill_var", fill_var)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_var is not None:
            pulumi.set(__self__, "size_var", size_var)
        if stroke is not None:
            pulumi.set(__self__, "stroke", stroke)
        if stroke_size is not None:
            pulumi.set(__self__, "stroke_size", stroke_size)
        if stroke_size_var is not None:
            pulumi.set(__self__, "stroke_size_var", stroke_size_var)
        if stroke_var is not None:
            pulumi.set(__self__, "stroke_var", stroke_var)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if text_var is not None:
            pulumi.set(__self__, "text_var", text_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if typeface is not None:
            pulumi.set(__self__, "typeface", typeface)
        if typeface_var is not None:
            pulumi.set(__self__, "typeface_var", typeface_var)

    @property
    @pulumi.getter
    def fill(self) -> Optional[builtins.str]:
        """
        The main fill color of the text.
        """
        return pulumi.get(self, "fill")

    @fill.setter
    def fill(self, value: Optional[builtins.str]):
        pulumi.set(self, "fill", value)

    @property
    @pulumi.getter(name="fillVar")
    def fill_var(self) -> Optional[builtins.str]:
        """
        The main fill color of the text.
        """
        return pulumi.get(self, "fill_var")

    @fill_var.setter
    def fill_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "fill_var", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.str]:
        """
        The size in pixels to render the text.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[builtins.str]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeVar")
    def size_var(self) -> Optional[builtins.str]:
        """
        The size in pixels to render the text.
        """
        return pulumi.get(self, "size_var")

    @size_var.setter
    def size_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "size_var", value)

    @property
    @pulumi.getter
    def stroke(self) -> Optional[builtins.str]:
        """
        The color for the outline of the text.
        """
        return pulumi.get(self, "stroke")

    @stroke.setter
    def stroke(self, value: Optional[builtins.str]):
        pulumi.set(self, "stroke", value)

    @property
    @pulumi.getter(name="strokeSize")
    def stroke_size(self) -> Optional[builtins.str]:
        """
        The thickness in points for the outline of the text.
        """
        return pulumi.get(self, "stroke_size")

    @stroke_size.setter
    def stroke_size(self, value: Optional[builtins.str]):
        pulumi.set(self, "stroke_size", value)

    @property
    @pulumi.getter(name="strokeSizeVar")
    def stroke_size_var(self) -> Optional[builtins.str]:
        """
        The thickness in points for the outline of the text.
        """
        return pulumi.get(self, "stroke_size_var")

    @stroke_size_var.setter
    def stroke_size_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "stroke_size_var", value)

    @property
    @pulumi.getter(name="strokeVar")
    def stroke_var(self) -> Optional[builtins.str]:
        """
        The color for the outline of the text.
        """
        return pulumi.get(self, "stroke_var")

    @stroke_var.setter
    def stroke_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "stroke_var", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[builtins.str]:
        """
        The line of text to render.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[builtins.str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="textVar")
    def text_var(self) -> Optional[builtins.str]:
        """
        The line of text to render.
        """
        return pulumi.get(self, "text_var")

    @text_var.setter
    def text_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "text_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def typeface(self) -> Optional[builtins.str]:
        """
        The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        """
        return pulumi.get(self, "typeface")

    @typeface.setter
    def typeface(self, value: Optional[builtins.str]):
        pulumi.set(self, "typeface", value)

    @property
    @pulumi.getter(name="typefaceVar")
    def typeface_var(self) -> Optional[builtins.str]:
        """
        The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        """
        return pulumi.get(self, "typeface_var")

    @typeface_var.setter
    def typeface_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "typeface_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageArgsDict(TypedDict):
        transformation: NotRequired['GetImagingPolicyImagePolicyPostBreakpointTransformationArgsDict']
        url: NotRequired[builtins.str]
        """
        The URL of the image.
        """
        url_var: NotRequired[builtins.str]
        """
        The URL of the image.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageArgs:
    def __init__(__self__, *,
                 transformation: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 url: Optional[builtins.str] = None,
                 url_var: Optional[builtins.str] = None):
        """
        :param builtins.str url: The URL of the image.
        :param builtins.str url_var: The URL of the image.
        """
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if url_var is not None:
            pulumi.set(__self__, "url_var", url_var)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[builtins.str]:
        """
        The URL of the image.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[builtins.str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="urlVar")
    def url_var(self) -> Optional[builtins.str]:
        """
        The URL of the image.
        """
        return pulumi.get(self, "url_var")

    @url_var.setter
    def url_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "url_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundArgsDict(TypedDict):
        transformations: NotRequired[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationArgsDict']]
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundArgs:
    def __init__(__self__, *,
                 transformations: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']] = None):
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']]):
        pulumi.set(self, "transformations", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationContrastArgsDict(TypedDict):
        brightness: NotRequired[builtins.str]
        """
        Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
        """
        brightness_var: NotRequired[builtins.str]
        """
        Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
        """
        contrast: NotRequired[builtins.str]
        """
        Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
        """
        contrast_var: NotRequired[builtins.str]
        """
        Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationContrastArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationContrastArgs:
    def __init__(__self__, *,
                 brightness: Optional[builtins.str] = None,
                 brightness_var: Optional[builtins.str] = None,
                 contrast: Optional[builtins.str] = None,
                 contrast_var: Optional[builtins.str] = None):
        """
        :param builtins.str brightness: Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
        :param builtins.str brightness_var: Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
        :param builtins.str contrast: Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
        :param builtins.str contrast_var: Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
        """
        if brightness is not None:
            pulumi.set(__self__, "brightness", brightness)
        if brightness_var is not None:
            pulumi.set(__self__, "brightness_var", brightness_var)
        if contrast is not None:
            pulumi.set(__self__, "contrast", contrast)
        if contrast_var is not None:
            pulumi.set(__self__, "contrast_var", contrast_var)

    @property
    @pulumi.getter
    def brightness(self) -> Optional[builtins.str]:
        """
        Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
        """
        return pulumi.get(self, "brightness")

    @brightness.setter
    def brightness(self, value: Optional[builtins.str]):
        pulumi.set(self, "brightness", value)

    @property
    @pulumi.getter(name="brightnessVar")
    def brightness_var(self) -> Optional[builtins.str]:
        """
        Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
        """
        return pulumi.get(self, "brightness_var")

    @brightness_var.setter
    def brightness_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "brightness_var", value)

    @property
    @pulumi.getter
    def contrast(self) -> Optional[builtins.str]:
        """
        Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
        """
        return pulumi.get(self, "contrast")

    @contrast.setter
    def contrast(self, value: Optional[builtins.str]):
        pulumi.set(self, "contrast", value)

    @property
    @pulumi.getter(name="contrastVar")
    def contrast_var(self) -> Optional[builtins.str]:
        """
        Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
        """
        return pulumi.get(self, "contrast_var")

    @contrast_var.setter
    def contrast_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "contrast_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationGoopArgsDict(TypedDict):
        chaos: NotRequired[builtins.str]
        """
        Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
        """
        chaos_var: NotRequired[builtins.str]
        """
        Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
        """
        density: NotRequired[builtins.str]
        """
        Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
        """
        density_var: NotRequired[builtins.str]
        """
        Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
        """
        power: NotRequired[builtins.str]
        """
        By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
        """
        power_var: NotRequired[builtins.str]
        """
        By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
        """
        seed: NotRequired[builtins.str]
        """
        Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
        """
        seed_var: NotRequired[builtins.str]
        """
        Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationGoopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationGoopArgs:
    def __init__(__self__, *,
                 chaos: Optional[builtins.str] = None,
                 chaos_var: Optional[builtins.str] = None,
                 density: Optional[builtins.str] = None,
                 density_var: Optional[builtins.str] = None,
                 power: Optional[builtins.str] = None,
                 power_var: Optional[builtins.str] = None,
                 seed: Optional[builtins.str] = None,
                 seed_var: Optional[builtins.str] = None):
        """
        :param builtins.str chaos: Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
        :param builtins.str chaos_var: Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
        :param builtins.str density: Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
        :param builtins.str density_var: Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
        :param builtins.str power: By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
        :param builtins.str power_var: By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
        :param builtins.str seed: Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
        :param builtins.str seed_var: Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
        """
        if chaos is not None:
            pulumi.set(__self__, "chaos", chaos)
        if chaos_var is not None:
            pulumi.set(__self__, "chaos_var", chaos_var)
        if density is not None:
            pulumi.set(__self__, "density", density)
        if density_var is not None:
            pulumi.set(__self__, "density_var", density_var)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_var is not None:
            pulumi.set(__self__, "power_var", power_var)
        if seed is not None:
            pulumi.set(__self__, "seed", seed)
        if seed_var is not None:
            pulumi.set(__self__, "seed_var", seed_var)

    @property
    @pulumi.getter
    def chaos(self) -> Optional[builtins.str]:
        """
        Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
        """
        return pulumi.get(self, "chaos")

    @chaos.setter
    def chaos(self, value: Optional[builtins.str]):
        pulumi.set(self, "chaos", value)

    @property
    @pulumi.getter(name="chaosVar")
    def chaos_var(self) -> Optional[builtins.str]:
        """
        Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
        """
        return pulumi.get(self, "chaos_var")

    @chaos_var.setter
    def chaos_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "chaos_var", value)

    @property
    @pulumi.getter
    def density(self) -> Optional[builtins.str]:
        """
        Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
        """
        return pulumi.get(self, "density")

    @density.setter
    def density(self, value: Optional[builtins.str]):
        pulumi.set(self, "density", value)

    @property
    @pulumi.getter(name="densityVar")
    def density_var(self) -> Optional[builtins.str]:
        """
        Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
        """
        return pulumi.get(self, "density_var")

    @density_var.setter
    def density_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "density_var", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[builtins.str]:
        """
        By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[builtins.str]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerVar")
    def power_var(self) -> Optional[builtins.str]:
        """
        By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
        """
        return pulumi.get(self, "power_var")

    @power_var.setter
    def power_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "power_var", value)

    @property
    @pulumi.getter
    def seed(self) -> Optional[builtins.str]:
        """
        Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
        """
        return pulumi.get(self, "seed")

    @seed.setter
    def seed(self, value: Optional[builtins.str]):
        pulumi.set(self, "seed", value)

    @property
    @pulumi.getter(name="seedVar")
    def seed_var(self) -> Optional[builtins.str]:
        """
        Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
        """
        return pulumi.get(self, "seed_var")

    @seed_var.setter
    def seed_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "seed_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleArgsDict(TypedDict):
        type: NotRequired[builtins.str]
        """
        The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
        """
        type_var: NotRequired[builtins.str]
        """
        The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleArgs:
    def __init__(__self__, *,
                 type: Optional[builtins.str] = None,
                 type_var: Optional[builtins.str] = None):
        """
        :param builtins.str type: The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
        :param builtins.str type_var: The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type_var is not None:
            pulumi.set(__self__, "type_var", type_var)

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="typeVar")
    def type_var(self) -> Optional[builtins.str]:
        """
        The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
        """
        return pulumi.get(self, "type_var")

    @type_var.setter
    def type_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "type_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationHslArgsDict(TypedDict):
        hue: NotRequired[builtins.str]
        """
        The number of degrees to rotate colors around the color wheel, `0` by default.
        """
        hue_var: NotRequired[builtins.str]
        """
        The number of degrees to rotate colors around the color wheel, `0` by default.
        """
        lightness: NotRequired[builtins.str]
        """
        A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
        """
        lightness_var: NotRequired[builtins.str]
        """
        A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
        """
        saturation: NotRequired[builtins.str]
        """
        A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
        saturation_var: NotRequired[builtins.str]
        """
        A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationHslArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationHslArgs:
    def __init__(__self__, *,
                 hue: Optional[builtins.str] = None,
                 hue_var: Optional[builtins.str] = None,
                 lightness: Optional[builtins.str] = None,
                 lightness_var: Optional[builtins.str] = None,
                 saturation: Optional[builtins.str] = None,
                 saturation_var: Optional[builtins.str] = None):
        """
        :param builtins.str hue: The number of degrees to rotate colors around the color wheel, `0` by default.
        :param builtins.str hue_var: The number of degrees to rotate colors around the color wheel, `0` by default.
        :param builtins.str lightness: A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
        :param builtins.str lightness_var: A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
        :param builtins.str saturation: A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        :param builtins.str saturation_var: A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if lightness is not None:
            pulumi.set(__self__, "lightness", lightness)
        if lightness_var is not None:
            pulumi.set(__self__, "lightness_var", lightness_var)
        if saturation is not None:
            pulumi.set(__self__, "saturation", saturation)
        if saturation_var is not None:
            pulumi.set(__self__, "saturation_var", saturation_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[builtins.str]:
        """
        The number of degrees to rotate colors around the color wheel, `0` by default.
        """
        return pulumi.get(self, "hue")

    @hue.setter
    def hue(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue", value)

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[builtins.str]:
        """
        The number of degrees to rotate colors around the color wheel, `0` by default.
        """
        return pulumi.get(self, "hue_var")

    @hue_var.setter
    def hue_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue_var", value)

    @property
    @pulumi.getter
    def lightness(self) -> Optional[builtins.str]:
        """
        A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
        """
        return pulumi.get(self, "lightness")

    @lightness.setter
    def lightness(self, value: Optional[builtins.str]):
        pulumi.set(self, "lightness", value)

    @property
    @pulumi.getter(name="lightnessVar")
    def lightness_var(self) -> Optional[builtins.str]:
        """
        A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
        """
        return pulumi.get(self, "lightness_var")

    @lightness_var.setter
    def lightness_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "lightness_var", value)

    @property
    @pulumi.getter
    def saturation(self) -> Optional[builtins.str]:
        """
        A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
        return pulumi.get(self, "saturation")

    @saturation.setter
    def saturation(self, value: Optional[builtins.str]):
        pulumi.set(self, "saturation", value)

    @property
    @pulumi.getter(name="saturationVar")
    def saturation_var(self) -> Optional[builtins.str]:
        """
        A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
        return pulumi.get(self, "saturation_var")

    @saturation_var.setter
    def saturation_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "saturation_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationHsvArgsDict(TypedDict):
        hue: NotRequired[builtins.str]
        """
        The number of degrees to rotate colors around the color wheel, `0.0` by default.
        """
        hue_var: NotRequired[builtins.str]
        """
        The number of degrees to rotate colors around the color wheel, `0.0` by default.
        """
        saturation: NotRequired[builtins.str]
        """
        A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
        saturation_var: NotRequired[builtins.str]
        """
        A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
        value: NotRequired[builtins.str]
        """
        A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
        """
        value_var: NotRequired[builtins.str]
        """
        A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationHsvArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationHsvArgs:
    def __init__(__self__, *,
                 hue: Optional[builtins.str] = None,
                 hue_var: Optional[builtins.str] = None,
                 saturation: Optional[builtins.str] = None,
                 saturation_var: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None,
                 value_var: Optional[builtins.str] = None):
        """
        :param builtins.str hue: The number of degrees to rotate colors around the color wheel, `0.0` by default.
        :param builtins.str hue_var: The number of degrees to rotate colors around the color wheel, `0.0` by default.
        :param builtins.str saturation: A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        :param builtins.str saturation_var: A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        :param builtins.str value: A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
        :param builtins.str value_var: A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
        """
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if saturation is not None:
            pulumi.set(__self__, "saturation", saturation)
        if saturation_var is not None:
            pulumi.set(__self__, "saturation_var", saturation_var)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_var is not None:
            pulumi.set(__self__, "value_var", value_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[builtins.str]:
        """
        The number of degrees to rotate colors around the color wheel, `0.0` by default.
        """
        return pulumi.get(self, "hue")

    @hue.setter
    def hue(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue", value)

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[builtins.str]:
        """
        The number of degrees to rotate colors around the color wheel, `0.0` by default.
        """
        return pulumi.get(self, "hue_var")

    @hue_var.setter
    def hue_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue_var", value)

    @property
    @pulumi.getter
    def saturation(self) -> Optional[builtins.str]:
        """
        A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
        return pulumi.get(self, "saturation")

    @saturation.setter
    def saturation(self, value: Optional[builtins.str]):
        pulumi.set(self, "saturation", value)

    @property
    @pulumi.getter(name="saturationVar")
    def saturation_var(self) -> Optional[builtins.str]:
        """
        A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
        return pulumi.get(self, "saturation_var")

    @saturation_var.setter
    def saturation_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "saturation_var", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[builtins.str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueVar")
    def value_var(self) -> Optional[builtins.str]:
        """
        A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
        """
        return pulumi.get(self, "value_var")

    @value_var.setter
    def value_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "value_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionArgsDict(TypedDict):
        default: NotRequired['GetImagingPolicyImagePolicyPostBreakpointTransformationArgsDict']
        dimension: NotRequired[builtins.str]
        """
        The dimension to use to select the transformation, either `height`, `width`, or `both`.
        """
        dimension_var: NotRequired[builtins.str]
        """
        The dimension to use to select the transformation, either `height`, `width`, or `both`.
        """
        equal: NotRequired['GetImagingPolicyImagePolicyPostBreakpointTransformationArgsDict']
        greater_than: NotRequired['GetImagingPolicyImagePolicyPostBreakpointTransformationArgsDict']
        less_than: NotRequired['GetImagingPolicyImagePolicyPostBreakpointTransformationArgsDict']
        value: NotRequired[builtins.str]
        """
        The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
        """
        value_var: NotRequired[builtins.str]
        """
        The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionArgs:
    def __init__(__self__, *,
                 default: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 dimension: Optional[builtins.str] = None,
                 dimension_var: Optional[builtins.str] = None,
                 equal: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 greater_than: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 less_than: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 value: Optional[builtins.str] = None,
                 value_var: Optional[builtins.str] = None):
        """
        :param builtins.str dimension: The dimension to use to select the transformation, either `height`, `width`, or `both`.
        :param builtins.str dimension_var: The dimension to use to select the transformation, either `height`, `width`, or `both`.
        :param builtins.str value: The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
        :param builtins.str value_var: The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dimension is not None:
            pulumi.set(__self__, "dimension", dimension)
        if dimension_var is not None:
            pulumi.set(__self__, "dimension_var", dimension_var)
        if equal is not None:
            pulumi.set(__self__, "equal", equal)
        if greater_than is not None:
            pulumi.set(__self__, "greater_than", greater_than)
        if less_than is not None:
            pulumi.set(__self__, "less_than", less_than)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_var is not None:
            pulumi.set(__self__, "value_var", value_var)

    @property
    @pulumi.getter
    def default(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def dimension(self) -> Optional[builtins.str]:
        """
        The dimension to use to select the transformation, either `height`, `width`, or `both`.
        """
        return pulumi.get(self, "dimension")

    @dimension.setter
    def dimension(self, value: Optional[builtins.str]):
        pulumi.set(self, "dimension", value)

    @property
    @pulumi.getter(name="dimensionVar")
    def dimension_var(self) -> Optional[builtins.str]:
        """
        The dimension to use to select the transformation, either `height`, `width`, or `both`.
        """
        return pulumi.get(self, "dimension_var")

    @dimension_var.setter
    def dimension_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "dimension_var", value)

    @property
    @pulumi.getter
    def equal(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "equal")

    @equal.setter
    def equal(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "equal", value)

    @property
    @pulumi.getter(name="greaterThan")
    def greater_than(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "greater_than")

    @greater_than.setter
    def greater_than(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "greater_than", value)

    @property
    @pulumi.getter(name="lessThan")
    def less_than(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "less_than")

    @less_than.setter
    def less_than(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "less_than", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[builtins.str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueVar")
    def value_var(self) -> Optional[builtins.str]:
        """
        The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
        """
        return pulumi.get(self, "value_var")

    @value_var.setter
    def value_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "value_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationArgsDict(TypedDict):
        default: NotRequired['GetImagingPolicyImagePolicyPostBreakpointTransformationArgsDict']
        landscape: NotRequired['GetImagingPolicyImagePolicyPostBreakpointTransformationArgsDict']
        portrait: NotRequired['GetImagingPolicyImagePolicyPostBreakpointTransformationArgsDict']
        square: NotRequired['GetImagingPolicyImagePolicyPostBreakpointTransformationArgsDict']
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationArgs:
    def __init__(__self__, *,
                 default: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 landscape: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 portrait: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 square: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if landscape is not None:
            pulumi.set(__self__, "landscape", landscape)
        if portrait is not None:
            pulumi.set(__self__, "portrait", portrait)
        if square is not None:
            pulumi.set(__self__, "square", square)

    @property
    @pulumi.getter
    def default(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def landscape(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "landscape")

    @landscape.setter
    def landscape(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "landscape", value)

    @property
    @pulumi.getter
    def portrait(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "portrait")

    @portrait.setter
    def portrait(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "portrait", value)

    @property
    @pulumi.getter
    def square(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "square")

    @square.setter
    def square(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "square", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorArgsDict(TypedDict):
        colors: NotRequired[builtins.str]
        """
        The value representing the maximum number of colors to use with the source image.
        """
        colors_var: NotRequired[builtins.str]
        """
        The value representing the maximum number of colors to use with the source image.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorArgs:
    def __init__(__self__, *,
                 colors: Optional[builtins.str] = None,
                 colors_var: Optional[builtins.str] = None):
        """
        :param builtins.str colors: The value representing the maximum number of colors to use with the source image.
        :param builtins.str colors_var: The value representing the maximum number of colors to use with the source image.
        """
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if colors_var is not None:
            pulumi.set(__self__, "colors_var", colors_var)

    @property
    @pulumi.getter
    def colors(self) -> Optional[builtins.str]:
        """
        The value representing the maximum number of colors to use with the source image.
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[builtins.str]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="colorsVar")
    def colors_var(self) -> Optional[builtins.str]:
        """
        The value representing the maximum number of colors to use with the source image.
        """
        return pulumi.get(self, "colors_var")

    @colors_var.setter
    def colors_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "colors_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgsDict(TypedDict):
        horizontal: NotRequired[builtins.str]
        """
        Flips the image horizontally.
        """
        horizontal_var: NotRequired[builtins.str]
        """
        Flips the image horizontally.
        """
        vertical: NotRequired[builtins.str]
        """
        Flips the image vertically.
        """
        vertical_var: NotRequired[builtins.str]
        """
        Flips the image vertically.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs:
    def __init__(__self__, *,
                 horizontal: Optional[builtins.str] = None,
                 horizontal_var: Optional[builtins.str] = None,
                 vertical: Optional[builtins.str] = None,
                 vertical_var: Optional[builtins.str] = None):
        """
        :param builtins.str horizontal: Flips the image horizontally.
        :param builtins.str horizontal_var: Flips the image horizontally.
        :param builtins.str vertical: Flips the image vertically.
        :param builtins.str vertical_var: Flips the image vertically.
        """
        if horizontal is not None:
            pulumi.set(__self__, "horizontal", horizontal)
        if horizontal_var is not None:
            pulumi.set(__self__, "horizontal_var", horizontal_var)
        if vertical is not None:
            pulumi.set(__self__, "vertical", vertical)
        if vertical_var is not None:
            pulumi.set(__self__, "vertical_var", vertical_var)

    @property
    @pulumi.getter
    def horizontal(self) -> Optional[builtins.str]:
        """
        Flips the image horizontally.
        """
        return pulumi.get(self, "horizontal")

    @horizontal.setter
    def horizontal(self, value: Optional[builtins.str]):
        pulumi.set(self, "horizontal", value)

    @property
    @pulumi.getter(name="horizontalVar")
    def horizontal_var(self) -> Optional[builtins.str]:
        """
        Flips the image horizontally.
        """
        return pulumi.get(self, "horizontal_var")

    @horizontal_var.setter
    def horizontal_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "horizontal_var", value)

    @property
    @pulumi.getter
    def vertical(self) -> Optional[builtins.str]:
        """
        Flips the image vertically.
        """
        return pulumi.get(self, "vertical")

    @vertical.setter
    def vertical(self, value: Optional[builtins.str]):
        pulumi.set(self, "vertical", value)

    @property
    @pulumi.getter(name="verticalVar")
    def vertical_var(self) -> Optional[builtins.str]:
        """
        Flips the image vertically.
        """
        return pulumi.get(self, "vertical_var")

    @vertical_var.setter
    def vertical_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "vertical_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueArgsDict(TypedDict):
        hue: NotRequired[builtins.str]
        """
        Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
        """
        hue_var: NotRequired[builtins.str]
        """
        Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueArgs:
    def __init__(__self__, *,
                 hue: Optional[builtins.str] = None,
                 hue_var: Optional[builtins.str] = None):
        """
        :param builtins.str hue: Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
        :param builtins.str hue_var: Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
        """
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[builtins.str]:
        """
        Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
        """
        return pulumi.get(self, "hue")

    @hue.setter
    def hue(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue", value)

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[builtins.str]:
        """
        Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
        """
        return pulumi.get(self, "hue_var")

    @hue_var.setter
    def hue_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityArgsDict(TypedDict):
        opacity: NotRequired[builtins.str]
        """
        Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
        """
        opacity_var: NotRequired[builtins.str]
        """
        Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityArgs:
    def __init__(__self__, *,
                 opacity: Optional[builtins.str] = None,
                 opacity_var: Optional[builtins.str] = None):
        """
        :param builtins.str opacity: Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
        :param builtins.str opacity_var: Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
        """
        if opacity is not None:
            pulumi.set(__self__, "opacity", opacity)
        if opacity_var is not None:
            pulumi.set(__self__, "opacity_var", opacity_var)

    @property
    @pulumi.getter
    def opacity(self) -> Optional[builtins.str]:
        """
        Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
        """
        return pulumi.get(self, "opacity")

    @opacity.setter
    def opacity(self, value: Optional[builtins.str]):
        pulumi.set(self, "opacity", value)

    @property
    @pulumi.getter(name="opacityVar")
    def opacity_var(self) -> Optional[builtins.str]:
        """
        Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
        """
        return pulumi.get(self, "opacity_var")

    @opacity_var.setter
    def opacity_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "opacity_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorArgsDict(TypedDict):
        color: NotRequired[builtins.str]
        """
        The hexadecimal CSS color value to remove.
        """
        color_var: NotRequired[builtins.str]
        """
        The hexadecimal CSS color value to remove.
        """
        feather: NotRequired[builtins.str]
        """
        The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
        """
        feather_var: NotRequired[builtins.str]
        """
        The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
        """
        tolerance: NotRequired[builtins.str]
        """
        The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
        """
        tolerance_var: NotRequired[builtins.str]
        """
        The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorArgs:
    def __init__(__self__, *,
                 color: Optional[builtins.str] = None,
                 color_var: Optional[builtins.str] = None,
                 feather: Optional[builtins.str] = None,
                 feather_var: Optional[builtins.str] = None,
                 tolerance: Optional[builtins.str] = None,
                 tolerance_var: Optional[builtins.str] = None):
        """
        :param builtins.str color: The hexadecimal CSS color value to remove.
        :param builtins.str color_var: The hexadecimal CSS color value to remove.
        :param builtins.str feather: The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
        :param builtins.str feather_var: The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
        :param builtins.str tolerance: The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
        :param builtins.str tolerance_var: The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if feather is not None:
            pulumi.set(__self__, "feather", feather)
        if feather_var is not None:
            pulumi.set(__self__, "feather_var", feather_var)
        if tolerance is not None:
            pulumi.set(__self__, "tolerance", tolerance)
        if tolerance_var is not None:
            pulumi.set(__self__, "tolerance_var", tolerance_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[builtins.str]:
        """
        The hexadecimal CSS color value to remove.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[builtins.str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[builtins.str]:
        """
        The hexadecimal CSS color value to remove.
        """
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "color_var", value)

    @property
    @pulumi.getter
    def feather(self) -> Optional[builtins.str]:
        """
        The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
        """
        return pulumi.get(self, "feather")

    @feather.setter
    def feather(self, value: Optional[builtins.str]):
        pulumi.set(self, "feather", value)

    @property
    @pulumi.getter(name="featherVar")
    def feather_var(self) -> Optional[builtins.str]:
        """
        The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
        """
        return pulumi.get(self, "feather_var")

    @feather_var.setter
    def feather_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "feather_var", value)

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[builtins.str]:
        """
        The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
        """
        return pulumi.get(self, "tolerance")

    @tolerance.setter
    def tolerance(self, value: Optional[builtins.str]):
        pulumi.set(self, "tolerance", value)

    @property
    @pulumi.getter(name="toleranceVar")
    def tolerance_var(self) -> Optional[builtins.str]:
        """
        The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
        """
        return pulumi.get(self, "tolerance_var")

    @tolerance_var.setter
    def tolerance_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "tolerance_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskArgsDict(TypedDict):
        gain: NotRequired[builtins.str]
        """
        Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
        """
        gain_var: NotRequired[builtins.str]
        """
        Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
        """
        sigma: NotRequired[builtins.str]
        """
        The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
        """
        sigma_var: NotRequired[builtins.str]
        """
        The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
        """
        threshold: NotRequired[builtins.str]
        """
        Set the minimum change required to include a detail in the filter. Higher values discard more changes.
        """
        threshold_var: NotRequired[builtins.str]
        """
        Set the minimum change required to include a detail in the filter. Higher values discard more changes.
        """
elif False:
    GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskArgs:
    def __init__(__self__, *,
                 gain: Optional[builtins.str] = None,
                 gain_var: Optional[builtins.str] = None,
                 sigma: Optional[builtins.str] = None,
                 sigma_var: Optional[builtins.str] = None,
                 threshold: Optional[builtins.str] = None,
                 threshold_var: Optional[builtins.str] = None):
        """
        :param builtins.str gain: Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
        :param builtins.str gain_var: Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
        :param builtins.str sigma: The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
        :param builtins.str sigma_var: The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
        :param builtins.str threshold: Set the minimum change required to include a detail in the filter. Higher values discard more changes.
        :param builtins.str threshold_var: Set the minimum change required to include a detail in the filter. Higher values discard more changes.
        """
        if gain is not None:
            pulumi.set(__self__, "gain", gain)
        if gain_var is not None:
            pulumi.set(__self__, "gain_var", gain_var)
        if sigma is not None:
            pulumi.set(__self__, "sigma", sigma)
        if sigma_var is not None:
            pulumi.set(__self__, "sigma_var", sigma_var)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_var is not None:
            pulumi.set(__self__, "threshold_var", threshold_var)

    @property
    @pulumi.getter
    def gain(self) -> Optional[builtins.str]:
        """
        Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
        """
        return pulumi.get(self, "gain")

    @gain.setter
    def gain(self, value: Optional[builtins.str]):
        pulumi.set(self, "gain", value)

    @property
    @pulumi.getter(name="gainVar")
    def gain_var(self) -> Optional[builtins.str]:
        """
        Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
        """
        return pulumi.get(self, "gain_var")

    @gain_var.setter
    def gain_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "gain_var", value)

    @property
    @pulumi.getter
    def sigma(self) -> Optional[builtins.str]:
        """
        The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
        """
        return pulumi.get(self, "sigma")

    @sigma.setter
    def sigma(self, value: Optional[builtins.str]):
        pulumi.set(self, "sigma", value)

    @property
    @pulumi.getter(name="sigmaVar")
    def sigma_var(self) -> Optional[builtins.str]:
        """
        The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
        """
        return pulumi.get(self, "sigma_var")

    @sigma_var.setter
    def sigma_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "sigma_var", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[builtins.str]:
        """
        Set the minimum change required to include a detail in the filter. Higher values discard more changes.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[builtins.str]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter(name="thresholdVar")
    def threshold_var(self) -> Optional[builtins.str]:
        """
        Set the minimum change required to include a detail in the filter. Higher values discard more changes.
        """
        return pulumi.get(self, "threshold_var")

    @threshold_var.setter
    def threshold_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "threshold_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationArgsDict(TypedDict):
        appends: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationAppendArgsDict']]
        """
        Places a specified `image` beside the source image. The API places the `image` on a major dimension, then aligns it on the minor dimension. Transparent pixels fill any area not covered by either image.
        """
        aspect_crops: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationAspectCropArgsDict']]
        """
        Lets you change the height or width of an image (either by cropping or expanding the area) to an aspect ratio of your choosing.
        """
        background_colors: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationBackgroundColorArgsDict']]
        """
        Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
        """
        blurs: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationBlurArgsDict']]
        """
        Applies a Gaussian blur to the image.
        """
        chroma_keys: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationChromaKeyArgsDict']]
        """
        Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a 'green screen' technique commonly used to isolate and remove background colors.
        """
        composites: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationCompositeArgsDict']]
        """
        Applies another image to the source image, either as an overlay or an underlay. The image that's underneath is visible in areas that are beyond the edges of the top image or that are less than 100% opaque. A common use of an overlay composite is to add a watermark.
        """
        compounds: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationCompoundArgsDict']]
        contrasts: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationContrastArgsDict']]
        """
        Adjusts both the contrast and brightness of an image.
        """
        crops: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationCropArgsDict']]
        """
        Crops an image.
        """
        face_crops: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationFaceCropArgsDict']]
        """
        Applies a method to detect faces in the source image and applies the rectangular crop on either the `biggest` face or `all` of the faces detected. Image and Video Manager tries to preserve faces in the image instead of using specified crop coordinates.
        """
        feature_crops: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationFeatureCropArgsDict']]
        """
        Identifies prominent features of the source image, then crops around as many of these features as possible relative to the specified `width` and `height` values.
        """
        fit_and_fills: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationFitAndFillArgsDict']]
        """
        Resizes an image to fit within a specific size box and then uses a fill of that same image to cover any transparent space at the edges. By default the fill image has a Blur transformation with a sigma value of 8 applied, but the transformation can be customized using the fillTransformation parameter.
        """
        goops: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationGoopArgsDict']]
        """
        Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
        """
        grayscales: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationGrayscaleArgsDict']]
        """
        Restricts image color to shades of gray only.
        """
        hsls: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationHslArgsDict']]
        """
        Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
        """
        hsvs: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationHsvArgsDict']]
        """
        Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
        """
        if_dimensions: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationIfDimensionArgsDict']]
        if_orientations: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationIfOrientationArgsDict']]
        im_queries: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationImQueryArgsDict']]
        """
        Apply artistic transformations to images quickly and dynamically by specifying transformations with a query string appendedto the image URL.
        """
        max_colors: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationMaxColorArgsDict']]
        """
        Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
        """
        mirrors: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationMirrorArgsDict']]
        """
        Flips an image horizontally, vertically, or both.
        """
        mono_hues: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationMonoHueArgsDict']]
        """
        Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
        """
        opacities: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationOpacityArgsDict']]
        """
        Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
        """
        region_of_interest_crops: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgsDict']]
        """
        Crops to a region around a specified area of interest relative to the specified `width` and `height` values.
        """
        relative_crops: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationRelativeCropArgsDict']]
        """
        Shrinks or expands an image relative to the image's specified dimensions. Image and Video Manager fills the expanded areas with transparency. Positive values shrink the side, while negative values expand it.
        """
        remove_colors: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationRemoveColorArgsDict']]
        """
        Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
        """
        resizes: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationResizeArgsDict']]
        """
        Resizes an image to a particular, absolute dimension. If you don't enter a `width` or a `height`, the image is resized with the `fit` aspect preservation mode, which selects a value for the missing dimension that preserves the image's aspect.
        """
        rotates: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationRotateArgsDict']]
        """
        Rotate the image around its center by indicating the degrees of rotation.
        """
        scales: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationScaleArgsDict']]
        """
        Changes the image's size to different dimensions relative to its starting size.
        """
        shears: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationShearsArgsDict']]
        """
        Slants an image into a parallelogram, as a percent of the starting dimension as represented in decimal format. You need to specify at least one axis property. Transparent pixels fill empty areas around the sheared image as needed, so it's often useful to use a `BackgroundColor` transformation for these areas.
        """
        smart_crops: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationSmartCropArgsDict']]
        """
        Crops around whatever is most important in the image, to a region around a specified area of interest relative to the specified `width` and `height` values. The crop detects any faces present, otherwise features.
        """
        trims: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationTrimArgsDict']]
        """
        Automatically crops uniform backgrounds from the edges of an image.
        """
        unsharp_masks: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationUnsharpMaskArgsDict']]
        """
        Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationArgs:
    def __init__(__self__, *,
                 appends: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendArgs']] = None,
                 aspect_crops: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAspectCropArgs']] = None,
                 background_colors: Optional[Sequence['GetImagingPolicyImagePolicyTransformationBackgroundColorArgs']] = None,
                 blurs: Optional[Sequence['GetImagingPolicyImagePolicyTransformationBlurArgs']] = None,
                 chroma_keys: Optional[Sequence['GetImagingPolicyImagePolicyTransformationChromaKeyArgs']] = None,
                 composites: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeArgs']] = None,
                 compounds: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompoundArgs']] = None,
                 contrasts: Optional[Sequence['GetImagingPolicyImagePolicyTransformationContrastArgs']] = None,
                 crops: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCropArgs']] = None,
                 face_crops: Optional[Sequence['GetImagingPolicyImagePolicyTransformationFaceCropArgs']] = None,
                 feature_crops: Optional[Sequence['GetImagingPolicyImagePolicyTransformationFeatureCropArgs']] = None,
                 fit_and_fills: Optional[Sequence['GetImagingPolicyImagePolicyTransformationFitAndFillArgs']] = None,
                 goops: Optional[Sequence['GetImagingPolicyImagePolicyTransformationGoopArgs']] = None,
                 grayscales: Optional[Sequence['GetImagingPolicyImagePolicyTransformationGrayscaleArgs']] = None,
                 hsls: Optional[Sequence['GetImagingPolicyImagePolicyTransformationHslArgs']] = None,
                 hsvs: Optional[Sequence['GetImagingPolicyImagePolicyTransformationHsvArgs']] = None,
                 if_dimensions: Optional[Sequence['GetImagingPolicyImagePolicyTransformationIfDimensionArgs']] = None,
                 if_orientations: Optional[Sequence['GetImagingPolicyImagePolicyTransformationIfOrientationArgs']] = None,
                 im_queries: Optional[Sequence['GetImagingPolicyImagePolicyTransformationImQueryArgs']] = None,
                 max_colors: Optional[Sequence['GetImagingPolicyImagePolicyTransformationMaxColorArgs']] = None,
                 mirrors: Optional[Sequence['GetImagingPolicyImagePolicyTransformationMirrorArgs']] = None,
                 mono_hues: Optional[Sequence['GetImagingPolicyImagePolicyTransformationMonoHueArgs']] = None,
                 opacities: Optional[Sequence['GetImagingPolicyImagePolicyTransformationOpacityArgs']] = None,
                 region_of_interest_crops: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs']] = None,
                 relative_crops: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRelativeCropArgs']] = None,
                 remove_colors: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRemoveColorArgs']] = None,
                 resizes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationResizeArgs']] = None,
                 rotates: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRotateArgs']] = None,
                 scales: Optional[Sequence['GetImagingPolicyImagePolicyTransformationScaleArgs']] = None,
                 shears: Optional[Sequence['GetImagingPolicyImagePolicyTransformationShearsArgs']] = None,
                 smart_crops: Optional[Sequence['GetImagingPolicyImagePolicyTransformationSmartCropArgs']] = None,
                 trims: Optional[Sequence['GetImagingPolicyImagePolicyTransformationTrimArgs']] = None,
                 unsharp_masks: Optional[Sequence['GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs']] = None):
        """
        :param Sequence['GetImagingPolicyImagePolicyTransformationAppendArgs'] appends: Places a specified `image` beside the source image. The API places the `image` on a major dimension, then aligns it on the minor dimension. Transparent pixels fill any area not covered by either image.
        :param Sequence['GetImagingPolicyImagePolicyTransformationAspectCropArgs'] aspect_crops: Lets you change the height or width of an image (either by cropping or expanding the area) to an aspect ratio of your choosing.
        :param Sequence['GetImagingPolicyImagePolicyTransformationBackgroundColorArgs'] background_colors: Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
        :param Sequence['GetImagingPolicyImagePolicyTransformationBlurArgs'] blurs: Applies a Gaussian blur to the image.
        :param Sequence['GetImagingPolicyImagePolicyTransformationChromaKeyArgs'] chroma_keys: Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a 'green screen' technique commonly used to isolate and remove background colors.
        :param Sequence['GetImagingPolicyImagePolicyTransformationCompositeArgs'] composites: Applies another image to the source image, either as an overlay or an underlay. The image that's underneath is visible in areas that are beyond the edges of the top image or that are less than 100% opaque. A common use of an overlay composite is to add a watermark.
        :param Sequence['GetImagingPolicyImagePolicyTransformationContrastArgs'] contrasts: Adjusts both the contrast and brightness of an image.
        :param Sequence['GetImagingPolicyImagePolicyTransformationCropArgs'] crops: Crops an image.
        :param Sequence['GetImagingPolicyImagePolicyTransformationFaceCropArgs'] face_crops: Applies a method to detect faces in the source image and applies the rectangular crop on either the `biggest` face or `all` of the faces detected. Image and Video Manager tries to preserve faces in the image instead of using specified crop coordinates.
        :param Sequence['GetImagingPolicyImagePolicyTransformationFeatureCropArgs'] feature_crops: Identifies prominent features of the source image, then crops around as many of these features as possible relative to the specified `width` and `height` values.
        :param Sequence['GetImagingPolicyImagePolicyTransformationFitAndFillArgs'] fit_and_fills: Resizes an image to fit within a specific size box and then uses a fill of that same image to cover any transparent space at the edges. By default the fill image has a Blur transformation with a sigma value of 8 applied, but the transformation can be customized using the fillTransformation parameter.
        :param Sequence['GetImagingPolicyImagePolicyTransformationGoopArgs'] goops: Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
        :param Sequence['GetImagingPolicyImagePolicyTransformationGrayscaleArgs'] grayscales: Restricts image color to shades of gray only.
        :param Sequence['GetImagingPolicyImagePolicyTransformationHslArgs'] hsls: Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
        :param Sequence['GetImagingPolicyImagePolicyTransformationHsvArgs'] hsvs: Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
        :param Sequence['GetImagingPolicyImagePolicyTransformationImQueryArgs'] im_queries: Apply artistic transformations to images quickly and dynamically by specifying transformations with a query string appendedto the image URL.
        :param Sequence['GetImagingPolicyImagePolicyTransformationMaxColorArgs'] max_colors: Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
        :param Sequence['GetImagingPolicyImagePolicyTransformationMirrorArgs'] mirrors: Flips an image horizontally, vertically, or both.
        :param Sequence['GetImagingPolicyImagePolicyTransformationMonoHueArgs'] mono_hues: Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
        :param Sequence['GetImagingPolicyImagePolicyTransformationOpacityArgs'] opacities: Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
        :param Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs'] region_of_interest_crops: Crops to a region around a specified area of interest relative to the specified `width` and `height` values.
        :param Sequence['GetImagingPolicyImagePolicyTransformationRelativeCropArgs'] relative_crops: Shrinks or expands an image relative to the image's specified dimensions. Image and Video Manager fills the expanded areas with transparency. Positive values shrink the side, while negative values expand it.
        :param Sequence['GetImagingPolicyImagePolicyTransformationRemoveColorArgs'] remove_colors: Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
        :param Sequence['GetImagingPolicyImagePolicyTransformationResizeArgs'] resizes: Resizes an image to a particular, absolute dimension. If you don't enter a `width` or a `height`, the image is resized with the `fit` aspect preservation mode, which selects a value for the missing dimension that preserves the image's aspect.
        :param Sequence['GetImagingPolicyImagePolicyTransformationRotateArgs'] rotates: Rotate the image around its center by indicating the degrees of rotation.
        :param Sequence['GetImagingPolicyImagePolicyTransformationScaleArgs'] scales: Changes the image's size to different dimensions relative to its starting size.
        :param Sequence['GetImagingPolicyImagePolicyTransformationShearsArgs'] shears: Slants an image into a parallelogram, as a percent of the starting dimension as represented in decimal format. You need to specify at least one axis property. Transparent pixels fill empty areas around the sheared image as needed, so it's often useful to use a `BackgroundColor` transformation for these areas.
        :param Sequence['GetImagingPolicyImagePolicyTransformationSmartCropArgs'] smart_crops: Crops around whatever is most important in the image, to a region around a specified area of interest relative to the specified `width` and `height` values. The crop detects any faces present, otherwise features.
        :param Sequence['GetImagingPolicyImagePolicyTransformationTrimArgs'] trims: Automatically crops uniform backgrounds from the edges of an image.
        :param Sequence['GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs'] unsharp_masks: Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
        """
        if appends is not None:
            pulumi.set(__self__, "appends", appends)
        if aspect_crops is not None:
            pulumi.set(__self__, "aspect_crops", aspect_crops)
        if background_colors is not None:
            pulumi.set(__self__, "background_colors", background_colors)
        if blurs is not None:
            pulumi.set(__self__, "blurs", blurs)
        if chroma_keys is not None:
            pulumi.set(__self__, "chroma_keys", chroma_keys)
        if composites is not None:
            pulumi.set(__self__, "composites", composites)
        if compounds is not None:
            pulumi.set(__self__, "compounds", compounds)
        if contrasts is not None:
            pulumi.set(__self__, "contrasts", contrasts)
        if crops is not None:
            pulumi.set(__self__, "crops", crops)
        if face_crops is not None:
            pulumi.set(__self__, "face_crops", face_crops)
        if feature_crops is not None:
            pulumi.set(__self__, "feature_crops", feature_crops)
        if fit_and_fills is not None:
            pulumi.set(__self__, "fit_and_fills", fit_and_fills)
        if goops is not None:
            pulumi.set(__self__, "goops", goops)
        if grayscales is not None:
            pulumi.set(__self__, "grayscales", grayscales)
        if hsls is not None:
            pulumi.set(__self__, "hsls", hsls)
        if hsvs is not None:
            pulumi.set(__self__, "hsvs", hsvs)
        if if_dimensions is not None:
            pulumi.set(__self__, "if_dimensions", if_dimensions)
        if if_orientations is not None:
            pulumi.set(__self__, "if_orientations", if_orientations)
        if im_queries is not None:
            pulumi.set(__self__, "im_queries", im_queries)
        if max_colors is not None:
            pulumi.set(__self__, "max_colors", max_colors)
        if mirrors is not None:
            pulumi.set(__self__, "mirrors", mirrors)
        if mono_hues is not None:
            pulumi.set(__self__, "mono_hues", mono_hues)
        if opacities is not None:
            pulumi.set(__self__, "opacities", opacities)
        if region_of_interest_crops is not None:
            pulumi.set(__self__, "region_of_interest_crops", region_of_interest_crops)
        if relative_crops is not None:
            pulumi.set(__self__, "relative_crops", relative_crops)
        if remove_colors is not None:
            pulumi.set(__self__, "remove_colors", remove_colors)
        if resizes is not None:
            pulumi.set(__self__, "resizes", resizes)
        if rotates is not None:
            pulumi.set(__self__, "rotates", rotates)
        if scales is not None:
            pulumi.set(__self__, "scales", scales)
        if shears is not None:
            pulumi.set(__self__, "shears", shears)
        if smart_crops is not None:
            pulumi.set(__self__, "smart_crops", smart_crops)
        if trims is not None:
            pulumi.set(__self__, "trims", trims)
        if unsharp_masks is not None:
            pulumi.set(__self__, "unsharp_masks", unsharp_masks)

    @property
    @pulumi.getter
    def appends(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendArgs']]:
        """
        Places a specified `image` beside the source image. The API places the `image` on a major dimension, then aligns it on the minor dimension. Transparent pixels fill any area not covered by either image.
        """
        return pulumi.get(self, "appends")

    @appends.setter
    def appends(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendArgs']]):
        pulumi.set(self, "appends", value)

    @property
    @pulumi.getter(name="aspectCrops")
    def aspect_crops(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationAspectCropArgs']]:
        """
        Lets you change the height or width of an image (either by cropping or expanding the area) to an aspect ratio of your choosing.
        """
        return pulumi.get(self, "aspect_crops")

    @aspect_crops.setter
    def aspect_crops(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAspectCropArgs']]):
        pulumi.set(self, "aspect_crops", value)

    @property
    @pulumi.getter(name="backgroundColors")
    def background_colors(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationBackgroundColorArgs']]:
        """
        Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
        """
        return pulumi.get(self, "background_colors")

    @background_colors.setter
    def background_colors(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationBackgroundColorArgs']]):
        pulumi.set(self, "background_colors", value)

    @property
    @pulumi.getter
    def blurs(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationBlurArgs']]:
        """
        Applies a Gaussian blur to the image.
        """
        return pulumi.get(self, "blurs")

    @blurs.setter
    def blurs(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationBlurArgs']]):
        pulumi.set(self, "blurs", value)

    @property
    @pulumi.getter(name="chromaKeys")
    def chroma_keys(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationChromaKeyArgs']]:
        """
        Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a 'green screen' technique commonly used to isolate and remove background colors.
        """
        return pulumi.get(self, "chroma_keys")

    @chroma_keys.setter
    def chroma_keys(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationChromaKeyArgs']]):
        pulumi.set(self, "chroma_keys", value)

    @property
    @pulumi.getter
    def composites(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeArgs']]:
        """
        Applies another image to the source image, either as an overlay or an underlay. The image that's underneath is visible in areas that are beyond the edges of the top image or that are less than 100% opaque. A common use of an overlay composite is to add a watermark.
        """
        return pulumi.get(self, "composites")

    @composites.setter
    def composites(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeArgs']]):
        pulumi.set(self, "composites", value)

    @property
    @pulumi.getter
    def compounds(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompoundArgs']]:
        return pulumi.get(self, "compounds")

    @compounds.setter
    def compounds(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompoundArgs']]):
        pulumi.set(self, "compounds", value)

    @property
    @pulumi.getter
    def contrasts(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationContrastArgs']]:
        """
        Adjusts both the contrast and brightness of an image.
        """
        return pulumi.get(self, "contrasts")

    @contrasts.setter
    def contrasts(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationContrastArgs']]):
        pulumi.set(self, "contrasts", value)

    @property
    @pulumi.getter
    def crops(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationCropArgs']]:
        """
        Crops an image.
        """
        return pulumi.get(self, "crops")

    @crops.setter
    def crops(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCropArgs']]):
        pulumi.set(self, "crops", value)

    @property
    @pulumi.getter(name="faceCrops")
    def face_crops(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationFaceCropArgs']]:
        """
        Applies a method to detect faces in the source image and applies the rectangular crop on either the `biggest` face or `all` of the faces detected. Image and Video Manager tries to preserve faces in the image instead of using specified crop coordinates.
        """
        return pulumi.get(self, "face_crops")

    @face_crops.setter
    def face_crops(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationFaceCropArgs']]):
        pulumi.set(self, "face_crops", value)

    @property
    @pulumi.getter(name="featureCrops")
    def feature_crops(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationFeatureCropArgs']]:
        """
        Identifies prominent features of the source image, then crops around as many of these features as possible relative to the specified `width` and `height` values.
        """
        return pulumi.get(self, "feature_crops")

    @feature_crops.setter
    def feature_crops(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationFeatureCropArgs']]):
        pulumi.set(self, "feature_crops", value)

    @property
    @pulumi.getter(name="fitAndFills")
    def fit_and_fills(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationFitAndFillArgs']]:
        """
        Resizes an image to fit within a specific size box and then uses a fill of that same image to cover any transparent space at the edges. By default the fill image has a Blur transformation with a sigma value of 8 applied, but the transformation can be customized using the fillTransformation parameter.
        """
        return pulumi.get(self, "fit_and_fills")

    @fit_and_fills.setter
    def fit_and_fills(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationFitAndFillArgs']]):
        pulumi.set(self, "fit_and_fills", value)

    @property
    @pulumi.getter
    def goops(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationGoopArgs']]:
        """
        Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
        """
        return pulumi.get(self, "goops")

    @goops.setter
    def goops(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationGoopArgs']]):
        pulumi.set(self, "goops", value)

    @property
    @pulumi.getter
    def grayscales(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationGrayscaleArgs']]:
        """
        Restricts image color to shades of gray only.
        """
        return pulumi.get(self, "grayscales")

    @grayscales.setter
    def grayscales(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationGrayscaleArgs']]):
        pulumi.set(self, "grayscales", value)

    @property
    @pulumi.getter
    def hsls(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationHslArgs']]:
        """
        Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
        """
        return pulumi.get(self, "hsls")

    @hsls.setter
    def hsls(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationHslArgs']]):
        pulumi.set(self, "hsls", value)

    @property
    @pulumi.getter
    def hsvs(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationHsvArgs']]:
        """
        Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
        """
        return pulumi.get(self, "hsvs")

    @hsvs.setter
    def hsvs(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationHsvArgs']]):
        pulumi.set(self, "hsvs", value)

    @property
    @pulumi.getter(name="ifDimensions")
    def if_dimensions(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationIfDimensionArgs']]:
        return pulumi.get(self, "if_dimensions")

    @if_dimensions.setter
    def if_dimensions(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationIfDimensionArgs']]):
        pulumi.set(self, "if_dimensions", value)

    @property
    @pulumi.getter(name="ifOrientations")
    def if_orientations(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationIfOrientationArgs']]:
        return pulumi.get(self, "if_orientations")

    @if_orientations.setter
    def if_orientations(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationIfOrientationArgs']]):
        pulumi.set(self, "if_orientations", value)

    @property
    @pulumi.getter(name="imQueries")
    def im_queries(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationImQueryArgs']]:
        """
        Apply artistic transformations to images quickly and dynamically by specifying transformations with a query string appendedto the image URL.
        """
        return pulumi.get(self, "im_queries")

    @im_queries.setter
    def im_queries(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationImQueryArgs']]):
        pulumi.set(self, "im_queries", value)

    @property
    @pulumi.getter(name="maxColors")
    def max_colors(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationMaxColorArgs']]:
        """
        Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
        """
        return pulumi.get(self, "max_colors")

    @max_colors.setter
    def max_colors(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationMaxColorArgs']]):
        pulumi.set(self, "max_colors", value)

    @property
    @pulumi.getter
    def mirrors(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationMirrorArgs']]:
        """
        Flips an image horizontally, vertically, or both.
        """
        return pulumi.get(self, "mirrors")

    @mirrors.setter
    def mirrors(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationMirrorArgs']]):
        pulumi.set(self, "mirrors", value)

    @property
    @pulumi.getter(name="monoHues")
    def mono_hues(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationMonoHueArgs']]:
        """
        Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
        """
        return pulumi.get(self, "mono_hues")

    @mono_hues.setter
    def mono_hues(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationMonoHueArgs']]):
        pulumi.set(self, "mono_hues", value)

    @property
    @pulumi.getter
    def opacities(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationOpacityArgs']]:
        """
        Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
        """
        return pulumi.get(self, "opacities")

    @opacities.setter
    def opacities(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationOpacityArgs']]):
        pulumi.set(self, "opacities", value)

    @property
    @pulumi.getter(name="regionOfInterestCrops")
    def region_of_interest_crops(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs']]:
        """
        Crops to a region around a specified area of interest relative to the specified `width` and `height` values.
        """
        return pulumi.get(self, "region_of_interest_crops")

    @region_of_interest_crops.setter
    def region_of_interest_crops(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs']]):
        pulumi.set(self, "region_of_interest_crops", value)

    @property
    @pulumi.getter(name="relativeCrops")
    def relative_crops(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRelativeCropArgs']]:
        """
        Shrinks or expands an image relative to the image's specified dimensions. Image and Video Manager fills the expanded areas with transparency. Positive values shrink the side, while negative values expand it.
        """
        return pulumi.get(self, "relative_crops")

    @relative_crops.setter
    def relative_crops(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRelativeCropArgs']]):
        pulumi.set(self, "relative_crops", value)

    @property
    @pulumi.getter(name="removeColors")
    def remove_colors(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRemoveColorArgs']]:
        """
        Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
        """
        return pulumi.get(self, "remove_colors")

    @remove_colors.setter
    def remove_colors(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRemoveColorArgs']]):
        pulumi.set(self, "remove_colors", value)

    @property
    @pulumi.getter
    def resizes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationResizeArgs']]:
        """
        Resizes an image to a particular, absolute dimension. If you don't enter a `width` or a `height`, the image is resized with the `fit` aspect preservation mode, which selects a value for the missing dimension that preserves the image's aspect.
        """
        return pulumi.get(self, "resizes")

    @resizes.setter
    def resizes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationResizeArgs']]):
        pulumi.set(self, "resizes", value)

    @property
    @pulumi.getter
    def rotates(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRotateArgs']]:
        """
        Rotate the image around its center by indicating the degrees of rotation.
        """
        return pulumi.get(self, "rotates")

    @rotates.setter
    def rotates(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRotateArgs']]):
        pulumi.set(self, "rotates", value)

    @property
    @pulumi.getter
    def scales(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationScaleArgs']]:
        """
        Changes the image's size to different dimensions relative to its starting size.
        """
        return pulumi.get(self, "scales")

    @scales.setter
    def scales(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationScaleArgs']]):
        pulumi.set(self, "scales", value)

    @property
    @pulumi.getter
    def shears(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationShearsArgs']]:
        """
        Slants an image into a parallelogram, as a percent of the starting dimension as represented in decimal format. You need to specify at least one axis property. Transparent pixels fill empty areas around the sheared image as needed, so it's often useful to use a `BackgroundColor` transformation for these areas.
        """
        return pulumi.get(self, "shears")

    @shears.setter
    def shears(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationShearsArgs']]):
        pulumi.set(self, "shears", value)

    @property
    @pulumi.getter(name="smartCrops")
    def smart_crops(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationSmartCropArgs']]:
        """
        Crops around whatever is most important in the image, to a region around a specified area of interest relative to the specified `width` and `height` values. The crop detects any faces present, otherwise features.
        """
        return pulumi.get(self, "smart_crops")

    @smart_crops.setter
    def smart_crops(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationSmartCropArgs']]):
        pulumi.set(self, "smart_crops", value)

    @property
    @pulumi.getter
    def trims(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationTrimArgs']]:
        """
        Automatically crops uniform backgrounds from the edges of an image.
        """
        return pulumi.get(self, "trims")

    @trims.setter
    def trims(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationTrimArgs']]):
        pulumi.set(self, "trims", value)

    @property
    @pulumi.getter(name="unsharpMasks")
    def unsharp_masks(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs']]:
        """
        Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
        """
        return pulumi.get(self, "unsharp_masks")

    @unsharp_masks.setter
    def unsharp_masks(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs']]):
        pulumi.set(self, "unsharp_masks", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationAppendArgsDict(TypedDict):
        image: 'GetImagingPolicyImagePolicyTransformationAppendImageArgsDict'
        gravity: NotRequired[builtins.str]
        """
        Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
        """
        gravity_priority: NotRequired[builtins.str]
        """
        Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
        """
        gravity_priority_var: NotRequired[builtins.str]
        """
        Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
        """
        gravity_var: NotRequired[builtins.str]
        """
        Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
        """
        preserve_minor_dimension: NotRequired[builtins.str]
        """
        Whether to preserve the source image's minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &times; 100 pixels. The dimensions of the appending `image` are 50 &times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image's minor dimension vertical. To preserve the source image's minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image's minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &times; 100 pixels.
        """
        preserve_minor_dimension_var: NotRequired[builtins.str]
        """
        Whether to preserve the source image's minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &times; 100 pixels. The dimensions of the appending `image` are 50 &times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image's minor dimension vertical. To preserve the source image's minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image's minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &times; 100 pixels.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationAppendArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationAppendArgs:
    def __init__(__self__, *,
                 image: 'GetImagingPolicyImagePolicyTransformationAppendImageArgs',
                 gravity: Optional[builtins.str] = None,
                 gravity_priority: Optional[builtins.str] = None,
                 gravity_priority_var: Optional[builtins.str] = None,
                 gravity_var: Optional[builtins.str] = None,
                 preserve_minor_dimension: Optional[builtins.str] = None,
                 preserve_minor_dimension_var: Optional[builtins.str] = None):
        """
        :param builtins.str gravity: Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
        :param builtins.str gravity_priority: Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
        :param builtins.str gravity_priority_var: Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
        :param builtins.str gravity_var: Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
        :param builtins.str preserve_minor_dimension: Whether to preserve the source image's minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &times; 100 pixels. The dimensions of the appending `image` are 50 &times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image's minor dimension vertical. To preserve the source image's minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image's minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &times; 100 pixels.
        :param builtins.str preserve_minor_dimension_var: Whether to preserve the source image's minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &times; 100 pixels. The dimensions of the appending `image` are 50 &times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image's minor dimension vertical. To preserve the source image's minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image's minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &times; 100 pixels.
        """
        pulumi.set(__self__, "image", image)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_priority is not None:
            pulumi.set(__self__, "gravity_priority", gravity_priority)
        if gravity_priority_var is not None:
            pulumi.set(__self__, "gravity_priority_var", gravity_priority_var)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if preserve_minor_dimension is not None:
            pulumi.set(__self__, "preserve_minor_dimension", preserve_minor_dimension)
        if preserve_minor_dimension_var is not None:
            pulumi.set(__self__, "preserve_minor_dimension_var", preserve_minor_dimension_var)

    @property
    @pulumi.getter
    def image(self) -> 'GetImagingPolicyImagePolicyTransformationAppendImageArgs':
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: 'GetImagingPolicyImagePolicyTransformationAppendImageArgs'):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def gravity(self) -> Optional[builtins.str]:
        """
        Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
        """
        return pulumi.get(self, "gravity")

    @gravity.setter
    def gravity(self, value: Optional[builtins.str]):
        pulumi.set(self, "gravity", value)

    @property
    @pulumi.getter(name="gravityPriority")
    def gravity_priority(self) -> Optional[builtins.str]:
        """
        Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
        """
        return pulumi.get(self, "gravity_priority")

    @gravity_priority.setter
    def gravity_priority(self, value: Optional[builtins.str]):
        pulumi.set(self, "gravity_priority", value)

    @property
    @pulumi.getter(name="gravityPriorityVar")
    def gravity_priority_var(self) -> Optional[builtins.str]:
        """
        Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
        """
        return pulumi.get(self, "gravity_priority_var")

    @gravity_priority_var.setter
    def gravity_priority_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "gravity_priority_var", value)

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[builtins.str]:
        """
        Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
        """
        return pulumi.get(self, "gravity_var")

    @gravity_var.setter
    def gravity_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "gravity_var", value)

    @property
    @pulumi.getter(name="preserveMinorDimension")
    def preserve_minor_dimension(self) -> Optional[builtins.str]:
        """
        Whether to preserve the source image's minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &times; 100 pixels. The dimensions of the appending `image` are 50 &times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image's minor dimension vertical. To preserve the source image's minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image's minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &times; 100 pixels.
        """
        return pulumi.get(self, "preserve_minor_dimension")

    @preserve_minor_dimension.setter
    def preserve_minor_dimension(self, value: Optional[builtins.str]):
        pulumi.set(self, "preserve_minor_dimension", value)

    @property
    @pulumi.getter(name="preserveMinorDimensionVar")
    def preserve_minor_dimension_var(self) -> Optional[builtins.str]:
        """
        Whether to preserve the source image's minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &times; 100 pixels. The dimensions of the appending `image` are 50 &times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image's minor dimension vertical. To preserve the source image's minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image's minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &times; 100 pixels.
        """
        return pulumi.get(self, "preserve_minor_dimension_var")

    @preserve_minor_dimension_var.setter
    def preserve_minor_dimension_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "preserve_minor_dimension_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationAppendImageArgsDict(TypedDict):
        box_images: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageBoxImageArgsDict']]
        """
        A rectangular box, with a specified color and applied transformation.
        """
        circle_images: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageCircleImageArgsDict']]
        """
        A rectangular box, with a specified color and applied transformation.
        """
        text_images: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageTextImageArgsDict']]
        """
        A snippet of text. Defines font family and size, fill color, and outline stroke width and color.
        """
        url_images: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageUrlImageArgsDict']]
        """
        An image loaded from a URL.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationAppendImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationAppendImageArgs:
    def __init__(__self__, *,
                 box_images: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageBoxImageArgs']] = None,
                 circle_images: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageCircleImageArgs']] = None,
                 text_images: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageTextImageArgs']] = None,
                 url_images: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageUrlImageArgs']] = None):
        """
        :param Sequence['GetImagingPolicyImagePolicyTransformationAppendImageBoxImageArgs'] box_images: A rectangular box, with a specified color and applied transformation.
        :param Sequence['GetImagingPolicyImagePolicyTransformationAppendImageCircleImageArgs'] circle_images: A rectangular box, with a specified color and applied transformation.
        :param Sequence['GetImagingPolicyImagePolicyTransformationAppendImageTextImageArgs'] text_images: A snippet of text. Defines font family and size, fill color, and outline stroke width and color.
        :param Sequence['GetImagingPolicyImagePolicyTransformationAppendImageUrlImageArgs'] url_images: An image loaded from a URL.
        """
        if box_images is not None:
            pulumi.set(__self__, "box_images", box_images)
        if circle_images is not None:
            pulumi.set(__self__, "circle_images", circle_images)
        if text_images is not None:
            pulumi.set(__self__, "text_images", text_images)
        if url_images is not None:
            pulumi.set(__self__, "url_images", url_images)

    @property
    @pulumi.getter(name="boxImages")
    def box_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageBoxImageArgs']]:
        """
        A rectangular box, with a specified color and applied transformation.
        """
        return pulumi.get(self, "box_images")

    @box_images.setter
    def box_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageBoxImageArgs']]):
        pulumi.set(self, "box_images", value)

    @property
    @pulumi.getter(name="circleImages")
    def circle_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageCircleImageArgs']]:
        """
        A rectangular box, with a specified color and applied transformation.
        """
        return pulumi.get(self, "circle_images")

    @circle_images.setter
    def circle_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageCircleImageArgs']]):
        pulumi.set(self, "circle_images", value)

    @property
    @pulumi.getter(name="textImages")
    def text_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageTextImageArgs']]:
        """
        A snippet of text. Defines font family and size, fill color, and outline stroke width and color.
        """
        return pulumi.get(self, "text_images")

    @text_images.setter
    def text_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageTextImageArgs']]):
        pulumi.set(self, "text_images", value)

    @property
    @pulumi.getter(name="urlImages")
    def url_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageUrlImageArgs']]:
        """
        An image loaded from a URL.
        """
        return pulumi.get(self, "url_images")

    @url_images.setter
    def url_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageUrlImageArgs']]):
        pulumi.set(self, "url_images", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationAppendImageBoxImageArgsDict(TypedDict):
        color: NotRequired[builtins.str]
        """
        The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        color_var: NotRequired[builtins.str]
        """
        The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        height: NotRequired[builtins.str]
        """
        The height of the box in pixels.
        """
        height_var: NotRequired[builtins.str]
        """
        The height of the box in pixels.
        """
        transformation: NotRequired['GetImagingPolicyImagePolicyTransformationArgsDict']
        width: NotRequired[builtins.str]
        """
        The width of the box in pixels.
        """
        width_var: NotRequired[builtins.str]
        """
        The width of the box in pixels.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationAppendImageBoxImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationAppendImageBoxImageArgs:
    def __init__(__self__, *,
                 color: Optional[builtins.str] = None,
                 color_var: Optional[builtins.str] = None,
                 height: Optional[builtins.str] = None,
                 height_var: Optional[builtins.str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 width: Optional[builtins.str] = None,
                 width_var: Optional[builtins.str] = None):
        """
        :param builtins.str color: The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        :param builtins.str color_var: The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        :param builtins.str height: The height of the box in pixels.
        :param builtins.str height_var: The height of the box in pixels.
        :param builtins.str width: The width of the box in pixels.
        :param builtins.str width_var: The width of the box in pixels.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[builtins.str]:
        """
        The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[builtins.str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[builtins.str]:
        """
        The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "color_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[builtins.str]:
        """
        The height of the box in pixels.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[builtins.str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[builtins.str]:
        """
        The height of the box in pixels.
        """
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.str]:
        """
        The width of the box in pixels.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[builtins.str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[builtins.str]:
        """
        The width of the box in pixels.
        """
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "width_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationAppendImageCircleImageArgsDict(TypedDict):
        color: NotRequired[builtins.str]
        """
        The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        color_var: NotRequired[builtins.str]
        """
        The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        diameter: NotRequired[builtins.str]
        """
        The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        """
        diameter_var: NotRequired[builtins.str]
        """
        The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        """
        transformation: NotRequired['GetImagingPolicyImagePolicyTransformationArgsDict']
        width: NotRequired[builtins.str]
        """
        The width of the box in pixels.
        """
        width_var: NotRequired[builtins.str]
        """
        The width of the box in pixels.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationAppendImageCircleImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationAppendImageCircleImageArgs:
    def __init__(__self__, *,
                 color: Optional[builtins.str] = None,
                 color_var: Optional[builtins.str] = None,
                 diameter: Optional[builtins.str] = None,
                 diameter_var: Optional[builtins.str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 width: Optional[builtins.str] = None,
                 width_var: Optional[builtins.str] = None):
        """
        :param builtins.str color: The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        :param builtins.str color_var: The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        :param builtins.str diameter: The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        :param builtins.str diameter_var: The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        :param builtins.str width: The width of the box in pixels.
        :param builtins.str width_var: The width of the box in pixels.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if diameter is not None:
            pulumi.set(__self__, "diameter", diameter)
        if diameter_var is not None:
            pulumi.set(__self__, "diameter_var", diameter_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[builtins.str]:
        """
        The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[builtins.str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[builtins.str]:
        """
        The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "color_var", value)

    @property
    @pulumi.getter
    def diameter(self) -> Optional[builtins.str]:
        """
        The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        """
        return pulumi.get(self, "diameter")

    @diameter.setter
    def diameter(self, value: Optional[builtins.str]):
        pulumi.set(self, "diameter", value)

    @property
    @pulumi.getter(name="diameterVar")
    def diameter_var(self) -> Optional[builtins.str]:
        """
        The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        """
        return pulumi.get(self, "diameter_var")

    @diameter_var.setter
    def diameter_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "diameter_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.str]:
        """
        The width of the box in pixels.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[builtins.str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[builtins.str]:
        """
        The width of the box in pixels.
        """
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "width_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationAppendImageTextImageArgsDict(TypedDict):
        fill: NotRequired[builtins.str]
        """
        The main fill color of the text.
        """
        fill_var: NotRequired[builtins.str]
        """
        The main fill color of the text.
        """
        size: NotRequired[builtins.str]
        """
        The size in pixels to render the text.
        """
        size_var: NotRequired[builtins.str]
        """
        The size in pixels to render the text.
        """
        stroke: NotRequired[builtins.str]
        """
        The color for the outline of the text.
        """
        stroke_size: NotRequired[builtins.str]
        """
        The thickness in points for the outline of the text.
        """
        stroke_size_var: NotRequired[builtins.str]
        """
        The thickness in points for the outline of the text.
        """
        stroke_var: NotRequired[builtins.str]
        """
        The color for the outline of the text.
        """
        text: NotRequired[builtins.str]
        """
        The line of text to render.
        """
        text_var: NotRequired[builtins.str]
        """
        The line of text to render.
        """
        transformation: NotRequired['GetImagingPolicyImagePolicyTransformationArgsDict']
        typeface: NotRequired[builtins.str]
        """
        The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        """
        typeface_var: NotRequired[builtins.str]
        """
        The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationAppendImageTextImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationAppendImageTextImageArgs:
    def __init__(__self__, *,
                 fill: Optional[builtins.str] = None,
                 fill_var: Optional[builtins.str] = None,
                 size: Optional[builtins.str] = None,
                 size_var: Optional[builtins.str] = None,
                 stroke: Optional[builtins.str] = None,
                 stroke_size: Optional[builtins.str] = None,
                 stroke_size_var: Optional[builtins.str] = None,
                 stroke_var: Optional[builtins.str] = None,
                 text: Optional[builtins.str] = None,
                 text_var: Optional[builtins.str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 typeface: Optional[builtins.str] = None,
                 typeface_var: Optional[builtins.str] = None):
        """
        :param builtins.str fill: The main fill color of the text.
        :param builtins.str fill_var: The main fill color of the text.
        :param builtins.str size: The size in pixels to render the text.
        :param builtins.str size_var: The size in pixels to render the text.
        :param builtins.str stroke: The color for the outline of the text.
        :param builtins.str stroke_size: The thickness in points for the outline of the text.
        :param builtins.str stroke_size_var: The thickness in points for the outline of the text.
        :param builtins.str stroke_var: The color for the outline of the text.
        :param builtins.str text: The line of text to render.
        :param builtins.str text_var: The line of text to render.
        :param builtins.str typeface: The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        :param builtins.str typeface_var: The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        """
        if fill is not None:
            pulumi.set(__self__, "fill", fill)
        if fill_var is not None:
            pulumi.set(__self__, "fill_var", fill_var)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_var is not None:
            pulumi.set(__self__, "size_var", size_var)
        if stroke is not None:
            pulumi.set(__self__, "stroke", stroke)
        if stroke_size is not None:
            pulumi.set(__self__, "stroke_size", stroke_size)
        if stroke_size_var is not None:
            pulumi.set(__self__, "stroke_size_var", stroke_size_var)
        if stroke_var is not None:
            pulumi.set(__self__, "stroke_var", stroke_var)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if text_var is not None:
            pulumi.set(__self__, "text_var", text_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if typeface is not None:
            pulumi.set(__self__, "typeface", typeface)
        if typeface_var is not None:
            pulumi.set(__self__, "typeface_var", typeface_var)

    @property
    @pulumi.getter
    def fill(self) -> Optional[builtins.str]:
        """
        The main fill color of the text.
        """
        return pulumi.get(self, "fill")

    @fill.setter
    def fill(self, value: Optional[builtins.str]):
        pulumi.set(self, "fill", value)

    @property
    @pulumi.getter(name="fillVar")
    def fill_var(self) -> Optional[builtins.str]:
        """
        The main fill color of the text.
        """
        return pulumi.get(self, "fill_var")

    @fill_var.setter
    def fill_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "fill_var", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.str]:
        """
        The size in pixels to render the text.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[builtins.str]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeVar")
    def size_var(self) -> Optional[builtins.str]:
        """
        The size in pixels to render the text.
        """
        return pulumi.get(self, "size_var")

    @size_var.setter
    def size_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "size_var", value)

    @property
    @pulumi.getter
    def stroke(self) -> Optional[builtins.str]:
        """
        The color for the outline of the text.
        """
        return pulumi.get(self, "stroke")

    @stroke.setter
    def stroke(self, value: Optional[builtins.str]):
        pulumi.set(self, "stroke", value)

    @property
    @pulumi.getter(name="strokeSize")
    def stroke_size(self) -> Optional[builtins.str]:
        """
        The thickness in points for the outline of the text.
        """
        return pulumi.get(self, "stroke_size")

    @stroke_size.setter
    def stroke_size(self, value: Optional[builtins.str]):
        pulumi.set(self, "stroke_size", value)

    @property
    @pulumi.getter(name="strokeSizeVar")
    def stroke_size_var(self) -> Optional[builtins.str]:
        """
        The thickness in points for the outline of the text.
        """
        return pulumi.get(self, "stroke_size_var")

    @stroke_size_var.setter
    def stroke_size_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "stroke_size_var", value)

    @property
    @pulumi.getter(name="strokeVar")
    def stroke_var(self) -> Optional[builtins.str]:
        """
        The color for the outline of the text.
        """
        return pulumi.get(self, "stroke_var")

    @stroke_var.setter
    def stroke_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "stroke_var", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[builtins.str]:
        """
        The line of text to render.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[builtins.str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="textVar")
    def text_var(self) -> Optional[builtins.str]:
        """
        The line of text to render.
        """
        return pulumi.get(self, "text_var")

    @text_var.setter
    def text_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "text_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def typeface(self) -> Optional[builtins.str]:
        """
        The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        """
        return pulumi.get(self, "typeface")

    @typeface.setter
    def typeface(self, value: Optional[builtins.str]):
        pulumi.set(self, "typeface", value)

    @property
    @pulumi.getter(name="typefaceVar")
    def typeface_var(self) -> Optional[builtins.str]:
        """
        The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        """
        return pulumi.get(self, "typeface_var")

    @typeface_var.setter
    def typeface_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "typeface_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationAppendImageUrlImageArgsDict(TypedDict):
        transformation: NotRequired['GetImagingPolicyImagePolicyTransformationArgsDict']
        url: NotRequired[builtins.str]
        """
        The URL of the image.
        """
        url_var: NotRequired[builtins.str]
        """
        The URL of the image.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationAppendImageUrlImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationAppendImageUrlImageArgs:
    def __init__(__self__, *,
                 transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 url: Optional[builtins.str] = None,
                 url_var: Optional[builtins.str] = None):
        """
        :param builtins.str url: The URL of the image.
        :param builtins.str url_var: The URL of the image.
        """
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if url_var is not None:
            pulumi.set(__self__, "url_var", url_var)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[builtins.str]:
        """
        The URL of the image.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[builtins.str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="urlVar")
    def url_var(self) -> Optional[builtins.str]:
        """
        The URL of the image.
        """
        return pulumi.get(self, "url_var")

    @url_var.setter
    def url_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "url_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationAspectCropArgsDict(TypedDict):
        allow_expansion: NotRequired[builtins.str]
        """
        Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
        """
        allow_expansion_var: NotRequired[builtins.str]
        """
        Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
        """
        height: NotRequired[builtins.str]
        """
        The height term of the aspect ratio to crop.
        """
        height_var: NotRequired[builtins.str]
        """
        The height term of the aspect ratio to crop.
        """
        width: NotRequired[builtins.str]
        """
        The width term of the aspect ratio to crop.
        """
        width_var: NotRequired[builtins.str]
        """
        The width term of the aspect ratio to crop.
        """
        x_position: NotRequired[builtins.str]
        """
        Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
        """
        x_position_var: NotRequired[builtins.str]
        """
        Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
        """
        y_position: NotRequired[builtins.str]
        """
        Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
        """
        y_position_var: NotRequired[builtins.str]
        """
        Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationAspectCropArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationAspectCropArgs:
    def __init__(__self__, *,
                 allow_expansion: Optional[builtins.str] = None,
                 allow_expansion_var: Optional[builtins.str] = None,
                 height: Optional[builtins.str] = None,
                 height_var: Optional[builtins.str] = None,
                 width: Optional[builtins.str] = None,
                 width_var: Optional[builtins.str] = None,
                 x_position: Optional[builtins.str] = None,
                 x_position_var: Optional[builtins.str] = None,
                 y_position: Optional[builtins.str] = None,
                 y_position_var: Optional[builtins.str] = None):
        """
        :param builtins.str allow_expansion: Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
        :param builtins.str allow_expansion_var: Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
        :param builtins.str height: The height term of the aspect ratio to crop.
        :param builtins.str height_var: The height term of the aspect ratio to crop.
        :param builtins.str width: The width term of the aspect ratio to crop.
        :param builtins.str width_var: The width term of the aspect ratio to crop.
        :param builtins.str x_position: Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
        :param builtins.str x_position_var: Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
        :param builtins.str y_position: Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
        :param builtins.str y_position_var: Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
        """
        if allow_expansion is not None:
            pulumi.set(__self__, "allow_expansion", allow_expansion)
        if allow_expansion_var is not None:
            pulumi.set(__self__, "allow_expansion_var", allow_expansion_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)
        if x_position is not None:
            pulumi.set(__self__, "x_position", x_position)
        if x_position_var is not None:
            pulumi.set(__self__, "x_position_var", x_position_var)
        if y_position is not None:
            pulumi.set(__self__, "y_position", y_position)
        if y_position_var is not None:
            pulumi.set(__self__, "y_position_var", y_position_var)

    @property
    @pulumi.getter(name="allowExpansion")
    def allow_expansion(self) -> Optional[builtins.str]:
        """
        Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
        """
        return pulumi.get(self, "allow_expansion")

    @allow_expansion.setter
    def allow_expansion(self, value: Optional[builtins.str]):
        pulumi.set(self, "allow_expansion", value)

    @property
    @pulumi.getter(name="allowExpansionVar")
    def allow_expansion_var(self) -> Optional[builtins.str]:
        """
        Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
        """
        return pulumi.get(self, "allow_expansion_var")

    @allow_expansion_var.setter
    def allow_expansion_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "allow_expansion_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[builtins.str]:
        """
        The height term of the aspect ratio to crop.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[builtins.str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[builtins.str]:
        """
        The height term of the aspect ratio to crop.
        """
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.str]:
        """
        The width term of the aspect ratio to crop.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[builtins.str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[builtins.str]:
        """
        The width term of the aspect ratio to crop.
        """
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "width_var", value)

    @property
    @pulumi.getter(name="xPosition")
    def x_position(self) -> Optional[builtins.str]:
        """
        Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
        """
        return pulumi.get(self, "x_position")

    @x_position.setter
    def x_position(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_position", value)

    @property
    @pulumi.getter(name="xPositionVar")
    def x_position_var(self) -> Optional[builtins.str]:
        """
        Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
        """
        return pulumi.get(self, "x_position_var")

    @x_position_var.setter
    def x_position_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_position_var", value)

    @property
    @pulumi.getter(name="yPosition")
    def y_position(self) -> Optional[builtins.str]:
        """
        Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
        """
        return pulumi.get(self, "y_position")

    @y_position.setter
    def y_position(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_position", value)

    @property
    @pulumi.getter(name="yPositionVar")
    def y_position_var(self) -> Optional[builtins.str]:
        """
        Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
        """
        return pulumi.get(self, "y_position_var")

    @y_position_var.setter
    def y_position_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_position_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationBackgroundColorArgsDict(TypedDict):
        color: NotRequired[builtins.str]
        """
        The hexadecimal CSS color value for the background.
        """
        color_var: NotRequired[builtins.str]
        """
        The hexadecimal CSS color value for the background.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationBackgroundColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationBackgroundColorArgs:
    def __init__(__self__, *,
                 color: Optional[builtins.str] = None,
                 color_var: Optional[builtins.str] = None):
        """
        :param builtins.str color: The hexadecimal CSS color value for the background.
        :param builtins.str color_var: The hexadecimal CSS color value for the background.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[builtins.str]:
        """
        The hexadecimal CSS color value for the background.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[builtins.str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[builtins.str]:
        """
        The hexadecimal CSS color value for the background.
        """
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "color_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationBlurArgsDict(TypedDict):
        sigma: NotRequired[builtins.str]
        """
        The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
        """
        sigma_var: NotRequired[builtins.str]
        """
        The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationBlurArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationBlurArgs:
    def __init__(__self__, *,
                 sigma: Optional[builtins.str] = None,
                 sigma_var: Optional[builtins.str] = None):
        """
        :param builtins.str sigma: The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
        :param builtins.str sigma_var: The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
        """
        if sigma is not None:
            pulumi.set(__self__, "sigma", sigma)
        if sigma_var is not None:
            pulumi.set(__self__, "sigma_var", sigma_var)

    @property
    @pulumi.getter
    def sigma(self) -> Optional[builtins.str]:
        """
        The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
        """
        return pulumi.get(self, "sigma")

    @sigma.setter
    def sigma(self, value: Optional[builtins.str]):
        pulumi.set(self, "sigma", value)

    @property
    @pulumi.getter(name="sigmaVar")
    def sigma_var(self) -> Optional[builtins.str]:
        """
        The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
        """
        return pulumi.get(self, "sigma_var")

    @sigma_var.setter
    def sigma_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "sigma_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationChromaKeyArgsDict(TypedDict):
        hue: NotRequired[builtins.str]
        """
        The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
        """
        hue_feather: NotRequired[builtins.str]
        """
        How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
        """
        hue_feather_var: NotRequired[builtins.str]
        """
        How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
        """
        hue_tolerance: NotRequired[builtins.str]
        """
        How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
        """
        hue_tolerance_var: NotRequired[builtins.str]
        """
        How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
        """
        hue_var: NotRequired[builtins.str]
        """
        The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
        """
        lightness_feather: NotRequired[builtins.str]
        """
        How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
        """
        lightness_feather_var: NotRequired[builtins.str]
        """
        How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
        """
        lightness_tolerance: NotRequired[builtins.str]
        """
        How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
        """
        lightness_tolerance_var: NotRequired[builtins.str]
        """
        How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
        """
        saturation_feather: NotRequired[builtins.str]
        """
        How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
        """
        saturation_feather_var: NotRequired[builtins.str]
        """
        How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
        """
        saturation_tolerance: NotRequired[builtins.str]
        """
        How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
        """
        saturation_tolerance_var: NotRequired[builtins.str]
        """
        How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationChromaKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationChromaKeyArgs:
    def __init__(__self__, *,
                 hue: Optional[builtins.str] = None,
                 hue_feather: Optional[builtins.str] = None,
                 hue_feather_var: Optional[builtins.str] = None,
                 hue_tolerance: Optional[builtins.str] = None,
                 hue_tolerance_var: Optional[builtins.str] = None,
                 hue_var: Optional[builtins.str] = None,
                 lightness_feather: Optional[builtins.str] = None,
                 lightness_feather_var: Optional[builtins.str] = None,
                 lightness_tolerance: Optional[builtins.str] = None,
                 lightness_tolerance_var: Optional[builtins.str] = None,
                 saturation_feather: Optional[builtins.str] = None,
                 saturation_feather_var: Optional[builtins.str] = None,
                 saturation_tolerance: Optional[builtins.str] = None,
                 saturation_tolerance_var: Optional[builtins.str] = None):
        """
        :param builtins.str hue: The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
        :param builtins.str hue_feather: How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
        :param builtins.str hue_feather_var: How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
        :param builtins.str hue_tolerance: How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
        :param builtins.str hue_tolerance_var: How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
        :param builtins.str hue_var: The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
        :param builtins.str lightness_feather: How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
        :param builtins.str lightness_feather_var: How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
        :param builtins.str lightness_tolerance: How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
        :param builtins.str lightness_tolerance_var: How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
        :param builtins.str saturation_feather: How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
        :param builtins.str saturation_feather_var: How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
        :param builtins.str saturation_tolerance: How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
        :param builtins.str saturation_tolerance_var: How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
        """
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_feather is not None:
            pulumi.set(__self__, "hue_feather", hue_feather)
        if hue_feather_var is not None:
            pulumi.set(__self__, "hue_feather_var", hue_feather_var)
        if hue_tolerance is not None:
            pulumi.set(__self__, "hue_tolerance", hue_tolerance)
        if hue_tolerance_var is not None:
            pulumi.set(__self__, "hue_tolerance_var", hue_tolerance_var)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if lightness_feather is not None:
            pulumi.set(__self__, "lightness_feather", lightness_feather)
        if lightness_feather_var is not None:
            pulumi.set(__self__, "lightness_feather_var", lightness_feather_var)
        if lightness_tolerance is not None:
            pulumi.set(__self__, "lightness_tolerance", lightness_tolerance)
        if lightness_tolerance_var is not None:
            pulumi.set(__self__, "lightness_tolerance_var", lightness_tolerance_var)
        if saturation_feather is not None:
            pulumi.set(__self__, "saturation_feather", saturation_feather)
        if saturation_feather_var is not None:
            pulumi.set(__self__, "saturation_feather_var", saturation_feather_var)
        if saturation_tolerance is not None:
            pulumi.set(__self__, "saturation_tolerance", saturation_tolerance)
        if saturation_tolerance_var is not None:
            pulumi.set(__self__, "saturation_tolerance_var", saturation_tolerance_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[builtins.str]:
        """
        The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
        """
        return pulumi.get(self, "hue")

    @hue.setter
    def hue(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue", value)

    @property
    @pulumi.getter(name="hueFeather")
    def hue_feather(self) -> Optional[builtins.str]:
        """
        How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
        """
        return pulumi.get(self, "hue_feather")

    @hue_feather.setter
    def hue_feather(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue_feather", value)

    @property
    @pulumi.getter(name="hueFeatherVar")
    def hue_feather_var(self) -> Optional[builtins.str]:
        """
        How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
        """
        return pulumi.get(self, "hue_feather_var")

    @hue_feather_var.setter
    def hue_feather_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue_feather_var", value)

    @property
    @pulumi.getter(name="hueTolerance")
    def hue_tolerance(self) -> Optional[builtins.str]:
        """
        How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
        """
        return pulumi.get(self, "hue_tolerance")

    @hue_tolerance.setter
    def hue_tolerance(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue_tolerance", value)

    @property
    @pulumi.getter(name="hueToleranceVar")
    def hue_tolerance_var(self) -> Optional[builtins.str]:
        """
        How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
        """
        return pulumi.get(self, "hue_tolerance_var")

    @hue_tolerance_var.setter
    def hue_tolerance_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue_tolerance_var", value)

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[builtins.str]:
        """
        The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
        """
        return pulumi.get(self, "hue_var")

    @hue_var.setter
    def hue_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue_var", value)

    @property
    @pulumi.getter(name="lightnessFeather")
    def lightness_feather(self) -> Optional[builtins.str]:
        """
        How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
        """
        return pulumi.get(self, "lightness_feather")

    @lightness_feather.setter
    def lightness_feather(self, value: Optional[builtins.str]):
        pulumi.set(self, "lightness_feather", value)

    @property
    @pulumi.getter(name="lightnessFeatherVar")
    def lightness_feather_var(self) -> Optional[builtins.str]:
        """
        How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
        """
        return pulumi.get(self, "lightness_feather_var")

    @lightness_feather_var.setter
    def lightness_feather_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "lightness_feather_var", value)

    @property
    @pulumi.getter(name="lightnessTolerance")
    def lightness_tolerance(self) -> Optional[builtins.str]:
        """
        How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
        """
        return pulumi.get(self, "lightness_tolerance")

    @lightness_tolerance.setter
    def lightness_tolerance(self, value: Optional[builtins.str]):
        pulumi.set(self, "lightness_tolerance", value)

    @property
    @pulumi.getter(name="lightnessToleranceVar")
    def lightness_tolerance_var(self) -> Optional[builtins.str]:
        """
        How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
        """
        return pulumi.get(self, "lightness_tolerance_var")

    @lightness_tolerance_var.setter
    def lightness_tolerance_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "lightness_tolerance_var", value)

    @property
    @pulumi.getter(name="saturationFeather")
    def saturation_feather(self) -> Optional[builtins.str]:
        """
        How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
        """
        return pulumi.get(self, "saturation_feather")

    @saturation_feather.setter
    def saturation_feather(self, value: Optional[builtins.str]):
        pulumi.set(self, "saturation_feather", value)

    @property
    @pulumi.getter(name="saturationFeatherVar")
    def saturation_feather_var(self) -> Optional[builtins.str]:
        """
        How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
        """
        return pulumi.get(self, "saturation_feather_var")

    @saturation_feather_var.setter
    def saturation_feather_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "saturation_feather_var", value)

    @property
    @pulumi.getter(name="saturationTolerance")
    def saturation_tolerance(self) -> Optional[builtins.str]:
        """
        How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
        """
        return pulumi.get(self, "saturation_tolerance")

    @saturation_tolerance.setter
    def saturation_tolerance(self, value: Optional[builtins.str]):
        pulumi.set(self, "saturation_tolerance", value)

    @property
    @pulumi.getter(name="saturationToleranceVar")
    def saturation_tolerance_var(self) -> Optional[builtins.str]:
        """
        How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
        """
        return pulumi.get(self, "saturation_tolerance_var")

    @saturation_tolerance_var.setter
    def saturation_tolerance_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "saturation_tolerance_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationCompositeArgsDict(TypedDict):
        image: 'GetImagingPolicyImagePolicyTransformationCompositeImageArgsDict'
        gravity: NotRequired[builtins.str]
        """
        Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
        """
        gravity_var: NotRequired[builtins.str]
        """
        Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
        """
        placement: NotRequired[builtins.str]
        """
        Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
        """
        placement_var: NotRequired[builtins.str]
        """
        Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
        """
        scale: NotRequired[builtins.str]
        """
        A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
        """
        scale_dimension: NotRequired[builtins.str]
        """
        The dimension, either `width` or `height`, of the source image to scale.
        """
        scale_dimension_var: NotRequired[builtins.str]
        """
        The dimension, either `width` or `height`, of the source image to scale.
        """
        scale_var: NotRequired[builtins.str]
        """
        A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
        """
        x_position: NotRequired[builtins.str]
        """
        The x-axis position of the image to apply.
        """
        x_position_var: NotRequired[builtins.str]
        """
        The x-axis position of the image to apply.
        """
        y_position: NotRequired[builtins.str]
        """
        The y-axis position of the image to apply.
        """
        y_position_var: NotRequired[builtins.str]
        """
        The y-axis position of the image to apply.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationCompositeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationCompositeArgs:
    def __init__(__self__, *,
                 image: 'GetImagingPolicyImagePolicyTransformationCompositeImageArgs',
                 gravity: Optional[builtins.str] = None,
                 gravity_var: Optional[builtins.str] = None,
                 placement: Optional[builtins.str] = None,
                 placement_var: Optional[builtins.str] = None,
                 scale: Optional[builtins.str] = None,
                 scale_dimension: Optional[builtins.str] = None,
                 scale_dimension_var: Optional[builtins.str] = None,
                 scale_var: Optional[builtins.str] = None,
                 x_position: Optional[builtins.str] = None,
                 x_position_var: Optional[builtins.str] = None,
                 y_position: Optional[builtins.str] = None,
                 y_position_var: Optional[builtins.str] = None):
        """
        :param builtins.str gravity: Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
        :param builtins.str gravity_var: Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
        :param builtins.str placement: Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
        :param builtins.str placement_var: Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
        :param builtins.str scale: A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
        :param builtins.str scale_dimension: The dimension, either `width` or `height`, of the source image to scale.
        :param builtins.str scale_dimension_var: The dimension, either `width` or `height`, of the source image to scale.
        :param builtins.str scale_var: A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
        :param builtins.str x_position: The x-axis position of the image to apply.
        :param builtins.str x_position_var: The x-axis position of the image to apply.
        :param builtins.str y_position: The y-axis position of the image to apply.
        :param builtins.str y_position_var: The y-axis position of the image to apply.
        """
        pulumi.set(__self__, "image", image)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if placement_var is not None:
            pulumi.set(__self__, "placement_var", placement_var)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)
        if scale_dimension is not None:
            pulumi.set(__self__, "scale_dimension", scale_dimension)
        if scale_dimension_var is not None:
            pulumi.set(__self__, "scale_dimension_var", scale_dimension_var)
        if scale_var is not None:
            pulumi.set(__self__, "scale_var", scale_var)
        if x_position is not None:
            pulumi.set(__self__, "x_position", x_position)
        if x_position_var is not None:
            pulumi.set(__self__, "x_position_var", x_position_var)
        if y_position is not None:
            pulumi.set(__self__, "y_position", y_position)
        if y_position_var is not None:
            pulumi.set(__self__, "y_position_var", y_position_var)

    @property
    @pulumi.getter
    def image(self) -> 'GetImagingPolicyImagePolicyTransformationCompositeImageArgs':
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: 'GetImagingPolicyImagePolicyTransformationCompositeImageArgs'):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def gravity(self) -> Optional[builtins.str]:
        """
        Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
        """
        return pulumi.get(self, "gravity")

    @gravity.setter
    def gravity(self, value: Optional[builtins.str]):
        pulumi.set(self, "gravity", value)

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[builtins.str]:
        """
        Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
        """
        return pulumi.get(self, "gravity_var")

    @gravity_var.setter
    def gravity_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "gravity_var", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[builtins.str]:
        """
        Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
        """
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[builtins.str]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="placementVar")
    def placement_var(self) -> Optional[builtins.str]:
        """
        Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
        """
        return pulumi.get(self, "placement_var")

    @placement_var.setter
    def placement_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "placement_var", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[builtins.str]:
        """
        A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
        """
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[builtins.str]):
        pulumi.set(self, "scale", value)

    @property
    @pulumi.getter(name="scaleDimension")
    def scale_dimension(self) -> Optional[builtins.str]:
        """
        The dimension, either `width` or `height`, of the source image to scale.
        """
        return pulumi.get(self, "scale_dimension")

    @scale_dimension.setter
    def scale_dimension(self, value: Optional[builtins.str]):
        pulumi.set(self, "scale_dimension", value)

    @property
    @pulumi.getter(name="scaleDimensionVar")
    def scale_dimension_var(self) -> Optional[builtins.str]:
        """
        The dimension, either `width` or `height`, of the source image to scale.
        """
        return pulumi.get(self, "scale_dimension_var")

    @scale_dimension_var.setter
    def scale_dimension_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "scale_dimension_var", value)

    @property
    @pulumi.getter(name="scaleVar")
    def scale_var(self) -> Optional[builtins.str]:
        """
        A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
        """
        return pulumi.get(self, "scale_var")

    @scale_var.setter
    def scale_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "scale_var", value)

    @property
    @pulumi.getter(name="xPosition")
    def x_position(self) -> Optional[builtins.str]:
        """
        The x-axis position of the image to apply.
        """
        return pulumi.get(self, "x_position")

    @x_position.setter
    def x_position(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_position", value)

    @property
    @pulumi.getter(name="xPositionVar")
    def x_position_var(self) -> Optional[builtins.str]:
        """
        The x-axis position of the image to apply.
        """
        return pulumi.get(self, "x_position_var")

    @x_position_var.setter
    def x_position_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_position_var", value)

    @property
    @pulumi.getter(name="yPosition")
    def y_position(self) -> Optional[builtins.str]:
        """
        The y-axis position of the image to apply.
        """
        return pulumi.get(self, "y_position")

    @y_position.setter
    def y_position(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_position", value)

    @property
    @pulumi.getter(name="yPositionVar")
    def y_position_var(self) -> Optional[builtins.str]:
        """
        The y-axis position of the image to apply.
        """
        return pulumi.get(self, "y_position_var")

    @y_position_var.setter
    def y_position_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_position_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationCompositeImageArgsDict(TypedDict):
        box_images: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageArgsDict']]
        """
        A rectangular box, with a specified color and applied transformation.
        """
        circle_images: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgsDict']]
        """
        A rectangular box, with a specified color and applied transformation.
        """
        text_images: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageTextImageArgsDict']]
        """
        A snippet of text. Defines font family and size, fill color, and outline stroke width and color.
        """
        url_images: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageArgsDict']]
        """
        An image loaded from a URL.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationCompositeImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationCompositeImageArgs:
    def __init__(__self__, *,
                 box_images: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageArgs']] = None,
                 circle_images: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs']] = None,
                 text_images: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageTextImageArgs']] = None,
                 url_images: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageArgs']] = None):
        """
        :param Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageArgs'] box_images: A rectangular box, with a specified color and applied transformation.
        :param Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs'] circle_images: A rectangular box, with a specified color and applied transformation.
        :param Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageTextImageArgs'] text_images: A snippet of text. Defines font family and size, fill color, and outline stroke width and color.
        :param Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageArgs'] url_images: An image loaded from a URL.
        """
        if box_images is not None:
            pulumi.set(__self__, "box_images", box_images)
        if circle_images is not None:
            pulumi.set(__self__, "circle_images", circle_images)
        if text_images is not None:
            pulumi.set(__self__, "text_images", text_images)
        if url_images is not None:
            pulumi.set(__self__, "url_images", url_images)

    @property
    @pulumi.getter(name="boxImages")
    def box_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageArgs']]:
        """
        A rectangular box, with a specified color and applied transformation.
        """
        return pulumi.get(self, "box_images")

    @box_images.setter
    def box_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageArgs']]):
        pulumi.set(self, "box_images", value)

    @property
    @pulumi.getter(name="circleImages")
    def circle_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs']]:
        """
        A rectangular box, with a specified color and applied transformation.
        """
        return pulumi.get(self, "circle_images")

    @circle_images.setter
    def circle_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs']]):
        pulumi.set(self, "circle_images", value)

    @property
    @pulumi.getter(name="textImages")
    def text_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageTextImageArgs']]:
        """
        A snippet of text. Defines font family and size, fill color, and outline stroke width and color.
        """
        return pulumi.get(self, "text_images")

    @text_images.setter
    def text_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageTextImageArgs']]):
        pulumi.set(self, "text_images", value)

    @property
    @pulumi.getter(name="urlImages")
    def url_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageArgs']]:
        """
        An image loaded from a URL.
        """
        return pulumi.get(self, "url_images")

    @url_images.setter
    def url_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageArgs']]):
        pulumi.set(self, "url_images", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageArgsDict(TypedDict):
        color: NotRequired[builtins.str]
        """
        The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        color_var: NotRequired[builtins.str]
        """
        The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        height: NotRequired[builtins.str]
        """
        The height of the box in pixels.
        """
        height_var: NotRequired[builtins.str]
        """
        The height of the box in pixels.
        """
        transformation: NotRequired['GetImagingPolicyImagePolicyTransformationArgsDict']
        width: NotRequired[builtins.str]
        """
        The width of the box in pixels.
        """
        width_var: NotRequired[builtins.str]
        """
        The width of the box in pixels.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageArgs:
    def __init__(__self__, *,
                 color: Optional[builtins.str] = None,
                 color_var: Optional[builtins.str] = None,
                 height: Optional[builtins.str] = None,
                 height_var: Optional[builtins.str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 width: Optional[builtins.str] = None,
                 width_var: Optional[builtins.str] = None):
        """
        :param builtins.str color: The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        :param builtins.str color_var: The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        :param builtins.str height: The height of the box in pixels.
        :param builtins.str height_var: The height of the box in pixels.
        :param builtins.str width: The width of the box in pixels.
        :param builtins.str width_var: The width of the box in pixels.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[builtins.str]:
        """
        The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[builtins.str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[builtins.str]:
        """
        The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "color_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[builtins.str]:
        """
        The height of the box in pixels.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[builtins.str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[builtins.str]:
        """
        The height of the box in pixels.
        """
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.str]:
        """
        The width of the box in pixels.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[builtins.str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[builtins.str]:
        """
        The width of the box in pixels.
        """
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "width_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgsDict(TypedDict):
        color: NotRequired[builtins.str]
        """
        The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        color_var: NotRequired[builtins.str]
        """
        The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        diameter: NotRequired[builtins.str]
        """
        The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        """
        diameter_var: NotRequired[builtins.str]
        """
        The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        """
        transformation: NotRequired['GetImagingPolicyImagePolicyTransformationArgsDict']
        width: NotRequired[builtins.str]
        """
        The width of the box in pixels.
        """
        width_var: NotRequired[builtins.str]
        """
        The width of the box in pixels.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs:
    def __init__(__self__, *,
                 color: Optional[builtins.str] = None,
                 color_var: Optional[builtins.str] = None,
                 diameter: Optional[builtins.str] = None,
                 diameter_var: Optional[builtins.str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 width: Optional[builtins.str] = None,
                 width_var: Optional[builtins.str] = None):
        """
        :param builtins.str color: The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        :param builtins.str color_var: The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        :param builtins.str diameter: The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        :param builtins.str diameter_var: The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        :param builtins.str width: The width of the box in pixels.
        :param builtins.str width_var: The width of the box in pixels.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if diameter is not None:
            pulumi.set(__self__, "diameter", diameter)
        if diameter_var is not None:
            pulumi.set(__self__, "diameter_var", diameter_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[builtins.str]:
        """
        The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[builtins.str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[builtins.str]:
        """
        The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
        """
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "color_var", value)

    @property
    @pulumi.getter
    def diameter(self) -> Optional[builtins.str]:
        """
        The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        """
        return pulumi.get(self, "diameter")

    @diameter.setter
    def diameter(self, value: Optional[builtins.str]):
        pulumi.set(self, "diameter", value)

    @property
    @pulumi.getter(name="diameterVar")
    def diameter_var(self) -> Optional[builtins.str]:
        """
        The diameter of the circle. The diameter will be the width and the height of the image in pixels.
        """
        return pulumi.get(self, "diameter_var")

    @diameter_var.setter
    def diameter_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "diameter_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.str]:
        """
        The width of the box in pixels.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[builtins.str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[builtins.str]:
        """
        The width of the box in pixels.
        """
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "width_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationCompositeImageTextImageArgsDict(TypedDict):
        fill: NotRequired[builtins.str]
        """
        The main fill color of the text.
        """
        fill_var: NotRequired[builtins.str]
        """
        The main fill color of the text.
        """
        size: NotRequired[builtins.str]
        """
        The size in pixels to render the text.
        """
        size_var: NotRequired[builtins.str]
        """
        The size in pixels to render the text.
        """
        stroke: NotRequired[builtins.str]
        """
        The color for the outline of the text.
        """
        stroke_size: NotRequired[builtins.str]
        """
        The thickness in points for the outline of the text.
        """
        stroke_size_var: NotRequired[builtins.str]
        """
        The thickness in points for the outline of the text.
        """
        stroke_var: NotRequired[builtins.str]
        """
        The color for the outline of the text.
        """
        text: NotRequired[builtins.str]
        """
        The line of text to render.
        """
        text_var: NotRequired[builtins.str]
        """
        The line of text to render.
        """
        transformation: NotRequired['GetImagingPolicyImagePolicyTransformationArgsDict']
        typeface: NotRequired[builtins.str]
        """
        The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        """
        typeface_var: NotRequired[builtins.str]
        """
        The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationCompositeImageTextImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationCompositeImageTextImageArgs:
    def __init__(__self__, *,
                 fill: Optional[builtins.str] = None,
                 fill_var: Optional[builtins.str] = None,
                 size: Optional[builtins.str] = None,
                 size_var: Optional[builtins.str] = None,
                 stroke: Optional[builtins.str] = None,
                 stroke_size: Optional[builtins.str] = None,
                 stroke_size_var: Optional[builtins.str] = None,
                 stroke_var: Optional[builtins.str] = None,
                 text: Optional[builtins.str] = None,
                 text_var: Optional[builtins.str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 typeface: Optional[builtins.str] = None,
                 typeface_var: Optional[builtins.str] = None):
        """
        :param builtins.str fill: The main fill color of the text.
        :param builtins.str fill_var: The main fill color of the text.
        :param builtins.str size: The size in pixels to render the text.
        :param builtins.str size_var: The size in pixels to render the text.
        :param builtins.str stroke: The color for the outline of the text.
        :param builtins.str stroke_size: The thickness in points for the outline of the text.
        :param builtins.str stroke_size_var: The thickness in points for the outline of the text.
        :param builtins.str stroke_var: The color for the outline of the text.
        :param builtins.str text: The line of text to render.
        :param builtins.str text_var: The line of text to render.
        :param builtins.str typeface: The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        :param builtins.str typeface_var: The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        """
        if fill is not None:
            pulumi.set(__self__, "fill", fill)
        if fill_var is not None:
            pulumi.set(__self__, "fill_var", fill_var)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_var is not None:
            pulumi.set(__self__, "size_var", size_var)
        if stroke is not None:
            pulumi.set(__self__, "stroke", stroke)
        if stroke_size is not None:
            pulumi.set(__self__, "stroke_size", stroke_size)
        if stroke_size_var is not None:
            pulumi.set(__self__, "stroke_size_var", stroke_size_var)
        if stroke_var is not None:
            pulumi.set(__self__, "stroke_var", stroke_var)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if text_var is not None:
            pulumi.set(__self__, "text_var", text_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if typeface is not None:
            pulumi.set(__self__, "typeface", typeface)
        if typeface_var is not None:
            pulumi.set(__self__, "typeface_var", typeface_var)

    @property
    @pulumi.getter
    def fill(self) -> Optional[builtins.str]:
        """
        The main fill color of the text.
        """
        return pulumi.get(self, "fill")

    @fill.setter
    def fill(self, value: Optional[builtins.str]):
        pulumi.set(self, "fill", value)

    @property
    @pulumi.getter(name="fillVar")
    def fill_var(self) -> Optional[builtins.str]:
        """
        The main fill color of the text.
        """
        return pulumi.get(self, "fill_var")

    @fill_var.setter
    def fill_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "fill_var", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.str]:
        """
        The size in pixels to render the text.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[builtins.str]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeVar")
    def size_var(self) -> Optional[builtins.str]:
        """
        The size in pixels to render the text.
        """
        return pulumi.get(self, "size_var")

    @size_var.setter
    def size_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "size_var", value)

    @property
    @pulumi.getter
    def stroke(self) -> Optional[builtins.str]:
        """
        The color for the outline of the text.
        """
        return pulumi.get(self, "stroke")

    @stroke.setter
    def stroke(self, value: Optional[builtins.str]):
        pulumi.set(self, "stroke", value)

    @property
    @pulumi.getter(name="strokeSize")
    def stroke_size(self) -> Optional[builtins.str]:
        """
        The thickness in points for the outline of the text.
        """
        return pulumi.get(self, "stroke_size")

    @stroke_size.setter
    def stroke_size(self, value: Optional[builtins.str]):
        pulumi.set(self, "stroke_size", value)

    @property
    @pulumi.getter(name="strokeSizeVar")
    def stroke_size_var(self) -> Optional[builtins.str]:
        """
        The thickness in points for the outline of the text.
        """
        return pulumi.get(self, "stroke_size_var")

    @stroke_size_var.setter
    def stroke_size_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "stroke_size_var", value)

    @property
    @pulumi.getter(name="strokeVar")
    def stroke_var(self) -> Optional[builtins.str]:
        """
        The color for the outline of the text.
        """
        return pulumi.get(self, "stroke_var")

    @stroke_var.setter
    def stroke_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "stroke_var", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[builtins.str]:
        """
        The line of text to render.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[builtins.str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="textVar")
    def text_var(self) -> Optional[builtins.str]:
        """
        The line of text to render.
        """
        return pulumi.get(self, "text_var")

    @text_var.setter
    def text_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "text_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def typeface(self) -> Optional[builtins.str]:
        """
        The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        """
        return pulumi.get(self, "typeface")

    @typeface.setter
    def typeface(self, value: Optional[builtins.str]):
        pulumi.set(self, "typeface", value)

    @property
    @pulumi.getter(name="typefaceVar")
    def typeface_var(self) -> Optional[builtins.str]:
        """
        The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
        """
        return pulumi.get(self, "typeface_var")

    @typeface_var.setter
    def typeface_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "typeface_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageArgsDict(TypedDict):
        transformation: NotRequired['GetImagingPolicyImagePolicyTransformationArgsDict']
        url: NotRequired[builtins.str]
        """
        The URL of the image.
        """
        url_var: NotRequired[builtins.str]
        """
        The URL of the image.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageArgs:
    def __init__(__self__, *,
                 transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 url: Optional[builtins.str] = None,
                 url_var: Optional[builtins.str] = None):
        """
        :param builtins.str url: The URL of the image.
        :param builtins.str url_var: The URL of the image.
        """
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if url_var is not None:
            pulumi.set(__self__, "url_var", url_var)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[builtins.str]:
        """
        The URL of the image.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[builtins.str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="urlVar")
    def url_var(self) -> Optional[builtins.str]:
        """
        The URL of the image.
        """
        return pulumi.get(self, "url_var")

    @url_var.setter
    def url_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "url_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationCompoundArgsDict(TypedDict):
        transformations: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationArgsDict']]
elif False:
    GetImagingPolicyImagePolicyTransformationCompoundArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationCompoundArgs:
    def __init__(__self__, *,
                 transformations: Optional[Sequence['GetImagingPolicyImagePolicyTransformationArgs']] = None):
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationArgs']]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationArgs']]):
        pulumi.set(self, "transformations", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationContrastArgsDict(TypedDict):
        brightness: NotRequired[builtins.str]
        """
        Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
        """
        brightness_var: NotRequired[builtins.str]
        """
        Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
        """
        contrast: NotRequired[builtins.str]
        """
        Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
        """
        contrast_var: NotRequired[builtins.str]
        """
        Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationContrastArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationContrastArgs:
    def __init__(__self__, *,
                 brightness: Optional[builtins.str] = None,
                 brightness_var: Optional[builtins.str] = None,
                 contrast: Optional[builtins.str] = None,
                 contrast_var: Optional[builtins.str] = None):
        """
        :param builtins.str brightness: Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
        :param builtins.str brightness_var: Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
        :param builtins.str contrast: Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
        :param builtins.str contrast_var: Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
        """
        if brightness is not None:
            pulumi.set(__self__, "brightness", brightness)
        if brightness_var is not None:
            pulumi.set(__self__, "brightness_var", brightness_var)
        if contrast is not None:
            pulumi.set(__self__, "contrast", contrast)
        if contrast_var is not None:
            pulumi.set(__self__, "contrast_var", contrast_var)

    @property
    @pulumi.getter
    def brightness(self) -> Optional[builtins.str]:
        """
        Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
        """
        return pulumi.get(self, "brightness")

    @brightness.setter
    def brightness(self, value: Optional[builtins.str]):
        pulumi.set(self, "brightness", value)

    @property
    @pulumi.getter(name="brightnessVar")
    def brightness_var(self) -> Optional[builtins.str]:
        """
        Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
        """
        return pulumi.get(self, "brightness_var")

    @brightness_var.setter
    def brightness_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "brightness_var", value)

    @property
    @pulumi.getter
    def contrast(self) -> Optional[builtins.str]:
        """
        Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
        """
        return pulumi.get(self, "contrast")

    @contrast.setter
    def contrast(self, value: Optional[builtins.str]):
        pulumi.set(self, "contrast", value)

    @property
    @pulumi.getter(name="contrastVar")
    def contrast_var(self) -> Optional[builtins.str]:
        """
        Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
        """
        return pulumi.get(self, "contrast_var")

    @contrast_var.setter
    def contrast_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "contrast_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationCropArgsDict(TypedDict):
        allow_expansion: NotRequired[builtins.str]
        """
        If cropping an area outside of the existing canvas, expands the image canvas.
        """
        allow_expansion_var: NotRequired[builtins.str]
        """
        If cropping an area outside of the existing canvas, expands the image canvas.
        """
        gravity: NotRequired[builtins.str]
        """
        Frame of reference for X and Y Positions.
        """
        gravity_var: NotRequired[builtins.str]
        """
        Frame of reference for X and Y Positions.
        """
        height: NotRequired[builtins.str]
        """
        The number of pixels to crop along the y-axis.
        """
        height_var: NotRequired[builtins.str]
        """
        The number of pixels to crop along the y-axis.
        """
        width: NotRequired[builtins.str]
        """
        The number of pixels to crop along the x-axis.
        """
        width_var: NotRequired[builtins.str]
        """
        The number of pixels to crop along the x-axis.
        """
        x_position: NotRequired[builtins.str]
        """
        The x-axis position of the image to crop from.
        """
        x_position_var: NotRequired[builtins.str]
        """
        The x-axis position of the image to crop from.
        """
        y_position: NotRequired[builtins.str]
        """
        The y-axis position of the image to crop from.
        """
        y_position_var: NotRequired[builtins.str]
        """
        The y-axis position of the image to crop from.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationCropArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationCropArgs:
    def __init__(__self__, *,
                 allow_expansion: Optional[builtins.str] = None,
                 allow_expansion_var: Optional[builtins.str] = None,
                 gravity: Optional[builtins.str] = None,
                 gravity_var: Optional[builtins.str] = None,
                 height: Optional[builtins.str] = None,
                 height_var: Optional[builtins.str] = None,
                 width: Optional[builtins.str] = None,
                 width_var: Optional[builtins.str] = None,
                 x_position: Optional[builtins.str] = None,
                 x_position_var: Optional[builtins.str] = None,
                 y_position: Optional[builtins.str] = None,
                 y_position_var: Optional[builtins.str] = None):
        """
        :param builtins.str allow_expansion: If cropping an area outside of the existing canvas, expands the image canvas.
        :param builtins.str allow_expansion_var: If cropping an area outside of the existing canvas, expands the image canvas.
        :param builtins.str gravity: Frame of reference for X and Y Positions.
        :param builtins.str gravity_var: Frame of reference for X and Y Positions.
        :param builtins.str height: The number of pixels to crop along the y-axis.
        :param builtins.str height_var: The number of pixels to crop along the y-axis.
        :param builtins.str width: The number of pixels to crop along the x-axis.
        :param builtins.str width_var: The number of pixels to crop along the x-axis.
        :param builtins.str x_position: The x-axis position of the image to crop from.
        :param builtins.str x_position_var: The x-axis position of the image to crop from.
        :param builtins.str y_position: The y-axis position of the image to crop from.
        :param builtins.str y_position_var: The y-axis position of the image to crop from.
        """
        if allow_expansion is not None:
            pulumi.set(__self__, "allow_expansion", allow_expansion)
        if allow_expansion_var is not None:
            pulumi.set(__self__, "allow_expansion_var", allow_expansion_var)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)
        if x_position is not None:
            pulumi.set(__self__, "x_position", x_position)
        if x_position_var is not None:
            pulumi.set(__self__, "x_position_var", x_position_var)
        if y_position is not None:
            pulumi.set(__self__, "y_position", y_position)
        if y_position_var is not None:
            pulumi.set(__self__, "y_position_var", y_position_var)

    @property
    @pulumi.getter(name="allowExpansion")
    def allow_expansion(self) -> Optional[builtins.str]:
        """
        If cropping an area outside of the existing canvas, expands the image canvas.
        """
        return pulumi.get(self, "allow_expansion")

    @allow_expansion.setter
    def allow_expansion(self, value: Optional[builtins.str]):
        pulumi.set(self, "allow_expansion", value)

    @property
    @pulumi.getter(name="allowExpansionVar")
    def allow_expansion_var(self) -> Optional[builtins.str]:
        """
        If cropping an area outside of the existing canvas, expands the image canvas.
        """
        return pulumi.get(self, "allow_expansion_var")

    @allow_expansion_var.setter
    def allow_expansion_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "allow_expansion_var", value)

    @property
    @pulumi.getter
    def gravity(self) -> Optional[builtins.str]:
        """
        Frame of reference for X and Y Positions.
        """
        return pulumi.get(self, "gravity")

    @gravity.setter
    def gravity(self, value: Optional[builtins.str]):
        pulumi.set(self, "gravity", value)

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[builtins.str]:
        """
        Frame of reference for X and Y Positions.
        """
        return pulumi.get(self, "gravity_var")

    @gravity_var.setter
    def gravity_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "gravity_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[builtins.str]:
        """
        The number of pixels to crop along the y-axis.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[builtins.str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[builtins.str]:
        """
        The number of pixels to crop along the y-axis.
        """
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.str]:
        """
        The number of pixels to crop along the x-axis.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[builtins.str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[builtins.str]:
        """
        The number of pixels to crop along the x-axis.
        """
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "width_var", value)

    @property
    @pulumi.getter(name="xPosition")
    def x_position(self) -> Optional[builtins.str]:
        """
        The x-axis position of the image to crop from.
        """
        return pulumi.get(self, "x_position")

    @x_position.setter
    def x_position(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_position", value)

    @property
    @pulumi.getter(name="xPositionVar")
    def x_position_var(self) -> Optional[builtins.str]:
        """
        The x-axis position of the image to crop from.
        """
        return pulumi.get(self, "x_position_var")

    @x_position_var.setter
    def x_position_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_position_var", value)

    @property
    @pulumi.getter(name="yPosition")
    def y_position(self) -> Optional[builtins.str]:
        """
        The y-axis position of the image to crop from.
        """
        return pulumi.get(self, "y_position")

    @y_position.setter
    def y_position(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_position", value)

    @property
    @pulumi.getter(name="yPositionVar")
    def y_position_var(self) -> Optional[builtins.str]:
        """
        The y-axis position of the image to crop from.
        """
        return pulumi.get(self, "y_position_var")

    @y_position_var.setter
    def y_position_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_position_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationFaceCropArgsDict(TypedDict):
        algorithm: NotRequired[builtins.str]
        """
        Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
        """
        algorithm_var: NotRequired[builtins.str]
        """
        Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
        """
        confidence: NotRequired[builtins.str]
        """
        With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
        """
        confidence_var: NotRequired[builtins.str]
        """
        With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
        """
        fail_gravity: NotRequired[builtins.str]
        """
        Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
        """
        fail_gravity_var: NotRequired[builtins.str]
        """
        Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
        """
        focus: NotRequired[builtins.str]
        """
        Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
        """
        focus_var: NotRequired[builtins.str]
        """
        Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
        """
        gravity: NotRequired[builtins.str]
        """
        Controls placement of the crop. Directions are relative to the face(s) plus padding.
        """
        gravity_var: NotRequired[builtins.str]
        """
        Controls placement of the crop. Directions are relative to the face(s) plus padding.
        """
        height: NotRequired[builtins.str]
        """
        The height of the output image in pixels relative to the specified `style` value.
        """
        height_var: NotRequired[builtins.str]
        """
        The height of the output image in pixels relative to the specified `style` value.
        """
        padding: NotRequired[builtins.str]
        """
        The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
        """
        padding_var: NotRequired[builtins.str]
        """
        The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
        """
        style: NotRequired[builtins.str]
        """
        Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
        """
        style_var: NotRequired[builtins.str]
        """
        Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
        """
        width: NotRequired[builtins.str]
        """
        The width of the output image in pixels relative to the specified `style` value.
        """
        width_var: NotRequired[builtins.str]
        """
        The width of the output image in pixels relative to the specified `style` value.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationFaceCropArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationFaceCropArgs:
    def __init__(__self__, *,
                 algorithm: Optional[builtins.str] = None,
                 algorithm_var: Optional[builtins.str] = None,
                 confidence: Optional[builtins.str] = None,
                 confidence_var: Optional[builtins.str] = None,
                 fail_gravity: Optional[builtins.str] = None,
                 fail_gravity_var: Optional[builtins.str] = None,
                 focus: Optional[builtins.str] = None,
                 focus_var: Optional[builtins.str] = None,
                 gravity: Optional[builtins.str] = None,
                 gravity_var: Optional[builtins.str] = None,
                 height: Optional[builtins.str] = None,
                 height_var: Optional[builtins.str] = None,
                 padding: Optional[builtins.str] = None,
                 padding_var: Optional[builtins.str] = None,
                 style: Optional[builtins.str] = None,
                 style_var: Optional[builtins.str] = None,
                 width: Optional[builtins.str] = None,
                 width_var: Optional[builtins.str] = None):
        """
        :param builtins.str algorithm: Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
        :param builtins.str algorithm_var: Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
        :param builtins.str confidence: With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
        :param builtins.str confidence_var: With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
        :param builtins.str fail_gravity: Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
        :param builtins.str fail_gravity_var: Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
        :param builtins.str focus: Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
        :param builtins.str focus_var: Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
        :param builtins.str gravity: Controls placement of the crop. Directions are relative to the face(s) plus padding.
        :param builtins.str gravity_var: Controls placement of the crop. Directions are relative to the face(s) plus padding.
        :param builtins.str height: The height of the output image in pixels relative to the specified `style` value.
        :param builtins.str height_var: The height of the output image in pixels relative to the specified `style` value.
        :param builtins.str padding: The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
        :param builtins.str padding_var: The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
        :param builtins.str style: Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
        :param builtins.str style_var: Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
        :param builtins.str width: The width of the output image in pixels relative to the specified `style` value.
        :param builtins.str width_var: The width of the output image in pixels relative to the specified `style` value.
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if algorithm_var is not None:
            pulumi.set(__self__, "algorithm_var", algorithm_var)
        if confidence is not None:
            pulumi.set(__self__, "confidence", confidence)
        if confidence_var is not None:
            pulumi.set(__self__, "confidence_var", confidence_var)
        if fail_gravity is not None:
            pulumi.set(__self__, "fail_gravity", fail_gravity)
        if fail_gravity_var is not None:
            pulumi.set(__self__, "fail_gravity_var", fail_gravity_var)
        if focus is not None:
            pulumi.set(__self__, "focus", focus)
        if focus_var is not None:
            pulumi.set(__self__, "focus_var", focus_var)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if padding is not None:
            pulumi.set(__self__, "padding", padding)
        if padding_var is not None:
            pulumi.set(__self__, "padding_var", padding_var)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if style_var is not None:
            pulumi.set(__self__, "style_var", style_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[builtins.str]:
        """
        Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[builtins.str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="algorithmVar")
    def algorithm_var(self) -> Optional[builtins.str]:
        """
        Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
        """
        return pulumi.get(self, "algorithm_var")

    @algorithm_var.setter
    def algorithm_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "algorithm_var", value)

    @property
    @pulumi.getter
    def confidence(self) -> Optional[builtins.str]:
        """
        With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
        """
        return pulumi.get(self, "confidence")

    @confidence.setter
    def confidence(self, value: Optional[builtins.str]):
        pulumi.set(self, "confidence", value)

    @property
    @pulumi.getter(name="confidenceVar")
    def confidence_var(self) -> Optional[builtins.str]:
        """
        With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
        """
        return pulumi.get(self, "confidence_var")

    @confidence_var.setter
    def confidence_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "confidence_var", value)

    @property
    @pulumi.getter(name="failGravity")
    def fail_gravity(self) -> Optional[builtins.str]:
        """
        Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
        """
        return pulumi.get(self, "fail_gravity")

    @fail_gravity.setter
    def fail_gravity(self, value: Optional[builtins.str]):
        pulumi.set(self, "fail_gravity", value)

    @property
    @pulumi.getter(name="failGravityVar")
    def fail_gravity_var(self) -> Optional[builtins.str]:
        """
        Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
        """
        return pulumi.get(self, "fail_gravity_var")

    @fail_gravity_var.setter
    def fail_gravity_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "fail_gravity_var", value)

    @property
    @pulumi.getter
    def focus(self) -> Optional[builtins.str]:
        """
        Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
        """
        return pulumi.get(self, "focus")

    @focus.setter
    def focus(self, value: Optional[builtins.str]):
        pulumi.set(self, "focus", value)

    @property
    @pulumi.getter(name="focusVar")
    def focus_var(self) -> Optional[builtins.str]:
        """
        Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
        """
        return pulumi.get(self, "focus_var")

    @focus_var.setter
    def focus_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "focus_var", value)

    @property
    @pulumi.getter
    def gravity(self) -> Optional[builtins.str]:
        """
        Controls placement of the crop. Directions are relative to the face(s) plus padding.
        """
        return pulumi.get(self, "gravity")

    @gravity.setter
    def gravity(self, value: Optional[builtins.str]):
        pulumi.set(self, "gravity", value)

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[builtins.str]:
        """
        Controls placement of the crop. Directions are relative to the face(s) plus padding.
        """
        return pulumi.get(self, "gravity_var")

    @gravity_var.setter
    def gravity_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "gravity_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[builtins.str]:
        """
        The height of the output image in pixels relative to the specified `style` value.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[builtins.str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[builtins.str]:
        """
        The height of the output image in pixels relative to the specified `style` value.
        """
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def padding(self) -> Optional[builtins.str]:
        """
        The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
        """
        return pulumi.get(self, "padding")

    @padding.setter
    def padding(self, value: Optional[builtins.str]):
        pulumi.set(self, "padding", value)

    @property
    @pulumi.getter(name="paddingVar")
    def padding_var(self) -> Optional[builtins.str]:
        """
        The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
        """
        return pulumi.get(self, "padding_var")

    @padding_var.setter
    def padding_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "padding_var", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[builtins.str]:
        """
        Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[builtins.str]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter(name="styleVar")
    def style_var(self) -> Optional[builtins.str]:
        """
        Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
        """
        return pulumi.get(self, "style_var")

    @style_var.setter
    def style_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "style_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.str]:
        """
        The width of the output image in pixels relative to the specified `style` value.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[builtins.str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[builtins.str]:
        """
        The width of the output image in pixels relative to the specified `style` value.
        """
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "width_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationFeatureCropArgsDict(TypedDict):
        fail_gravity: NotRequired[builtins.str]
        """
        Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
        """
        fail_gravity_var: NotRequired[builtins.str]
        """
        Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
        """
        feature_radius: NotRequired[builtins.str]
        """
        The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
        """
        feature_radius_var: NotRequired[builtins.str]
        """
        The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
        """
        gravity: NotRequired[builtins.str]
        """
        Controls placement of the crop. Directions are relative to the region of interest plus padding.
        """
        gravity_var: NotRequired[builtins.str]
        """
        Controls placement of the crop. Directions are relative to the region of interest plus padding.
        """
        height: NotRequired[builtins.str]
        """
        The height in pixels of the output image relative to the specified `style` value.
        """
        height_var: NotRequired[builtins.str]
        """
        The height in pixels of the output image relative to the specified `style` value.
        """
        max_features: NotRequired[builtins.str]
        """
        The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
        """
        max_features_var: NotRequired[builtins.str]
        """
        The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
        """
        min_feature_quality: NotRequired[builtins.str]
        """
        Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
        """
        min_feature_quality_var: NotRequired[builtins.str]
        """
        Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
        """
        padding: NotRequired[builtins.str]
        """
        Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
        """
        padding_var: NotRequired[builtins.str]
        """
        Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
        """
        style: NotRequired[builtins.str]
        """
        Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
        """
        style_var: NotRequired[builtins.str]
        """
        Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
        """
        width: NotRequired[builtins.str]
        """
        The width in pixels of the output image relative to the specified `style` value.
        """
        width_var: NotRequired[builtins.str]
        """
        The width in pixels of the output image relative to the specified `style` value.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationFeatureCropArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationFeatureCropArgs:
    def __init__(__self__, *,
                 fail_gravity: Optional[builtins.str] = None,
                 fail_gravity_var: Optional[builtins.str] = None,
                 feature_radius: Optional[builtins.str] = None,
                 feature_radius_var: Optional[builtins.str] = None,
                 gravity: Optional[builtins.str] = None,
                 gravity_var: Optional[builtins.str] = None,
                 height: Optional[builtins.str] = None,
                 height_var: Optional[builtins.str] = None,
                 max_features: Optional[builtins.str] = None,
                 max_features_var: Optional[builtins.str] = None,
                 min_feature_quality: Optional[builtins.str] = None,
                 min_feature_quality_var: Optional[builtins.str] = None,
                 padding: Optional[builtins.str] = None,
                 padding_var: Optional[builtins.str] = None,
                 style: Optional[builtins.str] = None,
                 style_var: Optional[builtins.str] = None,
                 width: Optional[builtins.str] = None,
                 width_var: Optional[builtins.str] = None):
        """
        :param builtins.str fail_gravity: Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
        :param builtins.str fail_gravity_var: Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
        :param builtins.str feature_radius: The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
        :param builtins.str feature_radius_var: The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
        :param builtins.str gravity: Controls placement of the crop. Directions are relative to the region of interest plus padding.
        :param builtins.str gravity_var: Controls placement of the crop. Directions are relative to the region of interest plus padding.
        :param builtins.str height: The height in pixels of the output image relative to the specified `style` value.
        :param builtins.str height_var: The height in pixels of the output image relative to the specified `style` value.
        :param builtins.str max_features: The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
        :param builtins.str max_features_var: The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
        :param builtins.str min_feature_quality: Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
        :param builtins.str min_feature_quality_var: Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
        :param builtins.str padding: Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
        :param builtins.str padding_var: Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
        :param builtins.str style: Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
        :param builtins.str style_var: Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
        :param builtins.str width: The width in pixels of the output image relative to the specified `style` value.
        :param builtins.str width_var: The width in pixels of the output image relative to the specified `style` value.
        """
        if fail_gravity is not None:
            pulumi.set(__self__, "fail_gravity", fail_gravity)
        if fail_gravity_var is not None:
            pulumi.set(__self__, "fail_gravity_var", fail_gravity_var)
        if feature_radius is not None:
            pulumi.set(__self__, "feature_radius", feature_radius)
        if feature_radius_var is not None:
            pulumi.set(__self__, "feature_radius_var", feature_radius_var)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if max_features is not None:
            pulumi.set(__self__, "max_features", max_features)
        if max_features_var is not None:
            pulumi.set(__self__, "max_features_var", max_features_var)
        if min_feature_quality is not None:
            pulumi.set(__self__, "min_feature_quality", min_feature_quality)
        if min_feature_quality_var is not None:
            pulumi.set(__self__, "min_feature_quality_var", min_feature_quality_var)
        if padding is not None:
            pulumi.set(__self__, "padding", padding)
        if padding_var is not None:
            pulumi.set(__self__, "padding_var", padding_var)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if style_var is not None:
            pulumi.set(__self__, "style_var", style_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter(name="failGravity")
    def fail_gravity(self) -> Optional[builtins.str]:
        """
        Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
        """
        return pulumi.get(self, "fail_gravity")

    @fail_gravity.setter
    def fail_gravity(self, value: Optional[builtins.str]):
        pulumi.set(self, "fail_gravity", value)

    @property
    @pulumi.getter(name="failGravityVar")
    def fail_gravity_var(self) -> Optional[builtins.str]:
        """
        Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
        """
        return pulumi.get(self, "fail_gravity_var")

    @fail_gravity_var.setter
    def fail_gravity_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "fail_gravity_var", value)

    @property
    @pulumi.getter(name="featureRadius")
    def feature_radius(self) -> Optional[builtins.str]:
        """
        The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
        """
        return pulumi.get(self, "feature_radius")

    @feature_radius.setter
    def feature_radius(self, value: Optional[builtins.str]):
        pulumi.set(self, "feature_radius", value)

    @property
    @pulumi.getter(name="featureRadiusVar")
    def feature_radius_var(self) -> Optional[builtins.str]:
        """
        The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
        """
        return pulumi.get(self, "feature_radius_var")

    @feature_radius_var.setter
    def feature_radius_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "feature_radius_var", value)

    @property
    @pulumi.getter
    def gravity(self) -> Optional[builtins.str]:
        """
        Controls placement of the crop. Directions are relative to the region of interest plus padding.
        """
        return pulumi.get(self, "gravity")

    @gravity.setter
    def gravity(self, value: Optional[builtins.str]):
        pulumi.set(self, "gravity", value)

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[builtins.str]:
        """
        Controls placement of the crop. Directions are relative to the region of interest plus padding.
        """
        return pulumi.get(self, "gravity_var")

    @gravity_var.setter
    def gravity_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "gravity_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[builtins.str]:
        """
        The height in pixels of the output image relative to the specified `style` value.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[builtins.str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[builtins.str]:
        """
        The height in pixels of the output image relative to the specified `style` value.
        """
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter(name="maxFeatures")
    def max_features(self) -> Optional[builtins.str]:
        """
        The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
        """
        return pulumi.get(self, "max_features")

    @max_features.setter
    def max_features(self, value: Optional[builtins.str]):
        pulumi.set(self, "max_features", value)

    @property
    @pulumi.getter(name="maxFeaturesVar")
    def max_features_var(self) -> Optional[builtins.str]:
        """
        The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
        """
        return pulumi.get(self, "max_features_var")

    @max_features_var.setter
    def max_features_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "max_features_var", value)

    @property
    @pulumi.getter(name="minFeatureQuality")
    def min_feature_quality(self) -> Optional[builtins.str]:
        """
        Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
        """
        return pulumi.get(self, "min_feature_quality")

    @min_feature_quality.setter
    def min_feature_quality(self, value: Optional[builtins.str]):
        pulumi.set(self, "min_feature_quality", value)

    @property
    @pulumi.getter(name="minFeatureQualityVar")
    def min_feature_quality_var(self) -> Optional[builtins.str]:
        """
        Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
        """
        return pulumi.get(self, "min_feature_quality_var")

    @min_feature_quality_var.setter
    def min_feature_quality_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "min_feature_quality_var", value)

    @property
    @pulumi.getter
    def padding(self) -> Optional[builtins.str]:
        """
        Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
        """
        return pulumi.get(self, "padding")

    @padding.setter
    def padding(self, value: Optional[builtins.str]):
        pulumi.set(self, "padding", value)

    @property
    @pulumi.getter(name="paddingVar")
    def padding_var(self) -> Optional[builtins.str]:
        """
        Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
        """
        return pulumi.get(self, "padding_var")

    @padding_var.setter
    def padding_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "padding_var", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[builtins.str]:
        """
        Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[builtins.str]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter(name="styleVar")
    def style_var(self) -> Optional[builtins.str]:
        """
        Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
        """
        return pulumi.get(self, "style_var")

    @style_var.setter
    def style_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "style_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.str]:
        """
        The width in pixels of the output image relative to the specified `style` value.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[builtins.str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[builtins.str]:
        """
        The width in pixels of the output image relative to the specified `style` value.
        """
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "width_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationFitAndFillArgsDict(TypedDict):
        fill_transformation: NotRequired['GetImagingPolicyImagePolicyTransformationArgsDict']
        height: NotRequired[builtins.str]
        """
        The height value of the resized image.
        """
        height_var: NotRequired[builtins.str]
        """
        The height value of the resized image.
        """
        width: NotRequired[builtins.str]
        """
        The width value of the resized image.
        """
        width_var: NotRequired[builtins.str]
        """
        The width value of the resized image.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationFitAndFillArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationFitAndFillArgs:
    def __init__(__self__, *,
                 fill_transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 height: Optional[builtins.str] = None,
                 height_var: Optional[builtins.str] = None,
                 width: Optional[builtins.str] = None,
                 width_var: Optional[builtins.str] = None):
        """
        :param builtins.str height: The height value of the resized image.
        :param builtins.str height_var: The height value of the resized image.
        :param builtins.str width: The width value of the resized image.
        :param builtins.str width_var: The width value of the resized image.
        """
        if fill_transformation is not None:
            pulumi.set(__self__, "fill_transformation", fill_transformation)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter(name="fillTransformation")
    def fill_transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "fill_transformation")

    @fill_transformation.setter
    def fill_transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "fill_transformation", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[builtins.str]:
        """
        The height value of the resized image.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[builtins.str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[builtins.str]:
        """
        The height value of the resized image.
        """
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.str]:
        """
        The width value of the resized image.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[builtins.str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[builtins.str]:
        """
        The width value of the resized image.
        """
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "width_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationGoopArgsDict(TypedDict):
        chaos: NotRequired[builtins.str]
        """
        Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
        """
        chaos_var: NotRequired[builtins.str]
        """
        Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
        """
        density: NotRequired[builtins.str]
        """
        Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
        """
        density_var: NotRequired[builtins.str]
        """
        Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
        """
        power: NotRequired[builtins.str]
        """
        By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
        """
        power_var: NotRequired[builtins.str]
        """
        By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
        """
        seed: NotRequired[builtins.str]
        """
        Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
        """
        seed_var: NotRequired[builtins.str]
        """
        Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationGoopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationGoopArgs:
    def __init__(__self__, *,
                 chaos: Optional[builtins.str] = None,
                 chaos_var: Optional[builtins.str] = None,
                 density: Optional[builtins.str] = None,
                 density_var: Optional[builtins.str] = None,
                 power: Optional[builtins.str] = None,
                 power_var: Optional[builtins.str] = None,
                 seed: Optional[builtins.str] = None,
                 seed_var: Optional[builtins.str] = None):
        """
        :param builtins.str chaos: Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
        :param builtins.str chaos_var: Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
        :param builtins.str density: Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
        :param builtins.str density_var: Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
        :param builtins.str power: By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
        :param builtins.str power_var: By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
        :param builtins.str seed: Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
        :param builtins.str seed_var: Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
        """
        if chaos is not None:
            pulumi.set(__self__, "chaos", chaos)
        if chaos_var is not None:
            pulumi.set(__self__, "chaos_var", chaos_var)
        if density is not None:
            pulumi.set(__self__, "density", density)
        if density_var is not None:
            pulumi.set(__self__, "density_var", density_var)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_var is not None:
            pulumi.set(__self__, "power_var", power_var)
        if seed is not None:
            pulumi.set(__self__, "seed", seed)
        if seed_var is not None:
            pulumi.set(__self__, "seed_var", seed_var)

    @property
    @pulumi.getter
    def chaos(self) -> Optional[builtins.str]:
        """
        Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
        """
        return pulumi.get(self, "chaos")

    @chaos.setter
    def chaos(self, value: Optional[builtins.str]):
        pulumi.set(self, "chaos", value)

    @property
    @pulumi.getter(name="chaosVar")
    def chaos_var(self) -> Optional[builtins.str]:
        """
        Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
        """
        return pulumi.get(self, "chaos_var")

    @chaos_var.setter
    def chaos_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "chaos_var", value)

    @property
    @pulumi.getter
    def density(self) -> Optional[builtins.str]:
        """
        Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
        """
        return pulumi.get(self, "density")

    @density.setter
    def density(self, value: Optional[builtins.str]):
        pulumi.set(self, "density", value)

    @property
    @pulumi.getter(name="densityVar")
    def density_var(self) -> Optional[builtins.str]:
        """
        Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
        """
        return pulumi.get(self, "density_var")

    @density_var.setter
    def density_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "density_var", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[builtins.str]:
        """
        By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[builtins.str]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerVar")
    def power_var(self) -> Optional[builtins.str]:
        """
        By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
        """
        return pulumi.get(self, "power_var")

    @power_var.setter
    def power_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "power_var", value)

    @property
    @pulumi.getter
    def seed(self) -> Optional[builtins.str]:
        """
        Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
        """
        return pulumi.get(self, "seed")

    @seed.setter
    def seed(self, value: Optional[builtins.str]):
        pulumi.set(self, "seed", value)

    @property
    @pulumi.getter(name="seedVar")
    def seed_var(self) -> Optional[builtins.str]:
        """
        Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
        """
        return pulumi.get(self, "seed_var")

    @seed_var.setter
    def seed_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "seed_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationGrayscaleArgsDict(TypedDict):
        type: NotRequired[builtins.str]
        """
        The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
        """
        type_var: NotRequired[builtins.str]
        """
        The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationGrayscaleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationGrayscaleArgs:
    def __init__(__self__, *,
                 type: Optional[builtins.str] = None,
                 type_var: Optional[builtins.str] = None):
        """
        :param builtins.str type: The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
        :param builtins.str type_var: The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type_var is not None:
            pulumi.set(__self__, "type_var", type_var)

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="typeVar")
    def type_var(self) -> Optional[builtins.str]:
        """
        The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
        """
        return pulumi.get(self, "type_var")

    @type_var.setter
    def type_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "type_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationHslArgsDict(TypedDict):
        hue: NotRequired[builtins.str]
        """
        The number of degrees to rotate colors around the color wheel, `0` by default.
        """
        hue_var: NotRequired[builtins.str]
        """
        The number of degrees to rotate colors around the color wheel, `0` by default.
        """
        lightness: NotRequired[builtins.str]
        """
        A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
        """
        lightness_var: NotRequired[builtins.str]
        """
        A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
        """
        saturation: NotRequired[builtins.str]
        """
        A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
        saturation_var: NotRequired[builtins.str]
        """
        A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationHslArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationHslArgs:
    def __init__(__self__, *,
                 hue: Optional[builtins.str] = None,
                 hue_var: Optional[builtins.str] = None,
                 lightness: Optional[builtins.str] = None,
                 lightness_var: Optional[builtins.str] = None,
                 saturation: Optional[builtins.str] = None,
                 saturation_var: Optional[builtins.str] = None):
        """
        :param builtins.str hue: The number of degrees to rotate colors around the color wheel, `0` by default.
        :param builtins.str hue_var: The number of degrees to rotate colors around the color wheel, `0` by default.
        :param builtins.str lightness: A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
        :param builtins.str lightness_var: A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
        :param builtins.str saturation: A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        :param builtins.str saturation_var: A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if lightness is not None:
            pulumi.set(__self__, "lightness", lightness)
        if lightness_var is not None:
            pulumi.set(__self__, "lightness_var", lightness_var)
        if saturation is not None:
            pulumi.set(__self__, "saturation", saturation)
        if saturation_var is not None:
            pulumi.set(__self__, "saturation_var", saturation_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[builtins.str]:
        """
        The number of degrees to rotate colors around the color wheel, `0` by default.
        """
        return pulumi.get(self, "hue")

    @hue.setter
    def hue(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue", value)

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[builtins.str]:
        """
        The number of degrees to rotate colors around the color wheel, `0` by default.
        """
        return pulumi.get(self, "hue_var")

    @hue_var.setter
    def hue_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue_var", value)

    @property
    @pulumi.getter
    def lightness(self) -> Optional[builtins.str]:
        """
        A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
        """
        return pulumi.get(self, "lightness")

    @lightness.setter
    def lightness(self, value: Optional[builtins.str]):
        pulumi.set(self, "lightness", value)

    @property
    @pulumi.getter(name="lightnessVar")
    def lightness_var(self) -> Optional[builtins.str]:
        """
        A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
        """
        return pulumi.get(self, "lightness_var")

    @lightness_var.setter
    def lightness_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "lightness_var", value)

    @property
    @pulumi.getter
    def saturation(self) -> Optional[builtins.str]:
        """
        A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
        return pulumi.get(self, "saturation")

    @saturation.setter
    def saturation(self, value: Optional[builtins.str]):
        pulumi.set(self, "saturation", value)

    @property
    @pulumi.getter(name="saturationVar")
    def saturation_var(self) -> Optional[builtins.str]:
        """
        A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
        return pulumi.get(self, "saturation_var")

    @saturation_var.setter
    def saturation_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "saturation_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationHsvArgsDict(TypedDict):
        hue: NotRequired[builtins.str]
        """
        The number of degrees to rotate colors around the color wheel, `0.0` by default.
        """
        hue_var: NotRequired[builtins.str]
        """
        The number of degrees to rotate colors around the color wheel, `0.0` by default.
        """
        saturation: NotRequired[builtins.str]
        """
        A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
        saturation_var: NotRequired[builtins.str]
        """
        A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
        value: NotRequired[builtins.str]
        """
        A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
        """
        value_var: NotRequired[builtins.str]
        """
        A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationHsvArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationHsvArgs:
    def __init__(__self__, *,
                 hue: Optional[builtins.str] = None,
                 hue_var: Optional[builtins.str] = None,
                 saturation: Optional[builtins.str] = None,
                 saturation_var: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None,
                 value_var: Optional[builtins.str] = None):
        """
        :param builtins.str hue: The number of degrees to rotate colors around the color wheel, `0.0` by default.
        :param builtins.str hue_var: The number of degrees to rotate colors around the color wheel, `0.0` by default.
        :param builtins.str saturation: A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        :param builtins.str saturation_var: A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        :param builtins.str value: A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
        :param builtins.str value_var: A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
        """
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if saturation is not None:
            pulumi.set(__self__, "saturation", saturation)
        if saturation_var is not None:
            pulumi.set(__self__, "saturation_var", saturation_var)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_var is not None:
            pulumi.set(__self__, "value_var", value_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[builtins.str]:
        """
        The number of degrees to rotate colors around the color wheel, `0.0` by default.
        """
        return pulumi.get(self, "hue")

    @hue.setter
    def hue(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue", value)

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[builtins.str]:
        """
        The number of degrees to rotate colors around the color wheel, `0.0` by default.
        """
        return pulumi.get(self, "hue_var")

    @hue_var.setter
    def hue_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue_var", value)

    @property
    @pulumi.getter
    def saturation(self) -> Optional[builtins.str]:
        """
        A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
        return pulumi.get(self, "saturation")

    @saturation.setter
    def saturation(self, value: Optional[builtins.str]):
        pulumi.set(self, "saturation", value)

    @property
    @pulumi.getter(name="saturationVar")
    def saturation_var(self) -> Optional[builtins.str]:
        """
        A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
        """
        return pulumi.get(self, "saturation_var")

    @saturation_var.setter
    def saturation_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "saturation_var", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[builtins.str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueVar")
    def value_var(self) -> Optional[builtins.str]:
        """
        A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
        """
        return pulumi.get(self, "value_var")

    @value_var.setter
    def value_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "value_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationIfDimensionArgsDict(TypedDict):
        default: NotRequired['GetImagingPolicyImagePolicyTransformationArgsDict']
        dimension: NotRequired[builtins.str]
        """
        The dimension to use to select the transformation, either `height`, `width`, or `both`.
        """
        dimension_var: NotRequired[builtins.str]
        """
        The dimension to use to select the transformation, either `height`, `width`, or `both`.
        """
        equal: NotRequired['GetImagingPolicyImagePolicyTransformationArgsDict']
        greater_than: NotRequired['GetImagingPolicyImagePolicyTransformationArgsDict']
        less_than: NotRequired['GetImagingPolicyImagePolicyTransformationArgsDict']
        value: NotRequired[builtins.str]
        """
        The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
        """
        value_var: NotRequired[builtins.str]
        """
        The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationIfDimensionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationIfDimensionArgs:
    def __init__(__self__, *,
                 default: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 dimension: Optional[builtins.str] = None,
                 dimension_var: Optional[builtins.str] = None,
                 equal: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 greater_than: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 less_than: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 value: Optional[builtins.str] = None,
                 value_var: Optional[builtins.str] = None):
        """
        :param builtins.str dimension: The dimension to use to select the transformation, either `height`, `width`, or `both`.
        :param builtins.str dimension_var: The dimension to use to select the transformation, either `height`, `width`, or `both`.
        :param builtins.str value: The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
        :param builtins.str value_var: The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dimension is not None:
            pulumi.set(__self__, "dimension", dimension)
        if dimension_var is not None:
            pulumi.set(__self__, "dimension_var", dimension_var)
        if equal is not None:
            pulumi.set(__self__, "equal", equal)
        if greater_than is not None:
            pulumi.set(__self__, "greater_than", greater_than)
        if less_than is not None:
            pulumi.set(__self__, "less_than", less_than)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_var is not None:
            pulumi.set(__self__, "value_var", value_var)

    @property
    @pulumi.getter
    def default(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def dimension(self) -> Optional[builtins.str]:
        """
        The dimension to use to select the transformation, either `height`, `width`, or `both`.
        """
        return pulumi.get(self, "dimension")

    @dimension.setter
    def dimension(self, value: Optional[builtins.str]):
        pulumi.set(self, "dimension", value)

    @property
    @pulumi.getter(name="dimensionVar")
    def dimension_var(self) -> Optional[builtins.str]:
        """
        The dimension to use to select the transformation, either `height`, `width`, or `both`.
        """
        return pulumi.get(self, "dimension_var")

    @dimension_var.setter
    def dimension_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "dimension_var", value)

    @property
    @pulumi.getter
    def equal(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "equal")

    @equal.setter
    def equal(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "equal", value)

    @property
    @pulumi.getter(name="greaterThan")
    def greater_than(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "greater_than")

    @greater_than.setter
    def greater_than(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "greater_than", value)

    @property
    @pulumi.getter(name="lessThan")
    def less_than(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "less_than")

    @less_than.setter
    def less_than(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "less_than", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[builtins.str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueVar")
    def value_var(self) -> Optional[builtins.str]:
        """
        The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
        """
        return pulumi.get(self, "value_var")

    @value_var.setter
    def value_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "value_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationIfOrientationArgsDict(TypedDict):
        default: NotRequired['GetImagingPolicyImagePolicyTransformationArgsDict']
        landscape: NotRequired['GetImagingPolicyImagePolicyTransformationArgsDict']
        portrait: NotRequired['GetImagingPolicyImagePolicyTransformationArgsDict']
        square: NotRequired['GetImagingPolicyImagePolicyTransformationArgsDict']
elif False:
    GetImagingPolicyImagePolicyTransformationIfOrientationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationIfOrientationArgs:
    def __init__(__self__, *,
                 default: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 landscape: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 portrait: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 square: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if landscape is not None:
            pulumi.set(__self__, "landscape", landscape)
        if portrait is not None:
            pulumi.set(__self__, "portrait", portrait)
        if square is not None:
            pulumi.set(__self__, "square", square)

    @property
    @pulumi.getter
    def default(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def landscape(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "landscape")

    @landscape.setter
    def landscape(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "landscape", value)

    @property
    @pulumi.getter
    def portrait(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "portrait")

    @portrait.setter
    def portrait(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "portrait", value)

    @property
    @pulumi.getter
    def square(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "square")

    @square.setter
    def square(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "square", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationImQueryArgsDict(TypedDict):
        allowed_transformations: Sequence[builtins.str]
        """
        Specifies the transformations that can be applied using the query string parameter.
        """
        query_var: builtins.str
elif False:
    GetImagingPolicyImagePolicyTransformationImQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationImQueryArgs:
    def __init__(__self__, *,
                 allowed_transformations: Sequence[builtins.str],
                 query_var: builtins.str):
        """
        :param Sequence[builtins.str] allowed_transformations: Specifies the transformations that can be applied using the query string parameter.
        """
        pulumi.set(__self__, "allowed_transformations", allowed_transformations)
        pulumi.set(__self__, "query_var", query_var)

    @property
    @pulumi.getter(name="allowedTransformations")
    def allowed_transformations(self) -> Sequence[builtins.str]:
        """
        Specifies the transformations that can be applied using the query string parameter.
        """
        return pulumi.get(self, "allowed_transformations")

    @allowed_transformations.setter
    def allowed_transformations(self, value: Sequence[builtins.str]):
        pulumi.set(self, "allowed_transformations", value)

    @property
    @pulumi.getter(name="queryVar")
    def query_var(self) -> builtins.str:
        return pulumi.get(self, "query_var")

    @query_var.setter
    def query_var(self, value: builtins.str):
        pulumi.set(self, "query_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationMaxColorArgsDict(TypedDict):
        colors: NotRequired[builtins.str]
        """
        The value representing the maximum number of colors to use with the source image.
        """
        colors_var: NotRequired[builtins.str]
        """
        The value representing the maximum number of colors to use with the source image.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationMaxColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationMaxColorArgs:
    def __init__(__self__, *,
                 colors: Optional[builtins.str] = None,
                 colors_var: Optional[builtins.str] = None):
        """
        :param builtins.str colors: The value representing the maximum number of colors to use with the source image.
        :param builtins.str colors_var: The value representing the maximum number of colors to use with the source image.
        """
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if colors_var is not None:
            pulumi.set(__self__, "colors_var", colors_var)

    @property
    @pulumi.getter
    def colors(self) -> Optional[builtins.str]:
        """
        The value representing the maximum number of colors to use with the source image.
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[builtins.str]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="colorsVar")
    def colors_var(self) -> Optional[builtins.str]:
        """
        The value representing the maximum number of colors to use with the source image.
        """
        return pulumi.get(self, "colors_var")

    @colors_var.setter
    def colors_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "colors_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationMirrorArgsDict(TypedDict):
        horizontal: NotRequired[builtins.str]
        """
        Flips the image horizontally.
        """
        horizontal_var: NotRequired[builtins.str]
        """
        Flips the image horizontally.
        """
        vertical: NotRequired[builtins.str]
        """
        Flips the image vertically.
        """
        vertical_var: NotRequired[builtins.str]
        """
        Flips the image vertically.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationMirrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationMirrorArgs:
    def __init__(__self__, *,
                 horizontal: Optional[builtins.str] = None,
                 horizontal_var: Optional[builtins.str] = None,
                 vertical: Optional[builtins.str] = None,
                 vertical_var: Optional[builtins.str] = None):
        """
        :param builtins.str horizontal: Flips the image horizontally.
        :param builtins.str horizontal_var: Flips the image horizontally.
        :param builtins.str vertical: Flips the image vertically.
        :param builtins.str vertical_var: Flips the image vertically.
        """
        if horizontal is not None:
            pulumi.set(__self__, "horizontal", horizontal)
        if horizontal_var is not None:
            pulumi.set(__self__, "horizontal_var", horizontal_var)
        if vertical is not None:
            pulumi.set(__self__, "vertical", vertical)
        if vertical_var is not None:
            pulumi.set(__self__, "vertical_var", vertical_var)

    @property
    @pulumi.getter
    def horizontal(self) -> Optional[builtins.str]:
        """
        Flips the image horizontally.
        """
        return pulumi.get(self, "horizontal")

    @horizontal.setter
    def horizontal(self, value: Optional[builtins.str]):
        pulumi.set(self, "horizontal", value)

    @property
    @pulumi.getter(name="horizontalVar")
    def horizontal_var(self) -> Optional[builtins.str]:
        """
        Flips the image horizontally.
        """
        return pulumi.get(self, "horizontal_var")

    @horizontal_var.setter
    def horizontal_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "horizontal_var", value)

    @property
    @pulumi.getter
    def vertical(self) -> Optional[builtins.str]:
        """
        Flips the image vertically.
        """
        return pulumi.get(self, "vertical")

    @vertical.setter
    def vertical(self, value: Optional[builtins.str]):
        pulumi.set(self, "vertical", value)

    @property
    @pulumi.getter(name="verticalVar")
    def vertical_var(self) -> Optional[builtins.str]:
        """
        Flips the image vertically.
        """
        return pulumi.get(self, "vertical_var")

    @vertical_var.setter
    def vertical_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "vertical_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationMonoHueArgsDict(TypedDict):
        hue: NotRequired[builtins.str]
        """
        Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
        """
        hue_var: NotRequired[builtins.str]
        """
        Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationMonoHueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationMonoHueArgs:
    def __init__(__self__, *,
                 hue: Optional[builtins.str] = None,
                 hue_var: Optional[builtins.str] = None):
        """
        :param builtins.str hue: Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
        :param builtins.str hue_var: Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
        """
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[builtins.str]:
        """
        Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
        """
        return pulumi.get(self, "hue")

    @hue.setter
    def hue(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue", value)

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[builtins.str]:
        """
        Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
        """
        return pulumi.get(self, "hue_var")

    @hue_var.setter
    def hue_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "hue_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationOpacityArgsDict(TypedDict):
        opacity: NotRequired[builtins.str]
        """
        Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
        """
        opacity_var: NotRequired[builtins.str]
        """
        Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationOpacityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationOpacityArgs:
    def __init__(__self__, *,
                 opacity: Optional[builtins.str] = None,
                 opacity_var: Optional[builtins.str] = None):
        """
        :param builtins.str opacity: Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
        :param builtins.str opacity_var: Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
        """
        if opacity is not None:
            pulumi.set(__self__, "opacity", opacity)
        if opacity_var is not None:
            pulumi.set(__self__, "opacity_var", opacity_var)

    @property
    @pulumi.getter
    def opacity(self) -> Optional[builtins.str]:
        """
        Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
        """
        return pulumi.get(self, "opacity")

    @opacity.setter
    def opacity(self, value: Optional[builtins.str]):
        pulumi.set(self, "opacity", value)

    @property
    @pulumi.getter(name="opacityVar")
    def opacity_var(self) -> Optional[builtins.str]:
        """
        Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
        """
        return pulumi.get(self, "opacity_var")

    @opacity_var.setter
    def opacity_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "opacity_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgsDict(TypedDict):
        region_of_interest: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgsDict'
        gravity: NotRequired[builtins.str]
        """
        The placement of the crop area relative to the specified area of interest.
        """
        gravity_var: NotRequired[builtins.str]
        """
        The placement of the crop area relative to the specified area of interest.
        """
        height: NotRequired[builtins.str]
        """
        The height in pixels of the output image relative to the specified `style` value.
        """
        height_var: NotRequired[builtins.str]
        """
        The height in pixels of the output image relative to the specified `style` value.
        """
        style: NotRequired[builtins.str]
        """
        Specifies how to crop or scale a crop area for the specified area of interest in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
        """
        style_var: NotRequired[builtins.str]
        """
        Specifies how to crop or scale a crop area for the specified area of interest in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
        """
        width: NotRequired[builtins.str]
        """
        The width in pixels of the output image relative to the specified `style` value.
        """
        width_var: NotRequired[builtins.str]
        """
        The width in pixels of the output image relative to the specified `style` value.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs:
    def __init__(__self__, *,
                 region_of_interest: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs',
                 gravity: Optional[builtins.str] = None,
                 gravity_var: Optional[builtins.str] = None,
                 height: Optional[builtins.str] = None,
                 height_var: Optional[builtins.str] = None,
                 style: Optional[builtins.str] = None,
                 style_var: Optional[builtins.str] = None,
                 width: Optional[builtins.str] = None,
                 width_var: Optional[builtins.str] = None):
        """
        :param builtins.str gravity: The placement of the crop area relative to the specified area of interest.
        :param builtins.str gravity_var: The placement of the crop area relative to the specified area of interest.
        :param builtins.str height: The height in pixels of the output image relative to the specified `style` value.
        :param builtins.str height_var: The height in pixels of the output image relative to the specified `style` value.
        :param builtins.str style: Specifies how to crop or scale a crop area for the specified area of interest in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
        :param builtins.str style_var: Specifies how to crop or scale a crop area for the specified area of interest in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
        :param builtins.str width: The width in pixels of the output image relative to the specified `style` value.
        :param builtins.str width_var: The width in pixels of the output image relative to the specified `style` value.
        """
        pulumi.set(__self__, "region_of_interest", region_of_interest)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if style_var is not None:
            pulumi.set(__self__, "style_var", style_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter(name="regionOfInterest")
    def region_of_interest(self) -> 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs':
        return pulumi.get(self, "region_of_interest")

    @region_of_interest.setter
    def region_of_interest(self, value: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs'):
        pulumi.set(self, "region_of_interest", value)

    @property
    @pulumi.getter
    def gravity(self) -> Optional[builtins.str]:
        """
        The placement of the crop area relative to the specified area of interest.
        """
        return pulumi.get(self, "gravity")

    @gravity.setter
    def gravity(self, value: Optional[builtins.str]):
        pulumi.set(self, "gravity", value)

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[builtins.str]:
        """
        The placement of the crop area relative to the specified area of interest.
        """
        return pulumi.get(self, "gravity_var")

    @gravity_var.setter
    def gravity_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "gravity_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[builtins.str]:
        """
        The height in pixels of the output image relative to the specified `style` value.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[builtins.str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[builtins.str]:
        """
        The height in pixels of the output image relative to the specified `style` value.
        """
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[builtins.str]:
        """
        Specifies how to crop or scale a crop area for the specified area of interest in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[builtins.str]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter(name="styleVar")
    def style_var(self) -> Optional[builtins.str]:
        """
        Specifies how to crop or scale a crop area for the specified area of interest in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
        """
        return pulumi.get(self, "style_var")

    @style_var.setter
    def style_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "style_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.str]:
        """
        The width in pixels of the output image relative to the specified `style` value.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[builtins.str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[builtins.str]:
        """
        The width in pixels of the output image relative to the specified `style` value.
        """
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "width_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgsDict(TypedDict):
        circle_shapes: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgsDict']]
        """
        Defines a circle with a specified `radius` from its `center` point.
        """
        point_shapes: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgsDict']]
        polygon_shapes: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgsDict']]
        """
        Defines a polygon from a series of connected points.
        """
        rectangle_shapes: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgsDict']]
        """
        Defines a rectangle's `width` and `height` relative to an `anchor` point at the top left corner.
        """
        union_shapes: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgsDict']]
        """
        Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs:
    def __init__(__self__, *,
                 circle_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs']] = None,
                 point_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs']] = None,
                 polygon_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs']] = None,
                 rectangle_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs']] = None,
                 union_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs']] = None):
        """
        :param Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs'] circle_shapes: Defines a circle with a specified `radius` from its `center` point.
        :param Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs'] polygon_shapes: Defines a polygon from a series of connected points.
        :param Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs'] rectangle_shapes: Defines a rectangle's `width` and `height` relative to an `anchor` point at the top left corner.
        :param Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs'] union_shapes: Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
        """
        if circle_shapes is not None:
            pulumi.set(__self__, "circle_shapes", circle_shapes)
        if point_shapes is not None:
            pulumi.set(__self__, "point_shapes", point_shapes)
        if polygon_shapes is not None:
            pulumi.set(__self__, "polygon_shapes", polygon_shapes)
        if rectangle_shapes is not None:
            pulumi.set(__self__, "rectangle_shapes", rectangle_shapes)
        if union_shapes is not None:
            pulumi.set(__self__, "union_shapes", union_shapes)

    @property
    @pulumi.getter(name="circleShapes")
    def circle_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs']]:
        """
        Defines a circle with a specified `radius` from its `center` point.
        """
        return pulumi.get(self, "circle_shapes")

    @circle_shapes.setter
    def circle_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs']]):
        pulumi.set(self, "circle_shapes", value)

    @property
    @pulumi.getter(name="pointShapes")
    def point_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs']]:
        return pulumi.get(self, "point_shapes")

    @point_shapes.setter
    def point_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs']]):
        pulumi.set(self, "point_shapes", value)

    @property
    @pulumi.getter(name="polygonShapes")
    def polygon_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs']]:
        """
        Defines a polygon from a series of connected points.
        """
        return pulumi.get(self, "polygon_shapes")

    @polygon_shapes.setter
    def polygon_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs']]):
        pulumi.set(self, "polygon_shapes", value)

    @property
    @pulumi.getter(name="rectangleShapes")
    def rectangle_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs']]:
        """
        Defines a rectangle's `width` and `height` relative to an `anchor` point at the top left corner.
        """
        return pulumi.get(self, "rectangle_shapes")

    @rectangle_shapes.setter
    def rectangle_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs']]):
        pulumi.set(self, "rectangle_shapes", value)

    @property
    @pulumi.getter(name="unionShapes")
    def union_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs']]:
        """
        Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
        """
        return pulumi.get(self, "union_shapes")

    @union_shapes.setter
    def union_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs']]):
        pulumi.set(self, "union_shapes", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgsDict(TypedDict):
        center: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterArgsDict'
        """
        Defines coordinates for a single point, to help define polygons and rectangles. Each point may be an object with `x`and `y` members, or a two-element array.
        """
        radius: NotRequired[builtins.str]
        """
        The radius of the circle measured in pixels.
        """
        radius_var: NotRequired[builtins.str]
        """
        The radius of the circle measured in pixels.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs:
    def __init__(__self__, *,
                 center: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterArgs',
                 radius: Optional[builtins.str] = None,
                 radius_var: Optional[builtins.str] = None):
        """
        :param 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterArgs' center: Defines coordinates for a single point, to help define polygons and rectangles. Each point may be an object with `x`and `y` members, or a two-element array.
        :param builtins.str radius: The radius of the circle measured in pixels.
        :param builtins.str radius_var: The radius of the circle measured in pixels.
        """
        pulumi.set(__self__, "center", center)
        if radius is not None:
            pulumi.set(__self__, "radius", radius)
        if radius_var is not None:
            pulumi.set(__self__, "radius_var", radius_var)

    @property
    @pulumi.getter
    def center(self) -> 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterArgs':
        """
        Defines coordinates for a single point, to help define polygons and rectangles. Each point may be an object with `x`and `y` members, or a two-element array.
        """
        return pulumi.get(self, "center")

    @center.setter
    def center(self, value: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterArgs'):
        pulumi.set(self, "center", value)

    @property
    @pulumi.getter
    def radius(self) -> Optional[builtins.str]:
        """
        The radius of the circle measured in pixels.
        """
        return pulumi.get(self, "radius")

    @radius.setter
    def radius(self, value: Optional[builtins.str]):
        pulumi.set(self, "radius", value)

    @property
    @pulumi.getter(name="radiusVar")
    def radius_var(self) -> Optional[builtins.str]:
        """
        The radius of the circle measured in pixels.
        """
        return pulumi.get(self, "radius_var")

    @radius_var.setter
    def radius_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "radius_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterArgsDict(TypedDict):
        x: NotRequired[builtins.str]
        """
        The horizontal position of the point, measured in pixels.
        """
        x_var: NotRequired[builtins.str]
        """
        The horizontal position of the point, measured in pixels.
        """
        y: NotRequired[builtins.str]
        """
        The vertical position of the point, measured in pixels.
        """
        y_var: NotRequired[builtins.str]
        """
        The vertical position of the point, measured in pixels.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterArgs:
    def __init__(__self__, *,
                 x: Optional[builtins.str] = None,
                 x_var: Optional[builtins.str] = None,
                 y: Optional[builtins.str] = None,
                 y_var: Optional[builtins.str] = None):
        """
        :param builtins.str x: The horizontal position of the point, measured in pixels.
        :param builtins.str x_var: The horizontal position of the point, measured in pixels.
        :param builtins.str y: The vertical position of the point, measured in pixels.
        :param builtins.str y_var: The vertical position of the point, measured in pixels.
        """
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[builtins.str]:
        """
        The horizontal position of the point, measured in pixels.
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[builtins.str]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[builtins.str]:
        """
        The horizontal position of the point, measured in pixels.
        """
        return pulumi.get(self, "x_var")

    @x_var.setter
    def x_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_var", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[builtins.str]:
        """
        The vertical position of the point, measured in pixels.
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[builtins.str]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[builtins.str]:
        """
        The vertical position of the point, measured in pixels.
        """
        return pulumi.get(self, "y_var")

    @y_var.setter
    def y_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgsDict(TypedDict):
        x: NotRequired[builtins.str]
        """
        The horizontal position of the point, measured in pixels.
        """
        x_var: NotRequired[builtins.str]
        """
        The horizontal position of the point, measured in pixels.
        """
        y: NotRequired[builtins.str]
        """
        The vertical position of the point, measured in pixels.
        """
        y_var: NotRequired[builtins.str]
        """
        The vertical position of the point, measured in pixels.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs:
    def __init__(__self__, *,
                 x: Optional[builtins.str] = None,
                 x_var: Optional[builtins.str] = None,
                 y: Optional[builtins.str] = None,
                 y_var: Optional[builtins.str] = None):
        """
        :param builtins.str x: The horizontal position of the point, measured in pixels.
        :param builtins.str x_var: The horizontal position of the point, measured in pixels.
        :param builtins.str y: The vertical position of the point, measured in pixels.
        :param builtins.str y_var: The vertical position of the point, measured in pixels.
        """
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[builtins.str]:
        """
        The horizontal position of the point, measured in pixels.
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[builtins.str]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[builtins.str]:
        """
        The horizontal position of the point, measured in pixels.
        """
        return pulumi.get(self, "x_var")

    @x_var.setter
    def x_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_var", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[builtins.str]:
        """
        The vertical position of the point, measured in pixels.
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[builtins.str]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[builtins.str]:
        """
        The vertical position of the point, measured in pixels.
        """
        return pulumi.get(self, "y_var")

    @y_var.setter
    def y_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgsDict(TypedDict):
        points: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointArgsDict']
        """
        Series of PointShapeType objects. The last and first points connect to close the shape automatically.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs:
    def __init__(__self__, *,
                 points: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointArgs']):
        """
        :param Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointArgs'] points: Series of PointShapeType objects. The last and first points connect to close the shape automatically.
        """
        pulumi.set(__self__, "points", points)

    @property
    @pulumi.getter
    def points(self) -> Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointArgs']:
        """
        Series of PointShapeType objects. The last and first points connect to close the shape automatically.
        """
        return pulumi.get(self, "points")

    @points.setter
    def points(self, value: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointArgs']):
        pulumi.set(self, "points", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointArgsDict(TypedDict):
        x: NotRequired[builtins.str]
        """
        The horizontal position of the point, measured in pixels.
        """
        x_var: NotRequired[builtins.str]
        """
        The horizontal position of the point, measured in pixels.
        """
        y: NotRequired[builtins.str]
        """
        The vertical position of the point, measured in pixels.
        """
        y_var: NotRequired[builtins.str]
        """
        The vertical position of the point, measured in pixels.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointArgs:
    def __init__(__self__, *,
                 x: Optional[builtins.str] = None,
                 x_var: Optional[builtins.str] = None,
                 y: Optional[builtins.str] = None,
                 y_var: Optional[builtins.str] = None):
        """
        :param builtins.str x: The horizontal position of the point, measured in pixels.
        :param builtins.str x_var: The horizontal position of the point, measured in pixels.
        :param builtins.str y: The vertical position of the point, measured in pixels.
        :param builtins.str y_var: The vertical position of the point, measured in pixels.
        """
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[builtins.str]:
        """
        The horizontal position of the point, measured in pixels.
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[builtins.str]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[builtins.str]:
        """
        The horizontal position of the point, measured in pixels.
        """
        return pulumi.get(self, "x_var")

    @x_var.setter
    def x_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_var", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[builtins.str]:
        """
        The vertical position of the point, measured in pixels.
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[builtins.str]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[builtins.str]:
        """
        The vertical position of the point, measured in pixels.
        """
        return pulumi.get(self, "y_var")

    @y_var.setter
    def y_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgsDict(TypedDict):
        anchor: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorArgsDict'
        height: NotRequired[builtins.str]
        """
        Extends the rectangle down from the `anchor` point.
        """
        height_var: NotRequired[builtins.str]
        """
        Extends the rectangle down from the `anchor` point.
        """
        width: NotRequired[builtins.str]
        """
        Extends the rectangle right from the `anchor` point.
        """
        width_var: NotRequired[builtins.str]
        """
        Extends the rectangle right from the `anchor` point.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs:
    def __init__(__self__, *,
                 anchor: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorArgs',
                 height: Optional[builtins.str] = None,
                 height_var: Optional[builtins.str] = None,
                 width: Optional[builtins.str] = None,
                 width_var: Optional[builtins.str] = None):
        """
        :param builtins.str height: Extends the rectangle down from the `anchor` point.
        :param builtins.str height_var: Extends the rectangle down from the `anchor` point.
        :param builtins.str width: Extends the rectangle right from the `anchor` point.
        :param builtins.str width_var: Extends the rectangle right from the `anchor` point.
        """
        pulumi.set(__self__, "anchor", anchor)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def anchor(self) -> 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorArgs':
        return pulumi.get(self, "anchor")

    @anchor.setter
    def anchor(self, value: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorArgs'):
        pulumi.set(self, "anchor", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[builtins.str]:
        """
        Extends the rectangle down from the `anchor` point.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[builtins.str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[builtins.str]:
        """
        Extends the rectangle down from the `anchor` point.
        """
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.str]:
        """
        Extends the rectangle right from the `anchor` point.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[builtins.str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[builtins.str]:
        """
        Extends the rectangle right from the `anchor` point.
        """
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "width_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorArgsDict(TypedDict):
        x: NotRequired[builtins.str]
        """
        The horizontal position of the point, measured in pixels.
        """
        x_var: NotRequired[builtins.str]
        """
        The horizontal position of the point, measured in pixels.
        """
        y: NotRequired[builtins.str]
        """
        The vertical position of the point, measured in pixels.
        """
        y_var: NotRequired[builtins.str]
        """
        The vertical position of the point, measured in pixels.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorArgs:
    def __init__(__self__, *,
                 x: Optional[builtins.str] = None,
                 x_var: Optional[builtins.str] = None,
                 y: Optional[builtins.str] = None,
                 y_var: Optional[builtins.str] = None):
        """
        :param builtins.str x: The horizontal position of the point, measured in pixels.
        :param builtins.str x_var: The horizontal position of the point, measured in pixels.
        :param builtins.str y: The vertical position of the point, measured in pixels.
        :param builtins.str y_var: The vertical position of the point, measured in pixels.
        """
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[builtins.str]:
        """
        The horizontal position of the point, measured in pixels.
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[builtins.str]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[builtins.str]:
        """
        The horizontal position of the point, measured in pixels.
        """
        return pulumi.get(self, "x_var")

    @x_var.setter
    def x_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_var", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[builtins.str]:
        """
        The vertical position of the point, measured in pixels.
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[builtins.str]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[builtins.str]:
        """
        The vertical position of the point, measured in pixels.
        """
        return pulumi.get(self, "y_var")

    @y_var.setter
    def y_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgsDict(TypedDict):
        shapes: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeArgsDict']
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs:
    def __init__(__self__, *,
                 shapes: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeArgs']):
        pulumi.set(__self__, "shapes", shapes)

    @property
    @pulumi.getter
    def shapes(self) -> Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeArgs']:
        return pulumi.get(self, "shapes")

    @shapes.setter
    def shapes(self, value: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeArgs']):
        pulumi.set(self, "shapes", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeArgsDict(TypedDict):
        circle_shapes: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeArgsDict']]
        """
        Defines a circle with a specified `radius` from its `center` point.
        """
        point_shapes: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeArgsDict']]
        polygon_shapes: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeArgsDict']]
        """
        Defines a polygon from a series of connected points.
        """
        rectangle_shapes: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeArgsDict']]
        """
        Defines a rectangle's `width` and `height` relative to an `anchor` point at the top left corner.
        """
        union_shapes: NotRequired[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeArgsDict']]
        """
        Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeArgs:
    def __init__(__self__, *,
                 circle_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeArgs']] = None,
                 point_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeArgs']] = None,
                 polygon_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeArgs']] = None,
                 rectangle_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeArgs']] = None,
                 union_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeArgs']] = None):
        """
        :param Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeArgs'] circle_shapes: Defines a circle with a specified `radius` from its `center` point.
        :param Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeArgs'] polygon_shapes: Defines a polygon from a series of connected points.
        :param Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeArgs'] rectangle_shapes: Defines a rectangle's `width` and `height` relative to an `anchor` point at the top left corner.
        :param Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeArgs'] union_shapes: Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
        """
        if circle_shapes is not None:
            pulumi.set(__self__, "circle_shapes", circle_shapes)
        if point_shapes is not None:
            pulumi.set(__self__, "point_shapes", point_shapes)
        if polygon_shapes is not None:
            pulumi.set(__self__, "polygon_shapes", polygon_shapes)
        if rectangle_shapes is not None:
            pulumi.set(__self__, "rectangle_shapes", rectangle_shapes)
        if union_shapes is not None:
            pulumi.set(__self__, "union_shapes", union_shapes)

    @property
    @pulumi.getter(name="circleShapes")
    def circle_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeArgs']]:
        """
        Defines a circle with a specified `radius` from its `center` point.
        """
        return pulumi.get(self, "circle_shapes")

    @circle_shapes.setter
    def circle_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeArgs']]):
        pulumi.set(self, "circle_shapes", value)

    @property
    @pulumi.getter(name="pointShapes")
    def point_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeArgs']]:
        return pulumi.get(self, "point_shapes")

    @point_shapes.setter
    def point_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeArgs']]):
        pulumi.set(self, "point_shapes", value)

    @property
    @pulumi.getter(name="polygonShapes")
    def polygon_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeArgs']]:
        """
        Defines a polygon from a series of connected points.
        """
        return pulumi.get(self, "polygon_shapes")

    @polygon_shapes.setter
    def polygon_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeArgs']]):
        pulumi.set(self, "polygon_shapes", value)

    @property
    @pulumi.getter(name="rectangleShapes")
    def rectangle_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeArgs']]:
        """
        Defines a rectangle's `width` and `height` relative to an `anchor` point at the top left corner.
        """
        return pulumi.get(self, "rectangle_shapes")

    @rectangle_shapes.setter
    def rectangle_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeArgs']]):
        pulumi.set(self, "rectangle_shapes", value)

    @property
    @pulumi.getter(name="unionShapes")
    def union_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeArgs']]:
        """
        Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
        """
        return pulumi.get(self, "union_shapes")

    @union_shapes.setter
    def union_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeArgs']]):
        pulumi.set(self, "union_shapes", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeArgsDict(TypedDict):
        center: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterArgsDict'
        """
        Defines coordinates for a single point, to help define polygons and rectangles. Each point may be an object with `x`and `y` members, or a two-element array.
        """
        radius: NotRequired[builtins.str]
        """
        The radius of the circle measured in pixels.
        """
        radius_var: NotRequired[builtins.str]
        """
        The radius of the circle measured in pixels.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeArgs:
    def __init__(__self__, *,
                 center: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterArgs',
                 radius: Optional[builtins.str] = None,
                 radius_var: Optional[builtins.str] = None):
        """
        :param 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterArgs' center: Defines coordinates for a single point, to help define polygons and rectangles. Each point may be an object with `x`and `y` members, or a two-element array.
        :param builtins.str radius: The radius of the circle measured in pixels.
        :param builtins.str radius_var: The radius of the circle measured in pixels.
        """
        pulumi.set(__self__, "center", center)
        if radius is not None:
            pulumi.set(__self__, "radius", radius)
        if radius_var is not None:
            pulumi.set(__self__, "radius_var", radius_var)

    @property
    @pulumi.getter
    def center(self) -> 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterArgs':
        """
        Defines coordinates for a single point, to help define polygons and rectangles. Each point may be an object with `x`and `y` members, or a two-element array.
        """
        return pulumi.get(self, "center")

    @center.setter
    def center(self, value: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterArgs'):
        pulumi.set(self, "center", value)

    @property
    @pulumi.getter
    def radius(self) -> Optional[builtins.str]:
        """
        The radius of the circle measured in pixels.
        """
        return pulumi.get(self, "radius")

    @radius.setter
    def radius(self, value: Optional[builtins.str]):
        pulumi.set(self, "radius", value)

    @property
    @pulumi.getter(name="radiusVar")
    def radius_var(self) -> Optional[builtins.str]:
        """
        The radius of the circle measured in pixels.
        """
        return pulumi.get(self, "radius_var")

    @radius_var.setter
    def radius_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "radius_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterArgsDict(TypedDict):
        x: NotRequired[builtins.str]
        """
        The horizontal position of the point, measured in pixels.
        """
        x_var: NotRequired[builtins.str]
        """
        The horizontal position of the point, measured in pixels.
        """
        y: NotRequired[builtins.str]
        """
        The vertical position of the point, measured in pixels.
        """
        y_var: NotRequired[builtins.str]
        """
        The vertical position of the point, measured in pixels.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterArgs:
    def __init__(__self__, *,
                 x: Optional[builtins.str] = None,
                 x_var: Optional[builtins.str] = None,
                 y: Optional[builtins.str] = None,
                 y_var: Optional[builtins.str] = None):
        """
        :param builtins.str x: The horizontal position of the point, measured in pixels.
        :param builtins.str x_var: The horizontal position of the point, measured in pixels.
        :param builtins.str y: The vertical position of the point, measured in pixels.
        :param builtins.str y_var: The vertical position of the point, measured in pixels.
        """
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[builtins.str]:
        """
        The horizontal position of the point, measured in pixels.
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[builtins.str]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[builtins.str]:
        """
        The horizontal position of the point, measured in pixels.
        """
        return pulumi.get(self, "x_var")

    @x_var.setter
    def x_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_var", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[builtins.str]:
        """
        The vertical position of the point, measured in pixels.
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[builtins.str]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[builtins.str]:
        """
        The vertical position of the point, measured in pixels.
        """
        return pulumi.get(self, "y_var")

    @y_var.setter
    def y_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeArgsDict(TypedDict):
        x: NotRequired[builtins.str]
        """
        The horizontal position of the point, measured in pixels.
        """
        x_var: NotRequired[builtins.str]
        """
        The horizontal position of the point, measured in pixels.
        """
        y: NotRequired[builtins.str]
        """
        The vertical position of the point, measured in pixels.
        """
        y_var: NotRequired[builtins.str]
        """
        The vertical position of the point, measured in pixels.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeArgs:
    def __init__(__self__, *,
                 x: Optional[builtins.str] = None,
                 x_var: Optional[builtins.str] = None,
                 y: Optional[builtins.str] = None,
                 y_var: Optional[builtins.str] = None):
        """
        :param builtins.str x: The horizontal position of the point, measured in pixels.
        :param builtins.str x_var: The horizontal position of the point, measured in pixels.
        :param builtins.str y: The vertical position of the point, measured in pixels.
        :param builtins.str y_var: The vertical position of the point, measured in pixels.
        """
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[builtins.str]:
        """
        The horizontal position of the point, measured in pixels.
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[builtins.str]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[builtins.str]:
        """
        The horizontal position of the point, measured in pixels.
        """
        return pulumi.get(self, "x_var")

    @x_var.setter
    def x_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_var", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[builtins.str]:
        """
        The vertical position of the point, measured in pixels.
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[builtins.str]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[builtins.str]:
        """
        The vertical position of the point, measured in pixels.
        """
        return pulumi.get(self, "y_var")

    @y_var.setter
    def y_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeArgsDict(TypedDict):
        points: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointArgsDict']
        """
        Series of PointShapeType objects. The last and first points connect to close the shape automatically.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeArgs:
    def __init__(__self__, *,
                 points: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointArgs']):
        """
        :param Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointArgs'] points: Series of PointShapeType objects. The last and first points connect to close the shape automatically.
        """
        pulumi.set(__self__, "points", points)

    @property
    @pulumi.getter
    def points(self) -> Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointArgs']:
        """
        Series of PointShapeType objects. The last and first points connect to close the shape automatically.
        """
        return pulumi.get(self, "points")

    @points.setter
    def points(self, value: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointArgs']):
        pulumi.set(self, "points", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointArgsDict(TypedDict):
        x: NotRequired[builtins.str]
        """
        The horizontal position of the point, measured in pixels.
        """
        x_var: NotRequired[builtins.str]
        """
        The horizontal position of the point, measured in pixels.
        """
        y: NotRequired[builtins.str]
        """
        The vertical position of the point, measured in pixels.
        """
        y_var: NotRequired[builtins.str]
        """
        The vertical position of the point, measured in pixels.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointArgs:
    def __init__(__self__, *,
                 x: Optional[builtins.str] = None,
                 x_var: Optional[builtins.str] = None,
                 y: Optional[builtins.str] = None,
                 y_var: Optional[builtins.str] = None):
        """
        :param builtins.str x: The horizontal position of the point, measured in pixels.
        :param builtins.str x_var: The horizontal position of the point, measured in pixels.
        :param builtins.str y: The vertical position of the point, measured in pixels.
        :param builtins.str y_var: The vertical position of the point, measured in pixels.
        """
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[builtins.str]:
        """
        The horizontal position of the point, measured in pixels.
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[builtins.str]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[builtins.str]:
        """
        The horizontal position of the point, measured in pixels.
        """
        return pulumi.get(self, "x_var")

    @x_var.setter
    def x_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_var", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[builtins.str]:
        """
        The vertical position of the point, measured in pixels.
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[builtins.str]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[builtins.str]:
        """
        The vertical position of the point, measured in pixels.
        """
        return pulumi.get(self, "y_var")

    @y_var.setter
    def y_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeArgsDict(TypedDict):
        anchor: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorArgsDict'
        height: NotRequired[builtins.str]
        """
        Extends the rectangle down from the `anchor` point.
        """
        height_var: NotRequired[builtins.str]
        """
        Extends the rectangle down from the `anchor` point.
        """
        width: NotRequired[builtins.str]
        """
        Extends the rectangle right from the `anchor` point.
        """
        width_var: NotRequired[builtins.str]
        """
        Extends the rectangle right from the `anchor` point.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeArgs:
    def __init__(__self__, *,
                 anchor: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorArgs',
                 height: Optional[builtins.str] = None,
                 height_var: Optional[builtins.str] = None,
                 width: Optional[builtins.str] = None,
                 width_var: Optional[builtins.str] = None):
        """
        :param builtins.str height: Extends the rectangle down from the `anchor` point.
        :param builtins.str height_var: Extends the rectangle down from the `anchor` point.
        :param builtins.str width: Extends the rectangle right from the `anchor` point.
        :param builtins.str width_var: Extends the rectangle right from the `anchor` point.
        """
        pulumi.set(__self__, "anchor", anchor)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def anchor(self) -> 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorArgs':
        return pulumi.get(self, "anchor")

    @anchor.setter
    def anchor(self, value: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorArgs'):
        pulumi.set(self, "anchor", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[builtins.str]:
        """
        Extends the rectangle down from the `anchor` point.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[builtins.str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[builtins.str]:
        """
        Extends the rectangle down from the `anchor` point.
        """
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.str]:
        """
        Extends the rectangle right from the `anchor` point.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[builtins.str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[builtins.str]:
        """
        Extends the rectangle right from the `anchor` point.
        """
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "width_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorArgsDict(TypedDict):
        x: NotRequired[builtins.str]
        """
        The horizontal position of the point, measured in pixels.
        """
        x_var: NotRequired[builtins.str]
        """
        The horizontal position of the point, measured in pixels.
        """
        y: NotRequired[builtins.str]
        """
        The vertical position of the point, measured in pixels.
        """
        y_var: NotRequired[builtins.str]
        """
        The vertical position of the point, measured in pixels.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorArgs:
    def __init__(__self__, *,
                 x: Optional[builtins.str] = None,
                 x_var: Optional[builtins.str] = None,
                 y: Optional[builtins.str] = None,
                 y_var: Optional[builtins.str] = None):
        """
        :param builtins.str x: The horizontal position of the point, measured in pixels.
        :param builtins.str x_var: The horizontal position of the point, measured in pixels.
        :param builtins.str y: The vertical position of the point, measured in pixels.
        :param builtins.str y_var: The vertical position of the point, measured in pixels.
        """
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[builtins.str]:
        """
        The horizontal position of the point, measured in pixels.
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[builtins.str]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[builtins.str]:
        """
        The horizontal position of the point, measured in pixels.
        """
        return pulumi.get(self, "x_var")

    @x_var.setter
    def x_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_var", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[builtins.str]:
        """
        The vertical position of the point, measured in pixels.
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[builtins.str]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[builtins.str]:
        """
        The vertical position of the point, measured in pixels.
        """
        return pulumi.get(self, "y_var")

    @y_var.setter
    def y_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeArgsDict(TypedDict):
        shapes: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeArgsDict']
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeArgs:
    def __init__(__self__, *,
                 shapes: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeArgs']):
        pulumi.set(__self__, "shapes", shapes)

    @property
    @pulumi.getter
    def shapes(self) -> Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeArgs']:
        return pulumi.get(self, "shapes")

    @shapes.setter
    def shapes(self, value: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeArgs']):
        pulumi.set(self, "shapes", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeArgsDict(TypedDict):
        pass
elif False:
    GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRelativeCropArgsDict(TypedDict):
        east: NotRequired[builtins.str]
        """
        The number of pixels to shrink or expand the right side of the image.
        """
        east_var: NotRequired[builtins.str]
        """
        The number of pixels to shrink or expand the right side of the image.
        """
        north: NotRequired[builtins.str]
        """
        The number of pixels to shrink or expand the top side of the image.
        """
        north_var: NotRequired[builtins.str]
        """
        The number of pixels to shrink or expand the top side of the image.
        """
        south: NotRequired[builtins.str]
        """
        The number of pixels to shrink or expand the bottom side of the image.
        """
        south_var: NotRequired[builtins.str]
        """
        The number of pixels to shrink or expand the bottom side of the image.
        """
        west: NotRequired[builtins.str]
        """
        The number of pixels to shrink or expand the left side of the image.
        """
        west_var: NotRequired[builtins.str]
        """
        The number of pixels to shrink or expand the left side of the image.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRelativeCropArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRelativeCropArgs:
    def __init__(__self__, *,
                 east: Optional[builtins.str] = None,
                 east_var: Optional[builtins.str] = None,
                 north: Optional[builtins.str] = None,
                 north_var: Optional[builtins.str] = None,
                 south: Optional[builtins.str] = None,
                 south_var: Optional[builtins.str] = None,
                 west: Optional[builtins.str] = None,
                 west_var: Optional[builtins.str] = None):
        """
        :param builtins.str east: The number of pixels to shrink or expand the right side of the image.
        :param builtins.str east_var: The number of pixels to shrink or expand the right side of the image.
        :param builtins.str north: The number of pixels to shrink or expand the top side of the image.
        :param builtins.str north_var: The number of pixels to shrink or expand the top side of the image.
        :param builtins.str south: The number of pixels to shrink or expand the bottom side of the image.
        :param builtins.str south_var: The number of pixels to shrink or expand the bottom side of the image.
        :param builtins.str west: The number of pixels to shrink or expand the left side of the image.
        :param builtins.str west_var: The number of pixels to shrink or expand the left side of the image.
        """
        if east is not None:
            pulumi.set(__self__, "east", east)
        if east_var is not None:
            pulumi.set(__self__, "east_var", east_var)
        if north is not None:
            pulumi.set(__self__, "north", north)
        if north_var is not None:
            pulumi.set(__self__, "north_var", north_var)
        if south is not None:
            pulumi.set(__self__, "south", south)
        if south_var is not None:
            pulumi.set(__self__, "south_var", south_var)
        if west is not None:
            pulumi.set(__self__, "west", west)
        if west_var is not None:
            pulumi.set(__self__, "west_var", west_var)

    @property
    @pulumi.getter
    def east(self) -> Optional[builtins.str]:
        """
        The number of pixels to shrink or expand the right side of the image.
        """
        return pulumi.get(self, "east")

    @east.setter
    def east(self, value: Optional[builtins.str]):
        pulumi.set(self, "east", value)

    @property
    @pulumi.getter(name="eastVar")
    def east_var(self) -> Optional[builtins.str]:
        """
        The number of pixels to shrink or expand the right side of the image.
        """
        return pulumi.get(self, "east_var")

    @east_var.setter
    def east_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "east_var", value)

    @property
    @pulumi.getter
    def north(self) -> Optional[builtins.str]:
        """
        The number of pixels to shrink or expand the top side of the image.
        """
        return pulumi.get(self, "north")

    @north.setter
    def north(self, value: Optional[builtins.str]):
        pulumi.set(self, "north", value)

    @property
    @pulumi.getter(name="northVar")
    def north_var(self) -> Optional[builtins.str]:
        """
        The number of pixels to shrink or expand the top side of the image.
        """
        return pulumi.get(self, "north_var")

    @north_var.setter
    def north_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "north_var", value)

    @property
    @pulumi.getter
    def south(self) -> Optional[builtins.str]:
        """
        The number of pixels to shrink or expand the bottom side of the image.
        """
        return pulumi.get(self, "south")

    @south.setter
    def south(self, value: Optional[builtins.str]):
        pulumi.set(self, "south", value)

    @property
    @pulumi.getter(name="southVar")
    def south_var(self) -> Optional[builtins.str]:
        """
        The number of pixels to shrink or expand the bottom side of the image.
        """
        return pulumi.get(self, "south_var")

    @south_var.setter
    def south_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "south_var", value)

    @property
    @pulumi.getter
    def west(self) -> Optional[builtins.str]:
        """
        The number of pixels to shrink or expand the left side of the image.
        """
        return pulumi.get(self, "west")

    @west.setter
    def west(self, value: Optional[builtins.str]):
        pulumi.set(self, "west", value)

    @property
    @pulumi.getter(name="westVar")
    def west_var(self) -> Optional[builtins.str]:
        """
        The number of pixels to shrink or expand the left side of the image.
        """
        return pulumi.get(self, "west_var")

    @west_var.setter
    def west_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "west_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRemoveColorArgsDict(TypedDict):
        color: NotRequired[builtins.str]
        """
        The hexadecimal CSS color value to remove.
        """
        color_var: NotRequired[builtins.str]
        """
        The hexadecimal CSS color value to remove.
        """
        feather: NotRequired[builtins.str]
        """
        The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
        """
        feather_var: NotRequired[builtins.str]
        """
        The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
        """
        tolerance: NotRequired[builtins.str]
        """
        The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
        """
        tolerance_var: NotRequired[builtins.str]
        """
        The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRemoveColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRemoveColorArgs:
    def __init__(__self__, *,
                 color: Optional[builtins.str] = None,
                 color_var: Optional[builtins.str] = None,
                 feather: Optional[builtins.str] = None,
                 feather_var: Optional[builtins.str] = None,
                 tolerance: Optional[builtins.str] = None,
                 tolerance_var: Optional[builtins.str] = None):
        """
        :param builtins.str color: The hexadecimal CSS color value to remove.
        :param builtins.str color_var: The hexadecimal CSS color value to remove.
        :param builtins.str feather: The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
        :param builtins.str feather_var: The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
        :param builtins.str tolerance: The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
        :param builtins.str tolerance_var: The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if feather is not None:
            pulumi.set(__self__, "feather", feather)
        if feather_var is not None:
            pulumi.set(__self__, "feather_var", feather_var)
        if tolerance is not None:
            pulumi.set(__self__, "tolerance", tolerance)
        if tolerance_var is not None:
            pulumi.set(__self__, "tolerance_var", tolerance_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[builtins.str]:
        """
        The hexadecimal CSS color value to remove.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[builtins.str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[builtins.str]:
        """
        The hexadecimal CSS color value to remove.
        """
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "color_var", value)

    @property
    @pulumi.getter
    def feather(self) -> Optional[builtins.str]:
        """
        The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
        """
        return pulumi.get(self, "feather")

    @feather.setter
    def feather(self, value: Optional[builtins.str]):
        pulumi.set(self, "feather", value)

    @property
    @pulumi.getter(name="featherVar")
    def feather_var(self) -> Optional[builtins.str]:
        """
        The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
        """
        return pulumi.get(self, "feather_var")

    @feather_var.setter
    def feather_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "feather_var", value)

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[builtins.str]:
        """
        The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
        """
        return pulumi.get(self, "tolerance")

    @tolerance.setter
    def tolerance(self, value: Optional[builtins.str]):
        pulumi.set(self, "tolerance", value)

    @property
    @pulumi.getter(name="toleranceVar")
    def tolerance_var(self) -> Optional[builtins.str]:
        """
        The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
        """
        return pulumi.get(self, "tolerance_var")

    @tolerance_var.setter
    def tolerance_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "tolerance_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationResizeArgsDict(TypedDict):
        aspect: NotRequired[builtins.str]
        """
        Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
        """
        aspect_var: NotRequired[builtins.str]
        """
        Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
        """
        height: NotRequired[builtins.str]
        """
        The height to resize the source image to. Must be set if height is not specified.
        """
        height_var: NotRequired[builtins.str]
        """
        The height to resize the source image to. Must be set if height is not specified.
        """
        type: NotRequired[builtins.str]
        """
        Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
        """
        type_var: NotRequired[builtins.str]
        """
        Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
        """
        width: NotRequired[builtins.str]
        """
        The width to resize the source image to. Must be set if width is not specified.
        """
        width_var: NotRequired[builtins.str]
        """
        The width to resize the source image to. Must be set if width is not specified.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationResizeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationResizeArgs:
    def __init__(__self__, *,
                 aspect: Optional[builtins.str] = None,
                 aspect_var: Optional[builtins.str] = None,
                 height: Optional[builtins.str] = None,
                 height_var: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None,
                 type_var: Optional[builtins.str] = None,
                 width: Optional[builtins.str] = None,
                 width_var: Optional[builtins.str] = None):
        """
        :param builtins.str aspect: Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
        :param builtins.str aspect_var: Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
        :param builtins.str height: The height to resize the source image to. Must be set if height is not specified.
        :param builtins.str height_var: The height to resize the source image to. Must be set if height is not specified.
        :param builtins.str type: Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
        :param builtins.str type_var: Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
        :param builtins.str width: The width to resize the source image to. Must be set if width is not specified.
        :param builtins.str width_var: The width to resize the source image to. Must be set if width is not specified.
        """
        if aspect is not None:
            pulumi.set(__self__, "aspect", aspect)
        if aspect_var is not None:
            pulumi.set(__self__, "aspect_var", aspect_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type_var is not None:
            pulumi.set(__self__, "type_var", type_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def aspect(self) -> Optional[builtins.str]:
        """
        Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
        """
        return pulumi.get(self, "aspect")

    @aspect.setter
    def aspect(self, value: Optional[builtins.str]):
        pulumi.set(self, "aspect", value)

    @property
    @pulumi.getter(name="aspectVar")
    def aspect_var(self) -> Optional[builtins.str]:
        """
        Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
        """
        return pulumi.get(self, "aspect_var")

    @aspect_var.setter
    def aspect_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "aspect_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[builtins.str]:
        """
        The height to resize the source image to. Must be set if height is not specified.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[builtins.str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[builtins.str]:
        """
        The height to resize the source image to. Must be set if height is not specified.
        """
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="typeVar")
    def type_var(self) -> Optional[builtins.str]:
        """
        Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
        """
        return pulumi.get(self, "type_var")

    @type_var.setter
    def type_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "type_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.str]:
        """
        The width to resize the source image to. Must be set if width is not specified.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[builtins.str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[builtins.str]:
        """
        The width to resize the source image to. Must be set if width is not specified.
        """
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "width_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationRotateArgsDict(TypedDict):
        degrees: NotRequired[builtins.str]
        """
        The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
        """
        degrees_var: NotRequired[builtins.str]
        """
        The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationRotateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRotateArgs:
    def __init__(__self__, *,
                 degrees: Optional[builtins.str] = None,
                 degrees_var: Optional[builtins.str] = None):
        """
        :param builtins.str degrees: The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
        :param builtins.str degrees_var: The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
        """
        if degrees is not None:
            pulumi.set(__self__, "degrees", degrees)
        if degrees_var is not None:
            pulumi.set(__self__, "degrees_var", degrees_var)

    @property
    @pulumi.getter
    def degrees(self) -> Optional[builtins.str]:
        """
        The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
        """
        return pulumi.get(self, "degrees")

    @degrees.setter
    def degrees(self, value: Optional[builtins.str]):
        pulumi.set(self, "degrees", value)

    @property
    @pulumi.getter(name="degreesVar")
    def degrees_var(self) -> Optional[builtins.str]:
        """
        The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
        """
        return pulumi.get(self, "degrees_var")

    @degrees_var.setter
    def degrees_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "degrees_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationScaleArgsDict(TypedDict):
        height: NotRequired[builtins.str]
        """
        Scaling factor for the input height to determine the output height of the image, where values between `0` and `1` decrease size. Image dimensions need to be non-zero positive numbers.
        """
        height_var: NotRequired[builtins.str]
        """
        Scaling factor for the input height to determine the output height of the image, where values between `0` and `1` decrease size. Image dimensions need to be non-zero positive numbers.
        """
        width: NotRequired[builtins.str]
        """
        Scaling factor for the input width to determine the output width of the image, where `1` leaves the width unchanged. Values greater than `1` increase the image size. Image dimensions need to be non-zero positive numbers.
        """
        width_var: NotRequired[builtins.str]
        """
        Scaling factor for the input width to determine the output width of the image, where `1` leaves the width unchanged. Values greater than `1` increase the image size. Image dimensions need to be non-zero positive numbers.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationScaleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationScaleArgs:
    def __init__(__self__, *,
                 height: Optional[builtins.str] = None,
                 height_var: Optional[builtins.str] = None,
                 width: Optional[builtins.str] = None,
                 width_var: Optional[builtins.str] = None):
        """
        :param builtins.str height: Scaling factor for the input height to determine the output height of the image, where values between `0` and `1` decrease size. Image dimensions need to be non-zero positive numbers.
        :param builtins.str height_var: Scaling factor for the input height to determine the output height of the image, where values between `0` and `1` decrease size. Image dimensions need to be non-zero positive numbers.
        :param builtins.str width: Scaling factor for the input width to determine the output width of the image, where `1` leaves the width unchanged. Values greater than `1` increase the image size. Image dimensions need to be non-zero positive numbers.
        :param builtins.str width_var: Scaling factor for the input width to determine the output width of the image, where `1` leaves the width unchanged. Values greater than `1` increase the image size. Image dimensions need to be non-zero positive numbers.
        """
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def height(self) -> Optional[builtins.str]:
        """
        Scaling factor for the input height to determine the output height of the image, where values between `0` and `1` decrease size. Image dimensions need to be non-zero positive numbers.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[builtins.str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[builtins.str]:
        """
        Scaling factor for the input height to determine the output height of the image, where values between `0` and `1` decrease size. Image dimensions need to be non-zero positive numbers.
        """
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.str]:
        """
        Scaling factor for the input width to determine the output width of the image, where `1` leaves the width unchanged. Values greater than `1` increase the image size. Image dimensions need to be non-zero positive numbers.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[builtins.str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[builtins.str]:
        """
        Scaling factor for the input width to determine the output width of the image, where `1` leaves the width unchanged. Values greater than `1` increase the image size. Image dimensions need to be non-zero positive numbers.
        """
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "width_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationShearsArgsDict(TypedDict):
        x_shear: NotRequired[builtins.str]
        """
        The amount to shear along the x-axis, measured in multiples of the image's width. Must be set if yShear is not specified.
        """
        x_shear_var: NotRequired[builtins.str]
        """
        The amount to shear along the x-axis, measured in multiples of the image's width. Must be set if yShear is not specified.
        """
        y_shear: NotRequired[builtins.str]
        """
        The amount to shear along the y-axis, measured in multiples of the image's height. Must be set if xShear is not specified.
        """
        y_shear_var: NotRequired[builtins.str]
        """
        The amount to shear along the y-axis, measured in multiples of the image's height. Must be set if xShear is not specified.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationShearsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationShearsArgs:
    def __init__(__self__, *,
                 x_shear: Optional[builtins.str] = None,
                 x_shear_var: Optional[builtins.str] = None,
                 y_shear: Optional[builtins.str] = None,
                 y_shear_var: Optional[builtins.str] = None):
        """
        :param builtins.str x_shear: The amount to shear along the x-axis, measured in multiples of the image's width. Must be set if yShear is not specified.
        :param builtins.str x_shear_var: The amount to shear along the x-axis, measured in multiples of the image's width. Must be set if yShear is not specified.
        :param builtins.str y_shear: The amount to shear along the y-axis, measured in multiples of the image's height. Must be set if xShear is not specified.
        :param builtins.str y_shear_var: The amount to shear along the y-axis, measured in multiples of the image's height. Must be set if xShear is not specified.
        """
        if x_shear is not None:
            pulumi.set(__self__, "x_shear", x_shear)
        if x_shear_var is not None:
            pulumi.set(__self__, "x_shear_var", x_shear_var)
        if y_shear is not None:
            pulumi.set(__self__, "y_shear", y_shear)
        if y_shear_var is not None:
            pulumi.set(__self__, "y_shear_var", y_shear_var)

    @property
    @pulumi.getter(name="xShear")
    def x_shear(self) -> Optional[builtins.str]:
        """
        The amount to shear along the x-axis, measured in multiples of the image's width. Must be set if yShear is not specified.
        """
        return pulumi.get(self, "x_shear")

    @x_shear.setter
    def x_shear(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_shear", value)

    @property
    @pulumi.getter(name="xShearVar")
    def x_shear_var(self) -> Optional[builtins.str]:
        """
        The amount to shear along the x-axis, measured in multiples of the image's width. Must be set if yShear is not specified.
        """
        return pulumi.get(self, "x_shear_var")

    @x_shear_var.setter
    def x_shear_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "x_shear_var", value)

    @property
    @pulumi.getter(name="yShear")
    def y_shear(self) -> Optional[builtins.str]:
        """
        The amount to shear along the y-axis, measured in multiples of the image's height. Must be set if xShear is not specified.
        """
        return pulumi.get(self, "y_shear")

    @y_shear.setter
    def y_shear(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_shear", value)

    @property
    @pulumi.getter(name="yShearVar")
    def y_shear_var(self) -> Optional[builtins.str]:
        """
        The amount to shear along the y-axis, measured in multiples of the image's height. Must be set if xShear is not specified.
        """
        return pulumi.get(self, "y_shear_var")

    @y_shear_var.setter
    def y_shear_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "y_shear_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationSmartCropArgsDict(TypedDict):
        debug: NotRequired[builtins.str]
        """
        When enabled, the SmartCrop transformation doesn't actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
        """
        debug_var: NotRequired[builtins.str]
        """
        When enabled, the SmartCrop transformation doesn't actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
        """
        height: NotRequired[builtins.str]
        """
        The height in pixels of the output image relative to the specified `style` value.
        """
        height_var: NotRequired[builtins.str]
        """
        The height in pixels of the output image relative to the specified `style` value.
        """
        sloppy: NotRequired[builtins.str]
        """
        Whether to sacrifice any image fidelity for transformation performance.
        """
        sloppy_var: NotRequired[builtins.str]
        """
        Whether to sacrifice any image fidelity for transformation performance.
        """
        style: NotRequired[builtins.str]
        """
        Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
        """
        style_var: NotRequired[builtins.str]
        """
        Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
        """
        width: NotRequired[builtins.str]
        """
        The width in pixels of the output image relative to the specified `style` value.
        """
        width_var: NotRequired[builtins.str]
        """
        The width in pixels of the output image relative to the specified `style` value.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationSmartCropArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationSmartCropArgs:
    def __init__(__self__, *,
                 debug: Optional[builtins.str] = None,
                 debug_var: Optional[builtins.str] = None,
                 height: Optional[builtins.str] = None,
                 height_var: Optional[builtins.str] = None,
                 sloppy: Optional[builtins.str] = None,
                 sloppy_var: Optional[builtins.str] = None,
                 style: Optional[builtins.str] = None,
                 style_var: Optional[builtins.str] = None,
                 width: Optional[builtins.str] = None,
                 width_var: Optional[builtins.str] = None):
        """
        :param builtins.str debug: When enabled, the SmartCrop transformation doesn't actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
        :param builtins.str debug_var: When enabled, the SmartCrop transformation doesn't actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
        :param builtins.str height: The height in pixels of the output image relative to the specified `style` value.
        :param builtins.str height_var: The height in pixels of the output image relative to the specified `style` value.
        :param builtins.str sloppy: Whether to sacrifice any image fidelity for transformation performance.
        :param builtins.str sloppy_var: Whether to sacrifice any image fidelity for transformation performance.
        :param builtins.str style: Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
        :param builtins.str style_var: Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
        :param builtins.str width: The width in pixels of the output image relative to the specified `style` value.
        :param builtins.str width_var: The width in pixels of the output image relative to the specified `style` value.
        """
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if debug_var is not None:
            pulumi.set(__self__, "debug_var", debug_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if sloppy is not None:
            pulumi.set(__self__, "sloppy", sloppy)
        if sloppy_var is not None:
            pulumi.set(__self__, "sloppy_var", sloppy_var)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if style_var is not None:
            pulumi.set(__self__, "style_var", style_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def debug(self) -> Optional[builtins.str]:
        """
        When enabled, the SmartCrop transformation doesn't actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[builtins.str]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter(name="debugVar")
    def debug_var(self) -> Optional[builtins.str]:
        """
        When enabled, the SmartCrop transformation doesn't actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
        """
        return pulumi.get(self, "debug_var")

    @debug_var.setter
    def debug_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "debug_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[builtins.str]:
        """
        The height in pixels of the output image relative to the specified `style` value.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[builtins.str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[builtins.str]:
        """
        The height in pixels of the output image relative to the specified `style` value.
        """
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def sloppy(self) -> Optional[builtins.str]:
        """
        Whether to sacrifice any image fidelity for transformation performance.
        """
        return pulumi.get(self, "sloppy")

    @sloppy.setter
    def sloppy(self, value: Optional[builtins.str]):
        pulumi.set(self, "sloppy", value)

    @property
    @pulumi.getter(name="sloppyVar")
    def sloppy_var(self) -> Optional[builtins.str]:
        """
        Whether to sacrifice any image fidelity for transformation performance.
        """
        return pulumi.get(self, "sloppy_var")

    @sloppy_var.setter
    def sloppy_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "sloppy_var", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[builtins.str]:
        """
        Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[builtins.str]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter(name="styleVar")
    def style_var(self) -> Optional[builtins.str]:
        """
        Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
        """
        return pulumi.get(self, "style_var")

    @style_var.setter
    def style_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "style_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.str]:
        """
        The width in pixels of the output image relative to the specified `style` value.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[builtins.str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[builtins.str]:
        """
        The width in pixels of the output image relative to the specified `style` value.
        """
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "width_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationTrimArgsDict(TypedDict):
        fuzz: NotRequired[builtins.str]
        """
        The fuzz tolerance of the trim, a value between `0` and `1` that determines the acceptable amount of background variation before trimming stops.
        """
        fuzz_var: NotRequired[builtins.str]
        """
        The fuzz tolerance of the trim, a value between `0` and `1` that determines the acceptable amount of background variation before trimming stops.
        """
        padding: NotRequired[builtins.str]
        """
        The amount of padding in pixels to add to the trimmed image.
        """
        padding_var: NotRequired[builtins.str]
        """
        The amount of padding in pixels to add to the trimmed image.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationTrimArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationTrimArgs:
    def __init__(__self__, *,
                 fuzz: Optional[builtins.str] = None,
                 fuzz_var: Optional[builtins.str] = None,
                 padding: Optional[builtins.str] = None,
                 padding_var: Optional[builtins.str] = None):
        """
        :param builtins.str fuzz: The fuzz tolerance of the trim, a value between `0` and `1` that determines the acceptable amount of background variation before trimming stops.
        :param builtins.str fuzz_var: The fuzz tolerance of the trim, a value between `0` and `1` that determines the acceptable amount of background variation before trimming stops.
        :param builtins.str padding: The amount of padding in pixels to add to the trimmed image.
        :param builtins.str padding_var: The amount of padding in pixels to add to the trimmed image.
        """
        if fuzz is not None:
            pulumi.set(__self__, "fuzz", fuzz)
        if fuzz_var is not None:
            pulumi.set(__self__, "fuzz_var", fuzz_var)
        if padding is not None:
            pulumi.set(__self__, "padding", padding)
        if padding_var is not None:
            pulumi.set(__self__, "padding_var", padding_var)

    @property
    @pulumi.getter
    def fuzz(self) -> Optional[builtins.str]:
        """
        The fuzz tolerance of the trim, a value between `0` and `1` that determines the acceptable amount of background variation before trimming stops.
        """
        return pulumi.get(self, "fuzz")

    @fuzz.setter
    def fuzz(self, value: Optional[builtins.str]):
        pulumi.set(self, "fuzz", value)

    @property
    @pulumi.getter(name="fuzzVar")
    def fuzz_var(self) -> Optional[builtins.str]:
        """
        The fuzz tolerance of the trim, a value between `0` and `1` that determines the acceptable amount of background variation before trimming stops.
        """
        return pulumi.get(self, "fuzz_var")

    @fuzz_var.setter
    def fuzz_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "fuzz_var", value)

    @property
    @pulumi.getter
    def padding(self) -> Optional[builtins.str]:
        """
        The amount of padding in pixels to add to the trimmed image.
        """
        return pulumi.get(self, "padding")

    @padding.setter
    def padding(self, value: Optional[builtins.str]):
        pulumi.set(self, "padding", value)

    @property
    @pulumi.getter(name="paddingVar")
    def padding_var(self) -> Optional[builtins.str]:
        """
        The amount of padding in pixels to add to the trimmed image.
        """
        return pulumi.get(self, "padding_var")

    @padding_var.setter
    def padding_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "padding_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyTransformationUnsharpMaskArgsDict(TypedDict):
        gain: NotRequired[builtins.str]
        """
        Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
        """
        gain_var: NotRequired[builtins.str]
        """
        Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
        """
        sigma: NotRequired[builtins.str]
        """
        The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
        """
        sigma_var: NotRequired[builtins.str]
        """
        The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
        """
        threshold: NotRequired[builtins.str]
        """
        Set the minimum change required to include a detail in the filter. Higher values discard more changes.
        """
        threshold_var: NotRequired[builtins.str]
        """
        Set the minimum change required to include a detail in the filter. Higher values discard more changes.
        """
elif False:
    GetImagingPolicyImagePolicyTransformationUnsharpMaskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs:
    def __init__(__self__, *,
                 gain: Optional[builtins.str] = None,
                 gain_var: Optional[builtins.str] = None,
                 sigma: Optional[builtins.str] = None,
                 sigma_var: Optional[builtins.str] = None,
                 threshold: Optional[builtins.str] = None,
                 threshold_var: Optional[builtins.str] = None):
        """
        :param builtins.str gain: Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
        :param builtins.str gain_var: Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
        :param builtins.str sigma: The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
        :param builtins.str sigma_var: The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
        :param builtins.str threshold: Set the minimum change required to include a detail in the filter. Higher values discard more changes.
        :param builtins.str threshold_var: Set the minimum change required to include a detail in the filter. Higher values discard more changes.
        """
        if gain is not None:
            pulumi.set(__self__, "gain", gain)
        if gain_var is not None:
            pulumi.set(__self__, "gain_var", gain_var)
        if sigma is not None:
            pulumi.set(__self__, "sigma", sigma)
        if sigma_var is not None:
            pulumi.set(__self__, "sigma_var", sigma_var)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_var is not None:
            pulumi.set(__self__, "threshold_var", threshold_var)

    @property
    @pulumi.getter
    def gain(self) -> Optional[builtins.str]:
        """
        Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
        """
        return pulumi.get(self, "gain")

    @gain.setter
    def gain(self, value: Optional[builtins.str]):
        pulumi.set(self, "gain", value)

    @property
    @pulumi.getter(name="gainVar")
    def gain_var(self) -> Optional[builtins.str]:
        """
        Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
        """
        return pulumi.get(self, "gain_var")

    @gain_var.setter
    def gain_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "gain_var", value)

    @property
    @pulumi.getter
    def sigma(self) -> Optional[builtins.str]:
        """
        The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
        """
        return pulumi.get(self, "sigma")

    @sigma.setter
    def sigma(self, value: Optional[builtins.str]):
        pulumi.set(self, "sigma", value)

    @property
    @pulumi.getter(name="sigmaVar")
    def sigma_var(self) -> Optional[builtins.str]:
        """
        The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
        """
        return pulumi.get(self, "sigma_var")

    @sigma_var.setter
    def sigma_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "sigma_var", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[builtins.str]:
        """
        Set the minimum change required to include a detail in the filter. Higher values discard more changes.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[builtins.str]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter(name="thresholdVar")
    def threshold_var(self) -> Optional[builtins.str]:
        """
        Set the minimum change required to include a detail in the filter. Higher values discard more changes.
        """
        return pulumi.get(self, "threshold_var")

    @threshold_var.setter
    def threshold_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "threshold_var", value)


if not MYPY:
    class GetImagingPolicyImagePolicyVariableArgsDict(TypedDict):
        default_value: builtins.str
        """
        The default value of the variable if no query parameter is provided. It needs to be one of the `enumOptions` if any are provided.
        """
        name: builtins.str
        """
        The name of the variable, also available as the query parameter name to set the variable's value dynamically. Use up to 50 alphanumeric characters.
        """
        type: builtins.str
        """
        The type of value for the variable.
        """
        enum_options: NotRequired[Sequence['GetImagingPolicyImagePolicyVariableEnumOptionArgsDict']]
        postfix: NotRequired[builtins.str]
        """
        A postfix added to the value provided for the variable, or to the default value.
        """
        prefix: NotRequired[builtins.str]
        """
        A prefix added to the value provided for the variable, or to the default value.
        """
elif False:
    GetImagingPolicyImagePolicyVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyVariableArgs:
    def __init__(__self__, *,
                 default_value: builtins.str,
                 name: builtins.str,
                 type: builtins.str,
                 enum_options: Optional[Sequence['GetImagingPolicyImagePolicyVariableEnumOptionArgs']] = None,
                 postfix: Optional[builtins.str] = None,
                 prefix: Optional[builtins.str] = None):
        """
        :param builtins.str default_value: The default value of the variable if no query parameter is provided. It needs to be one of the `enumOptions` if any are provided.
        :param builtins.str name: The name of the variable, also available as the query parameter name to set the variable's value dynamically. Use up to 50 alphanumeric characters.
        :param builtins.str type: The type of value for the variable.
        :param builtins.str postfix: A postfix added to the value provided for the variable, or to the default value.
        :param builtins.str prefix: A prefix added to the value provided for the variable, or to the default value.
        """
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if enum_options is not None:
            pulumi.set(__self__, "enum_options", enum_options)
        if postfix is not None:
            pulumi.set(__self__, "postfix", postfix)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> builtins.str:
        """
        The default value of the variable if no query parameter is provided. It needs to be one of the `enumOptions` if any are provided.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: builtins.str):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the variable, also available as the query parameter name to set the variable's value dynamically. Use up to 50 alphanumeric characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of value for the variable.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="enumOptions")
    def enum_options(self) -> Optional[Sequence['GetImagingPolicyImagePolicyVariableEnumOptionArgs']]:
        return pulumi.get(self, "enum_options")

    @enum_options.setter
    def enum_options(self, value: Optional[Sequence['GetImagingPolicyImagePolicyVariableEnumOptionArgs']]):
        pulumi.set(self, "enum_options", value)

    @property
    @pulumi.getter
    def postfix(self) -> Optional[builtins.str]:
        """
        A postfix added to the value provided for the variable, or to the default value.
        """
        return pulumi.get(self, "postfix")

    @postfix.setter
    def postfix(self, value: Optional[builtins.str]):
        pulumi.set(self, "postfix", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[builtins.str]:
        """
        A prefix added to the value provided for the variable, or to the default value.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[builtins.str]):
        pulumi.set(self, "prefix", value)


if not MYPY:
    class GetImagingPolicyImagePolicyVariableEnumOptionArgsDict(TypedDict):
        id: builtins.str
        """
        The unique identifier for each enum value, up to 50 alphanumeric characters.
        """
        value: builtins.str
        """
        The value of the variable when the `id` is provided.
        """
elif False:
    GetImagingPolicyImagePolicyVariableEnumOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyImagePolicyVariableEnumOptionArgs:
    def __init__(__self__, *,
                 id: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str id: The unique identifier for each enum value, up to 50 alphanumeric characters.
        :param builtins.str value: The value of the variable when the `id` is provided.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique identifier for each enum value, up to 50 alphanumeric characters.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: builtins.str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the variable when the `id` is provided.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: builtins.str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetImagingPolicyVideoPolicyArgsDict(TypedDict):
        breakpoints: NotRequired['GetImagingPolicyVideoPolicyBreakpointsArgsDict']
        """
        The breakpoint widths (in pixels) to use to create derivative images/videos.
        """
        hosts: NotRequired[Sequence[builtins.str]]
        """
        Hosts that are allowed for image/video URLs within transformations or variables.
        """
        output: NotRequired['GetImagingPolicyVideoPolicyOutputArgsDict']
        """
        Dictates the output quality that are created for each resized video.
        """
        rollout_duration: NotRequired[builtins.str]
        """
        The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
        """
        variables: NotRequired[Sequence['GetImagingPolicyVideoPolicyVariableArgsDict']]
        """
        Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don't have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image's request URL.
        """
elif False:
    GetImagingPolicyVideoPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyVideoPolicyArgs:
    def __init__(__self__, *,
                 breakpoints: Optional['GetImagingPolicyVideoPolicyBreakpointsArgs'] = None,
                 hosts: Optional[Sequence[builtins.str]] = None,
                 output: Optional['GetImagingPolicyVideoPolicyOutputArgs'] = None,
                 rollout_duration: Optional[builtins.str] = None,
                 variables: Optional[Sequence['GetImagingPolicyVideoPolicyVariableArgs']] = None):
        """
        :param 'GetImagingPolicyVideoPolicyBreakpointsArgs' breakpoints: The breakpoint widths (in pixels) to use to create derivative images/videos.
        :param Sequence[builtins.str] hosts: Hosts that are allowed for image/video URLs within transformations or variables.
        :param 'GetImagingPolicyVideoPolicyOutputArgs' output: Dictates the output quality that are created for each resized video.
        :param builtins.str rollout_duration: The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
        :param Sequence['GetImagingPolicyVideoPolicyVariableArgs'] variables: Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don't have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image's request URL.
        """
        if breakpoints is not None:
            pulumi.set(__self__, "breakpoints", breakpoints)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if rollout_duration is not None:
            pulumi.set(__self__, "rollout_duration", rollout_duration)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def breakpoints(self) -> Optional['GetImagingPolicyVideoPolicyBreakpointsArgs']:
        """
        The breakpoint widths (in pixels) to use to create derivative images/videos.
        """
        return pulumi.get(self, "breakpoints")

    @breakpoints.setter
    def breakpoints(self, value: Optional['GetImagingPolicyVideoPolicyBreakpointsArgs']):
        pulumi.set(self, "breakpoints", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[builtins.str]]:
        """
        Hosts that are allowed for image/video URLs within transformations or variables.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def output(self) -> Optional['GetImagingPolicyVideoPolicyOutputArgs']:
        """
        Dictates the output quality that are created for each resized video.
        """
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional['GetImagingPolicyVideoPolicyOutputArgs']):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="rolloutDuration")
    def rollout_duration(self) -> Optional[builtins.str]:
        """
        The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
        """
        return pulumi.get(self, "rollout_duration")

    @rollout_duration.setter
    def rollout_duration(self, value: Optional[builtins.str]):
        pulumi.set(self, "rollout_duration", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetImagingPolicyVideoPolicyVariableArgs']]:
        """
        Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don't have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image's request URL.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetImagingPolicyVideoPolicyVariableArgs']]):
        pulumi.set(self, "variables", value)


if not MYPY:
    class GetImagingPolicyVideoPolicyBreakpointsArgsDict(TypedDict):
        widths: NotRequired[Sequence[builtins.int]]
elif False:
    GetImagingPolicyVideoPolicyBreakpointsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyVideoPolicyBreakpointsArgs:
    def __init__(__self__, *,
                 widths: Optional[Sequence[builtins.int]] = None):
        if widths is not None:
            pulumi.set(__self__, "widths", widths)

    @property
    @pulumi.getter
    def widths(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "widths")

    @widths.setter
    def widths(self, value: Optional[Sequence[builtins.int]]):
        pulumi.set(self, "widths", value)


if not MYPY:
    class GetImagingPolicyVideoPolicyOutputArgsDict(TypedDict):
        perceptual_quality: NotRequired[builtins.str]
        """
        The quality of derivative videos. High preserves video quality with reduced byte savings while low reduces video quality to increase byte savings.
        """
        perceptual_quality_var: NotRequired[builtins.str]
        """
        The quality of derivative videos. High preserves video quality with reduced byte savings while low reduces video quality to increase byte savings.
        """
        placeholder_video_url: NotRequired[builtins.str]
        """
        Allows you to add a specific placeholder video that appears when a user first requests a video, but before Image & Video Manager processes the video. If not specified the original video plays during the processing time.
        """
        placeholder_video_url_var: NotRequired[builtins.str]
        """
        Allows you to add a specific placeholder video that appears when a user first requests a video, but before Image & Video Manager processes the video. If not specified the original video plays during the processing time.
        """
        video_adaptive_quality: NotRequired[builtins.str]
        """
        Override the quality of video to serve when Image & Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of videos for users with faster connections.
        """
        video_adaptive_quality_var: NotRequired[builtins.str]
        """
        Override the quality of video to serve when Image & Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of videos for users with faster connections.
        """
elif False:
    GetImagingPolicyVideoPolicyOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyVideoPolicyOutputArgs:
    def __init__(__self__, *,
                 perceptual_quality: Optional[builtins.str] = None,
                 perceptual_quality_var: Optional[builtins.str] = None,
                 placeholder_video_url: Optional[builtins.str] = None,
                 placeholder_video_url_var: Optional[builtins.str] = None,
                 video_adaptive_quality: Optional[builtins.str] = None,
                 video_adaptive_quality_var: Optional[builtins.str] = None):
        """
        :param builtins.str perceptual_quality: The quality of derivative videos. High preserves video quality with reduced byte savings while low reduces video quality to increase byte savings.
        :param builtins.str perceptual_quality_var: The quality of derivative videos. High preserves video quality with reduced byte savings while low reduces video quality to increase byte savings.
        :param builtins.str placeholder_video_url: Allows you to add a specific placeholder video that appears when a user first requests a video, but before Image & Video Manager processes the video. If not specified the original video plays during the processing time.
        :param builtins.str placeholder_video_url_var: Allows you to add a specific placeholder video that appears when a user first requests a video, but before Image & Video Manager processes the video. If not specified the original video plays during the processing time.
        :param builtins.str video_adaptive_quality: Override the quality of video to serve when Image & Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of videos for users with faster connections.
        :param builtins.str video_adaptive_quality_var: Override the quality of video to serve when Image & Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of videos for users with faster connections.
        """
        if perceptual_quality is not None:
            pulumi.set(__self__, "perceptual_quality", perceptual_quality)
        if perceptual_quality_var is not None:
            pulumi.set(__self__, "perceptual_quality_var", perceptual_quality_var)
        if placeholder_video_url is not None:
            pulumi.set(__self__, "placeholder_video_url", placeholder_video_url)
        if placeholder_video_url_var is not None:
            pulumi.set(__self__, "placeholder_video_url_var", placeholder_video_url_var)
        if video_adaptive_quality is not None:
            pulumi.set(__self__, "video_adaptive_quality", video_adaptive_quality)
        if video_adaptive_quality_var is not None:
            pulumi.set(__self__, "video_adaptive_quality_var", video_adaptive_quality_var)

    @property
    @pulumi.getter(name="perceptualQuality")
    def perceptual_quality(self) -> Optional[builtins.str]:
        """
        The quality of derivative videos. High preserves video quality with reduced byte savings while low reduces video quality to increase byte savings.
        """
        return pulumi.get(self, "perceptual_quality")

    @perceptual_quality.setter
    def perceptual_quality(self, value: Optional[builtins.str]):
        pulumi.set(self, "perceptual_quality", value)

    @property
    @pulumi.getter(name="perceptualQualityVar")
    def perceptual_quality_var(self) -> Optional[builtins.str]:
        """
        The quality of derivative videos. High preserves video quality with reduced byte savings while low reduces video quality to increase byte savings.
        """
        return pulumi.get(self, "perceptual_quality_var")

    @perceptual_quality_var.setter
    def perceptual_quality_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "perceptual_quality_var", value)

    @property
    @pulumi.getter(name="placeholderVideoUrl")
    def placeholder_video_url(self) -> Optional[builtins.str]:
        """
        Allows you to add a specific placeholder video that appears when a user first requests a video, but before Image & Video Manager processes the video. If not specified the original video plays during the processing time.
        """
        return pulumi.get(self, "placeholder_video_url")

    @placeholder_video_url.setter
    def placeholder_video_url(self, value: Optional[builtins.str]):
        pulumi.set(self, "placeholder_video_url", value)

    @property
    @pulumi.getter(name="placeholderVideoUrlVar")
    def placeholder_video_url_var(self) -> Optional[builtins.str]:
        """
        Allows you to add a specific placeholder video that appears when a user first requests a video, but before Image & Video Manager processes the video. If not specified the original video plays during the processing time.
        """
        return pulumi.get(self, "placeholder_video_url_var")

    @placeholder_video_url_var.setter
    def placeholder_video_url_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "placeholder_video_url_var", value)

    @property
    @pulumi.getter(name="videoAdaptiveQuality")
    def video_adaptive_quality(self) -> Optional[builtins.str]:
        """
        Override the quality of video to serve when Image & Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of videos for users with faster connections.
        """
        return pulumi.get(self, "video_adaptive_quality")

    @video_adaptive_quality.setter
    def video_adaptive_quality(self, value: Optional[builtins.str]):
        pulumi.set(self, "video_adaptive_quality", value)

    @property
    @pulumi.getter(name="videoAdaptiveQualityVar")
    def video_adaptive_quality_var(self) -> Optional[builtins.str]:
        """
        Override the quality of video to serve when Image & Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of videos for users with faster connections.
        """
        return pulumi.get(self, "video_adaptive_quality_var")

    @video_adaptive_quality_var.setter
    def video_adaptive_quality_var(self, value: Optional[builtins.str]):
        pulumi.set(self, "video_adaptive_quality_var", value)


if not MYPY:
    class GetImagingPolicyVideoPolicyVariableArgsDict(TypedDict):
        default_value: builtins.str
        """
        The default value of the variable if no query parameter is provided. It needs to be one of the `enumOptions` if any are provided.
        """
        name: builtins.str
        """
        The name of the variable, also available as the query parameter name to set the variable's value dynamically. Use up to 50 alphanumeric characters.
        """
        type: builtins.str
        """
        The type of value for the variable.
        """
        enum_options: NotRequired[Sequence['GetImagingPolicyVideoPolicyVariableEnumOptionArgsDict']]
        postfix: NotRequired[builtins.str]
        """
        A postfix added to the value provided for the variable, or to the default value.
        """
        prefix: NotRequired[builtins.str]
        """
        A prefix added to the value provided for the variable, or to the default value.
        """
elif False:
    GetImagingPolicyVideoPolicyVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyVideoPolicyVariableArgs:
    def __init__(__self__, *,
                 default_value: builtins.str,
                 name: builtins.str,
                 type: builtins.str,
                 enum_options: Optional[Sequence['GetImagingPolicyVideoPolicyVariableEnumOptionArgs']] = None,
                 postfix: Optional[builtins.str] = None,
                 prefix: Optional[builtins.str] = None):
        """
        :param builtins.str default_value: The default value of the variable if no query parameter is provided. It needs to be one of the `enumOptions` if any are provided.
        :param builtins.str name: The name of the variable, also available as the query parameter name to set the variable's value dynamically. Use up to 50 alphanumeric characters.
        :param builtins.str type: The type of value for the variable.
        :param builtins.str postfix: A postfix added to the value provided for the variable, or to the default value.
        :param builtins.str prefix: A prefix added to the value provided for the variable, or to the default value.
        """
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if enum_options is not None:
            pulumi.set(__self__, "enum_options", enum_options)
        if postfix is not None:
            pulumi.set(__self__, "postfix", postfix)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> builtins.str:
        """
        The default value of the variable if no query parameter is provided. It needs to be one of the `enumOptions` if any are provided.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: builtins.str):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the variable, also available as the query parameter name to set the variable's value dynamically. Use up to 50 alphanumeric characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of value for the variable.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: builtins.str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="enumOptions")
    def enum_options(self) -> Optional[Sequence['GetImagingPolicyVideoPolicyVariableEnumOptionArgs']]:
        return pulumi.get(self, "enum_options")

    @enum_options.setter
    def enum_options(self, value: Optional[Sequence['GetImagingPolicyVideoPolicyVariableEnumOptionArgs']]):
        pulumi.set(self, "enum_options", value)

    @property
    @pulumi.getter
    def postfix(self) -> Optional[builtins.str]:
        """
        A postfix added to the value provided for the variable, or to the default value.
        """
        return pulumi.get(self, "postfix")

    @postfix.setter
    def postfix(self, value: Optional[builtins.str]):
        pulumi.set(self, "postfix", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[builtins.str]:
        """
        A prefix added to the value provided for the variable, or to the default value.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[builtins.str]):
        pulumi.set(self, "prefix", value)


if not MYPY:
    class GetImagingPolicyVideoPolicyVariableEnumOptionArgsDict(TypedDict):
        id: builtins.str
        """
        The unique identifier for each enum value, up to 50 alphanumeric characters.
        """
        value: builtins.str
        """
        The value of the variable when the `id` is provided.
        """
elif False:
    GetImagingPolicyVideoPolicyVariableEnumOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetImagingPolicyVideoPolicyVariableEnumOptionArgs:
    def __init__(__self__, *,
                 id: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str id: The unique identifier for each enum value, up to 50 alphanumeric characters.
        :param builtins.str value: The value of the variable when the `id` is provided.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique identifier for each enum value, up to 50 alphanumeric characters.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: builtins.str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the variable when the `id` is provided.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: builtins.str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetPropertyIncludesParentPropertyArgsDict(TypedDict):
        id: builtins.str
        """
        The property's unique identifier
        """
        version: builtins.int
        """
        The property's version for which the data is requested
        """
elif False:
    GetPropertyIncludesParentPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetPropertyIncludesParentPropertyArgs:
    def __init__(__self__, *,
                 id: builtins.str,
                 version: builtins.int):
        """
        :param builtins.str id: The property's unique identifier
        :param builtins.int version: The property's version for which the data is requested
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The property's unique identifier
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: builtins.str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def version(self) -> builtins.int:
        """
        The property's version for which the data is requested
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: builtins.int):
        pulumi.set(self, "version", value)


if not MYPY:
    class GetPropertyRulesTemplateTemplateArgsDict(TypedDict):
        template_data: builtins.str
        """
        Content of the template as string
        """
        template_dir: builtins.str
        """
        Directory points to a folder, which contains snippets to include into template.
        """
elif False:
    GetPropertyRulesTemplateTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetPropertyRulesTemplateTemplateArgs:
    def __init__(__self__, *,
                 template_data: builtins.str,
                 template_dir: builtins.str):
        """
        :param builtins.str template_data: Content of the template as string
        :param builtins.str template_dir: Directory points to a folder, which contains snippets to include into template.
        """
        pulumi.set(__self__, "template_data", template_data)
        pulumi.set(__self__, "template_dir", template_dir)

    @property
    @pulumi.getter(name="templateData")
    def template_data(self) -> builtins.str:
        """
        Content of the template as string
        """
        return pulumi.get(self, "template_data")

    @template_data.setter
    def template_data(self, value: builtins.str):
        pulumi.set(self, "template_data", value)

    @property
    @pulumi.getter(name="templateDir")
    def template_dir(self) -> builtins.str:
        """
        Directory points to a folder, which contains snippets to include into template.
        """
        return pulumi.get(self, "template_dir")

    @template_dir.setter
    def template_dir(self, value: builtins.str):
        pulumi.set(self, "template_dir", value)


if not MYPY:
    class GetPropertyRulesTemplateVariableArgsDict(TypedDict):
        name: builtins.str
        value: builtins.str
        type: NotRequired[builtins.str]
elif False:
    GetPropertyRulesTemplateVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetPropertyRulesTemplateVariableArgs:
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str,
                 type: Optional[builtins.str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: builtins.str):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[builtins.str]):
        pulumi.set(self, "type", value)


