# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ClientlistListItemArgs',
    'CloudletsApplicationLoadBalancerDataCenterArgs',
    'CloudletsApplicationLoadBalancerLivenessSettingsArgs',
    'CloudwrapperActivationTimeoutsArgs',
    'CloudwrapperConfigurationLocationArgs',
    'CloudwrapperConfigurationLocationCapacityArgs',
    'CloudwrapperConfigurationTimeoutsArgs',
    'CpsDvEnrollmentAdminContactArgs',
    'CpsDvEnrollmentCsrArgs',
    'CpsDvEnrollmentDnsChallengeArgs',
    'CpsDvEnrollmentHttpChallengeArgs',
    'CpsDvEnrollmentNetworkConfigurationArgs',
    'CpsDvEnrollmentNetworkConfigurationClientMutualAuthenticationArgs',
    'CpsDvEnrollmentOrganizationArgs',
    'CpsDvEnrollmentTechContactArgs',
    'CpsThirdPartyEnrollmentAdminContactArgs',
    'CpsThirdPartyEnrollmentCsrArgs',
    'CpsThirdPartyEnrollmentNetworkConfigurationArgs',
    'CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthenticationArgs',
    'CpsThirdPartyEnrollmentOrganizationArgs',
    'CpsThirdPartyEnrollmentTechContactArgs',
    'DatastreamAzureConnectorArgs',
    'DatastreamDatadogConnectorArgs',
    'DatastreamDeliveryConfigurationArgs',
    'DatastreamDeliveryConfigurationFrequencyArgs',
    'DatastreamElasticsearchConnectorArgs',
    'DatastreamGcsConnectorArgs',
    'DatastreamHttpsConnectorArgs',
    'DatastreamLogglyConnectorArgs',
    'DatastreamNewRelicConnectorArgs',
    'DatastreamOracleConnectorArgs',
    'DatastreamS3ConnectorArgs',
    'DatastreamSplunkConnectorArgs',
    'DatastreamSumologicConnectorArgs',
    'DnsZoneTsigKeyArgs',
    'EdgeKvInitialDataArgs',
    'GtmAsmapAssignmentArgs',
    'GtmAsmapDefaultDatacenterArgs',
    'GtmCidrmapAssignmentArgs',
    'GtmCidrmapDefaultDatacenterArgs',
    'GtmDatacenterDefaultLoadObjectArgs',
    'GtmGeomapAssignmentArgs',
    'GtmGeomapDefaultDatacenterArgs',
    'GtmPropertyLivenessTestArgs',
    'GtmPropertyLivenessTestHttpHeaderArgs',
    'GtmPropertyStaticRrSetArgs',
    'GtmPropertyTrafficTargetArgs',
    'GtmResourceResourceInstanceArgs',
    'PropertyActivationComplianceRecordArgs',
    'PropertyActivationComplianceRecordNoncomplianceReasonEmergencyArgs',
    'PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs',
    'PropertyActivationComplianceRecordNoncomplianceReasonNoneArgs',
    'PropertyActivationComplianceRecordNoncomplianceReasonOtherArgs',
    'PropertyActivationRuleErrorArgs',
    'PropertyHostnameArgs',
    'PropertyHostnameCertStatusArgs',
    'PropertyIncludeActivationComplianceRecordArgs',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergencyArgs',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoneArgs',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonOtherArgs',
    'PropertyRuleErrorArgs',
    'ProviderConfigArgs',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleArgs',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchArgs',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleArgs',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingArgs',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchArgs',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueArgs',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleArgs',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsArgs',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchArgs',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueArgs',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleArgs',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchArgs',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueArgs',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleArgs',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsArgs',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleMatchArgs',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueArgs',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleArgs',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsArgs',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchArgs',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueArgs',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs',
    'GetCloudletsRequestControlMatchRuleMatchRuleArgs',
    'GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs',
    'GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueArgs',
    'GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleArgs',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchArgs',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs',
    'GetCloudwrapperCapacitiesCapacityArgs',
    'GetCloudwrapperCapacitiesCapacityApprovedArgs',
    'GetCloudwrapperCapacitiesCapacityAssignedArgs',
    'GetCloudwrapperCapacitiesCapacityUnassignedArgs',
    'GetCloudwrapperConfigurationLocationArgs',
    'GetCloudwrapperConfigurationLocationCapacityArgs',
    'GetCloudwrapperConfigurationMultiCdnSettingsArgs',
    'GetCloudwrapperConfigurationMultiCdnSettingsBoccArgs',
    'GetCloudwrapperConfigurationMultiCdnSettingsCdnArgs',
    'GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs',
    'GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsArgs',
    'GetCloudwrapperConfigurationMultiCdnSettingsOriginArgs',
    'GetCloudwrapperConfigurationsConfigurationArgs',
    'GetCloudwrapperConfigurationsConfigurationLocationArgs',
    'GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccArgs',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsArgs',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginArgs',
    'GetCloudwrapperLocationsLocationArgs',
    'GetCloudwrapperLocationsLocationTrafficTypeArgs',
    'GetCloudwrapperPropertiesPropertyArgs',
    'GetImagingPolicyImagePolicyArgs',
    'GetImagingPolicyImagePolicyBreakpointsArgs',
    'GetImagingPolicyImagePolicyOutputArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationBlurArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationContrastArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationGoopArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationHslArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationHsvArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorArgs',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskArgs',
    'GetImagingPolicyImagePolicyTransformationArgs',
    'GetImagingPolicyImagePolicyTransformationAppendArgs',
    'GetImagingPolicyImagePolicyTransformationAppendImageArgs',
    'GetImagingPolicyImagePolicyTransformationAppendImageBoxImageArgs',
    'GetImagingPolicyImagePolicyTransformationAppendImageCircleImageArgs',
    'GetImagingPolicyImagePolicyTransformationAppendImageTextImageArgs',
    'GetImagingPolicyImagePolicyTransformationAppendImageUrlImageArgs',
    'GetImagingPolicyImagePolicyTransformationAspectCropArgs',
    'GetImagingPolicyImagePolicyTransformationBackgroundColorArgs',
    'GetImagingPolicyImagePolicyTransformationBlurArgs',
    'GetImagingPolicyImagePolicyTransformationChromaKeyArgs',
    'GetImagingPolicyImagePolicyTransformationCompositeArgs',
    'GetImagingPolicyImagePolicyTransformationCompositeImageArgs',
    'GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageArgs',
    'GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs',
    'GetImagingPolicyImagePolicyTransformationCompositeImageTextImageArgs',
    'GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageArgs',
    'GetImagingPolicyImagePolicyTransformationCompoundArgs',
    'GetImagingPolicyImagePolicyTransformationContrastArgs',
    'GetImagingPolicyImagePolicyTransformationCropArgs',
    'GetImagingPolicyImagePolicyTransformationFaceCropArgs',
    'GetImagingPolicyImagePolicyTransformationFeatureCropArgs',
    'GetImagingPolicyImagePolicyTransformationFitAndFillArgs',
    'GetImagingPolicyImagePolicyTransformationGoopArgs',
    'GetImagingPolicyImagePolicyTransformationGrayscaleArgs',
    'GetImagingPolicyImagePolicyTransformationHslArgs',
    'GetImagingPolicyImagePolicyTransformationHsvArgs',
    'GetImagingPolicyImagePolicyTransformationIfDimensionArgs',
    'GetImagingPolicyImagePolicyTransformationIfOrientationArgs',
    'GetImagingPolicyImagePolicyTransformationImQueryArgs',
    'GetImagingPolicyImagePolicyTransformationMaxColorArgs',
    'GetImagingPolicyImagePolicyTransformationMirrorArgs',
    'GetImagingPolicyImagePolicyTransformationMonoHueArgs',
    'GetImagingPolicyImagePolicyTransformationOpacityArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeArgs',
    'GetImagingPolicyImagePolicyTransformationRelativeCropArgs',
    'GetImagingPolicyImagePolicyTransformationRemoveColorArgs',
    'GetImagingPolicyImagePolicyTransformationResizeArgs',
    'GetImagingPolicyImagePolicyTransformationRotateArgs',
    'GetImagingPolicyImagePolicyTransformationScaleArgs',
    'GetImagingPolicyImagePolicyTransformationShearsArgs',
    'GetImagingPolicyImagePolicyTransformationTrimArgs',
    'GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs',
    'GetImagingPolicyImagePolicyVariableArgs',
    'GetImagingPolicyImagePolicyVariableEnumOptionArgs',
    'GetImagingPolicyVideoPolicyArgs',
    'GetImagingPolicyVideoPolicyBreakpointsArgs',
    'GetImagingPolicyVideoPolicyOutputArgs',
    'GetImagingPolicyVideoPolicyVariableArgs',
    'GetImagingPolicyVideoPolicyVariableEnumOptionArgs',
    'GetPropertyIncludesParentPropertyArgs',
    'GetPropertyRulesBuilderRulesV20230105Args',
    'GetPropertyRulesBuilderRulesV20230105BehaviorArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAdScalerCircuitBreakerArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveAccelerationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveImageCompressionArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAdvancedArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAggregatedReportingArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllHttpInCacheHierarchyArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowCloudletsOriginsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowDeleteArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsCacheKeySharingArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsDowngradeArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowOptionsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowPatchArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowPostArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowPutArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowTransferEncodingArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAltSvcHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationNetStorageArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerAllDownNetStorageArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerFailoverOriginMapArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAutoDomainValidationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorBaseDirectoryArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorBossBeaconingArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorBreadcrumbsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorBreakConnectionArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorBrotliArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheErrorArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheIdArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyIgnoreCaseArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyQueryParamsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyRewriteArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCachePostArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheRedirectArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagVisibleArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCachingArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCentralAuthorizationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorChaseRedirectsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorClientCharacteristicsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCloudInterconnectsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperAdvancedArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorConditionalOriginArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorConstructResponseArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsAmdArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsDdArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLargeFileArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLiveArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdVodArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentPrePositionArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentTargetingProtectionArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCorsSupportArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCustomBehaviorArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDatastreamArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthHmacTransformationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthRegexTransformationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthSubstringTransformationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthVariableExtractorArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpDefaultAuthzGroupsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpDevRelationsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpRealTimeAuthArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDeliveryReceiptArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDenyAccessArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDenyDirectFailoverAccessArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicCacheIdArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDnsAsyncRefreshArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDnsPrefreshArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDowngradeProtocolArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDownloadCompleteMarkerArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDownloadNotificationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDownstreamCacheArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationOverrideArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDynamicWebContentArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEcmsBulkUploadArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatabaseArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatasetArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEcmsObjectKeyArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeConnectArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingAdvancedArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingOriginArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeOriginAuthorizationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeScapeArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeSideIncludesArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeWorkerArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedAkamaiProtocolArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedProxyDetectionArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEpdForwardHeaderEnrichmentArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFailActionArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFailActionNetStorageHostnameArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFailoverBotManagerFeatureCompatibilityArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFastInvalidateArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFrontEndOptimizationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorG2oheaderArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorGlobalRequestNumberArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorGraphqlCachingArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorGzipResponseArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHdDataAdvancedArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHealthDetectionArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHsafEipBindingArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHttp2Args',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHttp3Args',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHttpStrictTransportSecurityArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHttpToHttpsUpgradeArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImOverrideArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorIncludeArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorageArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorInstantArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorInstantConfigArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationAdvancedArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateBitrateTableArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateThresholdTableArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLogCustomArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMPulseArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorManifestPersonalizationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorManifestReroutingArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorManualServerPushArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationQuicOptoutArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMediaClientArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMediaFileRetrievalOptimizationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMediaOriginFailoverArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMetadataCachingArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMobileSdkPerformanceArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingRequestHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingResponseHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingRequestHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingResponseHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorModifyViaHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsWsdArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryMethodArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginIpAclArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginNetStorageArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPersistentClientConnectionArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPersistentConnectionArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPersonallyIdentifiableInformationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPreconnectArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPredictiveContentDeliveryArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPredictivePrefetchingArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchableArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPrefreshCacheArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorQualityArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorQuicBetaArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRandomSeekArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRapidArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorReadTimeoutArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRealTimeReportingArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRealUserMonitoringArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRedirectArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRedirectplusArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRefererCheckingArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRemoveQueryParameterArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRemoveVaryArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorReportArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlNetStorageArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRequestTypeMarkerArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerExtendedCompatibilityArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorResponseCodeArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorResponseCookieArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRestrictObjectCachingArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorReturnCacheStatusArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRewriteUrlArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRumCustomArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSaasDefinitionsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudClientArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderHostHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSavePostDcaProcessingArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorScheduleInvalidationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorScriptManagementArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedContentProtectionArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaOptimizationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaStreamingPrefetchArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSetVariableArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorShutrArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSimulateErrorCodeArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldSsmapArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationOverrideArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorStrictHeaderParsingArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSubCustomerArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSureRouteArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTcpOptimizationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTeaLeafArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionAdvancedArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionCustomizationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTimeoutArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorUidConfigurationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorValidateEntityTagArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenForDcpArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomWithEdgeWorkersArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoStandaloneArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomNetStorageArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorWatermarkingArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallFirewallConfigurationArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorWebSocketsArgs',
    'GetPropertyRulesBuilderRulesV20230105BehaviorWebdavArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionAdvancedImMatchArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionBucketArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionCacheabilityArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionChinaCdnRegionArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionClientCertificateArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionClientIpArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionClientIpVersionArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionCloudletsOriginArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionContentDeliveryNetworkArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionContentTypeArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionDeviceCharacteristicArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthGroupsArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthSchemeArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionEcmdIsAuthenticatedArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionEcmdUsernameArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionEdgeWorkersFailureArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionFileExtensionArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionFilenameArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionHostnameArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchAdvancedArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchResponseCodeArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchVariableArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionMetadataStageArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionOriginTimeoutArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionPathArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionQueryStringParameterArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionRandomArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionRecoveryConfigArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionRegularExpressionArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionRequestCookieArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionRequestHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionRequestMethodArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionRequestProtocolArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionRequestTypeArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionResponseHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionTimeArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionTokenAuthorizationArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionUserAgentArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionUserLocationArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionUserNetworkArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionVariableErrorArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionVirtualWaitingRoomRequestArgs',
    'GetPropertyRulesBuilderRulesV20230105CriterionVisitorPrioritizationRequestArgs',
    'GetPropertyRulesBuilderRulesV20230105CustomOverrideArgs',
    'GetPropertyRulesBuilderRulesV20230105VariableArgs',
    'GetPropertyRulesBuilderRulesV20230530Args',
    'GetPropertyRulesBuilderRulesV20230530BehaviorArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAdScalerCircuitBreakerArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveAccelerationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveImageCompressionArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAdvancedArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAggregatedReportingArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerTagArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllHttpInCacheHierarchyArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowCloudletsOriginsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowDeleteArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsCacheKeySharingArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsDowngradeArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowOptionsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowPatchArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowPostArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowPutArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowTransferEncodingArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAltSvcHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationNetStorageArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerAllDownNetStorageArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerFailoverOriginMapArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAutoDomainValidationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorBaseDirectoryArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorBossBeaconingArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorBreadcrumbsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorBreakConnectionArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorBrotliArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheErrorArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheIdArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyIgnoreCaseArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyQueryParamsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyRewriteArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCachePostArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheRedirectArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagVisibleArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCachingArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCentralAuthorizationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorChaseRedirectsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorClientCharacteristicsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCloudInterconnectsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperAdvancedArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCommonMediaClientDataArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorConditionalOriginArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorConstructResponseArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsAmdArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsDdArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLargeFileArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLiveArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdVodArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentPrePositionArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentTargetingProtectionArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCorsSupportArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCustomBehaviorArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDatastreamArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthHmacTransformationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthRegexTransformationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthSubstringTransformationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthVariableExtractorArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpDefaultAuthzGroupsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpDevRelationsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpRealTimeAuthArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDeliveryReceiptArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDenyAccessArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDenyDirectFailoverAccessArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicCacheIdArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDnsAsyncRefreshArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDnsPrefreshArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDowngradeProtocolArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDownloadCompleteMarkerArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDownloadNotificationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDownstreamCacheArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationOverrideArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDynamicWebContentArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEcmsBulkUploadArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatabaseArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatasetArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEcmsObjectKeyArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeConnectArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingAdvancedArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingOriginArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeOriginAuthorizationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeScapeArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeSideIncludesArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeWorkerArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedAkamaiProtocolArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedProxyDetectionArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEpdForwardHeaderEnrichmentArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFailActionArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFailActionNetStorageHostnameArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFailoverBotManagerFeatureCompatibilityArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFastInvalidateArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorG2oheaderArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorGlobalRequestNumberArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorGraphqlCachingArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorGzipResponseArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHdDataAdvancedArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHealthDetectionArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHsafEipBindingArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHttp2Args',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHttp3Args',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHttpStrictTransportSecurityArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHttpToHttpsUpgradeArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImOverrideArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorIncludeArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorInstantArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorInstantConfigArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationAdvancedArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateBitrateTableArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateThresholdTableArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLogCustomArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMPulseArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorManifestPersonalizationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorManifestReroutingArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorManualServerPushArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationQuicOptoutArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMediaClientArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMediaFileRetrievalOptimizationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMediaOriginFailoverArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMetadataCachingArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMobileSdkPerformanceArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingRequestHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingResponseHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingRequestHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingResponseHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorModifyViaHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsWsdArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryMethodArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginIpAclArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginNetStorageArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPersistentClientConnectionArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPersistentConnectionArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPersonallyIdentifiableInformationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPreconnectArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPredictiveContentDeliveryArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPredictivePrefetchingArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchableArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPrefreshCacheArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorQualityArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorQuicBetaArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRandomSeekArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRapidArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorReadTimeoutArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRealTimeReportingArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRealUserMonitoringArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRedirectArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRedirectplusArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRefererCheckingArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRemoveQueryParameterArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRemoveVaryArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorReportArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlNetStorageArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRequestTypeMarkerArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerExtendedCompatibilityArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorResponseCodeArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorResponseCookieArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRestrictObjectCachingArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorReturnCacheStatusArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRewriteUrlArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRumCustomArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSaasDefinitionsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudClientArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderHostHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSavePostDcaProcessingArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorScheduleInvalidationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorScriptManagementArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedContentProtectionArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaOptimizationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaStreamingPrefetchArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSetVariableArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSimulateErrorCodeArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldSsmapArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationOverrideArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorStrictHeaderParsingArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSubCustomerArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSureRouteArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTcpOptimizationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTeaLeafArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionAdvancedArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionCustomizationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTimeoutArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorUidConfigurationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorValidateEntityTagArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenForDcpArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVerifyTokenAuthorizationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomWithEdgeWorkersArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicyArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoStandaloneArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorageArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorWatermarkingArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallFirewallConfigurationArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorWebSocketsArgs',
    'GetPropertyRulesBuilderRulesV20230530BehaviorWebdavArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionAdvancedImMatchArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionBucketArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionCacheabilityArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionChinaCdnRegionArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionClientCertificateArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionClientIpArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionClientIpVersionArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionCloudletsOriginArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionContentDeliveryNetworkArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionContentTypeArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionDeviceCharacteristicArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthGroupsArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthSchemeArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionEcmdIsAuthenticatedArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionEcmdUsernameArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionEdgeWorkersFailureArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionFileExtensionArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionFilenameArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionHostnameArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchAdvancedArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueCpCodeLimitsArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchResponseCodeArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchVariableArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionMetadataStageArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionOriginTimeoutArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionPathArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionQueryStringParameterArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionRandomArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionRecoveryConfigArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionRegularExpressionArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionRequestCookieArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionRequestHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionRequestMethodArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionRequestProtocolArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionRequestTypeArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionResponseHeaderArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionServerLocationArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionTimeArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionTokenAuthorizationArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionUserAgentArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionUserLocationArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionUserNetworkArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionVariableErrorArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionVirtualWaitingRoomRequestArgs',
    'GetPropertyRulesBuilderRulesV20230530CriterionVisitorPrioritizationRequestArgs',
    'GetPropertyRulesBuilderRulesV20230530CustomOverrideArgs',
    'GetPropertyRulesBuilderRulesV20230530VariableArgs',
    'GetPropertyRulesTemplateTemplateArgs',
    'GetPropertyRulesTemplateVariableArgs',
]

@pulumi.input_type
class ClientlistListItemArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 expiration_date: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiration_date")

    @expiration_date.setter
    def expiration_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_date", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class CloudletsApplicationLoadBalancerDataCenterArgs:
    def __init__(__self__, *,
                 continent: pulumi.Input[str],
                 country: pulumi.Input[str],
                 latitude: pulumi.Input[float],
                 longitude: pulumi.Input[float],
                 origin_id: pulumi.Input[str],
                 percent: pulumi.Input[float],
                 city: Optional[pulumi.Input[str]] = None,
                 cloud_server_host_header_override: Optional[pulumi.Input[bool]] = None,
                 cloud_service: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 liveness_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 state_or_province: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "continent", continent)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "origin_id", origin_id)
        pulumi.set(__self__, "percent", percent)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if cloud_server_host_header_override is not None:
            pulumi.set(__self__, "cloud_server_host_header_override", cloud_server_host_header_override)
        if cloud_service is not None:
            pulumi.set(__self__, "cloud_service", cloud_service)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if liveness_hosts is not None:
            pulumi.set(__self__, "liveness_hosts", liveness_hosts)
        if state_or_province is not None:
            pulumi.set(__self__, "state_or_province", state_or_province)

    @property
    @pulumi.getter
    def continent(self) -> pulumi.Input[str]:
        return pulumi.get(self, "continent")

    @continent.setter
    def continent(self, value: pulumi.Input[str]):
        pulumi.set(self, "continent", value)

    @property
    @pulumi.getter
    def country(self) -> pulumi.Input[str]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: pulumi.Input[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def latitude(self) -> pulumi.Input[float]:
        return pulumi.get(self, "latitude")

    @latitude.setter
    def latitude(self, value: pulumi.Input[float]):
        pulumi.set(self, "latitude", value)

    @property
    @pulumi.getter
    def longitude(self) -> pulumi.Input[float]:
        return pulumi.get(self, "longitude")

    @longitude.setter
    def longitude(self, value: pulumi.Input[float]):
        pulumi.set(self, "longitude", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter
    def percent(self) -> pulumi.Input[float]:
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: pulumi.Input[float]):
        pulumi.set(self, "percent", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="cloudServerHostHeaderOverride")
    def cloud_server_host_header_override(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cloud_server_host_header_override")

    @cloud_server_host_header_override.setter
    def cloud_server_host_header_override(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cloud_server_host_header_override", value)

    @property
    @pulumi.getter(name="cloudService")
    def cloud_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cloud_service")

    @cloud_service.setter
    def cloud_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cloud_service", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="livenessHosts")
    def liveness_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "liveness_hosts")

    @liveness_hosts.setter
    def liveness_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "liveness_hosts", value)

    @property
    @pulumi.getter(name="stateOrProvince")
    def state_or_province(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state_or_province")

    @state_or_province.setter
    def state_or_province(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state_or_province", value)


@pulumi.input_type
class CloudletsApplicationLoadBalancerLivenessSettingsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 port: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 additional_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 host_header: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 peer_certificate_verification: Optional[pulumi.Input[bool]] = None,
                 request_string: Optional[pulumi.Input[str]] = None,
                 response_string: Optional[pulumi.Input[str]] = None,
                 status3xx_failure: Optional[pulumi.Input[bool]] = None,
                 status4xx_failure: Optional[pulumi.Input[bool]] = None,
                 status5xx_failure: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[float]] = None):
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if additional_headers is not None:
            pulumi.set(__self__, "additional_headers", additional_headers)
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if peer_certificate_verification is not None:
            pulumi.set(__self__, "peer_certificate_verification", peer_certificate_verification)
        if request_string is not None:
            pulumi.set(__self__, "request_string", request_string)
        if response_string is not None:
            pulumi.set(__self__, "response_string", response_string)
        if status3xx_failure is not None:
            pulumi.set(__self__, "status3xx_failure", status3xx_failure)
        if status4xx_failure is not None:
            pulumi.set(__self__, "status4xx_failure", status4xx_failure)
        if status5xx_failure is not None:
            pulumi.set(__self__, "status5xx_failure", status5xx_failure)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="additionalHeaders")
    def additional_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "additional_headers")

    @additional_headers.setter
    def additional_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "additional_headers", value)

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_header")

    @host_header.setter
    def host_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_header", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="peerCertificateVerification")
    def peer_certificate_verification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "peer_certificate_verification")

    @peer_certificate_verification.setter
    def peer_certificate_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "peer_certificate_verification", value)

    @property
    @pulumi.getter(name="requestString")
    def request_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_string")

    @request_string.setter
    def request_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_string", value)

    @property
    @pulumi.getter(name="responseString")
    def response_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_string")

    @response_string.setter
    def response_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_string", value)

    @property
    @pulumi.getter(name="status3xxFailure")
    def status3xx_failure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "status3xx_failure")

    @status3xx_failure.setter
    def status3xx_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "status3xx_failure", value)

    @property
    @pulumi.getter(name="status4xxFailure")
    def status4xx_failure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "status4xx_failure")

    @status4xx_failure.setter
    def status4xx_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "status4xx_failure", value)

    @property
    @pulumi.getter(name="status5xxFailure")
    def status5xx_failure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "status5xx_failure")

    @status5xx_failure.setter
    def status5xx_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "status5xx_failure", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class CloudwrapperActivationTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 update: Optional[pulumi.Input[str]] = None):
        if create is not None:
            pulumi.set(__self__, "create", create)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update", value)


@pulumi.input_type
class CloudwrapperConfigurationLocationArgs:
    def __init__(__self__, *,
                 comments: pulumi.Input[str],
                 traffic_type_id: pulumi.Input[int],
                 capacity: Optional[pulumi.Input['CloudwrapperConfigurationLocationCapacityArgs']] = None):
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "traffic_type_id", traffic_type_id)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: pulumi.Input[str]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="trafficTypeId")
    def traffic_type_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "traffic_type_id")

    @traffic_type_id.setter
    def traffic_type_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "traffic_type_id", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input['CloudwrapperConfigurationLocationCapacityArgs']]:
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input['CloudwrapperConfigurationLocationCapacityArgs']]):
        pulumi.set(self, "capacity", value)


@pulumi.input_type
class CloudwrapperConfigurationLocationCapacityArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CloudwrapperConfigurationTimeoutsArgs:
    def __init__(__self__, *,
                 delete: Optional[pulumi.Input[str]] = None):
        if delete is not None:
            pulumi.set(__self__, "delete", delete)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)


@pulumi.input_type
class CpsDvEnrollmentAdminContactArgs:
    def __init__(__self__, *,
                 address_line_one: pulumi.Input[str],
                 city: pulumi.Input[str],
                 country_code: pulumi.Input[str],
                 email: pulumi.Input[str],
                 first_name: pulumi.Input[str],
                 last_name: pulumi.Input[str],
                 organization: pulumi.Input[str],
                 phone: pulumi.Input[str],
                 postal_code: pulumi.Input[str],
                 region: pulumi.Input[str],
                 address_line_two: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address_line_one")

    @address_line_one.setter
    def address_line_one(self, value: pulumi.Input[str]):
        pulumi.set(self, "address_line_one", value)

    @property
    @pulumi.getter
    def city(self) -> pulumi.Input[str]:
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: pulumi.Input[str]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def phone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: pulumi.Input[str]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_line_two")

    @address_line_two.setter
    def address_line_two(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_line_two", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class CpsDvEnrollmentCsrArgs:
    def __init__(__self__, *,
                 city: pulumi.Input[str],
                 country_code: pulumi.Input[str],
                 organization: pulumi.Input[str],
                 organizational_unit: pulumi.Input[str],
                 state: pulumi.Input[str],
                 preferred_trust_chain: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "organizational_unit", organizational_unit)
        pulumi.set(__self__, "state", state)
        if preferred_trust_chain is not None:
            pulumi.set(__self__, "preferred_trust_chain", preferred_trust_chain)

    @property
    @pulumi.getter
    def city(self) -> pulumi.Input[str]:
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: pulumi.Input[str]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "organizational_unit")

    @organizational_unit.setter
    def organizational_unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "organizational_unit", value)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input[str]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[str]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="preferredTrustChain")
    def preferred_trust_chain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_trust_chain")

    @preferred_trust_chain.setter
    def preferred_trust_chain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_trust_chain", value)


@pulumi.input_type
class CpsDvEnrollmentDnsChallengeArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 full_path: Optional[pulumi.Input[str]] = None,
                 response_body: Optional[pulumi.Input[str]] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if full_path is not None:
            pulumi.set(__self__, "full_path", full_path)
        if response_body is not None:
            pulumi.set(__self__, "response_body", response_body)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="fullPath")
    def full_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "full_path")

    @full_path.setter
    def full_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_path", value)

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_body")

    @response_body.setter
    def response_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_body", value)


@pulumi.input_type
class CpsDvEnrollmentHttpChallengeArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 full_path: Optional[pulumi.Input[str]] = None,
                 response_body: Optional[pulumi.Input[str]] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if full_path is not None:
            pulumi.set(__self__, "full_path", full_path)
        if response_body is not None:
            pulumi.set(__self__, "response_body", response_body)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="fullPath")
    def full_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "full_path")

    @full_path.setter
    def full_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_path", value)

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_body")

    @response_body.setter
    def response_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_body", value)


@pulumi.input_type
class CpsDvEnrollmentNetworkConfigurationArgs:
    def __init__(__self__, *,
                 geography: pulumi.Input[str],
                 client_mutual_authentication: Optional[pulumi.Input['CpsDvEnrollmentNetworkConfigurationClientMutualAuthenticationArgs']] = None,
                 clone_dns_names: Optional[pulumi.Input[bool]] = None,
                 disallowed_tls_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 must_have_ciphers: Optional[pulumi.Input[str]] = None,
                 ocsp_stapling: Optional[pulumi.Input[str]] = None,
                 preferred_ciphers: Optional[pulumi.Input[str]] = None,
                 quic_enabled: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "geography", geography)
        if client_mutual_authentication is not None:
            pulumi.set(__self__, "client_mutual_authentication", client_mutual_authentication)
        if clone_dns_names is not None:
            pulumi.set(__self__, "clone_dns_names", clone_dns_names)
        if disallowed_tls_versions is not None:
            pulumi.set(__self__, "disallowed_tls_versions", disallowed_tls_versions)
        if must_have_ciphers is not None:
            pulumi.set(__self__, "must_have_ciphers", must_have_ciphers)
        if ocsp_stapling is not None:
            pulumi.set(__self__, "ocsp_stapling", ocsp_stapling)
        if preferred_ciphers is not None:
            pulumi.set(__self__, "preferred_ciphers", preferred_ciphers)
        if quic_enabled is not None:
            pulumi.set(__self__, "quic_enabled", quic_enabled)

    @property
    @pulumi.getter
    def geography(self) -> pulumi.Input[str]:
        return pulumi.get(self, "geography")

    @geography.setter
    def geography(self, value: pulumi.Input[str]):
        pulumi.set(self, "geography", value)

    @property
    @pulumi.getter(name="clientMutualAuthentication")
    def client_mutual_authentication(self) -> Optional[pulumi.Input['CpsDvEnrollmentNetworkConfigurationClientMutualAuthenticationArgs']]:
        return pulumi.get(self, "client_mutual_authentication")

    @client_mutual_authentication.setter
    def client_mutual_authentication(self, value: Optional[pulumi.Input['CpsDvEnrollmentNetworkConfigurationClientMutualAuthenticationArgs']]):
        pulumi.set(self, "client_mutual_authentication", value)

    @property
    @pulumi.getter(name="cloneDnsNames")
    def clone_dns_names(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "clone_dns_names")

    @clone_dns_names.setter
    def clone_dns_names(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clone_dns_names", value)

    @property
    @pulumi.getter(name="disallowedTlsVersions")
    def disallowed_tls_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "disallowed_tls_versions")

    @disallowed_tls_versions.setter
    def disallowed_tls_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disallowed_tls_versions", value)

    @property
    @pulumi.getter(name="mustHaveCiphers")
    def must_have_ciphers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "must_have_ciphers")

    @must_have_ciphers.setter
    def must_have_ciphers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "must_have_ciphers", value)

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ocsp_stapling")

    @ocsp_stapling.setter
    def ocsp_stapling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocsp_stapling", value)

    @property
    @pulumi.getter(name="preferredCiphers")
    def preferred_ciphers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_ciphers")

    @preferred_ciphers.setter
    def preferred_ciphers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_ciphers", value)

    @property
    @pulumi.getter(name="quicEnabled")
    def quic_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "quic_enabled")

    @quic_enabled.setter
    def quic_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "quic_enabled", value)


@pulumi.input_type
class CpsDvEnrollmentNetworkConfigurationClientMutualAuthenticationArgs:
    def __init__(__self__, *,
                 ocsp_enabled: Optional[pulumi.Input[bool]] = None,
                 send_ca_list_to_client: Optional[pulumi.Input[bool]] = None,
                 set_id: Optional[pulumi.Input[str]] = None):
        if ocsp_enabled is not None:
            pulumi.set(__self__, "ocsp_enabled", ocsp_enabled)
        if send_ca_list_to_client is not None:
            pulumi.set(__self__, "send_ca_list_to_client", send_ca_list_to_client)
        if set_id is not None:
            pulumi.set(__self__, "set_id", set_id)

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ocsp_enabled")

    @ocsp_enabled.setter
    def ocsp_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ocsp_enabled", value)

    @property
    @pulumi.getter(name="sendCaListToClient")
    def send_ca_list_to_client(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "send_ca_list_to_client")

    @send_ca_list_to_client.setter
    def send_ca_list_to_client(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_ca_list_to_client", value)

    @property
    @pulumi.getter(name="setId")
    def set_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_id")

    @set_id.setter
    def set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_id", value)


@pulumi.input_type
class CpsDvEnrollmentOrganizationArgs:
    def __init__(__self__, *,
                 address_line_one: pulumi.Input[str],
                 city: pulumi.Input[str],
                 country_code: pulumi.Input[str],
                 name: pulumi.Input[str],
                 phone: pulumi.Input[str],
                 postal_code: pulumi.Input[str],
                 region: pulumi.Input[str],
                 address_line_two: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address_line_one")

    @address_line_one.setter
    def address_line_one(self, value: pulumi.Input[str]):
        pulumi.set(self, "address_line_one", value)

    @property
    @pulumi.getter
    def city(self) -> pulumi.Input[str]:
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: pulumi.Input[str]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def phone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: pulumi.Input[str]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_line_two")

    @address_line_two.setter
    def address_line_two(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_line_two", value)


@pulumi.input_type
class CpsDvEnrollmentTechContactArgs:
    def __init__(__self__, *,
                 address_line_one: pulumi.Input[str],
                 city: pulumi.Input[str],
                 country_code: pulumi.Input[str],
                 email: pulumi.Input[str],
                 first_name: pulumi.Input[str],
                 last_name: pulumi.Input[str],
                 organization: pulumi.Input[str],
                 phone: pulumi.Input[str],
                 postal_code: pulumi.Input[str],
                 region: pulumi.Input[str],
                 address_line_two: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address_line_one")

    @address_line_one.setter
    def address_line_one(self, value: pulumi.Input[str]):
        pulumi.set(self, "address_line_one", value)

    @property
    @pulumi.getter
    def city(self) -> pulumi.Input[str]:
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: pulumi.Input[str]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def phone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: pulumi.Input[str]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_line_two")

    @address_line_two.setter
    def address_line_two(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_line_two", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class CpsThirdPartyEnrollmentAdminContactArgs:
    def __init__(__self__, *,
                 address_line_one: pulumi.Input[str],
                 city: pulumi.Input[str],
                 country_code: pulumi.Input[str],
                 email: pulumi.Input[str],
                 first_name: pulumi.Input[str],
                 last_name: pulumi.Input[str],
                 organization: pulumi.Input[str],
                 phone: pulumi.Input[str],
                 postal_code: pulumi.Input[str],
                 region: pulumi.Input[str],
                 address_line_two: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address_line_one")

    @address_line_one.setter
    def address_line_one(self, value: pulumi.Input[str]):
        pulumi.set(self, "address_line_one", value)

    @property
    @pulumi.getter
    def city(self) -> pulumi.Input[str]:
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: pulumi.Input[str]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def phone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: pulumi.Input[str]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_line_two")

    @address_line_two.setter
    def address_line_two(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_line_two", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class CpsThirdPartyEnrollmentCsrArgs:
    def __init__(__self__, *,
                 city: pulumi.Input[str],
                 country_code: pulumi.Input[str],
                 organization: pulumi.Input[str],
                 organizational_unit: pulumi.Input[str],
                 state: pulumi.Input[str],
                 preferred_trust_chain: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "organizational_unit", organizational_unit)
        pulumi.set(__self__, "state", state)
        if preferred_trust_chain is not None:
            pulumi.set(__self__, "preferred_trust_chain", preferred_trust_chain)

    @property
    @pulumi.getter
    def city(self) -> pulumi.Input[str]:
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: pulumi.Input[str]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "organizational_unit")

    @organizational_unit.setter
    def organizational_unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "organizational_unit", value)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input[str]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[str]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="preferredTrustChain")
    def preferred_trust_chain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_trust_chain")

    @preferred_trust_chain.setter
    def preferred_trust_chain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_trust_chain", value)


@pulumi.input_type
class CpsThirdPartyEnrollmentNetworkConfigurationArgs:
    def __init__(__self__, *,
                 geography: pulumi.Input[str],
                 client_mutual_authentication: Optional[pulumi.Input['CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthenticationArgs']] = None,
                 clone_dns_names: Optional[pulumi.Input[bool]] = None,
                 disallowed_tls_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 must_have_ciphers: Optional[pulumi.Input[str]] = None,
                 ocsp_stapling: Optional[pulumi.Input[str]] = None,
                 preferred_ciphers: Optional[pulumi.Input[str]] = None,
                 quic_enabled: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "geography", geography)
        if client_mutual_authentication is not None:
            pulumi.set(__self__, "client_mutual_authentication", client_mutual_authentication)
        if clone_dns_names is not None:
            pulumi.set(__self__, "clone_dns_names", clone_dns_names)
        if disallowed_tls_versions is not None:
            pulumi.set(__self__, "disallowed_tls_versions", disallowed_tls_versions)
        if must_have_ciphers is not None:
            pulumi.set(__self__, "must_have_ciphers", must_have_ciphers)
        if ocsp_stapling is not None:
            pulumi.set(__self__, "ocsp_stapling", ocsp_stapling)
        if preferred_ciphers is not None:
            pulumi.set(__self__, "preferred_ciphers", preferred_ciphers)
        if quic_enabled is not None:
            pulumi.set(__self__, "quic_enabled", quic_enabled)

    @property
    @pulumi.getter
    def geography(self) -> pulumi.Input[str]:
        return pulumi.get(self, "geography")

    @geography.setter
    def geography(self, value: pulumi.Input[str]):
        pulumi.set(self, "geography", value)

    @property
    @pulumi.getter(name="clientMutualAuthentication")
    def client_mutual_authentication(self) -> Optional[pulumi.Input['CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthenticationArgs']]:
        return pulumi.get(self, "client_mutual_authentication")

    @client_mutual_authentication.setter
    def client_mutual_authentication(self, value: Optional[pulumi.Input['CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthenticationArgs']]):
        pulumi.set(self, "client_mutual_authentication", value)

    @property
    @pulumi.getter(name="cloneDnsNames")
    def clone_dns_names(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "clone_dns_names")

    @clone_dns_names.setter
    def clone_dns_names(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clone_dns_names", value)

    @property
    @pulumi.getter(name="disallowedTlsVersions")
    def disallowed_tls_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "disallowed_tls_versions")

    @disallowed_tls_versions.setter
    def disallowed_tls_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disallowed_tls_versions", value)

    @property
    @pulumi.getter(name="mustHaveCiphers")
    def must_have_ciphers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "must_have_ciphers")

    @must_have_ciphers.setter
    def must_have_ciphers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "must_have_ciphers", value)

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ocsp_stapling")

    @ocsp_stapling.setter
    def ocsp_stapling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocsp_stapling", value)

    @property
    @pulumi.getter(name="preferredCiphers")
    def preferred_ciphers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_ciphers")

    @preferred_ciphers.setter
    def preferred_ciphers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_ciphers", value)

    @property
    @pulumi.getter(name="quicEnabled")
    def quic_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "quic_enabled")

    @quic_enabled.setter
    def quic_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "quic_enabled", value)


@pulumi.input_type
class CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthenticationArgs:
    def __init__(__self__, *,
                 ocsp_enabled: Optional[pulumi.Input[bool]] = None,
                 send_ca_list_to_client: Optional[pulumi.Input[bool]] = None,
                 set_id: Optional[pulumi.Input[str]] = None):
        if ocsp_enabled is not None:
            pulumi.set(__self__, "ocsp_enabled", ocsp_enabled)
        if send_ca_list_to_client is not None:
            pulumi.set(__self__, "send_ca_list_to_client", send_ca_list_to_client)
        if set_id is not None:
            pulumi.set(__self__, "set_id", set_id)

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ocsp_enabled")

    @ocsp_enabled.setter
    def ocsp_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ocsp_enabled", value)

    @property
    @pulumi.getter(name="sendCaListToClient")
    def send_ca_list_to_client(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "send_ca_list_to_client")

    @send_ca_list_to_client.setter
    def send_ca_list_to_client(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_ca_list_to_client", value)

    @property
    @pulumi.getter(name="setId")
    def set_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_id")

    @set_id.setter
    def set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_id", value)


@pulumi.input_type
class CpsThirdPartyEnrollmentOrganizationArgs:
    def __init__(__self__, *,
                 address_line_one: pulumi.Input[str],
                 city: pulumi.Input[str],
                 country_code: pulumi.Input[str],
                 name: pulumi.Input[str],
                 phone: pulumi.Input[str],
                 postal_code: pulumi.Input[str],
                 region: pulumi.Input[str],
                 address_line_two: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address_line_one")

    @address_line_one.setter
    def address_line_one(self, value: pulumi.Input[str]):
        pulumi.set(self, "address_line_one", value)

    @property
    @pulumi.getter
    def city(self) -> pulumi.Input[str]:
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: pulumi.Input[str]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def phone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: pulumi.Input[str]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_line_two")

    @address_line_two.setter
    def address_line_two(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_line_two", value)


@pulumi.input_type
class CpsThirdPartyEnrollmentTechContactArgs:
    def __init__(__self__, *,
                 address_line_one: pulumi.Input[str],
                 city: pulumi.Input[str],
                 country_code: pulumi.Input[str],
                 email: pulumi.Input[str],
                 first_name: pulumi.Input[str],
                 last_name: pulumi.Input[str],
                 organization: pulumi.Input[str],
                 phone: pulumi.Input[str],
                 postal_code: pulumi.Input[str],
                 region: pulumi.Input[str],
                 address_line_two: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address_line_one")

    @address_line_one.setter
    def address_line_one(self, value: pulumi.Input[str]):
        pulumi.set(self, "address_line_one", value)

    @property
    @pulumi.getter
    def city(self) -> pulumi.Input[str]:
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: pulumi.Input[str]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def phone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: pulumi.Input[str]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_line_two")

    @address_line_two.setter
    def address_line_two(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_line_two", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DatastreamAzureConnectorArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 account_name: pulumi.Input[str],
                 container_name: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 path: pulumi.Input[str],
                 compress_logs: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "path", path)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "compress_logs")

    @compress_logs.setter
    def compress_logs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compress_logs", value)


@pulumi.input_type
class DatastreamDatadogConnectorArgs:
    def __init__(__self__, *,
                 auth_token: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 compress_logs: Optional[pulumi.Input[bool]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "compress_logs")

    @compress_logs.setter
    def compress_logs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compress_logs", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class DatastreamDeliveryConfigurationArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 frequency: pulumi.Input['DatastreamDeliveryConfigurationFrequencyArgs'],
                 field_delimiter: Optional[pulumi.Input[str]] = None,
                 upload_file_prefix: Optional[pulumi.Input[str]] = None,
                 upload_file_suffix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "frequency", frequency)
        if field_delimiter is not None:
            pulumi.set(__self__, "field_delimiter", field_delimiter)
        if upload_file_prefix is not None:
            pulumi.set(__self__, "upload_file_prefix", upload_file_prefix)
        if upload_file_suffix is not None:
            pulumi.set(__self__, "upload_file_suffix", upload_file_suffix)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Input['DatastreamDeliveryConfigurationFrequencyArgs']:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input['DatastreamDeliveryConfigurationFrequencyArgs']):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_delimiter")

    @field_delimiter.setter
    def field_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_delimiter", value)

    @property
    @pulumi.getter(name="uploadFilePrefix")
    def upload_file_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload_file_prefix")

    @upload_file_prefix.setter
    def upload_file_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_file_prefix", value)

    @property
    @pulumi.getter(name="uploadFileSuffix")
    def upload_file_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload_file_suffix")

    @upload_file_suffix.setter
    def upload_file_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_file_suffix", value)


@pulumi.input_type
class DatastreamDeliveryConfigurationFrequencyArgs:
    def __init__(__self__, *,
                 interval_in_secs: pulumi.Input[int]):
        pulumi.set(__self__, "interval_in_secs", interval_in_secs)

    @property
    @pulumi.getter(name="intervalInSecs")
    def interval_in_secs(self) -> pulumi.Input[int]:
        return pulumi.get(self, "interval_in_secs")

    @interval_in_secs.setter
    def interval_in_secs(self, value: pulumi.Input[int]):
        pulumi.set(self, "interval_in_secs", value)


@pulumi.input_type
class DatastreamElasticsearchConnectorArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 index_name: pulumi.Input[str],
                 password: pulumi.Input[str],
                 user_name: pulumi.Input[str],
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 client_cert: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 custom_header_name: Optional[pulumi.Input[str]] = None,
                 custom_header_value: Optional[pulumi.Input[str]] = None,
                 m_tls: Optional[pulumi.Input[bool]] = None,
                 tls_hostname: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "index_name", index_name)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if client_cert is not None:
            pulumi.set(__self__, "client_cert", client_cert)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)
        if m_tls is not None:
            pulumi.set(__self__, "m_tls", m_tls)
        if tls_hostname is not None:
            pulumi.set(__self__, "tls_hostname", tls_hostname)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index_name")

    @index_name.setter
    def index_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_name", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert")

    @client_cert.setter
    def client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_header_value")

    @custom_header_value.setter
    def custom_header_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_header_value", value)

    @property
    @pulumi.getter(name="mTls")
    def m_tls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "m_tls")

    @m_tls.setter
    def m_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "m_tls", value)

    @property
    @pulumi.getter(name="tlsHostname")
    def tls_hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_hostname")

    @tls_hostname.setter
    def tls_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_hostname", value)


@pulumi.input_type
class DatastreamGcsConnectorArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 private_key: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 service_account_name: pulumi.Input[str],
                 compress_logs: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "service_account_name", service_account_name)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "compress_logs")

    @compress_logs.setter
    def compress_logs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compress_logs", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class DatastreamHttpsConnectorArgs:
    def __init__(__self__, *,
                 authentication_type: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 client_cert: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 compress_logs: Optional[pulumi.Input[bool]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 custom_header_name: Optional[pulumi.Input[str]] = None,
                 custom_header_value: Optional[pulumi.Input[str]] = None,
                 m_tls: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 tls_hostname: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if client_cert is not None:
            pulumi.set(__self__, "client_cert", client_cert)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)
        if m_tls is not None:
            pulumi.set(__self__, "m_tls", m_tls)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tls_hostname is not None:
            pulumi.set(__self__, "tls_hostname", tls_hostname)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert")

    @client_cert.setter
    def client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "compress_logs")

    @compress_logs.setter
    def compress_logs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compress_logs", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_header_value")

    @custom_header_value.setter
    def custom_header_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_header_value", value)

    @property
    @pulumi.getter(name="mTls")
    def m_tls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "m_tls")

    @m_tls.setter
    def m_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "m_tls", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="tlsHostname")
    def tls_hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_hostname")

    @tls_hostname.setter
    def tls_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_hostname", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class DatastreamLogglyConnectorArgs:
    def __init__(__self__, *,
                 auth_token: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 content_type: Optional[pulumi.Input[str]] = None,
                 custom_header_name: Optional[pulumi.Input[str]] = None,
                 custom_header_value: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_header_value")

    @custom_header_value.setter
    def custom_header_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_header_value", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class DatastreamNewRelicConnectorArgs:
    def __init__(__self__, *,
                 auth_token: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 content_type: Optional[pulumi.Input[str]] = None,
                 custom_header_name: Optional[pulumi.Input[str]] = None,
                 custom_header_value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_header_value")

    @custom_header_value.setter
    def custom_header_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_header_value", value)


@pulumi.input_type
class DatastreamOracleConnectorArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 bucket: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 path: pulumi.Input[str],
                 region: pulumi.Input[str],
                 secret_access_key: pulumi.Input[str],
                 compress_logs: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "compress_logs")

    @compress_logs.setter
    def compress_logs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compress_logs", value)


@pulumi.input_type
class DatastreamS3ConnectorArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 bucket: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 path: pulumi.Input[str],
                 region: pulumi.Input[str],
                 secret_access_key: pulumi.Input[str],
                 compress_logs: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "compress_logs")

    @compress_logs.setter
    def compress_logs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compress_logs", value)


@pulumi.input_type
class DatastreamSplunkConnectorArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 event_collector_token: pulumi.Input[str],
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 client_cert: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 compress_logs: Optional[pulumi.Input[bool]] = None,
                 custom_header_name: Optional[pulumi.Input[str]] = None,
                 custom_header_value: Optional[pulumi.Input[str]] = None,
                 m_tls: Optional[pulumi.Input[bool]] = None,
                 tls_hostname: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "event_collector_token", event_collector_token)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if client_cert is not None:
            pulumi.set(__self__, "client_cert", client_cert)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)
        if m_tls is not None:
            pulumi.set(__self__, "m_tls", m_tls)
        if tls_hostname is not None:
            pulumi.set(__self__, "tls_hostname", tls_hostname)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="eventCollectorToken")
    def event_collector_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "event_collector_token")

    @event_collector_token.setter
    def event_collector_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_collector_token", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert")

    @client_cert.setter
    def client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "compress_logs")

    @compress_logs.setter
    def compress_logs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compress_logs", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_header_value")

    @custom_header_value.setter
    def custom_header_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_header_value", value)

    @property
    @pulumi.getter(name="mTls")
    def m_tls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "m_tls")

    @m_tls.setter
    def m_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "m_tls", value)

    @property
    @pulumi.getter(name="tlsHostname")
    def tls_hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_hostname")

    @tls_hostname.setter
    def tls_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_hostname", value)


@pulumi.input_type
class DatastreamSumologicConnectorArgs:
    def __init__(__self__, *,
                 collector_code: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 compress_logs: Optional[pulumi.Input[bool]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 custom_header_name: Optional[pulumi.Input[str]] = None,
                 custom_header_value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "collector_code", collector_code)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)

    @property
    @pulumi.getter(name="collectorCode")
    def collector_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "collector_code")

    @collector_code.setter
    def collector_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "collector_code", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "compress_logs")

    @compress_logs.setter
    def compress_logs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compress_logs", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_header_value")

    @custom_header_value.setter
    def custom_header_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_header_value", value)


@pulumi.input_type
class DnsZoneTsigKeyArgs:
    def __init__(__self__, *,
                 algorithm: pulumi.Input[str],
                 name: pulumi.Input[str],
                 secret: pulumi.Input[str]):
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Input[str]:
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class EdgeKvInitialDataArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if group is not None:
            pulumi.set(__self__, "group", group)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)


@pulumi.input_type
class GtmAsmapAssignmentArgs:
    def __init__(__self__, *,
                 as_numbers: pulumi.Input[Sequence[pulumi.Input[int]]],
                 datacenter_id: pulumi.Input[int],
                 nickname: pulumi.Input[str]):
        pulumi.set(__self__, "as_numbers", as_numbers)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="asNumbers")
    def as_numbers(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        return pulumi.get(self, "as_numbers")

    @as_numbers.setter
    def as_numbers(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "as_numbers", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: pulumi.Input[str]):
        pulumi.set(self, "nickname", value)


@pulumi.input_type
class GtmAsmapDefaultDatacenterArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[int],
                 nickname: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if nickname is not None:
            pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nickname", value)


@pulumi.input_type
class GtmCidrmapAssignmentArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[int],
                 nickname: pulumi.Input[str],
                 blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)
        if blocks is not None:
            pulumi.set(__self__, "blocks", blocks)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: pulumi.Input[str]):
        pulumi.set(self, "nickname", value)

    @property
    @pulumi.getter
    def blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "blocks")

    @blocks.setter
    def blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "blocks", value)


@pulumi.input_type
class GtmCidrmapDefaultDatacenterArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[int],
                 nickname: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if nickname is not None:
            pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nickname", value)


@pulumi.input_type
class GtmDatacenterDefaultLoadObjectArgs:
    def __init__(__self__, *,
                 load_object: Optional[pulumi.Input[str]] = None,
                 load_object_port: Optional[pulumi.Input[int]] = None,
                 load_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if load_object is not None:
            pulumi.set(__self__, "load_object", load_object)
        if load_object_port is not None:
            pulumi.set(__self__, "load_object_port", load_object_port)
        if load_servers is not None:
            pulumi.set(__self__, "load_servers", load_servers)

    @property
    @pulumi.getter(name="loadObject")
    def load_object(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_object")

    @load_object.setter
    def load_object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_object", value)

    @property
    @pulumi.getter(name="loadObjectPort")
    def load_object_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "load_object_port")

    @load_object_port.setter
    def load_object_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "load_object_port", value)

    @property
    @pulumi.getter(name="loadServers")
    def load_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "load_servers")

    @load_servers.setter
    def load_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_servers", value)


@pulumi.input_type
class GtmGeomapAssignmentArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[int],
                 nickname: pulumi.Input[str],
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: pulumi.Input[str]):
        pulumi.set(self, "nickname", value)

    @property
    @pulumi.getter
    def countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "countries", value)


@pulumi.input_type
class GtmGeomapDefaultDatacenterArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[int],
                 nickname: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if nickname is not None:
            pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def nickname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nickname")

    @nickname.setter
    def nickname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nickname", value)


@pulumi.input_type
class GtmPropertyLivenessTestArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 test_interval: pulumi.Input[int],
                 test_object_protocol: pulumi.Input[str],
                 test_timeout: pulumi.Input[float],
                 answers_required: Optional[pulumi.Input[bool]] = None,
                 disable_nonstandard_port_warning: Optional[pulumi.Input[bool]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 error_penalty: Optional[pulumi.Input[float]] = None,
                 http_error3xx: Optional[pulumi.Input[bool]] = None,
                 http_error4xx: Optional[pulumi.Input[bool]] = None,
                 http_error5xx: Optional[pulumi.Input[bool]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['GtmPropertyLivenessTestHttpHeaderArgs']]]] = None,
                 peer_certificate_verification: Optional[pulumi.Input[bool]] = None,
                 recursion_requested: Optional[pulumi.Input[bool]] = None,
                 request_string: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 response_string: Optional[pulumi.Input[str]] = None,
                 ssl_client_certificate: Optional[pulumi.Input[str]] = None,
                 ssl_client_private_key: Optional[pulumi.Input[str]] = None,
                 test_object: Optional[pulumi.Input[str]] = None,
                 test_object_password: Optional[pulumi.Input[str]] = None,
                 test_object_port: Optional[pulumi.Input[int]] = None,
                 test_object_username: Optional[pulumi.Input[str]] = None,
                 timeout_penalty: Optional[pulumi.Input[float]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "test_interval", test_interval)
        pulumi.set(__self__, "test_object_protocol", test_object_protocol)
        pulumi.set(__self__, "test_timeout", test_timeout)
        if answers_required is not None:
            pulumi.set(__self__, "answers_required", answers_required)
        if disable_nonstandard_port_warning is not None:
            pulumi.set(__self__, "disable_nonstandard_port_warning", disable_nonstandard_port_warning)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if error_penalty is not None:
            pulumi.set(__self__, "error_penalty", error_penalty)
        if http_error3xx is not None:
            pulumi.set(__self__, "http_error3xx", http_error3xx)
        if http_error4xx is not None:
            pulumi.set(__self__, "http_error4xx", http_error4xx)
        if http_error5xx is not None:
            pulumi.set(__self__, "http_error5xx", http_error5xx)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if peer_certificate_verification is not None:
            pulumi.set(__self__, "peer_certificate_verification", peer_certificate_verification)
        if recursion_requested is not None:
            pulumi.set(__self__, "recursion_requested", recursion_requested)
        if request_string is not None:
            pulumi.set(__self__, "request_string", request_string)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if response_string is not None:
            pulumi.set(__self__, "response_string", response_string)
        if ssl_client_certificate is not None:
            pulumi.set(__self__, "ssl_client_certificate", ssl_client_certificate)
        if ssl_client_private_key is not None:
            pulumi.set(__self__, "ssl_client_private_key", ssl_client_private_key)
        if test_object is not None:
            pulumi.set(__self__, "test_object", test_object)
        if test_object_password is not None:
            pulumi.set(__self__, "test_object_password", test_object_password)
        if test_object_port is not None:
            pulumi.set(__self__, "test_object_port", test_object_port)
        if test_object_username is not None:
            pulumi.set(__self__, "test_object_username", test_object_username)
        if timeout_penalty is not None:
            pulumi.set(__self__, "timeout_penalty", timeout_penalty)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="testInterval")
    def test_interval(self) -> pulumi.Input[int]:
        return pulumi.get(self, "test_interval")

    @test_interval.setter
    def test_interval(self, value: pulumi.Input[int]):
        pulumi.set(self, "test_interval", value)

    @property
    @pulumi.getter(name="testObjectProtocol")
    def test_object_protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "test_object_protocol")

    @test_object_protocol.setter
    def test_object_protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "test_object_protocol", value)

    @property
    @pulumi.getter(name="testTimeout")
    def test_timeout(self) -> pulumi.Input[float]:
        return pulumi.get(self, "test_timeout")

    @test_timeout.setter
    def test_timeout(self, value: pulumi.Input[float]):
        pulumi.set(self, "test_timeout", value)

    @property
    @pulumi.getter(name="answersRequired")
    def answers_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "answers_required")

    @answers_required.setter
    def answers_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "answers_required", value)

    @property
    @pulumi.getter(name="disableNonstandardPortWarning")
    def disable_nonstandard_port_warning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_nonstandard_port_warning")

    @disable_nonstandard_port_warning.setter
    def disable_nonstandard_port_warning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_nonstandard_port_warning", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="errorPenalty")
    def error_penalty(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "error_penalty")

    @error_penalty.setter
    def error_penalty(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "error_penalty", value)

    @property
    @pulumi.getter(name="httpError3xx")
    def http_error3xx(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "http_error3xx")

    @http_error3xx.setter
    def http_error3xx(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "http_error3xx", value)

    @property
    @pulumi.getter(name="httpError4xx")
    def http_error4xx(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "http_error4xx")

    @http_error4xx.setter
    def http_error4xx(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "http_error4xx", value)

    @property
    @pulumi.getter(name="httpError5xx")
    def http_error5xx(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "http_error5xx")

    @http_error5xx.setter
    def http_error5xx(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "http_error5xx", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GtmPropertyLivenessTestHttpHeaderArgs']]]]:
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GtmPropertyLivenessTestHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter(name="peerCertificateVerification")
    def peer_certificate_verification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "peer_certificate_verification")

    @peer_certificate_verification.setter
    def peer_certificate_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "peer_certificate_verification", value)

    @property
    @pulumi.getter(name="recursionRequested")
    def recursion_requested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "recursion_requested")

    @recursion_requested.setter
    def recursion_requested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recursion_requested", value)

    @property
    @pulumi.getter(name="requestString")
    def request_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_string")

    @request_string.setter
    def request_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_string", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="responseString")
    def response_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_string")

    @response_string.setter
    def response_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_string", value)

    @property
    @pulumi.getter(name="sslClientCertificate")
    def ssl_client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_client_certificate")

    @ssl_client_certificate.setter
    def ssl_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_certificate", value)

    @property
    @pulumi.getter(name="sslClientPrivateKey")
    def ssl_client_private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_client_private_key")

    @ssl_client_private_key.setter
    def ssl_client_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_private_key", value)

    @property
    @pulumi.getter(name="testObject")
    def test_object(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "test_object")

    @test_object.setter
    def test_object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test_object", value)

    @property
    @pulumi.getter(name="testObjectPassword")
    def test_object_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "test_object_password")

    @test_object_password.setter
    def test_object_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test_object_password", value)

    @property
    @pulumi.getter(name="testObjectPort")
    def test_object_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "test_object_port")

    @test_object_port.setter
    def test_object_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "test_object_port", value)

    @property
    @pulumi.getter(name="testObjectUsername")
    def test_object_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "test_object_username")

    @test_object_username.setter
    def test_object_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test_object_username", value)

    @property
    @pulumi.getter(name="timeoutPenalty")
    def timeout_penalty(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "timeout_penalty")

    @timeout_penalty.setter
    def timeout_penalty(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "timeout_penalty", value)


@pulumi.input_type
class GtmPropertyLivenessTestHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GtmPropertyStaticRrSetArgs:
    def __init__(__self__, *,
                 rdatas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if rdatas is not None:
            pulumi.set(__self__, "rdatas", rdatas)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def rdatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "rdatas")

    @rdatas.setter
    def rdatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rdatas", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GtmPropertyTrafficTargetArgs:
    def __init__(__self__, *,
                 datacenter_id: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 handout_cname: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 weight: Optional[pulumi.Input[float]] = None):
        if datacenter_id is not None:
            pulumi.set(__self__, "datacenter_id", datacenter_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if handout_cname is not None:
            pulumi.set(__self__, "handout_cname", handout_cname)
        if name is not None:
            warnings.warn("""The attribute `name` has been deprecated. Any reads or writes on this attribute are ignored""", DeprecationWarning)
            pulumi.log.warn("""name is deprecated: The attribute `name` has been deprecated. Any reads or writes on this attribute are ignored""")
        if name is not None:
            pulumi.set(__self__, "name", name)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="handoutCname")
    def handout_cname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "handout_cname")

    @handout_cname.setter
    def handout_cname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "handout_cname", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""The attribute `name` has been deprecated. Any reads or writes on this attribute are ignored""", DeprecationWarning)
        pulumi.log.warn("""name is deprecated: The attribute `name` has been deprecated. Any reads or writes on this attribute are ignored""")

        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class GtmResourceResourceInstanceArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[int],
                 load_object: Optional[pulumi.Input[str]] = None,
                 load_object_port: Optional[pulumi.Input[int]] = None,
                 load_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 use_default_load_object: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if load_object is not None:
            pulumi.set(__self__, "load_object", load_object)
        if load_object_port is not None:
            pulumi.set(__self__, "load_object_port", load_object_port)
        if load_servers is not None:
            pulumi.set(__self__, "load_servers", load_servers)
        if use_default_load_object is not None:
            pulumi.set(__self__, "use_default_load_object", use_default_load_object)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="loadObject")
    def load_object(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_object")

    @load_object.setter
    def load_object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_object", value)

    @property
    @pulumi.getter(name="loadObjectPort")
    def load_object_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "load_object_port")

    @load_object_port.setter
    def load_object_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "load_object_port", value)

    @property
    @pulumi.getter(name="loadServers")
    def load_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "load_servers")

    @load_servers.setter
    def load_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_servers", value)

    @property
    @pulumi.getter(name="useDefaultLoadObject")
    def use_default_load_object(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_default_load_object")

    @use_default_load_object.setter
    def use_default_load_object(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_default_load_object", value)


@pulumi.input_type
class PropertyActivationComplianceRecordArgs:
    def __init__(__self__, *,
                 noncompliance_reason_emergency: Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonEmergencyArgs']] = None,
                 noncompliance_reason_no_production_traffic: Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs']] = None,
                 noncompliance_reason_none: Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonNoneArgs']] = None,
                 noncompliance_reason_other: Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonOtherArgs']] = None):
        if noncompliance_reason_emergency is not None:
            pulumi.set(__self__, "noncompliance_reason_emergency", noncompliance_reason_emergency)
        if noncompliance_reason_no_production_traffic is not None:
            pulumi.set(__self__, "noncompliance_reason_no_production_traffic", noncompliance_reason_no_production_traffic)
        if noncompliance_reason_none is not None:
            pulumi.set(__self__, "noncompliance_reason_none", noncompliance_reason_none)
        if noncompliance_reason_other is not None:
            pulumi.set(__self__, "noncompliance_reason_other", noncompliance_reason_other)

    @property
    @pulumi.getter(name="noncomplianceReasonEmergency")
    def noncompliance_reason_emergency(self) -> Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonEmergencyArgs']]:
        return pulumi.get(self, "noncompliance_reason_emergency")

    @noncompliance_reason_emergency.setter
    def noncompliance_reason_emergency(self, value: Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonEmergencyArgs']]):
        pulumi.set(self, "noncompliance_reason_emergency", value)

    @property
    @pulumi.getter(name="noncomplianceReasonNoProductionTraffic")
    def noncompliance_reason_no_production_traffic(self) -> Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs']]:
        return pulumi.get(self, "noncompliance_reason_no_production_traffic")

    @noncompliance_reason_no_production_traffic.setter
    def noncompliance_reason_no_production_traffic(self, value: Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs']]):
        pulumi.set(self, "noncompliance_reason_no_production_traffic", value)

    @property
    @pulumi.getter(name="noncomplianceReasonNone")
    def noncompliance_reason_none(self) -> Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonNoneArgs']]:
        return pulumi.get(self, "noncompliance_reason_none")

    @noncompliance_reason_none.setter
    def noncompliance_reason_none(self, value: Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonNoneArgs']]):
        pulumi.set(self, "noncompliance_reason_none", value)

    @property
    @pulumi.getter(name="noncomplianceReasonOther")
    def noncompliance_reason_other(self) -> Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonOtherArgs']]:
        return pulumi.get(self, "noncompliance_reason_other")

    @noncompliance_reason_other.setter
    def noncompliance_reason_other(self, value: Optional[pulumi.Input['PropertyActivationComplianceRecordNoncomplianceReasonOtherArgs']]):
        pulumi.set(self, "noncompliance_reason_other", value)


@pulumi.input_type
class PropertyActivationComplianceRecordNoncomplianceReasonEmergencyArgs:
    def __init__(__self__, *,
                 ticket_id: Optional[pulumi.Input[str]] = None):
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ticket_id")

    @ticket_id.setter
    def ticket_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ticket_id", value)


@pulumi.input_type
class PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs:
    def __init__(__self__, *,
                 ticket_id: Optional[pulumi.Input[str]] = None):
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ticket_id")

    @ticket_id.setter
    def ticket_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ticket_id", value)


@pulumi.input_type
class PropertyActivationComplianceRecordNoncomplianceReasonNoneArgs:
    def __init__(__self__, *,
                 customer_email: Optional[pulumi.Input[str]] = None,
                 peer_reviewed_by: Optional[pulumi.Input[str]] = None,
                 ticket_id: Optional[pulumi.Input[str]] = None,
                 unit_tested: Optional[pulumi.Input[bool]] = None):
        if customer_email is not None:
            pulumi.set(__self__, "customer_email", customer_email)
        if peer_reviewed_by is not None:
            pulumi.set(__self__, "peer_reviewed_by", peer_reviewed_by)
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)
        if unit_tested is not None:
            pulumi.set(__self__, "unit_tested", unit_tested)

    @property
    @pulumi.getter(name="customerEmail")
    def customer_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "customer_email")

    @customer_email.setter
    def customer_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_email", value)

    @property
    @pulumi.getter(name="peerReviewedBy")
    def peer_reviewed_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer_reviewed_by")

    @peer_reviewed_by.setter
    def peer_reviewed_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_reviewed_by", value)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ticket_id")

    @ticket_id.setter
    def ticket_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ticket_id", value)

    @property
    @pulumi.getter(name="unitTested")
    def unit_tested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "unit_tested")

    @unit_tested.setter
    def unit_tested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unit_tested", value)


@pulumi.input_type
class PropertyActivationComplianceRecordNoncomplianceReasonOtherArgs:
    def __init__(__self__, *,
                 other_noncompliance_reason: Optional[pulumi.Input[str]] = None,
                 ticket_id: Optional[pulumi.Input[str]] = None):
        if other_noncompliance_reason is not None:
            pulumi.set(__self__, "other_noncompliance_reason", other_noncompliance_reason)
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="otherNoncomplianceReason")
    def other_noncompliance_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "other_noncompliance_reason")

    @other_noncompliance_reason.setter
    def other_noncompliance_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "other_noncompliance_reason", value)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ticket_id")

    @ticket_id.setter
    def ticket_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ticket_id", value)


@pulumi.input_type
class PropertyActivationRuleErrorArgs:
    def __init__(__self__, *,
                 behavior_name: Optional[pulumi.Input[str]] = None,
                 detail: Optional[pulumi.Input[str]] = None,
                 error_location: Optional[pulumi.Input[str]] = None,
                 instance: Optional[pulumi.Input[str]] = None,
                 status_code: Optional[pulumi.Input[int]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if behavior_name is not None:
            pulumi.set(__self__, "behavior_name", behavior_name)
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if error_location is not None:
            pulumi.set(__self__, "error_location", error_location)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="behaviorName")
    def behavior_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "behavior_name")

    @behavior_name.setter
    def behavior_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "behavior_name", value)

    @property
    @pulumi.getter
    def detail(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detail")

    @detail.setter
    def detail(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detail", value)

    @property
    @pulumi.getter(name="errorLocation")
    def error_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_location")

    @error_location.setter
    def error_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_location", value)

    @property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class PropertyHostnameArgs:
    def __init__(__self__, *,
                 cert_provisioning_type: pulumi.Input[str],
                 cname_from: pulumi.Input[str],
                 cname_to: pulumi.Input[str],
                 cert_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['PropertyHostnameCertStatusArgs']]]] = None,
                 cname_type: Optional[pulumi.Input[str]] = None,
                 edge_hostname_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "cert_provisioning_type", cert_provisioning_type)
        pulumi.set(__self__, "cname_from", cname_from)
        pulumi.set(__self__, "cname_to", cname_to)
        if cert_statuses is not None:
            pulumi.set(__self__, "cert_statuses", cert_statuses)
        if cname_type is not None:
            pulumi.set(__self__, "cname_type", cname_type)
        if edge_hostname_id is not None:
            pulumi.set(__self__, "edge_hostname_id", edge_hostname_id)

    @property
    @pulumi.getter(name="certProvisioningType")
    def cert_provisioning_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cert_provisioning_type")

    @cert_provisioning_type.setter
    def cert_provisioning_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "cert_provisioning_type", value)

    @property
    @pulumi.getter(name="cnameFrom")
    def cname_from(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cname_from")

    @cname_from.setter
    def cname_from(self, value: pulumi.Input[str]):
        pulumi.set(self, "cname_from", value)

    @property
    @pulumi.getter(name="cnameTo")
    def cname_to(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cname_to")

    @cname_to.setter
    def cname_to(self, value: pulumi.Input[str]):
        pulumi.set(self, "cname_to", value)

    @property
    @pulumi.getter(name="certStatuses")
    def cert_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PropertyHostnameCertStatusArgs']]]]:
        return pulumi.get(self, "cert_statuses")

    @cert_statuses.setter
    def cert_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PropertyHostnameCertStatusArgs']]]]):
        pulumi.set(self, "cert_statuses", value)

    @property
    @pulumi.getter(name="cnameType")
    def cname_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cname_type")

    @cname_type.setter
    def cname_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_type", value)

    @property
    @pulumi.getter(name="edgeHostnameId")
    def edge_hostname_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "edge_hostname_id")

    @edge_hostname_id.setter
    def edge_hostname_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_hostname_id", value)


@pulumi.input_type
class PropertyHostnameCertStatusArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None,
                 production_status: Optional[pulumi.Input[str]] = None,
                 staging_status: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if production_status is not None:
            pulumi.set(__self__, "production_status", production_status)
        if staging_status is not None:
            pulumi.set(__self__, "staging_status", staging_status)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="productionStatus")
    def production_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "production_status")

    @production_status.setter
    def production_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "production_status", value)

    @property
    @pulumi.getter(name="stagingStatus")
    def staging_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "staging_status")

    @staging_status.setter
    def staging_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "staging_status", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class PropertyIncludeActivationComplianceRecordArgs:
    def __init__(__self__, *,
                 noncompliance_reason_emergency: Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergencyArgs']] = None,
                 noncompliance_reason_no_production_traffic: Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs']] = None,
                 noncompliance_reason_none: Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoneArgs']] = None,
                 noncompliance_reason_other: Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonOtherArgs']] = None):
        if noncompliance_reason_emergency is not None:
            pulumi.set(__self__, "noncompliance_reason_emergency", noncompliance_reason_emergency)
        if noncompliance_reason_no_production_traffic is not None:
            pulumi.set(__self__, "noncompliance_reason_no_production_traffic", noncompliance_reason_no_production_traffic)
        if noncompliance_reason_none is not None:
            pulumi.set(__self__, "noncompliance_reason_none", noncompliance_reason_none)
        if noncompliance_reason_other is not None:
            pulumi.set(__self__, "noncompliance_reason_other", noncompliance_reason_other)

    @property
    @pulumi.getter(name="noncomplianceReasonEmergency")
    def noncompliance_reason_emergency(self) -> Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergencyArgs']]:
        return pulumi.get(self, "noncompliance_reason_emergency")

    @noncompliance_reason_emergency.setter
    def noncompliance_reason_emergency(self, value: Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergencyArgs']]):
        pulumi.set(self, "noncompliance_reason_emergency", value)

    @property
    @pulumi.getter(name="noncomplianceReasonNoProductionTraffic")
    def noncompliance_reason_no_production_traffic(self) -> Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs']]:
        return pulumi.get(self, "noncompliance_reason_no_production_traffic")

    @noncompliance_reason_no_production_traffic.setter
    def noncompliance_reason_no_production_traffic(self, value: Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs']]):
        pulumi.set(self, "noncompliance_reason_no_production_traffic", value)

    @property
    @pulumi.getter(name="noncomplianceReasonNone")
    def noncompliance_reason_none(self) -> Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoneArgs']]:
        return pulumi.get(self, "noncompliance_reason_none")

    @noncompliance_reason_none.setter
    def noncompliance_reason_none(self, value: Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoneArgs']]):
        pulumi.set(self, "noncompliance_reason_none", value)

    @property
    @pulumi.getter(name="noncomplianceReasonOther")
    def noncompliance_reason_other(self) -> Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonOtherArgs']]:
        return pulumi.get(self, "noncompliance_reason_other")

    @noncompliance_reason_other.setter
    def noncompliance_reason_other(self, value: Optional[pulumi.Input['PropertyIncludeActivationComplianceRecordNoncomplianceReasonOtherArgs']]):
        pulumi.set(self, "noncompliance_reason_other", value)


@pulumi.input_type
class PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergencyArgs:
    def __init__(__self__, *,
                 ticket_id: Optional[pulumi.Input[str]] = None):
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ticket_id")

    @ticket_id.setter
    def ticket_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ticket_id", value)


@pulumi.input_type
class PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTrafficArgs:
    def __init__(__self__, *,
                 ticket_id: Optional[pulumi.Input[str]] = None):
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ticket_id")

    @ticket_id.setter
    def ticket_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ticket_id", value)


@pulumi.input_type
class PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoneArgs:
    def __init__(__self__, *,
                 customer_email: Optional[pulumi.Input[str]] = None,
                 peer_reviewed_by: Optional[pulumi.Input[str]] = None,
                 ticket_id: Optional[pulumi.Input[str]] = None,
                 unit_tested: Optional[pulumi.Input[bool]] = None):
        if customer_email is not None:
            pulumi.set(__self__, "customer_email", customer_email)
        if peer_reviewed_by is not None:
            pulumi.set(__self__, "peer_reviewed_by", peer_reviewed_by)
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)
        if unit_tested is not None:
            pulumi.set(__self__, "unit_tested", unit_tested)

    @property
    @pulumi.getter(name="customerEmail")
    def customer_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "customer_email")

    @customer_email.setter
    def customer_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_email", value)

    @property
    @pulumi.getter(name="peerReviewedBy")
    def peer_reviewed_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer_reviewed_by")

    @peer_reviewed_by.setter
    def peer_reviewed_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_reviewed_by", value)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ticket_id")

    @ticket_id.setter
    def ticket_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ticket_id", value)

    @property
    @pulumi.getter(name="unitTested")
    def unit_tested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "unit_tested")

    @unit_tested.setter
    def unit_tested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unit_tested", value)


@pulumi.input_type
class PropertyIncludeActivationComplianceRecordNoncomplianceReasonOtherArgs:
    def __init__(__self__, *,
                 other_noncompliance_reason: Optional[pulumi.Input[str]] = None,
                 ticket_id: Optional[pulumi.Input[str]] = None):
        if other_noncompliance_reason is not None:
            pulumi.set(__self__, "other_noncompliance_reason", other_noncompliance_reason)
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="otherNoncomplianceReason")
    def other_noncompliance_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "other_noncompliance_reason")

    @other_noncompliance_reason.setter
    def other_noncompliance_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "other_noncompliance_reason", value)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ticket_id")

    @ticket_id.setter
    def ticket_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ticket_id", value)


@pulumi.input_type
class PropertyRuleErrorArgs:
    def __init__(__self__, *,
                 behavior_name: Optional[pulumi.Input[str]] = None,
                 detail: Optional[pulumi.Input[str]] = None,
                 error_location: Optional[pulumi.Input[str]] = None,
                 instance: Optional[pulumi.Input[str]] = None,
                 status_code: Optional[pulumi.Input[int]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if behavior_name is not None:
            pulumi.set(__self__, "behavior_name", behavior_name)
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if error_location is not None:
            pulumi.set(__self__, "error_location", error_location)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="behaviorName")
    def behavior_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "behavior_name")

    @behavior_name.setter
    def behavior_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "behavior_name", value)

    @property
    @pulumi.getter
    def detail(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detail")

    @detail.setter
    def detail(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detail", value)

    @property
    @pulumi.getter(name="errorLocation")
    def error_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_location")

    @error_location.setter
    def error_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_location", value)

    @property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ProviderConfigArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 client_token: pulumi.Input[str],
                 host: pulumi.Input[str],
                 account_key: Optional[pulumi.Input[str]] = None,
                 max_body: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "client_token", client_token)
        pulumi.set(__self__, "host", host)
        if account_key is not None:
            pulumi.set(__self__, "account_key", account_key)
        if max_body is not None:
            pulumi.set(__self__, "max_body", max_body)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_token")

    @client_token.setter
    def client_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_token", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="accountKey")
    def account_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_key")

    @account_key.setter
    def account_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_key", value)

    @property
    @pulumi.getter(name="maxBody")
    def max_body(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_body")

    @max_body.setter
    def max_body(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_body", value)


@pulumi.input_type
class GetCloudletsApiPrioritizationMatchRuleMatchRuleArgs:
    def __init__(__self__, *,
                 pass_through_percent: float,
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchArgs']] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        pulumi.set(__self__, "pass_through_percent", pass_through_percent)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="passThroughPercent")
    def pass_through_percent(self) -> float:
        return pulumi.get(self, "pass_through_percent")

    @pass_through_percent.setter
    def pass_through_percent(self, value: float):
        pulumi.set(self, "pass_through_percent", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[bool]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @match_url.setter
    def match_url(self, value: Optional[str]):
        pulumi.set(self, "match_url", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchArgs']]:
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[Sequence['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchArgs']]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[int]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs']] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[str]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[bool]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs']]:
        return pulumi.get(self, "object_match_values")

    @object_match_values.setter
    def object_match_values(self, value: Optional[Sequence['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs']]):
        pulumi.set(self, "object_match_values", value)


@pulumi.input_type
class GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs:
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs'] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @name_case_sensitive.setter
    def name_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "name_case_sensitive", value)

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @name_has_wildcard.setter
    def name_has_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "name_has_wildcard", value)

    @property
    @pulumi.getter
    def options(self) -> Optional['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional['GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs:
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @value_case_sensitive.setter
    def value_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "value_case_sensitive", value)

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @value_escaped.setter
    def value_escaped(self, value: Optional[bool]):
        pulumi.set(self, "value_escaped", value)

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @value_has_wildcard.setter
    def value_has_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "value_has_wildcard", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleArgs:
    def __init__(__self__, *,
                 forward_settings: Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingArgs'],
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 id: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchArgs']] = None,
                 matches_always: Optional[bool] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        pulumi.set(__self__, "forward_settings", forward_settings)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if matches_always is not None:
            pulumi.set(__self__, "matches_always", matches_always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="forwardSettings")
    def forward_settings(self) -> Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingArgs']:
        return pulumi.get(self, "forward_settings")

    @forward_settings.setter
    def forward_settings(self, value: Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingArgs']):
        pulumi.set(self, "forward_settings", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[bool]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @match_url.setter
    def match_url(self, value: Optional[str]):
        pulumi.set(self, "match_url", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchArgs']]:
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchArgs']]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter(name="matchesAlways")
    def matches_always(self) -> Optional[bool]:
        return pulumi.get(self, "matches_always")

    @matches_always.setter
    def matches_always(self, value: Optional[bool]):
        pulumi.set(self, "matches_always", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[int]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingArgs:
    def __init__(__self__, *,
                 origin_id: str):
        pulumi.set(__self__, "origin_id", origin_id)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: str):
        pulumi.set(self, "origin_id", value)


@pulumi.input_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueArgs']] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[str]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[bool]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueArgs']]:
        return pulumi.get(self, "object_match_values")

    @object_match_values.setter
    def object_match_values(self, value: Optional[Sequence['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueArgs']]):
        pulumi.set(self, "object_match_values", value)


@pulumi.input_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueArgs:
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs'] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @name_case_sensitive.setter
    def name_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "name_case_sensitive", value)

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @name_has_wildcard.setter
    def name_has_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "name_has_wildcard", value)

    @property
    @pulumi.getter
    def options(self) -> Optional['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional['GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs:
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @value_case_sensitive.setter
    def value_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "value_case_sensitive", value)

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @value_escaped.setter
    def value_escaped(self, value: Optional[bool]):
        pulumi.set(self, "value_escaped", value)

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @value_has_wildcard.setter
    def value_has_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "value_has_wildcard", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleArgs:
    def __init__(__self__, *,
                 forward_settings: 'GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsArgs',
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchArgs']] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        pulumi.set(__self__, "forward_settings", forward_settings)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="forwardSettings")
    def forward_settings(self) -> 'GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsArgs':
        return pulumi.get(self, "forward_settings")

    @forward_settings.setter
    def forward_settings(self, value: 'GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsArgs'):
        pulumi.set(self, "forward_settings", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[bool]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @match_url.setter
    def match_url(self, value: Optional[str]):
        pulumi.set(self, "match_url", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchArgs']]:
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[Sequence['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchArgs']]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[int]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsArgs:
    def __init__(__self__, *,
                 origin_id: Optional[str] = None,
                 path_and_qs: Optional[str] = None,
                 use_incoming_query_string: Optional[bool] = None):
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if path_and_qs is not None:
            pulumi.set(__self__, "path_and_qs", path_and_qs)
        if use_incoming_query_string is not None:
            pulumi.set(__self__, "use_incoming_query_string", use_incoming_query_string)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: Optional[str]):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="pathAndQs")
    def path_and_qs(self) -> Optional[str]:
        return pulumi.get(self, "path_and_qs")

    @path_and_qs.setter
    def path_and_qs(self, value: Optional[str]):
        pulumi.set(self, "path_and_qs", value)

    @property
    @pulumi.getter(name="useIncomingQueryString")
    def use_incoming_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_incoming_query_string")

    @use_incoming_query_string.setter
    def use_incoming_query_string(self, value: Optional[bool]):
        pulumi.set(self, "use_incoming_query_string", value)


@pulumi.input_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueArgs']] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[str]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[bool]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueArgs']]:
        return pulumi.get(self, "object_match_values")

    @object_match_values.setter
    def object_match_values(self, value: Optional[Sequence['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueArgs']]):
        pulumi.set(self, "object_match_values", value)


@pulumi.input_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueArgs:
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs'] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @name_case_sensitive.setter
    def name_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "name_case_sensitive", value)

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @name_has_wildcard.setter
    def name_has_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "name_has_wildcard", value)

    @property
    @pulumi.getter
    def options(self) -> Optional['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional['GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs:
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @value_case_sensitive.setter
    def value_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "value_case_sensitive", value)

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @value_escaped.setter
    def value_escaped(self, value: Optional[bool]):
        pulumi.set(self, "value_escaped", value)

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @value_has_wildcard.setter
    def value_has_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "value_has_wildcard", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCloudletsEdgeRedirectorMatchRuleMatchRuleArgs:
    def __init__(__self__, *,
                 redirect_url: str,
                 status_code: int,
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchArgs']] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None,
                 use_incoming_query_string: Optional[bool] = None,
                 use_relative_url: Optional[str] = None):
        pulumi.set(__self__, "redirect_url", redirect_url)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)
        if use_incoming_query_string is not None:
            pulumi.set(__self__, "use_incoming_query_string", use_incoming_query_string)
        if use_relative_url is not None:
            pulumi.set(__self__, "use_relative_url", use_relative_url)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: str):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> int:
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: int):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[bool]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @match_url.setter
    def match_url(self, value: Optional[str]):
        pulumi.set(self, "match_url", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchArgs']]:
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[Sequence['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchArgs']]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[int]):
        pulumi.set(self, "start", value)

    @property
    @pulumi.getter(name="useIncomingQueryString")
    def use_incoming_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_incoming_query_string")

    @use_incoming_query_string.setter
    def use_incoming_query_string(self, value: Optional[bool]):
        pulumi.set(self, "use_incoming_query_string", value)

    @property
    @pulumi.getter(name="useRelativeUrl")
    def use_relative_url(self) -> Optional[str]:
        return pulumi.get(self, "use_relative_url")

    @use_relative_url.setter
    def use_relative_url(self, value: Optional[str]):
        pulumi.set(self, "use_relative_url", value)


@pulumi.input_type
class GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueArgs']] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[str]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[bool]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueArgs']]:
        return pulumi.get(self, "object_match_values")

    @object_match_values.setter
    def object_match_values(self, value: Optional[Sequence['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueArgs']]):
        pulumi.set(self, "object_match_values", value)


@pulumi.input_type
class GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueArgs:
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs'] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @name_case_sensitive.setter
    def name_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "name_case_sensitive", value)

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @name_has_wildcard.setter
    def name_has_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "name_has_wildcard", value)

    @property
    @pulumi.getter
    def options(self) -> Optional['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional['GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs:
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @value_case_sensitive.setter
    def value_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "value_case_sensitive", value)

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @value_escaped.setter
    def value_escaped(self, value: Optional[bool]):
        pulumi.set(self, "value_escaped", value)

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @value_has_wildcard.setter
    def value_has_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "value_has_wildcard", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleArgs:
    def __init__(__self__, *,
                 forward_settings: 'GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsArgs',
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchArgs']] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        pulumi.set(__self__, "forward_settings", forward_settings)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="forwardSettings")
    def forward_settings(self) -> 'GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsArgs':
        return pulumi.get(self, "forward_settings")

    @forward_settings.setter
    def forward_settings(self, value: 'GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsArgs'):
        pulumi.set(self, "forward_settings", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[bool]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @match_url.setter
    def match_url(self, value: Optional[str]):
        pulumi.set(self, "match_url", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchArgs']]:
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[Sequence['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchArgs']]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[int]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsArgs:
    def __init__(__self__, *,
                 origin_id: Optional[str] = None,
                 path_and_qs: Optional[str] = None,
                 use_incoming_query_string: Optional[bool] = None):
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if path_and_qs is not None:
            pulumi.set(__self__, "path_and_qs", path_and_qs)
        if use_incoming_query_string is not None:
            pulumi.set(__self__, "use_incoming_query_string", use_incoming_query_string)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: Optional[str]):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="pathAndQs")
    def path_and_qs(self) -> Optional[str]:
        return pulumi.get(self, "path_and_qs")

    @path_and_qs.setter
    def path_and_qs(self, value: Optional[str]):
        pulumi.set(self, "path_and_qs", value)

    @property
    @pulumi.getter(name="useIncomingQueryString")
    def use_incoming_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_incoming_query_string")

    @use_incoming_query_string.setter
    def use_incoming_query_string(self, value: Optional[bool]):
        pulumi.set(self, "use_incoming_query_string", value)


@pulumi.input_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleMatchArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueArgs']] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[str]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[bool]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueArgs']]:
        return pulumi.get(self, "object_match_values")

    @object_match_values.setter
    def object_match_values(self, value: Optional[Sequence['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueArgs']]):
        pulumi.set(self, "object_match_values", value)


@pulumi.input_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueArgs:
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs'] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @name_case_sensitive.setter
    def name_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "name_case_sensitive", value)

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @name_has_wildcard.setter
    def name_has_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "name_has_wildcard", value)

    @property
    @pulumi.getter
    def options(self) -> Optional['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional['GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs:
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @value_case_sensitive.setter
    def value_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "value_case_sensitive", value)

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @value_escaped.setter
    def value_escaped(self, value: Optional[bool]):
        pulumi.set(self, "value_escaped", value)

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @value_has_wildcard.setter
    def value_has_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "value_has_wildcard", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleArgs:
    def __init__(__self__, *,
                 forward_settings: 'GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsArgs',
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchArgs']] = None,
                 matches_always: Optional[bool] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        pulumi.set(__self__, "forward_settings", forward_settings)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if matches_always is not None:
            pulumi.set(__self__, "matches_always", matches_always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="forwardSettings")
    def forward_settings(self) -> 'GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsArgs':
        return pulumi.get(self, "forward_settings")

    @forward_settings.setter
    def forward_settings(self, value: 'GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsArgs'):
        pulumi.set(self, "forward_settings", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[bool]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @match_url.setter
    def match_url(self, value: Optional[str]):
        pulumi.set(self, "match_url", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchArgs']]:
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[Sequence['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchArgs']]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter(name="matchesAlways")
    def matches_always(self) -> Optional[bool]:
        return pulumi.get(self, "matches_always")

    @matches_always.setter
    def matches_always(self, value: Optional[bool]):
        pulumi.set(self, "matches_always", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[int]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsArgs:
    def __init__(__self__, *,
                 origin_id: str,
                 percent: int):
        pulumi.set(__self__, "origin_id", origin_id)
        pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: str):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter
    def percent(self) -> int:
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: int):
        pulumi.set(self, "percent", value)


@pulumi.input_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueArgs']] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[str]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[bool]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueArgs']]:
        return pulumi.get(self, "object_match_values")

    @object_match_values.setter
    def object_match_values(self, value: Optional[Sequence['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueArgs']]):
        pulumi.set(self, "object_match_values", value)


@pulumi.input_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueArgs:
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs'] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @name_case_sensitive.setter
    def name_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "name_case_sensitive", value)

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @name_has_wildcard.setter
    def name_has_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "name_has_wildcard", value)

    @property
    @pulumi.getter
    def options(self) -> Optional['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional['GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs:
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @value_case_sensitive.setter
    def value_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "value_case_sensitive", value)

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @value_escaped.setter
    def value_escaped(self, value: Optional[bool]):
        pulumi.set(self, "value_escaped", value)

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @value_has_wildcard.setter
    def value_has_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "value_has_wildcard", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCloudletsRequestControlMatchRuleMatchRuleArgs:
    def __init__(__self__, *,
                 allow_deny: str,
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 matches: Optional[Sequence['GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs']] = None,
                 matches_always: Optional[bool] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        pulumi.set(__self__, "allow_deny", allow_deny)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if matches_always is not None:
            pulumi.set(__self__, "matches_always", matches_always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="allowDeny")
    def allow_deny(self) -> str:
        return pulumi.get(self, "allow_deny")

    @allow_deny.setter
    def allow_deny(self, value: str):
        pulumi.set(self, "allow_deny", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[bool]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs']]:
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[Sequence['GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs']]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter(name="matchesAlways")
    def matches_always(self) -> Optional[bool]:
        return pulumi.get(self, "matches_always")

    @matches_always.setter
    def matches_always(self, value: Optional[bool]):
        pulumi.set(self, "matches_always", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[int]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueArgs']] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[str]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[bool]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueArgs']]:
        return pulumi.get(self, "object_match_values")

    @object_match_values.setter
    def object_match_values(self, value: Optional[Sequence['GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueArgs']]):
        pulumi.set(self, "object_match_values", value)


@pulumi.input_type
class GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueArgs:
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs'] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @name_case_sensitive.setter
    def name_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "name_case_sensitive", value)

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @name_has_wildcard.setter
    def name_has_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "name_has_wildcard", value)

    @property
    @pulumi.getter
    def options(self) -> Optional['GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional['GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs:
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @value_case_sensitive.setter
    def value_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "value_case_sensitive", value)

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @value_escaped.setter
    def value_escaped(self, value: Optional[bool]):
        pulumi.set(self, "value_escaped", value)

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @value_has_wildcard.setter
    def value_has_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "value_has_wildcard", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleArgs:
    def __init__(__self__, *,
                 pass_through_percent: float,
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchArgs']] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        pulumi.set(__self__, "pass_through_percent", pass_through_percent)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="passThroughPercent")
    def pass_through_percent(self) -> float:
        return pulumi.get(self, "pass_through_percent")

    @pass_through_percent.setter
    def pass_through_percent(self, value: float):
        pulumi.set(self, "pass_through_percent", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[bool]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @match_url.setter
    def match_url(self, value: Optional[str]):
        pulumi.set(self, "match_url", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchArgs']]:
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[Sequence['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchArgs']]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[int]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs']] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[str]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[str]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[bool]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs']]:
        return pulumi.get(self, "object_match_values")

    @object_match_values.setter
    def object_match_values(self, value: Optional[Sequence['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs']]):
        pulumi.set(self, "object_match_values", value)


@pulumi.input_type
class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs:
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs'] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @name_case_sensitive.setter
    def name_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "name_case_sensitive", value)

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @name_has_wildcard.setter
    def name_has_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "name_has_wildcard", value)

    @property
    @pulumi.getter
    def options(self) -> Optional['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional['GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs:
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @value_case_sensitive.setter
    def value_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "value_case_sensitive", value)

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @value_escaped.setter
    def value_escaped(self, value: Optional[bool]):
        pulumi.set(self, "value_escaped", value)

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @value_has_wildcard.setter
    def value_has_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "value_has_wildcard", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCloudwrapperCapacitiesCapacityArgs:
    def __init__(__self__, *,
                 approved: 'GetCloudwrapperCapacitiesCapacityApprovedArgs',
                 assigned: 'GetCloudwrapperCapacitiesCapacityAssignedArgs',
                 contract_id: str,
                 location_id: int,
                 location_name: str,
                 type: str,
                 unassigned: 'GetCloudwrapperCapacitiesCapacityUnassignedArgs'):
        pulumi.set(__self__, "approved", approved)
        pulumi.set(__self__, "assigned", assigned)
        pulumi.set(__self__, "contract_id", contract_id)
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "location_name", location_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unassigned", unassigned)

    @property
    @pulumi.getter
    def approved(self) -> 'GetCloudwrapperCapacitiesCapacityApprovedArgs':
        return pulumi.get(self, "approved")

    @approved.setter
    def approved(self, value: 'GetCloudwrapperCapacitiesCapacityApprovedArgs'):
        pulumi.set(self, "approved", value)

    @property
    @pulumi.getter
    def assigned(self) -> 'GetCloudwrapperCapacitiesCapacityAssignedArgs':
        return pulumi.get(self, "assigned")

    @assigned.setter
    def assigned(self, value: 'GetCloudwrapperCapacitiesCapacityAssignedArgs'):
        pulumi.set(self, "assigned", value)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @contract_id.setter
    def contract_id(self, value: str):
        pulumi.set(self, "contract_id", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> int:
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: int):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> str:
        return pulumi.get(self, "location_name")

    @location_name.setter
    def location_name(self, value: str):
        pulumi.set(self, "location_name", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unassigned(self) -> 'GetCloudwrapperCapacitiesCapacityUnassignedArgs':
        return pulumi.get(self, "unassigned")

    @unassigned.setter
    def unassigned(self, value: 'GetCloudwrapperCapacitiesCapacityUnassignedArgs'):
        pulumi.set(self, "unassigned", value)


@pulumi.input_type
class GetCloudwrapperCapacitiesCapacityApprovedArgs:
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: str):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: int):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetCloudwrapperCapacitiesCapacityAssignedArgs:
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: str):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: int):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetCloudwrapperCapacitiesCapacityUnassignedArgs:
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: str):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: int):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetCloudwrapperConfigurationLocationArgs:
    def __init__(__self__, *,
                 capacity: 'GetCloudwrapperConfigurationLocationCapacityArgs',
                 comments: str,
                 map_name: str,
                 traffic_type_id: int):
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "map_name", map_name)
        pulumi.set(__self__, "traffic_type_id", traffic_type_id)

    @property
    @pulumi.getter
    def capacity(self) -> 'GetCloudwrapperConfigurationLocationCapacityArgs':
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: 'GetCloudwrapperConfigurationLocationCapacityArgs'):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: str):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="mapName")
    def map_name(self) -> str:
        return pulumi.get(self, "map_name")

    @map_name.setter
    def map_name(self, value: str):
        pulumi.set(self, "map_name", value)

    @property
    @pulumi.getter(name="trafficTypeId")
    def traffic_type_id(self) -> int:
        return pulumi.get(self, "traffic_type_id")

    @traffic_type_id.setter
    def traffic_type_id(self, value: int):
        pulumi.set(self, "traffic_type_id", value)


@pulumi.input_type
class GetCloudwrapperConfigurationLocationCapacityArgs:
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: str):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: int):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetCloudwrapperConfigurationMultiCdnSettingsArgs:
    def __init__(__self__, *,
                 enable_soft_alerts: bool,
                 bocc: Optional['GetCloudwrapperConfigurationMultiCdnSettingsBoccArgs'] = None,
                 cdns: Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsCdnArgs']] = None,
                 data_streams: Optional['GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsArgs'] = None,
                 origins: Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsOriginArgs']] = None):
        pulumi.set(__self__, "enable_soft_alerts", enable_soft_alerts)
        if bocc is not None:
            pulumi.set(__self__, "bocc", bocc)
        if cdns is not None:
            pulumi.set(__self__, "cdns", cdns)
        if data_streams is not None:
            pulumi.set(__self__, "data_streams", data_streams)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)

    @property
    @pulumi.getter(name="enableSoftAlerts")
    def enable_soft_alerts(self) -> bool:
        return pulumi.get(self, "enable_soft_alerts")

    @enable_soft_alerts.setter
    def enable_soft_alerts(self, value: bool):
        pulumi.set(self, "enable_soft_alerts", value)

    @property
    @pulumi.getter
    def bocc(self) -> Optional['GetCloudwrapperConfigurationMultiCdnSettingsBoccArgs']:
        return pulumi.get(self, "bocc")

    @bocc.setter
    def bocc(self, value: Optional['GetCloudwrapperConfigurationMultiCdnSettingsBoccArgs']):
        pulumi.set(self, "bocc", value)

    @property
    @pulumi.getter
    def cdns(self) -> Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsCdnArgs']]:
        return pulumi.get(self, "cdns")

    @cdns.setter
    def cdns(self, value: Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsCdnArgs']]):
        pulumi.set(self, "cdns", value)

    @property
    @pulumi.getter(name="dataStreams")
    def data_streams(self) -> Optional['GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsArgs']:
        return pulumi.get(self, "data_streams")

    @data_streams.setter
    def data_streams(self, value: Optional['GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsArgs']):
        pulumi.set(self, "data_streams", value)

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsOriginArgs']]:
        return pulumi.get(self, "origins")

    @origins.setter
    def origins(self, value: Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsOriginArgs']]):
        pulumi.set(self, "origins", value)


@pulumi.input_type
class GetCloudwrapperConfigurationMultiCdnSettingsBoccArgs:
    def __init__(__self__, *,
                 conditional_sampling_frequency: str,
                 enabled: bool,
                 forward_type: str,
                 request_type: str,
                 sampling_frequency: str):
        pulumi.set(__self__, "conditional_sampling_frequency", conditional_sampling_frequency)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "forward_type", forward_type)
        pulumi.set(__self__, "request_type", request_type)
        pulumi.set(__self__, "sampling_frequency", sampling_frequency)

    @property
    @pulumi.getter(name="conditionalSamplingFrequency")
    def conditional_sampling_frequency(self) -> str:
        return pulumi.get(self, "conditional_sampling_frequency")

    @conditional_sampling_frequency.setter
    def conditional_sampling_frequency(self, value: str):
        pulumi.set(self, "conditional_sampling_frequency", value)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="forwardType")
    def forward_type(self) -> str:
        return pulumi.get(self, "forward_type")

    @forward_type.setter
    def forward_type(self, value: str):
        pulumi.set(self, "forward_type", value)

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> str:
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: str):
        pulumi.set(self, "request_type", value)

    @property
    @pulumi.getter(name="samplingFrequency")
    def sampling_frequency(self) -> str:
        return pulumi.get(self, "sampling_frequency")

    @sampling_frequency.setter
    def sampling_frequency(self, value: str):
        pulumi.set(self, "sampling_frequency", value)


@pulumi.input_type
class GetCloudwrapperConfigurationMultiCdnSettingsCdnArgs:
    def __init__(__self__, *,
                 cdn_code: str,
                 enabled: bool,
                 https_only: bool,
                 ip_acl_cidrs: Sequence[str],
                 cdn_auth_keys: Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs']] = None):
        pulumi.set(__self__, "cdn_code", cdn_code)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "https_only", https_only)
        pulumi.set(__self__, "ip_acl_cidrs", ip_acl_cidrs)
        if cdn_auth_keys is not None:
            pulumi.set(__self__, "cdn_auth_keys", cdn_auth_keys)

    @property
    @pulumi.getter(name="cdnCode")
    def cdn_code(self) -> str:
        return pulumi.get(self, "cdn_code")

    @cdn_code.setter
    def cdn_code(self, value: str):
        pulumi.set(self, "cdn_code", value)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="httpsOnly")
    def https_only(self) -> bool:
        return pulumi.get(self, "https_only")

    @https_only.setter
    def https_only(self, value: bool):
        pulumi.set(self, "https_only", value)

    @property
    @pulumi.getter(name="ipAclCidrs")
    def ip_acl_cidrs(self) -> Sequence[str]:
        return pulumi.get(self, "ip_acl_cidrs")

    @ip_acl_cidrs.setter
    def ip_acl_cidrs(self, value: Sequence[str]):
        pulumi.set(self, "ip_acl_cidrs", value)

    @property
    @pulumi.getter(name="cdnAuthKeys")
    def cdn_auth_keys(self) -> Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs']]:
        return pulumi.get(self, "cdn_auth_keys")

    @cdn_auth_keys.setter
    def cdn_auth_keys(self, value: Optional[Sequence['GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs']]):
        pulumi.set(self, "cdn_auth_keys", value)


@pulumi.input_type
class GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs:
    def __init__(__self__, *,
                 auth_key_name: str,
                 expiry_date: str,
                 header_name: str,
                 secret: str):
        pulumi.set(__self__, "auth_key_name", auth_key_name)
        pulumi.set(__self__, "expiry_date", expiry_date)
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="authKeyName")
    def auth_key_name(self) -> str:
        return pulumi.get(self, "auth_key_name")

    @auth_key_name.setter
    def auth_key_name(self, value: str):
        pulumi.set(self, "auth_key_name", value)

    @property
    @pulumi.getter(name="expiryDate")
    def expiry_date(self) -> str:
        return pulumi.get(self, "expiry_date")

    @expiry_date.setter
    def expiry_date(self, value: str):
        pulumi.set(self, "expiry_date", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: str):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: str):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsArgs:
    def __init__(__self__, *,
                 data_stream_ids: Sequence[int],
                 enabled: bool,
                 sampling_rate: int):
        pulumi.set(__self__, "data_stream_ids", data_stream_ids)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "sampling_rate", sampling_rate)

    @property
    @pulumi.getter(name="dataStreamIds")
    def data_stream_ids(self) -> Sequence[int]:
        return pulumi.get(self, "data_stream_ids")

    @data_stream_ids.setter
    def data_stream_ids(self, value: Sequence[int]):
        pulumi.set(self, "data_stream_ids", value)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> int:
        return pulumi.get(self, "sampling_rate")

    @sampling_rate.setter
    def sampling_rate(self, value: int):
        pulumi.set(self, "sampling_rate", value)


@pulumi.input_type
class GetCloudwrapperConfigurationMultiCdnSettingsOriginArgs:
    def __init__(__self__, *,
                 hostname: str,
                 origin_id: str,
                 property_id: int):
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "origin_id", origin_id)
        pulumi.set(__self__, "property_id", property_id)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: str):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: str):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> int:
        return pulumi.get(self, "property_id")

    @property_id.setter
    def property_id(self, value: int):
        pulumi.set(self, "property_id", value)


@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationArgs:
    def __init__(__self__, *,
                 capacity_alerts_threshold: int,
                 comments: str,
                 config_name: str,
                 contract_id: str,
                 id: int,
                 last_activated_by: str,
                 last_activated_date: str,
                 last_updated_by: str,
                 last_updated_date: str,
                 notification_emails: Sequence[str],
                 property_ids: Sequence[str],
                 retain_idle_objects: bool,
                 status: str,
                 locations: Optional[Sequence['GetCloudwrapperConfigurationsConfigurationLocationArgs']] = None,
                 multi_cdn_settings: Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs'] = None):
        pulumi.set(__self__, "capacity_alerts_threshold", capacity_alerts_threshold)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "config_name", config_name)
        pulumi.set(__self__, "contract_id", contract_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_activated_by", last_activated_by)
        pulumi.set(__self__, "last_activated_date", last_activated_date)
        pulumi.set(__self__, "last_updated_by", last_updated_by)
        pulumi.set(__self__, "last_updated_date", last_updated_date)
        pulumi.set(__self__, "notification_emails", notification_emails)
        pulumi.set(__self__, "property_ids", property_ids)
        pulumi.set(__self__, "retain_idle_objects", retain_idle_objects)
        pulumi.set(__self__, "status", status)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if multi_cdn_settings is not None:
            pulumi.set(__self__, "multi_cdn_settings", multi_cdn_settings)

    @property
    @pulumi.getter(name="capacityAlertsThreshold")
    def capacity_alerts_threshold(self) -> int:
        return pulumi.get(self, "capacity_alerts_threshold")

    @capacity_alerts_threshold.setter
    def capacity_alerts_threshold(self, value: int):
        pulumi.set(self, "capacity_alerts_threshold", value)

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: str):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> str:
        return pulumi.get(self, "config_name")

    @config_name.setter
    def config_name(self, value: str):
        pulumi.set(self, "config_name", value)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @contract_id.setter
    def contract_id(self, value: str):
        pulumi.set(self, "contract_id", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: int):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lastActivatedBy")
    def last_activated_by(self) -> str:
        return pulumi.get(self, "last_activated_by")

    @last_activated_by.setter
    def last_activated_by(self, value: str):
        pulumi.set(self, "last_activated_by", value)

    @property
    @pulumi.getter(name="lastActivatedDate")
    def last_activated_date(self) -> str:
        return pulumi.get(self, "last_activated_date")

    @last_activated_date.setter
    def last_activated_date(self, value: str):
        pulumi.set(self, "last_activated_date", value)

    @property
    @pulumi.getter(name="lastUpdatedBy")
    def last_updated_by(self) -> str:
        return pulumi.get(self, "last_updated_by")

    @last_updated_by.setter
    def last_updated_by(self, value: str):
        pulumi.set(self, "last_updated_by", value)

    @property
    @pulumi.getter(name="lastUpdatedDate")
    def last_updated_date(self) -> str:
        return pulumi.get(self, "last_updated_date")

    @last_updated_date.setter
    def last_updated_date(self, value: str):
        pulumi.set(self, "last_updated_date", value)

    @property
    @pulumi.getter(name="notificationEmails")
    def notification_emails(self) -> Sequence[str]:
        return pulumi.get(self, "notification_emails")

    @notification_emails.setter
    def notification_emails(self, value: Sequence[str]):
        pulumi.set(self, "notification_emails", value)

    @property
    @pulumi.getter(name="propertyIds")
    def property_ids(self) -> Sequence[str]:
        return pulumi.get(self, "property_ids")

    @property_ids.setter
    def property_ids(self, value: Sequence[str]):
        pulumi.set(self, "property_ids", value)

    @property
    @pulumi.getter(name="retainIdleObjects")
    def retain_idle_objects(self) -> bool:
        return pulumi.get(self, "retain_idle_objects")

    @retain_idle_objects.setter
    def retain_idle_objects(self, value: bool):
        pulumi.set(self, "retain_idle_objects", value)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: str):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['GetCloudwrapperConfigurationsConfigurationLocationArgs']]:
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[Sequence['GetCloudwrapperConfigurationsConfigurationLocationArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="multiCdnSettings")
    def multi_cdn_settings(self) -> Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs']:
        return pulumi.get(self, "multi_cdn_settings")

    @multi_cdn_settings.setter
    def multi_cdn_settings(self, value: Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs']):
        pulumi.set(self, "multi_cdn_settings", value)


@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationLocationArgs:
    def __init__(__self__, *,
                 capacity: 'GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs',
                 comments: str,
                 map_name: str,
                 traffic_type_id: int):
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "map_name", map_name)
        pulumi.set(__self__, "traffic_type_id", traffic_type_id)

    @property
    @pulumi.getter
    def capacity(self) -> 'GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs':
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: 'GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs'):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: str):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="mapName")
    def map_name(self) -> str:
        return pulumi.get(self, "map_name")

    @map_name.setter
    def map_name(self, value: str):
        pulumi.set(self, "map_name", value)

    @property
    @pulumi.getter(name="trafficTypeId")
    def traffic_type_id(self) -> int:
        return pulumi.get(self, "traffic_type_id")

    @traffic_type_id.setter
    def traffic_type_id(self, value: int):
        pulumi.set(self, "traffic_type_id", value)


@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs:
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: str):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: int):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs:
    def __init__(__self__, *,
                 enable_soft_alerts: bool,
                 bocc: Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccArgs'] = None,
                 cdns: Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs']] = None,
                 data_streams: Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsArgs'] = None,
                 origins: Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginArgs']] = None):
        pulumi.set(__self__, "enable_soft_alerts", enable_soft_alerts)
        if bocc is not None:
            pulumi.set(__self__, "bocc", bocc)
        if cdns is not None:
            pulumi.set(__self__, "cdns", cdns)
        if data_streams is not None:
            pulumi.set(__self__, "data_streams", data_streams)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)

    @property
    @pulumi.getter(name="enableSoftAlerts")
    def enable_soft_alerts(self) -> bool:
        return pulumi.get(self, "enable_soft_alerts")

    @enable_soft_alerts.setter
    def enable_soft_alerts(self, value: bool):
        pulumi.set(self, "enable_soft_alerts", value)

    @property
    @pulumi.getter
    def bocc(self) -> Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccArgs']:
        return pulumi.get(self, "bocc")

    @bocc.setter
    def bocc(self, value: Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccArgs']):
        pulumi.set(self, "bocc", value)

    @property
    @pulumi.getter
    def cdns(self) -> Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs']]:
        return pulumi.get(self, "cdns")

    @cdns.setter
    def cdns(self, value: Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs']]):
        pulumi.set(self, "cdns", value)

    @property
    @pulumi.getter(name="dataStreams")
    def data_streams(self) -> Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsArgs']:
        return pulumi.get(self, "data_streams")

    @data_streams.setter
    def data_streams(self, value: Optional['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsArgs']):
        pulumi.set(self, "data_streams", value)

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginArgs']]:
        return pulumi.get(self, "origins")

    @origins.setter
    def origins(self, value: Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginArgs']]):
        pulumi.set(self, "origins", value)


@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccArgs:
    def __init__(__self__, *,
                 conditional_sampling_frequency: str,
                 enabled: bool,
                 forward_type: str,
                 request_type: str,
                 sampling_frequency: str):
        pulumi.set(__self__, "conditional_sampling_frequency", conditional_sampling_frequency)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "forward_type", forward_type)
        pulumi.set(__self__, "request_type", request_type)
        pulumi.set(__self__, "sampling_frequency", sampling_frequency)

    @property
    @pulumi.getter(name="conditionalSamplingFrequency")
    def conditional_sampling_frequency(self) -> str:
        return pulumi.get(self, "conditional_sampling_frequency")

    @conditional_sampling_frequency.setter
    def conditional_sampling_frequency(self, value: str):
        pulumi.set(self, "conditional_sampling_frequency", value)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="forwardType")
    def forward_type(self) -> str:
        return pulumi.get(self, "forward_type")

    @forward_type.setter
    def forward_type(self, value: str):
        pulumi.set(self, "forward_type", value)

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> str:
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: str):
        pulumi.set(self, "request_type", value)

    @property
    @pulumi.getter(name="samplingFrequency")
    def sampling_frequency(self) -> str:
        return pulumi.get(self, "sampling_frequency")

    @sampling_frequency.setter
    def sampling_frequency(self, value: str):
        pulumi.set(self, "sampling_frequency", value)


@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs:
    def __init__(__self__, *,
                 cdn_code: str,
                 enabled: bool,
                 https_only: bool,
                 ip_acl_cidrs: Sequence[str],
                 cdn_auth_keys: Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs']] = None):
        pulumi.set(__self__, "cdn_code", cdn_code)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "https_only", https_only)
        pulumi.set(__self__, "ip_acl_cidrs", ip_acl_cidrs)
        if cdn_auth_keys is not None:
            pulumi.set(__self__, "cdn_auth_keys", cdn_auth_keys)

    @property
    @pulumi.getter(name="cdnCode")
    def cdn_code(self) -> str:
        return pulumi.get(self, "cdn_code")

    @cdn_code.setter
    def cdn_code(self, value: str):
        pulumi.set(self, "cdn_code", value)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="httpsOnly")
    def https_only(self) -> bool:
        return pulumi.get(self, "https_only")

    @https_only.setter
    def https_only(self, value: bool):
        pulumi.set(self, "https_only", value)

    @property
    @pulumi.getter(name="ipAclCidrs")
    def ip_acl_cidrs(self) -> Sequence[str]:
        return pulumi.get(self, "ip_acl_cidrs")

    @ip_acl_cidrs.setter
    def ip_acl_cidrs(self, value: Sequence[str]):
        pulumi.set(self, "ip_acl_cidrs", value)

    @property
    @pulumi.getter(name="cdnAuthKeys")
    def cdn_auth_keys(self) -> Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs']]:
        return pulumi.get(self, "cdn_auth_keys")

    @cdn_auth_keys.setter
    def cdn_auth_keys(self, value: Optional[Sequence['GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs']]):
        pulumi.set(self, "cdn_auth_keys", value)


@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs:
    def __init__(__self__, *,
                 auth_key_name: str,
                 expiry_date: str,
                 header_name: str,
                 secret: str):
        pulumi.set(__self__, "auth_key_name", auth_key_name)
        pulumi.set(__self__, "expiry_date", expiry_date)
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="authKeyName")
    def auth_key_name(self) -> str:
        return pulumi.get(self, "auth_key_name")

    @auth_key_name.setter
    def auth_key_name(self, value: str):
        pulumi.set(self, "auth_key_name", value)

    @property
    @pulumi.getter(name="expiryDate")
    def expiry_date(self) -> str:
        return pulumi.get(self, "expiry_date")

    @expiry_date.setter
    def expiry_date(self, value: str):
        pulumi.set(self, "expiry_date", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: str):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: str):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsArgs:
    def __init__(__self__, *,
                 data_stream_ids: Sequence[int],
                 enabled: bool,
                 sampling_rate: int):
        pulumi.set(__self__, "data_stream_ids", data_stream_ids)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "sampling_rate", sampling_rate)

    @property
    @pulumi.getter(name="dataStreamIds")
    def data_stream_ids(self) -> Sequence[int]:
        return pulumi.get(self, "data_stream_ids")

    @data_stream_ids.setter
    def data_stream_ids(self, value: Sequence[int]):
        pulumi.set(self, "data_stream_ids", value)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> int:
        return pulumi.get(self, "sampling_rate")

    @sampling_rate.setter
    def sampling_rate(self, value: int):
        pulumi.set(self, "sampling_rate", value)


@pulumi.input_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginArgs:
    def __init__(__self__, *,
                 hostname: str,
                 origin_id: str,
                 property_id: int):
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "origin_id", origin_id)
        pulumi.set(__self__, "property_id", property_id)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: str):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: str):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> int:
        return pulumi.get(self, "property_id")

    @property_id.setter
    def property_id(self, value: int):
        pulumi.set(self, "property_id", value)


@pulumi.input_type
class GetCloudwrapperLocationsLocationArgs:
    def __init__(__self__, *,
                 location_id: int,
                 location_name: str,
                 multi_cdn_location_id: str,
                 traffic_types: Optional[Sequence['GetCloudwrapperLocationsLocationTrafficTypeArgs']] = None):
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "location_name", location_name)
        pulumi.set(__self__, "multi_cdn_location_id", multi_cdn_location_id)
        if traffic_types is not None:
            pulumi.set(__self__, "traffic_types", traffic_types)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> int:
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: int):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> str:
        return pulumi.get(self, "location_name")

    @location_name.setter
    def location_name(self, value: str):
        pulumi.set(self, "location_name", value)

    @property
    @pulumi.getter(name="multiCdnLocationId")
    def multi_cdn_location_id(self) -> str:
        return pulumi.get(self, "multi_cdn_location_id")

    @multi_cdn_location_id.setter
    def multi_cdn_location_id(self, value: str):
        pulumi.set(self, "multi_cdn_location_id", value)

    @property
    @pulumi.getter(name="trafficTypes")
    def traffic_types(self) -> Optional[Sequence['GetCloudwrapperLocationsLocationTrafficTypeArgs']]:
        return pulumi.get(self, "traffic_types")

    @traffic_types.setter
    def traffic_types(self, value: Optional[Sequence['GetCloudwrapperLocationsLocationTrafficTypeArgs']]):
        pulumi.set(self, "traffic_types", value)


@pulumi.input_type
class GetCloudwrapperLocationsLocationTrafficTypeArgs:
    def __init__(__self__, *,
                 location_id: str,
                 traffic_type: str,
                 traffic_type_id: int):
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "traffic_type", traffic_type)
        pulumi.set(__self__, "traffic_type_id", traffic_type_id)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> str:
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: str):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> str:
        return pulumi.get(self, "traffic_type")

    @traffic_type.setter
    def traffic_type(self, value: str):
        pulumi.set(self, "traffic_type", value)

    @property
    @pulumi.getter(name="trafficTypeId")
    def traffic_type_id(self) -> int:
        return pulumi.get(self, "traffic_type_id")

    @traffic_type_id.setter
    def traffic_type_id(self, value: int):
        pulumi.set(self, "traffic_type_id", value)


@pulumi.input_type
class GetCloudwrapperPropertiesPropertyArgs:
    def __init__(__self__, *,
                 contract_id: str,
                 group_id: int,
                 property_id: int,
                 property_name: str,
                 type: str):
        pulumi.set(__self__, "contract_id", contract_id)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "property_id", property_id)
        pulumi.set(__self__, "property_name", property_name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @contract_id.setter
    def contract_id(self, value: str):
        pulumi.set(self, "contract_id", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: int):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> int:
        return pulumi.get(self, "property_id")

    @property_id.setter
    def property_id(self, value: int):
        pulumi.set(self, "property_id", value)

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> str:
        return pulumi.get(self, "property_name")

    @property_name.setter
    def property_name(self, value: str):
        pulumi.set(self, "property_name", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyArgs:
    def __init__(__self__, *,
                 breakpoints: Optional['GetImagingPolicyImagePolicyBreakpointsArgs'] = None,
                 hosts: Optional[Sequence[str]] = None,
                 output: Optional['GetImagingPolicyImagePolicyOutputArgs'] = None,
                 post_breakpoint_transformations: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']] = None,
                 rollout_duration: Optional[str] = None,
                 transformations: Optional[Sequence['GetImagingPolicyImagePolicyTransformationArgs']] = None,
                 variables: Optional[Sequence['GetImagingPolicyImagePolicyVariableArgs']] = None):
        if breakpoints is not None:
            pulumi.set(__self__, "breakpoints", breakpoints)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if post_breakpoint_transformations is not None:
            pulumi.set(__self__, "post_breakpoint_transformations", post_breakpoint_transformations)
        if rollout_duration is not None:
            pulumi.set(__self__, "rollout_duration", rollout_duration)
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def breakpoints(self) -> Optional['GetImagingPolicyImagePolicyBreakpointsArgs']:
        return pulumi.get(self, "breakpoints")

    @breakpoints.setter
    def breakpoints(self, value: Optional['GetImagingPolicyImagePolicyBreakpointsArgs']):
        pulumi.set(self, "breakpoints", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def output(self) -> Optional['GetImagingPolicyImagePolicyOutputArgs']:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional['GetImagingPolicyImagePolicyOutputArgs']):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="postBreakpointTransformations")
    def post_breakpoint_transformations(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']]:
        return pulumi.get(self, "post_breakpoint_transformations")

    @post_breakpoint_transformations.setter
    def post_breakpoint_transformations(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']]):
        pulumi.set(self, "post_breakpoint_transformations", value)

    @property
    @pulumi.getter(name="rolloutDuration")
    def rollout_duration(self) -> Optional[str]:
        return pulumi.get(self, "rollout_duration")

    @rollout_duration.setter
    def rollout_duration(self, value: Optional[str]):
        pulumi.set(self, "rollout_duration", value)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationArgs']]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationArgs']]):
        pulumi.set(self, "transformations", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetImagingPolicyImagePolicyVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetImagingPolicyImagePolicyVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyBreakpointsArgs:
    def __init__(__self__, *,
                 widths: Optional[Sequence[int]] = None):
        if widths is not None:
            pulumi.set(__self__, "widths", widths)

    @property
    @pulumi.getter
    def widths(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "widths")

    @widths.setter
    def widths(self, value: Optional[Sequence[int]]):
        pulumi.set(self, "widths", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyOutputArgs:
    def __init__(__self__, *,
                 adaptive_quality: Optional[str] = None,
                 allowed_formats: Optional[Sequence[str]] = None,
                 forced_formats: Optional[Sequence[str]] = None,
                 perceptual_quality: Optional[str] = None,
                 perceptual_quality_floor: Optional[str] = None,
                 perceptual_quality_var: Optional[str] = None,
                 quality: Optional[str] = None,
                 quality_var: Optional[str] = None):
        if adaptive_quality is not None:
            pulumi.set(__self__, "adaptive_quality", adaptive_quality)
        if allowed_formats is not None:
            pulumi.set(__self__, "allowed_formats", allowed_formats)
        if forced_formats is not None:
            pulumi.set(__self__, "forced_formats", forced_formats)
        if perceptual_quality is not None:
            pulumi.set(__self__, "perceptual_quality", perceptual_quality)
        if perceptual_quality_floor is not None:
            pulumi.set(__self__, "perceptual_quality_floor", perceptual_quality_floor)
        if perceptual_quality_var is not None:
            pulumi.set(__self__, "perceptual_quality_var", perceptual_quality_var)
        if quality is not None:
            pulumi.set(__self__, "quality", quality)
        if quality_var is not None:
            pulumi.set(__self__, "quality_var", quality_var)

    @property
    @pulumi.getter(name="adaptiveQuality")
    def adaptive_quality(self) -> Optional[str]:
        return pulumi.get(self, "adaptive_quality")

    @adaptive_quality.setter
    def adaptive_quality(self, value: Optional[str]):
        pulumi.set(self, "adaptive_quality", value)

    @property
    @pulumi.getter(name="allowedFormats")
    def allowed_formats(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_formats")

    @allowed_formats.setter
    def allowed_formats(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "allowed_formats", value)

    @property
    @pulumi.getter(name="forcedFormats")
    def forced_formats(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "forced_formats")

    @forced_formats.setter
    def forced_formats(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "forced_formats", value)

    @property
    @pulumi.getter(name="perceptualQuality")
    def perceptual_quality(self) -> Optional[str]:
        return pulumi.get(self, "perceptual_quality")

    @perceptual_quality.setter
    def perceptual_quality(self, value: Optional[str]):
        pulumi.set(self, "perceptual_quality", value)

    @property
    @pulumi.getter(name="perceptualQualityFloor")
    def perceptual_quality_floor(self) -> Optional[str]:
        return pulumi.get(self, "perceptual_quality_floor")

    @perceptual_quality_floor.setter
    def perceptual_quality_floor(self, value: Optional[str]):
        pulumi.set(self, "perceptual_quality_floor", value)

    @property
    @pulumi.getter(name="perceptualQualityVar")
    def perceptual_quality_var(self) -> Optional[str]:
        return pulumi.get(self, "perceptual_quality_var")

    @perceptual_quality_var.setter
    def perceptual_quality_var(self, value: Optional[str]):
        pulumi.set(self, "perceptual_quality_var", value)

    @property
    @pulumi.getter
    def quality(self) -> Optional[str]:
        return pulumi.get(self, "quality")

    @quality.setter
    def quality(self, value: Optional[str]):
        pulumi.set(self, "quality", value)

    @property
    @pulumi.getter(name="qualityVar")
    def quality_var(self) -> Optional[str]:
        return pulumi.get(self, "quality_var")

    @quality_var.setter
    def quality_var(self, value: Optional[str]):
        pulumi.set(self, "quality_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationArgs:
    def __init__(__self__, *,
                 background_colors: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorArgs']] = None,
                 blurs: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationBlurArgs']] = None,
                 chroma_keys: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyArgs']] = None,
                 composites: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeArgs']] = None,
                 compounds: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundArgs']] = None,
                 contrasts: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationContrastArgs']] = None,
                 goops: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationGoopArgs']] = None,
                 grayscales: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleArgs']] = None,
                 hsls: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationHslArgs']] = None,
                 hsvs: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationHsvArgs']] = None,
                 if_dimensions: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionArgs']] = None,
                 if_orientations: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationArgs']] = None,
                 max_colors: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorArgs']] = None,
                 mirrors: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs']] = None,
                 mono_hues: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueArgs']] = None,
                 opacities: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityArgs']] = None,
                 remove_colors: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorArgs']] = None,
                 unsharp_masks: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskArgs']] = None):
        if background_colors is not None:
            pulumi.set(__self__, "background_colors", background_colors)
        if blurs is not None:
            pulumi.set(__self__, "blurs", blurs)
        if chroma_keys is not None:
            pulumi.set(__self__, "chroma_keys", chroma_keys)
        if composites is not None:
            pulumi.set(__self__, "composites", composites)
        if compounds is not None:
            pulumi.set(__self__, "compounds", compounds)
        if contrasts is not None:
            pulumi.set(__self__, "contrasts", contrasts)
        if goops is not None:
            pulumi.set(__self__, "goops", goops)
        if grayscales is not None:
            pulumi.set(__self__, "grayscales", grayscales)
        if hsls is not None:
            pulumi.set(__self__, "hsls", hsls)
        if hsvs is not None:
            pulumi.set(__self__, "hsvs", hsvs)
        if if_dimensions is not None:
            pulumi.set(__self__, "if_dimensions", if_dimensions)
        if if_orientations is not None:
            pulumi.set(__self__, "if_orientations", if_orientations)
        if max_colors is not None:
            pulumi.set(__self__, "max_colors", max_colors)
        if mirrors is not None:
            pulumi.set(__self__, "mirrors", mirrors)
        if mono_hues is not None:
            pulumi.set(__self__, "mono_hues", mono_hues)
        if opacities is not None:
            pulumi.set(__self__, "opacities", opacities)
        if remove_colors is not None:
            pulumi.set(__self__, "remove_colors", remove_colors)
        if unsharp_masks is not None:
            pulumi.set(__self__, "unsharp_masks", unsharp_masks)

    @property
    @pulumi.getter(name="backgroundColors")
    def background_colors(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorArgs']]:
        return pulumi.get(self, "background_colors")

    @background_colors.setter
    def background_colors(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorArgs']]):
        pulumi.set(self, "background_colors", value)

    @property
    @pulumi.getter
    def blurs(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationBlurArgs']]:
        return pulumi.get(self, "blurs")

    @blurs.setter
    def blurs(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationBlurArgs']]):
        pulumi.set(self, "blurs", value)

    @property
    @pulumi.getter(name="chromaKeys")
    def chroma_keys(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyArgs']]:
        return pulumi.get(self, "chroma_keys")

    @chroma_keys.setter
    def chroma_keys(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyArgs']]):
        pulumi.set(self, "chroma_keys", value)

    @property
    @pulumi.getter
    def composites(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeArgs']]:
        return pulumi.get(self, "composites")

    @composites.setter
    def composites(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeArgs']]):
        pulumi.set(self, "composites", value)

    @property
    @pulumi.getter
    def compounds(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundArgs']]:
        return pulumi.get(self, "compounds")

    @compounds.setter
    def compounds(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundArgs']]):
        pulumi.set(self, "compounds", value)

    @property
    @pulumi.getter
    def contrasts(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationContrastArgs']]:
        return pulumi.get(self, "contrasts")

    @contrasts.setter
    def contrasts(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationContrastArgs']]):
        pulumi.set(self, "contrasts", value)

    @property
    @pulumi.getter
    def goops(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationGoopArgs']]:
        return pulumi.get(self, "goops")

    @goops.setter
    def goops(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationGoopArgs']]):
        pulumi.set(self, "goops", value)

    @property
    @pulumi.getter
    def grayscales(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleArgs']]:
        return pulumi.get(self, "grayscales")

    @grayscales.setter
    def grayscales(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleArgs']]):
        pulumi.set(self, "grayscales", value)

    @property
    @pulumi.getter
    def hsls(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationHslArgs']]:
        return pulumi.get(self, "hsls")

    @hsls.setter
    def hsls(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationHslArgs']]):
        pulumi.set(self, "hsls", value)

    @property
    @pulumi.getter
    def hsvs(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationHsvArgs']]:
        return pulumi.get(self, "hsvs")

    @hsvs.setter
    def hsvs(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationHsvArgs']]):
        pulumi.set(self, "hsvs", value)

    @property
    @pulumi.getter(name="ifDimensions")
    def if_dimensions(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionArgs']]:
        return pulumi.get(self, "if_dimensions")

    @if_dimensions.setter
    def if_dimensions(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionArgs']]):
        pulumi.set(self, "if_dimensions", value)

    @property
    @pulumi.getter(name="ifOrientations")
    def if_orientations(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationArgs']]:
        return pulumi.get(self, "if_orientations")

    @if_orientations.setter
    def if_orientations(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationArgs']]):
        pulumi.set(self, "if_orientations", value)

    @property
    @pulumi.getter(name="maxColors")
    def max_colors(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorArgs']]:
        return pulumi.get(self, "max_colors")

    @max_colors.setter
    def max_colors(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorArgs']]):
        pulumi.set(self, "max_colors", value)

    @property
    @pulumi.getter
    def mirrors(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs']]:
        return pulumi.get(self, "mirrors")

    @mirrors.setter
    def mirrors(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs']]):
        pulumi.set(self, "mirrors", value)

    @property
    @pulumi.getter(name="monoHues")
    def mono_hues(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueArgs']]:
        return pulumi.get(self, "mono_hues")

    @mono_hues.setter
    def mono_hues(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueArgs']]):
        pulumi.set(self, "mono_hues", value)

    @property
    @pulumi.getter
    def opacities(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityArgs']]:
        return pulumi.get(self, "opacities")

    @opacities.setter
    def opacities(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityArgs']]):
        pulumi.set(self, "opacities", value)

    @property
    @pulumi.getter(name="removeColors")
    def remove_colors(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorArgs']]:
        return pulumi.get(self, "remove_colors")

    @remove_colors.setter
    def remove_colors(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorArgs']]):
        pulumi.set(self, "remove_colors", value)

    @property
    @pulumi.getter(name="unsharpMasks")
    def unsharp_masks(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskArgs']]:
        return pulumi.get(self, "unsharp_masks")

    @unsharp_masks.setter
    def unsharp_masks(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskArgs']]):
        pulumi.set(self, "unsharp_masks", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorArgs:
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[str]):
        pulumi.set(self, "color_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationBlurArgs:
    def __init__(__self__, *,
                 sigma: Optional[str] = None,
                 sigma_var: Optional[str] = None):
        if sigma is not None:
            pulumi.set(__self__, "sigma", sigma)
        if sigma_var is not None:
            pulumi.set(__self__, "sigma_var", sigma_var)

    @property
    @pulumi.getter
    def sigma(self) -> Optional[str]:
        return pulumi.get(self, "sigma")

    @sigma.setter
    def sigma(self, value: Optional[str]):
        pulumi.set(self, "sigma", value)

    @property
    @pulumi.getter(name="sigmaVar")
    def sigma_var(self) -> Optional[str]:
        return pulumi.get(self, "sigma_var")

    @sigma_var.setter
    def sigma_var(self, value: Optional[str]):
        pulumi.set(self, "sigma_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyArgs:
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_feather: Optional[str] = None,
                 hue_feather_var: Optional[str] = None,
                 hue_tolerance: Optional[str] = None,
                 hue_tolerance_var: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 lightness_feather: Optional[str] = None,
                 lightness_feather_var: Optional[str] = None,
                 lightness_tolerance: Optional[str] = None,
                 lightness_tolerance_var: Optional[str] = None,
                 saturation_feather: Optional[str] = None,
                 saturation_feather_var: Optional[str] = None,
                 saturation_tolerance: Optional[str] = None,
                 saturation_tolerance_var: Optional[str] = None):
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_feather is not None:
            pulumi.set(__self__, "hue_feather", hue_feather)
        if hue_feather_var is not None:
            pulumi.set(__self__, "hue_feather_var", hue_feather_var)
        if hue_tolerance is not None:
            pulumi.set(__self__, "hue_tolerance", hue_tolerance)
        if hue_tolerance_var is not None:
            pulumi.set(__self__, "hue_tolerance_var", hue_tolerance_var)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if lightness_feather is not None:
            pulumi.set(__self__, "lightness_feather", lightness_feather)
        if lightness_feather_var is not None:
            pulumi.set(__self__, "lightness_feather_var", lightness_feather_var)
        if lightness_tolerance is not None:
            pulumi.set(__self__, "lightness_tolerance", lightness_tolerance)
        if lightness_tolerance_var is not None:
            pulumi.set(__self__, "lightness_tolerance_var", lightness_tolerance_var)
        if saturation_feather is not None:
            pulumi.set(__self__, "saturation_feather", saturation_feather)
        if saturation_feather_var is not None:
            pulumi.set(__self__, "saturation_feather_var", saturation_feather_var)
        if saturation_tolerance is not None:
            pulumi.set(__self__, "saturation_tolerance", saturation_tolerance)
        if saturation_tolerance_var is not None:
            pulumi.set(__self__, "saturation_tolerance_var", saturation_tolerance_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @hue.setter
    def hue(self, value: Optional[str]):
        pulumi.set(self, "hue", value)

    @property
    @pulumi.getter(name="hueFeather")
    def hue_feather(self) -> Optional[str]:
        return pulumi.get(self, "hue_feather")

    @hue_feather.setter
    def hue_feather(self, value: Optional[str]):
        pulumi.set(self, "hue_feather", value)

    @property
    @pulumi.getter(name="hueFeatherVar")
    def hue_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_feather_var")

    @hue_feather_var.setter
    def hue_feather_var(self, value: Optional[str]):
        pulumi.set(self, "hue_feather_var", value)

    @property
    @pulumi.getter(name="hueTolerance")
    def hue_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "hue_tolerance")

    @hue_tolerance.setter
    def hue_tolerance(self, value: Optional[str]):
        pulumi.set(self, "hue_tolerance", value)

    @property
    @pulumi.getter(name="hueToleranceVar")
    def hue_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_tolerance_var")

    @hue_tolerance_var.setter
    def hue_tolerance_var(self, value: Optional[str]):
        pulumi.set(self, "hue_tolerance_var", value)

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @hue_var.setter
    def hue_var(self, value: Optional[str]):
        pulumi.set(self, "hue_var", value)

    @property
    @pulumi.getter(name="lightnessFeather")
    def lightness_feather(self) -> Optional[str]:
        return pulumi.get(self, "lightness_feather")

    @lightness_feather.setter
    def lightness_feather(self, value: Optional[str]):
        pulumi.set(self, "lightness_feather", value)

    @property
    @pulumi.getter(name="lightnessFeatherVar")
    def lightness_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_feather_var")

    @lightness_feather_var.setter
    def lightness_feather_var(self, value: Optional[str]):
        pulumi.set(self, "lightness_feather_var", value)

    @property
    @pulumi.getter(name="lightnessTolerance")
    def lightness_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "lightness_tolerance")

    @lightness_tolerance.setter
    def lightness_tolerance(self, value: Optional[str]):
        pulumi.set(self, "lightness_tolerance", value)

    @property
    @pulumi.getter(name="lightnessToleranceVar")
    def lightness_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_tolerance_var")

    @lightness_tolerance_var.setter
    def lightness_tolerance_var(self, value: Optional[str]):
        pulumi.set(self, "lightness_tolerance_var", value)

    @property
    @pulumi.getter(name="saturationFeather")
    def saturation_feather(self) -> Optional[str]:
        return pulumi.get(self, "saturation_feather")

    @saturation_feather.setter
    def saturation_feather(self, value: Optional[str]):
        pulumi.set(self, "saturation_feather", value)

    @property
    @pulumi.getter(name="saturationFeatherVar")
    def saturation_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_feather_var")

    @saturation_feather_var.setter
    def saturation_feather_var(self, value: Optional[str]):
        pulumi.set(self, "saturation_feather_var", value)

    @property
    @pulumi.getter(name="saturationTolerance")
    def saturation_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "saturation_tolerance")

    @saturation_tolerance.setter
    def saturation_tolerance(self, value: Optional[str]):
        pulumi.set(self, "saturation_tolerance", value)

    @property
    @pulumi.getter(name="saturationToleranceVar")
    def saturation_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_tolerance_var")

    @saturation_tolerance_var.setter
    def saturation_tolerance_var(self, value: Optional[str]):
        pulumi.set(self, "saturation_tolerance_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeArgs:
    def __init__(__self__, *,
                 image: 'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageArgs',
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 placement: Optional[str] = None,
                 placement_var: Optional[str] = None,
                 scale: Optional[str] = None,
                 scale_dimension: Optional[str] = None,
                 scale_dimension_var: Optional[str] = None,
                 scale_var: Optional[str] = None,
                 x_position: Optional[str] = None,
                 x_position_var: Optional[str] = None,
                 y_position: Optional[str] = None,
                 y_position_var: Optional[str] = None):
        pulumi.set(__self__, "image", image)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if placement_var is not None:
            pulumi.set(__self__, "placement_var", placement_var)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)
        if scale_dimension is not None:
            pulumi.set(__self__, "scale_dimension", scale_dimension)
        if scale_dimension_var is not None:
            pulumi.set(__self__, "scale_dimension_var", scale_dimension_var)
        if scale_var is not None:
            pulumi.set(__self__, "scale_var", scale_var)
        if x_position is not None:
            pulumi.set(__self__, "x_position", x_position)
        if x_position_var is not None:
            pulumi.set(__self__, "x_position_var", x_position_var)
        if y_position is not None:
            pulumi.set(__self__, "y_position", y_position)
        if y_position_var is not None:
            pulumi.set(__self__, "y_position_var", y_position_var)

    @property
    @pulumi.getter
    def image(self) -> 'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageArgs':
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: 'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageArgs'):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @gravity.setter
    def gravity(self, value: Optional[str]):
        pulumi.set(self, "gravity", value)

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @gravity_var.setter
    def gravity_var(self, value: Optional[str]):
        pulumi.set(self, "gravity_var", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[str]:
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[str]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="placementVar")
    def placement_var(self) -> Optional[str]:
        return pulumi.get(self, "placement_var")

    @placement_var.setter
    def placement_var(self, value: Optional[str]):
        pulumi.set(self, "placement_var", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[str]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[str]):
        pulumi.set(self, "scale", value)

    @property
    @pulumi.getter(name="scaleDimension")
    def scale_dimension(self) -> Optional[str]:
        return pulumi.get(self, "scale_dimension")

    @scale_dimension.setter
    def scale_dimension(self, value: Optional[str]):
        pulumi.set(self, "scale_dimension", value)

    @property
    @pulumi.getter(name="scaleDimensionVar")
    def scale_dimension_var(self) -> Optional[str]:
        return pulumi.get(self, "scale_dimension_var")

    @scale_dimension_var.setter
    def scale_dimension_var(self, value: Optional[str]):
        pulumi.set(self, "scale_dimension_var", value)

    @property
    @pulumi.getter(name="scaleVar")
    def scale_var(self) -> Optional[str]:
        return pulumi.get(self, "scale_var")

    @scale_var.setter
    def scale_var(self, value: Optional[str]):
        pulumi.set(self, "scale_var", value)

    @property
    @pulumi.getter(name="xPosition")
    def x_position(self) -> Optional[str]:
        return pulumi.get(self, "x_position")

    @x_position.setter
    def x_position(self, value: Optional[str]):
        pulumi.set(self, "x_position", value)

    @property
    @pulumi.getter(name="xPositionVar")
    def x_position_var(self) -> Optional[str]:
        return pulumi.get(self, "x_position_var")

    @x_position_var.setter
    def x_position_var(self, value: Optional[str]):
        pulumi.set(self, "x_position_var", value)

    @property
    @pulumi.getter(name="yPosition")
    def y_position(self) -> Optional[str]:
        return pulumi.get(self, "y_position")

    @y_position.setter
    def y_position(self, value: Optional[str]):
        pulumi.set(self, "y_position", value)

    @property
    @pulumi.getter(name="yPositionVar")
    def y_position_var(self) -> Optional[str]:
        return pulumi.get(self, "y_position_var")

    @y_position_var.setter
    def y_position_var(self, value: Optional[str]):
        pulumi.set(self, "y_position_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageArgs:
    def __init__(__self__, *,
                 box_images: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageArgs']] = None,
                 circle_images: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageArgs']] = None,
                 text_images: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageArgs']] = None,
                 url_images: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageArgs']] = None):
        if box_images is not None:
            pulumi.set(__self__, "box_images", box_images)
        if circle_images is not None:
            pulumi.set(__self__, "circle_images", circle_images)
        if text_images is not None:
            pulumi.set(__self__, "text_images", text_images)
        if url_images is not None:
            pulumi.set(__self__, "url_images", url_images)

    @property
    @pulumi.getter(name="boxImages")
    def box_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageArgs']]:
        return pulumi.get(self, "box_images")

    @box_images.setter
    def box_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageArgs']]):
        pulumi.set(self, "box_images", value)

    @property
    @pulumi.getter(name="circleImages")
    def circle_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageArgs']]:
        return pulumi.get(self, "circle_images")

    @circle_images.setter
    def circle_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageArgs']]):
        pulumi.set(self, "circle_images", value)

    @property
    @pulumi.getter(name="textImages")
    def text_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageArgs']]:
        return pulumi.get(self, "text_images")

    @text_images.setter
    def text_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageArgs']]):
        pulumi.set(self, "text_images", value)

    @property
    @pulumi.getter(name="urlImages")
    def url_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageArgs']]:
        return pulumi.get(self, "url_images")

    @url_images.setter
    def url_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageArgs']]):
        pulumi.set(self, "url_images", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageArgs:
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[str]):
        pulumi.set(self, "color_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[str]):
        pulumi.set(self, "width_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageArgs:
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 diameter: Optional[str] = None,
                 diameter_var: Optional[str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if diameter is not None:
            pulumi.set(__self__, "diameter", diameter)
        if diameter_var is not None:
            pulumi.set(__self__, "diameter_var", diameter_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[str]):
        pulumi.set(self, "color_var", value)

    @property
    @pulumi.getter
    def diameter(self) -> Optional[str]:
        return pulumi.get(self, "diameter")

    @diameter.setter
    def diameter(self, value: Optional[str]):
        pulumi.set(self, "diameter", value)

    @property
    @pulumi.getter(name="diameterVar")
    def diameter_var(self) -> Optional[str]:
        return pulumi.get(self, "diameter_var")

    @diameter_var.setter
    def diameter_var(self, value: Optional[str]):
        pulumi.set(self, "diameter_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[str]):
        pulumi.set(self, "width_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageArgs:
    def __init__(__self__, *,
                 fill: Optional[str] = None,
                 fill_var: Optional[str] = None,
                 size: Optional[str] = None,
                 size_var: Optional[str] = None,
                 stroke: Optional[str] = None,
                 stroke_size: Optional[str] = None,
                 stroke_size_var: Optional[str] = None,
                 stroke_var: Optional[str] = None,
                 text: Optional[str] = None,
                 text_var: Optional[str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 typeface: Optional[str] = None,
                 typeface_var: Optional[str] = None):
        if fill is not None:
            pulumi.set(__self__, "fill", fill)
        if fill_var is not None:
            pulumi.set(__self__, "fill_var", fill_var)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_var is not None:
            pulumi.set(__self__, "size_var", size_var)
        if stroke is not None:
            pulumi.set(__self__, "stroke", stroke)
        if stroke_size is not None:
            pulumi.set(__self__, "stroke_size", stroke_size)
        if stroke_size_var is not None:
            pulumi.set(__self__, "stroke_size_var", stroke_size_var)
        if stroke_var is not None:
            pulumi.set(__self__, "stroke_var", stroke_var)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if text_var is not None:
            pulumi.set(__self__, "text_var", text_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if typeface is not None:
            pulumi.set(__self__, "typeface", typeface)
        if typeface_var is not None:
            pulumi.set(__self__, "typeface_var", typeface_var)

    @property
    @pulumi.getter
    def fill(self) -> Optional[str]:
        return pulumi.get(self, "fill")

    @fill.setter
    def fill(self, value: Optional[str]):
        pulumi.set(self, "fill", value)

    @property
    @pulumi.getter(name="fillVar")
    def fill_var(self) -> Optional[str]:
        return pulumi.get(self, "fill_var")

    @fill_var.setter
    def fill_var(self, value: Optional[str]):
        pulumi.set(self, "fill_var", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[str]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeVar")
    def size_var(self) -> Optional[str]:
        return pulumi.get(self, "size_var")

    @size_var.setter
    def size_var(self, value: Optional[str]):
        pulumi.set(self, "size_var", value)

    @property
    @pulumi.getter
    def stroke(self) -> Optional[str]:
        return pulumi.get(self, "stroke")

    @stroke.setter
    def stroke(self, value: Optional[str]):
        pulumi.set(self, "stroke", value)

    @property
    @pulumi.getter(name="strokeSize")
    def stroke_size(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size")

    @stroke_size.setter
    def stroke_size(self, value: Optional[str]):
        pulumi.set(self, "stroke_size", value)

    @property
    @pulumi.getter(name="strokeSizeVar")
    def stroke_size_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size_var")

    @stroke_size_var.setter
    def stroke_size_var(self, value: Optional[str]):
        pulumi.set(self, "stroke_size_var", value)

    @property
    @pulumi.getter(name="strokeVar")
    def stroke_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_var")

    @stroke_var.setter
    def stroke_var(self, value: Optional[str]):
        pulumi.set(self, "stroke_var", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="textVar")
    def text_var(self) -> Optional[str]:
        return pulumi.get(self, "text_var")

    @text_var.setter
    def text_var(self, value: Optional[str]):
        pulumi.set(self, "text_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def typeface(self) -> Optional[str]:
        return pulumi.get(self, "typeface")

    @typeface.setter
    def typeface(self, value: Optional[str]):
        pulumi.set(self, "typeface", value)

    @property
    @pulumi.getter(name="typefaceVar")
    def typeface_var(self) -> Optional[str]:
        return pulumi.get(self, "typeface_var")

    @typeface_var.setter
    def typeface_var(self, value: Optional[str]):
        pulumi.set(self, "typeface_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageArgs:
    def __init__(__self__, *,
                 transformation: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 url: Optional[str] = None,
                 url_var: Optional[str] = None):
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if url_var is not None:
            pulumi.set(__self__, "url_var", url_var)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="urlVar")
    def url_var(self) -> Optional[str]:
        return pulumi.get(self, "url_var")

    @url_var.setter
    def url_var(self, value: Optional[str]):
        pulumi.set(self, "url_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundArgs:
    def __init__(__self__, *,
                 transformations: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']] = None):
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[Sequence['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']]):
        pulumi.set(self, "transformations", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationContrastArgs:
    def __init__(__self__, *,
                 brightness: Optional[str] = None,
                 brightness_var: Optional[str] = None,
                 contrast: Optional[str] = None,
                 contrast_var: Optional[str] = None):
        if brightness is not None:
            pulumi.set(__self__, "brightness", brightness)
        if brightness_var is not None:
            pulumi.set(__self__, "brightness_var", brightness_var)
        if contrast is not None:
            pulumi.set(__self__, "contrast", contrast)
        if contrast_var is not None:
            pulumi.set(__self__, "contrast_var", contrast_var)

    @property
    @pulumi.getter
    def brightness(self) -> Optional[str]:
        return pulumi.get(self, "brightness")

    @brightness.setter
    def brightness(self, value: Optional[str]):
        pulumi.set(self, "brightness", value)

    @property
    @pulumi.getter(name="brightnessVar")
    def brightness_var(self) -> Optional[str]:
        return pulumi.get(self, "brightness_var")

    @brightness_var.setter
    def brightness_var(self, value: Optional[str]):
        pulumi.set(self, "brightness_var", value)

    @property
    @pulumi.getter
    def contrast(self) -> Optional[str]:
        return pulumi.get(self, "contrast")

    @contrast.setter
    def contrast(self, value: Optional[str]):
        pulumi.set(self, "contrast", value)

    @property
    @pulumi.getter(name="contrastVar")
    def contrast_var(self) -> Optional[str]:
        return pulumi.get(self, "contrast_var")

    @contrast_var.setter
    def contrast_var(self, value: Optional[str]):
        pulumi.set(self, "contrast_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationGoopArgs:
    def __init__(__self__, *,
                 chaos: Optional[str] = None,
                 chaos_var: Optional[str] = None,
                 density: Optional[str] = None,
                 density_var: Optional[str] = None,
                 power: Optional[str] = None,
                 power_var: Optional[str] = None,
                 seed: Optional[str] = None,
                 seed_var: Optional[str] = None):
        if chaos is not None:
            pulumi.set(__self__, "chaos", chaos)
        if chaos_var is not None:
            pulumi.set(__self__, "chaos_var", chaos_var)
        if density is not None:
            pulumi.set(__self__, "density", density)
        if density_var is not None:
            pulumi.set(__self__, "density_var", density_var)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_var is not None:
            pulumi.set(__self__, "power_var", power_var)
        if seed is not None:
            pulumi.set(__self__, "seed", seed)
        if seed_var is not None:
            pulumi.set(__self__, "seed_var", seed_var)

    @property
    @pulumi.getter
    def chaos(self) -> Optional[str]:
        return pulumi.get(self, "chaos")

    @chaos.setter
    def chaos(self, value: Optional[str]):
        pulumi.set(self, "chaos", value)

    @property
    @pulumi.getter(name="chaosVar")
    def chaos_var(self) -> Optional[str]:
        return pulumi.get(self, "chaos_var")

    @chaos_var.setter
    def chaos_var(self, value: Optional[str]):
        pulumi.set(self, "chaos_var", value)

    @property
    @pulumi.getter
    def density(self) -> Optional[str]:
        return pulumi.get(self, "density")

    @density.setter
    def density(self, value: Optional[str]):
        pulumi.set(self, "density", value)

    @property
    @pulumi.getter(name="densityVar")
    def density_var(self) -> Optional[str]:
        return pulumi.get(self, "density_var")

    @density_var.setter
    def density_var(self, value: Optional[str]):
        pulumi.set(self, "density_var", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[str]:
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[str]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerVar")
    def power_var(self) -> Optional[str]:
        return pulumi.get(self, "power_var")

    @power_var.setter
    def power_var(self, value: Optional[str]):
        pulumi.set(self, "power_var", value)

    @property
    @pulumi.getter
    def seed(self) -> Optional[str]:
        return pulumi.get(self, "seed")

    @seed.setter
    def seed(self, value: Optional[str]):
        pulumi.set(self, "seed", value)

    @property
    @pulumi.getter(name="seedVar")
    def seed_var(self) -> Optional[str]:
        return pulumi.get(self, "seed_var")

    @seed_var.setter
    def seed_var(self, value: Optional[str]):
        pulumi.set(self, "seed_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleArgs:
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 type_var: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type_var is not None:
            pulumi.set(__self__, "type_var", type_var)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="typeVar")
    def type_var(self) -> Optional[str]:
        return pulumi.get(self, "type_var")

    @type_var.setter
    def type_var(self, value: Optional[str]):
        pulumi.set(self, "type_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationHslArgs:
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 lightness: Optional[str] = None,
                 lightness_var: Optional[str] = None,
                 saturation: Optional[str] = None,
                 saturation_var: Optional[str] = None):
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if lightness is not None:
            pulumi.set(__self__, "lightness", lightness)
        if lightness_var is not None:
            pulumi.set(__self__, "lightness_var", lightness_var)
        if saturation is not None:
            pulumi.set(__self__, "saturation", saturation)
        if saturation_var is not None:
            pulumi.set(__self__, "saturation_var", saturation_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @hue.setter
    def hue(self, value: Optional[str]):
        pulumi.set(self, "hue", value)

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @hue_var.setter
    def hue_var(self, value: Optional[str]):
        pulumi.set(self, "hue_var", value)

    @property
    @pulumi.getter
    def lightness(self) -> Optional[str]:
        return pulumi.get(self, "lightness")

    @lightness.setter
    def lightness(self, value: Optional[str]):
        pulumi.set(self, "lightness", value)

    @property
    @pulumi.getter(name="lightnessVar")
    def lightness_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_var")

    @lightness_var.setter
    def lightness_var(self, value: Optional[str]):
        pulumi.set(self, "lightness_var", value)

    @property
    @pulumi.getter
    def saturation(self) -> Optional[str]:
        return pulumi.get(self, "saturation")

    @saturation.setter
    def saturation(self, value: Optional[str]):
        pulumi.set(self, "saturation", value)

    @property
    @pulumi.getter(name="saturationVar")
    def saturation_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_var")

    @saturation_var.setter
    def saturation_var(self, value: Optional[str]):
        pulumi.set(self, "saturation_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationHsvArgs:
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 saturation: Optional[str] = None,
                 saturation_var: Optional[str] = None,
                 value: Optional[str] = None,
                 value_var: Optional[str] = None):
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if saturation is not None:
            pulumi.set(__self__, "saturation", saturation)
        if saturation_var is not None:
            pulumi.set(__self__, "saturation_var", saturation_var)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_var is not None:
            pulumi.set(__self__, "value_var", value_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @hue.setter
    def hue(self, value: Optional[str]):
        pulumi.set(self, "hue", value)

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @hue_var.setter
    def hue_var(self, value: Optional[str]):
        pulumi.set(self, "hue_var", value)

    @property
    @pulumi.getter
    def saturation(self) -> Optional[str]:
        return pulumi.get(self, "saturation")

    @saturation.setter
    def saturation(self, value: Optional[str]):
        pulumi.set(self, "saturation", value)

    @property
    @pulumi.getter(name="saturationVar")
    def saturation_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_var")

    @saturation_var.setter
    def saturation_var(self, value: Optional[str]):
        pulumi.set(self, "saturation_var", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueVar")
    def value_var(self) -> Optional[str]:
        return pulumi.get(self, "value_var")

    @value_var.setter
    def value_var(self, value: Optional[str]):
        pulumi.set(self, "value_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionArgs:
    def __init__(__self__, *,
                 default: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 dimension: Optional[str] = None,
                 dimension_var: Optional[str] = None,
                 equal: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 greater_than: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 less_than: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 value: Optional[str] = None,
                 value_var: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dimension is not None:
            pulumi.set(__self__, "dimension", dimension)
        if dimension_var is not None:
            pulumi.set(__self__, "dimension_var", dimension_var)
        if equal is not None:
            pulumi.set(__self__, "equal", equal)
        if greater_than is not None:
            pulumi.set(__self__, "greater_than", greater_than)
        if less_than is not None:
            pulumi.set(__self__, "less_than", less_than)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_var is not None:
            pulumi.set(__self__, "value_var", value_var)

    @property
    @pulumi.getter
    def default(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def dimension(self) -> Optional[str]:
        return pulumi.get(self, "dimension")

    @dimension.setter
    def dimension(self, value: Optional[str]):
        pulumi.set(self, "dimension", value)

    @property
    @pulumi.getter(name="dimensionVar")
    def dimension_var(self) -> Optional[str]:
        return pulumi.get(self, "dimension_var")

    @dimension_var.setter
    def dimension_var(self, value: Optional[str]):
        pulumi.set(self, "dimension_var", value)

    @property
    @pulumi.getter
    def equal(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "equal")

    @equal.setter
    def equal(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "equal", value)

    @property
    @pulumi.getter(name="greaterThan")
    def greater_than(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "greater_than")

    @greater_than.setter
    def greater_than(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "greater_than", value)

    @property
    @pulumi.getter(name="lessThan")
    def less_than(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "less_than")

    @less_than.setter
    def less_than(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "less_than", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueVar")
    def value_var(self) -> Optional[str]:
        return pulumi.get(self, "value_var")

    @value_var.setter
    def value_var(self, value: Optional[str]):
        pulumi.set(self, "value_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationArgs:
    def __init__(__self__, *,
                 default: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 landscape: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 portrait: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None,
                 square: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs'] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if landscape is not None:
            pulumi.set(__self__, "landscape", landscape)
        if portrait is not None:
            pulumi.set(__self__, "portrait", portrait)
        if square is not None:
            pulumi.set(__self__, "square", square)

    @property
    @pulumi.getter
    def default(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def landscape(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "landscape")

    @landscape.setter
    def landscape(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "landscape", value)

    @property
    @pulumi.getter
    def portrait(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "portrait")

    @portrait.setter
    def portrait(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "portrait", value)

    @property
    @pulumi.getter
    def square(self) -> Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']:
        return pulumi.get(self, "square")

    @square.setter
    def square(self, value: Optional['GetImagingPolicyImagePolicyPostBreakpointTransformationArgs']):
        pulumi.set(self, "square", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorArgs:
    def __init__(__self__, *,
                 colors: Optional[str] = None,
                 colors_var: Optional[str] = None):
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if colors_var is not None:
            pulumi.set(__self__, "colors_var", colors_var)

    @property
    @pulumi.getter
    def colors(self) -> Optional[str]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[str]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="colorsVar")
    def colors_var(self) -> Optional[str]:
        return pulumi.get(self, "colors_var")

    @colors_var.setter
    def colors_var(self, value: Optional[str]):
        pulumi.set(self, "colors_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs:
    def __init__(__self__, *,
                 horizontal: Optional[str] = None,
                 horizontal_var: Optional[str] = None,
                 vertical: Optional[str] = None,
                 vertical_var: Optional[str] = None):
        if horizontal is not None:
            pulumi.set(__self__, "horizontal", horizontal)
        if horizontal_var is not None:
            pulumi.set(__self__, "horizontal_var", horizontal_var)
        if vertical is not None:
            pulumi.set(__self__, "vertical", vertical)
        if vertical_var is not None:
            pulumi.set(__self__, "vertical_var", vertical_var)

    @property
    @pulumi.getter
    def horizontal(self) -> Optional[str]:
        return pulumi.get(self, "horizontal")

    @horizontal.setter
    def horizontal(self, value: Optional[str]):
        pulumi.set(self, "horizontal", value)

    @property
    @pulumi.getter(name="horizontalVar")
    def horizontal_var(self) -> Optional[str]:
        return pulumi.get(self, "horizontal_var")

    @horizontal_var.setter
    def horizontal_var(self, value: Optional[str]):
        pulumi.set(self, "horizontal_var", value)

    @property
    @pulumi.getter
    def vertical(self) -> Optional[str]:
        return pulumi.get(self, "vertical")

    @vertical.setter
    def vertical(self, value: Optional[str]):
        pulumi.set(self, "vertical", value)

    @property
    @pulumi.getter(name="verticalVar")
    def vertical_var(self) -> Optional[str]:
        return pulumi.get(self, "vertical_var")

    @vertical_var.setter
    def vertical_var(self, value: Optional[str]):
        pulumi.set(self, "vertical_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueArgs:
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None):
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @hue.setter
    def hue(self, value: Optional[str]):
        pulumi.set(self, "hue", value)

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @hue_var.setter
    def hue_var(self, value: Optional[str]):
        pulumi.set(self, "hue_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityArgs:
    def __init__(__self__, *,
                 opacity: Optional[str] = None,
                 opacity_var: Optional[str] = None):
        if opacity is not None:
            pulumi.set(__self__, "opacity", opacity)
        if opacity_var is not None:
            pulumi.set(__self__, "opacity_var", opacity_var)

    @property
    @pulumi.getter
    def opacity(self) -> Optional[str]:
        return pulumi.get(self, "opacity")

    @opacity.setter
    def opacity(self, value: Optional[str]):
        pulumi.set(self, "opacity", value)

    @property
    @pulumi.getter(name="opacityVar")
    def opacity_var(self) -> Optional[str]:
        return pulumi.get(self, "opacity_var")

    @opacity_var.setter
    def opacity_var(self, value: Optional[str]):
        pulumi.set(self, "opacity_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorArgs:
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 feather: Optional[str] = None,
                 feather_var: Optional[str] = None,
                 tolerance: Optional[str] = None,
                 tolerance_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if feather is not None:
            pulumi.set(__self__, "feather", feather)
        if feather_var is not None:
            pulumi.set(__self__, "feather_var", feather_var)
        if tolerance is not None:
            pulumi.set(__self__, "tolerance", tolerance)
        if tolerance_var is not None:
            pulumi.set(__self__, "tolerance_var", tolerance_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[str]):
        pulumi.set(self, "color_var", value)

    @property
    @pulumi.getter
    def feather(self) -> Optional[str]:
        return pulumi.get(self, "feather")

    @feather.setter
    def feather(self, value: Optional[str]):
        pulumi.set(self, "feather", value)

    @property
    @pulumi.getter(name="featherVar")
    def feather_var(self) -> Optional[str]:
        return pulumi.get(self, "feather_var")

    @feather_var.setter
    def feather_var(self, value: Optional[str]):
        pulumi.set(self, "feather_var", value)

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[str]:
        return pulumi.get(self, "tolerance")

    @tolerance.setter
    def tolerance(self, value: Optional[str]):
        pulumi.set(self, "tolerance", value)

    @property
    @pulumi.getter(name="toleranceVar")
    def tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "tolerance_var")

    @tolerance_var.setter
    def tolerance_var(self, value: Optional[str]):
        pulumi.set(self, "tolerance_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskArgs:
    def __init__(__self__, *,
                 gain: Optional[str] = None,
                 gain_var: Optional[str] = None,
                 sigma: Optional[str] = None,
                 sigma_var: Optional[str] = None,
                 threshold: Optional[str] = None,
                 threshold_var: Optional[str] = None):
        if gain is not None:
            pulumi.set(__self__, "gain", gain)
        if gain_var is not None:
            pulumi.set(__self__, "gain_var", gain_var)
        if sigma is not None:
            pulumi.set(__self__, "sigma", sigma)
        if sigma_var is not None:
            pulumi.set(__self__, "sigma_var", sigma_var)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_var is not None:
            pulumi.set(__self__, "threshold_var", threshold_var)

    @property
    @pulumi.getter
    def gain(self) -> Optional[str]:
        return pulumi.get(self, "gain")

    @gain.setter
    def gain(self, value: Optional[str]):
        pulumi.set(self, "gain", value)

    @property
    @pulumi.getter(name="gainVar")
    def gain_var(self) -> Optional[str]:
        return pulumi.get(self, "gain_var")

    @gain_var.setter
    def gain_var(self, value: Optional[str]):
        pulumi.set(self, "gain_var", value)

    @property
    @pulumi.getter
    def sigma(self) -> Optional[str]:
        return pulumi.get(self, "sigma")

    @sigma.setter
    def sigma(self, value: Optional[str]):
        pulumi.set(self, "sigma", value)

    @property
    @pulumi.getter(name="sigmaVar")
    def sigma_var(self) -> Optional[str]:
        return pulumi.get(self, "sigma_var")

    @sigma_var.setter
    def sigma_var(self, value: Optional[str]):
        pulumi.set(self, "sigma_var", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[str]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[str]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter(name="thresholdVar")
    def threshold_var(self) -> Optional[str]:
        return pulumi.get(self, "threshold_var")

    @threshold_var.setter
    def threshold_var(self, value: Optional[str]):
        pulumi.set(self, "threshold_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationArgs:
    def __init__(__self__, *,
                 appends: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendArgs']] = None,
                 aspect_crops: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAspectCropArgs']] = None,
                 background_colors: Optional[Sequence['GetImagingPolicyImagePolicyTransformationBackgroundColorArgs']] = None,
                 blurs: Optional[Sequence['GetImagingPolicyImagePolicyTransformationBlurArgs']] = None,
                 chroma_keys: Optional[Sequence['GetImagingPolicyImagePolicyTransformationChromaKeyArgs']] = None,
                 composites: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeArgs']] = None,
                 compounds: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompoundArgs']] = None,
                 contrasts: Optional[Sequence['GetImagingPolicyImagePolicyTransformationContrastArgs']] = None,
                 crops: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCropArgs']] = None,
                 face_crops: Optional[Sequence['GetImagingPolicyImagePolicyTransformationFaceCropArgs']] = None,
                 feature_crops: Optional[Sequence['GetImagingPolicyImagePolicyTransformationFeatureCropArgs']] = None,
                 fit_and_fills: Optional[Sequence['GetImagingPolicyImagePolicyTransformationFitAndFillArgs']] = None,
                 goops: Optional[Sequence['GetImagingPolicyImagePolicyTransformationGoopArgs']] = None,
                 grayscales: Optional[Sequence['GetImagingPolicyImagePolicyTransformationGrayscaleArgs']] = None,
                 hsls: Optional[Sequence['GetImagingPolicyImagePolicyTransformationHslArgs']] = None,
                 hsvs: Optional[Sequence['GetImagingPolicyImagePolicyTransformationHsvArgs']] = None,
                 if_dimensions: Optional[Sequence['GetImagingPolicyImagePolicyTransformationIfDimensionArgs']] = None,
                 if_orientations: Optional[Sequence['GetImagingPolicyImagePolicyTransformationIfOrientationArgs']] = None,
                 im_queries: Optional[Sequence['GetImagingPolicyImagePolicyTransformationImQueryArgs']] = None,
                 max_colors: Optional[Sequence['GetImagingPolicyImagePolicyTransformationMaxColorArgs']] = None,
                 mirrors: Optional[Sequence['GetImagingPolicyImagePolicyTransformationMirrorArgs']] = None,
                 mono_hues: Optional[Sequence['GetImagingPolicyImagePolicyTransformationMonoHueArgs']] = None,
                 opacities: Optional[Sequence['GetImagingPolicyImagePolicyTransformationOpacityArgs']] = None,
                 region_of_interest_crops: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs']] = None,
                 relative_crops: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRelativeCropArgs']] = None,
                 remove_colors: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRemoveColorArgs']] = None,
                 resizes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationResizeArgs']] = None,
                 rotates: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRotateArgs']] = None,
                 scales: Optional[Sequence['GetImagingPolicyImagePolicyTransformationScaleArgs']] = None,
                 shears: Optional[Sequence['GetImagingPolicyImagePolicyTransformationShearsArgs']] = None,
                 trims: Optional[Sequence['GetImagingPolicyImagePolicyTransformationTrimArgs']] = None,
                 unsharp_masks: Optional[Sequence['GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs']] = None):
        if appends is not None:
            pulumi.set(__self__, "appends", appends)
        if aspect_crops is not None:
            pulumi.set(__self__, "aspect_crops", aspect_crops)
        if background_colors is not None:
            pulumi.set(__self__, "background_colors", background_colors)
        if blurs is not None:
            pulumi.set(__self__, "blurs", blurs)
        if chroma_keys is not None:
            pulumi.set(__self__, "chroma_keys", chroma_keys)
        if composites is not None:
            pulumi.set(__self__, "composites", composites)
        if compounds is not None:
            pulumi.set(__self__, "compounds", compounds)
        if contrasts is not None:
            pulumi.set(__self__, "contrasts", contrasts)
        if crops is not None:
            pulumi.set(__self__, "crops", crops)
        if face_crops is not None:
            pulumi.set(__self__, "face_crops", face_crops)
        if feature_crops is not None:
            pulumi.set(__self__, "feature_crops", feature_crops)
        if fit_and_fills is not None:
            pulumi.set(__self__, "fit_and_fills", fit_and_fills)
        if goops is not None:
            pulumi.set(__self__, "goops", goops)
        if grayscales is not None:
            pulumi.set(__self__, "grayscales", grayscales)
        if hsls is not None:
            pulumi.set(__self__, "hsls", hsls)
        if hsvs is not None:
            pulumi.set(__self__, "hsvs", hsvs)
        if if_dimensions is not None:
            pulumi.set(__self__, "if_dimensions", if_dimensions)
        if if_orientations is not None:
            pulumi.set(__self__, "if_orientations", if_orientations)
        if im_queries is not None:
            pulumi.set(__self__, "im_queries", im_queries)
        if max_colors is not None:
            pulumi.set(__self__, "max_colors", max_colors)
        if mirrors is not None:
            pulumi.set(__self__, "mirrors", mirrors)
        if mono_hues is not None:
            pulumi.set(__self__, "mono_hues", mono_hues)
        if opacities is not None:
            pulumi.set(__self__, "opacities", opacities)
        if region_of_interest_crops is not None:
            pulumi.set(__self__, "region_of_interest_crops", region_of_interest_crops)
        if relative_crops is not None:
            pulumi.set(__self__, "relative_crops", relative_crops)
        if remove_colors is not None:
            pulumi.set(__self__, "remove_colors", remove_colors)
        if resizes is not None:
            pulumi.set(__self__, "resizes", resizes)
        if rotates is not None:
            pulumi.set(__self__, "rotates", rotates)
        if scales is not None:
            pulumi.set(__self__, "scales", scales)
        if shears is not None:
            pulumi.set(__self__, "shears", shears)
        if trims is not None:
            pulumi.set(__self__, "trims", trims)
        if unsharp_masks is not None:
            pulumi.set(__self__, "unsharp_masks", unsharp_masks)

    @property
    @pulumi.getter
    def appends(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendArgs']]:
        return pulumi.get(self, "appends")

    @appends.setter
    def appends(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendArgs']]):
        pulumi.set(self, "appends", value)

    @property
    @pulumi.getter(name="aspectCrops")
    def aspect_crops(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationAspectCropArgs']]:
        return pulumi.get(self, "aspect_crops")

    @aspect_crops.setter
    def aspect_crops(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAspectCropArgs']]):
        pulumi.set(self, "aspect_crops", value)

    @property
    @pulumi.getter(name="backgroundColors")
    def background_colors(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationBackgroundColorArgs']]:
        return pulumi.get(self, "background_colors")

    @background_colors.setter
    def background_colors(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationBackgroundColorArgs']]):
        pulumi.set(self, "background_colors", value)

    @property
    @pulumi.getter
    def blurs(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationBlurArgs']]:
        return pulumi.get(self, "blurs")

    @blurs.setter
    def blurs(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationBlurArgs']]):
        pulumi.set(self, "blurs", value)

    @property
    @pulumi.getter(name="chromaKeys")
    def chroma_keys(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationChromaKeyArgs']]:
        return pulumi.get(self, "chroma_keys")

    @chroma_keys.setter
    def chroma_keys(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationChromaKeyArgs']]):
        pulumi.set(self, "chroma_keys", value)

    @property
    @pulumi.getter
    def composites(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeArgs']]:
        return pulumi.get(self, "composites")

    @composites.setter
    def composites(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeArgs']]):
        pulumi.set(self, "composites", value)

    @property
    @pulumi.getter
    def compounds(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompoundArgs']]:
        return pulumi.get(self, "compounds")

    @compounds.setter
    def compounds(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompoundArgs']]):
        pulumi.set(self, "compounds", value)

    @property
    @pulumi.getter
    def contrasts(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationContrastArgs']]:
        return pulumi.get(self, "contrasts")

    @contrasts.setter
    def contrasts(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationContrastArgs']]):
        pulumi.set(self, "contrasts", value)

    @property
    @pulumi.getter
    def crops(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationCropArgs']]:
        return pulumi.get(self, "crops")

    @crops.setter
    def crops(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCropArgs']]):
        pulumi.set(self, "crops", value)

    @property
    @pulumi.getter(name="faceCrops")
    def face_crops(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationFaceCropArgs']]:
        return pulumi.get(self, "face_crops")

    @face_crops.setter
    def face_crops(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationFaceCropArgs']]):
        pulumi.set(self, "face_crops", value)

    @property
    @pulumi.getter(name="featureCrops")
    def feature_crops(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationFeatureCropArgs']]:
        return pulumi.get(self, "feature_crops")

    @feature_crops.setter
    def feature_crops(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationFeatureCropArgs']]):
        pulumi.set(self, "feature_crops", value)

    @property
    @pulumi.getter(name="fitAndFills")
    def fit_and_fills(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationFitAndFillArgs']]:
        return pulumi.get(self, "fit_and_fills")

    @fit_and_fills.setter
    def fit_and_fills(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationFitAndFillArgs']]):
        pulumi.set(self, "fit_and_fills", value)

    @property
    @pulumi.getter
    def goops(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationGoopArgs']]:
        return pulumi.get(self, "goops")

    @goops.setter
    def goops(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationGoopArgs']]):
        pulumi.set(self, "goops", value)

    @property
    @pulumi.getter
    def grayscales(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationGrayscaleArgs']]:
        return pulumi.get(self, "grayscales")

    @grayscales.setter
    def grayscales(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationGrayscaleArgs']]):
        pulumi.set(self, "grayscales", value)

    @property
    @pulumi.getter
    def hsls(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationHslArgs']]:
        return pulumi.get(self, "hsls")

    @hsls.setter
    def hsls(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationHslArgs']]):
        pulumi.set(self, "hsls", value)

    @property
    @pulumi.getter
    def hsvs(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationHsvArgs']]:
        return pulumi.get(self, "hsvs")

    @hsvs.setter
    def hsvs(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationHsvArgs']]):
        pulumi.set(self, "hsvs", value)

    @property
    @pulumi.getter(name="ifDimensions")
    def if_dimensions(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationIfDimensionArgs']]:
        return pulumi.get(self, "if_dimensions")

    @if_dimensions.setter
    def if_dimensions(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationIfDimensionArgs']]):
        pulumi.set(self, "if_dimensions", value)

    @property
    @pulumi.getter(name="ifOrientations")
    def if_orientations(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationIfOrientationArgs']]:
        return pulumi.get(self, "if_orientations")

    @if_orientations.setter
    def if_orientations(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationIfOrientationArgs']]):
        pulumi.set(self, "if_orientations", value)

    @property
    @pulumi.getter(name="imQueries")
    def im_queries(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationImQueryArgs']]:
        return pulumi.get(self, "im_queries")

    @im_queries.setter
    def im_queries(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationImQueryArgs']]):
        pulumi.set(self, "im_queries", value)

    @property
    @pulumi.getter(name="maxColors")
    def max_colors(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationMaxColorArgs']]:
        return pulumi.get(self, "max_colors")

    @max_colors.setter
    def max_colors(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationMaxColorArgs']]):
        pulumi.set(self, "max_colors", value)

    @property
    @pulumi.getter
    def mirrors(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationMirrorArgs']]:
        return pulumi.get(self, "mirrors")

    @mirrors.setter
    def mirrors(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationMirrorArgs']]):
        pulumi.set(self, "mirrors", value)

    @property
    @pulumi.getter(name="monoHues")
    def mono_hues(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationMonoHueArgs']]:
        return pulumi.get(self, "mono_hues")

    @mono_hues.setter
    def mono_hues(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationMonoHueArgs']]):
        pulumi.set(self, "mono_hues", value)

    @property
    @pulumi.getter
    def opacities(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationOpacityArgs']]:
        return pulumi.get(self, "opacities")

    @opacities.setter
    def opacities(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationOpacityArgs']]):
        pulumi.set(self, "opacities", value)

    @property
    @pulumi.getter(name="regionOfInterestCrops")
    def region_of_interest_crops(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs']]:
        return pulumi.get(self, "region_of_interest_crops")

    @region_of_interest_crops.setter
    def region_of_interest_crops(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs']]):
        pulumi.set(self, "region_of_interest_crops", value)

    @property
    @pulumi.getter(name="relativeCrops")
    def relative_crops(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRelativeCropArgs']]:
        return pulumi.get(self, "relative_crops")

    @relative_crops.setter
    def relative_crops(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRelativeCropArgs']]):
        pulumi.set(self, "relative_crops", value)

    @property
    @pulumi.getter(name="removeColors")
    def remove_colors(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRemoveColorArgs']]:
        return pulumi.get(self, "remove_colors")

    @remove_colors.setter
    def remove_colors(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRemoveColorArgs']]):
        pulumi.set(self, "remove_colors", value)

    @property
    @pulumi.getter
    def resizes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationResizeArgs']]:
        return pulumi.get(self, "resizes")

    @resizes.setter
    def resizes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationResizeArgs']]):
        pulumi.set(self, "resizes", value)

    @property
    @pulumi.getter
    def rotates(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRotateArgs']]:
        return pulumi.get(self, "rotates")

    @rotates.setter
    def rotates(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRotateArgs']]):
        pulumi.set(self, "rotates", value)

    @property
    @pulumi.getter
    def scales(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationScaleArgs']]:
        return pulumi.get(self, "scales")

    @scales.setter
    def scales(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationScaleArgs']]):
        pulumi.set(self, "scales", value)

    @property
    @pulumi.getter
    def shears(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationShearsArgs']]:
        return pulumi.get(self, "shears")

    @shears.setter
    def shears(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationShearsArgs']]):
        pulumi.set(self, "shears", value)

    @property
    @pulumi.getter
    def trims(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationTrimArgs']]:
        return pulumi.get(self, "trims")

    @trims.setter
    def trims(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationTrimArgs']]):
        pulumi.set(self, "trims", value)

    @property
    @pulumi.getter(name="unsharpMasks")
    def unsharp_masks(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs']]:
        return pulumi.get(self, "unsharp_masks")

    @unsharp_masks.setter
    def unsharp_masks(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs']]):
        pulumi.set(self, "unsharp_masks", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationAppendArgs:
    def __init__(__self__, *,
                 image: 'GetImagingPolicyImagePolicyTransformationAppendImageArgs',
                 gravity: Optional[str] = None,
                 gravity_priority: Optional[str] = None,
                 gravity_priority_var: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 preserve_minor_dimension: Optional[str] = None,
                 preserve_minor_dimension_var: Optional[str] = None):
        pulumi.set(__self__, "image", image)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_priority is not None:
            pulumi.set(__self__, "gravity_priority", gravity_priority)
        if gravity_priority_var is not None:
            pulumi.set(__self__, "gravity_priority_var", gravity_priority_var)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if preserve_minor_dimension is not None:
            pulumi.set(__self__, "preserve_minor_dimension", preserve_minor_dimension)
        if preserve_minor_dimension_var is not None:
            pulumi.set(__self__, "preserve_minor_dimension_var", preserve_minor_dimension_var)

    @property
    @pulumi.getter
    def image(self) -> 'GetImagingPolicyImagePolicyTransformationAppendImageArgs':
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: 'GetImagingPolicyImagePolicyTransformationAppendImageArgs'):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @gravity.setter
    def gravity(self, value: Optional[str]):
        pulumi.set(self, "gravity", value)

    @property
    @pulumi.getter(name="gravityPriority")
    def gravity_priority(self) -> Optional[str]:
        return pulumi.get(self, "gravity_priority")

    @gravity_priority.setter
    def gravity_priority(self, value: Optional[str]):
        pulumi.set(self, "gravity_priority", value)

    @property
    @pulumi.getter(name="gravityPriorityVar")
    def gravity_priority_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_priority_var")

    @gravity_priority_var.setter
    def gravity_priority_var(self, value: Optional[str]):
        pulumi.set(self, "gravity_priority_var", value)

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @gravity_var.setter
    def gravity_var(self, value: Optional[str]):
        pulumi.set(self, "gravity_var", value)

    @property
    @pulumi.getter(name="preserveMinorDimension")
    def preserve_minor_dimension(self) -> Optional[str]:
        return pulumi.get(self, "preserve_minor_dimension")

    @preserve_minor_dimension.setter
    def preserve_minor_dimension(self, value: Optional[str]):
        pulumi.set(self, "preserve_minor_dimension", value)

    @property
    @pulumi.getter(name="preserveMinorDimensionVar")
    def preserve_minor_dimension_var(self) -> Optional[str]:
        return pulumi.get(self, "preserve_minor_dimension_var")

    @preserve_minor_dimension_var.setter
    def preserve_minor_dimension_var(self, value: Optional[str]):
        pulumi.set(self, "preserve_minor_dimension_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationAppendImageArgs:
    def __init__(__self__, *,
                 box_images: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageBoxImageArgs']] = None,
                 circle_images: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageCircleImageArgs']] = None,
                 text_images: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageTextImageArgs']] = None,
                 url_images: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageUrlImageArgs']] = None):
        if box_images is not None:
            pulumi.set(__self__, "box_images", box_images)
        if circle_images is not None:
            pulumi.set(__self__, "circle_images", circle_images)
        if text_images is not None:
            pulumi.set(__self__, "text_images", text_images)
        if url_images is not None:
            pulumi.set(__self__, "url_images", url_images)

    @property
    @pulumi.getter(name="boxImages")
    def box_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageBoxImageArgs']]:
        return pulumi.get(self, "box_images")

    @box_images.setter
    def box_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageBoxImageArgs']]):
        pulumi.set(self, "box_images", value)

    @property
    @pulumi.getter(name="circleImages")
    def circle_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageCircleImageArgs']]:
        return pulumi.get(self, "circle_images")

    @circle_images.setter
    def circle_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageCircleImageArgs']]):
        pulumi.set(self, "circle_images", value)

    @property
    @pulumi.getter(name="textImages")
    def text_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageTextImageArgs']]:
        return pulumi.get(self, "text_images")

    @text_images.setter
    def text_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageTextImageArgs']]):
        pulumi.set(self, "text_images", value)

    @property
    @pulumi.getter(name="urlImages")
    def url_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageUrlImageArgs']]:
        return pulumi.get(self, "url_images")

    @url_images.setter
    def url_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationAppendImageUrlImageArgs']]):
        pulumi.set(self, "url_images", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationAppendImageBoxImageArgs:
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[str]):
        pulumi.set(self, "color_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[str]):
        pulumi.set(self, "width_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationAppendImageCircleImageArgs:
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 diameter: Optional[str] = None,
                 diameter_var: Optional[str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if diameter is not None:
            pulumi.set(__self__, "diameter", diameter)
        if diameter_var is not None:
            pulumi.set(__self__, "diameter_var", diameter_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[str]):
        pulumi.set(self, "color_var", value)

    @property
    @pulumi.getter
    def diameter(self) -> Optional[str]:
        return pulumi.get(self, "diameter")

    @diameter.setter
    def diameter(self, value: Optional[str]):
        pulumi.set(self, "diameter", value)

    @property
    @pulumi.getter(name="diameterVar")
    def diameter_var(self) -> Optional[str]:
        return pulumi.get(self, "diameter_var")

    @diameter_var.setter
    def diameter_var(self, value: Optional[str]):
        pulumi.set(self, "diameter_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[str]):
        pulumi.set(self, "width_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationAppendImageTextImageArgs:
    def __init__(__self__, *,
                 fill: Optional[str] = None,
                 fill_var: Optional[str] = None,
                 size: Optional[str] = None,
                 size_var: Optional[str] = None,
                 stroke: Optional[str] = None,
                 stroke_size: Optional[str] = None,
                 stroke_size_var: Optional[str] = None,
                 stroke_var: Optional[str] = None,
                 text: Optional[str] = None,
                 text_var: Optional[str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 typeface: Optional[str] = None,
                 typeface_var: Optional[str] = None):
        if fill is not None:
            pulumi.set(__self__, "fill", fill)
        if fill_var is not None:
            pulumi.set(__self__, "fill_var", fill_var)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_var is not None:
            pulumi.set(__self__, "size_var", size_var)
        if stroke is not None:
            pulumi.set(__self__, "stroke", stroke)
        if stroke_size is not None:
            pulumi.set(__self__, "stroke_size", stroke_size)
        if stroke_size_var is not None:
            pulumi.set(__self__, "stroke_size_var", stroke_size_var)
        if stroke_var is not None:
            pulumi.set(__self__, "stroke_var", stroke_var)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if text_var is not None:
            pulumi.set(__self__, "text_var", text_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if typeface is not None:
            pulumi.set(__self__, "typeface", typeface)
        if typeface_var is not None:
            pulumi.set(__self__, "typeface_var", typeface_var)

    @property
    @pulumi.getter
    def fill(self) -> Optional[str]:
        return pulumi.get(self, "fill")

    @fill.setter
    def fill(self, value: Optional[str]):
        pulumi.set(self, "fill", value)

    @property
    @pulumi.getter(name="fillVar")
    def fill_var(self) -> Optional[str]:
        return pulumi.get(self, "fill_var")

    @fill_var.setter
    def fill_var(self, value: Optional[str]):
        pulumi.set(self, "fill_var", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[str]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeVar")
    def size_var(self) -> Optional[str]:
        return pulumi.get(self, "size_var")

    @size_var.setter
    def size_var(self, value: Optional[str]):
        pulumi.set(self, "size_var", value)

    @property
    @pulumi.getter
    def stroke(self) -> Optional[str]:
        return pulumi.get(self, "stroke")

    @stroke.setter
    def stroke(self, value: Optional[str]):
        pulumi.set(self, "stroke", value)

    @property
    @pulumi.getter(name="strokeSize")
    def stroke_size(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size")

    @stroke_size.setter
    def stroke_size(self, value: Optional[str]):
        pulumi.set(self, "stroke_size", value)

    @property
    @pulumi.getter(name="strokeSizeVar")
    def stroke_size_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size_var")

    @stroke_size_var.setter
    def stroke_size_var(self, value: Optional[str]):
        pulumi.set(self, "stroke_size_var", value)

    @property
    @pulumi.getter(name="strokeVar")
    def stroke_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_var")

    @stroke_var.setter
    def stroke_var(self, value: Optional[str]):
        pulumi.set(self, "stroke_var", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="textVar")
    def text_var(self) -> Optional[str]:
        return pulumi.get(self, "text_var")

    @text_var.setter
    def text_var(self, value: Optional[str]):
        pulumi.set(self, "text_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def typeface(self) -> Optional[str]:
        return pulumi.get(self, "typeface")

    @typeface.setter
    def typeface(self, value: Optional[str]):
        pulumi.set(self, "typeface", value)

    @property
    @pulumi.getter(name="typefaceVar")
    def typeface_var(self) -> Optional[str]:
        return pulumi.get(self, "typeface_var")

    @typeface_var.setter
    def typeface_var(self, value: Optional[str]):
        pulumi.set(self, "typeface_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationAppendImageUrlImageArgs:
    def __init__(__self__, *,
                 transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 url: Optional[str] = None,
                 url_var: Optional[str] = None):
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if url_var is not None:
            pulumi.set(__self__, "url_var", url_var)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="urlVar")
    def url_var(self) -> Optional[str]:
        return pulumi.get(self, "url_var")

    @url_var.setter
    def url_var(self, value: Optional[str]):
        pulumi.set(self, "url_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationAspectCropArgs:
    def __init__(__self__, *,
                 allow_expansion: Optional[str] = None,
                 allow_expansion_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None,
                 x_position: Optional[str] = None,
                 x_position_var: Optional[str] = None,
                 y_position: Optional[str] = None,
                 y_position_var: Optional[str] = None):
        if allow_expansion is not None:
            pulumi.set(__self__, "allow_expansion", allow_expansion)
        if allow_expansion_var is not None:
            pulumi.set(__self__, "allow_expansion_var", allow_expansion_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)
        if x_position is not None:
            pulumi.set(__self__, "x_position", x_position)
        if x_position_var is not None:
            pulumi.set(__self__, "x_position_var", x_position_var)
        if y_position is not None:
            pulumi.set(__self__, "y_position", y_position)
        if y_position_var is not None:
            pulumi.set(__self__, "y_position_var", y_position_var)

    @property
    @pulumi.getter(name="allowExpansion")
    def allow_expansion(self) -> Optional[str]:
        return pulumi.get(self, "allow_expansion")

    @allow_expansion.setter
    def allow_expansion(self, value: Optional[str]):
        pulumi.set(self, "allow_expansion", value)

    @property
    @pulumi.getter(name="allowExpansionVar")
    def allow_expansion_var(self) -> Optional[str]:
        return pulumi.get(self, "allow_expansion_var")

    @allow_expansion_var.setter
    def allow_expansion_var(self, value: Optional[str]):
        pulumi.set(self, "allow_expansion_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[str]):
        pulumi.set(self, "width_var", value)

    @property
    @pulumi.getter(name="xPosition")
    def x_position(self) -> Optional[str]:
        return pulumi.get(self, "x_position")

    @x_position.setter
    def x_position(self, value: Optional[str]):
        pulumi.set(self, "x_position", value)

    @property
    @pulumi.getter(name="xPositionVar")
    def x_position_var(self) -> Optional[str]:
        return pulumi.get(self, "x_position_var")

    @x_position_var.setter
    def x_position_var(self, value: Optional[str]):
        pulumi.set(self, "x_position_var", value)

    @property
    @pulumi.getter(name="yPosition")
    def y_position(self) -> Optional[str]:
        return pulumi.get(self, "y_position")

    @y_position.setter
    def y_position(self, value: Optional[str]):
        pulumi.set(self, "y_position", value)

    @property
    @pulumi.getter(name="yPositionVar")
    def y_position_var(self) -> Optional[str]:
        return pulumi.get(self, "y_position_var")

    @y_position_var.setter
    def y_position_var(self, value: Optional[str]):
        pulumi.set(self, "y_position_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationBackgroundColorArgs:
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[str]):
        pulumi.set(self, "color_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationBlurArgs:
    def __init__(__self__, *,
                 sigma: Optional[str] = None,
                 sigma_var: Optional[str] = None):
        if sigma is not None:
            pulumi.set(__self__, "sigma", sigma)
        if sigma_var is not None:
            pulumi.set(__self__, "sigma_var", sigma_var)

    @property
    @pulumi.getter
    def sigma(self) -> Optional[str]:
        return pulumi.get(self, "sigma")

    @sigma.setter
    def sigma(self, value: Optional[str]):
        pulumi.set(self, "sigma", value)

    @property
    @pulumi.getter(name="sigmaVar")
    def sigma_var(self) -> Optional[str]:
        return pulumi.get(self, "sigma_var")

    @sigma_var.setter
    def sigma_var(self, value: Optional[str]):
        pulumi.set(self, "sigma_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationChromaKeyArgs:
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_feather: Optional[str] = None,
                 hue_feather_var: Optional[str] = None,
                 hue_tolerance: Optional[str] = None,
                 hue_tolerance_var: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 lightness_feather: Optional[str] = None,
                 lightness_feather_var: Optional[str] = None,
                 lightness_tolerance: Optional[str] = None,
                 lightness_tolerance_var: Optional[str] = None,
                 saturation_feather: Optional[str] = None,
                 saturation_feather_var: Optional[str] = None,
                 saturation_tolerance: Optional[str] = None,
                 saturation_tolerance_var: Optional[str] = None):
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_feather is not None:
            pulumi.set(__self__, "hue_feather", hue_feather)
        if hue_feather_var is not None:
            pulumi.set(__self__, "hue_feather_var", hue_feather_var)
        if hue_tolerance is not None:
            pulumi.set(__self__, "hue_tolerance", hue_tolerance)
        if hue_tolerance_var is not None:
            pulumi.set(__self__, "hue_tolerance_var", hue_tolerance_var)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if lightness_feather is not None:
            pulumi.set(__self__, "lightness_feather", lightness_feather)
        if lightness_feather_var is not None:
            pulumi.set(__self__, "lightness_feather_var", lightness_feather_var)
        if lightness_tolerance is not None:
            pulumi.set(__self__, "lightness_tolerance", lightness_tolerance)
        if lightness_tolerance_var is not None:
            pulumi.set(__self__, "lightness_tolerance_var", lightness_tolerance_var)
        if saturation_feather is not None:
            pulumi.set(__self__, "saturation_feather", saturation_feather)
        if saturation_feather_var is not None:
            pulumi.set(__self__, "saturation_feather_var", saturation_feather_var)
        if saturation_tolerance is not None:
            pulumi.set(__self__, "saturation_tolerance", saturation_tolerance)
        if saturation_tolerance_var is not None:
            pulumi.set(__self__, "saturation_tolerance_var", saturation_tolerance_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @hue.setter
    def hue(self, value: Optional[str]):
        pulumi.set(self, "hue", value)

    @property
    @pulumi.getter(name="hueFeather")
    def hue_feather(self) -> Optional[str]:
        return pulumi.get(self, "hue_feather")

    @hue_feather.setter
    def hue_feather(self, value: Optional[str]):
        pulumi.set(self, "hue_feather", value)

    @property
    @pulumi.getter(name="hueFeatherVar")
    def hue_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_feather_var")

    @hue_feather_var.setter
    def hue_feather_var(self, value: Optional[str]):
        pulumi.set(self, "hue_feather_var", value)

    @property
    @pulumi.getter(name="hueTolerance")
    def hue_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "hue_tolerance")

    @hue_tolerance.setter
    def hue_tolerance(self, value: Optional[str]):
        pulumi.set(self, "hue_tolerance", value)

    @property
    @pulumi.getter(name="hueToleranceVar")
    def hue_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_tolerance_var")

    @hue_tolerance_var.setter
    def hue_tolerance_var(self, value: Optional[str]):
        pulumi.set(self, "hue_tolerance_var", value)

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @hue_var.setter
    def hue_var(self, value: Optional[str]):
        pulumi.set(self, "hue_var", value)

    @property
    @pulumi.getter(name="lightnessFeather")
    def lightness_feather(self) -> Optional[str]:
        return pulumi.get(self, "lightness_feather")

    @lightness_feather.setter
    def lightness_feather(self, value: Optional[str]):
        pulumi.set(self, "lightness_feather", value)

    @property
    @pulumi.getter(name="lightnessFeatherVar")
    def lightness_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_feather_var")

    @lightness_feather_var.setter
    def lightness_feather_var(self, value: Optional[str]):
        pulumi.set(self, "lightness_feather_var", value)

    @property
    @pulumi.getter(name="lightnessTolerance")
    def lightness_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "lightness_tolerance")

    @lightness_tolerance.setter
    def lightness_tolerance(self, value: Optional[str]):
        pulumi.set(self, "lightness_tolerance", value)

    @property
    @pulumi.getter(name="lightnessToleranceVar")
    def lightness_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_tolerance_var")

    @lightness_tolerance_var.setter
    def lightness_tolerance_var(self, value: Optional[str]):
        pulumi.set(self, "lightness_tolerance_var", value)

    @property
    @pulumi.getter(name="saturationFeather")
    def saturation_feather(self) -> Optional[str]:
        return pulumi.get(self, "saturation_feather")

    @saturation_feather.setter
    def saturation_feather(self, value: Optional[str]):
        pulumi.set(self, "saturation_feather", value)

    @property
    @pulumi.getter(name="saturationFeatherVar")
    def saturation_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_feather_var")

    @saturation_feather_var.setter
    def saturation_feather_var(self, value: Optional[str]):
        pulumi.set(self, "saturation_feather_var", value)

    @property
    @pulumi.getter(name="saturationTolerance")
    def saturation_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "saturation_tolerance")

    @saturation_tolerance.setter
    def saturation_tolerance(self, value: Optional[str]):
        pulumi.set(self, "saturation_tolerance", value)

    @property
    @pulumi.getter(name="saturationToleranceVar")
    def saturation_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_tolerance_var")

    @saturation_tolerance_var.setter
    def saturation_tolerance_var(self, value: Optional[str]):
        pulumi.set(self, "saturation_tolerance_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationCompositeArgs:
    def __init__(__self__, *,
                 image: 'GetImagingPolicyImagePolicyTransformationCompositeImageArgs',
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 placement: Optional[str] = None,
                 placement_var: Optional[str] = None,
                 scale: Optional[str] = None,
                 scale_dimension: Optional[str] = None,
                 scale_dimension_var: Optional[str] = None,
                 scale_var: Optional[str] = None,
                 x_position: Optional[str] = None,
                 x_position_var: Optional[str] = None,
                 y_position: Optional[str] = None,
                 y_position_var: Optional[str] = None):
        pulumi.set(__self__, "image", image)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if placement_var is not None:
            pulumi.set(__self__, "placement_var", placement_var)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)
        if scale_dimension is not None:
            pulumi.set(__self__, "scale_dimension", scale_dimension)
        if scale_dimension_var is not None:
            pulumi.set(__self__, "scale_dimension_var", scale_dimension_var)
        if scale_var is not None:
            pulumi.set(__self__, "scale_var", scale_var)
        if x_position is not None:
            pulumi.set(__self__, "x_position", x_position)
        if x_position_var is not None:
            pulumi.set(__self__, "x_position_var", x_position_var)
        if y_position is not None:
            pulumi.set(__self__, "y_position", y_position)
        if y_position_var is not None:
            pulumi.set(__self__, "y_position_var", y_position_var)

    @property
    @pulumi.getter
    def image(self) -> 'GetImagingPolicyImagePolicyTransformationCompositeImageArgs':
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: 'GetImagingPolicyImagePolicyTransformationCompositeImageArgs'):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @gravity.setter
    def gravity(self, value: Optional[str]):
        pulumi.set(self, "gravity", value)

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @gravity_var.setter
    def gravity_var(self, value: Optional[str]):
        pulumi.set(self, "gravity_var", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[str]:
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[str]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="placementVar")
    def placement_var(self) -> Optional[str]:
        return pulumi.get(self, "placement_var")

    @placement_var.setter
    def placement_var(self, value: Optional[str]):
        pulumi.set(self, "placement_var", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[str]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[str]):
        pulumi.set(self, "scale", value)

    @property
    @pulumi.getter(name="scaleDimension")
    def scale_dimension(self) -> Optional[str]:
        return pulumi.get(self, "scale_dimension")

    @scale_dimension.setter
    def scale_dimension(self, value: Optional[str]):
        pulumi.set(self, "scale_dimension", value)

    @property
    @pulumi.getter(name="scaleDimensionVar")
    def scale_dimension_var(self) -> Optional[str]:
        return pulumi.get(self, "scale_dimension_var")

    @scale_dimension_var.setter
    def scale_dimension_var(self, value: Optional[str]):
        pulumi.set(self, "scale_dimension_var", value)

    @property
    @pulumi.getter(name="scaleVar")
    def scale_var(self) -> Optional[str]:
        return pulumi.get(self, "scale_var")

    @scale_var.setter
    def scale_var(self, value: Optional[str]):
        pulumi.set(self, "scale_var", value)

    @property
    @pulumi.getter(name="xPosition")
    def x_position(self) -> Optional[str]:
        return pulumi.get(self, "x_position")

    @x_position.setter
    def x_position(self, value: Optional[str]):
        pulumi.set(self, "x_position", value)

    @property
    @pulumi.getter(name="xPositionVar")
    def x_position_var(self) -> Optional[str]:
        return pulumi.get(self, "x_position_var")

    @x_position_var.setter
    def x_position_var(self, value: Optional[str]):
        pulumi.set(self, "x_position_var", value)

    @property
    @pulumi.getter(name="yPosition")
    def y_position(self) -> Optional[str]:
        return pulumi.get(self, "y_position")

    @y_position.setter
    def y_position(self, value: Optional[str]):
        pulumi.set(self, "y_position", value)

    @property
    @pulumi.getter(name="yPositionVar")
    def y_position_var(self) -> Optional[str]:
        return pulumi.get(self, "y_position_var")

    @y_position_var.setter
    def y_position_var(self, value: Optional[str]):
        pulumi.set(self, "y_position_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationCompositeImageArgs:
    def __init__(__self__, *,
                 box_images: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageArgs']] = None,
                 circle_images: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs']] = None,
                 text_images: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageTextImageArgs']] = None,
                 url_images: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageArgs']] = None):
        if box_images is not None:
            pulumi.set(__self__, "box_images", box_images)
        if circle_images is not None:
            pulumi.set(__self__, "circle_images", circle_images)
        if text_images is not None:
            pulumi.set(__self__, "text_images", text_images)
        if url_images is not None:
            pulumi.set(__self__, "url_images", url_images)

    @property
    @pulumi.getter(name="boxImages")
    def box_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageArgs']]:
        return pulumi.get(self, "box_images")

    @box_images.setter
    def box_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageArgs']]):
        pulumi.set(self, "box_images", value)

    @property
    @pulumi.getter(name="circleImages")
    def circle_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs']]:
        return pulumi.get(self, "circle_images")

    @circle_images.setter
    def circle_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs']]):
        pulumi.set(self, "circle_images", value)

    @property
    @pulumi.getter(name="textImages")
    def text_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageTextImageArgs']]:
        return pulumi.get(self, "text_images")

    @text_images.setter
    def text_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageTextImageArgs']]):
        pulumi.set(self, "text_images", value)

    @property
    @pulumi.getter(name="urlImages")
    def url_images(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageArgs']]:
        return pulumi.get(self, "url_images")

    @url_images.setter
    def url_images(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageArgs']]):
        pulumi.set(self, "url_images", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageArgs:
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[str]):
        pulumi.set(self, "color_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[str]):
        pulumi.set(self, "width_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs:
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 diameter: Optional[str] = None,
                 diameter_var: Optional[str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if diameter is not None:
            pulumi.set(__self__, "diameter", diameter)
        if diameter_var is not None:
            pulumi.set(__self__, "diameter_var", diameter_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[str]):
        pulumi.set(self, "color_var", value)

    @property
    @pulumi.getter
    def diameter(self) -> Optional[str]:
        return pulumi.get(self, "diameter")

    @diameter.setter
    def diameter(self, value: Optional[str]):
        pulumi.set(self, "diameter", value)

    @property
    @pulumi.getter(name="diameterVar")
    def diameter_var(self) -> Optional[str]:
        return pulumi.get(self, "diameter_var")

    @diameter_var.setter
    def diameter_var(self, value: Optional[str]):
        pulumi.set(self, "diameter_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[str]):
        pulumi.set(self, "width_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationCompositeImageTextImageArgs:
    def __init__(__self__, *,
                 fill: Optional[str] = None,
                 fill_var: Optional[str] = None,
                 size: Optional[str] = None,
                 size_var: Optional[str] = None,
                 stroke: Optional[str] = None,
                 stroke_size: Optional[str] = None,
                 stroke_size_var: Optional[str] = None,
                 stroke_var: Optional[str] = None,
                 text: Optional[str] = None,
                 text_var: Optional[str] = None,
                 transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 typeface: Optional[str] = None,
                 typeface_var: Optional[str] = None):
        if fill is not None:
            pulumi.set(__self__, "fill", fill)
        if fill_var is not None:
            pulumi.set(__self__, "fill_var", fill_var)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_var is not None:
            pulumi.set(__self__, "size_var", size_var)
        if stroke is not None:
            pulumi.set(__self__, "stroke", stroke)
        if stroke_size is not None:
            pulumi.set(__self__, "stroke_size", stroke_size)
        if stroke_size_var is not None:
            pulumi.set(__self__, "stroke_size_var", stroke_size_var)
        if stroke_var is not None:
            pulumi.set(__self__, "stroke_var", stroke_var)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if text_var is not None:
            pulumi.set(__self__, "text_var", text_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if typeface is not None:
            pulumi.set(__self__, "typeface", typeface)
        if typeface_var is not None:
            pulumi.set(__self__, "typeface_var", typeface_var)

    @property
    @pulumi.getter
    def fill(self) -> Optional[str]:
        return pulumi.get(self, "fill")

    @fill.setter
    def fill(self, value: Optional[str]):
        pulumi.set(self, "fill", value)

    @property
    @pulumi.getter(name="fillVar")
    def fill_var(self) -> Optional[str]:
        return pulumi.get(self, "fill_var")

    @fill_var.setter
    def fill_var(self, value: Optional[str]):
        pulumi.set(self, "fill_var", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[str]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeVar")
    def size_var(self) -> Optional[str]:
        return pulumi.get(self, "size_var")

    @size_var.setter
    def size_var(self, value: Optional[str]):
        pulumi.set(self, "size_var", value)

    @property
    @pulumi.getter
    def stroke(self) -> Optional[str]:
        return pulumi.get(self, "stroke")

    @stroke.setter
    def stroke(self, value: Optional[str]):
        pulumi.set(self, "stroke", value)

    @property
    @pulumi.getter(name="strokeSize")
    def stroke_size(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size")

    @stroke_size.setter
    def stroke_size(self, value: Optional[str]):
        pulumi.set(self, "stroke_size", value)

    @property
    @pulumi.getter(name="strokeSizeVar")
    def stroke_size_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size_var")

    @stroke_size_var.setter
    def stroke_size_var(self, value: Optional[str]):
        pulumi.set(self, "stroke_size_var", value)

    @property
    @pulumi.getter(name="strokeVar")
    def stroke_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_var")

    @stroke_var.setter
    def stroke_var(self, value: Optional[str]):
        pulumi.set(self, "stroke_var", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="textVar")
    def text_var(self) -> Optional[str]:
        return pulumi.get(self, "text_var")

    @text_var.setter
    def text_var(self, value: Optional[str]):
        pulumi.set(self, "text_var", value)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def typeface(self) -> Optional[str]:
        return pulumi.get(self, "typeface")

    @typeface.setter
    def typeface(self, value: Optional[str]):
        pulumi.set(self, "typeface", value)

    @property
    @pulumi.getter(name="typefaceVar")
    def typeface_var(self) -> Optional[str]:
        return pulumi.get(self, "typeface_var")

    @typeface_var.setter
    def typeface_var(self, value: Optional[str]):
        pulumi.set(self, "typeface_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageArgs:
    def __init__(__self__, *,
                 transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 url: Optional[str] = None,
                 url_var: Optional[str] = None):
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if url_var is not None:
            pulumi.set(__self__, "url_var", url_var)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "transformation")

    @transformation.setter
    def transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "transformation", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="urlVar")
    def url_var(self) -> Optional[str]:
        return pulumi.get(self, "url_var")

    @url_var.setter
    def url_var(self, value: Optional[str]):
        pulumi.set(self, "url_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationCompoundArgs:
    def __init__(__self__, *,
                 transformations: Optional[Sequence['GetImagingPolicyImagePolicyTransformationArgs']] = None):
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationArgs']]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationArgs']]):
        pulumi.set(self, "transformations", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationContrastArgs:
    def __init__(__self__, *,
                 brightness: Optional[str] = None,
                 brightness_var: Optional[str] = None,
                 contrast: Optional[str] = None,
                 contrast_var: Optional[str] = None):
        if brightness is not None:
            pulumi.set(__self__, "brightness", brightness)
        if brightness_var is not None:
            pulumi.set(__self__, "brightness_var", brightness_var)
        if contrast is not None:
            pulumi.set(__self__, "contrast", contrast)
        if contrast_var is not None:
            pulumi.set(__self__, "contrast_var", contrast_var)

    @property
    @pulumi.getter
    def brightness(self) -> Optional[str]:
        return pulumi.get(self, "brightness")

    @brightness.setter
    def brightness(self, value: Optional[str]):
        pulumi.set(self, "brightness", value)

    @property
    @pulumi.getter(name="brightnessVar")
    def brightness_var(self) -> Optional[str]:
        return pulumi.get(self, "brightness_var")

    @brightness_var.setter
    def brightness_var(self, value: Optional[str]):
        pulumi.set(self, "brightness_var", value)

    @property
    @pulumi.getter
    def contrast(self) -> Optional[str]:
        return pulumi.get(self, "contrast")

    @contrast.setter
    def contrast(self, value: Optional[str]):
        pulumi.set(self, "contrast", value)

    @property
    @pulumi.getter(name="contrastVar")
    def contrast_var(self) -> Optional[str]:
        return pulumi.get(self, "contrast_var")

    @contrast_var.setter
    def contrast_var(self, value: Optional[str]):
        pulumi.set(self, "contrast_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationCropArgs:
    def __init__(__self__, *,
                 allow_expansion: Optional[str] = None,
                 allow_expansion_var: Optional[str] = None,
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None,
                 x_position: Optional[str] = None,
                 x_position_var: Optional[str] = None,
                 y_position: Optional[str] = None,
                 y_position_var: Optional[str] = None):
        if allow_expansion is not None:
            pulumi.set(__self__, "allow_expansion", allow_expansion)
        if allow_expansion_var is not None:
            pulumi.set(__self__, "allow_expansion_var", allow_expansion_var)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)
        if x_position is not None:
            pulumi.set(__self__, "x_position", x_position)
        if x_position_var is not None:
            pulumi.set(__self__, "x_position_var", x_position_var)
        if y_position is not None:
            pulumi.set(__self__, "y_position", y_position)
        if y_position_var is not None:
            pulumi.set(__self__, "y_position_var", y_position_var)

    @property
    @pulumi.getter(name="allowExpansion")
    def allow_expansion(self) -> Optional[str]:
        return pulumi.get(self, "allow_expansion")

    @allow_expansion.setter
    def allow_expansion(self, value: Optional[str]):
        pulumi.set(self, "allow_expansion", value)

    @property
    @pulumi.getter(name="allowExpansionVar")
    def allow_expansion_var(self) -> Optional[str]:
        return pulumi.get(self, "allow_expansion_var")

    @allow_expansion_var.setter
    def allow_expansion_var(self, value: Optional[str]):
        pulumi.set(self, "allow_expansion_var", value)

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @gravity.setter
    def gravity(self, value: Optional[str]):
        pulumi.set(self, "gravity", value)

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @gravity_var.setter
    def gravity_var(self, value: Optional[str]):
        pulumi.set(self, "gravity_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[str]):
        pulumi.set(self, "width_var", value)

    @property
    @pulumi.getter(name="xPosition")
    def x_position(self) -> Optional[str]:
        return pulumi.get(self, "x_position")

    @x_position.setter
    def x_position(self, value: Optional[str]):
        pulumi.set(self, "x_position", value)

    @property
    @pulumi.getter(name="xPositionVar")
    def x_position_var(self) -> Optional[str]:
        return pulumi.get(self, "x_position_var")

    @x_position_var.setter
    def x_position_var(self, value: Optional[str]):
        pulumi.set(self, "x_position_var", value)

    @property
    @pulumi.getter(name="yPosition")
    def y_position(self) -> Optional[str]:
        return pulumi.get(self, "y_position")

    @y_position.setter
    def y_position(self, value: Optional[str]):
        pulumi.set(self, "y_position", value)

    @property
    @pulumi.getter(name="yPositionVar")
    def y_position_var(self) -> Optional[str]:
        return pulumi.get(self, "y_position_var")

    @y_position_var.setter
    def y_position_var(self, value: Optional[str]):
        pulumi.set(self, "y_position_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationFaceCropArgs:
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 algorithm_var: Optional[str] = None,
                 confidence: Optional[str] = None,
                 confidence_var: Optional[str] = None,
                 fail_gravity: Optional[str] = None,
                 fail_gravity_var: Optional[str] = None,
                 focus: Optional[str] = None,
                 focus_var: Optional[str] = None,
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 padding: Optional[str] = None,
                 padding_var: Optional[str] = None,
                 style: Optional[str] = None,
                 style_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if algorithm_var is not None:
            pulumi.set(__self__, "algorithm_var", algorithm_var)
        if confidence is not None:
            pulumi.set(__self__, "confidence", confidence)
        if confidence_var is not None:
            pulumi.set(__self__, "confidence_var", confidence_var)
        if fail_gravity is not None:
            pulumi.set(__self__, "fail_gravity", fail_gravity)
        if fail_gravity_var is not None:
            pulumi.set(__self__, "fail_gravity_var", fail_gravity_var)
        if focus is not None:
            pulumi.set(__self__, "focus", focus)
        if focus_var is not None:
            pulumi.set(__self__, "focus_var", focus_var)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if padding is not None:
            pulumi.set(__self__, "padding", padding)
        if padding_var is not None:
            pulumi.set(__self__, "padding_var", padding_var)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if style_var is not None:
            pulumi.set(__self__, "style_var", style_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="algorithmVar")
    def algorithm_var(self) -> Optional[str]:
        return pulumi.get(self, "algorithm_var")

    @algorithm_var.setter
    def algorithm_var(self, value: Optional[str]):
        pulumi.set(self, "algorithm_var", value)

    @property
    @pulumi.getter
    def confidence(self) -> Optional[str]:
        return pulumi.get(self, "confidence")

    @confidence.setter
    def confidence(self, value: Optional[str]):
        pulumi.set(self, "confidence", value)

    @property
    @pulumi.getter(name="confidenceVar")
    def confidence_var(self) -> Optional[str]:
        return pulumi.get(self, "confidence_var")

    @confidence_var.setter
    def confidence_var(self, value: Optional[str]):
        pulumi.set(self, "confidence_var", value)

    @property
    @pulumi.getter(name="failGravity")
    def fail_gravity(self) -> Optional[str]:
        return pulumi.get(self, "fail_gravity")

    @fail_gravity.setter
    def fail_gravity(self, value: Optional[str]):
        pulumi.set(self, "fail_gravity", value)

    @property
    @pulumi.getter(name="failGravityVar")
    def fail_gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "fail_gravity_var")

    @fail_gravity_var.setter
    def fail_gravity_var(self, value: Optional[str]):
        pulumi.set(self, "fail_gravity_var", value)

    @property
    @pulumi.getter
    def focus(self) -> Optional[str]:
        return pulumi.get(self, "focus")

    @focus.setter
    def focus(self, value: Optional[str]):
        pulumi.set(self, "focus", value)

    @property
    @pulumi.getter(name="focusVar")
    def focus_var(self) -> Optional[str]:
        return pulumi.get(self, "focus_var")

    @focus_var.setter
    def focus_var(self, value: Optional[str]):
        pulumi.set(self, "focus_var", value)

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @gravity.setter
    def gravity(self, value: Optional[str]):
        pulumi.set(self, "gravity", value)

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @gravity_var.setter
    def gravity_var(self, value: Optional[str]):
        pulumi.set(self, "gravity_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def padding(self) -> Optional[str]:
        return pulumi.get(self, "padding")

    @padding.setter
    def padding(self, value: Optional[str]):
        pulumi.set(self, "padding", value)

    @property
    @pulumi.getter(name="paddingVar")
    def padding_var(self) -> Optional[str]:
        return pulumi.get(self, "padding_var")

    @padding_var.setter
    def padding_var(self, value: Optional[str]):
        pulumi.set(self, "padding_var", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[str]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter(name="styleVar")
    def style_var(self) -> Optional[str]:
        return pulumi.get(self, "style_var")

    @style_var.setter
    def style_var(self, value: Optional[str]):
        pulumi.set(self, "style_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[str]):
        pulumi.set(self, "width_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationFeatureCropArgs:
    def __init__(__self__, *,
                 fail_gravity: Optional[str] = None,
                 fail_gravity_var: Optional[str] = None,
                 feature_radius: Optional[str] = None,
                 feature_radius_var: Optional[str] = None,
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 max_features: Optional[str] = None,
                 max_features_var: Optional[str] = None,
                 min_feature_quality: Optional[str] = None,
                 min_feature_quality_var: Optional[str] = None,
                 padding: Optional[str] = None,
                 padding_var: Optional[str] = None,
                 style: Optional[str] = None,
                 style_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if fail_gravity is not None:
            pulumi.set(__self__, "fail_gravity", fail_gravity)
        if fail_gravity_var is not None:
            pulumi.set(__self__, "fail_gravity_var", fail_gravity_var)
        if feature_radius is not None:
            pulumi.set(__self__, "feature_radius", feature_radius)
        if feature_radius_var is not None:
            pulumi.set(__self__, "feature_radius_var", feature_radius_var)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if max_features is not None:
            pulumi.set(__self__, "max_features", max_features)
        if max_features_var is not None:
            pulumi.set(__self__, "max_features_var", max_features_var)
        if min_feature_quality is not None:
            pulumi.set(__self__, "min_feature_quality", min_feature_quality)
        if min_feature_quality_var is not None:
            pulumi.set(__self__, "min_feature_quality_var", min_feature_quality_var)
        if padding is not None:
            pulumi.set(__self__, "padding", padding)
        if padding_var is not None:
            pulumi.set(__self__, "padding_var", padding_var)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if style_var is not None:
            pulumi.set(__self__, "style_var", style_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter(name="failGravity")
    def fail_gravity(self) -> Optional[str]:
        return pulumi.get(self, "fail_gravity")

    @fail_gravity.setter
    def fail_gravity(self, value: Optional[str]):
        pulumi.set(self, "fail_gravity", value)

    @property
    @pulumi.getter(name="failGravityVar")
    def fail_gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "fail_gravity_var")

    @fail_gravity_var.setter
    def fail_gravity_var(self, value: Optional[str]):
        pulumi.set(self, "fail_gravity_var", value)

    @property
    @pulumi.getter(name="featureRadius")
    def feature_radius(self) -> Optional[str]:
        return pulumi.get(self, "feature_radius")

    @feature_radius.setter
    def feature_radius(self, value: Optional[str]):
        pulumi.set(self, "feature_radius", value)

    @property
    @pulumi.getter(name="featureRadiusVar")
    def feature_radius_var(self) -> Optional[str]:
        return pulumi.get(self, "feature_radius_var")

    @feature_radius_var.setter
    def feature_radius_var(self, value: Optional[str]):
        pulumi.set(self, "feature_radius_var", value)

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @gravity.setter
    def gravity(self, value: Optional[str]):
        pulumi.set(self, "gravity", value)

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @gravity_var.setter
    def gravity_var(self, value: Optional[str]):
        pulumi.set(self, "gravity_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter(name="maxFeatures")
    def max_features(self) -> Optional[str]:
        return pulumi.get(self, "max_features")

    @max_features.setter
    def max_features(self, value: Optional[str]):
        pulumi.set(self, "max_features", value)

    @property
    @pulumi.getter(name="maxFeaturesVar")
    def max_features_var(self) -> Optional[str]:
        return pulumi.get(self, "max_features_var")

    @max_features_var.setter
    def max_features_var(self, value: Optional[str]):
        pulumi.set(self, "max_features_var", value)

    @property
    @pulumi.getter(name="minFeatureQuality")
    def min_feature_quality(self) -> Optional[str]:
        return pulumi.get(self, "min_feature_quality")

    @min_feature_quality.setter
    def min_feature_quality(self, value: Optional[str]):
        pulumi.set(self, "min_feature_quality", value)

    @property
    @pulumi.getter(name="minFeatureQualityVar")
    def min_feature_quality_var(self) -> Optional[str]:
        return pulumi.get(self, "min_feature_quality_var")

    @min_feature_quality_var.setter
    def min_feature_quality_var(self, value: Optional[str]):
        pulumi.set(self, "min_feature_quality_var", value)

    @property
    @pulumi.getter
    def padding(self) -> Optional[str]:
        return pulumi.get(self, "padding")

    @padding.setter
    def padding(self, value: Optional[str]):
        pulumi.set(self, "padding", value)

    @property
    @pulumi.getter(name="paddingVar")
    def padding_var(self) -> Optional[str]:
        return pulumi.get(self, "padding_var")

    @padding_var.setter
    def padding_var(self, value: Optional[str]):
        pulumi.set(self, "padding_var", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[str]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter(name="styleVar")
    def style_var(self) -> Optional[str]:
        return pulumi.get(self, "style_var")

    @style_var.setter
    def style_var(self, value: Optional[str]):
        pulumi.set(self, "style_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[str]):
        pulumi.set(self, "width_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationFitAndFillArgs:
    def __init__(__self__, *,
                 fill_transformation: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if fill_transformation is not None:
            pulumi.set(__self__, "fill_transformation", fill_transformation)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter(name="fillTransformation")
    def fill_transformation(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "fill_transformation")

    @fill_transformation.setter
    def fill_transformation(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "fill_transformation", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[str]):
        pulumi.set(self, "width_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationGoopArgs:
    def __init__(__self__, *,
                 chaos: Optional[str] = None,
                 chaos_var: Optional[str] = None,
                 density: Optional[str] = None,
                 density_var: Optional[str] = None,
                 power: Optional[str] = None,
                 power_var: Optional[str] = None,
                 seed: Optional[str] = None,
                 seed_var: Optional[str] = None):
        if chaos is not None:
            pulumi.set(__self__, "chaos", chaos)
        if chaos_var is not None:
            pulumi.set(__self__, "chaos_var", chaos_var)
        if density is not None:
            pulumi.set(__self__, "density", density)
        if density_var is not None:
            pulumi.set(__self__, "density_var", density_var)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_var is not None:
            pulumi.set(__self__, "power_var", power_var)
        if seed is not None:
            pulumi.set(__self__, "seed", seed)
        if seed_var is not None:
            pulumi.set(__self__, "seed_var", seed_var)

    @property
    @pulumi.getter
    def chaos(self) -> Optional[str]:
        return pulumi.get(self, "chaos")

    @chaos.setter
    def chaos(self, value: Optional[str]):
        pulumi.set(self, "chaos", value)

    @property
    @pulumi.getter(name="chaosVar")
    def chaos_var(self) -> Optional[str]:
        return pulumi.get(self, "chaos_var")

    @chaos_var.setter
    def chaos_var(self, value: Optional[str]):
        pulumi.set(self, "chaos_var", value)

    @property
    @pulumi.getter
    def density(self) -> Optional[str]:
        return pulumi.get(self, "density")

    @density.setter
    def density(self, value: Optional[str]):
        pulumi.set(self, "density", value)

    @property
    @pulumi.getter(name="densityVar")
    def density_var(self) -> Optional[str]:
        return pulumi.get(self, "density_var")

    @density_var.setter
    def density_var(self, value: Optional[str]):
        pulumi.set(self, "density_var", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[str]:
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[str]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerVar")
    def power_var(self) -> Optional[str]:
        return pulumi.get(self, "power_var")

    @power_var.setter
    def power_var(self, value: Optional[str]):
        pulumi.set(self, "power_var", value)

    @property
    @pulumi.getter
    def seed(self) -> Optional[str]:
        return pulumi.get(self, "seed")

    @seed.setter
    def seed(self, value: Optional[str]):
        pulumi.set(self, "seed", value)

    @property
    @pulumi.getter(name="seedVar")
    def seed_var(self) -> Optional[str]:
        return pulumi.get(self, "seed_var")

    @seed_var.setter
    def seed_var(self, value: Optional[str]):
        pulumi.set(self, "seed_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationGrayscaleArgs:
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 type_var: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type_var is not None:
            pulumi.set(__self__, "type_var", type_var)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="typeVar")
    def type_var(self) -> Optional[str]:
        return pulumi.get(self, "type_var")

    @type_var.setter
    def type_var(self, value: Optional[str]):
        pulumi.set(self, "type_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationHslArgs:
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 lightness: Optional[str] = None,
                 lightness_var: Optional[str] = None,
                 saturation: Optional[str] = None,
                 saturation_var: Optional[str] = None):
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if lightness is not None:
            pulumi.set(__self__, "lightness", lightness)
        if lightness_var is not None:
            pulumi.set(__self__, "lightness_var", lightness_var)
        if saturation is not None:
            pulumi.set(__self__, "saturation", saturation)
        if saturation_var is not None:
            pulumi.set(__self__, "saturation_var", saturation_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @hue.setter
    def hue(self, value: Optional[str]):
        pulumi.set(self, "hue", value)

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @hue_var.setter
    def hue_var(self, value: Optional[str]):
        pulumi.set(self, "hue_var", value)

    @property
    @pulumi.getter
    def lightness(self) -> Optional[str]:
        return pulumi.get(self, "lightness")

    @lightness.setter
    def lightness(self, value: Optional[str]):
        pulumi.set(self, "lightness", value)

    @property
    @pulumi.getter(name="lightnessVar")
    def lightness_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_var")

    @lightness_var.setter
    def lightness_var(self, value: Optional[str]):
        pulumi.set(self, "lightness_var", value)

    @property
    @pulumi.getter
    def saturation(self) -> Optional[str]:
        return pulumi.get(self, "saturation")

    @saturation.setter
    def saturation(self, value: Optional[str]):
        pulumi.set(self, "saturation", value)

    @property
    @pulumi.getter(name="saturationVar")
    def saturation_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_var")

    @saturation_var.setter
    def saturation_var(self, value: Optional[str]):
        pulumi.set(self, "saturation_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationHsvArgs:
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 saturation: Optional[str] = None,
                 saturation_var: Optional[str] = None,
                 value: Optional[str] = None,
                 value_var: Optional[str] = None):
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if saturation is not None:
            pulumi.set(__self__, "saturation", saturation)
        if saturation_var is not None:
            pulumi.set(__self__, "saturation_var", saturation_var)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_var is not None:
            pulumi.set(__self__, "value_var", value_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @hue.setter
    def hue(self, value: Optional[str]):
        pulumi.set(self, "hue", value)

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @hue_var.setter
    def hue_var(self, value: Optional[str]):
        pulumi.set(self, "hue_var", value)

    @property
    @pulumi.getter
    def saturation(self) -> Optional[str]:
        return pulumi.get(self, "saturation")

    @saturation.setter
    def saturation(self, value: Optional[str]):
        pulumi.set(self, "saturation", value)

    @property
    @pulumi.getter(name="saturationVar")
    def saturation_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_var")

    @saturation_var.setter
    def saturation_var(self, value: Optional[str]):
        pulumi.set(self, "saturation_var", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueVar")
    def value_var(self) -> Optional[str]:
        return pulumi.get(self, "value_var")

    @value_var.setter
    def value_var(self, value: Optional[str]):
        pulumi.set(self, "value_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationIfDimensionArgs:
    def __init__(__self__, *,
                 default: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 dimension: Optional[str] = None,
                 dimension_var: Optional[str] = None,
                 equal: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 greater_than: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 less_than: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 value: Optional[str] = None,
                 value_var: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dimension is not None:
            pulumi.set(__self__, "dimension", dimension)
        if dimension_var is not None:
            pulumi.set(__self__, "dimension_var", dimension_var)
        if equal is not None:
            pulumi.set(__self__, "equal", equal)
        if greater_than is not None:
            pulumi.set(__self__, "greater_than", greater_than)
        if less_than is not None:
            pulumi.set(__self__, "less_than", less_than)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_var is not None:
            pulumi.set(__self__, "value_var", value_var)

    @property
    @pulumi.getter
    def default(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def dimension(self) -> Optional[str]:
        return pulumi.get(self, "dimension")

    @dimension.setter
    def dimension(self, value: Optional[str]):
        pulumi.set(self, "dimension", value)

    @property
    @pulumi.getter(name="dimensionVar")
    def dimension_var(self) -> Optional[str]:
        return pulumi.get(self, "dimension_var")

    @dimension_var.setter
    def dimension_var(self, value: Optional[str]):
        pulumi.set(self, "dimension_var", value)

    @property
    @pulumi.getter
    def equal(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "equal")

    @equal.setter
    def equal(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "equal", value)

    @property
    @pulumi.getter(name="greaterThan")
    def greater_than(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "greater_than")

    @greater_than.setter
    def greater_than(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "greater_than", value)

    @property
    @pulumi.getter(name="lessThan")
    def less_than(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "less_than")

    @less_than.setter
    def less_than(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "less_than", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueVar")
    def value_var(self) -> Optional[str]:
        return pulumi.get(self, "value_var")

    @value_var.setter
    def value_var(self, value: Optional[str]):
        pulumi.set(self, "value_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationIfOrientationArgs:
    def __init__(__self__, *,
                 default: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 landscape: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 portrait: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None,
                 square: Optional['GetImagingPolicyImagePolicyTransformationArgs'] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if landscape is not None:
            pulumi.set(__self__, "landscape", landscape)
        if portrait is not None:
            pulumi.set(__self__, "portrait", portrait)
        if square is not None:
            pulumi.set(__self__, "square", square)

    @property
    @pulumi.getter
    def default(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def landscape(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "landscape")

    @landscape.setter
    def landscape(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "landscape", value)

    @property
    @pulumi.getter
    def portrait(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "portrait")

    @portrait.setter
    def portrait(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "portrait", value)

    @property
    @pulumi.getter
    def square(self) -> Optional['GetImagingPolicyImagePolicyTransformationArgs']:
        return pulumi.get(self, "square")

    @square.setter
    def square(self, value: Optional['GetImagingPolicyImagePolicyTransformationArgs']):
        pulumi.set(self, "square", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationImQueryArgs:
    def __init__(__self__, *,
                 allowed_transformations: Sequence[str],
                 query_var: str):
        pulumi.set(__self__, "allowed_transformations", allowed_transformations)
        pulumi.set(__self__, "query_var", query_var)

    @property
    @pulumi.getter(name="allowedTransformations")
    def allowed_transformations(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_transformations")

    @allowed_transformations.setter
    def allowed_transformations(self, value: Sequence[str]):
        pulumi.set(self, "allowed_transformations", value)

    @property
    @pulumi.getter(name="queryVar")
    def query_var(self) -> str:
        return pulumi.get(self, "query_var")

    @query_var.setter
    def query_var(self, value: str):
        pulumi.set(self, "query_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationMaxColorArgs:
    def __init__(__self__, *,
                 colors: Optional[str] = None,
                 colors_var: Optional[str] = None):
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if colors_var is not None:
            pulumi.set(__self__, "colors_var", colors_var)

    @property
    @pulumi.getter
    def colors(self) -> Optional[str]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[str]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="colorsVar")
    def colors_var(self) -> Optional[str]:
        return pulumi.get(self, "colors_var")

    @colors_var.setter
    def colors_var(self, value: Optional[str]):
        pulumi.set(self, "colors_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationMirrorArgs:
    def __init__(__self__, *,
                 horizontal: Optional[str] = None,
                 horizontal_var: Optional[str] = None,
                 vertical: Optional[str] = None,
                 vertical_var: Optional[str] = None):
        if horizontal is not None:
            pulumi.set(__self__, "horizontal", horizontal)
        if horizontal_var is not None:
            pulumi.set(__self__, "horizontal_var", horizontal_var)
        if vertical is not None:
            pulumi.set(__self__, "vertical", vertical)
        if vertical_var is not None:
            pulumi.set(__self__, "vertical_var", vertical_var)

    @property
    @pulumi.getter
    def horizontal(self) -> Optional[str]:
        return pulumi.get(self, "horizontal")

    @horizontal.setter
    def horizontal(self, value: Optional[str]):
        pulumi.set(self, "horizontal", value)

    @property
    @pulumi.getter(name="horizontalVar")
    def horizontal_var(self) -> Optional[str]:
        return pulumi.get(self, "horizontal_var")

    @horizontal_var.setter
    def horizontal_var(self, value: Optional[str]):
        pulumi.set(self, "horizontal_var", value)

    @property
    @pulumi.getter
    def vertical(self) -> Optional[str]:
        return pulumi.get(self, "vertical")

    @vertical.setter
    def vertical(self, value: Optional[str]):
        pulumi.set(self, "vertical", value)

    @property
    @pulumi.getter(name="verticalVar")
    def vertical_var(self) -> Optional[str]:
        return pulumi.get(self, "vertical_var")

    @vertical_var.setter
    def vertical_var(self, value: Optional[str]):
        pulumi.set(self, "vertical_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationMonoHueArgs:
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None):
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @hue.setter
    def hue(self, value: Optional[str]):
        pulumi.set(self, "hue", value)

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @hue_var.setter
    def hue_var(self, value: Optional[str]):
        pulumi.set(self, "hue_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationOpacityArgs:
    def __init__(__self__, *,
                 opacity: Optional[str] = None,
                 opacity_var: Optional[str] = None):
        if opacity is not None:
            pulumi.set(__self__, "opacity", opacity)
        if opacity_var is not None:
            pulumi.set(__self__, "opacity_var", opacity_var)

    @property
    @pulumi.getter
    def opacity(self) -> Optional[str]:
        return pulumi.get(self, "opacity")

    @opacity.setter
    def opacity(self, value: Optional[str]):
        pulumi.set(self, "opacity", value)

    @property
    @pulumi.getter(name="opacityVar")
    def opacity_var(self) -> Optional[str]:
        return pulumi.get(self, "opacity_var")

    @opacity_var.setter
    def opacity_var(self, value: Optional[str]):
        pulumi.set(self, "opacity_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs:
    def __init__(__self__, *,
                 region_of_interest: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs',
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 style: Optional[str] = None,
                 style_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        pulumi.set(__self__, "region_of_interest", region_of_interest)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if style_var is not None:
            pulumi.set(__self__, "style_var", style_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter(name="regionOfInterest")
    def region_of_interest(self) -> 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs':
        return pulumi.get(self, "region_of_interest")

    @region_of_interest.setter
    def region_of_interest(self, value: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs'):
        pulumi.set(self, "region_of_interest", value)

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @gravity.setter
    def gravity(self, value: Optional[str]):
        pulumi.set(self, "gravity", value)

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @gravity_var.setter
    def gravity_var(self, value: Optional[str]):
        pulumi.set(self, "gravity_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[str]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter(name="styleVar")
    def style_var(self) -> Optional[str]:
        return pulumi.get(self, "style_var")

    @style_var.setter
    def style_var(self, value: Optional[str]):
        pulumi.set(self, "style_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[str]):
        pulumi.set(self, "width_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs:
    def __init__(__self__, *,
                 circle_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs']] = None,
                 point_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs']] = None,
                 polygon_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs']] = None,
                 rectangle_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs']] = None,
                 union_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs']] = None):
        if circle_shapes is not None:
            pulumi.set(__self__, "circle_shapes", circle_shapes)
        if point_shapes is not None:
            pulumi.set(__self__, "point_shapes", point_shapes)
        if polygon_shapes is not None:
            pulumi.set(__self__, "polygon_shapes", polygon_shapes)
        if rectangle_shapes is not None:
            pulumi.set(__self__, "rectangle_shapes", rectangle_shapes)
        if union_shapes is not None:
            pulumi.set(__self__, "union_shapes", union_shapes)

    @property
    @pulumi.getter(name="circleShapes")
    def circle_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs']]:
        return pulumi.get(self, "circle_shapes")

    @circle_shapes.setter
    def circle_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs']]):
        pulumi.set(self, "circle_shapes", value)

    @property
    @pulumi.getter(name="pointShapes")
    def point_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs']]:
        return pulumi.get(self, "point_shapes")

    @point_shapes.setter
    def point_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs']]):
        pulumi.set(self, "point_shapes", value)

    @property
    @pulumi.getter(name="polygonShapes")
    def polygon_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs']]:
        return pulumi.get(self, "polygon_shapes")

    @polygon_shapes.setter
    def polygon_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs']]):
        pulumi.set(self, "polygon_shapes", value)

    @property
    @pulumi.getter(name="rectangleShapes")
    def rectangle_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs']]:
        return pulumi.get(self, "rectangle_shapes")

    @rectangle_shapes.setter
    def rectangle_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs']]):
        pulumi.set(self, "rectangle_shapes", value)

    @property
    @pulumi.getter(name="unionShapes")
    def union_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs']]:
        return pulumi.get(self, "union_shapes")

    @union_shapes.setter
    def union_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs']]):
        pulumi.set(self, "union_shapes", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs:
    def __init__(__self__, *,
                 center: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterArgs',
                 radius: Optional[str] = None,
                 radius_var: Optional[str] = None):
        pulumi.set(__self__, "center", center)
        if radius is not None:
            pulumi.set(__self__, "radius", radius)
        if radius_var is not None:
            pulumi.set(__self__, "radius_var", radius_var)

    @property
    @pulumi.getter
    def center(self) -> 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterArgs':
        return pulumi.get(self, "center")

    @center.setter
    def center(self, value: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterArgs'):
        pulumi.set(self, "center", value)

    @property
    @pulumi.getter
    def radius(self) -> Optional[str]:
        return pulumi.get(self, "radius")

    @radius.setter
    def radius(self, value: Optional[str]):
        pulumi.set(self, "radius", value)

    @property
    @pulumi.getter(name="radiusVar")
    def radius_var(self) -> Optional[str]:
        return pulumi.get(self, "radius_var")

    @radius_var.setter
    def radius_var(self, value: Optional[str]):
        pulumi.set(self, "radius_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterArgs:
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[str]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @x_var.setter
    def x_var(self, value: Optional[str]):
        pulumi.set(self, "x_var", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[str]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")

    @y_var.setter
    def y_var(self, value: Optional[str]):
        pulumi.set(self, "y_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs:
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[str]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @x_var.setter
    def x_var(self, value: Optional[str]):
        pulumi.set(self, "x_var", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[str]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")

    @y_var.setter
    def y_var(self, value: Optional[str]):
        pulumi.set(self, "y_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs:
    def __init__(__self__, *,
                 points: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointArgs']):
        pulumi.set(__self__, "points", points)

    @property
    @pulumi.getter
    def points(self) -> Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointArgs']:
        return pulumi.get(self, "points")

    @points.setter
    def points(self, value: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointArgs']):
        pulumi.set(self, "points", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointArgs:
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[str]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @x_var.setter
    def x_var(self, value: Optional[str]):
        pulumi.set(self, "x_var", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[str]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")

    @y_var.setter
    def y_var(self, value: Optional[str]):
        pulumi.set(self, "y_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs:
    def __init__(__self__, *,
                 anchor: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorArgs',
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        pulumi.set(__self__, "anchor", anchor)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def anchor(self) -> 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorArgs':
        return pulumi.get(self, "anchor")

    @anchor.setter
    def anchor(self, value: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorArgs'):
        pulumi.set(self, "anchor", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[str]):
        pulumi.set(self, "width_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorArgs:
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[str]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @x_var.setter
    def x_var(self, value: Optional[str]):
        pulumi.set(self, "x_var", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[str]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")

    @y_var.setter
    def y_var(self, value: Optional[str]):
        pulumi.set(self, "y_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs:
    def __init__(__self__, *,
                 shapes: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeArgs']):
        pulumi.set(__self__, "shapes", shapes)

    @property
    @pulumi.getter
    def shapes(self) -> Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeArgs']:
        return pulumi.get(self, "shapes")

    @shapes.setter
    def shapes(self, value: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeArgs']):
        pulumi.set(self, "shapes", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeArgs:
    def __init__(__self__, *,
                 circle_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeArgs']] = None,
                 point_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeArgs']] = None,
                 polygon_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeArgs']] = None,
                 rectangle_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeArgs']] = None,
                 union_shapes: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeArgs']] = None):
        if circle_shapes is not None:
            pulumi.set(__self__, "circle_shapes", circle_shapes)
        if point_shapes is not None:
            pulumi.set(__self__, "point_shapes", point_shapes)
        if polygon_shapes is not None:
            pulumi.set(__self__, "polygon_shapes", polygon_shapes)
        if rectangle_shapes is not None:
            pulumi.set(__self__, "rectangle_shapes", rectangle_shapes)
        if union_shapes is not None:
            pulumi.set(__self__, "union_shapes", union_shapes)

    @property
    @pulumi.getter(name="circleShapes")
    def circle_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeArgs']]:
        return pulumi.get(self, "circle_shapes")

    @circle_shapes.setter
    def circle_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeArgs']]):
        pulumi.set(self, "circle_shapes", value)

    @property
    @pulumi.getter(name="pointShapes")
    def point_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeArgs']]:
        return pulumi.get(self, "point_shapes")

    @point_shapes.setter
    def point_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeArgs']]):
        pulumi.set(self, "point_shapes", value)

    @property
    @pulumi.getter(name="polygonShapes")
    def polygon_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeArgs']]:
        return pulumi.get(self, "polygon_shapes")

    @polygon_shapes.setter
    def polygon_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeArgs']]):
        pulumi.set(self, "polygon_shapes", value)

    @property
    @pulumi.getter(name="rectangleShapes")
    def rectangle_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeArgs']]:
        return pulumi.get(self, "rectangle_shapes")

    @rectangle_shapes.setter
    def rectangle_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeArgs']]):
        pulumi.set(self, "rectangle_shapes", value)

    @property
    @pulumi.getter(name="unionShapes")
    def union_shapes(self) -> Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeArgs']]:
        return pulumi.get(self, "union_shapes")

    @union_shapes.setter
    def union_shapes(self, value: Optional[Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeArgs']]):
        pulumi.set(self, "union_shapes", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeArgs:
    def __init__(__self__, *,
                 center: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterArgs',
                 radius: Optional[str] = None,
                 radius_var: Optional[str] = None):
        pulumi.set(__self__, "center", center)
        if radius is not None:
            pulumi.set(__self__, "radius", radius)
        if radius_var is not None:
            pulumi.set(__self__, "radius_var", radius_var)

    @property
    @pulumi.getter
    def center(self) -> 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterArgs':
        return pulumi.get(self, "center")

    @center.setter
    def center(self, value: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterArgs'):
        pulumi.set(self, "center", value)

    @property
    @pulumi.getter
    def radius(self) -> Optional[str]:
        return pulumi.get(self, "radius")

    @radius.setter
    def radius(self, value: Optional[str]):
        pulumi.set(self, "radius", value)

    @property
    @pulumi.getter(name="radiusVar")
    def radius_var(self) -> Optional[str]:
        return pulumi.get(self, "radius_var")

    @radius_var.setter
    def radius_var(self, value: Optional[str]):
        pulumi.set(self, "radius_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterArgs:
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[str]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @x_var.setter
    def x_var(self, value: Optional[str]):
        pulumi.set(self, "x_var", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[str]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")

    @y_var.setter
    def y_var(self, value: Optional[str]):
        pulumi.set(self, "y_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeArgs:
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[str]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @x_var.setter
    def x_var(self, value: Optional[str]):
        pulumi.set(self, "x_var", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[str]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")

    @y_var.setter
    def y_var(self, value: Optional[str]):
        pulumi.set(self, "y_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeArgs:
    def __init__(__self__, *,
                 points: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointArgs']):
        pulumi.set(__self__, "points", points)

    @property
    @pulumi.getter
    def points(self) -> Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointArgs']:
        return pulumi.get(self, "points")

    @points.setter
    def points(self, value: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointArgs']):
        pulumi.set(self, "points", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointArgs:
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[str]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @x_var.setter
    def x_var(self, value: Optional[str]):
        pulumi.set(self, "x_var", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[str]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")

    @y_var.setter
    def y_var(self, value: Optional[str]):
        pulumi.set(self, "y_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeArgs:
    def __init__(__self__, *,
                 anchor: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorArgs',
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        pulumi.set(__self__, "anchor", anchor)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def anchor(self) -> 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorArgs':
        return pulumi.get(self, "anchor")

    @anchor.setter
    def anchor(self, value: 'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorArgs'):
        pulumi.set(self, "anchor", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[str]):
        pulumi.set(self, "width_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorArgs:
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[str]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @x_var.setter
    def x_var(self, value: Optional[str]):
        pulumi.set(self, "x_var", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[str]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")

    @y_var.setter
    def y_var(self, value: Optional[str]):
        pulumi.set(self, "y_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeArgs:
    def __init__(__self__, *,
                 shapes: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeArgs']):
        pulumi.set(__self__, "shapes", shapes)

    @property
    @pulumi.getter
    def shapes(self) -> Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeArgs']:
        return pulumi.get(self, "shapes")

    @shapes.setter
    def shapes(self, value: Sequence['GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeArgs']):
        pulumi.set(self, "shapes", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRelativeCropArgs:
    def __init__(__self__, *,
                 east: Optional[str] = None,
                 east_var: Optional[str] = None,
                 north: Optional[str] = None,
                 north_var: Optional[str] = None,
                 south: Optional[str] = None,
                 south_var: Optional[str] = None,
                 west: Optional[str] = None,
                 west_var: Optional[str] = None):
        if east is not None:
            pulumi.set(__self__, "east", east)
        if east_var is not None:
            pulumi.set(__self__, "east_var", east_var)
        if north is not None:
            pulumi.set(__self__, "north", north)
        if north_var is not None:
            pulumi.set(__self__, "north_var", north_var)
        if south is not None:
            pulumi.set(__self__, "south", south)
        if south_var is not None:
            pulumi.set(__self__, "south_var", south_var)
        if west is not None:
            pulumi.set(__self__, "west", west)
        if west_var is not None:
            pulumi.set(__self__, "west_var", west_var)

    @property
    @pulumi.getter
    def east(self) -> Optional[str]:
        return pulumi.get(self, "east")

    @east.setter
    def east(self, value: Optional[str]):
        pulumi.set(self, "east", value)

    @property
    @pulumi.getter(name="eastVar")
    def east_var(self) -> Optional[str]:
        return pulumi.get(self, "east_var")

    @east_var.setter
    def east_var(self, value: Optional[str]):
        pulumi.set(self, "east_var", value)

    @property
    @pulumi.getter
    def north(self) -> Optional[str]:
        return pulumi.get(self, "north")

    @north.setter
    def north(self, value: Optional[str]):
        pulumi.set(self, "north", value)

    @property
    @pulumi.getter(name="northVar")
    def north_var(self) -> Optional[str]:
        return pulumi.get(self, "north_var")

    @north_var.setter
    def north_var(self, value: Optional[str]):
        pulumi.set(self, "north_var", value)

    @property
    @pulumi.getter
    def south(self) -> Optional[str]:
        return pulumi.get(self, "south")

    @south.setter
    def south(self, value: Optional[str]):
        pulumi.set(self, "south", value)

    @property
    @pulumi.getter(name="southVar")
    def south_var(self) -> Optional[str]:
        return pulumi.get(self, "south_var")

    @south_var.setter
    def south_var(self, value: Optional[str]):
        pulumi.set(self, "south_var", value)

    @property
    @pulumi.getter
    def west(self) -> Optional[str]:
        return pulumi.get(self, "west")

    @west.setter
    def west(self, value: Optional[str]):
        pulumi.set(self, "west", value)

    @property
    @pulumi.getter(name="westVar")
    def west_var(self) -> Optional[str]:
        return pulumi.get(self, "west_var")

    @west_var.setter
    def west_var(self, value: Optional[str]):
        pulumi.set(self, "west_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRemoveColorArgs:
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 feather: Optional[str] = None,
                 feather_var: Optional[str] = None,
                 tolerance: Optional[str] = None,
                 tolerance_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if feather is not None:
            pulumi.set(__self__, "feather", feather)
        if feather_var is not None:
            pulumi.set(__self__, "feather_var", feather_var)
        if tolerance is not None:
            pulumi.set(__self__, "tolerance", tolerance)
        if tolerance_var is not None:
            pulumi.set(__self__, "tolerance_var", tolerance_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @color_var.setter
    def color_var(self, value: Optional[str]):
        pulumi.set(self, "color_var", value)

    @property
    @pulumi.getter
    def feather(self) -> Optional[str]:
        return pulumi.get(self, "feather")

    @feather.setter
    def feather(self, value: Optional[str]):
        pulumi.set(self, "feather", value)

    @property
    @pulumi.getter(name="featherVar")
    def feather_var(self) -> Optional[str]:
        return pulumi.get(self, "feather_var")

    @feather_var.setter
    def feather_var(self, value: Optional[str]):
        pulumi.set(self, "feather_var", value)

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[str]:
        return pulumi.get(self, "tolerance")

    @tolerance.setter
    def tolerance(self, value: Optional[str]):
        pulumi.set(self, "tolerance", value)

    @property
    @pulumi.getter(name="toleranceVar")
    def tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "tolerance_var")

    @tolerance_var.setter
    def tolerance_var(self, value: Optional[str]):
        pulumi.set(self, "tolerance_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationResizeArgs:
    def __init__(__self__, *,
                 aspect: Optional[str] = None,
                 aspect_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 type: Optional[str] = None,
                 type_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if aspect is not None:
            pulumi.set(__self__, "aspect", aspect)
        if aspect_var is not None:
            pulumi.set(__self__, "aspect_var", aspect_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type_var is not None:
            pulumi.set(__self__, "type_var", type_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def aspect(self) -> Optional[str]:
        return pulumi.get(self, "aspect")

    @aspect.setter
    def aspect(self, value: Optional[str]):
        pulumi.set(self, "aspect", value)

    @property
    @pulumi.getter(name="aspectVar")
    def aspect_var(self) -> Optional[str]:
        return pulumi.get(self, "aspect_var")

    @aspect_var.setter
    def aspect_var(self, value: Optional[str]):
        pulumi.set(self, "aspect_var", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="typeVar")
    def type_var(self) -> Optional[str]:
        return pulumi.get(self, "type_var")

    @type_var.setter
    def type_var(self, value: Optional[str]):
        pulumi.set(self, "type_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[str]):
        pulumi.set(self, "width_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationRotateArgs:
    def __init__(__self__, *,
                 degrees: Optional[str] = None,
                 degrees_var: Optional[str] = None):
        if degrees is not None:
            pulumi.set(__self__, "degrees", degrees)
        if degrees_var is not None:
            pulumi.set(__self__, "degrees_var", degrees_var)

    @property
    @pulumi.getter
    def degrees(self) -> Optional[str]:
        return pulumi.get(self, "degrees")

    @degrees.setter
    def degrees(self, value: Optional[str]):
        pulumi.set(self, "degrees", value)

    @property
    @pulumi.getter(name="degreesVar")
    def degrees_var(self) -> Optional[str]:
        return pulumi.get(self, "degrees_var")

    @degrees_var.setter
    def degrees_var(self, value: Optional[str]):
        pulumi.set(self, "degrees_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationScaleArgs:
    def __init__(__self__, *,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @height_var.setter
    def height_var(self, value: Optional[str]):
        pulumi.set(self, "height_var", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @width_var.setter
    def width_var(self, value: Optional[str]):
        pulumi.set(self, "width_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationShearsArgs:
    def __init__(__self__, *,
                 x_shear: Optional[str] = None,
                 x_shear_var: Optional[str] = None,
                 y_shear: Optional[str] = None,
                 y_shear_var: Optional[str] = None):
        if x_shear is not None:
            pulumi.set(__self__, "x_shear", x_shear)
        if x_shear_var is not None:
            pulumi.set(__self__, "x_shear_var", x_shear_var)
        if y_shear is not None:
            pulumi.set(__self__, "y_shear", y_shear)
        if y_shear_var is not None:
            pulumi.set(__self__, "y_shear_var", y_shear_var)

    @property
    @pulumi.getter(name="xShear")
    def x_shear(self) -> Optional[str]:
        return pulumi.get(self, "x_shear")

    @x_shear.setter
    def x_shear(self, value: Optional[str]):
        pulumi.set(self, "x_shear", value)

    @property
    @pulumi.getter(name="xShearVar")
    def x_shear_var(self) -> Optional[str]:
        return pulumi.get(self, "x_shear_var")

    @x_shear_var.setter
    def x_shear_var(self, value: Optional[str]):
        pulumi.set(self, "x_shear_var", value)

    @property
    @pulumi.getter(name="yShear")
    def y_shear(self) -> Optional[str]:
        return pulumi.get(self, "y_shear")

    @y_shear.setter
    def y_shear(self, value: Optional[str]):
        pulumi.set(self, "y_shear", value)

    @property
    @pulumi.getter(name="yShearVar")
    def y_shear_var(self) -> Optional[str]:
        return pulumi.get(self, "y_shear_var")

    @y_shear_var.setter
    def y_shear_var(self, value: Optional[str]):
        pulumi.set(self, "y_shear_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationTrimArgs:
    def __init__(__self__, *,
                 fuzz: Optional[str] = None,
                 fuzz_var: Optional[str] = None,
                 padding: Optional[str] = None,
                 padding_var: Optional[str] = None):
        if fuzz is not None:
            pulumi.set(__self__, "fuzz", fuzz)
        if fuzz_var is not None:
            pulumi.set(__self__, "fuzz_var", fuzz_var)
        if padding is not None:
            pulumi.set(__self__, "padding", padding)
        if padding_var is not None:
            pulumi.set(__self__, "padding_var", padding_var)

    @property
    @pulumi.getter
    def fuzz(self) -> Optional[str]:
        return pulumi.get(self, "fuzz")

    @fuzz.setter
    def fuzz(self, value: Optional[str]):
        pulumi.set(self, "fuzz", value)

    @property
    @pulumi.getter(name="fuzzVar")
    def fuzz_var(self) -> Optional[str]:
        return pulumi.get(self, "fuzz_var")

    @fuzz_var.setter
    def fuzz_var(self, value: Optional[str]):
        pulumi.set(self, "fuzz_var", value)

    @property
    @pulumi.getter
    def padding(self) -> Optional[str]:
        return pulumi.get(self, "padding")

    @padding.setter
    def padding(self, value: Optional[str]):
        pulumi.set(self, "padding", value)

    @property
    @pulumi.getter(name="paddingVar")
    def padding_var(self) -> Optional[str]:
        return pulumi.get(self, "padding_var")

    @padding_var.setter
    def padding_var(self, value: Optional[str]):
        pulumi.set(self, "padding_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs:
    def __init__(__self__, *,
                 gain: Optional[str] = None,
                 gain_var: Optional[str] = None,
                 sigma: Optional[str] = None,
                 sigma_var: Optional[str] = None,
                 threshold: Optional[str] = None,
                 threshold_var: Optional[str] = None):
        if gain is not None:
            pulumi.set(__self__, "gain", gain)
        if gain_var is not None:
            pulumi.set(__self__, "gain_var", gain_var)
        if sigma is not None:
            pulumi.set(__self__, "sigma", sigma)
        if sigma_var is not None:
            pulumi.set(__self__, "sigma_var", sigma_var)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_var is not None:
            pulumi.set(__self__, "threshold_var", threshold_var)

    @property
    @pulumi.getter
    def gain(self) -> Optional[str]:
        return pulumi.get(self, "gain")

    @gain.setter
    def gain(self, value: Optional[str]):
        pulumi.set(self, "gain", value)

    @property
    @pulumi.getter(name="gainVar")
    def gain_var(self) -> Optional[str]:
        return pulumi.get(self, "gain_var")

    @gain_var.setter
    def gain_var(self, value: Optional[str]):
        pulumi.set(self, "gain_var", value)

    @property
    @pulumi.getter
    def sigma(self) -> Optional[str]:
        return pulumi.get(self, "sigma")

    @sigma.setter
    def sigma(self, value: Optional[str]):
        pulumi.set(self, "sigma", value)

    @property
    @pulumi.getter(name="sigmaVar")
    def sigma_var(self) -> Optional[str]:
        return pulumi.get(self, "sigma_var")

    @sigma_var.setter
    def sigma_var(self, value: Optional[str]):
        pulumi.set(self, "sigma_var", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[str]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[str]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter(name="thresholdVar")
    def threshold_var(self) -> Optional[str]:
        return pulumi.get(self, "threshold_var")

    @threshold_var.setter
    def threshold_var(self, value: Optional[str]):
        pulumi.set(self, "threshold_var", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyVariableArgs:
    def __init__(__self__, *,
                 default_value: str,
                 name: str,
                 type: str,
                 enum_options: Optional[Sequence['GetImagingPolicyImagePolicyVariableEnumOptionArgs']] = None,
                 postfix: Optional[str] = None,
                 prefix: Optional[str] = None):
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if enum_options is not None:
            pulumi.set(__self__, "enum_options", enum_options)
        if postfix is not None:
            pulumi.set(__self__, "postfix", postfix)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: str):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="enumOptions")
    def enum_options(self) -> Optional[Sequence['GetImagingPolicyImagePolicyVariableEnumOptionArgs']]:
        return pulumi.get(self, "enum_options")

    @enum_options.setter
    def enum_options(self, value: Optional[Sequence['GetImagingPolicyImagePolicyVariableEnumOptionArgs']]):
        pulumi.set(self, "enum_options", value)

    @property
    @pulumi.getter
    def postfix(self) -> Optional[str]:
        return pulumi.get(self, "postfix")

    @postfix.setter
    def postfix(self, value: Optional[str]):
        pulumi.set(self, "postfix", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[str]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class GetImagingPolicyImagePolicyVariableEnumOptionArgs:
    def __init__(__self__, *,
                 id: str,
                 value: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetImagingPolicyVideoPolicyArgs:
    def __init__(__self__, *,
                 breakpoints: Optional['GetImagingPolicyVideoPolicyBreakpointsArgs'] = None,
                 hosts: Optional[Sequence[str]] = None,
                 output: Optional['GetImagingPolicyVideoPolicyOutputArgs'] = None,
                 rollout_duration: Optional[str] = None,
                 variables: Optional[Sequence['GetImagingPolicyVideoPolicyVariableArgs']] = None):
        if breakpoints is not None:
            pulumi.set(__self__, "breakpoints", breakpoints)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if rollout_duration is not None:
            pulumi.set(__self__, "rollout_duration", rollout_duration)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def breakpoints(self) -> Optional['GetImagingPolicyVideoPolicyBreakpointsArgs']:
        return pulumi.get(self, "breakpoints")

    @breakpoints.setter
    def breakpoints(self, value: Optional['GetImagingPolicyVideoPolicyBreakpointsArgs']):
        pulumi.set(self, "breakpoints", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def output(self) -> Optional['GetImagingPolicyVideoPolicyOutputArgs']:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional['GetImagingPolicyVideoPolicyOutputArgs']):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="rolloutDuration")
    def rollout_duration(self) -> Optional[str]:
        return pulumi.get(self, "rollout_duration")

    @rollout_duration.setter
    def rollout_duration(self, value: Optional[str]):
        pulumi.set(self, "rollout_duration", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetImagingPolicyVideoPolicyVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetImagingPolicyVideoPolicyVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetImagingPolicyVideoPolicyBreakpointsArgs:
    def __init__(__self__, *,
                 widths: Optional[Sequence[int]] = None):
        if widths is not None:
            pulumi.set(__self__, "widths", widths)

    @property
    @pulumi.getter
    def widths(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "widths")

    @widths.setter
    def widths(self, value: Optional[Sequence[int]]):
        pulumi.set(self, "widths", value)


@pulumi.input_type
class GetImagingPolicyVideoPolicyOutputArgs:
    def __init__(__self__, *,
                 perceptual_quality: Optional[str] = None,
                 perceptual_quality_var: Optional[str] = None,
                 placeholder_video_url: Optional[str] = None,
                 placeholder_video_url_var: Optional[str] = None,
                 video_adaptive_quality: Optional[str] = None,
                 video_adaptive_quality_var: Optional[str] = None):
        if perceptual_quality is not None:
            pulumi.set(__self__, "perceptual_quality", perceptual_quality)
        if perceptual_quality_var is not None:
            pulumi.set(__self__, "perceptual_quality_var", perceptual_quality_var)
        if placeholder_video_url is not None:
            pulumi.set(__self__, "placeholder_video_url", placeholder_video_url)
        if placeholder_video_url_var is not None:
            pulumi.set(__self__, "placeholder_video_url_var", placeholder_video_url_var)
        if video_adaptive_quality is not None:
            pulumi.set(__self__, "video_adaptive_quality", video_adaptive_quality)
        if video_adaptive_quality_var is not None:
            pulumi.set(__self__, "video_adaptive_quality_var", video_adaptive_quality_var)

    @property
    @pulumi.getter(name="perceptualQuality")
    def perceptual_quality(self) -> Optional[str]:
        return pulumi.get(self, "perceptual_quality")

    @perceptual_quality.setter
    def perceptual_quality(self, value: Optional[str]):
        pulumi.set(self, "perceptual_quality", value)

    @property
    @pulumi.getter(name="perceptualQualityVar")
    def perceptual_quality_var(self) -> Optional[str]:
        return pulumi.get(self, "perceptual_quality_var")

    @perceptual_quality_var.setter
    def perceptual_quality_var(self, value: Optional[str]):
        pulumi.set(self, "perceptual_quality_var", value)

    @property
    @pulumi.getter(name="placeholderVideoUrl")
    def placeholder_video_url(self) -> Optional[str]:
        return pulumi.get(self, "placeholder_video_url")

    @placeholder_video_url.setter
    def placeholder_video_url(self, value: Optional[str]):
        pulumi.set(self, "placeholder_video_url", value)

    @property
    @pulumi.getter(name="placeholderVideoUrlVar")
    def placeholder_video_url_var(self) -> Optional[str]:
        return pulumi.get(self, "placeholder_video_url_var")

    @placeholder_video_url_var.setter
    def placeholder_video_url_var(self, value: Optional[str]):
        pulumi.set(self, "placeholder_video_url_var", value)

    @property
    @pulumi.getter(name="videoAdaptiveQuality")
    def video_adaptive_quality(self) -> Optional[str]:
        return pulumi.get(self, "video_adaptive_quality")

    @video_adaptive_quality.setter
    def video_adaptive_quality(self, value: Optional[str]):
        pulumi.set(self, "video_adaptive_quality", value)

    @property
    @pulumi.getter(name="videoAdaptiveQualityVar")
    def video_adaptive_quality_var(self) -> Optional[str]:
        return pulumi.get(self, "video_adaptive_quality_var")

    @video_adaptive_quality_var.setter
    def video_adaptive_quality_var(self, value: Optional[str]):
        pulumi.set(self, "video_adaptive_quality_var", value)


@pulumi.input_type
class GetImagingPolicyVideoPolicyVariableArgs:
    def __init__(__self__, *,
                 default_value: str,
                 name: str,
                 type: str,
                 enum_options: Optional[Sequence['GetImagingPolicyVideoPolicyVariableEnumOptionArgs']] = None,
                 postfix: Optional[str] = None,
                 prefix: Optional[str] = None):
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if enum_options is not None:
            pulumi.set(__self__, "enum_options", enum_options)
        if postfix is not None:
            pulumi.set(__self__, "postfix", postfix)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: str):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="enumOptions")
    def enum_options(self) -> Optional[Sequence['GetImagingPolicyVideoPolicyVariableEnumOptionArgs']]:
        return pulumi.get(self, "enum_options")

    @enum_options.setter
    def enum_options(self, value: Optional[Sequence['GetImagingPolicyVideoPolicyVariableEnumOptionArgs']]):
        pulumi.set(self, "enum_options", value)

    @property
    @pulumi.getter
    def postfix(self) -> Optional[str]:
        return pulumi.get(self, "postfix")

    @postfix.setter
    def postfix(self, value: Optional[str]):
        pulumi.set(self, "postfix", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[str]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class GetImagingPolicyVideoPolicyVariableEnumOptionArgs:
    def __init__(__self__, *,
                 id: str,
                 value: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyIncludesParentPropertyArgs:
    def __init__(__self__, *,
                 id: str,
                 version: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: int):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105Args:
    def __init__(__self__, *,
                 name: str,
                 advanced_override: Optional[str] = None,
                 behaviors: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorArgs']] = None,
                 childrens: Optional[Sequence[str]] = None,
                 comments: Optional[str] = None,
                 criteria_locked: Optional[bool] = None,
                 criteria_must_satisfy: Optional[str] = None,
                 criterions: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105CriterionArgs']] = None,
                 custom_override: Optional['GetPropertyRulesBuilderRulesV20230105CustomOverrideArgs'] = None,
                 is_secure: Optional[bool] = None,
                 template_link: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variables: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105VariableArgs']] = None):
        pulumi.set(__self__, "name", name)
        if advanced_override is not None:
            pulumi.set(__self__, "advanced_override", advanced_override)
        if behaviors is not None:
            pulumi.set(__self__, "behaviors", behaviors)
        if childrens is not None:
            pulumi.set(__self__, "childrens", childrens)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if criteria_locked is not None:
            pulumi.set(__self__, "criteria_locked", criteria_locked)
        if criteria_must_satisfy is not None:
            pulumi.set(__self__, "criteria_must_satisfy", criteria_must_satisfy)
        if criterions is not None:
            pulumi.set(__self__, "criterions", criterions)
        if custom_override is not None:
            pulumi.set(__self__, "custom_override", custom_override)
        if is_secure is not None:
            pulumi.set(__self__, "is_secure", is_secure)
        if template_link is not None:
            pulumi.set(__self__, "template_link", template_link)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="advancedOverride")
    def advanced_override(self) -> Optional[str]:
        return pulumi.get(self, "advanced_override")

    @advanced_override.setter
    def advanced_override(self, value: Optional[str]):
        pulumi.set(self, "advanced_override", value)

    @property
    @pulumi.getter
    def behaviors(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorArgs']]:
        return pulumi.get(self, "behaviors")

    @behaviors.setter
    def behaviors(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorArgs']]):
        pulumi.set(self, "behaviors", value)

    @property
    @pulumi.getter
    def childrens(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "childrens")

    @childrens.setter
    def childrens(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "childrens", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[str]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="criteriaLocked")
    def criteria_locked(self) -> Optional[bool]:
        return pulumi.get(self, "criteria_locked")

    @criteria_locked.setter
    def criteria_locked(self, value: Optional[bool]):
        pulumi.set(self, "criteria_locked", value)

    @property
    @pulumi.getter(name="criteriaMustSatisfy")
    def criteria_must_satisfy(self) -> Optional[str]:
        return pulumi.get(self, "criteria_must_satisfy")

    @criteria_must_satisfy.setter
    def criteria_must_satisfy(self, value: Optional[str]):
        pulumi.set(self, "criteria_must_satisfy", value)

    @property
    @pulumi.getter
    def criterions(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230105CriterionArgs']]:
        return pulumi.get(self, "criterions")

    @criterions.setter
    def criterions(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105CriterionArgs']]):
        pulumi.set(self, "criterions", value)

    @property
    @pulumi.getter(name="customOverride")
    def custom_override(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CustomOverrideArgs']:
        return pulumi.get(self, "custom_override")

    @custom_override.setter
    def custom_override(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CustomOverrideArgs']):
        pulumi.set(self, "custom_override", value)

    @property
    @pulumi.getter(name="isSecure")
    def is_secure(self) -> Optional[bool]:
        return pulumi.get(self, "is_secure")

    @is_secure.setter
    def is_secure(self, value: Optional[bool]):
        pulumi.set(self, "is_secure", value)

    @property
    @pulumi.getter(name="templateLink")
    def template_link(self) -> Optional[str]:
        return pulumi.get(self, "template_link")

    @template_link.setter
    def template_link(self, value: Optional[str]):
        pulumi.set(self, "template_link", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230105VariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105VariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorArgs:
    def __init__(__self__, *,
                 ad_scaler_circuit_breaker: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAdScalerCircuitBreakerArgs'] = None,
                 adaptive_acceleration: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveAccelerationArgs'] = None,
                 adaptive_image_compression: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveImageCompressionArgs'] = None,
                 advanced: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAdvancedArgs'] = None,
                 aggregated_reporting: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAggregatedReportingArgs'] = None,
                 akamaizer: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerArgs'] = None,
                 akamaizer_tag: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagArgs'] = None,
                 all_http_in_cache_hierarchy: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllHttpInCacheHierarchyArgs'] = None,
                 allow_cloudlets_origins: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowCloudletsOriginsArgs'] = None,
                 allow_delete: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowDeleteArgs'] = None,
                 allow_https_cache_key_sharing: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsCacheKeySharingArgs'] = None,
                 allow_https_downgrade: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsDowngradeArgs'] = None,
                 allow_options: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowOptionsArgs'] = None,
                 allow_patch: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowPatchArgs'] = None,
                 allow_post: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowPostArgs'] = None,
                 allow_put: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowPutArgs'] = None,
                 allow_transfer_encoding: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowTransferEncodingArgs'] = None,
                 alt_svc_header: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAltSvcHeaderArgs'] = None,
                 api_prioritization: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationArgs'] = None,
                 application_load_balancer: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerArgs'] = None,
                 audience_segmentation: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationArgs'] = None,
                 auto_domain_validation: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAutoDomainValidationArgs'] = None,
                 base_directory: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorBaseDirectoryArgs'] = None,
                 boss_beaconing: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorBossBeaconingArgs'] = None,
                 breadcrumbs: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorBreadcrumbsArgs'] = None,
                 break_connection: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorBreakConnectionArgs'] = None,
                 brotli: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorBrotliArgs'] = None,
                 cache_error: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheErrorArgs'] = None,
                 cache_id: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheIdArgs'] = None,
                 cache_key_ignore_case: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyIgnoreCaseArgs'] = None,
                 cache_key_query_params: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyQueryParamsArgs'] = None,
                 cache_key_rewrite: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyRewriteArgs'] = None,
                 cache_post: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCachePostArgs'] = None,
                 cache_redirect: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheRedirectArgs'] = None,
                 cache_tag: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagArgs'] = None,
                 cache_tag_visible: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagVisibleArgs'] = None,
                 caching: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCachingArgs'] = None,
                 central_authorization: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCentralAuthorizationArgs'] = None,
                 chase_redirects: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorChaseRedirectsArgs'] = None,
                 client_characteristics: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorClientCharacteristicsArgs'] = None,
                 cloud_interconnects: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCloudInterconnectsArgs'] = None,
                 cloud_wrapper: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperArgs'] = None,
                 cloud_wrapper_advanced: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperAdvancedArgs'] = None,
                 conditional_origin: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorConditionalOriginArgs'] = None,
                 construct_response: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorConstructResponseArgs'] = None,
                 content_characteristics: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsArgs'] = None,
                 content_characteristics_amd: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsAmdArgs'] = None,
                 content_characteristics_dd: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsDdArgs'] = None,
                 content_characteristics_wsd_large_file: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLargeFileArgs'] = None,
                 content_characteristics_wsd_live: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLiveArgs'] = None,
                 content_characteristics_wsd_vod: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdVodArgs'] = None,
                 content_pre_position: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentPrePositionArgs'] = None,
                 content_targeting_protection: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentTargetingProtectionArgs'] = None,
                 cors_support: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCorsSupportArgs'] = None,
                 cp_code: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeArgs'] = None,
                 custom_behavior: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCustomBehaviorArgs'] = None,
                 datastream: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDatastreamArgs'] = None,
                 dcp: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpArgs'] = None,
                 dcp_auth_hmac_transformation: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthHmacTransformationArgs'] = None,
                 dcp_auth_regex_transformation: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthRegexTransformationArgs'] = None,
                 dcp_auth_substring_transformation: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthSubstringTransformationArgs'] = None,
                 dcp_auth_variable_extractor: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthVariableExtractorArgs'] = None,
                 dcp_default_authz_groups: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpDefaultAuthzGroupsArgs'] = None,
                 dcp_dev_relations: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpDevRelationsArgs'] = None,
                 dcp_real_time_auth: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpRealTimeAuthArgs'] = None,
                 delivery_receipt: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDeliveryReceiptArgs'] = None,
                 deny_access: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDenyAccessArgs'] = None,
                 deny_direct_failover_access: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDenyDirectFailoverAccessArgs'] = None,
                 device_characteristic_cache_id: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicCacheIdArgs'] = None,
                 device_characteristic_header: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicHeaderArgs'] = None,
                 dns_async_refresh: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDnsAsyncRefreshArgs'] = None,
                 dns_prefresh: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDnsPrefreshArgs'] = None,
                 downgrade_protocol: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDowngradeProtocolArgs'] = None,
                 download_complete_marker: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDownloadCompleteMarkerArgs'] = None,
                 download_notification: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDownloadNotificationArgs'] = None,
                 downstream_cache: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDownstreamCacheArgs'] = None,
                 dynamic_throughtput_optimization: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationArgs'] = None,
                 dynamic_throughtput_optimization_override: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationOverrideArgs'] = None,
                 dynamic_web_content: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDynamicWebContentArgs'] = None,
                 ecms_bulk_upload: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEcmsBulkUploadArgs'] = None,
                 ecms_database: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatabaseArgs'] = None,
                 ecms_dataset: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatasetArgs'] = None,
                 ecms_object_key: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEcmsObjectKeyArgs'] = None,
                 edge_connect: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeConnectArgs'] = None,
                 edge_load_balancing_advanced: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingAdvancedArgs'] = None,
                 edge_load_balancing_data_center: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterArgs'] = None,
                 edge_load_balancing_origin: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingOriginArgs'] = None,
                 edge_origin_authorization: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeOriginAuthorizationArgs'] = None,
                 edge_redirector: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorArgs'] = None,
                 edge_scape: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeScapeArgs'] = None,
                 edge_side_includes: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeSideIncludesArgs'] = None,
                 edge_worker: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeWorkerArgs'] = None,
                 enhanced_akamai_protocol: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedAkamaiProtocolArgs'] = None,
                 enhanced_proxy_detection: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedProxyDetectionArgs'] = None,
                 epd_forward_header_enrichment: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEpdForwardHeaderEnrichmentArgs'] = None,
                 fail_action: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFailActionArgs'] = None,
                 failover_bot_manager_feature_compatibility: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFailoverBotManagerFeatureCompatibilityArgs'] = None,
                 fast_invalidate: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFastInvalidateArgs'] = None,
                 first_party_marketing: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingArgs'] = None,
                 first_party_marketing_plus: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusArgs'] = None,
                 forward_rewrite: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteArgs'] = None,
                 front_end_optimization: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFrontEndOptimizationArgs'] = None,
                 g2oheader: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorG2oheaderArgs'] = None,
                 global_request_number: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorGlobalRequestNumberArgs'] = None,
                 graphql_caching: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorGraphqlCachingArgs'] = None,
                 gzip_response: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorGzipResponseArgs'] = None,
                 hd_data_advanced: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHdDataAdvancedArgs'] = None,
                 health_detection: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHealthDetectionArgs'] = None,
                 hsaf_eip_binding: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHsafEipBindingArgs'] = None,
                 http2: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHttp2Args'] = None,
                 http3: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHttp3Args'] = None,
                 http_strict_transport_security: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHttpStrictTransportSecurityArgs'] = None,
                 http_to_https_upgrade: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHttpToHttpsUpgradeArgs'] = None,
                 im_override: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImOverrideArgs'] = None,
                 image_and_video_manager: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerArgs'] = None,
                 image_manager: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerArgs'] = None,
                 image_manager_video: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoArgs'] = None,
                 include: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorIncludeArgs'] = None,
                 input_validation: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationArgs'] = None,
                 instant: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorInstantArgs'] = None,
                 instant_config: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorInstantConfigArgs'] = None,
                 large_file_optimization: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationArgs'] = None,
                 large_file_optimization_advanced: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationAdvancedArgs'] = None,
                 limit_bit_rate: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateArgs'] = None,
                 log_custom: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorLogCustomArgs'] = None,
                 m_pulse: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMPulseArgs'] = None,
                 manifest_personalization: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorManifestPersonalizationArgs'] = None,
                 manifest_rerouting: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorManifestReroutingArgs'] = None,
                 manual_server_push: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorManualServerPushArgs'] = None,
                 media_acceleration: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationArgs'] = None,
                 media_acceleration_quic_optout: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationQuicOptoutArgs'] = None,
                 media_client: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMediaClientArgs'] = None,
                 media_file_retrieval_optimization: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMediaFileRetrievalOptimizationArgs'] = None,
                 media_origin_failover: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMediaOriginFailoverArgs'] = None,
                 metadata_caching: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMetadataCachingArgs'] = None,
                 mobile_sdk_performance: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMobileSdkPerformanceArgs'] = None,
                 modify_incoming_request_header: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingRequestHeaderArgs'] = None,
                 modify_incoming_response_header: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingResponseHeaderArgs'] = None,
                 modify_outgoing_request_header: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingRequestHeaderArgs'] = None,
                 modify_outgoing_response_header: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingResponseHeaderArgs'] = None,
                 modify_via_header: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorModifyViaHeaderArgs'] = None,
                 origin: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginArgs'] = None,
                 origin_characteristics: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsArgs'] = None,
                 origin_characteristics_wsd: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsWsdArgs'] = None,
                 origin_failure_recovery_method: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryMethodArgs'] = None,
                 origin_failure_recovery_policy: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryPolicyArgs'] = None,
                 origin_ip_acl: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginIpAclArgs'] = None,
                 persistent_client_connection: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPersistentClientConnectionArgs'] = None,
                 persistent_connection: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPersistentConnectionArgs'] = None,
                 personally_identifiable_information: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPersonallyIdentifiableInformationArgs'] = None,
                 phased_release: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseArgs'] = None,
                 preconnect: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPreconnectArgs'] = None,
                 predictive_content_delivery: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPredictiveContentDeliveryArgs'] = None,
                 predictive_prefetching: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPredictivePrefetchingArgs'] = None,
                 prefetch: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchArgs'] = None,
                 prefetchable: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchableArgs'] = None,
                 prefresh_cache: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPrefreshCacheArgs'] = None,
                 quality: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorQualityArgs'] = None,
                 quic_beta: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorQuicBetaArgs'] = None,
                 random_seek: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRandomSeekArgs'] = None,
                 rapid: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRapidArgs'] = None,
                 read_timeout: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorReadTimeoutArgs'] = None,
                 real_time_reporting: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRealTimeReportingArgs'] = None,
                 real_user_monitoring: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRealUserMonitoringArgs'] = None,
                 redirect: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRedirectArgs'] = None,
                 redirectplus: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRedirectplusArgs'] = None,
                 referer_checking: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRefererCheckingArgs'] = None,
                 remove_query_parameter: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRemoveQueryParameterArgs'] = None,
                 remove_vary: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRemoveVaryArgs'] = None,
                 report: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorReportArgs'] = None,
                 request_control: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlArgs'] = None,
                 request_type_marker: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRequestTypeMarkerArgs'] = None,
                 resource_optimizer: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerArgs'] = None,
                 resource_optimizer_extended_compatibility: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerExtendedCompatibilityArgs'] = None,
                 response_code: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorResponseCodeArgs'] = None,
                 response_cookie: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorResponseCookieArgs'] = None,
                 restrict_object_caching: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRestrictObjectCachingArgs'] = None,
                 return_cache_status: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorReturnCacheStatusArgs'] = None,
                 rewrite_url: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRewriteUrlArgs'] = None,
                 rum_custom: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRumCustomArgs'] = None,
                 saas_definitions: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSaasDefinitionsArgs'] = None,
                 sales_force_commerce_cloud_client: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudClientArgs'] = None,
                 sales_force_commerce_cloud_provider: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderArgs'] = None,
                 sales_force_commerce_cloud_provider_host_header: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderHostHeaderArgs'] = None,
                 save_post_dca_processing: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSavePostDcaProcessingArgs'] = None,
                 schedule_invalidation: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorScheduleInvalidationArgs'] = None,
                 script_management: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorScriptManagementArgs'] = None,
                 segmented_content_protection: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedContentProtectionArgs'] = None,
                 segmented_media_optimization: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaOptimizationArgs'] = None,
                 segmented_media_streaming_prefetch: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaStreamingPrefetchArgs'] = None,
                 set_variable: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSetVariableArgs'] = None,
                 shutr: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorShutrArgs'] = None,
                 simulate_error_code: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSimulateErrorCodeArgs'] = None,
                 site_shield: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldArgs'] = None,
                 standard_tls_migration: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationArgs'] = None,
                 standard_tls_migration_override: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationOverrideArgs'] = None,
                 strict_header_parsing: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorStrictHeaderParsingArgs'] = None,
                 sub_customer: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSubCustomerArgs'] = None,
                 sure_route: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSureRouteArgs'] = None,
                 tcp_optimization: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTcpOptimizationArgs'] = None,
                 tea_leaf: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTeaLeafArgs'] = None,
                 tiered_distribution: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionArgs'] = None,
                 tiered_distribution_advanced: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionAdvancedArgs'] = None,
                 tiered_distribution_customization: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionCustomizationArgs'] = None,
                 timeout: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTimeoutArgs'] = None,
                 uid_configuration: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorUidConfigurationArgs'] = None,
                 validate_entity_tag: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorValidateEntityTagArgs'] = None,
                 verify_json_web_token: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenArgs'] = None,
                 verify_json_web_token_for_dcp: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenForDcpArgs'] = None,
                 verify_token_authorization: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationArgs'] = None,
                 virtual_waiting_room: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomArgs'] = None,
                 virtual_waiting_room_with_edge_workers: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomWithEdgeWorkersArgs'] = None,
                 visitor_prioritization: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationArgs'] = None,
                 visitor_prioritization_fifo: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoArgs'] = None,
                 visitor_prioritization_fifo_standalone: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoStandaloneArgs'] = None,
                 watermarking: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorWatermarkingArgs'] = None,
                 web_application_firewall: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallArgs'] = None,
                 web_sockets: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorWebSocketsArgs'] = None,
                 webdav: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorWebdavArgs'] = None):
        if ad_scaler_circuit_breaker is not None:
            pulumi.set(__self__, "ad_scaler_circuit_breaker", ad_scaler_circuit_breaker)
        if adaptive_acceleration is not None:
            pulumi.set(__self__, "adaptive_acceleration", adaptive_acceleration)
        if adaptive_image_compression is not None:
            pulumi.set(__self__, "adaptive_image_compression", adaptive_image_compression)
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if aggregated_reporting is not None:
            pulumi.set(__self__, "aggregated_reporting", aggregated_reporting)
        if akamaizer is not None:
            pulumi.set(__self__, "akamaizer", akamaizer)
        if akamaizer_tag is not None:
            pulumi.set(__self__, "akamaizer_tag", akamaizer_tag)
        if all_http_in_cache_hierarchy is not None:
            pulumi.set(__self__, "all_http_in_cache_hierarchy", all_http_in_cache_hierarchy)
        if allow_cloudlets_origins is not None:
            pulumi.set(__self__, "allow_cloudlets_origins", allow_cloudlets_origins)
        if allow_delete is not None:
            pulumi.set(__self__, "allow_delete", allow_delete)
        if allow_https_cache_key_sharing is not None:
            pulumi.set(__self__, "allow_https_cache_key_sharing", allow_https_cache_key_sharing)
        if allow_https_downgrade is not None:
            pulumi.set(__self__, "allow_https_downgrade", allow_https_downgrade)
        if allow_options is not None:
            pulumi.set(__self__, "allow_options", allow_options)
        if allow_patch is not None:
            pulumi.set(__self__, "allow_patch", allow_patch)
        if allow_post is not None:
            pulumi.set(__self__, "allow_post", allow_post)
        if allow_put is not None:
            pulumi.set(__self__, "allow_put", allow_put)
        if allow_transfer_encoding is not None:
            pulumi.set(__self__, "allow_transfer_encoding", allow_transfer_encoding)
        if alt_svc_header is not None:
            pulumi.set(__self__, "alt_svc_header", alt_svc_header)
        if api_prioritization is not None:
            pulumi.set(__self__, "api_prioritization", api_prioritization)
        if application_load_balancer is not None:
            pulumi.set(__self__, "application_load_balancer", application_load_balancer)
        if audience_segmentation is not None:
            pulumi.set(__self__, "audience_segmentation", audience_segmentation)
        if auto_domain_validation is not None:
            pulumi.set(__self__, "auto_domain_validation", auto_domain_validation)
        if base_directory is not None:
            pulumi.set(__self__, "base_directory", base_directory)
        if boss_beaconing is not None:
            pulumi.set(__self__, "boss_beaconing", boss_beaconing)
        if breadcrumbs is not None:
            pulumi.set(__self__, "breadcrumbs", breadcrumbs)
        if break_connection is not None:
            pulumi.set(__self__, "break_connection", break_connection)
        if brotli is not None:
            pulumi.set(__self__, "brotli", brotli)
        if cache_error is not None:
            pulumi.set(__self__, "cache_error", cache_error)
        if cache_id is not None:
            pulumi.set(__self__, "cache_id", cache_id)
        if cache_key_ignore_case is not None:
            pulumi.set(__self__, "cache_key_ignore_case", cache_key_ignore_case)
        if cache_key_query_params is not None:
            pulumi.set(__self__, "cache_key_query_params", cache_key_query_params)
        if cache_key_rewrite is not None:
            pulumi.set(__self__, "cache_key_rewrite", cache_key_rewrite)
        if cache_post is not None:
            pulumi.set(__self__, "cache_post", cache_post)
        if cache_redirect is not None:
            pulumi.set(__self__, "cache_redirect", cache_redirect)
        if cache_tag is not None:
            pulumi.set(__self__, "cache_tag", cache_tag)
        if cache_tag_visible is not None:
            pulumi.set(__self__, "cache_tag_visible", cache_tag_visible)
        if caching is not None:
            pulumi.set(__self__, "caching", caching)
        if central_authorization is not None:
            pulumi.set(__self__, "central_authorization", central_authorization)
        if chase_redirects is not None:
            pulumi.set(__self__, "chase_redirects", chase_redirects)
        if client_characteristics is not None:
            pulumi.set(__self__, "client_characteristics", client_characteristics)
        if cloud_interconnects is not None:
            pulumi.set(__self__, "cloud_interconnects", cloud_interconnects)
        if cloud_wrapper is not None:
            pulumi.set(__self__, "cloud_wrapper", cloud_wrapper)
        if cloud_wrapper_advanced is not None:
            pulumi.set(__self__, "cloud_wrapper_advanced", cloud_wrapper_advanced)
        if conditional_origin is not None:
            pulumi.set(__self__, "conditional_origin", conditional_origin)
        if construct_response is not None:
            pulumi.set(__self__, "construct_response", construct_response)
        if content_characteristics is not None:
            pulumi.set(__self__, "content_characteristics", content_characteristics)
        if content_characteristics_amd is not None:
            pulumi.set(__self__, "content_characteristics_amd", content_characteristics_amd)
        if content_characteristics_dd is not None:
            pulumi.set(__self__, "content_characteristics_dd", content_characteristics_dd)
        if content_characteristics_wsd_large_file is not None:
            pulumi.set(__self__, "content_characteristics_wsd_large_file", content_characteristics_wsd_large_file)
        if content_characteristics_wsd_live is not None:
            pulumi.set(__self__, "content_characteristics_wsd_live", content_characteristics_wsd_live)
        if content_characteristics_wsd_vod is not None:
            pulumi.set(__self__, "content_characteristics_wsd_vod", content_characteristics_wsd_vod)
        if content_pre_position is not None:
            pulumi.set(__self__, "content_pre_position", content_pre_position)
        if content_targeting_protection is not None:
            pulumi.set(__self__, "content_targeting_protection", content_targeting_protection)
        if cors_support is not None:
            pulumi.set(__self__, "cors_support", cors_support)
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if custom_behavior is not None:
            pulumi.set(__self__, "custom_behavior", custom_behavior)
        if datastream is not None:
            pulumi.set(__self__, "datastream", datastream)
        if dcp is not None:
            pulumi.set(__self__, "dcp", dcp)
        if dcp_auth_hmac_transformation is not None:
            pulumi.set(__self__, "dcp_auth_hmac_transformation", dcp_auth_hmac_transformation)
        if dcp_auth_regex_transformation is not None:
            pulumi.set(__self__, "dcp_auth_regex_transformation", dcp_auth_regex_transformation)
        if dcp_auth_substring_transformation is not None:
            pulumi.set(__self__, "dcp_auth_substring_transformation", dcp_auth_substring_transformation)
        if dcp_auth_variable_extractor is not None:
            pulumi.set(__self__, "dcp_auth_variable_extractor", dcp_auth_variable_extractor)
        if dcp_default_authz_groups is not None:
            pulumi.set(__self__, "dcp_default_authz_groups", dcp_default_authz_groups)
        if dcp_dev_relations is not None:
            pulumi.set(__self__, "dcp_dev_relations", dcp_dev_relations)
        if dcp_real_time_auth is not None:
            pulumi.set(__self__, "dcp_real_time_auth", dcp_real_time_auth)
        if delivery_receipt is not None:
            pulumi.set(__self__, "delivery_receipt", delivery_receipt)
        if deny_access is not None:
            pulumi.set(__self__, "deny_access", deny_access)
        if deny_direct_failover_access is not None:
            pulumi.set(__self__, "deny_direct_failover_access", deny_direct_failover_access)
        if device_characteristic_cache_id is not None:
            pulumi.set(__self__, "device_characteristic_cache_id", device_characteristic_cache_id)
        if device_characteristic_header is not None:
            pulumi.set(__self__, "device_characteristic_header", device_characteristic_header)
        if dns_async_refresh is not None:
            pulumi.set(__self__, "dns_async_refresh", dns_async_refresh)
        if dns_prefresh is not None:
            pulumi.set(__self__, "dns_prefresh", dns_prefresh)
        if downgrade_protocol is not None:
            pulumi.set(__self__, "downgrade_protocol", downgrade_protocol)
        if download_complete_marker is not None:
            pulumi.set(__self__, "download_complete_marker", download_complete_marker)
        if download_notification is not None:
            pulumi.set(__self__, "download_notification", download_notification)
        if downstream_cache is not None:
            pulumi.set(__self__, "downstream_cache", downstream_cache)
        if dynamic_throughtput_optimization is not None:
            pulumi.set(__self__, "dynamic_throughtput_optimization", dynamic_throughtput_optimization)
        if dynamic_throughtput_optimization_override is not None:
            pulumi.set(__self__, "dynamic_throughtput_optimization_override", dynamic_throughtput_optimization_override)
        if dynamic_web_content is not None:
            pulumi.set(__self__, "dynamic_web_content", dynamic_web_content)
        if ecms_bulk_upload is not None:
            pulumi.set(__self__, "ecms_bulk_upload", ecms_bulk_upload)
        if ecms_database is not None:
            pulumi.set(__self__, "ecms_database", ecms_database)
        if ecms_dataset is not None:
            pulumi.set(__self__, "ecms_dataset", ecms_dataset)
        if ecms_object_key is not None:
            pulumi.set(__self__, "ecms_object_key", ecms_object_key)
        if edge_connect is not None:
            pulumi.set(__self__, "edge_connect", edge_connect)
        if edge_load_balancing_advanced is not None:
            pulumi.set(__self__, "edge_load_balancing_advanced", edge_load_balancing_advanced)
        if edge_load_balancing_data_center is not None:
            pulumi.set(__self__, "edge_load_balancing_data_center", edge_load_balancing_data_center)
        if edge_load_balancing_origin is not None:
            pulumi.set(__self__, "edge_load_balancing_origin", edge_load_balancing_origin)
        if edge_origin_authorization is not None:
            pulumi.set(__self__, "edge_origin_authorization", edge_origin_authorization)
        if edge_redirector is not None:
            pulumi.set(__self__, "edge_redirector", edge_redirector)
        if edge_scape is not None:
            pulumi.set(__self__, "edge_scape", edge_scape)
        if edge_side_includes is not None:
            pulumi.set(__self__, "edge_side_includes", edge_side_includes)
        if edge_worker is not None:
            pulumi.set(__self__, "edge_worker", edge_worker)
        if enhanced_akamai_protocol is not None:
            pulumi.set(__self__, "enhanced_akamai_protocol", enhanced_akamai_protocol)
        if enhanced_proxy_detection is not None:
            pulumi.set(__self__, "enhanced_proxy_detection", enhanced_proxy_detection)
        if epd_forward_header_enrichment is not None:
            pulumi.set(__self__, "epd_forward_header_enrichment", epd_forward_header_enrichment)
        if fail_action is not None:
            pulumi.set(__self__, "fail_action", fail_action)
        if failover_bot_manager_feature_compatibility is not None:
            pulumi.set(__self__, "failover_bot_manager_feature_compatibility", failover_bot_manager_feature_compatibility)
        if fast_invalidate is not None:
            pulumi.set(__self__, "fast_invalidate", fast_invalidate)
        if first_party_marketing is not None:
            pulumi.set(__self__, "first_party_marketing", first_party_marketing)
        if first_party_marketing_plus is not None:
            pulumi.set(__self__, "first_party_marketing_plus", first_party_marketing_plus)
        if forward_rewrite is not None:
            pulumi.set(__self__, "forward_rewrite", forward_rewrite)
        if front_end_optimization is not None:
            pulumi.set(__self__, "front_end_optimization", front_end_optimization)
        if g2oheader is not None:
            pulumi.set(__self__, "g2oheader", g2oheader)
        if global_request_number is not None:
            pulumi.set(__self__, "global_request_number", global_request_number)
        if graphql_caching is not None:
            pulumi.set(__self__, "graphql_caching", graphql_caching)
        if gzip_response is not None:
            pulumi.set(__self__, "gzip_response", gzip_response)
        if hd_data_advanced is not None:
            pulumi.set(__self__, "hd_data_advanced", hd_data_advanced)
        if health_detection is not None:
            pulumi.set(__self__, "health_detection", health_detection)
        if hsaf_eip_binding is not None:
            pulumi.set(__self__, "hsaf_eip_binding", hsaf_eip_binding)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)
        if http3 is not None:
            pulumi.set(__self__, "http3", http3)
        if http_strict_transport_security is not None:
            pulumi.set(__self__, "http_strict_transport_security", http_strict_transport_security)
        if http_to_https_upgrade is not None:
            pulumi.set(__self__, "http_to_https_upgrade", http_to_https_upgrade)
        if im_override is not None:
            pulumi.set(__self__, "im_override", im_override)
        if image_and_video_manager is not None:
            pulumi.set(__self__, "image_and_video_manager", image_and_video_manager)
        if image_manager is not None:
            pulumi.set(__self__, "image_manager", image_manager)
        if image_manager_video is not None:
            pulumi.set(__self__, "image_manager_video", image_manager_video)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if input_validation is not None:
            pulumi.set(__self__, "input_validation", input_validation)
        if instant is not None:
            pulumi.set(__self__, "instant", instant)
        if instant_config is not None:
            pulumi.set(__self__, "instant_config", instant_config)
        if large_file_optimization is not None:
            pulumi.set(__self__, "large_file_optimization", large_file_optimization)
        if large_file_optimization_advanced is not None:
            pulumi.set(__self__, "large_file_optimization_advanced", large_file_optimization_advanced)
        if limit_bit_rate is not None:
            pulumi.set(__self__, "limit_bit_rate", limit_bit_rate)
        if log_custom is not None:
            pulumi.set(__self__, "log_custom", log_custom)
        if m_pulse is not None:
            pulumi.set(__self__, "m_pulse", m_pulse)
        if manifest_personalization is not None:
            pulumi.set(__self__, "manifest_personalization", manifest_personalization)
        if manifest_rerouting is not None:
            pulumi.set(__self__, "manifest_rerouting", manifest_rerouting)
        if manual_server_push is not None:
            pulumi.set(__self__, "manual_server_push", manual_server_push)
        if media_acceleration is not None:
            pulumi.set(__self__, "media_acceleration", media_acceleration)
        if media_acceleration_quic_optout is not None:
            pulumi.set(__self__, "media_acceleration_quic_optout", media_acceleration_quic_optout)
        if media_client is not None:
            pulumi.set(__self__, "media_client", media_client)
        if media_file_retrieval_optimization is not None:
            pulumi.set(__self__, "media_file_retrieval_optimization", media_file_retrieval_optimization)
        if media_origin_failover is not None:
            pulumi.set(__self__, "media_origin_failover", media_origin_failover)
        if metadata_caching is not None:
            pulumi.set(__self__, "metadata_caching", metadata_caching)
        if mobile_sdk_performance is not None:
            pulumi.set(__self__, "mobile_sdk_performance", mobile_sdk_performance)
        if modify_incoming_request_header is not None:
            pulumi.set(__self__, "modify_incoming_request_header", modify_incoming_request_header)
        if modify_incoming_response_header is not None:
            pulumi.set(__self__, "modify_incoming_response_header", modify_incoming_response_header)
        if modify_outgoing_request_header is not None:
            pulumi.set(__self__, "modify_outgoing_request_header", modify_outgoing_request_header)
        if modify_outgoing_response_header is not None:
            pulumi.set(__self__, "modify_outgoing_response_header", modify_outgoing_response_header)
        if modify_via_header is not None:
            pulumi.set(__self__, "modify_via_header", modify_via_header)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if origin_characteristics is not None:
            pulumi.set(__self__, "origin_characteristics", origin_characteristics)
        if origin_characteristics_wsd is not None:
            pulumi.set(__self__, "origin_characteristics_wsd", origin_characteristics_wsd)
        if origin_failure_recovery_method is not None:
            pulumi.set(__self__, "origin_failure_recovery_method", origin_failure_recovery_method)
        if origin_failure_recovery_policy is not None:
            pulumi.set(__self__, "origin_failure_recovery_policy", origin_failure_recovery_policy)
        if origin_ip_acl is not None:
            pulumi.set(__self__, "origin_ip_acl", origin_ip_acl)
        if persistent_client_connection is not None:
            pulumi.set(__self__, "persistent_client_connection", persistent_client_connection)
        if persistent_connection is not None:
            pulumi.set(__self__, "persistent_connection", persistent_connection)
        if personally_identifiable_information is not None:
            pulumi.set(__self__, "personally_identifiable_information", personally_identifiable_information)
        if phased_release is not None:
            pulumi.set(__self__, "phased_release", phased_release)
        if preconnect is not None:
            pulumi.set(__self__, "preconnect", preconnect)
        if predictive_content_delivery is not None:
            pulumi.set(__self__, "predictive_content_delivery", predictive_content_delivery)
        if predictive_prefetching is not None:
            pulumi.set(__self__, "predictive_prefetching", predictive_prefetching)
        if prefetch is not None:
            pulumi.set(__self__, "prefetch", prefetch)
        if prefetchable is not None:
            pulumi.set(__self__, "prefetchable", prefetchable)
        if prefresh_cache is not None:
            pulumi.set(__self__, "prefresh_cache", prefresh_cache)
        if quality is not None:
            pulumi.set(__self__, "quality", quality)
        if quic_beta is not None:
            pulumi.set(__self__, "quic_beta", quic_beta)
        if random_seek is not None:
            pulumi.set(__self__, "random_seek", random_seek)
        if rapid is not None:
            pulumi.set(__self__, "rapid", rapid)
        if read_timeout is not None:
            pulumi.set(__self__, "read_timeout", read_timeout)
        if real_time_reporting is not None:
            pulumi.set(__self__, "real_time_reporting", real_time_reporting)
        if real_user_monitoring is not None:
            pulumi.set(__self__, "real_user_monitoring", real_user_monitoring)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if redirectplus is not None:
            pulumi.set(__self__, "redirectplus", redirectplus)
        if referer_checking is not None:
            pulumi.set(__self__, "referer_checking", referer_checking)
        if remove_query_parameter is not None:
            pulumi.set(__self__, "remove_query_parameter", remove_query_parameter)
        if remove_vary is not None:
            pulumi.set(__self__, "remove_vary", remove_vary)
        if report is not None:
            pulumi.set(__self__, "report", report)
        if request_control is not None:
            pulumi.set(__self__, "request_control", request_control)
        if request_type_marker is not None:
            pulumi.set(__self__, "request_type_marker", request_type_marker)
        if resource_optimizer is not None:
            pulumi.set(__self__, "resource_optimizer", resource_optimizer)
        if resource_optimizer_extended_compatibility is not None:
            pulumi.set(__self__, "resource_optimizer_extended_compatibility", resource_optimizer_extended_compatibility)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if response_cookie is not None:
            pulumi.set(__self__, "response_cookie", response_cookie)
        if restrict_object_caching is not None:
            pulumi.set(__self__, "restrict_object_caching", restrict_object_caching)
        if return_cache_status is not None:
            pulumi.set(__self__, "return_cache_status", return_cache_status)
        if rewrite_url is not None:
            pulumi.set(__self__, "rewrite_url", rewrite_url)
        if rum_custom is not None:
            pulumi.set(__self__, "rum_custom", rum_custom)
        if saas_definitions is not None:
            pulumi.set(__self__, "saas_definitions", saas_definitions)
        if sales_force_commerce_cloud_client is not None:
            pulumi.set(__self__, "sales_force_commerce_cloud_client", sales_force_commerce_cloud_client)
        if sales_force_commerce_cloud_provider is not None:
            pulumi.set(__self__, "sales_force_commerce_cloud_provider", sales_force_commerce_cloud_provider)
        if sales_force_commerce_cloud_provider_host_header is not None:
            pulumi.set(__self__, "sales_force_commerce_cloud_provider_host_header", sales_force_commerce_cloud_provider_host_header)
        if save_post_dca_processing is not None:
            pulumi.set(__self__, "save_post_dca_processing", save_post_dca_processing)
        if schedule_invalidation is not None:
            pulumi.set(__self__, "schedule_invalidation", schedule_invalidation)
        if script_management is not None:
            pulumi.set(__self__, "script_management", script_management)
        if segmented_content_protection is not None:
            pulumi.set(__self__, "segmented_content_protection", segmented_content_protection)
        if segmented_media_optimization is not None:
            pulumi.set(__self__, "segmented_media_optimization", segmented_media_optimization)
        if segmented_media_streaming_prefetch is not None:
            pulumi.set(__self__, "segmented_media_streaming_prefetch", segmented_media_streaming_prefetch)
        if set_variable is not None:
            pulumi.set(__self__, "set_variable", set_variable)
        if shutr is not None:
            pulumi.set(__self__, "shutr", shutr)
        if simulate_error_code is not None:
            pulumi.set(__self__, "simulate_error_code", simulate_error_code)
        if site_shield is not None:
            pulumi.set(__self__, "site_shield", site_shield)
        if standard_tls_migration is not None:
            pulumi.set(__self__, "standard_tls_migration", standard_tls_migration)
        if standard_tls_migration_override is not None:
            pulumi.set(__self__, "standard_tls_migration_override", standard_tls_migration_override)
        if strict_header_parsing is not None:
            pulumi.set(__self__, "strict_header_parsing", strict_header_parsing)
        if sub_customer is not None:
            pulumi.set(__self__, "sub_customer", sub_customer)
        if sure_route is not None:
            pulumi.set(__self__, "sure_route", sure_route)
        if tcp_optimization is not None:
            pulumi.set(__self__, "tcp_optimization", tcp_optimization)
        if tea_leaf is not None:
            pulumi.set(__self__, "tea_leaf", tea_leaf)
        if tiered_distribution is not None:
            pulumi.set(__self__, "tiered_distribution", tiered_distribution)
        if tiered_distribution_advanced is not None:
            pulumi.set(__self__, "tiered_distribution_advanced", tiered_distribution_advanced)
        if tiered_distribution_customization is not None:
            pulumi.set(__self__, "tiered_distribution_customization", tiered_distribution_customization)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uid_configuration is not None:
            pulumi.set(__self__, "uid_configuration", uid_configuration)
        if validate_entity_tag is not None:
            pulumi.set(__self__, "validate_entity_tag", validate_entity_tag)
        if verify_json_web_token is not None:
            pulumi.set(__self__, "verify_json_web_token", verify_json_web_token)
        if verify_json_web_token_for_dcp is not None:
            pulumi.set(__self__, "verify_json_web_token_for_dcp", verify_json_web_token_for_dcp)
        if verify_token_authorization is not None:
            pulumi.set(__self__, "verify_token_authorization", verify_token_authorization)
        if virtual_waiting_room is not None:
            pulumi.set(__self__, "virtual_waiting_room", virtual_waiting_room)
        if virtual_waiting_room_with_edge_workers is not None:
            pulumi.set(__self__, "virtual_waiting_room_with_edge_workers", virtual_waiting_room_with_edge_workers)
        if visitor_prioritization is not None:
            pulumi.set(__self__, "visitor_prioritization", visitor_prioritization)
        if visitor_prioritization_fifo is not None:
            pulumi.set(__self__, "visitor_prioritization_fifo", visitor_prioritization_fifo)
        if visitor_prioritization_fifo_standalone is not None:
            pulumi.set(__self__, "visitor_prioritization_fifo_standalone", visitor_prioritization_fifo_standalone)
        if watermarking is not None:
            pulumi.set(__self__, "watermarking", watermarking)
        if web_application_firewall is not None:
            pulumi.set(__self__, "web_application_firewall", web_application_firewall)
        if web_sockets is not None:
            pulumi.set(__self__, "web_sockets", web_sockets)
        if webdav is not None:
            pulumi.set(__self__, "webdav", webdav)

    @property
    @pulumi.getter(name="adScalerCircuitBreaker")
    def ad_scaler_circuit_breaker(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAdScalerCircuitBreakerArgs']:
        return pulumi.get(self, "ad_scaler_circuit_breaker")

    @ad_scaler_circuit_breaker.setter
    def ad_scaler_circuit_breaker(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAdScalerCircuitBreakerArgs']):
        pulumi.set(self, "ad_scaler_circuit_breaker", value)

    @property
    @pulumi.getter(name="adaptiveAcceleration")
    def adaptive_acceleration(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveAccelerationArgs']:
        return pulumi.get(self, "adaptive_acceleration")

    @adaptive_acceleration.setter
    def adaptive_acceleration(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveAccelerationArgs']):
        pulumi.set(self, "adaptive_acceleration", value)

    @property
    @pulumi.getter(name="adaptiveImageCompression")
    def adaptive_image_compression(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveImageCompressionArgs']:
        return pulumi.get(self, "adaptive_image_compression")

    @adaptive_image_compression.setter
    def adaptive_image_compression(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveImageCompressionArgs']):
        pulumi.set(self, "adaptive_image_compression", value)

    @property
    @pulumi.getter
    def advanced(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAdvancedArgs']:
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAdvancedArgs']):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter(name="aggregatedReporting")
    def aggregated_reporting(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAggregatedReportingArgs']:
        return pulumi.get(self, "aggregated_reporting")

    @aggregated_reporting.setter
    def aggregated_reporting(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAggregatedReportingArgs']):
        pulumi.set(self, "aggregated_reporting", value)

    @property
    @pulumi.getter
    def akamaizer(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerArgs']:
        return pulumi.get(self, "akamaizer")

    @akamaizer.setter
    def akamaizer(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerArgs']):
        pulumi.set(self, "akamaizer", value)

    @property
    @pulumi.getter(name="akamaizerTag")
    def akamaizer_tag(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagArgs']:
        return pulumi.get(self, "akamaizer_tag")

    @akamaizer_tag.setter
    def akamaizer_tag(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagArgs']):
        pulumi.set(self, "akamaizer_tag", value)

    @property
    @pulumi.getter(name="allHttpInCacheHierarchy")
    def all_http_in_cache_hierarchy(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllHttpInCacheHierarchyArgs']:
        return pulumi.get(self, "all_http_in_cache_hierarchy")

    @all_http_in_cache_hierarchy.setter
    def all_http_in_cache_hierarchy(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllHttpInCacheHierarchyArgs']):
        pulumi.set(self, "all_http_in_cache_hierarchy", value)

    @property
    @pulumi.getter(name="allowCloudletsOrigins")
    def allow_cloudlets_origins(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowCloudletsOriginsArgs']:
        return pulumi.get(self, "allow_cloudlets_origins")

    @allow_cloudlets_origins.setter
    def allow_cloudlets_origins(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowCloudletsOriginsArgs']):
        pulumi.set(self, "allow_cloudlets_origins", value)

    @property
    @pulumi.getter(name="allowDelete")
    def allow_delete(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowDeleteArgs']:
        return pulumi.get(self, "allow_delete")

    @allow_delete.setter
    def allow_delete(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowDeleteArgs']):
        pulumi.set(self, "allow_delete", value)

    @property
    @pulumi.getter(name="allowHttpsCacheKeySharing")
    def allow_https_cache_key_sharing(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsCacheKeySharingArgs']:
        return pulumi.get(self, "allow_https_cache_key_sharing")

    @allow_https_cache_key_sharing.setter
    def allow_https_cache_key_sharing(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsCacheKeySharingArgs']):
        pulumi.set(self, "allow_https_cache_key_sharing", value)

    @property
    @pulumi.getter(name="allowHttpsDowngrade")
    def allow_https_downgrade(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsDowngradeArgs']:
        return pulumi.get(self, "allow_https_downgrade")

    @allow_https_downgrade.setter
    def allow_https_downgrade(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsDowngradeArgs']):
        pulumi.set(self, "allow_https_downgrade", value)

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowOptionsArgs']:
        return pulumi.get(self, "allow_options")

    @allow_options.setter
    def allow_options(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowOptionsArgs']):
        pulumi.set(self, "allow_options", value)

    @property
    @pulumi.getter(name="allowPatch")
    def allow_patch(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowPatchArgs']:
        return pulumi.get(self, "allow_patch")

    @allow_patch.setter
    def allow_patch(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowPatchArgs']):
        pulumi.set(self, "allow_patch", value)

    @property
    @pulumi.getter(name="allowPost")
    def allow_post(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowPostArgs']:
        return pulumi.get(self, "allow_post")

    @allow_post.setter
    def allow_post(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowPostArgs']):
        pulumi.set(self, "allow_post", value)

    @property
    @pulumi.getter(name="allowPut")
    def allow_put(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowPutArgs']:
        return pulumi.get(self, "allow_put")

    @allow_put.setter
    def allow_put(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowPutArgs']):
        pulumi.set(self, "allow_put", value)

    @property
    @pulumi.getter(name="allowTransferEncoding")
    def allow_transfer_encoding(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowTransferEncodingArgs']:
        return pulumi.get(self, "allow_transfer_encoding")

    @allow_transfer_encoding.setter
    def allow_transfer_encoding(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAllowTransferEncodingArgs']):
        pulumi.set(self, "allow_transfer_encoding", value)

    @property
    @pulumi.getter(name="altSvcHeader")
    def alt_svc_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAltSvcHeaderArgs']:
        return pulumi.get(self, "alt_svc_header")

    @alt_svc_header.setter
    def alt_svc_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAltSvcHeaderArgs']):
        pulumi.set(self, "alt_svc_header", value)

    @property
    @pulumi.getter(name="apiPrioritization")
    def api_prioritization(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationArgs']:
        return pulumi.get(self, "api_prioritization")

    @api_prioritization.setter
    def api_prioritization(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationArgs']):
        pulumi.set(self, "api_prioritization", value)

    @property
    @pulumi.getter(name="applicationLoadBalancer")
    def application_load_balancer(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerArgs']:
        return pulumi.get(self, "application_load_balancer")

    @application_load_balancer.setter
    def application_load_balancer(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerArgs']):
        pulumi.set(self, "application_load_balancer", value)

    @property
    @pulumi.getter(name="audienceSegmentation")
    def audience_segmentation(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationArgs']:
        return pulumi.get(self, "audience_segmentation")

    @audience_segmentation.setter
    def audience_segmentation(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationArgs']):
        pulumi.set(self, "audience_segmentation", value)

    @property
    @pulumi.getter(name="autoDomainValidation")
    def auto_domain_validation(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAutoDomainValidationArgs']:
        return pulumi.get(self, "auto_domain_validation")

    @auto_domain_validation.setter
    def auto_domain_validation(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAutoDomainValidationArgs']):
        pulumi.set(self, "auto_domain_validation", value)

    @property
    @pulumi.getter(name="baseDirectory")
    def base_directory(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorBaseDirectoryArgs']:
        return pulumi.get(self, "base_directory")

    @base_directory.setter
    def base_directory(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorBaseDirectoryArgs']):
        pulumi.set(self, "base_directory", value)

    @property
    @pulumi.getter(name="bossBeaconing")
    def boss_beaconing(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorBossBeaconingArgs']:
        return pulumi.get(self, "boss_beaconing")

    @boss_beaconing.setter
    def boss_beaconing(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorBossBeaconingArgs']):
        pulumi.set(self, "boss_beaconing", value)

    @property
    @pulumi.getter
    def breadcrumbs(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorBreadcrumbsArgs']:
        return pulumi.get(self, "breadcrumbs")

    @breadcrumbs.setter
    def breadcrumbs(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorBreadcrumbsArgs']):
        pulumi.set(self, "breadcrumbs", value)

    @property
    @pulumi.getter(name="breakConnection")
    def break_connection(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorBreakConnectionArgs']:
        return pulumi.get(self, "break_connection")

    @break_connection.setter
    def break_connection(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorBreakConnectionArgs']):
        pulumi.set(self, "break_connection", value)

    @property
    @pulumi.getter
    def brotli(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorBrotliArgs']:
        return pulumi.get(self, "brotli")

    @brotli.setter
    def brotli(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorBrotliArgs']):
        pulumi.set(self, "brotli", value)

    @property
    @pulumi.getter(name="cacheError")
    def cache_error(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheErrorArgs']:
        return pulumi.get(self, "cache_error")

    @cache_error.setter
    def cache_error(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheErrorArgs']):
        pulumi.set(self, "cache_error", value)

    @property
    @pulumi.getter(name="cacheId")
    def cache_id(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheIdArgs']:
        return pulumi.get(self, "cache_id")

    @cache_id.setter
    def cache_id(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheIdArgs']):
        pulumi.set(self, "cache_id", value)

    @property
    @pulumi.getter(name="cacheKeyIgnoreCase")
    def cache_key_ignore_case(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyIgnoreCaseArgs']:
        return pulumi.get(self, "cache_key_ignore_case")

    @cache_key_ignore_case.setter
    def cache_key_ignore_case(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyIgnoreCaseArgs']):
        pulumi.set(self, "cache_key_ignore_case", value)

    @property
    @pulumi.getter(name="cacheKeyQueryParams")
    def cache_key_query_params(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyQueryParamsArgs']:
        return pulumi.get(self, "cache_key_query_params")

    @cache_key_query_params.setter
    def cache_key_query_params(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyQueryParamsArgs']):
        pulumi.set(self, "cache_key_query_params", value)

    @property
    @pulumi.getter(name="cacheKeyRewrite")
    def cache_key_rewrite(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyRewriteArgs']:
        return pulumi.get(self, "cache_key_rewrite")

    @cache_key_rewrite.setter
    def cache_key_rewrite(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyRewriteArgs']):
        pulumi.set(self, "cache_key_rewrite", value)

    @property
    @pulumi.getter(name="cachePost")
    def cache_post(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCachePostArgs']:
        return pulumi.get(self, "cache_post")

    @cache_post.setter
    def cache_post(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCachePostArgs']):
        pulumi.set(self, "cache_post", value)

    @property
    @pulumi.getter(name="cacheRedirect")
    def cache_redirect(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheRedirectArgs']:
        return pulumi.get(self, "cache_redirect")

    @cache_redirect.setter
    def cache_redirect(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheRedirectArgs']):
        pulumi.set(self, "cache_redirect", value)

    @property
    @pulumi.getter(name="cacheTag")
    def cache_tag(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagArgs']:
        return pulumi.get(self, "cache_tag")

    @cache_tag.setter
    def cache_tag(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagArgs']):
        pulumi.set(self, "cache_tag", value)

    @property
    @pulumi.getter(name="cacheTagVisible")
    def cache_tag_visible(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagVisibleArgs']:
        return pulumi.get(self, "cache_tag_visible")

    @cache_tag_visible.setter
    def cache_tag_visible(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagVisibleArgs']):
        pulumi.set(self, "cache_tag_visible", value)

    @property
    @pulumi.getter
    def caching(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCachingArgs']:
        return pulumi.get(self, "caching")

    @caching.setter
    def caching(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCachingArgs']):
        pulumi.set(self, "caching", value)

    @property
    @pulumi.getter(name="centralAuthorization")
    def central_authorization(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCentralAuthorizationArgs']:
        return pulumi.get(self, "central_authorization")

    @central_authorization.setter
    def central_authorization(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCentralAuthorizationArgs']):
        pulumi.set(self, "central_authorization", value)

    @property
    @pulumi.getter(name="chaseRedirects")
    def chase_redirects(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorChaseRedirectsArgs']:
        return pulumi.get(self, "chase_redirects")

    @chase_redirects.setter
    def chase_redirects(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorChaseRedirectsArgs']):
        pulumi.set(self, "chase_redirects", value)

    @property
    @pulumi.getter(name="clientCharacteristics")
    def client_characteristics(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorClientCharacteristicsArgs']:
        return pulumi.get(self, "client_characteristics")

    @client_characteristics.setter
    def client_characteristics(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorClientCharacteristicsArgs']):
        pulumi.set(self, "client_characteristics", value)

    @property
    @pulumi.getter(name="cloudInterconnects")
    def cloud_interconnects(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCloudInterconnectsArgs']:
        return pulumi.get(self, "cloud_interconnects")

    @cloud_interconnects.setter
    def cloud_interconnects(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCloudInterconnectsArgs']):
        pulumi.set(self, "cloud_interconnects", value)

    @property
    @pulumi.getter(name="cloudWrapper")
    def cloud_wrapper(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperArgs']:
        return pulumi.get(self, "cloud_wrapper")

    @cloud_wrapper.setter
    def cloud_wrapper(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperArgs']):
        pulumi.set(self, "cloud_wrapper", value)

    @property
    @pulumi.getter(name="cloudWrapperAdvanced")
    def cloud_wrapper_advanced(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperAdvancedArgs']:
        return pulumi.get(self, "cloud_wrapper_advanced")

    @cloud_wrapper_advanced.setter
    def cloud_wrapper_advanced(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperAdvancedArgs']):
        pulumi.set(self, "cloud_wrapper_advanced", value)

    @property
    @pulumi.getter(name="conditionalOrigin")
    def conditional_origin(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorConditionalOriginArgs']:
        return pulumi.get(self, "conditional_origin")

    @conditional_origin.setter
    def conditional_origin(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorConditionalOriginArgs']):
        pulumi.set(self, "conditional_origin", value)

    @property
    @pulumi.getter(name="constructResponse")
    def construct_response(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorConstructResponseArgs']:
        return pulumi.get(self, "construct_response")

    @construct_response.setter
    def construct_response(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorConstructResponseArgs']):
        pulumi.set(self, "construct_response", value)

    @property
    @pulumi.getter(name="contentCharacteristics")
    def content_characteristics(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsArgs']:
        return pulumi.get(self, "content_characteristics")

    @content_characteristics.setter
    def content_characteristics(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsArgs']):
        pulumi.set(self, "content_characteristics", value)

    @property
    @pulumi.getter(name="contentCharacteristicsAmd")
    def content_characteristics_amd(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsAmdArgs']:
        return pulumi.get(self, "content_characteristics_amd")

    @content_characteristics_amd.setter
    def content_characteristics_amd(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsAmdArgs']):
        pulumi.set(self, "content_characteristics_amd", value)

    @property
    @pulumi.getter(name="contentCharacteristicsDd")
    def content_characteristics_dd(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsDdArgs']:
        return pulumi.get(self, "content_characteristics_dd")

    @content_characteristics_dd.setter
    def content_characteristics_dd(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsDdArgs']):
        pulumi.set(self, "content_characteristics_dd", value)

    @property
    @pulumi.getter(name="contentCharacteristicsWsdLargeFile")
    def content_characteristics_wsd_large_file(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLargeFileArgs']:
        return pulumi.get(self, "content_characteristics_wsd_large_file")

    @content_characteristics_wsd_large_file.setter
    def content_characteristics_wsd_large_file(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLargeFileArgs']):
        pulumi.set(self, "content_characteristics_wsd_large_file", value)

    @property
    @pulumi.getter(name="contentCharacteristicsWsdLive")
    def content_characteristics_wsd_live(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLiveArgs']:
        return pulumi.get(self, "content_characteristics_wsd_live")

    @content_characteristics_wsd_live.setter
    def content_characteristics_wsd_live(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLiveArgs']):
        pulumi.set(self, "content_characteristics_wsd_live", value)

    @property
    @pulumi.getter(name="contentCharacteristicsWsdVod")
    def content_characteristics_wsd_vod(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdVodArgs']:
        return pulumi.get(self, "content_characteristics_wsd_vod")

    @content_characteristics_wsd_vod.setter
    def content_characteristics_wsd_vod(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdVodArgs']):
        pulumi.set(self, "content_characteristics_wsd_vod", value)

    @property
    @pulumi.getter(name="contentPrePosition")
    def content_pre_position(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentPrePositionArgs']:
        return pulumi.get(self, "content_pre_position")

    @content_pre_position.setter
    def content_pre_position(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentPrePositionArgs']):
        pulumi.set(self, "content_pre_position", value)

    @property
    @pulumi.getter(name="contentTargetingProtection")
    def content_targeting_protection(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentTargetingProtectionArgs']:
        return pulumi.get(self, "content_targeting_protection")

    @content_targeting_protection.setter
    def content_targeting_protection(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorContentTargetingProtectionArgs']):
        pulumi.set(self, "content_targeting_protection", value)

    @property
    @pulumi.getter(name="corsSupport")
    def cors_support(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCorsSupportArgs']:
        return pulumi.get(self, "cors_support")

    @cors_support.setter
    def cors_support(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCorsSupportArgs']):
        pulumi.set(self, "cors_support", value)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeArgs']:
        return pulumi.get(self, "cp_code")

    @cp_code.setter
    def cp_code(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeArgs']):
        pulumi.set(self, "cp_code", value)

    @property
    @pulumi.getter(name="customBehavior")
    def custom_behavior(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCustomBehaviorArgs']:
        return pulumi.get(self, "custom_behavior")

    @custom_behavior.setter
    def custom_behavior(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCustomBehaviorArgs']):
        pulumi.set(self, "custom_behavior", value)

    @property
    @pulumi.getter
    def datastream(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDatastreamArgs']:
        return pulumi.get(self, "datastream")

    @datastream.setter
    def datastream(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDatastreamArgs']):
        pulumi.set(self, "datastream", value)

    @property
    @pulumi.getter
    def dcp(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpArgs']:
        return pulumi.get(self, "dcp")

    @dcp.setter
    def dcp(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpArgs']):
        pulumi.set(self, "dcp", value)

    @property
    @pulumi.getter(name="dcpAuthHmacTransformation")
    def dcp_auth_hmac_transformation(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthHmacTransformationArgs']:
        return pulumi.get(self, "dcp_auth_hmac_transformation")

    @dcp_auth_hmac_transformation.setter
    def dcp_auth_hmac_transformation(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthHmacTransformationArgs']):
        pulumi.set(self, "dcp_auth_hmac_transformation", value)

    @property
    @pulumi.getter(name="dcpAuthRegexTransformation")
    def dcp_auth_regex_transformation(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthRegexTransformationArgs']:
        return pulumi.get(self, "dcp_auth_regex_transformation")

    @dcp_auth_regex_transformation.setter
    def dcp_auth_regex_transformation(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthRegexTransformationArgs']):
        pulumi.set(self, "dcp_auth_regex_transformation", value)

    @property
    @pulumi.getter(name="dcpAuthSubstringTransformation")
    def dcp_auth_substring_transformation(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthSubstringTransformationArgs']:
        return pulumi.get(self, "dcp_auth_substring_transformation")

    @dcp_auth_substring_transformation.setter
    def dcp_auth_substring_transformation(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthSubstringTransformationArgs']):
        pulumi.set(self, "dcp_auth_substring_transformation", value)

    @property
    @pulumi.getter(name="dcpAuthVariableExtractor")
    def dcp_auth_variable_extractor(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthVariableExtractorArgs']:
        return pulumi.get(self, "dcp_auth_variable_extractor")

    @dcp_auth_variable_extractor.setter
    def dcp_auth_variable_extractor(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthVariableExtractorArgs']):
        pulumi.set(self, "dcp_auth_variable_extractor", value)

    @property
    @pulumi.getter(name="dcpDefaultAuthzGroups")
    def dcp_default_authz_groups(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpDefaultAuthzGroupsArgs']:
        return pulumi.get(self, "dcp_default_authz_groups")

    @dcp_default_authz_groups.setter
    def dcp_default_authz_groups(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpDefaultAuthzGroupsArgs']):
        pulumi.set(self, "dcp_default_authz_groups", value)

    @property
    @pulumi.getter(name="dcpDevRelations")
    def dcp_dev_relations(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpDevRelationsArgs']:
        return pulumi.get(self, "dcp_dev_relations")

    @dcp_dev_relations.setter
    def dcp_dev_relations(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpDevRelationsArgs']):
        pulumi.set(self, "dcp_dev_relations", value)

    @property
    @pulumi.getter(name="dcpRealTimeAuth")
    def dcp_real_time_auth(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpRealTimeAuthArgs']:
        return pulumi.get(self, "dcp_real_time_auth")

    @dcp_real_time_auth.setter
    def dcp_real_time_auth(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDcpRealTimeAuthArgs']):
        pulumi.set(self, "dcp_real_time_auth", value)

    @property
    @pulumi.getter(name="deliveryReceipt")
    def delivery_receipt(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDeliveryReceiptArgs']:
        return pulumi.get(self, "delivery_receipt")

    @delivery_receipt.setter
    def delivery_receipt(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDeliveryReceiptArgs']):
        pulumi.set(self, "delivery_receipt", value)

    @property
    @pulumi.getter(name="denyAccess")
    def deny_access(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDenyAccessArgs']:
        return pulumi.get(self, "deny_access")

    @deny_access.setter
    def deny_access(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDenyAccessArgs']):
        pulumi.set(self, "deny_access", value)

    @property
    @pulumi.getter(name="denyDirectFailoverAccess")
    def deny_direct_failover_access(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDenyDirectFailoverAccessArgs']:
        return pulumi.get(self, "deny_direct_failover_access")

    @deny_direct_failover_access.setter
    def deny_direct_failover_access(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDenyDirectFailoverAccessArgs']):
        pulumi.set(self, "deny_direct_failover_access", value)

    @property
    @pulumi.getter(name="deviceCharacteristicCacheId")
    def device_characteristic_cache_id(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicCacheIdArgs']:
        return pulumi.get(self, "device_characteristic_cache_id")

    @device_characteristic_cache_id.setter
    def device_characteristic_cache_id(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicCacheIdArgs']):
        pulumi.set(self, "device_characteristic_cache_id", value)

    @property
    @pulumi.getter(name="deviceCharacteristicHeader")
    def device_characteristic_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicHeaderArgs']:
        return pulumi.get(self, "device_characteristic_header")

    @device_characteristic_header.setter
    def device_characteristic_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicHeaderArgs']):
        pulumi.set(self, "device_characteristic_header", value)

    @property
    @pulumi.getter(name="dnsAsyncRefresh")
    def dns_async_refresh(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDnsAsyncRefreshArgs']:
        return pulumi.get(self, "dns_async_refresh")

    @dns_async_refresh.setter
    def dns_async_refresh(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDnsAsyncRefreshArgs']):
        pulumi.set(self, "dns_async_refresh", value)

    @property
    @pulumi.getter(name="dnsPrefresh")
    def dns_prefresh(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDnsPrefreshArgs']:
        return pulumi.get(self, "dns_prefresh")

    @dns_prefresh.setter
    def dns_prefresh(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDnsPrefreshArgs']):
        pulumi.set(self, "dns_prefresh", value)

    @property
    @pulumi.getter(name="downgradeProtocol")
    def downgrade_protocol(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDowngradeProtocolArgs']:
        return pulumi.get(self, "downgrade_protocol")

    @downgrade_protocol.setter
    def downgrade_protocol(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDowngradeProtocolArgs']):
        pulumi.set(self, "downgrade_protocol", value)

    @property
    @pulumi.getter(name="downloadCompleteMarker")
    def download_complete_marker(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDownloadCompleteMarkerArgs']:
        return pulumi.get(self, "download_complete_marker")

    @download_complete_marker.setter
    def download_complete_marker(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDownloadCompleteMarkerArgs']):
        pulumi.set(self, "download_complete_marker", value)

    @property
    @pulumi.getter(name="downloadNotification")
    def download_notification(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDownloadNotificationArgs']:
        return pulumi.get(self, "download_notification")

    @download_notification.setter
    def download_notification(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDownloadNotificationArgs']):
        pulumi.set(self, "download_notification", value)

    @property
    @pulumi.getter(name="downstreamCache")
    def downstream_cache(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDownstreamCacheArgs']:
        return pulumi.get(self, "downstream_cache")

    @downstream_cache.setter
    def downstream_cache(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDownstreamCacheArgs']):
        pulumi.set(self, "downstream_cache", value)

    @property
    @pulumi.getter(name="dynamicThroughtputOptimization")
    def dynamic_throughtput_optimization(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationArgs']:
        return pulumi.get(self, "dynamic_throughtput_optimization")

    @dynamic_throughtput_optimization.setter
    def dynamic_throughtput_optimization(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationArgs']):
        pulumi.set(self, "dynamic_throughtput_optimization", value)

    @property
    @pulumi.getter(name="dynamicThroughtputOptimizationOverride")
    def dynamic_throughtput_optimization_override(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationOverrideArgs']:
        return pulumi.get(self, "dynamic_throughtput_optimization_override")

    @dynamic_throughtput_optimization_override.setter
    def dynamic_throughtput_optimization_override(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationOverrideArgs']):
        pulumi.set(self, "dynamic_throughtput_optimization_override", value)

    @property
    @pulumi.getter(name="dynamicWebContent")
    def dynamic_web_content(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDynamicWebContentArgs']:
        return pulumi.get(self, "dynamic_web_content")

    @dynamic_web_content.setter
    def dynamic_web_content(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorDynamicWebContentArgs']):
        pulumi.set(self, "dynamic_web_content", value)

    @property
    @pulumi.getter(name="ecmsBulkUpload")
    def ecms_bulk_upload(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEcmsBulkUploadArgs']:
        return pulumi.get(self, "ecms_bulk_upload")

    @ecms_bulk_upload.setter
    def ecms_bulk_upload(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEcmsBulkUploadArgs']):
        pulumi.set(self, "ecms_bulk_upload", value)

    @property
    @pulumi.getter(name="ecmsDatabase")
    def ecms_database(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatabaseArgs']:
        return pulumi.get(self, "ecms_database")

    @ecms_database.setter
    def ecms_database(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatabaseArgs']):
        pulumi.set(self, "ecms_database", value)

    @property
    @pulumi.getter(name="ecmsDataset")
    def ecms_dataset(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatasetArgs']:
        return pulumi.get(self, "ecms_dataset")

    @ecms_dataset.setter
    def ecms_dataset(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatasetArgs']):
        pulumi.set(self, "ecms_dataset", value)

    @property
    @pulumi.getter(name="ecmsObjectKey")
    def ecms_object_key(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEcmsObjectKeyArgs']:
        return pulumi.get(self, "ecms_object_key")

    @ecms_object_key.setter
    def ecms_object_key(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEcmsObjectKeyArgs']):
        pulumi.set(self, "ecms_object_key", value)

    @property
    @pulumi.getter(name="edgeConnect")
    def edge_connect(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeConnectArgs']:
        return pulumi.get(self, "edge_connect")

    @edge_connect.setter
    def edge_connect(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeConnectArgs']):
        pulumi.set(self, "edge_connect", value)

    @property
    @pulumi.getter(name="edgeLoadBalancingAdvanced")
    def edge_load_balancing_advanced(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingAdvancedArgs']:
        return pulumi.get(self, "edge_load_balancing_advanced")

    @edge_load_balancing_advanced.setter
    def edge_load_balancing_advanced(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingAdvancedArgs']):
        pulumi.set(self, "edge_load_balancing_advanced", value)

    @property
    @pulumi.getter(name="edgeLoadBalancingDataCenter")
    def edge_load_balancing_data_center(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterArgs']:
        return pulumi.get(self, "edge_load_balancing_data_center")

    @edge_load_balancing_data_center.setter
    def edge_load_balancing_data_center(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterArgs']):
        pulumi.set(self, "edge_load_balancing_data_center", value)

    @property
    @pulumi.getter(name="edgeLoadBalancingOrigin")
    def edge_load_balancing_origin(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingOriginArgs']:
        return pulumi.get(self, "edge_load_balancing_origin")

    @edge_load_balancing_origin.setter
    def edge_load_balancing_origin(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingOriginArgs']):
        pulumi.set(self, "edge_load_balancing_origin", value)

    @property
    @pulumi.getter(name="edgeOriginAuthorization")
    def edge_origin_authorization(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeOriginAuthorizationArgs']:
        return pulumi.get(self, "edge_origin_authorization")

    @edge_origin_authorization.setter
    def edge_origin_authorization(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeOriginAuthorizationArgs']):
        pulumi.set(self, "edge_origin_authorization", value)

    @property
    @pulumi.getter(name="edgeRedirector")
    def edge_redirector(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorArgs']:
        return pulumi.get(self, "edge_redirector")

    @edge_redirector.setter
    def edge_redirector(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorArgs']):
        pulumi.set(self, "edge_redirector", value)

    @property
    @pulumi.getter(name="edgeScape")
    def edge_scape(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeScapeArgs']:
        return pulumi.get(self, "edge_scape")

    @edge_scape.setter
    def edge_scape(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeScapeArgs']):
        pulumi.set(self, "edge_scape", value)

    @property
    @pulumi.getter(name="edgeSideIncludes")
    def edge_side_includes(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeSideIncludesArgs']:
        return pulumi.get(self, "edge_side_includes")

    @edge_side_includes.setter
    def edge_side_includes(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeSideIncludesArgs']):
        pulumi.set(self, "edge_side_includes", value)

    @property
    @pulumi.getter(name="edgeWorker")
    def edge_worker(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeWorkerArgs']:
        return pulumi.get(self, "edge_worker")

    @edge_worker.setter
    def edge_worker(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeWorkerArgs']):
        pulumi.set(self, "edge_worker", value)

    @property
    @pulumi.getter(name="enhancedAkamaiProtocol")
    def enhanced_akamai_protocol(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedAkamaiProtocolArgs']:
        return pulumi.get(self, "enhanced_akamai_protocol")

    @enhanced_akamai_protocol.setter
    def enhanced_akamai_protocol(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedAkamaiProtocolArgs']):
        pulumi.set(self, "enhanced_akamai_protocol", value)

    @property
    @pulumi.getter(name="enhancedProxyDetection")
    def enhanced_proxy_detection(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedProxyDetectionArgs']:
        return pulumi.get(self, "enhanced_proxy_detection")

    @enhanced_proxy_detection.setter
    def enhanced_proxy_detection(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedProxyDetectionArgs']):
        pulumi.set(self, "enhanced_proxy_detection", value)

    @property
    @pulumi.getter(name="epdForwardHeaderEnrichment")
    def epd_forward_header_enrichment(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEpdForwardHeaderEnrichmentArgs']:
        return pulumi.get(self, "epd_forward_header_enrichment")

    @epd_forward_header_enrichment.setter
    def epd_forward_header_enrichment(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEpdForwardHeaderEnrichmentArgs']):
        pulumi.set(self, "epd_forward_header_enrichment", value)

    @property
    @pulumi.getter(name="failAction")
    def fail_action(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFailActionArgs']:
        return pulumi.get(self, "fail_action")

    @fail_action.setter
    def fail_action(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFailActionArgs']):
        pulumi.set(self, "fail_action", value)

    @property
    @pulumi.getter(name="failoverBotManagerFeatureCompatibility")
    def failover_bot_manager_feature_compatibility(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFailoverBotManagerFeatureCompatibilityArgs']:
        return pulumi.get(self, "failover_bot_manager_feature_compatibility")

    @failover_bot_manager_feature_compatibility.setter
    def failover_bot_manager_feature_compatibility(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFailoverBotManagerFeatureCompatibilityArgs']):
        pulumi.set(self, "failover_bot_manager_feature_compatibility", value)

    @property
    @pulumi.getter(name="fastInvalidate")
    def fast_invalidate(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFastInvalidateArgs']:
        return pulumi.get(self, "fast_invalidate")

    @fast_invalidate.setter
    def fast_invalidate(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFastInvalidateArgs']):
        pulumi.set(self, "fast_invalidate", value)

    @property
    @pulumi.getter(name="firstPartyMarketing")
    def first_party_marketing(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingArgs']:
        return pulumi.get(self, "first_party_marketing")

    @first_party_marketing.setter
    def first_party_marketing(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingArgs']):
        pulumi.set(self, "first_party_marketing", value)

    @property
    @pulumi.getter(name="firstPartyMarketingPlus")
    def first_party_marketing_plus(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusArgs']:
        return pulumi.get(self, "first_party_marketing_plus")

    @first_party_marketing_plus.setter
    def first_party_marketing_plus(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusArgs']):
        pulumi.set(self, "first_party_marketing_plus", value)

    @property
    @pulumi.getter(name="forwardRewrite")
    def forward_rewrite(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteArgs']:
        return pulumi.get(self, "forward_rewrite")

    @forward_rewrite.setter
    def forward_rewrite(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteArgs']):
        pulumi.set(self, "forward_rewrite", value)

    @property
    @pulumi.getter(name="frontEndOptimization")
    def front_end_optimization(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFrontEndOptimizationArgs']:
        return pulumi.get(self, "front_end_optimization")

    @front_end_optimization.setter
    def front_end_optimization(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFrontEndOptimizationArgs']):
        pulumi.set(self, "front_end_optimization", value)

    @property
    @pulumi.getter
    def g2oheader(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorG2oheaderArgs']:
        return pulumi.get(self, "g2oheader")

    @g2oheader.setter
    def g2oheader(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorG2oheaderArgs']):
        pulumi.set(self, "g2oheader", value)

    @property
    @pulumi.getter(name="globalRequestNumber")
    def global_request_number(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorGlobalRequestNumberArgs']:
        return pulumi.get(self, "global_request_number")

    @global_request_number.setter
    def global_request_number(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorGlobalRequestNumberArgs']):
        pulumi.set(self, "global_request_number", value)

    @property
    @pulumi.getter(name="graphqlCaching")
    def graphql_caching(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorGraphqlCachingArgs']:
        return pulumi.get(self, "graphql_caching")

    @graphql_caching.setter
    def graphql_caching(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorGraphqlCachingArgs']):
        pulumi.set(self, "graphql_caching", value)

    @property
    @pulumi.getter(name="gzipResponse")
    def gzip_response(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorGzipResponseArgs']:
        return pulumi.get(self, "gzip_response")

    @gzip_response.setter
    def gzip_response(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorGzipResponseArgs']):
        pulumi.set(self, "gzip_response", value)

    @property
    @pulumi.getter(name="hdDataAdvanced")
    def hd_data_advanced(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHdDataAdvancedArgs']:
        return pulumi.get(self, "hd_data_advanced")

    @hd_data_advanced.setter
    def hd_data_advanced(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHdDataAdvancedArgs']):
        pulumi.set(self, "hd_data_advanced", value)

    @property
    @pulumi.getter(name="healthDetection")
    def health_detection(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHealthDetectionArgs']:
        return pulumi.get(self, "health_detection")

    @health_detection.setter
    def health_detection(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHealthDetectionArgs']):
        pulumi.set(self, "health_detection", value)

    @property
    @pulumi.getter(name="hsafEipBinding")
    def hsaf_eip_binding(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHsafEipBindingArgs']:
        return pulumi.get(self, "hsaf_eip_binding")

    @hsaf_eip_binding.setter
    def hsaf_eip_binding(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHsafEipBindingArgs']):
        pulumi.set(self, "hsaf_eip_binding", value)

    @property
    @pulumi.getter
    def http2(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHttp2Args']:
        return pulumi.get(self, "http2")

    @http2.setter
    def http2(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHttp2Args']):
        pulumi.set(self, "http2", value)

    @property
    @pulumi.getter
    def http3(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHttp3Args']:
        return pulumi.get(self, "http3")

    @http3.setter
    def http3(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHttp3Args']):
        pulumi.set(self, "http3", value)

    @property
    @pulumi.getter(name="httpStrictTransportSecurity")
    def http_strict_transport_security(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHttpStrictTransportSecurityArgs']:
        return pulumi.get(self, "http_strict_transport_security")

    @http_strict_transport_security.setter
    def http_strict_transport_security(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHttpStrictTransportSecurityArgs']):
        pulumi.set(self, "http_strict_transport_security", value)

    @property
    @pulumi.getter(name="httpToHttpsUpgrade")
    def http_to_https_upgrade(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHttpToHttpsUpgradeArgs']:
        return pulumi.get(self, "http_to_https_upgrade")

    @http_to_https_upgrade.setter
    def http_to_https_upgrade(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorHttpToHttpsUpgradeArgs']):
        pulumi.set(self, "http_to_https_upgrade", value)

    @property
    @pulumi.getter(name="imOverride")
    def im_override(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImOverrideArgs']:
        return pulumi.get(self, "im_override")

    @im_override.setter
    def im_override(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImOverrideArgs']):
        pulumi.set(self, "im_override", value)

    @property
    @pulumi.getter(name="imageAndVideoManager")
    def image_and_video_manager(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerArgs']:
        return pulumi.get(self, "image_and_video_manager")

    @image_and_video_manager.setter
    def image_and_video_manager(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerArgs']):
        pulumi.set(self, "image_and_video_manager", value)

    @property
    @pulumi.getter(name="imageManager")
    def image_manager(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerArgs']:
        return pulumi.get(self, "image_manager")

    @image_manager.setter
    def image_manager(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerArgs']):
        pulumi.set(self, "image_manager", value)

    @property
    @pulumi.getter(name="imageManagerVideo")
    def image_manager_video(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoArgs']:
        return pulumi.get(self, "image_manager_video")

    @image_manager_video.setter
    def image_manager_video(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoArgs']):
        pulumi.set(self, "image_manager_video", value)

    @property
    @pulumi.getter
    def include(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorIncludeArgs']:
        return pulumi.get(self, "include")

    @include.setter
    def include(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorIncludeArgs']):
        pulumi.set(self, "include", value)

    @property
    @pulumi.getter(name="inputValidation")
    def input_validation(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationArgs']:
        return pulumi.get(self, "input_validation")

    @input_validation.setter
    def input_validation(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationArgs']):
        pulumi.set(self, "input_validation", value)

    @property
    @pulumi.getter
    def instant(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorInstantArgs']:
        return pulumi.get(self, "instant")

    @instant.setter
    def instant(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorInstantArgs']):
        pulumi.set(self, "instant", value)

    @property
    @pulumi.getter(name="instantConfig")
    def instant_config(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorInstantConfigArgs']:
        return pulumi.get(self, "instant_config")

    @instant_config.setter
    def instant_config(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorInstantConfigArgs']):
        pulumi.set(self, "instant_config", value)

    @property
    @pulumi.getter(name="largeFileOptimization")
    def large_file_optimization(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationArgs']:
        return pulumi.get(self, "large_file_optimization")

    @large_file_optimization.setter
    def large_file_optimization(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationArgs']):
        pulumi.set(self, "large_file_optimization", value)

    @property
    @pulumi.getter(name="largeFileOptimizationAdvanced")
    def large_file_optimization_advanced(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationAdvancedArgs']:
        return pulumi.get(self, "large_file_optimization_advanced")

    @large_file_optimization_advanced.setter
    def large_file_optimization_advanced(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationAdvancedArgs']):
        pulumi.set(self, "large_file_optimization_advanced", value)

    @property
    @pulumi.getter(name="limitBitRate")
    def limit_bit_rate(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateArgs']:
        return pulumi.get(self, "limit_bit_rate")

    @limit_bit_rate.setter
    def limit_bit_rate(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateArgs']):
        pulumi.set(self, "limit_bit_rate", value)

    @property
    @pulumi.getter(name="logCustom")
    def log_custom(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorLogCustomArgs']:
        return pulumi.get(self, "log_custom")

    @log_custom.setter
    def log_custom(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorLogCustomArgs']):
        pulumi.set(self, "log_custom", value)

    @property
    @pulumi.getter(name="mPulse")
    def m_pulse(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMPulseArgs']:
        return pulumi.get(self, "m_pulse")

    @m_pulse.setter
    def m_pulse(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMPulseArgs']):
        pulumi.set(self, "m_pulse", value)

    @property
    @pulumi.getter(name="manifestPersonalization")
    def manifest_personalization(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorManifestPersonalizationArgs']:
        return pulumi.get(self, "manifest_personalization")

    @manifest_personalization.setter
    def manifest_personalization(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorManifestPersonalizationArgs']):
        pulumi.set(self, "manifest_personalization", value)

    @property
    @pulumi.getter(name="manifestRerouting")
    def manifest_rerouting(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorManifestReroutingArgs']:
        return pulumi.get(self, "manifest_rerouting")

    @manifest_rerouting.setter
    def manifest_rerouting(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorManifestReroutingArgs']):
        pulumi.set(self, "manifest_rerouting", value)

    @property
    @pulumi.getter(name="manualServerPush")
    def manual_server_push(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorManualServerPushArgs']:
        return pulumi.get(self, "manual_server_push")

    @manual_server_push.setter
    def manual_server_push(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorManualServerPushArgs']):
        pulumi.set(self, "manual_server_push", value)

    @property
    @pulumi.getter(name="mediaAcceleration")
    def media_acceleration(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationArgs']:
        return pulumi.get(self, "media_acceleration")

    @media_acceleration.setter
    def media_acceleration(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationArgs']):
        pulumi.set(self, "media_acceleration", value)

    @property
    @pulumi.getter(name="mediaAccelerationQuicOptout")
    def media_acceleration_quic_optout(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationQuicOptoutArgs']:
        return pulumi.get(self, "media_acceleration_quic_optout")

    @media_acceleration_quic_optout.setter
    def media_acceleration_quic_optout(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationQuicOptoutArgs']):
        pulumi.set(self, "media_acceleration_quic_optout", value)

    @property
    @pulumi.getter(name="mediaClient")
    def media_client(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMediaClientArgs']:
        return pulumi.get(self, "media_client")

    @media_client.setter
    def media_client(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMediaClientArgs']):
        pulumi.set(self, "media_client", value)

    @property
    @pulumi.getter(name="mediaFileRetrievalOptimization")
    def media_file_retrieval_optimization(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMediaFileRetrievalOptimizationArgs']:
        return pulumi.get(self, "media_file_retrieval_optimization")

    @media_file_retrieval_optimization.setter
    def media_file_retrieval_optimization(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMediaFileRetrievalOptimizationArgs']):
        pulumi.set(self, "media_file_retrieval_optimization", value)

    @property
    @pulumi.getter(name="mediaOriginFailover")
    def media_origin_failover(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMediaOriginFailoverArgs']:
        return pulumi.get(self, "media_origin_failover")

    @media_origin_failover.setter
    def media_origin_failover(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMediaOriginFailoverArgs']):
        pulumi.set(self, "media_origin_failover", value)

    @property
    @pulumi.getter(name="metadataCaching")
    def metadata_caching(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMetadataCachingArgs']:
        return pulumi.get(self, "metadata_caching")

    @metadata_caching.setter
    def metadata_caching(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMetadataCachingArgs']):
        pulumi.set(self, "metadata_caching", value)

    @property
    @pulumi.getter(name="mobileSdkPerformance")
    def mobile_sdk_performance(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMobileSdkPerformanceArgs']:
        return pulumi.get(self, "mobile_sdk_performance")

    @mobile_sdk_performance.setter
    def mobile_sdk_performance(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorMobileSdkPerformanceArgs']):
        pulumi.set(self, "mobile_sdk_performance", value)

    @property
    @pulumi.getter(name="modifyIncomingRequestHeader")
    def modify_incoming_request_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingRequestHeaderArgs']:
        return pulumi.get(self, "modify_incoming_request_header")

    @modify_incoming_request_header.setter
    def modify_incoming_request_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingRequestHeaderArgs']):
        pulumi.set(self, "modify_incoming_request_header", value)

    @property
    @pulumi.getter(name="modifyIncomingResponseHeader")
    def modify_incoming_response_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingResponseHeaderArgs']:
        return pulumi.get(self, "modify_incoming_response_header")

    @modify_incoming_response_header.setter
    def modify_incoming_response_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingResponseHeaderArgs']):
        pulumi.set(self, "modify_incoming_response_header", value)

    @property
    @pulumi.getter(name="modifyOutgoingRequestHeader")
    def modify_outgoing_request_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingRequestHeaderArgs']:
        return pulumi.get(self, "modify_outgoing_request_header")

    @modify_outgoing_request_header.setter
    def modify_outgoing_request_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingRequestHeaderArgs']):
        pulumi.set(self, "modify_outgoing_request_header", value)

    @property
    @pulumi.getter(name="modifyOutgoingResponseHeader")
    def modify_outgoing_response_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingResponseHeaderArgs']:
        return pulumi.get(self, "modify_outgoing_response_header")

    @modify_outgoing_response_header.setter
    def modify_outgoing_response_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingResponseHeaderArgs']):
        pulumi.set(self, "modify_outgoing_response_header", value)

    @property
    @pulumi.getter(name="modifyViaHeader")
    def modify_via_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorModifyViaHeaderArgs']:
        return pulumi.get(self, "modify_via_header")

    @modify_via_header.setter
    def modify_via_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorModifyViaHeaderArgs']):
        pulumi.set(self, "modify_via_header", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginArgs']:
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginArgs']):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="originCharacteristics")
    def origin_characteristics(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsArgs']:
        return pulumi.get(self, "origin_characteristics")

    @origin_characteristics.setter
    def origin_characteristics(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsArgs']):
        pulumi.set(self, "origin_characteristics", value)

    @property
    @pulumi.getter(name="originCharacteristicsWsd")
    def origin_characteristics_wsd(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsWsdArgs']:
        return pulumi.get(self, "origin_characteristics_wsd")

    @origin_characteristics_wsd.setter
    def origin_characteristics_wsd(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsWsdArgs']):
        pulumi.set(self, "origin_characteristics_wsd", value)

    @property
    @pulumi.getter(name="originFailureRecoveryMethod")
    def origin_failure_recovery_method(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryMethodArgs']:
        return pulumi.get(self, "origin_failure_recovery_method")

    @origin_failure_recovery_method.setter
    def origin_failure_recovery_method(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryMethodArgs']):
        pulumi.set(self, "origin_failure_recovery_method", value)

    @property
    @pulumi.getter(name="originFailureRecoveryPolicy")
    def origin_failure_recovery_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryPolicyArgs']:
        return pulumi.get(self, "origin_failure_recovery_policy")

    @origin_failure_recovery_policy.setter
    def origin_failure_recovery_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryPolicyArgs']):
        pulumi.set(self, "origin_failure_recovery_policy", value)

    @property
    @pulumi.getter(name="originIpAcl")
    def origin_ip_acl(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginIpAclArgs']:
        return pulumi.get(self, "origin_ip_acl")

    @origin_ip_acl.setter
    def origin_ip_acl(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginIpAclArgs']):
        pulumi.set(self, "origin_ip_acl", value)

    @property
    @pulumi.getter(name="persistentClientConnection")
    def persistent_client_connection(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPersistentClientConnectionArgs']:
        return pulumi.get(self, "persistent_client_connection")

    @persistent_client_connection.setter
    def persistent_client_connection(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPersistentClientConnectionArgs']):
        pulumi.set(self, "persistent_client_connection", value)

    @property
    @pulumi.getter(name="persistentConnection")
    def persistent_connection(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPersistentConnectionArgs']:
        return pulumi.get(self, "persistent_connection")

    @persistent_connection.setter
    def persistent_connection(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPersistentConnectionArgs']):
        pulumi.set(self, "persistent_connection", value)

    @property
    @pulumi.getter(name="personallyIdentifiableInformation")
    def personally_identifiable_information(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPersonallyIdentifiableInformationArgs']:
        return pulumi.get(self, "personally_identifiable_information")

    @personally_identifiable_information.setter
    def personally_identifiable_information(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPersonallyIdentifiableInformationArgs']):
        pulumi.set(self, "personally_identifiable_information", value)

    @property
    @pulumi.getter(name="phasedRelease")
    def phased_release(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseArgs']:
        return pulumi.get(self, "phased_release")

    @phased_release.setter
    def phased_release(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseArgs']):
        pulumi.set(self, "phased_release", value)

    @property
    @pulumi.getter
    def preconnect(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPreconnectArgs']:
        return pulumi.get(self, "preconnect")

    @preconnect.setter
    def preconnect(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPreconnectArgs']):
        pulumi.set(self, "preconnect", value)

    @property
    @pulumi.getter(name="predictiveContentDelivery")
    def predictive_content_delivery(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPredictiveContentDeliveryArgs']:
        return pulumi.get(self, "predictive_content_delivery")

    @predictive_content_delivery.setter
    def predictive_content_delivery(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPredictiveContentDeliveryArgs']):
        pulumi.set(self, "predictive_content_delivery", value)

    @property
    @pulumi.getter(name="predictivePrefetching")
    def predictive_prefetching(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPredictivePrefetchingArgs']:
        return pulumi.get(self, "predictive_prefetching")

    @predictive_prefetching.setter
    def predictive_prefetching(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPredictivePrefetchingArgs']):
        pulumi.set(self, "predictive_prefetching", value)

    @property
    @pulumi.getter
    def prefetch(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchArgs']:
        return pulumi.get(self, "prefetch")

    @prefetch.setter
    def prefetch(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchArgs']):
        pulumi.set(self, "prefetch", value)

    @property
    @pulumi.getter
    def prefetchable(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchableArgs']:
        return pulumi.get(self, "prefetchable")

    @prefetchable.setter
    def prefetchable(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchableArgs']):
        pulumi.set(self, "prefetchable", value)

    @property
    @pulumi.getter(name="prefreshCache")
    def prefresh_cache(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPrefreshCacheArgs']:
        return pulumi.get(self, "prefresh_cache")

    @prefresh_cache.setter
    def prefresh_cache(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPrefreshCacheArgs']):
        pulumi.set(self, "prefresh_cache", value)

    @property
    @pulumi.getter
    def quality(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorQualityArgs']:
        return pulumi.get(self, "quality")

    @quality.setter
    def quality(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorQualityArgs']):
        pulumi.set(self, "quality", value)

    @property
    @pulumi.getter(name="quicBeta")
    def quic_beta(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorQuicBetaArgs']:
        return pulumi.get(self, "quic_beta")

    @quic_beta.setter
    def quic_beta(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorQuicBetaArgs']):
        pulumi.set(self, "quic_beta", value)

    @property
    @pulumi.getter(name="randomSeek")
    def random_seek(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRandomSeekArgs']:
        return pulumi.get(self, "random_seek")

    @random_seek.setter
    def random_seek(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRandomSeekArgs']):
        pulumi.set(self, "random_seek", value)

    @property
    @pulumi.getter
    def rapid(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRapidArgs']:
        return pulumi.get(self, "rapid")

    @rapid.setter
    def rapid(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRapidArgs']):
        pulumi.set(self, "rapid", value)

    @property
    @pulumi.getter(name="readTimeout")
    def read_timeout(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorReadTimeoutArgs']:
        return pulumi.get(self, "read_timeout")

    @read_timeout.setter
    def read_timeout(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorReadTimeoutArgs']):
        pulumi.set(self, "read_timeout", value)

    @property
    @pulumi.getter(name="realTimeReporting")
    def real_time_reporting(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRealTimeReportingArgs']:
        return pulumi.get(self, "real_time_reporting")

    @real_time_reporting.setter
    def real_time_reporting(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRealTimeReportingArgs']):
        pulumi.set(self, "real_time_reporting", value)

    @property
    @pulumi.getter(name="realUserMonitoring")
    def real_user_monitoring(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRealUserMonitoringArgs']:
        return pulumi.get(self, "real_user_monitoring")

    @real_user_monitoring.setter
    def real_user_monitoring(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRealUserMonitoringArgs']):
        pulumi.set(self, "real_user_monitoring", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRedirectArgs']:
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRedirectArgs']):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter
    def redirectplus(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRedirectplusArgs']:
        return pulumi.get(self, "redirectplus")

    @redirectplus.setter
    def redirectplus(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRedirectplusArgs']):
        pulumi.set(self, "redirectplus", value)

    @property
    @pulumi.getter(name="refererChecking")
    def referer_checking(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRefererCheckingArgs']:
        return pulumi.get(self, "referer_checking")

    @referer_checking.setter
    def referer_checking(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRefererCheckingArgs']):
        pulumi.set(self, "referer_checking", value)

    @property
    @pulumi.getter(name="removeQueryParameter")
    def remove_query_parameter(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRemoveQueryParameterArgs']:
        return pulumi.get(self, "remove_query_parameter")

    @remove_query_parameter.setter
    def remove_query_parameter(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRemoveQueryParameterArgs']):
        pulumi.set(self, "remove_query_parameter", value)

    @property
    @pulumi.getter(name="removeVary")
    def remove_vary(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRemoveVaryArgs']:
        return pulumi.get(self, "remove_vary")

    @remove_vary.setter
    def remove_vary(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRemoveVaryArgs']):
        pulumi.set(self, "remove_vary", value)

    @property
    @pulumi.getter
    def report(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorReportArgs']:
        return pulumi.get(self, "report")

    @report.setter
    def report(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorReportArgs']):
        pulumi.set(self, "report", value)

    @property
    @pulumi.getter(name="requestControl")
    def request_control(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlArgs']:
        return pulumi.get(self, "request_control")

    @request_control.setter
    def request_control(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlArgs']):
        pulumi.set(self, "request_control", value)

    @property
    @pulumi.getter(name="requestTypeMarker")
    def request_type_marker(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRequestTypeMarkerArgs']:
        return pulumi.get(self, "request_type_marker")

    @request_type_marker.setter
    def request_type_marker(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRequestTypeMarkerArgs']):
        pulumi.set(self, "request_type_marker", value)

    @property
    @pulumi.getter(name="resourceOptimizer")
    def resource_optimizer(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerArgs']:
        return pulumi.get(self, "resource_optimizer")

    @resource_optimizer.setter
    def resource_optimizer(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerArgs']):
        pulumi.set(self, "resource_optimizer", value)

    @property
    @pulumi.getter(name="resourceOptimizerExtendedCompatibility")
    def resource_optimizer_extended_compatibility(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerExtendedCompatibilityArgs']:
        return pulumi.get(self, "resource_optimizer_extended_compatibility")

    @resource_optimizer_extended_compatibility.setter
    def resource_optimizer_extended_compatibility(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerExtendedCompatibilityArgs']):
        pulumi.set(self, "resource_optimizer_extended_compatibility", value)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorResponseCodeArgs']:
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorResponseCodeArgs']):
        pulumi.set(self, "response_code", value)

    @property
    @pulumi.getter(name="responseCookie")
    def response_cookie(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorResponseCookieArgs']:
        return pulumi.get(self, "response_cookie")

    @response_cookie.setter
    def response_cookie(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorResponseCookieArgs']):
        pulumi.set(self, "response_cookie", value)

    @property
    @pulumi.getter(name="restrictObjectCaching")
    def restrict_object_caching(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRestrictObjectCachingArgs']:
        return pulumi.get(self, "restrict_object_caching")

    @restrict_object_caching.setter
    def restrict_object_caching(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRestrictObjectCachingArgs']):
        pulumi.set(self, "restrict_object_caching", value)

    @property
    @pulumi.getter(name="returnCacheStatus")
    def return_cache_status(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorReturnCacheStatusArgs']:
        return pulumi.get(self, "return_cache_status")

    @return_cache_status.setter
    def return_cache_status(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorReturnCacheStatusArgs']):
        pulumi.set(self, "return_cache_status", value)

    @property
    @pulumi.getter(name="rewriteUrl")
    def rewrite_url(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRewriteUrlArgs']:
        return pulumi.get(self, "rewrite_url")

    @rewrite_url.setter
    def rewrite_url(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRewriteUrlArgs']):
        pulumi.set(self, "rewrite_url", value)

    @property
    @pulumi.getter(name="rumCustom")
    def rum_custom(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRumCustomArgs']:
        return pulumi.get(self, "rum_custom")

    @rum_custom.setter
    def rum_custom(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRumCustomArgs']):
        pulumi.set(self, "rum_custom", value)

    @property
    @pulumi.getter(name="saasDefinitions")
    def saas_definitions(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSaasDefinitionsArgs']:
        return pulumi.get(self, "saas_definitions")

    @saas_definitions.setter
    def saas_definitions(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSaasDefinitionsArgs']):
        pulumi.set(self, "saas_definitions", value)

    @property
    @pulumi.getter(name="salesForceCommerceCloudClient")
    def sales_force_commerce_cloud_client(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudClientArgs']:
        return pulumi.get(self, "sales_force_commerce_cloud_client")

    @sales_force_commerce_cloud_client.setter
    def sales_force_commerce_cloud_client(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudClientArgs']):
        pulumi.set(self, "sales_force_commerce_cloud_client", value)

    @property
    @pulumi.getter(name="salesForceCommerceCloudProvider")
    def sales_force_commerce_cloud_provider(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderArgs']:
        return pulumi.get(self, "sales_force_commerce_cloud_provider")

    @sales_force_commerce_cloud_provider.setter
    def sales_force_commerce_cloud_provider(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderArgs']):
        pulumi.set(self, "sales_force_commerce_cloud_provider", value)

    @property
    @pulumi.getter(name="salesForceCommerceCloudProviderHostHeader")
    def sales_force_commerce_cloud_provider_host_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderHostHeaderArgs']:
        return pulumi.get(self, "sales_force_commerce_cloud_provider_host_header")

    @sales_force_commerce_cloud_provider_host_header.setter
    def sales_force_commerce_cloud_provider_host_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderHostHeaderArgs']):
        pulumi.set(self, "sales_force_commerce_cloud_provider_host_header", value)

    @property
    @pulumi.getter(name="savePostDcaProcessing")
    def save_post_dca_processing(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSavePostDcaProcessingArgs']:
        return pulumi.get(self, "save_post_dca_processing")

    @save_post_dca_processing.setter
    def save_post_dca_processing(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSavePostDcaProcessingArgs']):
        pulumi.set(self, "save_post_dca_processing", value)

    @property
    @pulumi.getter(name="scheduleInvalidation")
    def schedule_invalidation(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorScheduleInvalidationArgs']:
        return pulumi.get(self, "schedule_invalidation")

    @schedule_invalidation.setter
    def schedule_invalidation(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorScheduleInvalidationArgs']):
        pulumi.set(self, "schedule_invalidation", value)

    @property
    @pulumi.getter(name="scriptManagement")
    def script_management(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorScriptManagementArgs']:
        return pulumi.get(self, "script_management")

    @script_management.setter
    def script_management(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorScriptManagementArgs']):
        pulumi.set(self, "script_management", value)

    @property
    @pulumi.getter(name="segmentedContentProtection")
    def segmented_content_protection(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedContentProtectionArgs']:
        return pulumi.get(self, "segmented_content_protection")

    @segmented_content_protection.setter
    def segmented_content_protection(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedContentProtectionArgs']):
        pulumi.set(self, "segmented_content_protection", value)

    @property
    @pulumi.getter(name="segmentedMediaOptimization")
    def segmented_media_optimization(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaOptimizationArgs']:
        return pulumi.get(self, "segmented_media_optimization")

    @segmented_media_optimization.setter
    def segmented_media_optimization(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaOptimizationArgs']):
        pulumi.set(self, "segmented_media_optimization", value)

    @property
    @pulumi.getter(name="segmentedMediaStreamingPrefetch")
    def segmented_media_streaming_prefetch(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaStreamingPrefetchArgs']:
        return pulumi.get(self, "segmented_media_streaming_prefetch")

    @segmented_media_streaming_prefetch.setter
    def segmented_media_streaming_prefetch(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaStreamingPrefetchArgs']):
        pulumi.set(self, "segmented_media_streaming_prefetch", value)

    @property
    @pulumi.getter(name="setVariable")
    def set_variable(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSetVariableArgs']:
        return pulumi.get(self, "set_variable")

    @set_variable.setter
    def set_variable(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSetVariableArgs']):
        pulumi.set(self, "set_variable", value)

    @property
    @pulumi.getter
    def shutr(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorShutrArgs']:
        return pulumi.get(self, "shutr")

    @shutr.setter
    def shutr(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorShutrArgs']):
        pulumi.set(self, "shutr", value)

    @property
    @pulumi.getter(name="simulateErrorCode")
    def simulate_error_code(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSimulateErrorCodeArgs']:
        return pulumi.get(self, "simulate_error_code")

    @simulate_error_code.setter
    def simulate_error_code(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSimulateErrorCodeArgs']):
        pulumi.set(self, "simulate_error_code", value)

    @property
    @pulumi.getter(name="siteShield")
    def site_shield(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldArgs']:
        return pulumi.get(self, "site_shield")

    @site_shield.setter
    def site_shield(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldArgs']):
        pulumi.set(self, "site_shield", value)

    @property
    @pulumi.getter(name="standardTlsMigration")
    def standard_tls_migration(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationArgs']:
        return pulumi.get(self, "standard_tls_migration")

    @standard_tls_migration.setter
    def standard_tls_migration(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationArgs']):
        pulumi.set(self, "standard_tls_migration", value)

    @property
    @pulumi.getter(name="standardTlsMigrationOverride")
    def standard_tls_migration_override(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationOverrideArgs']:
        return pulumi.get(self, "standard_tls_migration_override")

    @standard_tls_migration_override.setter
    def standard_tls_migration_override(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationOverrideArgs']):
        pulumi.set(self, "standard_tls_migration_override", value)

    @property
    @pulumi.getter(name="strictHeaderParsing")
    def strict_header_parsing(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorStrictHeaderParsingArgs']:
        return pulumi.get(self, "strict_header_parsing")

    @strict_header_parsing.setter
    def strict_header_parsing(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorStrictHeaderParsingArgs']):
        pulumi.set(self, "strict_header_parsing", value)

    @property
    @pulumi.getter(name="subCustomer")
    def sub_customer(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSubCustomerArgs']:
        return pulumi.get(self, "sub_customer")

    @sub_customer.setter
    def sub_customer(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSubCustomerArgs']):
        pulumi.set(self, "sub_customer", value)

    @property
    @pulumi.getter(name="sureRoute")
    def sure_route(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSureRouteArgs']:
        return pulumi.get(self, "sure_route")

    @sure_route.setter
    def sure_route(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSureRouteArgs']):
        pulumi.set(self, "sure_route", value)

    @property
    @pulumi.getter(name="tcpOptimization")
    def tcp_optimization(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTcpOptimizationArgs']:
        return pulumi.get(self, "tcp_optimization")

    @tcp_optimization.setter
    def tcp_optimization(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTcpOptimizationArgs']):
        pulumi.set(self, "tcp_optimization", value)

    @property
    @pulumi.getter(name="teaLeaf")
    def tea_leaf(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTeaLeafArgs']:
        return pulumi.get(self, "tea_leaf")

    @tea_leaf.setter
    def tea_leaf(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTeaLeafArgs']):
        pulumi.set(self, "tea_leaf", value)

    @property
    @pulumi.getter(name="tieredDistribution")
    def tiered_distribution(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionArgs']:
        return pulumi.get(self, "tiered_distribution")

    @tiered_distribution.setter
    def tiered_distribution(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionArgs']):
        pulumi.set(self, "tiered_distribution", value)

    @property
    @pulumi.getter(name="tieredDistributionAdvanced")
    def tiered_distribution_advanced(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionAdvancedArgs']:
        return pulumi.get(self, "tiered_distribution_advanced")

    @tiered_distribution_advanced.setter
    def tiered_distribution_advanced(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionAdvancedArgs']):
        pulumi.set(self, "tiered_distribution_advanced", value)

    @property
    @pulumi.getter(name="tieredDistributionCustomization")
    def tiered_distribution_customization(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionCustomizationArgs']:
        return pulumi.get(self, "tiered_distribution_customization")

    @tiered_distribution_customization.setter
    def tiered_distribution_customization(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionCustomizationArgs']):
        pulumi.set(self, "tiered_distribution_customization", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTimeoutArgs']:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorTimeoutArgs']):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="uidConfiguration")
    def uid_configuration(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorUidConfigurationArgs']:
        return pulumi.get(self, "uid_configuration")

    @uid_configuration.setter
    def uid_configuration(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorUidConfigurationArgs']):
        pulumi.set(self, "uid_configuration", value)

    @property
    @pulumi.getter(name="validateEntityTag")
    def validate_entity_tag(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorValidateEntityTagArgs']:
        return pulumi.get(self, "validate_entity_tag")

    @validate_entity_tag.setter
    def validate_entity_tag(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorValidateEntityTagArgs']):
        pulumi.set(self, "validate_entity_tag", value)

    @property
    @pulumi.getter(name="verifyJsonWebToken")
    def verify_json_web_token(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenArgs']:
        return pulumi.get(self, "verify_json_web_token")

    @verify_json_web_token.setter
    def verify_json_web_token(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenArgs']):
        pulumi.set(self, "verify_json_web_token", value)

    @property
    @pulumi.getter(name="verifyJsonWebTokenForDcp")
    def verify_json_web_token_for_dcp(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenForDcpArgs']:
        return pulumi.get(self, "verify_json_web_token_for_dcp")

    @verify_json_web_token_for_dcp.setter
    def verify_json_web_token_for_dcp(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenForDcpArgs']):
        pulumi.set(self, "verify_json_web_token_for_dcp", value)

    @property
    @pulumi.getter(name="verifyTokenAuthorization")
    def verify_token_authorization(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationArgs']:
        return pulumi.get(self, "verify_token_authorization")

    @verify_token_authorization.setter
    def verify_token_authorization(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationArgs']):
        pulumi.set(self, "verify_token_authorization", value)

    @property
    @pulumi.getter(name="virtualWaitingRoom")
    def virtual_waiting_room(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomArgs']:
        return pulumi.get(self, "virtual_waiting_room")

    @virtual_waiting_room.setter
    def virtual_waiting_room(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomArgs']):
        pulumi.set(self, "virtual_waiting_room", value)

    @property
    @pulumi.getter(name="virtualWaitingRoomWithEdgeWorkers")
    def virtual_waiting_room_with_edge_workers(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomWithEdgeWorkersArgs']:
        return pulumi.get(self, "virtual_waiting_room_with_edge_workers")

    @virtual_waiting_room_with_edge_workers.setter
    def virtual_waiting_room_with_edge_workers(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomWithEdgeWorkersArgs']):
        pulumi.set(self, "virtual_waiting_room_with_edge_workers", value)

    @property
    @pulumi.getter(name="visitorPrioritization")
    def visitor_prioritization(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationArgs']:
        return pulumi.get(self, "visitor_prioritization")

    @visitor_prioritization.setter
    def visitor_prioritization(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationArgs']):
        pulumi.set(self, "visitor_prioritization", value)

    @property
    @pulumi.getter(name="visitorPrioritizationFifo")
    def visitor_prioritization_fifo(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoArgs']:
        return pulumi.get(self, "visitor_prioritization_fifo")

    @visitor_prioritization_fifo.setter
    def visitor_prioritization_fifo(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoArgs']):
        pulumi.set(self, "visitor_prioritization_fifo", value)

    @property
    @pulumi.getter(name="visitorPrioritizationFifoStandalone")
    def visitor_prioritization_fifo_standalone(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoStandaloneArgs']:
        return pulumi.get(self, "visitor_prioritization_fifo_standalone")

    @visitor_prioritization_fifo_standalone.setter
    def visitor_prioritization_fifo_standalone(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoStandaloneArgs']):
        pulumi.set(self, "visitor_prioritization_fifo_standalone", value)

    @property
    @pulumi.getter
    def watermarking(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorWatermarkingArgs']:
        return pulumi.get(self, "watermarking")

    @watermarking.setter
    def watermarking(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorWatermarkingArgs']):
        pulumi.set(self, "watermarking", value)

    @property
    @pulumi.getter(name="webApplicationFirewall")
    def web_application_firewall(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallArgs']:
        return pulumi.get(self, "web_application_firewall")

    @web_application_firewall.setter
    def web_application_firewall(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallArgs']):
        pulumi.set(self, "web_application_firewall", value)

    @property
    @pulumi.getter(name="webSockets")
    def web_sockets(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorWebSocketsArgs']:
        return pulumi.get(self, "web_sockets")

    @web_sockets.setter
    def web_sockets(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorWebSocketsArgs']):
        pulumi.set(self, "web_sockets", value)

    @property
    @pulumi.getter
    def webdav(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorWebdavArgs']:
        return pulumi.get(self, "webdav")

    @webdav.setter
    def webdav(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorWebdavArgs']):
        pulumi.set(self, "webdav", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAdScalerCircuitBreakerArgs:
    def __init__(__self__, *,
                 fallback_action_response_code_based: Optional[str] = None,
                 locked: Optional[bool] = None,
                 response_code_based: Optional[bool] = None,
                 response_codes: Optional[str] = None,
                 response_delay_based: Optional[bool] = None,
                 response_delay_threshold: Optional[str] = None,
                 return_error_response_code_based: Optional[str] = None,
                 specify_your_own_response_code_based: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if fallback_action_response_code_based is not None:
            pulumi.set(__self__, "fallback_action_response_code_based", fallback_action_response_code_based)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if response_code_based is not None:
            pulumi.set(__self__, "response_code_based", response_code_based)
        if response_codes is not None:
            pulumi.set(__self__, "response_codes", response_codes)
        if response_delay_based is not None:
            pulumi.set(__self__, "response_delay_based", response_delay_based)
        if response_delay_threshold is not None:
            pulumi.set(__self__, "response_delay_threshold", response_delay_threshold)
        if return_error_response_code_based is not None:
            pulumi.set(__self__, "return_error_response_code_based", return_error_response_code_based)
        if specify_your_own_response_code_based is not None:
            pulumi.set(__self__, "specify_your_own_response_code_based", specify_your_own_response_code_based)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="fallbackActionResponseCodeBased")
    def fallback_action_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "fallback_action_response_code_based")

    @fallback_action_response_code_based.setter
    def fallback_action_response_code_based(self, value: Optional[str]):
        pulumi.set(self, "fallback_action_response_code_based", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="responseCodeBased")
    def response_code_based(self) -> Optional[bool]:
        return pulumi.get(self, "response_code_based")

    @response_code_based.setter
    def response_code_based(self, value: Optional[bool]):
        pulumi.set(self, "response_code_based", value)

    @property
    @pulumi.getter(name="responseCodes")
    def response_codes(self) -> Optional[str]:
        return pulumi.get(self, "response_codes")

    @response_codes.setter
    def response_codes(self, value: Optional[str]):
        pulumi.set(self, "response_codes", value)

    @property
    @pulumi.getter(name="responseDelayBased")
    def response_delay_based(self) -> Optional[bool]:
        return pulumi.get(self, "response_delay_based")

    @response_delay_based.setter
    def response_delay_based(self, value: Optional[bool]):
        pulumi.set(self, "response_delay_based", value)

    @property
    @pulumi.getter(name="responseDelayThreshold")
    def response_delay_threshold(self) -> Optional[str]:
        return pulumi.get(self, "response_delay_threshold")

    @response_delay_threshold.setter
    def response_delay_threshold(self, value: Optional[str]):
        pulumi.set(self, "response_delay_threshold", value)

    @property
    @pulumi.getter(name="returnErrorResponseCodeBased")
    def return_error_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "return_error_response_code_based")

    @return_error_response_code_based.setter
    def return_error_response_code_based(self, value: Optional[str]):
        pulumi.set(self, "return_error_response_code_based", value)

    @property
    @pulumi.getter(name="specifyYourOwnResponseCodeBased")
    def specify_your_own_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "specify_your_own_response_code_based")

    @specify_your_own_response_code_based.setter
    def specify_your_own_response_code_based(self, value: Optional[str]):
        pulumi.set(self, "specify_your_own_response_code_based", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveAccelerationArgs:
    def __init__(__self__, *,
                 ab_logic: Optional[str] = None,
                 ab_testing: Optional[str] = None,
                 compression: Optional[str] = None,
                 cookie_name: Optional[str] = None,
                 enable_brotli_compression: Optional[bool] = None,
                 enable_for_noncacheable: Optional[bool] = None,
                 enable_preconnect: Optional[bool] = None,
                 enable_push: Optional[bool] = None,
                 enable_ro: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 preload_enable: Optional[bool] = None,
                 source: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 title_brotli: Optional[str] = None,
                 title_http2_server_push: Optional[str] = None,
                 title_preconnect: Optional[str] = None,
                 title_preload: Optional[str] = None,
                 title_ro: Optional[str] = None,
                 uuid: Optional[str] = None):
        if ab_logic is not None:
            pulumi.set(__self__, "ab_logic", ab_logic)
        if ab_testing is not None:
            pulumi.set(__self__, "ab_testing", ab_testing)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if enable_brotli_compression is not None:
            pulumi.set(__self__, "enable_brotli_compression", enable_brotli_compression)
        if enable_for_noncacheable is not None:
            pulumi.set(__self__, "enable_for_noncacheable", enable_for_noncacheable)
        if enable_preconnect is not None:
            pulumi.set(__self__, "enable_preconnect", enable_preconnect)
        if enable_push is not None:
            pulumi.set(__self__, "enable_push", enable_push)
        if enable_ro is not None:
            pulumi.set(__self__, "enable_ro", enable_ro)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if preload_enable is not None:
            pulumi.set(__self__, "preload_enable", preload_enable)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if title_brotli is not None:
            pulumi.set(__self__, "title_brotli", title_brotli)
        if title_http2_server_push is not None:
            pulumi.set(__self__, "title_http2_server_push", title_http2_server_push)
        if title_preconnect is not None:
            pulumi.set(__self__, "title_preconnect", title_preconnect)
        if title_preload is not None:
            pulumi.set(__self__, "title_preload", title_preload)
        if title_ro is not None:
            pulumi.set(__self__, "title_ro", title_ro)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="abLogic")
    def ab_logic(self) -> Optional[str]:
        return pulumi.get(self, "ab_logic")

    @ab_logic.setter
    def ab_logic(self, value: Optional[str]):
        pulumi.set(self, "ab_logic", value)

    @property
    @pulumi.getter(name="abTesting")
    def ab_testing(self) -> Optional[str]:
        return pulumi.get(self, "ab_testing")

    @ab_testing.setter
    def ab_testing(self, value: Optional[str]):
        pulumi.set(self, "ab_testing", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[str]:
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[str]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[str]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter(name="enableBrotliCompression")
    def enable_brotli_compression(self) -> Optional[bool]:
        return pulumi.get(self, "enable_brotli_compression")

    @enable_brotli_compression.setter
    def enable_brotli_compression(self, value: Optional[bool]):
        pulumi.set(self, "enable_brotli_compression", value)

    @property
    @pulumi.getter(name="enableForNoncacheable")
    def enable_for_noncacheable(self) -> Optional[bool]:
        return pulumi.get(self, "enable_for_noncacheable")

    @enable_for_noncacheable.setter
    def enable_for_noncacheable(self, value: Optional[bool]):
        pulumi.set(self, "enable_for_noncacheable", value)

    @property
    @pulumi.getter(name="enablePreconnect")
    def enable_preconnect(self) -> Optional[bool]:
        return pulumi.get(self, "enable_preconnect")

    @enable_preconnect.setter
    def enable_preconnect(self, value: Optional[bool]):
        pulumi.set(self, "enable_preconnect", value)

    @property
    @pulumi.getter(name="enablePush")
    def enable_push(self) -> Optional[bool]:
        return pulumi.get(self, "enable_push")

    @enable_push.setter
    def enable_push(self, value: Optional[bool]):
        pulumi.set(self, "enable_push", value)

    @property
    @pulumi.getter(name="enableRo")
    def enable_ro(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ro")

    @enable_ro.setter
    def enable_ro(self, value: Optional[bool]):
        pulumi.set(self, "enable_ro", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="preloadEnable")
    def preload_enable(self) -> Optional[bool]:
        return pulumi.get(self, "preload_enable")

    @preload_enable.setter
    def preload_enable(self, value: Optional[bool]):
        pulumi.set(self, "preload_enable", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="titleBrotli")
    def title_brotli(self) -> Optional[str]:
        return pulumi.get(self, "title_brotli")

    @title_brotli.setter
    def title_brotli(self, value: Optional[str]):
        pulumi.set(self, "title_brotli", value)

    @property
    @pulumi.getter(name="titleHttp2ServerPush")
    def title_http2_server_push(self) -> Optional[str]:
        return pulumi.get(self, "title_http2_server_push")

    @title_http2_server_push.setter
    def title_http2_server_push(self, value: Optional[str]):
        pulumi.set(self, "title_http2_server_push", value)

    @property
    @pulumi.getter(name="titlePreconnect")
    def title_preconnect(self) -> Optional[str]:
        return pulumi.get(self, "title_preconnect")

    @title_preconnect.setter
    def title_preconnect(self, value: Optional[str]):
        pulumi.set(self, "title_preconnect", value)

    @property
    @pulumi.getter(name="titlePreload")
    def title_preload(self) -> Optional[str]:
        return pulumi.get(self, "title_preload")

    @title_preload.setter
    def title_preload(self, value: Optional[str]):
        pulumi.set(self, "title_preload", value)

    @property
    @pulumi.getter(name="titleRo")
    def title_ro(self) -> Optional[str]:
        return pulumi.get(self, "title_ro")

    @title_ro.setter
    def title_ro(self, value: Optional[str]):
        pulumi.set(self, "title_ro", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveImageCompressionArgs:
    def __init__(__self__, *,
                 compress_mobile: Optional[bool] = None,
                 compress_standard: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tier1_mobile_compression_method: Optional[str] = None,
                 tier1_mobile_compression_value: Optional[int] = None,
                 tier1_standard_compression_method: Optional[str] = None,
                 tier1_standard_compression_value: Optional[int] = None,
                 tier2_mobile_compression_method: Optional[str] = None,
                 tier2_mobile_compression_value: Optional[int] = None,
                 tier2_standard_compression_method: Optional[str] = None,
                 tier2_standard_compression_value: Optional[int] = None,
                 tier3_mobile_compression_method: Optional[str] = None,
                 tier3_mobile_compression_value: Optional[int] = None,
                 tier3_standard_compression_method: Optional[str] = None,
                 tier3_standard_compression_value: Optional[int] = None,
                 title_aic_mobile: Optional[str] = None,
                 title_aic_nonmobile: Optional[str] = None,
                 uuid: Optional[str] = None):
        if compress_mobile is not None:
            pulumi.set(__self__, "compress_mobile", compress_mobile)
        if compress_standard is not None:
            pulumi.set(__self__, "compress_standard", compress_standard)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tier1_mobile_compression_method is not None:
            pulumi.set(__self__, "tier1_mobile_compression_method", tier1_mobile_compression_method)
        if tier1_mobile_compression_value is not None:
            pulumi.set(__self__, "tier1_mobile_compression_value", tier1_mobile_compression_value)
        if tier1_standard_compression_method is not None:
            pulumi.set(__self__, "tier1_standard_compression_method", tier1_standard_compression_method)
        if tier1_standard_compression_value is not None:
            pulumi.set(__self__, "tier1_standard_compression_value", tier1_standard_compression_value)
        if tier2_mobile_compression_method is not None:
            pulumi.set(__self__, "tier2_mobile_compression_method", tier2_mobile_compression_method)
        if tier2_mobile_compression_value is not None:
            pulumi.set(__self__, "tier2_mobile_compression_value", tier2_mobile_compression_value)
        if tier2_standard_compression_method is not None:
            pulumi.set(__self__, "tier2_standard_compression_method", tier2_standard_compression_method)
        if tier2_standard_compression_value is not None:
            pulumi.set(__self__, "tier2_standard_compression_value", tier2_standard_compression_value)
        if tier3_mobile_compression_method is not None:
            pulumi.set(__self__, "tier3_mobile_compression_method", tier3_mobile_compression_method)
        if tier3_mobile_compression_value is not None:
            pulumi.set(__self__, "tier3_mobile_compression_value", tier3_mobile_compression_value)
        if tier3_standard_compression_method is not None:
            pulumi.set(__self__, "tier3_standard_compression_method", tier3_standard_compression_method)
        if tier3_standard_compression_value is not None:
            pulumi.set(__self__, "tier3_standard_compression_value", tier3_standard_compression_value)
        if title_aic_mobile is not None:
            pulumi.set(__self__, "title_aic_mobile", title_aic_mobile)
        if title_aic_nonmobile is not None:
            pulumi.set(__self__, "title_aic_nonmobile", title_aic_nonmobile)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="compressMobile")
    def compress_mobile(self) -> Optional[bool]:
        return pulumi.get(self, "compress_mobile")

    @compress_mobile.setter
    def compress_mobile(self, value: Optional[bool]):
        pulumi.set(self, "compress_mobile", value)

    @property
    @pulumi.getter(name="compressStandard")
    def compress_standard(self) -> Optional[bool]:
        return pulumi.get(self, "compress_standard")

    @compress_standard.setter
    def compress_standard(self, value: Optional[bool]):
        pulumi.set(self, "compress_standard", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="tier1MobileCompressionMethod")
    def tier1_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier1_mobile_compression_method")

    @tier1_mobile_compression_method.setter
    def tier1_mobile_compression_method(self, value: Optional[str]):
        pulumi.set(self, "tier1_mobile_compression_method", value)

    @property
    @pulumi.getter(name="tier1MobileCompressionValue")
    def tier1_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier1_mobile_compression_value")

    @tier1_mobile_compression_value.setter
    def tier1_mobile_compression_value(self, value: Optional[int]):
        pulumi.set(self, "tier1_mobile_compression_value", value)

    @property
    @pulumi.getter(name="tier1StandardCompressionMethod")
    def tier1_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier1_standard_compression_method")

    @tier1_standard_compression_method.setter
    def tier1_standard_compression_method(self, value: Optional[str]):
        pulumi.set(self, "tier1_standard_compression_method", value)

    @property
    @pulumi.getter(name="tier1StandardCompressionValue")
    def tier1_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier1_standard_compression_value")

    @tier1_standard_compression_value.setter
    def tier1_standard_compression_value(self, value: Optional[int]):
        pulumi.set(self, "tier1_standard_compression_value", value)

    @property
    @pulumi.getter(name="tier2MobileCompressionMethod")
    def tier2_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier2_mobile_compression_method")

    @tier2_mobile_compression_method.setter
    def tier2_mobile_compression_method(self, value: Optional[str]):
        pulumi.set(self, "tier2_mobile_compression_method", value)

    @property
    @pulumi.getter(name="tier2MobileCompressionValue")
    def tier2_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier2_mobile_compression_value")

    @tier2_mobile_compression_value.setter
    def tier2_mobile_compression_value(self, value: Optional[int]):
        pulumi.set(self, "tier2_mobile_compression_value", value)

    @property
    @pulumi.getter(name="tier2StandardCompressionMethod")
    def tier2_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier2_standard_compression_method")

    @tier2_standard_compression_method.setter
    def tier2_standard_compression_method(self, value: Optional[str]):
        pulumi.set(self, "tier2_standard_compression_method", value)

    @property
    @pulumi.getter(name="tier2StandardCompressionValue")
    def tier2_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier2_standard_compression_value")

    @tier2_standard_compression_value.setter
    def tier2_standard_compression_value(self, value: Optional[int]):
        pulumi.set(self, "tier2_standard_compression_value", value)

    @property
    @pulumi.getter(name="tier3MobileCompressionMethod")
    def tier3_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier3_mobile_compression_method")

    @tier3_mobile_compression_method.setter
    def tier3_mobile_compression_method(self, value: Optional[str]):
        pulumi.set(self, "tier3_mobile_compression_method", value)

    @property
    @pulumi.getter(name="tier3MobileCompressionValue")
    def tier3_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier3_mobile_compression_value")

    @tier3_mobile_compression_value.setter
    def tier3_mobile_compression_value(self, value: Optional[int]):
        pulumi.set(self, "tier3_mobile_compression_value", value)

    @property
    @pulumi.getter(name="tier3StandardCompressionMethod")
    def tier3_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier3_standard_compression_method")

    @tier3_standard_compression_method.setter
    def tier3_standard_compression_method(self, value: Optional[str]):
        pulumi.set(self, "tier3_standard_compression_method", value)

    @property
    @pulumi.getter(name="tier3StandardCompressionValue")
    def tier3_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier3_standard_compression_value")

    @tier3_standard_compression_value.setter
    def tier3_standard_compression_value(self, value: Optional[int]):
        pulumi.set(self, "tier3_standard_compression_value", value)

    @property
    @pulumi.getter(name="titleAicMobile")
    def title_aic_mobile(self) -> Optional[str]:
        return pulumi.get(self, "title_aic_mobile")

    @title_aic_mobile.setter
    def title_aic_mobile(self, value: Optional[str]):
        pulumi.set(self, "title_aic_mobile", value)

    @property
    @pulumi.getter(name="titleAicNonmobile")
    def title_aic_nonmobile(self) -> Optional[str]:
        return pulumi.get(self, "title_aic_nonmobile")

    @title_aic_nonmobile.setter
    def title_aic_nonmobile(self, value: Optional[str]):
        pulumi.set(self, "title_aic_nonmobile", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAdvancedArgs:
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if xml is not None:
            pulumi.set(__self__, "xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")

    @xml.setter
    def xml(self, value: Optional[str]):
        pulumi.set(self, "xml", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAggregatedReportingArgs:
    def __init__(__self__, *,
                 attribute1: Optional[str] = None,
                 attribute2: Optional[str] = None,
                 attribute3: Optional[str] = None,
                 attribute4: Optional[str] = None,
                 attributes_count: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 report_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if attribute1 is not None:
            pulumi.set(__self__, "attribute1", attribute1)
        if attribute2 is not None:
            pulumi.set(__self__, "attribute2", attribute2)
        if attribute3 is not None:
            pulumi.set(__self__, "attribute3", attribute3)
        if attribute4 is not None:
            pulumi.set(__self__, "attribute4", attribute4)
        if attributes_count is not None:
            pulumi.set(__self__, "attributes_count", attributes_count)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if report_name is not None:
            pulumi.set(__self__, "report_name", report_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def attribute1(self) -> Optional[str]:
        return pulumi.get(self, "attribute1")

    @attribute1.setter
    def attribute1(self, value: Optional[str]):
        pulumi.set(self, "attribute1", value)

    @property
    @pulumi.getter
    def attribute2(self) -> Optional[str]:
        return pulumi.get(self, "attribute2")

    @attribute2.setter
    def attribute2(self, value: Optional[str]):
        pulumi.set(self, "attribute2", value)

    @property
    @pulumi.getter
    def attribute3(self) -> Optional[str]:
        return pulumi.get(self, "attribute3")

    @attribute3.setter
    def attribute3(self, value: Optional[str]):
        pulumi.set(self, "attribute3", value)

    @property
    @pulumi.getter
    def attribute4(self) -> Optional[str]:
        return pulumi.get(self, "attribute4")

    @attribute4.setter
    def attribute4(self, value: Optional[str]):
        pulumi.set(self, "attribute4", value)

    @property
    @pulumi.getter(name="attributesCount")
    def attributes_count(self) -> Optional[int]:
        return pulumi.get(self, "attributes_count")

    @attributes_count.setter
    def attributes_count(self, value: Optional[int]):
        pulumi.set(self, "attributes_count", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="reportName")
    def report_name(self) -> Optional[str]:
        return pulumi.get(self, "report_name")

    @report_name.setter
    def report_name(self, value: Optional[str]):
        pulumi.set(self, "report_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagArgs:
    def __init__(__self__, *,
                 include_tags_attribute: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match_hostname: Optional[str] = None,
                 replace_all: Optional[bool] = None,
                 replacement_hostname: Optional[str] = None,
                 scope: Optional[str] = None,
                 tags_attribute: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if include_tags_attribute is not None:
            pulumi.set(__self__, "include_tags_attribute", include_tags_attribute)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_hostname is not None:
            pulumi.set(__self__, "match_hostname", match_hostname)
        if replace_all is not None:
            pulumi.set(__self__, "replace_all", replace_all)
        if replacement_hostname is not None:
            pulumi.set(__self__, "replacement_hostname", replacement_hostname)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if tags_attribute is not None:
            pulumi.set(__self__, "tags_attribute", tags_attribute)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="includeTagsAttribute")
    def include_tags_attribute(self) -> Optional[bool]:
        return pulumi.get(self, "include_tags_attribute")

    @include_tags_attribute.setter
    def include_tags_attribute(self, value: Optional[bool]):
        pulumi.set(self, "include_tags_attribute", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchHostname")
    def match_hostname(self) -> Optional[str]:
        return pulumi.get(self, "match_hostname")

    @match_hostname.setter
    def match_hostname(self, value: Optional[str]):
        pulumi.set(self, "match_hostname", value)

    @property
    @pulumi.getter(name="replaceAll")
    def replace_all(self) -> Optional[bool]:
        return pulumi.get(self, "replace_all")

    @replace_all.setter
    def replace_all(self, value: Optional[bool]):
        pulumi.set(self, "replace_all", value)

    @property
    @pulumi.getter(name="replacementHostname")
    def replacement_hostname(self) -> Optional[str]:
        return pulumi.get(self, "replacement_hostname")

    @replacement_hostname.setter
    def replacement_hostname(self, value: Optional[str]):
        pulumi.set(self, "replacement_hostname", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[str]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="tagsAttribute")
    def tags_attribute(self) -> Optional[str]:
        return pulumi.get(self, "tags_attribute")

    @tags_attribute.setter
    def tags_attribute(self, value: Optional[str]):
        pulumi.set(self, "tags_attribute", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllHttpInCacheHierarchyArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowCloudletsOriginsArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 honor_base_directory: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 purge_origin_query_parameter: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if honor_base_directory is not None:
            pulumi.set(__self__, "honor_base_directory", honor_base_directory)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if purge_origin_query_parameter is not None:
            pulumi.set(__self__, "purge_origin_query_parameter", purge_origin_query_parameter)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="honorBaseDirectory")
    def honor_base_directory(self) -> Optional[bool]:
        return pulumi.get(self, "honor_base_directory")

    @honor_base_directory.setter
    def honor_base_directory(self, value: Optional[bool]):
        pulumi.set(self, "honor_base_directory", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="purgeOriginQueryParameter")
    def purge_origin_query_parameter(self) -> Optional[str]:
        return pulumi.get(self, "purge_origin_query_parameter")

    @purge_origin_query_parameter.setter
    def purge_origin_query_parameter(self, value: Optional[str]):
        pulumi.set(self, "purge_origin_query_parameter", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowDeleteArgs:
    def __init__(__self__, *,
                 allow_body: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_body is not None:
            pulumi.set(__self__, "allow_body", allow_body)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowBody")
    def allow_body(self) -> Optional[bool]:
        return pulumi.get(self, "allow_body")

    @allow_body.setter
    def allow_body(self, value: Optional[bool]):
        pulumi.set(self, "allow_body", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsCacheKeySharingArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsDowngradeArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowOptionsArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowPatchArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowPostArgs:
    def __init__(__self__, *,
                 allow_without_content_length: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_without_content_length is not None:
            pulumi.set(__self__, "allow_without_content_length", allow_without_content_length)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowWithoutContentLength")
    def allow_without_content_length(self) -> Optional[bool]:
        return pulumi.get(self, "allow_without_content_length")

    @allow_without_content_length.setter
    def allow_without_content_length(self, value: Optional[bool]):
        pulumi.set(self, "allow_without_content_length", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowPutArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowTransferEncodingArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAltSvcHeaderArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 max_age: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[int]:
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[int]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationArgs:
    def __init__(__self__, *,
                 alternate_response_cache_ttl: Optional[int] = None,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationCloudletPolicyArgs'] = None,
                 enabled: Optional[bool] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 net_storage: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationNetStorageArgs'] = None,
                 net_storage_path: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 throttled_cp_code: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeArgs'] = None,
                 throttled_status_code: Optional[int] = None,
                 use_throttled_cp_code: Optional[bool] = None,
                 use_throttled_status_code: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if alternate_response_cache_ttl is not None:
            pulumi.set(__self__, "alternate_response_cache_ttl", alternate_response_cache_ttl)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if net_storage is not None:
            pulumi.set(__self__, "net_storage", net_storage)
        if net_storage_path is not None:
            pulumi.set(__self__, "net_storage_path", net_storage_path)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if throttled_cp_code is not None:
            pulumi.set(__self__, "throttled_cp_code", throttled_cp_code)
        if throttled_status_code is not None:
            pulumi.set(__self__, "throttled_status_code", throttled_status_code)
        if use_throttled_cp_code is not None:
            pulumi.set(__self__, "use_throttled_cp_code", use_throttled_cp_code)
        if use_throttled_status_code is not None:
            pulumi.set(__self__, "use_throttled_status_code", use_throttled_status_code)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="alternateResponseCacheTtl")
    def alternate_response_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "alternate_response_cache_ttl")

    @alternate_response_cache_ttl.setter
    def alternate_response_cache_ttl(self, value: Optional[int]):
        pulumi.set(self, "alternate_response_cache_ttl", value)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationNetStorageArgs']:
        return pulumi.get(self, "net_storage")

    @net_storage.setter
    def net_storage(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationNetStorageArgs']):
        pulumi.set(self, "net_storage", value)

    @property
    @pulumi.getter(name="netStoragePath")
    def net_storage_path(self) -> Optional[str]:
        return pulumi.get(self, "net_storage_path")

    @net_storage_path.setter
    def net_storage_path(self, value: Optional[str]):
        pulumi.set(self, "net_storage_path", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="throttledCpCode")
    def throttled_cp_code(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeArgs']:
        return pulumi.get(self, "throttled_cp_code")

    @throttled_cp_code.setter
    def throttled_cp_code(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeArgs']):
        pulumi.set(self, "throttled_cp_code", value)

    @property
    @pulumi.getter(name="throttledStatusCode")
    def throttled_status_code(self) -> Optional[int]:
        return pulumi.get(self, "throttled_status_code")

    @throttled_status_code.setter
    def throttled_status_code(self, value: Optional[int]):
        pulumi.set(self, "throttled_status_code", value)

    @property
    @pulumi.getter(name="useThrottledCpCode")
    def use_throttled_cp_code(self) -> Optional[bool]:
        return pulumi.get(self, "use_throttled_cp_code")

    @use_throttled_cp_code.setter
    def use_throttled_cp_code(self, value: Optional[bool]):
        pulumi.set(self, "use_throttled_cp_code", value)

    @property
    @pulumi.getter(name="useThrottledStatusCode")
    def use_throttled_status_code(self) -> Optional[bool]:
        return pulumi.get(self, "use_throttled_status_code")

    @use_throttled_status_code.setter
    def use_throttled_status_code(self, value: Optional[bool]):
        pulumi.set(self, "use_throttled_status_code", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationNetStorageArgs:
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @cp_code.setter
    def cp_code(self, value: Optional[int]):
        pulumi.set(self, "cp_code", value)

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @download_domain_name.setter
    def download_domain_name(self, value: Optional[str]):
        pulumi.set(self, "download_domain_name", value)

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")

    @g2o_token.setter
    def g2o_token(self, value: Optional[str]):
        pulumi.set(self, "g2o_token", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerArgs:
    def __init__(__self__, *,
                 all_down_net_storage: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerAllDownNetStorageArgs'] = None,
                 all_down_net_storage_file: Optional[str] = None,
                 all_down_status_code: Optional[str] = None,
                 all_down_title: Optional[str] = None,
                 allow_cache_prefresh: Optional[bool] = None,
                 cached_content_title: Optional[str] = None,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerCloudletPolicyArgs'] = None,
                 enabled: Optional[bool] = None,
                 failover_attempts_threshold: Optional[int] = None,
                 failover_mode: Optional[str] = None,
                 failover_origin_maps: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerFailoverOriginMapArgs']] = None,
                 failover_status_codes: Optional[Sequence[str]] = None,
                 failover_title: Optional[str] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 origin_cookie_name: Optional[str] = None,
                 specify_stickiness_cookie_domain: Optional[bool] = None,
                 stickiness_cookie_automatic_salt: Optional[bool] = None,
                 stickiness_cookie_domain: Optional[str] = None,
                 stickiness_cookie_salt: Optional[str] = None,
                 stickiness_cookie_set_http_only_flag: Optional[bool] = None,
                 stickiness_cookie_type: Optional[str] = None,
                 stickiness_duration: Optional[str] = None,
                 stickiness_expiration_date: Optional[str] = None,
                 stickiness_refresh: Optional[bool] = None,
                 stickiness_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if all_down_net_storage is not None:
            pulumi.set(__self__, "all_down_net_storage", all_down_net_storage)
        if all_down_net_storage_file is not None:
            pulumi.set(__self__, "all_down_net_storage_file", all_down_net_storage_file)
        if all_down_status_code is not None:
            pulumi.set(__self__, "all_down_status_code", all_down_status_code)
        if all_down_title is not None:
            pulumi.set(__self__, "all_down_title", all_down_title)
        if allow_cache_prefresh is not None:
            pulumi.set(__self__, "allow_cache_prefresh", allow_cache_prefresh)
        if cached_content_title is not None:
            pulumi.set(__self__, "cached_content_title", cached_content_title)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failover_attempts_threshold is not None:
            pulumi.set(__self__, "failover_attempts_threshold", failover_attempts_threshold)
        if failover_mode is not None:
            pulumi.set(__self__, "failover_mode", failover_mode)
        if failover_origin_maps is not None:
            pulumi.set(__self__, "failover_origin_maps", failover_origin_maps)
        if failover_status_codes is not None:
            pulumi.set(__self__, "failover_status_codes", failover_status_codes)
        if failover_title is not None:
            pulumi.set(__self__, "failover_title", failover_title)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_cookie_name is not None:
            pulumi.set(__self__, "origin_cookie_name", origin_cookie_name)
        if specify_stickiness_cookie_domain is not None:
            pulumi.set(__self__, "specify_stickiness_cookie_domain", specify_stickiness_cookie_domain)
        if stickiness_cookie_automatic_salt is not None:
            pulumi.set(__self__, "stickiness_cookie_automatic_salt", stickiness_cookie_automatic_salt)
        if stickiness_cookie_domain is not None:
            pulumi.set(__self__, "stickiness_cookie_domain", stickiness_cookie_domain)
        if stickiness_cookie_salt is not None:
            pulumi.set(__self__, "stickiness_cookie_salt", stickiness_cookie_salt)
        if stickiness_cookie_set_http_only_flag is not None:
            pulumi.set(__self__, "stickiness_cookie_set_http_only_flag", stickiness_cookie_set_http_only_flag)
        if stickiness_cookie_type is not None:
            pulumi.set(__self__, "stickiness_cookie_type", stickiness_cookie_type)
        if stickiness_duration is not None:
            pulumi.set(__self__, "stickiness_duration", stickiness_duration)
        if stickiness_expiration_date is not None:
            pulumi.set(__self__, "stickiness_expiration_date", stickiness_expiration_date)
        if stickiness_refresh is not None:
            pulumi.set(__self__, "stickiness_refresh", stickiness_refresh)
        if stickiness_title is not None:
            pulumi.set(__self__, "stickiness_title", stickiness_title)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allDownNetStorage")
    def all_down_net_storage(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerAllDownNetStorageArgs']:
        return pulumi.get(self, "all_down_net_storage")

    @all_down_net_storage.setter
    def all_down_net_storage(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerAllDownNetStorageArgs']):
        pulumi.set(self, "all_down_net_storage", value)

    @property
    @pulumi.getter(name="allDownNetStorageFile")
    def all_down_net_storage_file(self) -> Optional[str]:
        return pulumi.get(self, "all_down_net_storage_file")

    @all_down_net_storage_file.setter
    def all_down_net_storage_file(self, value: Optional[str]):
        pulumi.set(self, "all_down_net_storage_file", value)

    @property
    @pulumi.getter(name="allDownStatusCode")
    def all_down_status_code(self) -> Optional[str]:
        return pulumi.get(self, "all_down_status_code")

    @all_down_status_code.setter
    def all_down_status_code(self, value: Optional[str]):
        pulumi.set(self, "all_down_status_code", value)

    @property
    @pulumi.getter(name="allDownTitle")
    def all_down_title(self) -> Optional[str]:
        return pulumi.get(self, "all_down_title")

    @all_down_title.setter
    def all_down_title(self, value: Optional[str]):
        pulumi.set(self, "all_down_title", value)

    @property
    @pulumi.getter(name="allowCachePrefresh")
    def allow_cache_prefresh(self) -> Optional[bool]:
        return pulumi.get(self, "allow_cache_prefresh")

    @allow_cache_prefresh.setter
    def allow_cache_prefresh(self, value: Optional[bool]):
        pulumi.set(self, "allow_cache_prefresh", value)

    @property
    @pulumi.getter(name="cachedContentTitle")
    def cached_content_title(self) -> Optional[str]:
        return pulumi.get(self, "cached_content_title")

    @cached_content_title.setter
    def cached_content_title(self, value: Optional[str]):
        pulumi.set(self, "cached_content_title", value)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="failoverAttemptsThreshold")
    def failover_attempts_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failover_attempts_threshold")

    @failover_attempts_threshold.setter
    def failover_attempts_threshold(self, value: Optional[int]):
        pulumi.set(self, "failover_attempts_threshold", value)

    @property
    @pulumi.getter(name="failoverMode")
    def failover_mode(self) -> Optional[str]:
        return pulumi.get(self, "failover_mode")

    @failover_mode.setter
    def failover_mode(self, value: Optional[str]):
        pulumi.set(self, "failover_mode", value)

    @property
    @pulumi.getter(name="failoverOriginMaps")
    def failover_origin_maps(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerFailoverOriginMapArgs']]:
        return pulumi.get(self, "failover_origin_maps")

    @failover_origin_maps.setter
    def failover_origin_maps(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerFailoverOriginMapArgs']]):
        pulumi.set(self, "failover_origin_maps", value)

    @property
    @pulumi.getter(name="failoverStatusCodes")
    def failover_status_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "failover_status_codes")

    @failover_status_codes.setter
    def failover_status_codes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "failover_status_codes", value)

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @failover_title.setter
    def failover_title(self, value: Optional[str]):
        pulumi.set(self, "failover_title", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="originCookieName")
    def origin_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "origin_cookie_name")

    @origin_cookie_name.setter
    def origin_cookie_name(self, value: Optional[str]):
        pulumi.set(self, "origin_cookie_name", value)

    @property
    @pulumi.getter(name="specifyStickinessCookieDomain")
    def specify_stickiness_cookie_domain(self) -> Optional[bool]:
        return pulumi.get(self, "specify_stickiness_cookie_domain")

    @specify_stickiness_cookie_domain.setter
    def specify_stickiness_cookie_domain(self, value: Optional[bool]):
        pulumi.set(self, "specify_stickiness_cookie_domain", value)

    @property
    @pulumi.getter(name="stickinessCookieAutomaticSalt")
    def stickiness_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_cookie_automatic_salt")

    @stickiness_cookie_automatic_salt.setter
    def stickiness_cookie_automatic_salt(self, value: Optional[bool]):
        pulumi.set(self, "stickiness_cookie_automatic_salt", value)

    @property
    @pulumi.getter(name="stickinessCookieDomain")
    def stickiness_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_domain")

    @stickiness_cookie_domain.setter
    def stickiness_cookie_domain(self, value: Optional[str]):
        pulumi.set(self, "stickiness_cookie_domain", value)

    @property
    @pulumi.getter(name="stickinessCookieSalt")
    def stickiness_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_salt")

    @stickiness_cookie_salt.setter
    def stickiness_cookie_salt(self, value: Optional[str]):
        pulumi.set(self, "stickiness_cookie_salt", value)

    @property
    @pulumi.getter(name="stickinessCookieSetHttpOnlyFlag")
    def stickiness_cookie_set_http_only_flag(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_cookie_set_http_only_flag")

    @stickiness_cookie_set_http_only_flag.setter
    def stickiness_cookie_set_http_only_flag(self, value: Optional[bool]):
        pulumi.set(self, "stickiness_cookie_set_http_only_flag", value)

    @property
    @pulumi.getter(name="stickinessCookieType")
    def stickiness_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_type")

    @stickiness_cookie_type.setter
    def stickiness_cookie_type(self, value: Optional[str]):
        pulumi.set(self, "stickiness_cookie_type", value)

    @property
    @pulumi.getter(name="stickinessDuration")
    def stickiness_duration(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_duration")

    @stickiness_duration.setter
    def stickiness_duration(self, value: Optional[str]):
        pulumi.set(self, "stickiness_duration", value)

    @property
    @pulumi.getter(name="stickinessExpirationDate")
    def stickiness_expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_expiration_date")

    @stickiness_expiration_date.setter
    def stickiness_expiration_date(self, value: Optional[str]):
        pulumi.set(self, "stickiness_expiration_date", value)

    @property
    @pulumi.getter(name="stickinessRefresh")
    def stickiness_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_refresh")

    @stickiness_refresh.setter
    def stickiness_refresh(self, value: Optional[bool]):
        pulumi.set(self, "stickiness_refresh", value)

    @property
    @pulumi.getter(name="stickinessTitle")
    def stickiness_title(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_title")

    @stickiness_title.setter
    def stickiness_title(self, value: Optional[str]):
        pulumi.set(self, "stickiness_title", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerAllDownNetStorageArgs:
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @cp_code.setter
    def cp_code(self, value: Optional[int]):
        pulumi.set(self, "cp_code", value)

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @download_domain_name.setter
    def download_domain_name(self, value: Optional[str]):
        pulumi.set(self, "download_domain_name", value)

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")

    @g2o_token.setter
    def g2o_token(self, value: Optional[str]):
        pulumi.set(self, "g2o_token", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerFailoverOriginMapArgs:
    def __init__(__self__, *,
                 from_origin_id: Optional[str] = None,
                 to_origin_ids: Optional[Sequence[str]] = None):
        if from_origin_id is not None:
            pulumi.set(__self__, "from_origin_id", from_origin_id)
        if to_origin_ids is not None:
            pulumi.set(__self__, "to_origin_ids", to_origin_ids)

    @property
    @pulumi.getter(name="fromOriginId")
    def from_origin_id(self) -> Optional[str]:
        return pulumi.get(self, "from_origin_id")

    @from_origin_id.setter
    def from_origin_id(self, value: Optional[str]):
        pulumi.set(self, "from_origin_id", value)

    @property
    @pulumi.getter(name="toOriginIds")
    def to_origin_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "to_origin_ids")

    @to_origin_ids.setter
    def to_origin_ids(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "to_origin_ids", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationArgs:
    def __init__(__self__, *,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationCloudletPolicyArgs'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 population_cookie_automatic_salt: Optional[bool] = None,
                 population_cookie_domain: Optional[str] = None,
                 population_cookie_include_rule_name: Optional[bool] = None,
                 population_cookie_salt: Optional[str] = None,
                 population_cookie_type: Optional[str] = None,
                 population_duration: Optional[str] = None,
                 population_refresh: Optional[bool] = None,
                 population_title: Optional[str] = None,
                 segment_tracking_cookie_name: Optional[str] = None,
                 segment_tracking_custom_header: Optional[str] = None,
                 segment_tracking_method: Optional[str] = None,
                 segment_tracking_query_param: Optional[str] = None,
                 segment_tracking_title: Optional[str] = None,
                 specify_population_cookie_domain: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if population_cookie_automatic_salt is not None:
            pulumi.set(__self__, "population_cookie_automatic_salt", population_cookie_automatic_salt)
        if population_cookie_domain is not None:
            pulumi.set(__self__, "population_cookie_domain", population_cookie_domain)
        if population_cookie_include_rule_name is not None:
            pulumi.set(__self__, "population_cookie_include_rule_name", population_cookie_include_rule_name)
        if population_cookie_salt is not None:
            pulumi.set(__self__, "population_cookie_salt", population_cookie_salt)
        if population_cookie_type is not None:
            pulumi.set(__self__, "population_cookie_type", population_cookie_type)
        if population_duration is not None:
            pulumi.set(__self__, "population_duration", population_duration)
        if population_refresh is not None:
            pulumi.set(__self__, "population_refresh", population_refresh)
        if population_title is not None:
            pulumi.set(__self__, "population_title", population_title)
        if segment_tracking_cookie_name is not None:
            pulumi.set(__self__, "segment_tracking_cookie_name", segment_tracking_cookie_name)
        if segment_tracking_custom_header is not None:
            pulumi.set(__self__, "segment_tracking_custom_header", segment_tracking_custom_header)
        if segment_tracking_method is not None:
            pulumi.set(__self__, "segment_tracking_method", segment_tracking_method)
        if segment_tracking_query_param is not None:
            pulumi.set(__self__, "segment_tracking_query_param", segment_tracking_query_param)
        if segment_tracking_title is not None:
            pulumi.set(__self__, "segment_tracking_title", segment_tracking_title)
        if specify_population_cookie_domain is not None:
            pulumi.set(__self__, "specify_population_cookie_domain", specify_population_cookie_domain)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @cloudlet_shared_policy.setter
    def cloudlet_shared_policy(self, value: Optional[int]):
        pulumi.set(self, "cloudlet_shared_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @is_shared_policy.setter
    def is_shared_policy(self, value: Optional[bool]):
        pulumi.set(self, "is_shared_policy", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="populationCookieAutomaticSalt")
    def population_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "population_cookie_automatic_salt")

    @population_cookie_automatic_salt.setter
    def population_cookie_automatic_salt(self, value: Optional[bool]):
        pulumi.set(self, "population_cookie_automatic_salt", value)

    @property
    @pulumi.getter(name="populationCookieDomain")
    def population_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_domain")

    @population_cookie_domain.setter
    def population_cookie_domain(self, value: Optional[str]):
        pulumi.set(self, "population_cookie_domain", value)

    @property
    @pulumi.getter(name="populationCookieIncludeRuleName")
    def population_cookie_include_rule_name(self) -> Optional[bool]:
        return pulumi.get(self, "population_cookie_include_rule_name")

    @population_cookie_include_rule_name.setter
    def population_cookie_include_rule_name(self, value: Optional[bool]):
        pulumi.set(self, "population_cookie_include_rule_name", value)

    @property
    @pulumi.getter(name="populationCookieSalt")
    def population_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_salt")

    @population_cookie_salt.setter
    def population_cookie_salt(self, value: Optional[str]):
        pulumi.set(self, "population_cookie_salt", value)

    @property
    @pulumi.getter(name="populationCookieType")
    def population_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_type")

    @population_cookie_type.setter
    def population_cookie_type(self, value: Optional[str]):
        pulumi.set(self, "population_cookie_type", value)

    @property
    @pulumi.getter(name="populationDuration")
    def population_duration(self) -> Optional[str]:
        return pulumi.get(self, "population_duration")

    @population_duration.setter
    def population_duration(self, value: Optional[str]):
        pulumi.set(self, "population_duration", value)

    @property
    @pulumi.getter(name="populationRefresh")
    def population_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "population_refresh")

    @population_refresh.setter
    def population_refresh(self, value: Optional[bool]):
        pulumi.set(self, "population_refresh", value)

    @property
    @pulumi.getter(name="populationTitle")
    def population_title(self) -> Optional[str]:
        return pulumi.get(self, "population_title")

    @population_title.setter
    def population_title(self, value: Optional[str]):
        pulumi.set(self, "population_title", value)

    @property
    @pulumi.getter(name="segmentTrackingCookieName")
    def segment_tracking_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_cookie_name")

    @segment_tracking_cookie_name.setter
    def segment_tracking_cookie_name(self, value: Optional[str]):
        pulumi.set(self, "segment_tracking_cookie_name", value)

    @property
    @pulumi.getter(name="segmentTrackingCustomHeader")
    def segment_tracking_custom_header(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_custom_header")

    @segment_tracking_custom_header.setter
    def segment_tracking_custom_header(self, value: Optional[str]):
        pulumi.set(self, "segment_tracking_custom_header", value)

    @property
    @pulumi.getter(name="segmentTrackingMethod")
    def segment_tracking_method(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_method")

    @segment_tracking_method.setter
    def segment_tracking_method(self, value: Optional[str]):
        pulumi.set(self, "segment_tracking_method", value)

    @property
    @pulumi.getter(name="segmentTrackingQueryParam")
    def segment_tracking_query_param(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_query_param")

    @segment_tracking_query_param.setter
    def segment_tracking_query_param(self, value: Optional[str]):
        pulumi.set(self, "segment_tracking_query_param", value)

    @property
    @pulumi.getter(name="segmentTrackingTitle")
    def segment_tracking_title(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_title")

    @segment_tracking_title.setter
    def segment_tracking_title(self, value: Optional[str]):
        pulumi.set(self, "segment_tracking_title", value)

    @property
    @pulumi.getter(name="specifyPopulationCookieDomain")
    def specify_population_cookie_domain(self) -> Optional[bool]:
        return pulumi.get(self, "specify_population_cookie_domain")

    @specify_population_cookie_domain.setter
    def specify_population_cookie_domain(self, value: Optional[bool]):
        pulumi.set(self, "specify_population_cookie_domain", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAutoDomainValidationArgs:
    def __init__(__self__, *,
                 autodv: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if autodv is not None:
            pulumi.set(__self__, "autodv", autodv)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def autodv(self) -> Optional[str]:
        return pulumi.get(self, "autodv")

    @autodv.setter
    def autodv(self, value: Optional[str]):
        pulumi.set(self, "autodv", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorBaseDirectoryArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorBossBeaconingArgs:
    def __init__(__self__, *,
                 conditional_error_pattern: Optional[str] = None,
                 conditional_http_statuses: Optional[Sequence[str]] = None,
                 conditional_sampling_frequency: Optional[str] = None,
                 cpcodes: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 forward_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 request_type: Optional[str] = None,
                 sampling_frequency: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if conditional_error_pattern is not None:
            pulumi.set(__self__, "conditional_error_pattern", conditional_error_pattern)
        if conditional_http_statuses is not None:
            pulumi.set(__self__, "conditional_http_statuses", conditional_http_statuses)
        if conditional_sampling_frequency is not None:
            pulumi.set(__self__, "conditional_sampling_frequency", conditional_sampling_frequency)
        if cpcodes is not None:
            pulumi.set(__self__, "cpcodes", cpcodes)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if forward_type is not None:
            pulumi.set(__self__, "forward_type", forward_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if sampling_frequency is not None:
            pulumi.set(__self__, "sampling_frequency", sampling_frequency)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="conditionalErrorPattern")
    def conditional_error_pattern(self) -> Optional[str]:
        return pulumi.get(self, "conditional_error_pattern")

    @conditional_error_pattern.setter
    def conditional_error_pattern(self, value: Optional[str]):
        pulumi.set(self, "conditional_error_pattern", value)

    @property
    @pulumi.getter(name="conditionalHttpStatuses")
    def conditional_http_statuses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "conditional_http_statuses")

    @conditional_http_statuses.setter
    def conditional_http_statuses(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "conditional_http_statuses", value)

    @property
    @pulumi.getter(name="conditionalSamplingFrequency")
    def conditional_sampling_frequency(self) -> Optional[str]:
        return pulumi.get(self, "conditional_sampling_frequency")

    @conditional_sampling_frequency.setter
    def conditional_sampling_frequency(self, value: Optional[str]):
        pulumi.set(self, "conditional_sampling_frequency", value)

    @property
    @pulumi.getter
    def cpcodes(self) -> Optional[str]:
        return pulumi.get(self, "cpcodes")

    @cpcodes.setter
    def cpcodes(self, value: Optional[str]):
        pulumi.set(self, "cpcodes", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="forwardType")
    def forward_type(self) -> Optional[str]:
        return pulumi.get(self, "forward_type")

    @forward_type.setter
    def forward_type(self, value: Optional[str]):
        pulumi.set(self, "forward_type", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[str]:
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: Optional[str]):
        pulumi.set(self, "request_type", value)

    @property
    @pulumi.getter(name="samplingFrequency")
    def sampling_frequency(self) -> Optional[str]:
        return pulumi.get(self, "sampling_frequency")

    @sampling_frequency.setter
    def sampling_frequency(self, value: Optional[str]):
        pulumi.set(self, "sampling_frequency", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorBreadcrumbsArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 logging_enabled: Optional[bool] = None,
                 opt_mode: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if logging_enabled is not None:
            pulumi.set(__self__, "logging_enabled", logging_enabled)
        if opt_mode is not None:
            pulumi.set(__self__, "opt_mode", opt_mode)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="loggingEnabled")
    def logging_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "logging_enabled")

    @logging_enabled.setter
    def logging_enabled(self, value: Optional[bool]):
        pulumi.set(self, "logging_enabled", value)

    @property
    @pulumi.getter(name="optMode")
    def opt_mode(self) -> Optional[bool]:
        return pulumi.get(self, "opt_mode")

    @opt_mode.setter
    def opt_mode(self, value: Optional[bool]):
        pulumi.set(self, "opt_mode", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorBreakConnectionArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorBrotliArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheErrorArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 preserve_stale: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if preserve_stale is not None:
            pulumi.set(__self__, "preserve_stale", preserve_stale)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="preserveStale")
    def preserve_stale(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_stale")

    @preserve_stale.setter
    def preserve_stale(self, value: Optional[bool]):
        pulumi.set(self, "preserve_stale", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[str]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheIdArgs:
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 include_value: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 optional: Optional[bool] = None,
                 rule: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        if elements is not None:
            pulumi.set(__self__, "elements", elements)
        if include_value is not None:
            pulumi.set(__self__, "include_value", include_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter(name="includeValue")
    def include_value(self) -> Optional[bool]:
        return pulumi.get(self, "include_value")

    @include_value.setter
    def include_value(self, value: Optional[bool]):
        pulumi.set(self, "include_value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[bool]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[str]:
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[str]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[str]):
        pulumi.set(self, "variable_name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyIgnoreCaseArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyQueryParamsArgs:
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 exact_match: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 parameters: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[str]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[bool]:
        return pulumi.get(self, "exact_match")

    @exact_match.setter
    def exact_match(self, value: Optional[bool]):
        pulumi.set(self, "exact_match", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyRewriteArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 purge_key: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if purge_key is not None:
            pulumi.set(__self__, "purge_key", purge_key)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="purgeKey")
    def purge_key(self) -> Optional[str]:
        return pulumi.get(self, "purge_key")

    @purge_key.setter
    def purge_key(self, value: Optional[str]):
        pulumi.set(self, "purge_key", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCachePostArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_body: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_body is not None:
            pulumi.set(__self__, "use_body", use_body)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useBody")
    def use_body(self) -> Optional[str]:
        return pulumi.get(self, "use_body")

    @use_body.setter
    def use_body(self, value: Optional[str]):
        pulumi.set(self, "use_body", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheRedirectArgs:
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 tag: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[str]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagVisibleArgs:
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[str]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCachingArgs:
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 cache_control_directives: Optional[str] = None,
                 cacheability_settings: Optional[str] = None,
                 default_ttl: Optional[str] = None,
                 enhanced_rfc_support: Optional[bool] = None,
                 expiration_settings: Optional[str] = None,
                 honor_max_age: Optional[bool] = None,
                 honor_must_revalidate: Optional[bool] = None,
                 honor_no_cache: Optional[bool] = None,
                 honor_no_store: Optional[bool] = None,
                 honor_private: Optional[bool] = None,
                 honor_proxy_revalidate: Optional[bool] = None,
                 honor_s_maxage: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 must_revalidate: Optional[bool] = None,
                 revalidation_settings: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if cache_control_directives is not None:
            pulumi.set(__self__, "cache_control_directives", cache_control_directives)
        if cacheability_settings is not None:
            pulumi.set(__self__, "cacheability_settings", cacheability_settings)
        if default_ttl is not None:
            pulumi.set(__self__, "default_ttl", default_ttl)
        if enhanced_rfc_support is not None:
            pulumi.set(__self__, "enhanced_rfc_support", enhanced_rfc_support)
        if expiration_settings is not None:
            pulumi.set(__self__, "expiration_settings", expiration_settings)
        if honor_max_age is not None:
            pulumi.set(__self__, "honor_max_age", honor_max_age)
        if honor_must_revalidate is not None:
            pulumi.set(__self__, "honor_must_revalidate", honor_must_revalidate)
        if honor_no_cache is not None:
            pulumi.set(__self__, "honor_no_cache", honor_no_cache)
        if honor_no_store is not None:
            pulumi.set(__self__, "honor_no_store", honor_no_store)
        if honor_private is not None:
            pulumi.set(__self__, "honor_private", honor_private)
        if honor_proxy_revalidate is not None:
            pulumi.set(__self__, "honor_proxy_revalidate", honor_proxy_revalidate)
        if honor_s_maxage is not None:
            pulumi.set(__self__, "honor_s_maxage", honor_s_maxage)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if must_revalidate is not None:
            pulumi.set(__self__, "must_revalidate", must_revalidate)
        if revalidation_settings is not None:
            pulumi.set(__self__, "revalidation_settings", revalidation_settings)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[str]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter(name="cacheControlDirectives")
    def cache_control_directives(self) -> Optional[str]:
        return pulumi.get(self, "cache_control_directives")

    @cache_control_directives.setter
    def cache_control_directives(self, value: Optional[str]):
        pulumi.set(self, "cache_control_directives", value)

    @property
    @pulumi.getter(name="cacheabilitySettings")
    def cacheability_settings(self) -> Optional[str]:
        return pulumi.get(self, "cacheability_settings")

    @cacheability_settings.setter
    def cacheability_settings(self, value: Optional[str]):
        pulumi.set(self, "cacheability_settings", value)

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[str]:
        return pulumi.get(self, "default_ttl")

    @default_ttl.setter
    def default_ttl(self, value: Optional[str]):
        pulumi.set(self, "default_ttl", value)

    @property
    @pulumi.getter(name="enhancedRfcSupport")
    def enhanced_rfc_support(self) -> Optional[bool]:
        return pulumi.get(self, "enhanced_rfc_support")

    @enhanced_rfc_support.setter
    def enhanced_rfc_support(self, value: Optional[bool]):
        pulumi.set(self, "enhanced_rfc_support", value)

    @property
    @pulumi.getter(name="expirationSettings")
    def expiration_settings(self) -> Optional[str]:
        return pulumi.get(self, "expiration_settings")

    @expiration_settings.setter
    def expiration_settings(self, value: Optional[str]):
        pulumi.set(self, "expiration_settings", value)

    @property
    @pulumi.getter(name="honorMaxAge")
    def honor_max_age(self) -> Optional[bool]:
        return pulumi.get(self, "honor_max_age")

    @honor_max_age.setter
    def honor_max_age(self, value: Optional[bool]):
        pulumi.set(self, "honor_max_age", value)

    @property
    @pulumi.getter(name="honorMustRevalidate")
    def honor_must_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "honor_must_revalidate")

    @honor_must_revalidate.setter
    def honor_must_revalidate(self, value: Optional[bool]):
        pulumi.set(self, "honor_must_revalidate", value)

    @property
    @pulumi.getter(name="honorNoCache")
    def honor_no_cache(self) -> Optional[bool]:
        return pulumi.get(self, "honor_no_cache")

    @honor_no_cache.setter
    def honor_no_cache(self, value: Optional[bool]):
        pulumi.set(self, "honor_no_cache", value)

    @property
    @pulumi.getter(name="honorNoStore")
    def honor_no_store(self) -> Optional[bool]:
        return pulumi.get(self, "honor_no_store")

    @honor_no_store.setter
    def honor_no_store(self, value: Optional[bool]):
        pulumi.set(self, "honor_no_store", value)

    @property
    @pulumi.getter(name="honorPrivate")
    def honor_private(self) -> Optional[bool]:
        return pulumi.get(self, "honor_private")

    @honor_private.setter
    def honor_private(self, value: Optional[bool]):
        pulumi.set(self, "honor_private", value)

    @property
    @pulumi.getter(name="honorProxyRevalidate")
    def honor_proxy_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "honor_proxy_revalidate")

    @honor_proxy_revalidate.setter
    def honor_proxy_revalidate(self, value: Optional[bool]):
        pulumi.set(self, "honor_proxy_revalidate", value)

    @property
    @pulumi.getter(name="honorSMaxage")
    def honor_s_maxage(self) -> Optional[bool]:
        return pulumi.get(self, "honor_s_maxage")

    @honor_s_maxage.setter
    def honor_s_maxage(self, value: Optional[bool]):
        pulumi.set(self, "honor_s_maxage", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="mustRevalidate")
    def must_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "must_revalidate")

    @must_revalidate.setter
    def must_revalidate(self, value: Optional[bool]):
        pulumi.set(self, "must_revalidate", value)

    @property
    @pulumi.getter(name="revalidationSettings")
    def revalidation_settings(self) -> Optional[str]:
        return pulumi.get(self, "revalidation_settings")

    @revalidation_settings.setter
    def revalidation_settings(self, value: Optional[str]):
        pulumi.set(self, "revalidation_settings", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[str]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCentralAuthorizationArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorChaseRedirectsArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 limit: Optional[str] = None,
                 locked: Optional[bool] = None,
                 serve404: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if serve404 is not None:
            pulumi.set(__self__, "serve404", serve404)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[str]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def serve404(self) -> Optional[bool]:
        return pulumi.get(self, "serve404")

    @serve404.setter
    def serve404(self, value: Optional[bool]):
        pulumi.set(self, "serve404", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorClientCharacteristicsArgs:
    def __init__(__self__, *,
                 country: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if country is not None:
            pulumi.set(__self__, "country", country)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCloudInterconnectsArgs:
    def __init__(__self__, *,
                 cloud_locations: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloud_locations is not None:
            pulumi.set(__self__, "cloud_locations", cloud_locations)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudLocations")
    def cloud_locations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cloud_locations")

    @cloud_locations.setter
    def cloud_locations(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "cloud_locations", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperAdvancedArgs:
    def __init__(__self__, *,
                 custom_failover_map: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 failover_map: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_failover_map is not None:
            pulumi.set(__self__, "custom_failover_map", custom_failover_map)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failover_map is not None:
            pulumi.set(__self__, "failover_map", failover_map)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customFailoverMap")
    def custom_failover_map(self) -> Optional[str]:
        return pulumi.get(self, "custom_failover_map")

    @custom_failover_map.setter
    def custom_failover_map(self, value: Optional[str]):
        pulumi.set(self, "custom_failover_map", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="failoverMap")
    def failover_map(self) -> Optional[str]:
        return pulumi.get(self, "failover_map")

    @failover_map.setter
    def failover_map(self, value: Optional[str]):
        pulumi.set(self, "failover_map", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorConditionalOriginArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: Optional[str]):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorConstructResponseArgs:
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 force_eviction: Optional[bool] = None,
                 ignore_purge: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if body is not None:
            pulumi.set(__self__, "body", body)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if force_eviction is not None:
            pulumi.set(__self__, "force_eviction", force_eviction)
        if ignore_purge is not None:
            pulumi.set(__self__, "ignore_purge", ignore_purge)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[str]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="forceEviction")
    def force_eviction(self) -> Optional[bool]:
        return pulumi.get(self, "force_eviction")

    @force_eviction.setter
    def force_eviction(self, value: Optional[bool]):
        pulumi.set(self, "force_eviction", value)

    @property
    @pulumi.getter(name="ignorePurge")
    def ignore_purge(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_purge")

    @ignore_purge.setter
    def ignore_purge(self, value: Optional[bool]):
        pulumi.set(self, "ignore_purge", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: Optional[int]):
        pulumi.set(self, "response_code", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsArgs:
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @catalog_size.setter
    def catalog_size(self, value: Optional[str]):
        pulumi.set(self, "catalog_size", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @object_size.setter
    def object_size(self, value: Optional[str]):
        pulumi.set(self, "object_size", value)

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @popularity_distribution.setter
    def popularity_distribution(self, value: Optional[str]):
        pulumi.set(self, "popularity_distribution", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsAmdArgs:
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_dash_custom: Optional[int] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hds_custom: Optional[int] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_hls_custom: Optional[float] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_duration_smooth_custom: Optional[float] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if dash is not None:
            pulumi.set(__self__, "dash", dash)
        if hds is not None:
            pulumi.set(__self__, "hds", hds)
        if hls is not None:
            pulumi.set(__self__, "hls", hls)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            pulumi.set(__self__, "segment_duration_dash", segment_duration_dash)
        if segment_duration_dash_custom is not None:
            pulumi.set(__self__, "segment_duration_dash_custom", segment_duration_dash_custom)
        if segment_duration_hds is not None:
            pulumi.set(__self__, "segment_duration_hds", segment_duration_hds)
        if segment_duration_hds_custom is not None:
            pulumi.set(__self__, "segment_duration_hds_custom", segment_duration_hds_custom)
        if segment_duration_hls is not None:
            pulumi.set(__self__, "segment_duration_hls", segment_duration_hls)
        if segment_duration_hls_custom is not None:
            pulumi.set(__self__, "segment_duration_hls_custom", segment_duration_hls_custom)
        if segment_duration_smooth is not None:
            pulumi.set(__self__, "segment_duration_smooth", segment_duration_smooth)
        if segment_duration_smooth_custom is not None:
            pulumi.set(__self__, "segment_duration_smooth_custom", segment_duration_smooth_custom)
        if segment_size_dash is not None:
            pulumi.set(__self__, "segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            pulumi.set(__self__, "segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            pulumi.set(__self__, "segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            pulumi.set(__self__, "segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            pulumi.set(__self__, "smooth", smooth)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @catalog_size.setter
    def catalog_size(self, value: Optional[str]):
        pulumi.set(self, "catalog_size", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @dash.setter
    def dash(self, value: Optional[bool]):
        pulumi.set(self, "dash", value)

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @hds.setter
    def hds(self, value: Optional[bool]):
        pulumi.set(self, "hds", value)

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @hls.setter
    def hls(self, value: Optional[bool]):
        pulumi.set(self, "hls", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @popularity_distribution.setter
    def popularity_distribution(self, value: Optional[str]):
        pulumi.set(self, "popularity_distribution", value)

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @segment_duration_dash.setter
    def segment_duration_dash(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_dash", value)

    @property
    @pulumi.getter(name="segmentDurationDashCustom")
    def segment_duration_dash_custom(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration_dash_custom")

    @segment_duration_dash_custom.setter
    def segment_duration_dash_custom(self, value: Optional[int]):
        pulumi.set(self, "segment_duration_dash_custom", value)

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @segment_duration_hds.setter
    def segment_duration_hds(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_hds", value)

    @property
    @pulumi.getter(name="segmentDurationHdsCustom")
    def segment_duration_hds_custom(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration_hds_custom")

    @segment_duration_hds_custom.setter
    def segment_duration_hds_custom(self, value: Optional[int]):
        pulumi.set(self, "segment_duration_hds_custom", value)

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @segment_duration_hls.setter
    def segment_duration_hls(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_hls", value)

    @property
    @pulumi.getter(name="segmentDurationHlsCustom")
    def segment_duration_hls_custom(self) -> Optional[float]:
        return pulumi.get(self, "segment_duration_hls_custom")

    @segment_duration_hls_custom.setter
    def segment_duration_hls_custom(self, value: Optional[float]):
        pulumi.set(self, "segment_duration_hls_custom", value)

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @segment_duration_smooth.setter
    def segment_duration_smooth(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_smooth", value)

    @property
    @pulumi.getter(name="segmentDurationSmoothCustom")
    def segment_duration_smooth_custom(self) -> Optional[float]:
        return pulumi.get(self, "segment_duration_smooth_custom")

    @segment_duration_smooth_custom.setter
    def segment_duration_smooth_custom(self, value: Optional[float]):
        pulumi.set(self, "segment_duration_smooth_custom", value)

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @segment_size_dash.setter
    def segment_size_dash(self, value: Optional[str]):
        pulumi.set(self, "segment_size_dash", value)

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @segment_size_hds.setter
    def segment_size_hds(self, value: Optional[str]):
        pulumi.set(self, "segment_size_hds", value)

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @segment_size_hls.setter
    def segment_size_hls(self, value: Optional[str]):
        pulumi.set(self, "segment_size_hls", value)

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @segment_size_smooth.setter
    def segment_size_smooth(self, value: Optional[str]):
        pulumi.set(self, "segment_size_smooth", value)

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @smooth.setter
    def smooth(self, value: Optional[bool]):
        pulumi.set(self, "smooth", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsDdArgs:
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 optimize_option: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if optimize_option is not None:
            pulumi.set(__self__, "optimize_option", optimize_option)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @catalog_size.setter
    def catalog_size(self, value: Optional[str]):
        pulumi.set(self, "catalog_size", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @object_size.setter
    def object_size(self, value: Optional[str]):
        pulumi.set(self, "object_size", value)

    @property
    @pulumi.getter(name="optimizeOption")
    def optimize_option(self) -> Optional[bool]:
        return pulumi.get(self, "optimize_option")

    @optimize_option.setter
    def optimize_option(self, value: Optional[bool]):
        pulumi.set(self, "optimize_option", value)

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @popularity_distribution.setter
    def popularity_distribution(self, value: Optional[str]):
        pulumi.set(self, "popularity_distribution", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLargeFileArgs:
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @catalog_size.setter
    def catalog_size(self, value: Optional[str]):
        pulumi.set(self, "catalog_size", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @object_size.setter
    def object_size(self, value: Optional[str]):
        pulumi.set(self, "object_size", value)

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @popularity_distribution.setter
    def popularity_distribution(self, value: Optional[str]):
        pulumi.set(self, "popularity_distribution", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLiveArgs:
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if dash is not None:
            pulumi.set(__self__, "dash", dash)
        if hds is not None:
            pulumi.set(__self__, "hds", hds)
        if hls is not None:
            pulumi.set(__self__, "hls", hls)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            pulumi.set(__self__, "segment_duration_dash", segment_duration_dash)
        if segment_duration_hds is not None:
            pulumi.set(__self__, "segment_duration_hds", segment_duration_hds)
        if segment_duration_hls is not None:
            pulumi.set(__self__, "segment_duration_hls", segment_duration_hls)
        if segment_duration_smooth is not None:
            pulumi.set(__self__, "segment_duration_smooth", segment_duration_smooth)
        if segment_size_dash is not None:
            pulumi.set(__self__, "segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            pulumi.set(__self__, "segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            pulumi.set(__self__, "segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            pulumi.set(__self__, "segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            pulumi.set(__self__, "smooth", smooth)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @catalog_size.setter
    def catalog_size(self, value: Optional[str]):
        pulumi.set(self, "catalog_size", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @dash.setter
    def dash(self, value: Optional[bool]):
        pulumi.set(self, "dash", value)

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @hds.setter
    def hds(self, value: Optional[bool]):
        pulumi.set(self, "hds", value)

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @hls.setter
    def hls(self, value: Optional[bool]):
        pulumi.set(self, "hls", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @popularity_distribution.setter
    def popularity_distribution(self, value: Optional[str]):
        pulumi.set(self, "popularity_distribution", value)

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @segment_duration_dash.setter
    def segment_duration_dash(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_dash", value)

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @segment_duration_hds.setter
    def segment_duration_hds(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_hds", value)

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @segment_duration_hls.setter
    def segment_duration_hls(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_hls", value)

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @segment_duration_smooth.setter
    def segment_duration_smooth(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_smooth", value)

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @segment_size_dash.setter
    def segment_size_dash(self, value: Optional[str]):
        pulumi.set(self, "segment_size_dash", value)

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @segment_size_hds.setter
    def segment_size_hds(self, value: Optional[str]):
        pulumi.set(self, "segment_size_hds", value)

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @segment_size_hls.setter
    def segment_size_hls(self, value: Optional[str]):
        pulumi.set(self, "segment_size_hls", value)

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @segment_size_smooth.setter
    def segment_size_smooth(self, value: Optional[str]):
        pulumi.set(self, "segment_size_smooth", value)

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @smooth.setter
    def smooth(self, value: Optional[bool]):
        pulumi.set(self, "smooth", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdVodArgs:
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if dash is not None:
            pulumi.set(__self__, "dash", dash)
        if hds is not None:
            pulumi.set(__self__, "hds", hds)
        if hls is not None:
            pulumi.set(__self__, "hls", hls)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            pulumi.set(__self__, "segment_duration_dash", segment_duration_dash)
        if segment_duration_hds is not None:
            pulumi.set(__self__, "segment_duration_hds", segment_duration_hds)
        if segment_duration_hls is not None:
            pulumi.set(__self__, "segment_duration_hls", segment_duration_hls)
        if segment_duration_smooth is not None:
            pulumi.set(__self__, "segment_duration_smooth", segment_duration_smooth)
        if segment_size_dash is not None:
            pulumi.set(__self__, "segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            pulumi.set(__self__, "segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            pulumi.set(__self__, "segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            pulumi.set(__self__, "segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            pulumi.set(__self__, "smooth", smooth)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @catalog_size.setter
    def catalog_size(self, value: Optional[str]):
        pulumi.set(self, "catalog_size", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @dash.setter
    def dash(self, value: Optional[bool]):
        pulumi.set(self, "dash", value)

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @hds.setter
    def hds(self, value: Optional[bool]):
        pulumi.set(self, "hds", value)

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @hls.setter
    def hls(self, value: Optional[bool]):
        pulumi.set(self, "hls", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @popularity_distribution.setter
    def popularity_distribution(self, value: Optional[str]):
        pulumi.set(self, "popularity_distribution", value)

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @segment_duration_dash.setter
    def segment_duration_dash(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_dash", value)

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @segment_duration_hds.setter
    def segment_duration_hds(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_hds", value)

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @segment_duration_hls.setter
    def segment_duration_hls(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_hls", value)

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @segment_duration_smooth.setter
    def segment_duration_smooth(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_smooth", value)

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @segment_size_dash.setter
    def segment_size_dash(self, value: Optional[str]):
        pulumi.set(self, "segment_size_dash", value)

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @segment_size_hds.setter
    def segment_size_hds(self, value: Optional[str]):
        pulumi.set(self, "segment_size_hds", value)

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @segment_size_hls.setter
    def segment_size_hls(self, value: Optional[str]):
        pulumi.set(self, "segment_size_hls", value)

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @segment_size_smooth.setter
    def segment_size_smooth(self, value: Optional[str]):
        pulumi.set(self, "segment_size_smooth", value)

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @smooth.setter
    def smooth(self, value: Optional[bool]):
        pulumi.set(self, "smooth", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentPrePositionArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 first_location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 second_location: Optional[str] = None,
                 source_type: Optional[str] = None,
                 targets: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if first_location is not None:
            pulumi.set(__self__, "first_location", first_location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if second_location is not None:
            pulumi.set(__self__, "second_location", second_location)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="firstLocation")
    def first_location(self) -> Optional[str]:
        return pulumi.get(self, "first_location")

    @first_location.setter
    def first_location(self, value: Optional[str]):
        pulumi.set(self, "first_location", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="secondLocation")
    def second_location(self) -> Optional[str]:
        return pulumi.get(self, "second_location")

    @second_location.setter
    def second_location(self, value: Optional[str]):
        pulumi.set(self, "second_location", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[str]:
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[str]):
        pulumi.set(self, "targets", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentTargetingProtectionArgs:
    def __init__(__self__, *,
                 countries: Optional[Sequence[str]] = None,
                 dmas: Optional[Sequence[str]] = None,
                 enable_geo_protection: Optional[bool] = None,
                 enable_geo_redirect_on_deny: Optional[bool] = None,
                 enable_ip_protection: Optional[bool] = None,
                 enable_ip_redirect_on_deny: Optional[bool] = None,
                 enable_referrer_protection: Optional[bool] = None,
                 enable_referrer_redirect_on_deny: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 geo_protection_mode: Optional[str] = None,
                 geo_protection_title: Optional[str] = None,
                 geo_redirect_url: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 ip_protection_mode: Optional[str] = None,
                 ip_protection_title: Optional[str] = None,
                 ip_redirect_url: Optional[str] = None,
                 locked: Optional[bool] = None,
                 override_ip_addresses: Optional[Sequence[str]] = None,
                 referrer_domains: Optional[Sequence[str]] = None,
                 referrer_protection_mode: Optional[str] = None,
                 referrer_protection_title: Optional[str] = None,
                 referrer_redirect_url: Optional[str] = None,
                 regions: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if dmas is not None:
            pulumi.set(__self__, "dmas", dmas)
        if enable_geo_protection is not None:
            pulumi.set(__self__, "enable_geo_protection", enable_geo_protection)
        if enable_geo_redirect_on_deny is not None:
            pulumi.set(__self__, "enable_geo_redirect_on_deny", enable_geo_redirect_on_deny)
        if enable_ip_protection is not None:
            pulumi.set(__self__, "enable_ip_protection", enable_ip_protection)
        if enable_ip_redirect_on_deny is not None:
            pulumi.set(__self__, "enable_ip_redirect_on_deny", enable_ip_redirect_on_deny)
        if enable_referrer_protection is not None:
            pulumi.set(__self__, "enable_referrer_protection", enable_referrer_protection)
        if enable_referrer_redirect_on_deny is not None:
            pulumi.set(__self__, "enable_referrer_redirect_on_deny", enable_referrer_redirect_on_deny)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if geo_protection_mode is not None:
            pulumi.set(__self__, "geo_protection_mode", geo_protection_mode)
        if geo_protection_title is not None:
            pulumi.set(__self__, "geo_protection_title", geo_protection_title)
        if geo_redirect_url is not None:
            pulumi.set(__self__, "geo_redirect_url", geo_redirect_url)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ip_protection_mode is not None:
            pulumi.set(__self__, "ip_protection_mode", ip_protection_mode)
        if ip_protection_title is not None:
            pulumi.set(__self__, "ip_protection_title", ip_protection_title)
        if ip_redirect_url is not None:
            pulumi.set(__self__, "ip_redirect_url", ip_redirect_url)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if override_ip_addresses is not None:
            pulumi.set(__self__, "override_ip_addresses", override_ip_addresses)
        if referrer_domains is not None:
            pulumi.set(__self__, "referrer_domains", referrer_domains)
        if referrer_protection_mode is not None:
            pulumi.set(__self__, "referrer_protection_mode", referrer_protection_mode)
        if referrer_protection_title is not None:
            pulumi.set(__self__, "referrer_protection_title", referrer_protection_title)
        if referrer_redirect_url is not None:
            pulumi.set(__self__, "referrer_redirect_url", referrer_redirect_url)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "countries", value)

    @property
    @pulumi.getter
    def dmas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dmas")

    @dmas.setter
    def dmas(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "dmas", value)

    @property
    @pulumi.getter(name="enableGeoProtection")
    def enable_geo_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_geo_protection")

    @enable_geo_protection.setter
    def enable_geo_protection(self, value: Optional[bool]):
        pulumi.set(self, "enable_geo_protection", value)

    @property
    @pulumi.getter(name="enableGeoRedirectOnDeny")
    def enable_geo_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_geo_redirect_on_deny")

    @enable_geo_redirect_on_deny.setter
    def enable_geo_redirect_on_deny(self, value: Optional[bool]):
        pulumi.set(self, "enable_geo_redirect_on_deny", value)

    @property
    @pulumi.getter(name="enableIpProtection")
    def enable_ip_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_protection")

    @enable_ip_protection.setter
    def enable_ip_protection(self, value: Optional[bool]):
        pulumi.set(self, "enable_ip_protection", value)

    @property
    @pulumi.getter(name="enableIpRedirectOnDeny")
    def enable_ip_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_redirect_on_deny")

    @enable_ip_redirect_on_deny.setter
    def enable_ip_redirect_on_deny(self, value: Optional[bool]):
        pulumi.set(self, "enable_ip_redirect_on_deny", value)

    @property
    @pulumi.getter(name="enableReferrerProtection")
    def enable_referrer_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_referrer_protection")

    @enable_referrer_protection.setter
    def enable_referrer_protection(self, value: Optional[bool]):
        pulumi.set(self, "enable_referrer_protection", value)

    @property
    @pulumi.getter(name="enableReferrerRedirectOnDeny")
    def enable_referrer_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_referrer_redirect_on_deny")

    @enable_referrer_redirect_on_deny.setter
    def enable_referrer_redirect_on_deny(self, value: Optional[bool]):
        pulumi.set(self, "enable_referrer_redirect_on_deny", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="geoProtectionMode")
    def geo_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "geo_protection_mode")

    @geo_protection_mode.setter
    def geo_protection_mode(self, value: Optional[str]):
        pulumi.set(self, "geo_protection_mode", value)

    @property
    @pulumi.getter(name="geoProtectionTitle")
    def geo_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "geo_protection_title")

    @geo_protection_title.setter
    def geo_protection_title(self, value: Optional[str]):
        pulumi.set(self, "geo_protection_title", value)

    @property
    @pulumi.getter(name="geoRedirectUrl")
    def geo_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "geo_redirect_url")

    @geo_redirect_url.setter
    def geo_redirect_url(self, value: Optional[str]):
        pulumi.set(self, "geo_redirect_url", value)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_addresses", value)

    @property
    @pulumi.getter(name="ipProtectionMode")
    def ip_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "ip_protection_mode")

    @ip_protection_mode.setter
    def ip_protection_mode(self, value: Optional[str]):
        pulumi.set(self, "ip_protection_mode", value)

    @property
    @pulumi.getter(name="ipProtectionTitle")
    def ip_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "ip_protection_title")

    @ip_protection_title.setter
    def ip_protection_title(self, value: Optional[str]):
        pulumi.set(self, "ip_protection_title", value)

    @property
    @pulumi.getter(name="ipRedirectUrl")
    def ip_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "ip_redirect_url")

    @ip_redirect_url.setter
    def ip_redirect_url(self, value: Optional[str]):
        pulumi.set(self, "ip_redirect_url", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="overrideIpAddresses")
    def override_ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "override_ip_addresses")

    @override_ip_addresses.setter
    def override_ip_addresses(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "override_ip_addresses", value)

    @property
    @pulumi.getter(name="referrerDomains")
    def referrer_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "referrer_domains")

    @referrer_domains.setter
    def referrer_domains(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "referrer_domains", value)

    @property
    @pulumi.getter(name="referrerProtectionMode")
    def referrer_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "referrer_protection_mode")

    @referrer_protection_mode.setter
    def referrer_protection_mode(self, value: Optional[str]):
        pulumi.set(self, "referrer_protection_mode", value)

    @property
    @pulumi.getter(name="referrerProtectionTitle")
    def referrer_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "referrer_protection_title")

    @referrer_protection_title.setter
    def referrer_protection_title(self, value: Optional[str]):
        pulumi.set(self, "referrer_protection_title", value)

    @property
    @pulumi.getter(name="referrerRedirectUrl")
    def referrer_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "referrer_redirect_url")

    @referrer_redirect_url.setter
    def referrer_redirect_url(self, value: Optional[str]):
        pulumi.set(self, "referrer_redirect_url", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCorsSupportArgs:
    def __init__(__self__, *,
                 allow_credentials: Optional[bool] = None,
                 allow_headers: Optional[str] = None,
                 allow_origins: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 expose_headers: Optional[Sequence[str]] = None,
                 headers: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 methods: Optional[Sequence[str]] = None,
                 origins: Optional[Sequence[str]] = None,
                 preflight_max_age: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_credentials is not None:
            pulumi.set(__self__, "allow_credentials", allow_credentials)
        if allow_headers is not None:
            pulumi.set(__self__, "allow_headers", allow_headers)
        if allow_origins is not None:
            pulumi.set(__self__, "allow_origins", allow_origins)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expose_headers is not None:
            pulumi.set(__self__, "expose_headers", expose_headers)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)
        if preflight_max_age is not None:
            pulumi.set(__self__, "preflight_max_age", preflight_max_age)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "allow_credentials")

    @allow_credentials.setter
    def allow_credentials(self, value: Optional[bool]):
        pulumi.set(self, "allow_credentials", value)

    @property
    @pulumi.getter(name="allowHeaders")
    def allow_headers(self) -> Optional[str]:
        return pulumi.get(self, "allow_headers")

    @allow_headers.setter
    def allow_headers(self, value: Optional[str]):
        pulumi.set(self, "allow_headers", value)

    @property
    @pulumi.getter(name="allowOrigins")
    def allow_origins(self) -> Optional[str]:
        return pulumi.get(self, "allow_origins")

    @allow_origins.setter
    def allow_origins(self, value: Optional[str]):
        pulumi.set(self, "allow_origins", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "expose_headers")

    @expose_headers.setter
    def expose_headers(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "expose_headers", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "origins")

    @origins.setter
    def origins(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "origins", value)

    @property
    @pulumi.getter(name="preflightMaxAge")
    def preflight_max_age(self) -> Optional[str]:
        return pulumi.get(self, "preflight_max_age")

    @preflight_max_age.setter
    def preflight_max_age(self, value: Optional[str]):
        pulumi.set(self, "preflight_max_age", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueArgs'] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueArgs']:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueArgs']):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCustomBehaviorArgs:
    def __init__(__self__, *,
                 behavior_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior_id is not None:
            pulumi.set(__self__, "behavior_id", behavior_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="behaviorId")
    def behavior_id(self) -> Optional[str]:
        return pulumi.get(self, "behavior_id")

    @behavior_id.setter
    def behavior_id(self, value: Optional[str]):
        pulumi.set(self, "behavior_id", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDatastreamArgs:
    def __init__(__self__, *,
                 beacon_stream_title: Optional[str] = None,
                 collect_midgress_traffic: Optional[bool] = None,
                 datastream_ids: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 log_enabled: Optional[bool] = None,
                 log_stream_name: Optional[int] = None,
                 log_stream_title: Optional[str] = None,
                 sampling_percentage: Optional[int] = None,
                 stream_type: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if beacon_stream_title is not None:
            pulumi.set(__self__, "beacon_stream_title", beacon_stream_title)
        if collect_midgress_traffic is not None:
            pulumi.set(__self__, "collect_midgress_traffic", collect_midgress_traffic)
        if datastream_ids is not None:
            pulumi.set(__self__, "datastream_ids", datastream_ids)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if log_enabled is not None:
            pulumi.set(__self__, "log_enabled", log_enabled)
        if log_stream_name is not None:
            pulumi.set(__self__, "log_stream_name", log_stream_name)
        if log_stream_title is not None:
            pulumi.set(__self__, "log_stream_title", log_stream_title)
        if sampling_percentage is not None:
            pulumi.set(__self__, "sampling_percentage", sampling_percentage)
        if stream_type is not None:
            pulumi.set(__self__, "stream_type", stream_type)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="beaconStreamTitle")
    def beacon_stream_title(self) -> Optional[str]:
        return pulumi.get(self, "beacon_stream_title")

    @beacon_stream_title.setter
    def beacon_stream_title(self, value: Optional[str]):
        pulumi.set(self, "beacon_stream_title", value)

    @property
    @pulumi.getter(name="collectMidgressTraffic")
    def collect_midgress_traffic(self) -> Optional[bool]:
        return pulumi.get(self, "collect_midgress_traffic")

    @collect_midgress_traffic.setter
    def collect_midgress_traffic(self, value: Optional[bool]):
        pulumi.set(self, "collect_midgress_traffic", value)

    @property
    @pulumi.getter(name="datastreamIds")
    def datastream_ids(self) -> Optional[str]:
        return pulumi.get(self, "datastream_ids")

    @datastream_ids.setter
    def datastream_ids(self, value: Optional[str]):
        pulumi.set(self, "datastream_ids", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="logEnabled")
    def log_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "log_enabled")

    @log_enabled.setter
    def log_enabled(self, value: Optional[bool]):
        pulumi.set(self, "log_enabled", value)

    @property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> Optional[int]:
        return pulumi.get(self, "log_stream_name")

    @log_stream_name.setter
    def log_stream_name(self, value: Optional[int]):
        pulumi.set(self, "log_stream_name", value)

    @property
    @pulumi.getter(name="logStreamTitle")
    def log_stream_title(self) -> Optional[str]:
        return pulumi.get(self, "log_stream_title")

    @log_stream_title.setter
    def log_stream_title(self, value: Optional[str]):
        pulumi.set(self, "log_stream_title", value)

    @property
    @pulumi.getter(name="samplingPercentage")
    def sampling_percentage(self) -> Optional[int]:
        return pulumi.get(self, "sampling_percentage")

    @sampling_percentage.setter
    def sampling_percentage(self, value: Optional[int]):
        pulumi.set(self, "sampling_percentage", value)

    @property
    @pulumi.getter(name="streamType")
    def stream_type(self) -> Optional[str]:
        return pulumi.get(self, "stream_type")

    @stream_type.setter
    def stream_type(self, value: Optional[str]):
        pulumi.set(self, "stream_type", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpArgs:
    def __init__(__self__, *,
                 anonymous: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 gwenabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 namespace_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tlsenabled: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 wsenabled: Optional[bool] = None):
        if anonymous is not None:
            pulumi.set(__self__, "anonymous", anonymous)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if gwenabled is not None:
            pulumi.set(__self__, "gwenabled", gwenabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tlsenabled is not None:
            pulumi.set(__self__, "tlsenabled", tlsenabled)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if wsenabled is not None:
            pulumi.set(__self__, "wsenabled", wsenabled)

    @property
    @pulumi.getter
    def anonymous(self) -> Optional[bool]:
        return pulumi.get(self, "anonymous")

    @anonymous.setter
    def anonymous(self, value: Optional[bool]):
        pulumi.set(self, "anonymous", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def gwenabled(self) -> Optional[bool]:
        return pulumi.get(self, "gwenabled")

    @gwenabled.setter
    def gwenabled(self, value: Optional[bool]):
        pulumi.set(self, "gwenabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[str]:
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: Optional[str]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def tlsenabled(self) -> Optional[bool]:
        return pulumi.get(self, "tlsenabled")

    @tlsenabled.setter
    def tlsenabled(self, value: Optional[bool]):
        pulumi.set(self, "tlsenabled", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def wsenabled(self) -> Optional[bool]:
        return pulumi.get(self, "wsenabled")

    @wsenabled.setter
    def wsenabled(self, value: Optional[bool]):
        pulumi.set(self, "wsenabled", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthHmacTransformationArgs:
    def __init__(__self__, *,
                 hash_conversion_algorithm: Optional[str] = None,
                 hash_conversion_key: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if hash_conversion_algorithm is not None:
            pulumi.set(__self__, "hash_conversion_algorithm", hash_conversion_algorithm)
        if hash_conversion_key is not None:
            pulumi.set(__self__, "hash_conversion_key", hash_conversion_key)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="hashConversionAlgorithm")
    def hash_conversion_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hash_conversion_algorithm")

    @hash_conversion_algorithm.setter
    def hash_conversion_algorithm(self, value: Optional[str]):
        pulumi.set(self, "hash_conversion_algorithm", value)

    @property
    @pulumi.getter(name="hashConversionKey")
    def hash_conversion_key(self) -> Optional[str]:
        return pulumi.get(self, "hash_conversion_key")

    @hash_conversion_key.setter
    def hash_conversion_key(self, value: Optional[str]):
        pulumi.set(self, "hash_conversion_key", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthRegexTransformationArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if regex_pattern is not None:
            pulumi.set(__self__, "regex_pattern", regex_pattern)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @regex_pattern.setter
    def regex_pattern(self, value: Optional[str]):
        pulumi.set(self, "regex_pattern", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthSubstringTransformationArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 substring_end: Optional[str] = None,
                 substring_start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if substring_end is not None:
            pulumi.set(__self__, "substring_end", substring_end)
        if substring_start is not None:
            pulumi.set(__self__, "substring_start", substring_start)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="substringEnd")
    def substring_end(self) -> Optional[str]:
        return pulumi.get(self, "substring_end")

    @substring_end.setter
    def substring_end(self, value: Optional[str]):
        pulumi.set(self, "substring_end", value)

    @property
    @pulumi.getter(name="substringStart")
    def substring_start(self) -> Optional[str]:
        return pulumi.get(self, "substring_start")

    @substring_start.setter
    def substring_start(self, value: Optional[str]):
        pulumi.set(self, "substring_start", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthVariableExtractorArgs:
    def __init__(__self__, *,
                 certificate_field: Optional[str] = None,
                 dcp_mutual_auth_processing_variable_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if certificate_field is not None:
            pulumi.set(__self__, "certificate_field", certificate_field)
        if dcp_mutual_auth_processing_variable_id is not None:
            pulumi.set(__self__, "dcp_mutual_auth_processing_variable_id", dcp_mutual_auth_processing_variable_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="certificateField")
    def certificate_field(self) -> Optional[str]:
        return pulumi.get(self, "certificate_field")

    @certificate_field.setter
    def certificate_field(self, value: Optional[str]):
        pulumi.set(self, "certificate_field", value)

    @property
    @pulumi.getter(name="dcpMutualAuthProcessingVariableId")
    def dcp_mutual_auth_processing_variable_id(self) -> Optional[str]:
        return pulumi.get(self, "dcp_mutual_auth_processing_variable_id")

    @dcp_mutual_auth_processing_variable_id.setter
    def dcp_mutual_auth_processing_variable_id(self, value: Optional[str]):
        pulumi.set(self, "dcp_mutual_auth_processing_variable_id", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpDefaultAuthzGroupsArgs:
    def __init__(__self__, *,
                 group_names: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if group_names is not None:
            pulumi.set(__self__, "group_names", group_names)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="groupNames")
    def group_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_names")

    @group_names.setter
    def group_names(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "group_names", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpDevRelationsArgs:
    def __init__(__self__, *,
                 custom_values: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 locked: Optional[bool] = None,
                 path: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_values is not None:
            pulumi.set(__self__, "custom_values", custom_values)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customValues")
    def custom_values(self) -> Optional[bool]:
        return pulumi.get(self, "custom_values")

    @custom_values.setter
    def custom_values(self, value: Optional[bool]):
        pulumi.set(self, "custom_values", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpRealTimeAuthArgs:
    def __init__(__self__, *,
                 extract_hostname: Optional[bool] = None,
                 extract_jurisdiction: Optional[bool] = None,
                 extract_namespace: Optional[bool] = None,
                 hostname_claim: Optional[str] = None,
                 jurisdiction_claim: Optional[str] = None,
                 locked: Optional[bool] = None,
                 namespace_claim: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if extract_hostname is not None:
            pulumi.set(__self__, "extract_hostname", extract_hostname)
        if extract_jurisdiction is not None:
            pulumi.set(__self__, "extract_jurisdiction", extract_jurisdiction)
        if extract_namespace is not None:
            pulumi.set(__self__, "extract_namespace", extract_namespace)
        if hostname_claim is not None:
            pulumi.set(__self__, "hostname_claim", hostname_claim)
        if jurisdiction_claim is not None:
            pulumi.set(__self__, "jurisdiction_claim", jurisdiction_claim)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if namespace_claim is not None:
            pulumi.set(__self__, "namespace_claim", namespace_claim)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="extractHostname")
    def extract_hostname(self) -> Optional[bool]:
        return pulumi.get(self, "extract_hostname")

    @extract_hostname.setter
    def extract_hostname(self, value: Optional[bool]):
        pulumi.set(self, "extract_hostname", value)

    @property
    @pulumi.getter(name="extractJurisdiction")
    def extract_jurisdiction(self) -> Optional[bool]:
        return pulumi.get(self, "extract_jurisdiction")

    @extract_jurisdiction.setter
    def extract_jurisdiction(self, value: Optional[bool]):
        pulumi.set(self, "extract_jurisdiction", value)

    @property
    @pulumi.getter(name="extractNamespace")
    def extract_namespace(self) -> Optional[bool]:
        return pulumi.get(self, "extract_namespace")

    @extract_namespace.setter
    def extract_namespace(self, value: Optional[bool]):
        pulumi.set(self, "extract_namespace", value)

    @property
    @pulumi.getter(name="hostnameClaim")
    def hostname_claim(self) -> Optional[str]:
        return pulumi.get(self, "hostname_claim")

    @hostname_claim.setter
    def hostname_claim(self, value: Optional[str]):
        pulumi.set(self, "hostname_claim", value)

    @property
    @pulumi.getter(name="jurisdictionClaim")
    def jurisdiction_claim(self) -> Optional[str]:
        return pulumi.get(self, "jurisdiction_claim")

    @jurisdiction_claim.setter
    def jurisdiction_claim(self, value: Optional[str]):
        pulumi.set(self, "jurisdiction_claim", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="namespaceClaim")
    def namespace_claim(self) -> Optional[str]:
        return pulumi.get(self, "namespace_claim")

    @namespace_claim.setter
    def namespace_claim(self, value: Optional[str]):
        pulumi.set(self, "namespace_claim", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDeliveryReceiptArgs:
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDenyAccessArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 reason: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[str]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDenyDirectFailoverAccessArgs:
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicCacheIdArgs:
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if elements is not None:
            pulumi.set(__self__, "elements", elements)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicHeaderArgs:
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if elements is not None:
            pulumi.set(__self__, "elements", elements)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDnsAsyncRefreshArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[str]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDnsPrefreshArgs:
    def __init__(__self__, *,
                 delay: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def delay(self) -> Optional[str]:
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[str]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[str]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDowngradeProtocolArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDownloadCompleteMarkerArgs:
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDownloadNotificationArgs:
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDownstreamCacheArgs:
    def __init__(__self__, *,
                 allow_behavior: Optional[str] = None,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 send_headers: Optional[str] = None,
                 send_private: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_behavior is not None:
            pulumi.set(__self__, "allow_behavior", allow_behavior)
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if send_headers is not None:
            pulumi.set(__self__, "send_headers", send_headers)
        if send_private is not None:
            pulumi.set(__self__, "send_private", send_private)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowBehavior")
    def allow_behavior(self) -> Optional[str]:
        return pulumi.get(self, "allow_behavior")

    @allow_behavior.setter
    def allow_behavior(self, value: Optional[str]):
        pulumi.set(self, "allow_behavior", value)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[str]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="sendHeaders")
    def send_headers(self) -> Optional[str]:
        return pulumi.get(self, "send_headers")

    @send_headers.setter
    def send_headers(self, value: Optional[str]):
        pulumi.set(self, "send_headers", value)

    @property
    @pulumi.getter(name="sendPrivate")
    def send_private(self) -> Optional[bool]:
        return pulumi.get(self, "send_private")

    @send_private.setter
    def send_private(self, value: Optional[bool]):
        pulumi.set(self, "send_private", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[str]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationOverrideArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 throughput: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def throughput(self) -> Optional[str]:
        return pulumi.get(self, "throughput")

    @throughput.setter
    def throughput(self, value: Optional[str]):
        pulumi.set(self, "throughput", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDynamicWebContentArgs:
    def __init__(__self__, *,
                 image_compression: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 prefetch: Optional[bool] = None,
                 real_user_monitoring: Optional[bool] = None,
                 sure_route: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if image_compression is not None:
            pulumi.set(__self__, "image_compression", image_compression)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if prefetch is not None:
            pulumi.set(__self__, "prefetch", prefetch)
        if real_user_monitoring is not None:
            pulumi.set(__self__, "real_user_monitoring", real_user_monitoring)
        if sure_route is not None:
            pulumi.set(__self__, "sure_route", sure_route)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="imageCompression")
    def image_compression(self) -> Optional[bool]:
        return pulumi.get(self, "image_compression")

    @image_compression.setter
    def image_compression(self, value: Optional[bool]):
        pulumi.set(self, "image_compression", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def prefetch(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch")

    @prefetch.setter
    def prefetch(self, value: Optional[bool]):
        pulumi.set(self, "prefetch", value)

    @property
    @pulumi.getter(name="realUserMonitoring")
    def real_user_monitoring(self) -> Optional[bool]:
        return pulumi.get(self, "real_user_monitoring")

    @real_user_monitoring.setter
    def real_user_monitoring(self, value: Optional[bool]):
        pulumi.set(self, "real_user_monitoring", value)

    @property
    @pulumi.getter(name="sureRoute")
    def sure_route(self) -> Optional[bool]:
        return pulumi.get(self, "sure_route")

    @sure_route.setter
    def sure_route(self, value: Optional[bool]):
        pulumi.set(self, "sure_route", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEcmsBulkUploadArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatabaseArgs:
    def __init__(__self__, *,
                 database: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if database is not None:
            pulumi.set(__self__, "database", database)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if regex_pattern is not None:
            pulumi.set(__self__, "regex_pattern", regex_pattern)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @extract_location.setter
    def extract_location(self, value: Optional[str]):
        pulumi.set(self, "extract_location", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @query_parameter_name.setter
    def query_parameter_name(self, value: Optional[str]):
        pulumi.set(self, "query_parameter_name", value)

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @regex_pattern.setter
    def regex_pattern(self, value: Optional[str]):
        pulumi.set(self, "regex_pattern", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatasetArgs:
    def __init__(__self__, *,
                 dataset: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if dataset is not None:
            pulumi.set(__self__, "dataset", dataset)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if regex_pattern is not None:
            pulumi.set(__self__, "regex_pattern", regex_pattern)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[str]:
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[str]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @extract_location.setter
    def extract_location(self, value: Optional[str]):
        pulumi.set(self, "extract_location", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @query_parameter_name.setter
    def query_parameter_name(self, value: Optional[str]):
        pulumi.set(self, "query_parameter_name", value)

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @regex_pattern.setter
    def regex_pattern(self, value: Optional[str]):
        pulumi.set(self, "regex_pattern", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEcmsObjectKeyArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 regex: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[str]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeConnectArgs:
    def __init__(__self__, *,
                 aggregate_lines: Optional[str] = None,
                 aggregate_size: Optional[str] = None,
                 aggregate_time: Optional[str] = None,
                 api_connector: Optional[str] = None,
                 api_data_elements: Optional[Sequence[str]] = None,
                 destination_hostname: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 override_aggregate_settings: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if aggregate_lines is not None:
            pulumi.set(__self__, "aggregate_lines", aggregate_lines)
        if aggregate_size is not None:
            pulumi.set(__self__, "aggregate_size", aggregate_size)
        if aggregate_time is not None:
            pulumi.set(__self__, "aggregate_time", aggregate_time)
        if api_connector is not None:
            pulumi.set(__self__, "api_connector", api_connector)
        if api_data_elements is not None:
            pulumi.set(__self__, "api_data_elements", api_data_elements)
        if destination_hostname is not None:
            pulumi.set(__self__, "destination_hostname", destination_hostname)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if override_aggregate_settings is not None:
            pulumi.set(__self__, "override_aggregate_settings", override_aggregate_settings)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="aggregateLines")
    def aggregate_lines(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_lines")

    @aggregate_lines.setter
    def aggregate_lines(self, value: Optional[str]):
        pulumi.set(self, "aggregate_lines", value)

    @property
    @pulumi.getter(name="aggregateSize")
    def aggregate_size(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_size")

    @aggregate_size.setter
    def aggregate_size(self, value: Optional[str]):
        pulumi.set(self, "aggregate_size", value)

    @property
    @pulumi.getter(name="aggregateTime")
    def aggregate_time(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_time")

    @aggregate_time.setter
    def aggregate_time(self, value: Optional[str]):
        pulumi.set(self, "aggregate_time", value)

    @property
    @pulumi.getter(name="apiConnector")
    def api_connector(self) -> Optional[str]:
        return pulumi.get(self, "api_connector")

    @api_connector.setter
    def api_connector(self, value: Optional[str]):
        pulumi.set(self, "api_connector", value)

    @property
    @pulumi.getter(name="apiDataElements")
    def api_data_elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "api_data_elements")

    @api_data_elements.setter
    def api_data_elements(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "api_data_elements", value)

    @property
    @pulumi.getter(name="destinationHostname")
    def destination_hostname(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname")

    @destination_hostname.setter
    def destination_hostname(self, value: Optional[str]):
        pulumi.set(self, "destination_hostname", value)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @destination_path.setter
    def destination_path(self, value: Optional[str]):
        pulumi.set(self, "destination_path", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="overrideAggregateSettings")
    def override_aggregate_settings(self) -> Optional[bool]:
        return pulumi.get(self, "override_aggregate_settings")

    @override_aggregate_settings.setter
    def override_aggregate_settings(self, value: Optional[bool]):
        pulumi.set(self, "override_aggregate_settings", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingAdvancedArgs:
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if xml is not None:
            pulumi.set(__self__, "xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")

    @xml.setter
    def xml(self, value: Optional[str]):
        pulumi.set(self, "xml", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterArgs:
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 description: Optional[str] = None,
                 enable_failover: Optional[bool] = None,
                 failover_rules: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs']] = None,
                 failover_title: Optional[str] = None,
                 hostname: Optional[str] = None,
                 ip: Optional[str] = None,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_failover is not None:
            pulumi.set(__self__, "enable_failover", enable_failover)
        if failover_rules is not None:
            pulumi.set(__self__, "failover_rules", failover_rules)
        if failover_title is not None:
            pulumi.set(__self__, "failover_title", failover_title)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[str]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableFailover")
    def enable_failover(self) -> Optional[bool]:
        return pulumi.get(self, "enable_failover")

    @enable_failover.setter
    def enable_failover(self, value: Optional[bool]):
        pulumi.set(self, "enable_failover", value)

    @property
    @pulumi.getter(name="failoverRules")
    def failover_rules(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs']]:
        return pulumi.get(self, "failover_rules")

    @failover_rules.setter
    def failover_rules(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs']]):
        pulumi.set(self, "failover_rules", value)

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @failover_title.setter
    def failover_title(self, value: Optional[str]):
        pulumi.set(self, "failover_title", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: Optional[str]):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs:
    def __init__(__self__, *,
                 absolute_path: Optional[bool] = None,
                 context_root: Optional[str] = None,
                 failover_hostname: Optional[str] = None,
                 modify_request: Optional[bool] = None,
                 override_hostname: Optional[bool] = None):
        if absolute_path is not None:
            pulumi.set(__self__, "absolute_path", absolute_path)
        if context_root is not None:
            pulumi.set(__self__, "context_root", context_root)
        if failover_hostname is not None:
            pulumi.set(__self__, "failover_hostname", failover_hostname)
        if modify_request is not None:
            pulumi.set(__self__, "modify_request", modify_request)
        if override_hostname is not None:
            pulumi.set(__self__, "override_hostname", override_hostname)

    @property
    @pulumi.getter(name="absolutePath")
    def absolute_path(self) -> Optional[bool]:
        return pulumi.get(self, "absolute_path")

    @absolute_path.setter
    def absolute_path(self, value: Optional[bool]):
        pulumi.set(self, "absolute_path", value)

    @property
    @pulumi.getter(name="contextRoot")
    def context_root(self) -> Optional[str]:
        return pulumi.get(self, "context_root")

    @context_root.setter
    def context_root(self, value: Optional[str]):
        pulumi.set(self, "context_root", value)

    @property
    @pulumi.getter(name="failoverHostname")
    def failover_hostname(self) -> Optional[str]:
        return pulumi.get(self, "failover_hostname")

    @failover_hostname.setter
    def failover_hostname(self, value: Optional[str]):
        pulumi.set(self, "failover_hostname", value)

    @property
    @pulumi.getter(name="modifyRequest")
    def modify_request(self) -> Optional[bool]:
        return pulumi.get(self, "modify_request")

    @modify_request.setter
    def modify_request(self, value: Optional[bool]):
        pulumi.set(self, "modify_request", value)

    @property
    @pulumi.getter(name="overrideHostname")
    def override_hostname(self) -> Optional[bool]:
        return pulumi.get(self, "override_hostname")

    @override_hostname.setter
    def override_hostname(self, value: Optional[bool]):
        pulumi.set(self, "override_hostname", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingOriginArgs:
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 description: Optional[str] = None,
                 enable_session_persistence: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_persistence_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_session_persistence is not None:
            pulumi.set(__self__, "enable_session_persistence", enable_session_persistence)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if session_persistence_title is not None:
            pulumi.set(__self__, "session_persistence_title", session_persistence_title)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[str]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableSessionPersistence")
    def enable_session_persistence(self) -> Optional[bool]:
        return pulumi.get(self, "enable_session_persistence")

    @enable_session_persistence.setter
    def enable_session_persistence(self, value: Optional[bool]):
        pulumi.set(self, "enable_session_persistence", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="sessionPersistenceTitle")
    def session_persistence_title(self) -> Optional[str]:
        return pulumi.get(self, "session_persistence_title")

    @session_persistence_title.setter
    def session_persistence_title(self, value: Optional[str]):
        pulumi.set(self, "session_persistence_title", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeOriginAuthorizationArgs:
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 domain: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[str]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorArgs:
    def __init__(__self__, *,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorCloudletPolicyArgs'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @cloudlet_shared_policy.setter
    def cloudlet_shared_policy(self, value: Optional[int]):
        pulumi.set(self, "cloudlet_shared_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @is_shared_policy.setter
    def is_shared_policy(self, value: Optional[bool]):
        pulumi.set(self, "is_shared_policy", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeScapeArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeSideIncludesArgs:
    def __init__(__self__, *,
                 detect_injection: Optional[bool] = None,
                 enable_via_http: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 i18n_charsets: Optional[Sequence[str]] = None,
                 i18n_status: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 pass_client_ip: Optional[bool] = None,
                 pass_set_cookie: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if detect_injection is not None:
            pulumi.set(__self__, "detect_injection", detect_injection)
        if enable_via_http is not None:
            pulumi.set(__self__, "enable_via_http", enable_via_http)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if i18n_charsets is not None:
            pulumi.set(__self__, "i18n_charsets", i18n_charsets)
        if i18n_status is not None:
            pulumi.set(__self__, "i18n_status", i18n_status)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if pass_client_ip is not None:
            pulumi.set(__self__, "pass_client_ip", pass_client_ip)
        if pass_set_cookie is not None:
            pulumi.set(__self__, "pass_set_cookie", pass_set_cookie)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="detectInjection")
    def detect_injection(self) -> Optional[bool]:
        return pulumi.get(self, "detect_injection")

    @detect_injection.setter
    def detect_injection(self, value: Optional[bool]):
        pulumi.set(self, "detect_injection", value)

    @property
    @pulumi.getter(name="enableViaHttp")
    def enable_via_http(self) -> Optional[bool]:
        return pulumi.get(self, "enable_via_http")

    @enable_via_http.setter
    def enable_via_http(self, value: Optional[bool]):
        pulumi.set(self, "enable_via_http", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="i18nCharsets")
    def i18n_charsets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "i18n_charsets")

    @i18n_charsets.setter
    def i18n_charsets(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "i18n_charsets", value)

    @property
    @pulumi.getter(name="i18nStatus")
    def i18n_status(self) -> Optional[bool]:
        return pulumi.get(self, "i18n_status")

    @i18n_status.setter
    def i18n_status(self, value: Optional[bool]):
        pulumi.set(self, "i18n_status", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="passClientIp")
    def pass_client_ip(self) -> Optional[bool]:
        return pulumi.get(self, "pass_client_ip")

    @pass_client_ip.setter
    def pass_client_ip(self, value: Optional[bool]):
        pulumi.set(self, "pass_client_ip", value)

    @property
    @pulumi.getter(name="passSetCookie")
    def pass_set_cookie(self) -> Optional[bool]:
        return pulumi.get(self, "pass_set_cookie")

    @pass_set_cookie.setter
    def pass_set_cookie(self, value: Optional[bool]):
        pulumi.set(self, "pass_set_cookie", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeWorkerArgs:
    def __init__(__self__, *,
                 create_edge_worker: Optional[str] = None,
                 edge_worker_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 resource_tier: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if create_edge_worker is not None:
            pulumi.set(__self__, "create_edge_worker", create_edge_worker)
        if edge_worker_id is not None:
            pulumi.set(__self__, "edge_worker_id", edge_worker_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if resource_tier is not None:
            pulumi.set(__self__, "resource_tier", resource_tier)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="createEdgeWorker")
    def create_edge_worker(self) -> Optional[str]:
        return pulumi.get(self, "create_edge_worker")

    @create_edge_worker.setter
    def create_edge_worker(self, value: Optional[str]):
        pulumi.set(self, "create_edge_worker", value)

    @property
    @pulumi.getter(name="edgeWorkerId")
    def edge_worker_id(self) -> Optional[str]:
        return pulumi.get(self, "edge_worker_id")

    @edge_worker_id.setter
    def edge_worker_id(self, value: Optional[str]):
        pulumi.set(self, "edge_worker_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="resourceTier")
    def resource_tier(self) -> Optional[str]:
        return pulumi.get(self, "resource_tier")

    @resource_tier.setter
    def resource_tier(self, value: Optional[str]):
        pulumi.set(self, "resource_tier", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedAkamaiProtocolArgs:
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[str]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedProxyDetectionArgs:
    def __init__(__self__, *,
                 anonymous_vpn: Optional[str] = None,
                 best_practice_action: Optional[str] = None,
                 best_practice_redirecturl: Optional[str] = None,
                 detect_anonymous_vpn: Optional[bool] = None,
                 detect_anonymous_vpn_action: Optional[str] = None,
                 detect_anonymous_vpn_redirecturl: Optional[str] = None,
                 detect_hosting_provider: Optional[bool] = None,
                 detect_hosting_provider_action: Optional[str] = None,
                 detect_hosting_provider_redirecturl: Optional[str] = None,
                 detect_public_proxy: Optional[bool] = None,
                 detect_public_proxy_action: Optional[str] = None,
                 detect_public_proxy_redirecturl: Optional[str] = None,
                 detect_residential_proxy: Optional[bool] = None,
                 detect_residential_proxy_action: Optional[str] = None,
                 detect_residential_proxy_redirecturl: Optional[str] = None,
                 detect_smart_dns_proxy: Optional[bool] = None,
                 detect_smart_dns_proxy_action: Optional[str] = None,
                 detect_smart_dns_proxy_redirecturl: Optional[str] = None,
                 detect_tor_exit_node: Optional[bool] = None,
                 detect_tor_exit_node_action: Optional[str] = None,
                 detect_tor_exit_node_redirecturl: Optional[str] = None,
                 detect_vpn_data_center: Optional[bool] = None,
                 detect_vpn_data_center_action: Optional[str] = None,
                 detect_vpn_data_center_redirecturl: Optional[str] = None,
                 enable_configuration_mode: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 forward_header_enrichment: Optional[bool] = None,
                 hosting_provider: Optional[str] = None,
                 locked: Optional[bool] = None,
                 public_proxy: Optional[str] = None,
                 residential_proxy: Optional[str] = None,
                 smart_dns_proxy: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tor_exit_node: Optional[str] = None,
                 uuid: Optional[str] = None,
                 vpn_data_center: Optional[str] = None):
        if anonymous_vpn is not None:
            pulumi.set(__self__, "anonymous_vpn", anonymous_vpn)
        if best_practice_action is not None:
            pulumi.set(__self__, "best_practice_action", best_practice_action)
        if best_practice_redirecturl is not None:
            pulumi.set(__self__, "best_practice_redirecturl", best_practice_redirecturl)
        if detect_anonymous_vpn is not None:
            pulumi.set(__self__, "detect_anonymous_vpn", detect_anonymous_vpn)
        if detect_anonymous_vpn_action is not None:
            pulumi.set(__self__, "detect_anonymous_vpn_action", detect_anonymous_vpn_action)
        if detect_anonymous_vpn_redirecturl is not None:
            pulumi.set(__self__, "detect_anonymous_vpn_redirecturl", detect_anonymous_vpn_redirecturl)
        if detect_hosting_provider is not None:
            pulumi.set(__self__, "detect_hosting_provider", detect_hosting_provider)
        if detect_hosting_provider_action is not None:
            pulumi.set(__self__, "detect_hosting_provider_action", detect_hosting_provider_action)
        if detect_hosting_provider_redirecturl is not None:
            pulumi.set(__self__, "detect_hosting_provider_redirecturl", detect_hosting_provider_redirecturl)
        if detect_public_proxy is not None:
            pulumi.set(__self__, "detect_public_proxy", detect_public_proxy)
        if detect_public_proxy_action is not None:
            pulumi.set(__self__, "detect_public_proxy_action", detect_public_proxy_action)
        if detect_public_proxy_redirecturl is not None:
            pulumi.set(__self__, "detect_public_proxy_redirecturl", detect_public_proxy_redirecturl)
        if detect_residential_proxy is not None:
            pulumi.set(__self__, "detect_residential_proxy", detect_residential_proxy)
        if detect_residential_proxy_action is not None:
            pulumi.set(__self__, "detect_residential_proxy_action", detect_residential_proxy_action)
        if detect_residential_proxy_redirecturl is not None:
            pulumi.set(__self__, "detect_residential_proxy_redirecturl", detect_residential_proxy_redirecturl)
        if detect_smart_dns_proxy is not None:
            pulumi.set(__self__, "detect_smart_dns_proxy", detect_smart_dns_proxy)
        if detect_smart_dns_proxy_action is not None:
            pulumi.set(__self__, "detect_smart_dns_proxy_action", detect_smart_dns_proxy_action)
        if detect_smart_dns_proxy_redirecturl is not None:
            pulumi.set(__self__, "detect_smart_dns_proxy_redirecturl", detect_smart_dns_proxy_redirecturl)
        if detect_tor_exit_node is not None:
            pulumi.set(__self__, "detect_tor_exit_node", detect_tor_exit_node)
        if detect_tor_exit_node_action is not None:
            pulumi.set(__self__, "detect_tor_exit_node_action", detect_tor_exit_node_action)
        if detect_tor_exit_node_redirecturl is not None:
            pulumi.set(__self__, "detect_tor_exit_node_redirecturl", detect_tor_exit_node_redirecturl)
        if detect_vpn_data_center is not None:
            pulumi.set(__self__, "detect_vpn_data_center", detect_vpn_data_center)
        if detect_vpn_data_center_action is not None:
            pulumi.set(__self__, "detect_vpn_data_center_action", detect_vpn_data_center_action)
        if detect_vpn_data_center_redirecturl is not None:
            pulumi.set(__self__, "detect_vpn_data_center_redirecturl", detect_vpn_data_center_redirecturl)
        if enable_configuration_mode is not None:
            pulumi.set(__self__, "enable_configuration_mode", enable_configuration_mode)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if forward_header_enrichment is not None:
            pulumi.set(__self__, "forward_header_enrichment", forward_header_enrichment)
        if hosting_provider is not None:
            pulumi.set(__self__, "hosting_provider", hosting_provider)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if public_proxy is not None:
            pulumi.set(__self__, "public_proxy", public_proxy)
        if residential_proxy is not None:
            pulumi.set(__self__, "residential_proxy", residential_proxy)
        if smart_dns_proxy is not None:
            pulumi.set(__self__, "smart_dns_proxy", smart_dns_proxy)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tor_exit_node is not None:
            pulumi.set(__self__, "tor_exit_node", tor_exit_node)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vpn_data_center is not None:
            pulumi.set(__self__, "vpn_data_center", vpn_data_center)

    @property
    @pulumi.getter(name="anonymousVpn")
    def anonymous_vpn(self) -> Optional[str]:
        return pulumi.get(self, "anonymous_vpn")

    @anonymous_vpn.setter
    def anonymous_vpn(self, value: Optional[str]):
        pulumi.set(self, "anonymous_vpn", value)

    @property
    @pulumi.getter(name="bestPracticeAction")
    def best_practice_action(self) -> Optional[str]:
        return pulumi.get(self, "best_practice_action")

    @best_practice_action.setter
    def best_practice_action(self, value: Optional[str]):
        pulumi.set(self, "best_practice_action", value)

    @property
    @pulumi.getter(name="bestPracticeRedirecturl")
    def best_practice_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "best_practice_redirecturl")

    @best_practice_redirecturl.setter
    def best_practice_redirecturl(self, value: Optional[str]):
        pulumi.set(self, "best_practice_redirecturl", value)

    @property
    @pulumi.getter(name="detectAnonymousVpn")
    def detect_anonymous_vpn(self) -> Optional[bool]:
        return pulumi.get(self, "detect_anonymous_vpn")

    @detect_anonymous_vpn.setter
    def detect_anonymous_vpn(self, value: Optional[bool]):
        pulumi.set(self, "detect_anonymous_vpn", value)

    @property
    @pulumi.getter(name="detectAnonymousVpnAction")
    def detect_anonymous_vpn_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_anonymous_vpn_action")

    @detect_anonymous_vpn_action.setter
    def detect_anonymous_vpn_action(self, value: Optional[str]):
        pulumi.set(self, "detect_anonymous_vpn_action", value)

    @property
    @pulumi.getter(name="detectAnonymousVpnRedirecturl")
    def detect_anonymous_vpn_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_anonymous_vpn_redirecturl")

    @detect_anonymous_vpn_redirecturl.setter
    def detect_anonymous_vpn_redirecturl(self, value: Optional[str]):
        pulumi.set(self, "detect_anonymous_vpn_redirecturl", value)

    @property
    @pulumi.getter(name="detectHostingProvider")
    def detect_hosting_provider(self) -> Optional[bool]:
        return pulumi.get(self, "detect_hosting_provider")

    @detect_hosting_provider.setter
    def detect_hosting_provider(self, value: Optional[bool]):
        pulumi.set(self, "detect_hosting_provider", value)

    @property
    @pulumi.getter(name="detectHostingProviderAction")
    def detect_hosting_provider_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_hosting_provider_action")

    @detect_hosting_provider_action.setter
    def detect_hosting_provider_action(self, value: Optional[str]):
        pulumi.set(self, "detect_hosting_provider_action", value)

    @property
    @pulumi.getter(name="detectHostingProviderRedirecturl")
    def detect_hosting_provider_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_hosting_provider_redirecturl")

    @detect_hosting_provider_redirecturl.setter
    def detect_hosting_provider_redirecturl(self, value: Optional[str]):
        pulumi.set(self, "detect_hosting_provider_redirecturl", value)

    @property
    @pulumi.getter(name="detectPublicProxy")
    def detect_public_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_public_proxy")

    @detect_public_proxy.setter
    def detect_public_proxy(self, value: Optional[bool]):
        pulumi.set(self, "detect_public_proxy", value)

    @property
    @pulumi.getter(name="detectPublicProxyAction")
    def detect_public_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_public_proxy_action")

    @detect_public_proxy_action.setter
    def detect_public_proxy_action(self, value: Optional[str]):
        pulumi.set(self, "detect_public_proxy_action", value)

    @property
    @pulumi.getter(name="detectPublicProxyRedirecturl")
    def detect_public_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_public_proxy_redirecturl")

    @detect_public_proxy_redirecturl.setter
    def detect_public_proxy_redirecturl(self, value: Optional[str]):
        pulumi.set(self, "detect_public_proxy_redirecturl", value)

    @property
    @pulumi.getter(name="detectResidentialProxy")
    def detect_residential_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_residential_proxy")

    @detect_residential_proxy.setter
    def detect_residential_proxy(self, value: Optional[bool]):
        pulumi.set(self, "detect_residential_proxy", value)

    @property
    @pulumi.getter(name="detectResidentialProxyAction")
    def detect_residential_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_residential_proxy_action")

    @detect_residential_proxy_action.setter
    def detect_residential_proxy_action(self, value: Optional[str]):
        pulumi.set(self, "detect_residential_proxy_action", value)

    @property
    @pulumi.getter(name="detectResidentialProxyRedirecturl")
    def detect_residential_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_residential_proxy_redirecturl")

    @detect_residential_proxy_redirecturl.setter
    def detect_residential_proxy_redirecturl(self, value: Optional[str]):
        pulumi.set(self, "detect_residential_proxy_redirecturl", value)

    @property
    @pulumi.getter(name="detectSmartDnsProxy")
    def detect_smart_dns_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_smart_dns_proxy")

    @detect_smart_dns_proxy.setter
    def detect_smart_dns_proxy(self, value: Optional[bool]):
        pulumi.set(self, "detect_smart_dns_proxy", value)

    @property
    @pulumi.getter(name="detectSmartDnsProxyAction")
    def detect_smart_dns_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_smart_dns_proxy_action")

    @detect_smart_dns_proxy_action.setter
    def detect_smart_dns_proxy_action(self, value: Optional[str]):
        pulumi.set(self, "detect_smart_dns_proxy_action", value)

    @property
    @pulumi.getter(name="detectSmartDnsProxyRedirecturl")
    def detect_smart_dns_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_smart_dns_proxy_redirecturl")

    @detect_smart_dns_proxy_redirecturl.setter
    def detect_smart_dns_proxy_redirecturl(self, value: Optional[str]):
        pulumi.set(self, "detect_smart_dns_proxy_redirecturl", value)

    @property
    @pulumi.getter(name="detectTorExitNode")
    def detect_tor_exit_node(self) -> Optional[bool]:
        return pulumi.get(self, "detect_tor_exit_node")

    @detect_tor_exit_node.setter
    def detect_tor_exit_node(self, value: Optional[bool]):
        pulumi.set(self, "detect_tor_exit_node", value)

    @property
    @pulumi.getter(name="detectTorExitNodeAction")
    def detect_tor_exit_node_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_tor_exit_node_action")

    @detect_tor_exit_node_action.setter
    def detect_tor_exit_node_action(self, value: Optional[str]):
        pulumi.set(self, "detect_tor_exit_node_action", value)

    @property
    @pulumi.getter(name="detectTorExitNodeRedirecturl")
    def detect_tor_exit_node_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_tor_exit_node_redirecturl")

    @detect_tor_exit_node_redirecturl.setter
    def detect_tor_exit_node_redirecturl(self, value: Optional[str]):
        pulumi.set(self, "detect_tor_exit_node_redirecturl", value)

    @property
    @pulumi.getter(name="detectVpnDataCenter")
    def detect_vpn_data_center(self) -> Optional[bool]:
        return pulumi.get(self, "detect_vpn_data_center")

    @detect_vpn_data_center.setter
    def detect_vpn_data_center(self, value: Optional[bool]):
        pulumi.set(self, "detect_vpn_data_center", value)

    @property
    @pulumi.getter(name="detectVpnDataCenterAction")
    def detect_vpn_data_center_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_vpn_data_center_action")

    @detect_vpn_data_center_action.setter
    def detect_vpn_data_center_action(self, value: Optional[str]):
        pulumi.set(self, "detect_vpn_data_center_action", value)

    @property
    @pulumi.getter(name="detectVpnDataCenterRedirecturl")
    def detect_vpn_data_center_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_vpn_data_center_redirecturl")

    @detect_vpn_data_center_redirecturl.setter
    def detect_vpn_data_center_redirecturl(self, value: Optional[str]):
        pulumi.set(self, "detect_vpn_data_center_redirecturl", value)

    @property
    @pulumi.getter(name="enableConfigurationMode")
    def enable_configuration_mode(self) -> Optional[str]:
        return pulumi.get(self, "enable_configuration_mode")

    @enable_configuration_mode.setter
    def enable_configuration_mode(self, value: Optional[str]):
        pulumi.set(self, "enable_configuration_mode", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="forwardHeaderEnrichment")
    def forward_header_enrichment(self) -> Optional[bool]:
        return pulumi.get(self, "forward_header_enrichment")

    @forward_header_enrichment.setter
    def forward_header_enrichment(self, value: Optional[bool]):
        pulumi.set(self, "forward_header_enrichment", value)

    @property
    @pulumi.getter(name="hostingProvider")
    def hosting_provider(self) -> Optional[str]:
        return pulumi.get(self, "hosting_provider")

    @hosting_provider.setter
    def hosting_provider(self, value: Optional[str]):
        pulumi.set(self, "hosting_provider", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="publicProxy")
    def public_proxy(self) -> Optional[str]:
        return pulumi.get(self, "public_proxy")

    @public_proxy.setter
    def public_proxy(self, value: Optional[str]):
        pulumi.set(self, "public_proxy", value)

    @property
    @pulumi.getter(name="residentialProxy")
    def residential_proxy(self) -> Optional[str]:
        return pulumi.get(self, "residential_proxy")

    @residential_proxy.setter
    def residential_proxy(self, value: Optional[str]):
        pulumi.set(self, "residential_proxy", value)

    @property
    @pulumi.getter(name="smartDnsProxy")
    def smart_dns_proxy(self) -> Optional[str]:
        return pulumi.get(self, "smart_dns_proxy")

    @smart_dns_proxy.setter
    def smart_dns_proxy(self, value: Optional[str]):
        pulumi.set(self, "smart_dns_proxy", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="torExitNode")
    def tor_exit_node(self) -> Optional[str]:
        return pulumi.get(self, "tor_exit_node")

    @tor_exit_node.setter
    def tor_exit_node(self, value: Optional[str]):
        pulumi.set(self, "tor_exit_node", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="vpnDataCenter")
    def vpn_data_center(self) -> Optional[str]:
        return pulumi.get(self, "vpn_data_center")

    @vpn_data_center.setter
    def vpn_data_center(self, value: Optional[str]):
        pulumi.set(self, "vpn_data_center", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEpdForwardHeaderEnrichmentArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFailActionArgs:
    def __init__(__self__, *,
                 action_type: Optional[str] = None,
                 allow_fcm_parent_override: Optional[bool] = None,
                 cex_custom_path: Optional[bool] = None,
                 cex_hostname: Optional[str] = None,
                 cex_path: Optional[str] = None,
                 content_custom_path: Optional[bool] = None,
                 content_hostname: Optional[str] = None,
                 content_path: Optional[str] = None,
                 cp_code: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeArgs'] = None,
                 dynamic_custom_path: Optional[bool] = None,
                 dynamic_method: Optional[str] = None,
                 dynamic_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modify_protocol: Optional[bool] = None,
                 net_storage_hostname: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFailActionNetStorageHostnameArgs'] = None,
                 net_storage_path: Optional[str] = None,
                 preserve_query_string: Optional[bool] = None,
                 protocol: Optional[str] = None,
                 redirect_custom_path: Optional[bool] = None,
                 redirect_hostname: Optional[str] = None,
                 redirect_hostname_type: Optional[str] = None,
                 redirect_method: Optional[int] = None,
                 redirect_path: Optional[str] = None,
                 saas_cname_enabled: Optional[bool] = None,
                 saas_cname_level: Optional[int] = None,
                 saas_cookie: Optional[str] = None,
                 saas_query_string: Optional[str] = None,
                 saas_regex: Optional[str] = None,
                 saas_replace: Optional[str] = None,
                 saas_suffix: Optional[str] = None,
                 saas_type: Optional[str] = None,
                 status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if allow_fcm_parent_override is not None:
            pulumi.set(__self__, "allow_fcm_parent_override", allow_fcm_parent_override)
        if cex_custom_path is not None:
            pulumi.set(__self__, "cex_custom_path", cex_custom_path)
        if cex_hostname is not None:
            pulumi.set(__self__, "cex_hostname", cex_hostname)
        if cex_path is not None:
            pulumi.set(__self__, "cex_path", cex_path)
        if content_custom_path is not None:
            pulumi.set(__self__, "content_custom_path", content_custom_path)
        if content_hostname is not None:
            pulumi.set(__self__, "content_hostname", content_hostname)
        if content_path is not None:
            pulumi.set(__self__, "content_path", content_path)
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if dynamic_custom_path is not None:
            pulumi.set(__self__, "dynamic_custom_path", dynamic_custom_path)
        if dynamic_method is not None:
            pulumi.set(__self__, "dynamic_method", dynamic_method)
        if dynamic_path is not None:
            pulumi.set(__self__, "dynamic_path", dynamic_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if modify_protocol is not None:
            pulumi.set(__self__, "modify_protocol", modify_protocol)
        if net_storage_hostname is not None:
            pulumi.set(__self__, "net_storage_hostname", net_storage_hostname)
        if net_storage_path is not None:
            pulumi.set(__self__, "net_storage_path", net_storage_path)
        if preserve_query_string is not None:
            pulumi.set(__self__, "preserve_query_string", preserve_query_string)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if redirect_custom_path is not None:
            pulumi.set(__self__, "redirect_custom_path", redirect_custom_path)
        if redirect_hostname is not None:
            pulumi.set(__self__, "redirect_hostname", redirect_hostname)
        if redirect_hostname_type is not None:
            pulumi.set(__self__, "redirect_hostname_type", redirect_hostname_type)
        if redirect_method is not None:
            pulumi.set(__self__, "redirect_method", redirect_method)
        if redirect_path is not None:
            pulumi.set(__self__, "redirect_path", redirect_path)
        if saas_cname_enabled is not None:
            pulumi.set(__self__, "saas_cname_enabled", saas_cname_enabled)
        if saas_cname_level is not None:
            pulumi.set(__self__, "saas_cname_level", saas_cname_level)
        if saas_cookie is not None:
            pulumi.set(__self__, "saas_cookie", saas_cookie)
        if saas_query_string is not None:
            pulumi.set(__self__, "saas_query_string", saas_query_string)
        if saas_regex is not None:
            pulumi.set(__self__, "saas_regex", saas_regex)
        if saas_replace is not None:
            pulumi.set(__self__, "saas_replace", saas_replace)
        if saas_suffix is not None:
            pulumi.set(__self__, "saas_suffix", saas_suffix)
        if saas_type is not None:
            pulumi.set(__self__, "saas_type", saas_type)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: Optional[str]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter(name="allowFcmParentOverride")
    def allow_fcm_parent_override(self) -> Optional[bool]:
        return pulumi.get(self, "allow_fcm_parent_override")

    @allow_fcm_parent_override.setter
    def allow_fcm_parent_override(self, value: Optional[bool]):
        pulumi.set(self, "allow_fcm_parent_override", value)

    @property
    @pulumi.getter(name="cexCustomPath")
    def cex_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "cex_custom_path")

    @cex_custom_path.setter
    def cex_custom_path(self, value: Optional[bool]):
        pulumi.set(self, "cex_custom_path", value)

    @property
    @pulumi.getter(name="cexHostname")
    def cex_hostname(self) -> Optional[str]:
        return pulumi.get(self, "cex_hostname")

    @cex_hostname.setter
    def cex_hostname(self, value: Optional[str]):
        pulumi.set(self, "cex_hostname", value)

    @property
    @pulumi.getter(name="cexPath")
    def cex_path(self) -> Optional[str]:
        return pulumi.get(self, "cex_path")

    @cex_path.setter
    def cex_path(self, value: Optional[str]):
        pulumi.set(self, "cex_path", value)

    @property
    @pulumi.getter(name="contentCustomPath")
    def content_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "content_custom_path")

    @content_custom_path.setter
    def content_custom_path(self, value: Optional[bool]):
        pulumi.set(self, "content_custom_path", value)

    @property
    @pulumi.getter(name="contentHostname")
    def content_hostname(self) -> Optional[str]:
        return pulumi.get(self, "content_hostname")

    @content_hostname.setter
    def content_hostname(self, value: Optional[str]):
        pulumi.set(self, "content_hostname", value)

    @property
    @pulumi.getter(name="contentPath")
    def content_path(self) -> Optional[str]:
        return pulumi.get(self, "content_path")

    @content_path.setter
    def content_path(self, value: Optional[str]):
        pulumi.set(self, "content_path", value)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeArgs']:
        return pulumi.get(self, "cp_code")

    @cp_code.setter
    def cp_code(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeArgs']):
        pulumi.set(self, "cp_code", value)

    @property
    @pulumi.getter(name="dynamicCustomPath")
    def dynamic_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_custom_path")

    @dynamic_custom_path.setter
    def dynamic_custom_path(self, value: Optional[bool]):
        pulumi.set(self, "dynamic_custom_path", value)

    @property
    @pulumi.getter(name="dynamicMethod")
    def dynamic_method(self) -> Optional[str]:
        return pulumi.get(self, "dynamic_method")

    @dynamic_method.setter
    def dynamic_method(self, value: Optional[str]):
        pulumi.set(self, "dynamic_method", value)

    @property
    @pulumi.getter(name="dynamicPath")
    def dynamic_path(self) -> Optional[str]:
        return pulumi.get(self, "dynamic_path")

    @dynamic_path.setter
    def dynamic_path(self, value: Optional[str]):
        pulumi.set(self, "dynamic_path", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="modifyProtocol")
    def modify_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "modify_protocol")

    @modify_protocol.setter
    def modify_protocol(self, value: Optional[bool]):
        pulumi.set(self, "modify_protocol", value)

    @property
    @pulumi.getter(name="netStorageHostname")
    def net_storage_hostname(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFailActionNetStorageHostnameArgs']:
        return pulumi.get(self, "net_storage_hostname")

    @net_storage_hostname.setter
    def net_storage_hostname(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFailActionNetStorageHostnameArgs']):
        pulumi.set(self, "net_storage_hostname", value)

    @property
    @pulumi.getter(name="netStoragePath")
    def net_storage_path(self) -> Optional[str]:
        return pulumi.get(self, "net_storage_path")

    @net_storage_path.setter
    def net_storage_path(self, value: Optional[str]):
        pulumi.set(self, "net_storage_path", value)

    @property
    @pulumi.getter(name="preserveQueryString")
    def preserve_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_query_string")

    @preserve_query_string.setter
    def preserve_query_string(self, value: Optional[bool]):
        pulumi.set(self, "preserve_query_string", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="redirectCustomPath")
    def redirect_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "redirect_custom_path")

    @redirect_custom_path.setter
    def redirect_custom_path(self, value: Optional[bool]):
        pulumi.set(self, "redirect_custom_path", value)

    @property
    @pulumi.getter(name="redirectHostname")
    def redirect_hostname(self) -> Optional[str]:
        return pulumi.get(self, "redirect_hostname")

    @redirect_hostname.setter
    def redirect_hostname(self, value: Optional[str]):
        pulumi.set(self, "redirect_hostname", value)

    @property
    @pulumi.getter(name="redirectHostnameType")
    def redirect_hostname_type(self) -> Optional[str]:
        return pulumi.get(self, "redirect_hostname_type")

    @redirect_hostname_type.setter
    def redirect_hostname_type(self, value: Optional[str]):
        pulumi.set(self, "redirect_hostname_type", value)

    @property
    @pulumi.getter(name="redirectMethod")
    def redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "redirect_method")

    @redirect_method.setter
    def redirect_method(self, value: Optional[int]):
        pulumi.set(self, "redirect_method", value)

    @property
    @pulumi.getter(name="redirectPath")
    def redirect_path(self) -> Optional[str]:
        return pulumi.get(self, "redirect_path")

    @redirect_path.setter
    def redirect_path(self, value: Optional[str]):
        pulumi.set(self, "redirect_path", value)

    @property
    @pulumi.getter(name="saasCnameEnabled")
    def saas_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "saas_cname_enabled")

    @saas_cname_enabled.setter
    def saas_cname_enabled(self, value: Optional[bool]):
        pulumi.set(self, "saas_cname_enabled", value)

    @property
    @pulumi.getter(name="saasCnameLevel")
    def saas_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "saas_cname_level")

    @saas_cname_level.setter
    def saas_cname_level(self, value: Optional[int]):
        pulumi.set(self, "saas_cname_level", value)

    @property
    @pulumi.getter(name="saasCookie")
    def saas_cookie(self) -> Optional[str]:
        return pulumi.get(self, "saas_cookie")

    @saas_cookie.setter
    def saas_cookie(self, value: Optional[str]):
        pulumi.set(self, "saas_cookie", value)

    @property
    @pulumi.getter(name="saasQueryString")
    def saas_query_string(self) -> Optional[str]:
        return pulumi.get(self, "saas_query_string")

    @saas_query_string.setter
    def saas_query_string(self, value: Optional[str]):
        pulumi.set(self, "saas_query_string", value)

    @property
    @pulumi.getter(name="saasRegex")
    def saas_regex(self) -> Optional[str]:
        return pulumi.get(self, "saas_regex")

    @saas_regex.setter
    def saas_regex(self, value: Optional[str]):
        pulumi.set(self, "saas_regex", value)

    @property
    @pulumi.getter(name="saasReplace")
    def saas_replace(self) -> Optional[str]:
        return pulumi.get(self, "saas_replace")

    @saas_replace.setter
    def saas_replace(self, value: Optional[str]):
        pulumi.set(self, "saas_replace", value)

    @property
    @pulumi.getter(name="saasSuffix")
    def saas_suffix(self) -> Optional[str]:
        return pulumi.get(self, "saas_suffix")

    @saas_suffix.setter
    def saas_suffix(self, value: Optional[str]):
        pulumi.set(self, "saas_suffix", value)

    @property
    @pulumi.getter(name="saasType")
    def saas_type(self) -> Optional[str]:
        return pulumi.get(self, "saas_type")

    @saas_type.setter
    def saas_type(self, value: Optional[str]):
        pulumi.set(self, "saas_type", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[int]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFailActionNetStorageHostnameArgs:
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @cp_code.setter
    def cp_code(self, value: Optional[int]):
        pulumi.set(self, "cp_code", value)

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @download_domain_name.setter
    def download_domain_name(self, value: Optional[str]):
        pulumi.set(self, "download_domain_name", value)

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")

    @g2o_token.setter
    def g2o_token(self, value: Optional[str]):
        pulumi.set(self, "g2o_token", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFailoverBotManagerFeatureCompatibilityArgs:
    def __init__(__self__, *,
                 compatibility: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if compatibility is not None:
            pulumi.set(__self__, "compatibility", compatibility)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def compatibility(self) -> Optional[bool]:
        return pulumi.get(self, "compatibility")

    @compatibility.setter
    def compatibility(self, value: Optional[bool]):
        pulumi.set(self, "compatibility", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFastInvalidateArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingArgs:
    def __init__(__self__, *,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingCloudletPolicyArgs'] = None,
                 enabled: Optional[bool] = None,
                 java_script_insertion_rule: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_math_prefix: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if java_script_insertion_rule is not None:
            pulumi.set(__self__, "java_script_insertion_rule", java_script_insertion_rule)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if media_math_prefix is not None:
            pulumi.set(__self__, "media_math_prefix", media_math_prefix)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="javaScriptInsertionRule")
    def java_script_insertion_rule(self) -> Optional[str]:
        return pulumi.get(self, "java_script_insertion_rule")

    @java_script_insertion_rule.setter
    def java_script_insertion_rule(self, value: Optional[str]):
        pulumi.set(self, "java_script_insertion_rule", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="mediaMathPrefix")
    def media_math_prefix(self) -> Optional[str]:
        return pulumi.get(self, "media_math_prefix")

    @media_math_prefix.setter
    def media_math_prefix(self, value: Optional[str]):
        pulumi.set(self, "media_math_prefix", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusArgs:
    def __init__(__self__, *,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusCloudletPolicyArgs'] = None,
                 enabled: Optional[bool] = None,
                 java_script_insertion_rule: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_math_prefix: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if java_script_insertion_rule is not None:
            pulumi.set(__self__, "java_script_insertion_rule", java_script_insertion_rule)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if media_math_prefix is not None:
            pulumi.set(__self__, "media_math_prefix", media_math_prefix)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="javaScriptInsertionRule")
    def java_script_insertion_rule(self) -> Optional[str]:
        return pulumi.get(self, "java_script_insertion_rule")

    @java_script_insertion_rule.setter
    def java_script_insertion_rule(self, value: Optional[str]):
        pulumi.set(self, "java_script_insertion_rule", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="mediaMathPrefix")
    def media_math_prefix(self) -> Optional[str]:
        return pulumi.get(self, "media_math_prefix")

    @media_math_prefix.setter
    def media_math_prefix(self, value: Optional[str]):
        pulumi.set(self, "media_math_prefix", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteArgs:
    def __init__(__self__, *,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteCloudletPolicyArgs'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @cloudlet_shared_policy.setter
    def cloudlet_shared_policy(self, value: Optional[int]):
        pulumi.set(self, "cloudlet_shared_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @is_shared_policy.setter
    def is_shared_policy(self, value: Optional[bool]):
        pulumi.set(self, "is_shared_policy", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFrontEndOptimizationArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorG2oheaderArgs:
    def __init__(__self__, *,
                 custom_sign_strings: Optional[Sequence[str]] = None,
                 data_header: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 encoding_version: Optional[int] = None,
                 locked: Optional[bool] = None,
                 nonce: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 signed_header: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_custom_sign_string: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if custom_sign_strings is not None:
            pulumi.set(__self__, "custom_sign_strings", custom_sign_strings)
        if data_header is not None:
            pulumi.set(__self__, "data_header", data_header)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if encoding_version is not None:
            pulumi.set(__self__, "encoding_version", encoding_version)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if nonce is not None:
            pulumi.set(__self__, "nonce", nonce)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if signed_header is not None:
            pulumi.set(__self__, "signed_header", signed_header)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_custom_sign_string is not None:
            pulumi.set(__self__, "use_custom_sign_string", use_custom_sign_string)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customSignStrings")
    def custom_sign_strings(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_sign_strings")

    @custom_sign_strings.setter
    def custom_sign_strings(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "custom_sign_strings", value)

    @property
    @pulumi.getter(name="dataHeader")
    def data_header(self) -> Optional[str]:
        return pulumi.get(self, "data_header")

    @data_header.setter
    def data_header(self, value: Optional[str]):
        pulumi.set(self, "data_header", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="encodingVersion")
    def encoding_version(self) -> Optional[int]:
        return pulumi.get(self, "encoding_version")

    @encoding_version.setter
    def encoding_version(self, value: Optional[int]):
        pulumi.set(self, "encoding_version", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @nonce.setter
    def nonce(self, value: Optional[str]):
        pulumi.set(self, "nonce", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="signedHeader")
    def signed_header(self) -> Optional[str]:
        return pulumi.get(self, "signed_header")

    @signed_header.setter
    def signed_header(self, value: Optional[str]):
        pulumi.set(self, "signed_header", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useCustomSignString")
    def use_custom_sign_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_custom_sign_string")

    @use_custom_sign_string.setter
    def use_custom_sign_string(self, value: Optional[bool]):
        pulumi.set(self, "use_custom_sign_string", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorGlobalRequestNumberArgs:
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 output_option: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if output_option is not None:
            pulumi.set(__self__, "output_option", output_option)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="outputOption")
    def output_option(self) -> Optional[str]:
        return pulumi.get(self, "output_option")

    @output_option.setter
    def output_option(self, value: Optional[str]):
        pulumi.set(self, "output_option", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[str]):
        pulumi.set(self, "variable_name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorGraphqlCachingArgs:
    def __init__(__self__, *,
                 advanced: Optional[str] = None,
                 cache_responses_with_errors: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 operations_json_body_parameter_name: Optional[str] = None,
                 operations_url_query_parameter_name: Optional[str] = None,
                 post_request_processing_error_handling: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if cache_responses_with_errors is not None:
            pulumi.set(__self__, "cache_responses_with_errors", cache_responses_with_errors)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if operations_json_body_parameter_name is not None:
            pulumi.set(__self__, "operations_json_body_parameter_name", operations_json_body_parameter_name)
        if operations_url_query_parameter_name is not None:
            pulumi.set(__self__, "operations_url_query_parameter_name", operations_url_query_parameter_name)
        if post_request_processing_error_handling is not None:
            pulumi.set(__self__, "post_request_processing_error_handling", post_request_processing_error_handling)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[str]:
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[str]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter(name="cacheResponsesWithErrors")
    def cache_responses_with_errors(self) -> Optional[bool]:
        return pulumi.get(self, "cache_responses_with_errors")

    @cache_responses_with_errors.setter
    def cache_responses_with_errors(self, value: Optional[bool]):
        pulumi.set(self, "cache_responses_with_errors", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="operationsJsonBodyParameterName")
    def operations_json_body_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "operations_json_body_parameter_name")

    @operations_json_body_parameter_name.setter
    def operations_json_body_parameter_name(self, value: Optional[str]):
        pulumi.set(self, "operations_json_body_parameter_name", value)

    @property
    @pulumi.getter(name="operationsUrlQueryParameterName")
    def operations_url_query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "operations_url_query_parameter_name")

    @operations_url_query_parameter_name.setter
    def operations_url_query_parameter_name(self, value: Optional[str]):
        pulumi.set(self, "operations_url_query_parameter_name", value)

    @property
    @pulumi.getter(name="postRequestProcessingErrorHandling")
    def post_request_processing_error_handling(self) -> Optional[str]:
        return pulumi.get(self, "post_request_processing_error_handling")

    @post_request_processing_error_handling.setter
    def post_request_processing_error_handling(self, value: Optional[str]):
        pulumi.set(self, "post_request_processing_error_handling", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorGzipResponseArgs:
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[str]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHdDataAdvancedArgs:
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if xml is not None:
            pulumi.set(__self__, "xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")

    @xml.setter
    def xml(self, value: Optional[str]):
        pulumi.set(self, "xml", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHealthDetectionArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 maximum_reconnects: Optional[int] = None,
                 retry_count: Optional[int] = None,
                 retry_interval: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_reconnects is not None:
            pulumi.set(__self__, "maximum_reconnects", maximum_reconnects)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if retry_interval is not None:
            pulumi.set(__self__, "retry_interval", retry_interval)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="maximumReconnects")
    def maximum_reconnects(self) -> Optional[int]:
        return pulumi.get(self, "maximum_reconnects")

    @maximum_reconnects.setter
    def maximum_reconnects(self, value: Optional[int]):
        pulumi.set(self, "maximum_reconnects", value)

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[int]:
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[int]):
        pulumi.set(self, "retry_count", value)

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[str]:
        return pulumi.get(self, "retry_interval")

    @retry_interval.setter
    def retry_interval(self, value: Optional[str]):
        pulumi.set(self, "retry_interval", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHsafEipBindingArgs:
    def __init__(__self__, *,
                 custom_extracted_serial: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 hash_max_value: Optional[int] = None,
                 hash_min_value: Optional[int] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tier: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_extracted_serial is not None:
            pulumi.set(__self__, "custom_extracted_serial", custom_extracted_serial)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hash_max_value is not None:
            pulumi.set(__self__, "hash_max_value", hash_max_value)
        if hash_min_value is not None:
            pulumi.set(__self__, "hash_min_value", hash_min_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customExtractedSerial")
    def custom_extracted_serial(self) -> Optional[bool]:
        return pulumi.get(self, "custom_extracted_serial")

    @custom_extracted_serial.setter
    def custom_extracted_serial(self, value: Optional[bool]):
        pulumi.set(self, "custom_extracted_serial", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="hashMaxValue")
    def hash_max_value(self) -> Optional[int]:
        return pulumi.get(self, "hash_max_value")

    @hash_max_value.setter
    def hash_max_value(self, value: Optional[int]):
        pulumi.set(self, "hash_max_value", value)

    @property
    @pulumi.getter(name="hashMinValue")
    def hash_min_value(self) -> Optional[int]:
        return pulumi.get(self, "hash_min_value")

    @hash_min_value.setter
    def hash_min_value(self, value: Optional[int]):
        pulumi.set(self, "hash_min_value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[str]):
        pulumi.set(self, "tier", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHttp2Args:
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHttp3Args:
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[bool]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHttpStrictTransportSecurityArgs:
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 include_sub_domains: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 max_age: Optional[str] = None,
                 preload: Optional[bool] = None,
                 redirect: Optional[bool] = None,
                 redirect_status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if include_sub_domains is not None:
            pulumi.set(__self__, "include_sub_domains", include_sub_domains)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if preload is not None:
            pulumi.set(__self__, "preload", preload)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if redirect_status_code is not None:
            pulumi.set(__self__, "redirect_status_code", redirect_status_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[bool]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="includeSubDomains")
    def include_sub_domains(self) -> Optional[bool]:
        return pulumi.get(self, "include_sub_domains")

    @include_sub_domains.setter
    def include_sub_domains(self, value: Optional[bool]):
        pulumi.set(self, "include_sub_domains", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[str]:
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[str]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter
    def preload(self) -> Optional[bool]:
        return pulumi.get(self, "preload")

    @preload.setter
    def preload(self, value: Optional[bool]):
        pulumi.set(self, "preload", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[bool]:
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[bool]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter(name="redirectStatusCode")
    def redirect_status_code(self) -> Optional[int]:
        return pulumi.get(self, "redirect_status_code")

    @redirect_status_code.setter
    def redirect_status_code(self, value: Optional[int]):
        pulumi.set(self, "redirect_status_code", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHttpToHttpsUpgradeArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upgrade: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upgrade is not None:
            pulumi.set(__self__, "upgrade", upgrade)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def upgrade(self) -> Optional[str]:
        return pulumi.get(self, "upgrade")

    @upgrade.setter
    def upgrade(self, value: Optional[str]):
        pulumi.set(self, "upgrade", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImOverrideArgs:
    def __init__(__self__, *,
                 dpr: Optional[float] = None,
                 dprvar: Optional[str] = None,
                 exclude_all_query_parameters: Optional[bool] = None,
                 excluded_query_parameters: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 formatvar: Optional[str] = None,
                 locked: Optional[bool] = None,
                 override: Optional[str] = None,
                 policy: Optional[str] = None,
                 policyvar: Optional[str] = None,
                 policyvar_i_mvar: Optional[str] = None,
                 policyvar_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 typesel: Optional[str] = None,
                 uuid: Optional[str] = None,
                 width: Optional[float] = None,
                 widthvar: Optional[str] = None):
        if dpr is not None:
            pulumi.set(__self__, "dpr", dpr)
        if dprvar is not None:
            pulumi.set(__self__, "dprvar", dprvar)
        if exclude_all_query_parameters is not None:
            pulumi.set(__self__, "exclude_all_query_parameters", exclude_all_query_parameters)
        if excluded_query_parameters is not None:
            pulumi.set(__self__, "excluded_query_parameters", excluded_query_parameters)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if formatvar is not None:
            pulumi.set(__self__, "formatvar", formatvar)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if policyvar is not None:
            pulumi.set(__self__, "policyvar", policyvar)
        if policyvar_i_mvar is not None:
            pulumi.set(__self__, "policyvar_i_mvar", policyvar_i_mvar)
        if policyvar_name is not None:
            pulumi.set(__self__, "policyvar_name", policyvar_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if typesel is not None:
            pulumi.set(__self__, "typesel", typesel)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if widthvar is not None:
            pulumi.set(__self__, "widthvar", widthvar)

    @property
    @pulumi.getter
    def dpr(self) -> Optional[float]:
        return pulumi.get(self, "dpr")

    @dpr.setter
    def dpr(self, value: Optional[float]):
        pulumi.set(self, "dpr", value)

    @property
    @pulumi.getter
    def dprvar(self) -> Optional[str]:
        return pulumi.get(self, "dprvar")

    @dprvar.setter
    def dprvar(self, value: Optional[str]):
        pulumi.set(self, "dprvar", value)

    @property
    @pulumi.getter(name="excludeAllQueryParameters")
    def exclude_all_query_parameters(self) -> Optional[bool]:
        return pulumi.get(self, "exclude_all_query_parameters")

    @exclude_all_query_parameters.setter
    def exclude_all_query_parameters(self, value: Optional[bool]):
        pulumi.set(self, "exclude_all_query_parameters", value)

    @property
    @pulumi.getter(name="excludedQueryParameters")
    def excluded_query_parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_query_parameters")

    @excluded_query_parameters.setter
    def excluded_query_parameters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "excluded_query_parameters", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def formatvar(self) -> Optional[str]:
        return pulumi.get(self, "formatvar")

    @formatvar.setter
    def formatvar(self, value: Optional[str]):
        pulumi.set(self, "formatvar", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[str]:
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[str]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[str]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def policyvar(self) -> Optional[str]:
        return pulumi.get(self, "policyvar")

    @policyvar.setter
    def policyvar(self, value: Optional[str]):
        pulumi.set(self, "policyvar", value)

    @property
    @pulumi.getter(name="policyvarIMvar")
    def policyvar_i_mvar(self) -> Optional[str]:
        return pulumi.get(self, "policyvar_i_mvar")

    @policyvar_i_mvar.setter
    def policyvar_i_mvar(self, value: Optional[str]):
        pulumi.set(self, "policyvar_i_mvar", value)

    @property
    @pulumi.getter(name="policyvarName")
    def policyvar_name(self) -> Optional[str]:
        return pulumi.get(self, "policyvar_name")

    @policyvar_name.setter
    def policyvar_name(self, value: Optional[str]):
        pulumi.set(self, "policyvar_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def typesel(self) -> Optional[str]:
        return pulumi.get(self, "typesel")

    @typesel.setter
    def typesel(self, value: Optional[str]):
        pulumi.set(self, "typesel", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[float]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[float]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter
    def widthvar(self) -> Optional[str]:
        return pulumi.get(self, "widthvar")

    @widthvar.setter
    def widthvar(self, value: Optional[str]):
        pulumi.set(self, "widthvar", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerArgs:
    def __init__(__self__, *,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalArgs'] = None,
                 cp_code_transformed: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedArgs'] = None,
                 enabled: Optional[bool] = None,
                 image_set: Optional[str] = None,
                 locked: Optional[bool] = None,
                 policy_set_type: Optional[str] = None,
                 resize: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 video_set: Optional[str] = None):
        if apply_best_file_type is not None:
            pulumi.set(__self__, "apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            pulumi.set(__self__, "cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            pulumi.set(__self__, "cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if image_set is not None:
            pulumi.set(__self__, "image_set", image_set)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if policy_set_type is not None:
            pulumi.set(__self__, "policy_set_type", policy_set_type)
        if resize is not None:
            pulumi.set(__self__, "resize", resize)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if video_set is not None:
            pulumi.set(__self__, "video_set", video_set)

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @apply_best_file_type.setter
    def apply_best_file_type(self, value: Optional[bool]):
        pulumi.set(self, "apply_best_file_type", value)

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalArgs']:
        return pulumi.get(self, "cp_code_original")

    @cp_code_original.setter
    def cp_code_original(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalArgs']):
        pulumi.set(self, "cp_code_original", value)

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedArgs']:
        return pulumi.get(self, "cp_code_transformed")

    @cp_code_transformed.setter
    def cp_code_transformed(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedArgs']):
        pulumi.set(self, "cp_code_transformed", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="imageSet")
    def image_set(self) -> Optional[str]:
        return pulumi.get(self, "image_set")

    @image_set.setter
    def image_set(self, value: Optional[str]):
        pulumi.set(self, "image_set", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="policySetType")
    def policy_set_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_set_type")

    @policy_set_type.setter
    def policy_set_type(self, value: Optional[str]):
        pulumi.set(self, "policy_set_type", value)

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @resize.setter
    def resize(self, value: Optional[bool]):
        pulumi.set(self, "resize", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="videoSet")
    def video_set(self) -> Optional[str]:
        return pulumi.get(self, "video_set")

    @video_set.setter
    def video_set(self, value: Optional[str]):
        pulumi.set(self, "video_set", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerArgs:
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 api_reference_title: Optional[str] = None,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalArgs'] = None,
                 cp_code_transformed: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedArgs'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 policy_set: Optional[str] = None,
                 policy_token: Optional[str] = None,
                 policy_token_default: Optional[str] = None,
                 resize: Optional[bool] = None,
                 settings_title: Optional[str] = None,
                 super_cache_region: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 traffic_title: Optional[str] = None,
                 use_existing_policy_set: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if api_reference_title is not None:
            pulumi.set(__self__, "api_reference_title", api_reference_title)
        if apply_best_file_type is not None:
            pulumi.set(__self__, "apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            pulumi.set(__self__, "cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            pulumi.set(__self__, "cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if policy_set is not None:
            pulumi.set(__self__, "policy_set", policy_set)
        if policy_token is not None:
            pulumi.set(__self__, "policy_token", policy_token)
        if policy_token_default is not None:
            pulumi.set(__self__, "policy_token_default", policy_token_default)
        if resize is not None:
            pulumi.set(__self__, "resize", resize)
        if settings_title is not None:
            pulumi.set(__self__, "settings_title", settings_title)
        if super_cache_region is not None:
            pulumi.set(__self__, "super_cache_region", super_cache_region)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if traffic_title is not None:
            pulumi.set(__self__, "traffic_title", traffic_title)
        if use_existing_policy_set is not None:
            pulumi.set(__self__, "use_existing_policy_set", use_existing_policy_set)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[bool]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter(name="apiReferenceTitle")
    def api_reference_title(self) -> Optional[str]:
        return pulumi.get(self, "api_reference_title")

    @api_reference_title.setter
    def api_reference_title(self, value: Optional[str]):
        pulumi.set(self, "api_reference_title", value)

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @apply_best_file_type.setter
    def apply_best_file_type(self, value: Optional[bool]):
        pulumi.set(self, "apply_best_file_type", value)

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalArgs']:
        return pulumi.get(self, "cp_code_original")

    @cp_code_original.setter
    def cp_code_original(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalArgs']):
        pulumi.set(self, "cp_code_original", value)

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedArgs']:
        return pulumi.get(self, "cp_code_transformed")

    @cp_code_transformed.setter
    def cp_code_transformed(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedArgs']):
        pulumi.set(self, "cp_code_transformed", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="policySet")
    def policy_set(self) -> Optional[str]:
        return pulumi.get(self, "policy_set")

    @policy_set.setter
    def policy_set(self, value: Optional[str]):
        pulumi.set(self, "policy_set", value)

    @property
    @pulumi.getter(name="policyToken")
    def policy_token(self) -> Optional[str]:
        return pulumi.get(self, "policy_token")

    @policy_token.setter
    def policy_token(self, value: Optional[str]):
        pulumi.set(self, "policy_token", value)

    @property
    @pulumi.getter(name="policyTokenDefault")
    def policy_token_default(self) -> Optional[str]:
        return pulumi.get(self, "policy_token_default")

    @policy_token_default.setter
    def policy_token_default(self, value: Optional[str]):
        pulumi.set(self, "policy_token_default", value)

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @resize.setter
    def resize(self, value: Optional[bool]):
        pulumi.set(self, "resize", value)

    @property
    @pulumi.getter(name="settingsTitle")
    def settings_title(self) -> Optional[str]:
        return pulumi.get(self, "settings_title")

    @settings_title.setter
    def settings_title(self, value: Optional[str]):
        pulumi.set(self, "settings_title", value)

    @property
    @pulumi.getter(name="superCacheRegion")
    def super_cache_region(self) -> Optional[str]:
        return pulumi.get(self, "super_cache_region")

    @super_cache_region.setter
    def super_cache_region(self, value: Optional[str]):
        pulumi.set(self, "super_cache_region", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="trafficTitle")
    def traffic_title(self) -> Optional[str]:
        return pulumi.get(self, "traffic_title")

    @traffic_title.setter
    def traffic_title(self, value: Optional[str]):
        pulumi.set(self, "traffic_title", value)

    @property
    @pulumi.getter(name="useExistingPolicySet")
    def use_existing_policy_set(self) -> Optional[bool]:
        return pulumi.get(self, "use_existing_policy_set")

    @use_existing_policy_set.setter
    def use_existing_policy_set(self, value: Optional[bool]):
        pulumi.set(self, "use_existing_policy_set", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoArgs:
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 api_reference_title: Optional[str] = None,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalArgs'] = None,
                 cp_code_transformed: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedArgs'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 policy_set: Optional[str] = None,
                 policy_token: Optional[str] = None,
                 policy_token_default: Optional[str] = None,
                 resize: Optional[bool] = None,
                 settings_title: Optional[str] = None,
                 super_cache_region: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 traffic_title: Optional[str] = None,
                 use_existing_policy_set: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if api_reference_title is not None:
            pulumi.set(__self__, "api_reference_title", api_reference_title)
        if apply_best_file_type is not None:
            pulumi.set(__self__, "apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            pulumi.set(__self__, "cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            pulumi.set(__self__, "cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if policy_set is not None:
            pulumi.set(__self__, "policy_set", policy_set)
        if policy_token is not None:
            pulumi.set(__self__, "policy_token", policy_token)
        if policy_token_default is not None:
            pulumi.set(__self__, "policy_token_default", policy_token_default)
        if resize is not None:
            pulumi.set(__self__, "resize", resize)
        if settings_title is not None:
            pulumi.set(__self__, "settings_title", settings_title)
        if super_cache_region is not None:
            pulumi.set(__self__, "super_cache_region", super_cache_region)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if traffic_title is not None:
            pulumi.set(__self__, "traffic_title", traffic_title)
        if use_existing_policy_set is not None:
            pulumi.set(__self__, "use_existing_policy_set", use_existing_policy_set)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[bool]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter(name="apiReferenceTitle")
    def api_reference_title(self) -> Optional[str]:
        return pulumi.get(self, "api_reference_title")

    @api_reference_title.setter
    def api_reference_title(self, value: Optional[str]):
        pulumi.set(self, "api_reference_title", value)

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @apply_best_file_type.setter
    def apply_best_file_type(self, value: Optional[bool]):
        pulumi.set(self, "apply_best_file_type", value)

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalArgs']:
        return pulumi.get(self, "cp_code_original")

    @cp_code_original.setter
    def cp_code_original(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalArgs']):
        pulumi.set(self, "cp_code_original", value)

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedArgs']:
        return pulumi.get(self, "cp_code_transformed")

    @cp_code_transformed.setter
    def cp_code_transformed(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedArgs']):
        pulumi.set(self, "cp_code_transformed", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="policySet")
    def policy_set(self) -> Optional[str]:
        return pulumi.get(self, "policy_set")

    @policy_set.setter
    def policy_set(self, value: Optional[str]):
        pulumi.set(self, "policy_set", value)

    @property
    @pulumi.getter(name="policyToken")
    def policy_token(self) -> Optional[str]:
        return pulumi.get(self, "policy_token")

    @policy_token.setter
    def policy_token(self, value: Optional[str]):
        pulumi.set(self, "policy_token", value)

    @property
    @pulumi.getter(name="policyTokenDefault")
    def policy_token_default(self) -> Optional[str]:
        return pulumi.get(self, "policy_token_default")

    @policy_token_default.setter
    def policy_token_default(self, value: Optional[str]):
        pulumi.set(self, "policy_token_default", value)

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @resize.setter
    def resize(self, value: Optional[bool]):
        pulumi.set(self, "resize", value)

    @property
    @pulumi.getter(name="settingsTitle")
    def settings_title(self) -> Optional[str]:
        return pulumi.get(self, "settings_title")

    @settings_title.setter
    def settings_title(self, value: Optional[str]):
        pulumi.set(self, "settings_title", value)

    @property
    @pulumi.getter(name="superCacheRegion")
    def super_cache_region(self) -> Optional[str]:
        return pulumi.get(self, "super_cache_region")

    @super_cache_region.setter
    def super_cache_region(self, value: Optional[str]):
        pulumi.set(self, "super_cache_region", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="trafficTitle")
    def traffic_title(self) -> Optional[str]:
        return pulumi.get(self, "traffic_title")

    @traffic_title.setter
    def traffic_title(self, value: Optional[str]):
        pulumi.set(self, "traffic_title", value)

    @property
    @pulumi.getter(name="useExistingPolicySet")
    def use_existing_policy_set(self) -> Optional[bool]:
        return pulumi.get(self, "use_existing_policy_set")

    @use_existing_policy_set.setter
    def use_existing_policy_set(self, value: Optional[bool]):
        pulumi.set(self, "use_existing_policy_set", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorIncludeArgs:
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationArgs:
    def __init__(__self__, *,
                 allow_large_post_body: Optional[bool] = None,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicyArgs'] = None,
                 enabled: Optional[bool] = None,
                 failure302_uri: Optional[str] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 penalty302_uri: Optional[str] = None,
                 penalty403_net_storage_path: Optional[str] = None,
                 penalty_action: Optional[str] = None,
                 penalty_branded_deny_cache_ttl: Optional[int] = None,
                 penalty_net_storage: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorageArgs'] = None,
                 penalty_threshold: Optional[int] = None,
                 penalty_title: Optional[str] = None,
                 reset_on_valid: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 user_identification_by_cookie: Optional[bool] = None,
                 user_identification_by_headers: Optional[bool] = None,
                 user_identification_by_ip: Optional[bool] = None,
                 user_identification_by_params: Optional[bool] = None,
                 user_identification_key_cookie: Optional[str] = None,
                 user_identification_key_headers: Optional[Sequence[str]] = None,
                 user_identification_key_params: Optional[Sequence[str]] = None,
                 user_identification_title: Optional[str] = None,
                 uuid: Optional[str] = None,
                 validate_on_origin_header_name: Optional[str] = None,
                 validate_on_origin_header_value: Optional[str] = None,
                 validate_on_origin_response_code: Optional[int] = None,
                 validate_on_origin_with: Optional[str] = None,
                 validation_title: Optional[str] = None):
        if allow_large_post_body is not None:
            pulumi.set(__self__, "allow_large_post_body", allow_large_post_body)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failure302_uri is not None:
            pulumi.set(__self__, "failure302_uri", failure302_uri)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if penalty302_uri is not None:
            pulumi.set(__self__, "penalty302_uri", penalty302_uri)
        if penalty403_net_storage_path is not None:
            pulumi.set(__self__, "penalty403_net_storage_path", penalty403_net_storage_path)
        if penalty_action is not None:
            pulumi.set(__self__, "penalty_action", penalty_action)
        if penalty_branded_deny_cache_ttl is not None:
            pulumi.set(__self__, "penalty_branded_deny_cache_ttl", penalty_branded_deny_cache_ttl)
        if penalty_net_storage is not None:
            pulumi.set(__self__, "penalty_net_storage", penalty_net_storage)
        if penalty_threshold is not None:
            pulumi.set(__self__, "penalty_threshold", penalty_threshold)
        if penalty_title is not None:
            pulumi.set(__self__, "penalty_title", penalty_title)
        if reset_on_valid is not None:
            pulumi.set(__self__, "reset_on_valid", reset_on_valid)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if user_identification_by_cookie is not None:
            pulumi.set(__self__, "user_identification_by_cookie", user_identification_by_cookie)
        if user_identification_by_headers is not None:
            pulumi.set(__self__, "user_identification_by_headers", user_identification_by_headers)
        if user_identification_by_ip is not None:
            pulumi.set(__self__, "user_identification_by_ip", user_identification_by_ip)
        if user_identification_by_params is not None:
            pulumi.set(__self__, "user_identification_by_params", user_identification_by_params)
        if user_identification_key_cookie is not None:
            pulumi.set(__self__, "user_identification_key_cookie", user_identification_key_cookie)
        if user_identification_key_headers is not None:
            pulumi.set(__self__, "user_identification_key_headers", user_identification_key_headers)
        if user_identification_key_params is not None:
            pulumi.set(__self__, "user_identification_key_params", user_identification_key_params)
        if user_identification_title is not None:
            pulumi.set(__self__, "user_identification_title", user_identification_title)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if validate_on_origin_header_name is not None:
            pulumi.set(__self__, "validate_on_origin_header_name", validate_on_origin_header_name)
        if validate_on_origin_header_value is not None:
            pulumi.set(__self__, "validate_on_origin_header_value", validate_on_origin_header_value)
        if validate_on_origin_response_code is not None:
            pulumi.set(__self__, "validate_on_origin_response_code", validate_on_origin_response_code)
        if validate_on_origin_with is not None:
            pulumi.set(__self__, "validate_on_origin_with", validate_on_origin_with)
        if validation_title is not None:
            pulumi.set(__self__, "validation_title", validation_title)

    @property
    @pulumi.getter(name="allowLargePostBody")
    def allow_large_post_body(self) -> Optional[bool]:
        return pulumi.get(self, "allow_large_post_body")

    @allow_large_post_body.setter
    def allow_large_post_body(self, value: Optional[bool]):
        pulumi.set(self, "allow_large_post_body", value)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="failure302Uri")
    def failure302_uri(self) -> Optional[str]:
        return pulumi.get(self, "failure302_uri")

    @failure302_uri.setter
    def failure302_uri(self, value: Optional[str]):
        pulumi.set(self, "failure302_uri", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="penalty302Uri")
    def penalty302_uri(self) -> Optional[str]:
        return pulumi.get(self, "penalty302_uri")

    @penalty302_uri.setter
    def penalty302_uri(self, value: Optional[str]):
        pulumi.set(self, "penalty302_uri", value)

    @property
    @pulumi.getter(name="penalty403NetStoragePath")
    def penalty403_net_storage_path(self) -> Optional[str]:
        return pulumi.get(self, "penalty403_net_storage_path")

    @penalty403_net_storage_path.setter
    def penalty403_net_storage_path(self, value: Optional[str]):
        pulumi.set(self, "penalty403_net_storage_path", value)

    @property
    @pulumi.getter(name="penaltyAction")
    def penalty_action(self) -> Optional[str]:
        return pulumi.get(self, "penalty_action")

    @penalty_action.setter
    def penalty_action(self, value: Optional[str]):
        pulumi.set(self, "penalty_action", value)

    @property
    @pulumi.getter(name="penaltyBrandedDenyCacheTtl")
    def penalty_branded_deny_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "penalty_branded_deny_cache_ttl")

    @penalty_branded_deny_cache_ttl.setter
    def penalty_branded_deny_cache_ttl(self, value: Optional[int]):
        pulumi.set(self, "penalty_branded_deny_cache_ttl", value)

    @property
    @pulumi.getter(name="penaltyNetStorage")
    def penalty_net_storage(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorageArgs']:
        return pulumi.get(self, "penalty_net_storage")

    @penalty_net_storage.setter
    def penalty_net_storage(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorageArgs']):
        pulumi.set(self, "penalty_net_storage", value)

    @property
    @pulumi.getter(name="penaltyThreshold")
    def penalty_threshold(self) -> Optional[int]:
        return pulumi.get(self, "penalty_threshold")

    @penalty_threshold.setter
    def penalty_threshold(self, value: Optional[int]):
        pulumi.set(self, "penalty_threshold", value)

    @property
    @pulumi.getter(name="penaltyTitle")
    def penalty_title(self) -> Optional[str]:
        return pulumi.get(self, "penalty_title")

    @penalty_title.setter
    def penalty_title(self, value: Optional[str]):
        pulumi.set(self, "penalty_title", value)

    @property
    @pulumi.getter(name="resetOnValid")
    def reset_on_valid(self) -> Optional[bool]:
        return pulumi.get(self, "reset_on_valid")

    @reset_on_valid.setter
    def reset_on_valid(self, value: Optional[bool]):
        pulumi.set(self, "reset_on_valid", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="userIdentificationByCookie")
    def user_identification_by_cookie(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_cookie")

    @user_identification_by_cookie.setter
    def user_identification_by_cookie(self, value: Optional[bool]):
        pulumi.set(self, "user_identification_by_cookie", value)

    @property
    @pulumi.getter(name="userIdentificationByHeaders")
    def user_identification_by_headers(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_headers")

    @user_identification_by_headers.setter
    def user_identification_by_headers(self, value: Optional[bool]):
        pulumi.set(self, "user_identification_by_headers", value)

    @property
    @pulumi.getter(name="userIdentificationByIp")
    def user_identification_by_ip(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_ip")

    @user_identification_by_ip.setter
    def user_identification_by_ip(self, value: Optional[bool]):
        pulumi.set(self, "user_identification_by_ip", value)

    @property
    @pulumi.getter(name="userIdentificationByParams")
    def user_identification_by_params(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_params")

    @user_identification_by_params.setter
    def user_identification_by_params(self, value: Optional[bool]):
        pulumi.set(self, "user_identification_by_params", value)

    @property
    @pulumi.getter(name="userIdentificationKeyCookie")
    def user_identification_key_cookie(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_key_cookie")

    @user_identification_key_cookie.setter
    def user_identification_key_cookie(self, value: Optional[str]):
        pulumi.set(self, "user_identification_key_cookie", value)

    @property
    @pulumi.getter(name="userIdentificationKeyHeaders")
    def user_identification_key_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_headers")

    @user_identification_key_headers.setter
    def user_identification_key_headers(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "user_identification_key_headers", value)

    @property
    @pulumi.getter(name="userIdentificationKeyParams")
    def user_identification_key_params(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_params")

    @user_identification_key_params.setter
    def user_identification_key_params(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "user_identification_key_params", value)

    @property
    @pulumi.getter(name="userIdentificationTitle")
    def user_identification_title(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_title")

    @user_identification_title.setter
    def user_identification_title(self, value: Optional[str]):
        pulumi.set(self, "user_identification_title", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="validateOnOriginHeaderName")
    def validate_on_origin_header_name(self) -> Optional[str]:
        return pulumi.get(self, "validate_on_origin_header_name")

    @validate_on_origin_header_name.setter
    def validate_on_origin_header_name(self, value: Optional[str]):
        pulumi.set(self, "validate_on_origin_header_name", value)

    @property
    @pulumi.getter(name="validateOnOriginHeaderValue")
    def validate_on_origin_header_value(self) -> Optional[str]:
        return pulumi.get(self, "validate_on_origin_header_value")

    @validate_on_origin_header_value.setter
    def validate_on_origin_header_value(self, value: Optional[str]):
        pulumi.set(self, "validate_on_origin_header_value", value)

    @property
    @pulumi.getter(name="validateOnOriginResponseCode")
    def validate_on_origin_response_code(self) -> Optional[int]:
        return pulumi.get(self, "validate_on_origin_response_code")

    @validate_on_origin_response_code.setter
    def validate_on_origin_response_code(self, value: Optional[int]):
        pulumi.set(self, "validate_on_origin_response_code", value)

    @property
    @pulumi.getter(name="validateOnOriginWith")
    def validate_on_origin_with(self) -> Optional[str]:
        return pulumi.get(self, "validate_on_origin_with")

    @validate_on_origin_with.setter
    def validate_on_origin_with(self, value: Optional[str]):
        pulumi.set(self, "validate_on_origin_with", value)

    @property
    @pulumi.getter(name="validationTitle")
    def validation_title(self) -> Optional[str]:
        return pulumi.get(self, "validation_title")

    @validation_title.setter
    def validation_title(self, value: Optional[str]):
        pulumi.set(self, "validation_title", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorageArgs:
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @cp_code.setter
    def cp_code(self, value: Optional[int]):
        pulumi.set(self, "cp_code", value)

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @download_domain_name.setter
    def download_domain_name(self, value: Optional[str]):
        pulumi.set(self, "download_domain_name", value)

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")

    @g2o_token.setter
    def g2o_token(self, value: Optional[str]):
        pulumi.set(self, "g2o_token", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorInstantArgs:
    def __init__(__self__, *,
                 custom_link_relations: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 prefetch_cacheable: Optional[bool] = None,
                 prefetch_html: Optional[bool] = None,
                 prefetch_no_store: Optional[bool] = None,
                 prefetch_no_store_extensions: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_link_relations is not None:
            pulumi.set(__self__, "custom_link_relations", custom_link_relations)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if prefetch_cacheable is not None:
            pulumi.set(__self__, "prefetch_cacheable", prefetch_cacheable)
        if prefetch_html is not None:
            pulumi.set(__self__, "prefetch_html", prefetch_html)
        if prefetch_no_store is not None:
            pulumi.set(__self__, "prefetch_no_store", prefetch_no_store)
        if prefetch_no_store_extensions is not None:
            pulumi.set(__self__, "prefetch_no_store_extensions", prefetch_no_store_extensions)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customLinkRelations")
    def custom_link_relations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_link_relations")

    @custom_link_relations.setter
    def custom_link_relations(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "custom_link_relations", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="prefetchCacheable")
    def prefetch_cacheable(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_cacheable")

    @prefetch_cacheable.setter
    def prefetch_cacheable(self, value: Optional[bool]):
        pulumi.set(self, "prefetch_cacheable", value)

    @property
    @pulumi.getter(name="prefetchHtml")
    def prefetch_html(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_html")

    @prefetch_html.setter
    def prefetch_html(self, value: Optional[bool]):
        pulumi.set(self, "prefetch_html", value)

    @property
    @pulumi.getter(name="prefetchNoStore")
    def prefetch_no_store(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_no_store")

    @prefetch_no_store.setter
    def prefetch_no_store(self, value: Optional[bool]):
        pulumi.set(self, "prefetch_no_store", value)

    @property
    @pulumi.getter(name="prefetchNoStoreExtensions")
    def prefetch_no_store_extensions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prefetch_no_store_extensions")

    @prefetch_no_store_extensions.setter
    def prefetch_no_store_extensions(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "prefetch_no_store_extensions", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorInstantConfigArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationArgs:
    def __init__(__self__, *,
                 enable_partial_object_caching: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 minimum_size: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_versioning: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if enable_partial_object_caching is not None:
            pulumi.set(__self__, "enable_partial_object_caching", enable_partial_object_caching)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_size is not None:
            pulumi.set(__self__, "maximum_size", maximum_size)
        if minimum_size is not None:
            pulumi.set(__self__, "minimum_size", minimum_size)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_versioning is not None:
            pulumi.set(__self__, "use_versioning", use_versioning)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="enablePartialObjectCaching")
    def enable_partial_object_caching(self) -> Optional[str]:
        return pulumi.get(self, "enable_partial_object_caching")

    @enable_partial_object_caching.setter
    def enable_partial_object_caching(self, value: Optional[str]):
        pulumi.set(self, "enable_partial_object_caching", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @maximum_size.setter
    def maximum_size(self, value: Optional[str]):
        pulumi.set(self, "maximum_size", value)

    @property
    @pulumi.getter(name="minimumSize")
    def minimum_size(self) -> Optional[str]:
        return pulumi.get(self, "minimum_size")

    @minimum_size.setter
    def minimum_size(self, value: Optional[str]):
        pulumi.set(self, "minimum_size", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useVersioning")
    def use_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "use_versioning")

    @use_versioning.setter
    def use_versioning(self, value: Optional[bool]):
        pulumi.set(self, "use_versioning", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationAdvancedArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 fragment_size: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 prefetch_after_request: Optional[int] = None,
                 prefetch_during_request: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if fragment_size is not None:
            pulumi.set(__self__, "fragment_size", fragment_size)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if prefetch_after_request is not None:
            pulumi.set(__self__, "prefetch_after_request", prefetch_after_request)
        if prefetch_during_request is not None:
            pulumi.set(__self__, "prefetch_during_request", prefetch_during_request)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="fragmentSize")
    def fragment_size(self) -> Optional[str]:
        return pulumi.get(self, "fragment_size")

    @fragment_size.setter
    def fragment_size(self, value: Optional[str]):
        pulumi.set(self, "fragment_size", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @object_size.setter
    def object_size(self, value: Optional[str]):
        pulumi.set(self, "object_size", value)

    @property
    @pulumi.getter(name="prefetchAfterRequest")
    def prefetch_after_request(self) -> Optional[int]:
        return pulumi.get(self, "prefetch_after_request")

    @prefetch_after_request.setter
    def prefetch_after_request(self, value: Optional[int]):
        pulumi.set(self, "prefetch_after_request", value)

    @property
    @pulumi.getter(name="prefetchDuringRequest")
    def prefetch_during_request(self) -> Optional[int]:
        return pulumi.get(self, "prefetch_during_request")

    @prefetch_during_request.setter
    def prefetch_during_request(self, value: Optional[int]):
        pulumi.set(self, "prefetch_during_request", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateArgs:
    def __init__(__self__, *,
                 bitrate_tables: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateBitrateTableArgs']] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 threshold_tables: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateThresholdTableArgs']] = None,
                 uuid: Optional[str] = None):
        if bitrate_tables is not None:
            pulumi.set(__self__, "bitrate_tables", bitrate_tables)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if threshold_tables is not None:
            pulumi.set(__self__, "threshold_tables", threshold_tables)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="bitrateTables")
    def bitrate_tables(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateBitrateTableArgs']]:
        return pulumi.get(self, "bitrate_tables")

    @bitrate_tables.setter
    def bitrate_tables(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateBitrateTableArgs']]):
        pulumi.set(self, "bitrate_tables", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="thresholdTables")
    def threshold_tables(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateThresholdTableArgs']]:
        return pulumi.get(self, "threshold_tables")

    @threshold_tables.setter
    def threshold_tables(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateThresholdTableArgs']]):
        pulumi.set(self, "threshold_tables", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateBitrateTableArgs:
    def __init__(__self__, *,
                 bitrate_unit: Optional[str] = None,
                 bitrate_value: Optional[float] = None):
        if bitrate_unit is not None:
            pulumi.set(__self__, "bitrate_unit", bitrate_unit)
        if bitrate_value is not None:
            pulumi.set(__self__, "bitrate_value", bitrate_value)

    @property
    @pulumi.getter(name="bitrateUnit")
    def bitrate_unit(self) -> Optional[str]:
        return pulumi.get(self, "bitrate_unit")

    @bitrate_unit.setter
    def bitrate_unit(self, value: Optional[str]):
        pulumi.set(self, "bitrate_unit", value)

    @property
    @pulumi.getter(name="bitrateValue")
    def bitrate_value(self) -> Optional[float]:
        return pulumi.get(self, "bitrate_value")

    @bitrate_value.setter
    def bitrate_value(self, value: Optional[float]):
        pulumi.set(self, "bitrate_value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateThresholdTableArgs:
    def __init__(__self__, *,
                 threshold_unit: Optional[str] = None,
                 threshold_value: Optional[int] = None):
        if threshold_unit is not None:
            pulumi.set(__self__, "threshold_unit", threshold_unit)
        if threshold_value is not None:
            pulumi.set(__self__, "threshold_value", threshold_value)

    @property
    @pulumi.getter(name="thresholdUnit")
    def threshold_unit(self) -> Optional[str]:
        return pulumi.get(self, "threshold_unit")

    @threshold_unit.setter
    def threshold_unit(self, value: Optional[str]):
        pulumi.set(self, "threshold_unit", value)

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> Optional[int]:
        return pulumi.get(self, "threshold_value")

    @threshold_value.setter
    def threshold_value(self, value: Optional[int]):
        pulumi.set(self, "threshold_value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLogCustomArgs:
    def __init__(__self__, *,
                 custom_log_field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 log_custom_log_field: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_log_field is not None:
            pulumi.set(__self__, "custom_log_field", custom_log_field)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if log_custom_log_field is not None:
            pulumi.set(__self__, "log_custom_log_field", log_custom_log_field)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customLogField")
    def custom_log_field(self) -> Optional[str]:
        return pulumi.get(self, "custom_log_field")

    @custom_log_field.setter
    def custom_log_field(self, value: Optional[str]):
        pulumi.set(self, "custom_log_field", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="logCustomLogField")
    def log_custom_log_field(self) -> Optional[bool]:
        return pulumi.get(self, "log_custom_log_field")

    @log_custom_log_field.setter
    def log_custom_log_field(self, value: Optional[bool]):
        pulumi.set(self, "log_custom_log_field", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMPulseArgs:
    def __init__(__self__, *,
                 api_key: Optional[str] = None,
                 buffer_size: Optional[str] = None,
                 config_override: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 loader_version: Optional[str] = None,
                 locked: Optional[bool] = None,
                 require_pci: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 title_optional: Optional[str] = None,
                 uuid: Optional[str] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if buffer_size is not None:
            pulumi.set(__self__, "buffer_size", buffer_size)
        if config_override is not None:
            pulumi.set(__self__, "config_override", config_override)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if loader_version is not None:
            pulumi.set(__self__, "loader_version", loader_version)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if require_pci is not None:
            pulumi.set(__self__, "require_pci", require_pci)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if title_optional is not None:
            pulumi.set(__self__, "title_optional", title_optional)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "buffer_size")

    @buffer_size.setter
    def buffer_size(self, value: Optional[str]):
        pulumi.set(self, "buffer_size", value)

    @property
    @pulumi.getter(name="configOverride")
    def config_override(self) -> Optional[str]:
        return pulumi.get(self, "config_override")

    @config_override.setter
    def config_override(self, value: Optional[str]):
        pulumi.set(self, "config_override", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="loaderVersion")
    def loader_version(self) -> Optional[str]:
        return pulumi.get(self, "loader_version")

    @loader_version.setter
    def loader_version(self, value: Optional[str]):
        pulumi.set(self, "loader_version", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="requirePci")
    def require_pci(self) -> Optional[bool]:
        return pulumi.get(self, "require_pci")

    @require_pci.setter
    def require_pci(self, value: Optional[bool]):
        pulumi.set(self, "require_pci", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="titleOptional")
    def title_optional(self) -> Optional[str]:
        return pulumi.get(self, "title_optional")

    @title_optional.setter
    def title_optional(self, value: Optional[str]):
        pulumi.set(self, "title_optional", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorManifestPersonalizationArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 hls_enable_debug_headers: Optional[bool] = None,
                 hls_enabled: Optional[bool] = None,
                 hls_filter_in_bitrate_ranges: Optional[str] = None,
                 hls_filter_in_bitrates: Optional[str] = None,
                 hls_mode: Optional[str] = None,
                 hls_preferred_bitrate: Optional[str] = None,
                 hls_query_param_enabled: Optional[bool] = None,
                 hls_query_param_secret_key: Optional[str] = None,
                 hls_query_param_transition_key: Optional[str] = None,
                 hls_show_advanced: Optional[bool] = None,
                 hls_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hls_enable_debug_headers is not None:
            pulumi.set(__self__, "hls_enable_debug_headers", hls_enable_debug_headers)
        if hls_enabled is not None:
            pulumi.set(__self__, "hls_enabled", hls_enabled)
        if hls_filter_in_bitrate_ranges is not None:
            pulumi.set(__self__, "hls_filter_in_bitrate_ranges", hls_filter_in_bitrate_ranges)
        if hls_filter_in_bitrates is not None:
            pulumi.set(__self__, "hls_filter_in_bitrates", hls_filter_in_bitrates)
        if hls_mode is not None:
            pulumi.set(__self__, "hls_mode", hls_mode)
        if hls_preferred_bitrate is not None:
            pulumi.set(__self__, "hls_preferred_bitrate", hls_preferred_bitrate)
        if hls_query_param_enabled is not None:
            pulumi.set(__self__, "hls_query_param_enabled", hls_query_param_enabled)
        if hls_query_param_secret_key is not None:
            pulumi.set(__self__, "hls_query_param_secret_key", hls_query_param_secret_key)
        if hls_query_param_transition_key is not None:
            pulumi.set(__self__, "hls_query_param_transition_key", hls_query_param_transition_key)
        if hls_show_advanced is not None:
            pulumi.set(__self__, "hls_show_advanced", hls_show_advanced)
        if hls_title is not None:
            pulumi.set(__self__, "hls_title", hls_title)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="hlsEnableDebugHeaders")
    def hls_enable_debug_headers(self) -> Optional[bool]:
        return pulumi.get(self, "hls_enable_debug_headers")

    @hls_enable_debug_headers.setter
    def hls_enable_debug_headers(self, value: Optional[bool]):
        pulumi.set(self, "hls_enable_debug_headers", value)

    @property
    @pulumi.getter(name="hlsEnabled")
    def hls_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "hls_enabled")

    @hls_enabled.setter
    def hls_enabled(self, value: Optional[bool]):
        pulumi.set(self, "hls_enabled", value)

    @property
    @pulumi.getter(name="hlsFilterInBitrateRanges")
    def hls_filter_in_bitrate_ranges(self) -> Optional[str]:
        return pulumi.get(self, "hls_filter_in_bitrate_ranges")

    @hls_filter_in_bitrate_ranges.setter
    def hls_filter_in_bitrate_ranges(self, value: Optional[str]):
        pulumi.set(self, "hls_filter_in_bitrate_ranges", value)

    @property
    @pulumi.getter(name="hlsFilterInBitrates")
    def hls_filter_in_bitrates(self) -> Optional[str]:
        return pulumi.get(self, "hls_filter_in_bitrates")

    @hls_filter_in_bitrates.setter
    def hls_filter_in_bitrates(self, value: Optional[str]):
        pulumi.set(self, "hls_filter_in_bitrates", value)

    @property
    @pulumi.getter(name="hlsMode")
    def hls_mode(self) -> Optional[str]:
        return pulumi.get(self, "hls_mode")

    @hls_mode.setter
    def hls_mode(self, value: Optional[str]):
        pulumi.set(self, "hls_mode", value)

    @property
    @pulumi.getter(name="hlsPreferredBitrate")
    def hls_preferred_bitrate(self) -> Optional[str]:
        return pulumi.get(self, "hls_preferred_bitrate")

    @hls_preferred_bitrate.setter
    def hls_preferred_bitrate(self, value: Optional[str]):
        pulumi.set(self, "hls_preferred_bitrate", value)

    @property
    @pulumi.getter(name="hlsQueryParamEnabled")
    def hls_query_param_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "hls_query_param_enabled")

    @hls_query_param_enabled.setter
    def hls_query_param_enabled(self, value: Optional[bool]):
        pulumi.set(self, "hls_query_param_enabled", value)

    @property
    @pulumi.getter(name="hlsQueryParamSecretKey")
    def hls_query_param_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "hls_query_param_secret_key")

    @hls_query_param_secret_key.setter
    def hls_query_param_secret_key(self, value: Optional[str]):
        pulumi.set(self, "hls_query_param_secret_key", value)

    @property
    @pulumi.getter(name="hlsQueryParamTransitionKey")
    def hls_query_param_transition_key(self) -> Optional[str]:
        return pulumi.get(self, "hls_query_param_transition_key")

    @hls_query_param_transition_key.setter
    def hls_query_param_transition_key(self, value: Optional[str]):
        pulumi.set(self, "hls_query_param_transition_key", value)

    @property
    @pulumi.getter(name="hlsShowAdvanced")
    def hls_show_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "hls_show_advanced")

    @hls_show_advanced.setter
    def hls_show_advanced(self, value: Optional[bool]):
        pulumi.set(self, "hls_show_advanced", value)

    @property
    @pulumi.getter(name="hlsTitle")
    def hls_title(self) -> Optional[str]:
        return pulumi.get(self, "hls_title")

    @hls_title.setter
    def hls_title(self, value: Optional[str]):
        pulumi.set(self, "hls_title", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorManifestReroutingArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 partner: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 username: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if partner is not None:
            pulumi.set(__self__, "partner", partner)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def partner(self) -> Optional[str]:
        return pulumi.get(self, "partner")

    @partner.setter
    def partner(self, value: Optional[str]):
        pulumi.set(self, "partner", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorManualServerPushArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 serverpushlists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if serverpushlists is not None:
            pulumi.set(__self__, "serverpushlists", serverpushlists)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def serverpushlists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "serverpushlists")

    @serverpushlists.setter
    def serverpushlists(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "serverpushlists", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationQuicOptoutArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 optout: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if optout is not None:
            pulumi.set(__self__, "optout", optout)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def optout(self) -> Optional[str]:
        return pulumi.get(self, "optout")

    @optout.setter
    def optout(self, value: Optional[str]):
        pulumi.set(self, "optout", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMediaClientArgs:
    def __init__(__self__, *,
                 beacon_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_hybrid_http_udp: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if beacon_id is not None:
            pulumi.set(__self__, "beacon_id", beacon_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_hybrid_http_udp is not None:
            pulumi.set(__self__, "use_hybrid_http_udp", use_hybrid_http_udp)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="beaconId")
    def beacon_id(self) -> Optional[str]:
        return pulumi.get(self, "beacon_id")

    @beacon_id.setter
    def beacon_id(self, value: Optional[str]):
        pulumi.set(self, "beacon_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useHybridHttpUdp")
    def use_hybrid_http_udp(self) -> Optional[bool]:
        return pulumi.get(self, "use_hybrid_http_udp")

    @use_hybrid_http_udp.setter
    def use_hybrid_http_udp(self, value: Optional[bool]):
        pulumi.set(self, "use_hybrid_http_udp", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMediaFileRetrievalOptimizationArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMediaOriginFailoverArgs:
    def __init__(__self__, *,
                 cache_error_response: Optional[bool] = None,
                 cache_window: Optional[str] = None,
                 client_response_code: Optional[str] = None,
                 detect_object_unavailable: Optional[bool] = None,
                 detect_object_unavailable_title: Optional[str] = None,
                 detect_origin_unavailable: Optional[bool] = None,
                 detect_origin_unavailable_title: Optional[str] = None,
                 detect_origin_unresponsive: Optional[bool] = None,
                 detect_origin_unresponsive_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_unavailable_alternate_host: Optional[str] = None,
                 object_unavailable_backup_host: Optional[str] = None,
                 object_unavailable_blacklist_origin_ip: Optional[bool] = None,
                 object_unavailable_blacklist_window: Optional[str] = None,
                 object_unavailable_change_protocol: Optional[bool] = None,
                 object_unavailable_detection_level: Optional[str] = None,
                 object_unavailable_include_query_string: Optional[bool] = None,
                 object_unavailable_modified_path: Optional[str] = None,
                 object_unavailable_modify_request_path: Optional[bool] = None,
                 object_unavailable_protocol: Optional[str] = None,
                 object_unavailable_recovery: Optional[str] = None,
                 object_unavailable_redirect_method: Optional[int] = None,
                 object_unavailable_response_codes: Optional[Sequence[str]] = None,
                 object_unavailable_retry_limit: Optional[str] = None,
                 origin_unavailable_alternate_host: Optional[str] = None,
                 origin_unavailable_backup_host: Optional[str] = None,
                 origin_unavailable_blacklist_origin_ip: Optional[bool] = None,
                 origin_unavailable_blacklist_window: Optional[str] = None,
                 origin_unavailable_change_protocol: Optional[bool] = None,
                 origin_unavailable_detection_level: Optional[str] = None,
                 origin_unavailable_include_query_string: Optional[bool] = None,
                 origin_unavailable_modified_path: Optional[str] = None,
                 origin_unavailable_modify_request_path: Optional[bool] = None,
                 origin_unavailable_protocol: Optional[str] = None,
                 origin_unavailable_recovery: Optional[str] = None,
                 origin_unavailable_redirect_method: Optional[int] = None,
                 origin_unavailable_response_codes: Optional[Sequence[str]] = None,
                 origin_unavailable_retry_limit: Optional[str] = None,
                 origin_unresponsive_alternate_host: Optional[str] = None,
                 origin_unresponsive_backup_host: Optional[str] = None,
                 origin_unresponsive_blacklist_origin_ip: Optional[bool] = None,
                 origin_unresponsive_blacklist_window: Optional[str] = None,
                 origin_unresponsive_change_protocol: Optional[bool] = None,
                 origin_unresponsive_detection_level: Optional[str] = None,
                 origin_unresponsive_include_query_string: Optional[bool] = None,
                 origin_unresponsive_modified_path: Optional[str] = None,
                 origin_unresponsive_modify_request_path: Optional[bool] = None,
                 origin_unresponsive_protocol: Optional[str] = None,
                 origin_unresponsive_recovery: Optional[str] = None,
                 origin_unresponsive_redirect_method: Optional[int] = None,
                 origin_unresponsive_retry_limit: Optional[str] = None,
                 other_options: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cache_error_response is not None:
            pulumi.set(__self__, "cache_error_response", cache_error_response)
        if cache_window is not None:
            pulumi.set(__self__, "cache_window", cache_window)
        if client_response_code is not None:
            pulumi.set(__self__, "client_response_code", client_response_code)
        if detect_object_unavailable is not None:
            pulumi.set(__self__, "detect_object_unavailable", detect_object_unavailable)
        if detect_object_unavailable_title is not None:
            pulumi.set(__self__, "detect_object_unavailable_title", detect_object_unavailable_title)
        if detect_origin_unavailable is not None:
            pulumi.set(__self__, "detect_origin_unavailable", detect_origin_unavailable)
        if detect_origin_unavailable_title is not None:
            pulumi.set(__self__, "detect_origin_unavailable_title", detect_origin_unavailable_title)
        if detect_origin_unresponsive is not None:
            pulumi.set(__self__, "detect_origin_unresponsive", detect_origin_unresponsive)
        if detect_origin_unresponsive_title is not None:
            pulumi.set(__self__, "detect_origin_unresponsive_title", detect_origin_unresponsive_title)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_unavailable_alternate_host is not None:
            pulumi.set(__self__, "object_unavailable_alternate_host", object_unavailable_alternate_host)
        if object_unavailable_backup_host is not None:
            pulumi.set(__self__, "object_unavailable_backup_host", object_unavailable_backup_host)
        if object_unavailable_blacklist_origin_ip is not None:
            pulumi.set(__self__, "object_unavailable_blacklist_origin_ip", object_unavailable_blacklist_origin_ip)
        if object_unavailable_blacklist_window is not None:
            pulumi.set(__self__, "object_unavailable_blacklist_window", object_unavailable_blacklist_window)
        if object_unavailable_change_protocol is not None:
            pulumi.set(__self__, "object_unavailable_change_protocol", object_unavailable_change_protocol)
        if object_unavailable_detection_level is not None:
            pulumi.set(__self__, "object_unavailable_detection_level", object_unavailable_detection_level)
        if object_unavailable_include_query_string is not None:
            pulumi.set(__self__, "object_unavailable_include_query_string", object_unavailable_include_query_string)
        if object_unavailable_modified_path is not None:
            pulumi.set(__self__, "object_unavailable_modified_path", object_unavailable_modified_path)
        if object_unavailable_modify_request_path is not None:
            pulumi.set(__self__, "object_unavailable_modify_request_path", object_unavailable_modify_request_path)
        if object_unavailable_protocol is not None:
            pulumi.set(__self__, "object_unavailable_protocol", object_unavailable_protocol)
        if object_unavailable_recovery is not None:
            pulumi.set(__self__, "object_unavailable_recovery", object_unavailable_recovery)
        if object_unavailable_redirect_method is not None:
            pulumi.set(__self__, "object_unavailable_redirect_method", object_unavailable_redirect_method)
        if object_unavailable_response_codes is not None:
            pulumi.set(__self__, "object_unavailable_response_codes", object_unavailable_response_codes)
        if object_unavailable_retry_limit is not None:
            pulumi.set(__self__, "object_unavailable_retry_limit", object_unavailable_retry_limit)
        if origin_unavailable_alternate_host is not None:
            pulumi.set(__self__, "origin_unavailable_alternate_host", origin_unavailable_alternate_host)
        if origin_unavailable_backup_host is not None:
            pulumi.set(__self__, "origin_unavailable_backup_host", origin_unavailable_backup_host)
        if origin_unavailable_blacklist_origin_ip is not None:
            pulumi.set(__self__, "origin_unavailable_blacklist_origin_ip", origin_unavailable_blacklist_origin_ip)
        if origin_unavailable_blacklist_window is not None:
            pulumi.set(__self__, "origin_unavailable_blacklist_window", origin_unavailable_blacklist_window)
        if origin_unavailable_change_protocol is not None:
            pulumi.set(__self__, "origin_unavailable_change_protocol", origin_unavailable_change_protocol)
        if origin_unavailable_detection_level is not None:
            pulumi.set(__self__, "origin_unavailable_detection_level", origin_unavailable_detection_level)
        if origin_unavailable_include_query_string is not None:
            pulumi.set(__self__, "origin_unavailable_include_query_string", origin_unavailable_include_query_string)
        if origin_unavailable_modified_path is not None:
            pulumi.set(__self__, "origin_unavailable_modified_path", origin_unavailable_modified_path)
        if origin_unavailable_modify_request_path is not None:
            pulumi.set(__self__, "origin_unavailable_modify_request_path", origin_unavailable_modify_request_path)
        if origin_unavailable_protocol is not None:
            pulumi.set(__self__, "origin_unavailable_protocol", origin_unavailable_protocol)
        if origin_unavailable_recovery is not None:
            pulumi.set(__self__, "origin_unavailable_recovery", origin_unavailable_recovery)
        if origin_unavailable_redirect_method is not None:
            pulumi.set(__self__, "origin_unavailable_redirect_method", origin_unavailable_redirect_method)
        if origin_unavailable_response_codes is not None:
            pulumi.set(__self__, "origin_unavailable_response_codes", origin_unavailable_response_codes)
        if origin_unavailable_retry_limit is not None:
            pulumi.set(__self__, "origin_unavailable_retry_limit", origin_unavailable_retry_limit)
        if origin_unresponsive_alternate_host is not None:
            pulumi.set(__self__, "origin_unresponsive_alternate_host", origin_unresponsive_alternate_host)
        if origin_unresponsive_backup_host is not None:
            pulumi.set(__self__, "origin_unresponsive_backup_host", origin_unresponsive_backup_host)
        if origin_unresponsive_blacklist_origin_ip is not None:
            pulumi.set(__self__, "origin_unresponsive_blacklist_origin_ip", origin_unresponsive_blacklist_origin_ip)
        if origin_unresponsive_blacklist_window is not None:
            pulumi.set(__self__, "origin_unresponsive_blacklist_window", origin_unresponsive_blacklist_window)
        if origin_unresponsive_change_protocol is not None:
            pulumi.set(__self__, "origin_unresponsive_change_protocol", origin_unresponsive_change_protocol)
        if origin_unresponsive_detection_level is not None:
            pulumi.set(__self__, "origin_unresponsive_detection_level", origin_unresponsive_detection_level)
        if origin_unresponsive_include_query_string is not None:
            pulumi.set(__self__, "origin_unresponsive_include_query_string", origin_unresponsive_include_query_string)
        if origin_unresponsive_modified_path is not None:
            pulumi.set(__self__, "origin_unresponsive_modified_path", origin_unresponsive_modified_path)
        if origin_unresponsive_modify_request_path is not None:
            pulumi.set(__self__, "origin_unresponsive_modify_request_path", origin_unresponsive_modify_request_path)
        if origin_unresponsive_protocol is not None:
            pulumi.set(__self__, "origin_unresponsive_protocol", origin_unresponsive_protocol)
        if origin_unresponsive_recovery is not None:
            pulumi.set(__self__, "origin_unresponsive_recovery", origin_unresponsive_recovery)
        if origin_unresponsive_redirect_method is not None:
            pulumi.set(__self__, "origin_unresponsive_redirect_method", origin_unresponsive_redirect_method)
        if origin_unresponsive_retry_limit is not None:
            pulumi.set(__self__, "origin_unresponsive_retry_limit", origin_unresponsive_retry_limit)
        if other_options is not None:
            pulumi.set(__self__, "other_options", other_options)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cacheErrorResponse")
    def cache_error_response(self) -> Optional[bool]:
        return pulumi.get(self, "cache_error_response")

    @cache_error_response.setter
    def cache_error_response(self, value: Optional[bool]):
        pulumi.set(self, "cache_error_response", value)

    @property
    @pulumi.getter(name="cacheWindow")
    def cache_window(self) -> Optional[str]:
        return pulumi.get(self, "cache_window")

    @cache_window.setter
    def cache_window(self, value: Optional[str]):
        pulumi.set(self, "cache_window", value)

    @property
    @pulumi.getter(name="clientResponseCode")
    def client_response_code(self) -> Optional[str]:
        return pulumi.get(self, "client_response_code")

    @client_response_code.setter
    def client_response_code(self, value: Optional[str]):
        pulumi.set(self, "client_response_code", value)

    @property
    @pulumi.getter(name="detectObjectUnavailable")
    def detect_object_unavailable(self) -> Optional[bool]:
        return pulumi.get(self, "detect_object_unavailable")

    @detect_object_unavailable.setter
    def detect_object_unavailable(self, value: Optional[bool]):
        pulumi.set(self, "detect_object_unavailable", value)

    @property
    @pulumi.getter(name="detectObjectUnavailableTitle")
    def detect_object_unavailable_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_object_unavailable_title")

    @detect_object_unavailable_title.setter
    def detect_object_unavailable_title(self, value: Optional[str]):
        pulumi.set(self, "detect_object_unavailable_title", value)

    @property
    @pulumi.getter(name="detectOriginUnavailable")
    def detect_origin_unavailable(self) -> Optional[bool]:
        return pulumi.get(self, "detect_origin_unavailable")

    @detect_origin_unavailable.setter
    def detect_origin_unavailable(self, value: Optional[bool]):
        pulumi.set(self, "detect_origin_unavailable", value)

    @property
    @pulumi.getter(name="detectOriginUnavailableTitle")
    def detect_origin_unavailable_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_origin_unavailable_title")

    @detect_origin_unavailable_title.setter
    def detect_origin_unavailable_title(self, value: Optional[str]):
        pulumi.set(self, "detect_origin_unavailable_title", value)

    @property
    @pulumi.getter(name="detectOriginUnresponsive")
    def detect_origin_unresponsive(self) -> Optional[bool]:
        return pulumi.get(self, "detect_origin_unresponsive")

    @detect_origin_unresponsive.setter
    def detect_origin_unresponsive(self, value: Optional[bool]):
        pulumi.set(self, "detect_origin_unresponsive", value)

    @property
    @pulumi.getter(name="detectOriginUnresponsiveTitle")
    def detect_origin_unresponsive_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_origin_unresponsive_title")

    @detect_origin_unresponsive_title.setter
    def detect_origin_unresponsive_title(self, value: Optional[str]):
        pulumi.set(self, "detect_origin_unresponsive_title", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="objectUnavailableAlternateHost")
    def object_unavailable_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_alternate_host")

    @object_unavailable_alternate_host.setter
    def object_unavailable_alternate_host(self, value: Optional[str]):
        pulumi.set(self, "object_unavailable_alternate_host", value)

    @property
    @pulumi.getter(name="objectUnavailableBackupHost")
    def object_unavailable_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_backup_host")

    @object_unavailable_backup_host.setter
    def object_unavailable_backup_host(self, value: Optional[str]):
        pulumi.set(self, "object_unavailable_backup_host", value)

    @property
    @pulumi.getter(name="objectUnavailableBlacklistOriginIp")
    def object_unavailable_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_blacklist_origin_ip")

    @object_unavailable_blacklist_origin_ip.setter
    def object_unavailable_blacklist_origin_ip(self, value: Optional[bool]):
        pulumi.set(self, "object_unavailable_blacklist_origin_ip", value)

    @property
    @pulumi.getter(name="objectUnavailableBlacklistWindow")
    def object_unavailable_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_blacklist_window")

    @object_unavailable_blacklist_window.setter
    def object_unavailable_blacklist_window(self, value: Optional[str]):
        pulumi.set(self, "object_unavailable_blacklist_window", value)

    @property
    @pulumi.getter(name="objectUnavailableChangeProtocol")
    def object_unavailable_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_change_protocol")

    @object_unavailable_change_protocol.setter
    def object_unavailable_change_protocol(self, value: Optional[bool]):
        pulumi.set(self, "object_unavailable_change_protocol", value)

    @property
    @pulumi.getter(name="objectUnavailableDetectionLevel")
    def object_unavailable_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_detection_level")

    @object_unavailable_detection_level.setter
    def object_unavailable_detection_level(self, value: Optional[str]):
        pulumi.set(self, "object_unavailable_detection_level", value)

    @property
    @pulumi.getter(name="objectUnavailableIncludeQueryString")
    def object_unavailable_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_include_query_string")

    @object_unavailable_include_query_string.setter
    def object_unavailable_include_query_string(self, value: Optional[bool]):
        pulumi.set(self, "object_unavailable_include_query_string", value)

    @property
    @pulumi.getter(name="objectUnavailableModifiedPath")
    def object_unavailable_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_modified_path")

    @object_unavailable_modified_path.setter
    def object_unavailable_modified_path(self, value: Optional[str]):
        pulumi.set(self, "object_unavailable_modified_path", value)

    @property
    @pulumi.getter(name="objectUnavailableModifyRequestPath")
    def object_unavailable_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_modify_request_path")

    @object_unavailable_modify_request_path.setter
    def object_unavailable_modify_request_path(self, value: Optional[bool]):
        pulumi.set(self, "object_unavailable_modify_request_path", value)

    @property
    @pulumi.getter(name="objectUnavailableProtocol")
    def object_unavailable_protocol(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_protocol")

    @object_unavailable_protocol.setter
    def object_unavailable_protocol(self, value: Optional[str]):
        pulumi.set(self, "object_unavailable_protocol", value)

    @property
    @pulumi.getter(name="objectUnavailableRecovery")
    def object_unavailable_recovery(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_recovery")

    @object_unavailable_recovery.setter
    def object_unavailable_recovery(self, value: Optional[str]):
        pulumi.set(self, "object_unavailable_recovery", value)

    @property
    @pulumi.getter(name="objectUnavailableRedirectMethod")
    def object_unavailable_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "object_unavailable_redirect_method")

    @object_unavailable_redirect_method.setter
    def object_unavailable_redirect_method(self, value: Optional[int]):
        pulumi.set(self, "object_unavailable_redirect_method", value)

    @property
    @pulumi.getter(name="objectUnavailableResponseCodes")
    def object_unavailable_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "object_unavailable_response_codes")

    @object_unavailable_response_codes.setter
    def object_unavailable_response_codes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "object_unavailable_response_codes", value)

    @property
    @pulumi.getter(name="objectUnavailableRetryLimit")
    def object_unavailable_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_retry_limit")

    @object_unavailable_retry_limit.setter
    def object_unavailable_retry_limit(self, value: Optional[str]):
        pulumi.set(self, "object_unavailable_retry_limit", value)

    @property
    @pulumi.getter(name="originUnavailableAlternateHost")
    def origin_unavailable_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_alternate_host")

    @origin_unavailable_alternate_host.setter
    def origin_unavailable_alternate_host(self, value: Optional[str]):
        pulumi.set(self, "origin_unavailable_alternate_host", value)

    @property
    @pulumi.getter(name="originUnavailableBackupHost")
    def origin_unavailable_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_backup_host")

    @origin_unavailable_backup_host.setter
    def origin_unavailable_backup_host(self, value: Optional[str]):
        pulumi.set(self, "origin_unavailable_backup_host", value)

    @property
    @pulumi.getter(name="originUnavailableBlacklistOriginIp")
    def origin_unavailable_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_blacklist_origin_ip")

    @origin_unavailable_blacklist_origin_ip.setter
    def origin_unavailable_blacklist_origin_ip(self, value: Optional[bool]):
        pulumi.set(self, "origin_unavailable_blacklist_origin_ip", value)

    @property
    @pulumi.getter(name="originUnavailableBlacklistWindow")
    def origin_unavailable_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_blacklist_window")

    @origin_unavailable_blacklist_window.setter
    def origin_unavailable_blacklist_window(self, value: Optional[str]):
        pulumi.set(self, "origin_unavailable_blacklist_window", value)

    @property
    @pulumi.getter(name="originUnavailableChangeProtocol")
    def origin_unavailable_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_change_protocol")

    @origin_unavailable_change_protocol.setter
    def origin_unavailable_change_protocol(self, value: Optional[bool]):
        pulumi.set(self, "origin_unavailable_change_protocol", value)

    @property
    @pulumi.getter(name="originUnavailableDetectionLevel")
    def origin_unavailable_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_detection_level")

    @origin_unavailable_detection_level.setter
    def origin_unavailable_detection_level(self, value: Optional[str]):
        pulumi.set(self, "origin_unavailable_detection_level", value)

    @property
    @pulumi.getter(name="originUnavailableIncludeQueryString")
    def origin_unavailable_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_include_query_string")

    @origin_unavailable_include_query_string.setter
    def origin_unavailable_include_query_string(self, value: Optional[bool]):
        pulumi.set(self, "origin_unavailable_include_query_string", value)

    @property
    @pulumi.getter(name="originUnavailableModifiedPath")
    def origin_unavailable_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_modified_path")

    @origin_unavailable_modified_path.setter
    def origin_unavailable_modified_path(self, value: Optional[str]):
        pulumi.set(self, "origin_unavailable_modified_path", value)

    @property
    @pulumi.getter(name="originUnavailableModifyRequestPath")
    def origin_unavailable_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_modify_request_path")

    @origin_unavailable_modify_request_path.setter
    def origin_unavailable_modify_request_path(self, value: Optional[bool]):
        pulumi.set(self, "origin_unavailable_modify_request_path", value)

    @property
    @pulumi.getter(name="originUnavailableProtocol")
    def origin_unavailable_protocol(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_protocol")

    @origin_unavailable_protocol.setter
    def origin_unavailable_protocol(self, value: Optional[str]):
        pulumi.set(self, "origin_unavailable_protocol", value)

    @property
    @pulumi.getter(name="originUnavailableRecovery")
    def origin_unavailable_recovery(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_recovery")

    @origin_unavailable_recovery.setter
    def origin_unavailable_recovery(self, value: Optional[str]):
        pulumi.set(self, "origin_unavailable_recovery", value)

    @property
    @pulumi.getter(name="originUnavailableRedirectMethod")
    def origin_unavailable_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "origin_unavailable_redirect_method")

    @origin_unavailable_redirect_method.setter
    def origin_unavailable_redirect_method(self, value: Optional[int]):
        pulumi.set(self, "origin_unavailable_redirect_method", value)

    @property
    @pulumi.getter(name="originUnavailableResponseCodes")
    def origin_unavailable_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "origin_unavailable_response_codes")

    @origin_unavailable_response_codes.setter
    def origin_unavailable_response_codes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "origin_unavailable_response_codes", value)

    @property
    @pulumi.getter(name="originUnavailableRetryLimit")
    def origin_unavailable_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_retry_limit")

    @origin_unavailable_retry_limit.setter
    def origin_unavailable_retry_limit(self, value: Optional[str]):
        pulumi.set(self, "origin_unavailable_retry_limit", value)

    @property
    @pulumi.getter(name="originUnresponsiveAlternateHost")
    def origin_unresponsive_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_alternate_host")

    @origin_unresponsive_alternate_host.setter
    def origin_unresponsive_alternate_host(self, value: Optional[str]):
        pulumi.set(self, "origin_unresponsive_alternate_host", value)

    @property
    @pulumi.getter(name="originUnresponsiveBackupHost")
    def origin_unresponsive_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_backup_host")

    @origin_unresponsive_backup_host.setter
    def origin_unresponsive_backup_host(self, value: Optional[str]):
        pulumi.set(self, "origin_unresponsive_backup_host", value)

    @property
    @pulumi.getter(name="originUnresponsiveBlacklistOriginIp")
    def origin_unresponsive_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_blacklist_origin_ip")

    @origin_unresponsive_blacklist_origin_ip.setter
    def origin_unresponsive_blacklist_origin_ip(self, value: Optional[bool]):
        pulumi.set(self, "origin_unresponsive_blacklist_origin_ip", value)

    @property
    @pulumi.getter(name="originUnresponsiveBlacklistWindow")
    def origin_unresponsive_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_blacklist_window")

    @origin_unresponsive_blacklist_window.setter
    def origin_unresponsive_blacklist_window(self, value: Optional[str]):
        pulumi.set(self, "origin_unresponsive_blacklist_window", value)

    @property
    @pulumi.getter(name="originUnresponsiveChangeProtocol")
    def origin_unresponsive_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_change_protocol")

    @origin_unresponsive_change_protocol.setter
    def origin_unresponsive_change_protocol(self, value: Optional[bool]):
        pulumi.set(self, "origin_unresponsive_change_protocol", value)

    @property
    @pulumi.getter(name="originUnresponsiveDetectionLevel")
    def origin_unresponsive_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_detection_level")

    @origin_unresponsive_detection_level.setter
    def origin_unresponsive_detection_level(self, value: Optional[str]):
        pulumi.set(self, "origin_unresponsive_detection_level", value)

    @property
    @pulumi.getter(name="originUnresponsiveIncludeQueryString")
    def origin_unresponsive_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_include_query_string")

    @origin_unresponsive_include_query_string.setter
    def origin_unresponsive_include_query_string(self, value: Optional[bool]):
        pulumi.set(self, "origin_unresponsive_include_query_string", value)

    @property
    @pulumi.getter(name="originUnresponsiveModifiedPath")
    def origin_unresponsive_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_modified_path")

    @origin_unresponsive_modified_path.setter
    def origin_unresponsive_modified_path(self, value: Optional[str]):
        pulumi.set(self, "origin_unresponsive_modified_path", value)

    @property
    @pulumi.getter(name="originUnresponsiveModifyRequestPath")
    def origin_unresponsive_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_modify_request_path")

    @origin_unresponsive_modify_request_path.setter
    def origin_unresponsive_modify_request_path(self, value: Optional[bool]):
        pulumi.set(self, "origin_unresponsive_modify_request_path", value)

    @property
    @pulumi.getter(name="originUnresponsiveProtocol")
    def origin_unresponsive_protocol(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_protocol")

    @origin_unresponsive_protocol.setter
    def origin_unresponsive_protocol(self, value: Optional[str]):
        pulumi.set(self, "origin_unresponsive_protocol", value)

    @property
    @pulumi.getter(name="originUnresponsiveRecovery")
    def origin_unresponsive_recovery(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_recovery")

    @origin_unresponsive_recovery.setter
    def origin_unresponsive_recovery(self, value: Optional[str]):
        pulumi.set(self, "origin_unresponsive_recovery", value)

    @property
    @pulumi.getter(name="originUnresponsiveRedirectMethod")
    def origin_unresponsive_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "origin_unresponsive_redirect_method")

    @origin_unresponsive_redirect_method.setter
    def origin_unresponsive_redirect_method(self, value: Optional[int]):
        pulumi.set(self, "origin_unresponsive_redirect_method", value)

    @property
    @pulumi.getter(name="originUnresponsiveRetryLimit")
    def origin_unresponsive_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_retry_limit")

    @origin_unresponsive_retry_limit.setter
    def origin_unresponsive_retry_limit(self, value: Optional[str]):
        pulumi.set(self, "origin_unresponsive_retry_limit", value)

    @property
    @pulumi.getter(name="otherOptions")
    def other_options(self) -> Optional[str]:
        return pulumi.get(self, "other_options")

    @other_options.setter
    def other_options(self, value: Optional[str]):
        pulumi.set(self, "other_options", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMetadataCachingArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMobileSdkPerformanceArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 secondary_multipath_to_origin: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if secondary_multipath_to_origin is not None:
            pulumi.set(__self__, "secondary_multipath_to_origin", secondary_multipath_to_origin)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="secondaryMultipathToOrigin")
    def secondary_multipath_to_origin(self) -> Optional[bool]:
        return pulumi.get(self, "secondary_multipath_to_origin")

    @secondary_multipath_to_origin.setter
    def secondary_multipath_to_origin(self, value: Optional[bool]):
        pulumi.set(self, "secondary_multipath_to_origin", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingRequestHeaderArgs:
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 standard_pass_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if avoid_duplicate_headers is not None:
            pulumi.set(__self__, "avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if new_header_value is not None:
            pulumi.set(__self__, "new_header_value", new_header_value)
        if standard_add_header_name is not None:
            pulumi.set(__self__, "standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            pulumi.set(__self__, "standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            pulumi.set(__self__, "standard_modify_header_name", standard_modify_header_name)
        if standard_pass_header_name is not None:
            pulumi.set(__self__, "standard_pass_header_name", standard_pass_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @avoid_duplicate_headers.setter
    def avoid_duplicate_headers(self, value: Optional[bool]):
        pulumi.set(self, "avoid_duplicate_headers", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[str]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: Optional[str]):
        pulumi.set(self, "header_value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @new_header_value.setter
    def new_header_value(self, value: Optional[str]):
        pulumi.set(self, "new_header_value", value)

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @standard_add_header_name.setter
    def standard_add_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_add_header_name", value)

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @standard_delete_header_name.setter
    def standard_delete_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_delete_header_name", value)

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @standard_modify_header_name.setter
    def standard_modify_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_modify_header_name", value)

    @property
    @pulumi.getter(name="standardPassHeaderName")
    def standard_pass_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_pass_header_name")

    @standard_pass_header_name.setter
    def standard_pass_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_pass_header_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingResponseHeaderArgs:
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 standard_pass_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if avoid_duplicate_headers is not None:
            pulumi.set(__self__, "avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if new_header_value is not None:
            pulumi.set(__self__, "new_header_value", new_header_value)
        if standard_add_header_name is not None:
            pulumi.set(__self__, "standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            pulumi.set(__self__, "standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            pulumi.set(__self__, "standard_modify_header_name", standard_modify_header_name)
        if standard_pass_header_name is not None:
            pulumi.set(__self__, "standard_pass_header_name", standard_pass_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @avoid_duplicate_headers.setter
    def avoid_duplicate_headers(self, value: Optional[bool]):
        pulumi.set(self, "avoid_duplicate_headers", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[str]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: Optional[str]):
        pulumi.set(self, "header_value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @new_header_value.setter
    def new_header_value(self, value: Optional[str]):
        pulumi.set(self, "new_header_value", value)

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @standard_add_header_name.setter
    def standard_add_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_add_header_name", value)

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @standard_delete_header_name.setter
    def standard_delete_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_delete_header_name", value)

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @standard_modify_header_name.setter
    def standard_modify_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_modify_header_name", value)

    @property
    @pulumi.getter(name="standardPassHeaderName")
    def standard_pass_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_pass_header_name")

    @standard_pass_header_name.setter
    def standard_pass_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_pass_header_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingRequestHeaderArgs:
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_multiple: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 regex_header_match: Optional[str] = None,
                 regex_header_replace: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if avoid_duplicate_headers is not None:
            pulumi.set(__self__, "avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_multiple is not None:
            pulumi.set(__self__, "match_multiple", match_multiple)
        if new_header_value is not None:
            pulumi.set(__self__, "new_header_value", new_header_value)
        if regex_header_match is not None:
            pulumi.set(__self__, "regex_header_match", regex_header_match)
        if regex_header_replace is not None:
            pulumi.set(__self__, "regex_header_replace", regex_header_replace)
        if standard_add_header_name is not None:
            pulumi.set(__self__, "standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            pulumi.set(__self__, "standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            pulumi.set(__self__, "standard_modify_header_name", standard_modify_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @avoid_duplicate_headers.setter
    def avoid_duplicate_headers(self, value: Optional[bool]):
        pulumi.set(self, "avoid_duplicate_headers", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[str]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: Optional[str]):
        pulumi.set(self, "header_value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @match_multiple.setter
    def match_multiple(self, value: Optional[bool]):
        pulumi.set(self, "match_multiple", value)

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @new_header_value.setter
    def new_header_value(self, value: Optional[str]):
        pulumi.set(self, "new_header_value", value)

    @property
    @pulumi.getter(name="regexHeaderMatch")
    def regex_header_match(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_match")

    @regex_header_match.setter
    def regex_header_match(self, value: Optional[str]):
        pulumi.set(self, "regex_header_match", value)

    @property
    @pulumi.getter(name="regexHeaderReplace")
    def regex_header_replace(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_replace")

    @regex_header_replace.setter
    def regex_header_replace(self, value: Optional[str]):
        pulumi.set(self, "regex_header_replace", value)

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @standard_add_header_name.setter
    def standard_add_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_add_header_name", value)

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @standard_delete_header_name.setter
    def standard_delete_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_delete_header_name", value)

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @standard_modify_header_name.setter
    def standard_modify_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_modify_header_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingResponseHeaderArgs:
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_multiple: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 regex_header_match: Optional[str] = None,
                 regex_header_replace: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if avoid_duplicate_headers is not None:
            pulumi.set(__self__, "avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_multiple is not None:
            pulumi.set(__self__, "match_multiple", match_multiple)
        if new_header_value is not None:
            pulumi.set(__self__, "new_header_value", new_header_value)
        if regex_header_match is not None:
            pulumi.set(__self__, "regex_header_match", regex_header_match)
        if regex_header_replace is not None:
            pulumi.set(__self__, "regex_header_replace", regex_header_replace)
        if standard_add_header_name is not None:
            pulumi.set(__self__, "standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            pulumi.set(__self__, "standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            pulumi.set(__self__, "standard_modify_header_name", standard_modify_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @avoid_duplicate_headers.setter
    def avoid_duplicate_headers(self, value: Optional[bool]):
        pulumi.set(self, "avoid_duplicate_headers", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[str]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: Optional[str]):
        pulumi.set(self, "header_value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @match_multiple.setter
    def match_multiple(self, value: Optional[bool]):
        pulumi.set(self, "match_multiple", value)

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @new_header_value.setter
    def new_header_value(self, value: Optional[str]):
        pulumi.set(self, "new_header_value", value)

    @property
    @pulumi.getter(name="regexHeaderMatch")
    def regex_header_match(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_match")

    @regex_header_match.setter
    def regex_header_match(self, value: Optional[str]):
        pulumi.set(self, "regex_header_match", value)

    @property
    @pulumi.getter(name="regexHeaderReplace")
    def regex_header_replace(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_replace")

    @regex_header_replace.setter
    def regex_header_replace(self, value: Optional[str]):
        pulumi.set(self, "regex_header_replace", value)

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @standard_add_header_name.setter
    def standard_add_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_add_header_name", value)

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @standard_delete_header_name.setter
    def standard_delete_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_delete_header_name", value)

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @standard_modify_header_name.setter
    def standard_modify_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_modify_header_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorModifyViaHeaderArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modification_option: Optional[str] = None,
                 rename_header_to: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if modification_option is not None:
            pulumi.set(__self__, "modification_option", modification_option)
        if rename_header_to is not None:
            pulumi.set(__self__, "rename_header_to", rename_header_to)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="modificationOption")
    def modification_option(self) -> Optional[str]:
        return pulumi.get(self, "modification_option")

    @modification_option.setter
    def modification_option(self, value: Optional[str]):
        pulumi.set(self, "modification_option", value)

    @property
    @pulumi.getter(name="renameHeaderTo")
    def rename_header_to(self) -> Optional[str]:
        return pulumi.get(self, "rename_header_to")

    @rename_header_to.setter
    def rename_header_to(self, value: Optional[str]):
        pulumi.set(self, "rename_header_to", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginArgs:
    def __init__(__self__, *,
                 cache_key_hostname: Optional[str] = None,
                 compress: Optional[bool] = None,
                 custom_certificate_authorities: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityArgs']] = None,
                 custom_certificates: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateArgs']] = None,
                 custom_forward_host_header: Optional[str] = None,
                 custom_valid_cn_values: Optional[Sequence[str]] = None,
                 enable_true_client_ip: Optional[bool] = None,
                 forward_host_header: Optional[str] = None,
                 hostname: Optional[str] = None,
                 http_port: Optional[int] = None,
                 https_port: Optional[int] = None,
                 ip_version: Optional[str] = None,
                 locked: Optional[bool] = None,
                 mslorigin: Optional[str] = None,
                 net_storage: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginNetStorageArgs'] = None,
                 origin_certificate: Optional[str] = None,
                 origin_certs_to_honor: Optional[str] = None,
                 origin_id: Optional[str] = None,
                 origin_sni: Optional[bool] = None,
                 origin_type: Optional[str] = None,
                 ports: Optional[str] = None,
                 saas_cname_enabled: Optional[bool] = None,
                 saas_cname_level: Optional[int] = None,
                 saas_cookie: Optional[str] = None,
                 saas_query_string: Optional[str] = None,
                 saas_regex: Optional[str] = None,
                 saas_replace: Optional[str] = None,
                 saas_suffix: Optional[str] = None,
                 saas_type: Optional[str] = None,
                 second_hostname: Optional[str] = None,
                 second_hostname_enabled: Optional[bool] = None,
                 standard_certificate_authorities: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 true_client_ip_client_setting: Optional[bool] = None,
                 true_client_ip_header: Optional[str] = None,
                 use_unique_cache_key: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 verification_mode: Optional[str] = None):
        if cache_key_hostname is not None:
            pulumi.set(__self__, "cache_key_hostname", cache_key_hostname)
        if compress is not None:
            pulumi.set(__self__, "compress", compress)
        if custom_certificate_authorities is not None:
            pulumi.set(__self__, "custom_certificate_authorities", custom_certificate_authorities)
        if custom_certificates is not None:
            pulumi.set(__self__, "custom_certificates", custom_certificates)
        if custom_forward_host_header is not None:
            pulumi.set(__self__, "custom_forward_host_header", custom_forward_host_header)
        if custom_valid_cn_values is not None:
            pulumi.set(__self__, "custom_valid_cn_values", custom_valid_cn_values)
        if enable_true_client_ip is not None:
            pulumi.set(__self__, "enable_true_client_ip", enable_true_client_ip)
        if forward_host_header is not None:
            pulumi.set(__self__, "forward_host_header", forward_host_header)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if mslorigin is not None:
            pulumi.set(__self__, "mslorigin", mslorigin)
        if net_storage is not None:
            pulumi.set(__self__, "net_storage", net_storage)
        if origin_certificate is not None:
            pulumi.set(__self__, "origin_certificate", origin_certificate)
        if origin_certs_to_honor is not None:
            pulumi.set(__self__, "origin_certs_to_honor", origin_certs_to_honor)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if origin_sni is not None:
            pulumi.set(__self__, "origin_sni", origin_sni)
        if origin_type is not None:
            pulumi.set(__self__, "origin_type", origin_type)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if saas_cname_enabled is not None:
            pulumi.set(__self__, "saas_cname_enabled", saas_cname_enabled)
        if saas_cname_level is not None:
            pulumi.set(__self__, "saas_cname_level", saas_cname_level)
        if saas_cookie is not None:
            pulumi.set(__self__, "saas_cookie", saas_cookie)
        if saas_query_string is not None:
            pulumi.set(__self__, "saas_query_string", saas_query_string)
        if saas_regex is not None:
            pulumi.set(__self__, "saas_regex", saas_regex)
        if saas_replace is not None:
            pulumi.set(__self__, "saas_replace", saas_replace)
        if saas_suffix is not None:
            pulumi.set(__self__, "saas_suffix", saas_suffix)
        if saas_type is not None:
            pulumi.set(__self__, "saas_type", saas_type)
        if second_hostname is not None:
            pulumi.set(__self__, "second_hostname", second_hostname)
        if second_hostname_enabled is not None:
            pulumi.set(__self__, "second_hostname_enabled", second_hostname_enabled)
        if standard_certificate_authorities is not None:
            pulumi.set(__self__, "standard_certificate_authorities", standard_certificate_authorities)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if true_client_ip_client_setting is not None:
            pulumi.set(__self__, "true_client_ip_client_setting", true_client_ip_client_setting)
        if true_client_ip_header is not None:
            pulumi.set(__self__, "true_client_ip_header", true_client_ip_header)
        if use_unique_cache_key is not None:
            pulumi.set(__self__, "use_unique_cache_key", use_unique_cache_key)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if verification_mode is not None:
            pulumi.set(__self__, "verification_mode", verification_mode)

    @property
    @pulumi.getter(name="cacheKeyHostname")
    def cache_key_hostname(self) -> Optional[str]:
        return pulumi.get(self, "cache_key_hostname")

    @cache_key_hostname.setter
    def cache_key_hostname(self, value: Optional[str]):
        pulumi.set(self, "cache_key_hostname", value)

    @property
    @pulumi.getter
    def compress(self) -> Optional[bool]:
        return pulumi.get(self, "compress")

    @compress.setter
    def compress(self, value: Optional[bool]):
        pulumi.set(self, "compress", value)

    @property
    @pulumi.getter(name="customCertificateAuthorities")
    def custom_certificate_authorities(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityArgs']]:
        return pulumi.get(self, "custom_certificate_authorities")

    @custom_certificate_authorities.setter
    def custom_certificate_authorities(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityArgs']]):
        pulumi.set(self, "custom_certificate_authorities", value)

    @property
    @pulumi.getter(name="customCertificates")
    def custom_certificates(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateArgs']]:
        return pulumi.get(self, "custom_certificates")

    @custom_certificates.setter
    def custom_certificates(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateArgs']]):
        pulumi.set(self, "custom_certificates", value)

    @property
    @pulumi.getter(name="customForwardHostHeader")
    def custom_forward_host_header(self) -> Optional[str]:
        return pulumi.get(self, "custom_forward_host_header")

    @custom_forward_host_header.setter
    def custom_forward_host_header(self, value: Optional[str]):
        pulumi.set(self, "custom_forward_host_header", value)

    @property
    @pulumi.getter(name="customValidCnValues")
    def custom_valid_cn_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_valid_cn_values")

    @custom_valid_cn_values.setter
    def custom_valid_cn_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "custom_valid_cn_values", value)

    @property
    @pulumi.getter(name="enableTrueClientIp")
    def enable_true_client_ip(self) -> Optional[bool]:
        return pulumi.get(self, "enable_true_client_ip")

    @enable_true_client_ip.setter
    def enable_true_client_ip(self, value: Optional[bool]):
        pulumi.set(self, "enable_true_client_ip", value)

    @property
    @pulumi.getter(name="forwardHostHeader")
    def forward_host_header(self) -> Optional[str]:
        return pulumi.get(self, "forward_host_header")

    @forward_host_header.setter
    def forward_host_header(self, value: Optional[str]):
        pulumi.set(self, "forward_host_header", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[int]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[int]:
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[int]):
        pulumi.set(self, "https_port", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[str]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def mslorigin(self) -> Optional[str]:
        return pulumi.get(self, "mslorigin")

    @mslorigin.setter
    def mslorigin(self, value: Optional[str]):
        pulumi.set(self, "mslorigin", value)

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginNetStorageArgs']:
        return pulumi.get(self, "net_storage")

    @net_storage.setter
    def net_storage(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorOriginNetStorageArgs']):
        pulumi.set(self, "net_storage", value)

    @property
    @pulumi.getter(name="originCertificate")
    def origin_certificate(self) -> Optional[str]:
        return pulumi.get(self, "origin_certificate")

    @origin_certificate.setter
    def origin_certificate(self, value: Optional[str]):
        pulumi.set(self, "origin_certificate", value)

    @property
    @pulumi.getter(name="originCertsToHonor")
    def origin_certs_to_honor(self) -> Optional[str]:
        return pulumi.get(self, "origin_certs_to_honor")

    @origin_certs_to_honor.setter
    def origin_certs_to_honor(self, value: Optional[str]):
        pulumi.set(self, "origin_certs_to_honor", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: Optional[str]):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="originSni")
    def origin_sni(self) -> Optional[bool]:
        return pulumi.get(self, "origin_sni")

    @origin_sni.setter
    def origin_sni(self, value: Optional[bool]):
        pulumi.set(self, "origin_sni", value)

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional[str]:
        return pulumi.get(self, "origin_type")

    @origin_type.setter
    def origin_type(self, value: Optional[str]):
        pulumi.set(self, "origin_type", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[str]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[str]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="saasCnameEnabled")
    def saas_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "saas_cname_enabled")

    @saas_cname_enabled.setter
    def saas_cname_enabled(self, value: Optional[bool]):
        pulumi.set(self, "saas_cname_enabled", value)

    @property
    @pulumi.getter(name="saasCnameLevel")
    def saas_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "saas_cname_level")

    @saas_cname_level.setter
    def saas_cname_level(self, value: Optional[int]):
        pulumi.set(self, "saas_cname_level", value)

    @property
    @pulumi.getter(name="saasCookie")
    def saas_cookie(self) -> Optional[str]:
        return pulumi.get(self, "saas_cookie")

    @saas_cookie.setter
    def saas_cookie(self, value: Optional[str]):
        pulumi.set(self, "saas_cookie", value)

    @property
    @pulumi.getter(name="saasQueryString")
    def saas_query_string(self) -> Optional[str]:
        return pulumi.get(self, "saas_query_string")

    @saas_query_string.setter
    def saas_query_string(self, value: Optional[str]):
        pulumi.set(self, "saas_query_string", value)

    @property
    @pulumi.getter(name="saasRegex")
    def saas_regex(self) -> Optional[str]:
        return pulumi.get(self, "saas_regex")

    @saas_regex.setter
    def saas_regex(self, value: Optional[str]):
        pulumi.set(self, "saas_regex", value)

    @property
    @pulumi.getter(name="saasReplace")
    def saas_replace(self) -> Optional[str]:
        return pulumi.get(self, "saas_replace")

    @saas_replace.setter
    def saas_replace(self, value: Optional[str]):
        pulumi.set(self, "saas_replace", value)

    @property
    @pulumi.getter(name="saasSuffix")
    def saas_suffix(self) -> Optional[str]:
        return pulumi.get(self, "saas_suffix")

    @saas_suffix.setter
    def saas_suffix(self, value: Optional[str]):
        pulumi.set(self, "saas_suffix", value)

    @property
    @pulumi.getter(name="saasType")
    def saas_type(self) -> Optional[str]:
        return pulumi.get(self, "saas_type")

    @saas_type.setter
    def saas_type(self, value: Optional[str]):
        pulumi.set(self, "saas_type", value)

    @property
    @pulumi.getter(name="secondHostname")
    def second_hostname(self) -> Optional[str]:
        return pulumi.get(self, "second_hostname")

    @second_hostname.setter
    def second_hostname(self, value: Optional[str]):
        pulumi.set(self, "second_hostname", value)

    @property
    @pulumi.getter(name="secondHostnameEnabled")
    def second_hostname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "second_hostname_enabled")

    @second_hostname_enabled.setter
    def second_hostname_enabled(self, value: Optional[bool]):
        pulumi.set(self, "second_hostname_enabled", value)

    @property
    @pulumi.getter(name="standardCertificateAuthorities")
    def standard_certificate_authorities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "standard_certificate_authorities")

    @standard_certificate_authorities.setter
    def standard_certificate_authorities(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "standard_certificate_authorities", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="trueClientIpClientSetting")
    def true_client_ip_client_setting(self) -> Optional[bool]:
        return pulumi.get(self, "true_client_ip_client_setting")

    @true_client_ip_client_setting.setter
    def true_client_ip_client_setting(self, value: Optional[bool]):
        pulumi.set(self, "true_client_ip_client_setting", value)

    @property
    @pulumi.getter(name="trueClientIpHeader")
    def true_client_ip_header(self) -> Optional[str]:
        return pulumi.get(self, "true_client_ip_header")

    @true_client_ip_header.setter
    def true_client_ip_header(self, value: Optional[str]):
        pulumi.set(self, "true_client_ip_header", value)

    @property
    @pulumi.getter(name="useUniqueCacheKey")
    def use_unique_cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "use_unique_cache_key")

    @use_unique_cache_key.setter
    def use_unique_cache_key(self, value: Optional[bool]):
        pulumi.set(self, "use_unique_cache_key", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="verificationMode")
    def verification_mode(self) -> Optional[str]:
        return pulumi.get(self, "verification_mode")

    @verification_mode.setter
    def verification_mode(self, value: Optional[str]):
        pulumi.set(self, "verification_mode", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsArgs:
    def __init__(__self__, *,
                 access_key_encrypted_storage: Optional[bool] = None,
                 adc_title: Optional[str] = None,
                 authentication_method: Optional[str] = None,
                 authentication_method_title: Optional[str] = None,
                 aws_access_key_id: Optional[str] = None,
                 aws_access_key_version_guid: Optional[str] = None,
                 aws_host: Optional[str] = None,
                 aws_region: Optional[str] = None,
                 aws_secret_access_key: Optional[str] = None,
                 aws_service: Optional[str] = None,
                 country: Optional[str] = None,
                 custom_sign_strings: Optional[Sequence[str]] = None,
                 direct_connect_geo: Optional[str] = None,
                 encoding_version: Optional[int] = None,
                 gcs_access_key_version_guid: Optional[str] = None,
                 gcs_hmac_key_access_id: Optional[str] = None,
                 gcs_hmac_key_secret: Optional[str] = None,
                 locked: Optional[bool] = None,
                 mslkey: Optional[str] = None,
                 mslname: Optional[str] = None,
                 nonce: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_custom_sign_string: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if access_key_encrypted_storage is not None:
            pulumi.set(__self__, "access_key_encrypted_storage", access_key_encrypted_storage)
        if adc_title is not None:
            pulumi.set(__self__, "adc_title", adc_title)
        if authentication_method is not None:
            pulumi.set(__self__, "authentication_method", authentication_method)
        if authentication_method_title is not None:
            pulumi.set(__self__, "authentication_method_title", authentication_method_title)
        if aws_access_key_id is not None:
            pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        if aws_access_key_version_guid is not None:
            pulumi.set(__self__, "aws_access_key_version_guid", aws_access_key_version_guid)
        if aws_host is not None:
            pulumi.set(__self__, "aws_host", aws_host)
        if aws_region is not None:
            pulumi.set(__self__, "aws_region", aws_region)
        if aws_secret_access_key is not None:
            pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        if aws_service is not None:
            pulumi.set(__self__, "aws_service", aws_service)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if custom_sign_strings is not None:
            pulumi.set(__self__, "custom_sign_strings", custom_sign_strings)
        if direct_connect_geo is not None:
            pulumi.set(__self__, "direct_connect_geo", direct_connect_geo)
        if encoding_version is not None:
            pulumi.set(__self__, "encoding_version", encoding_version)
        if gcs_access_key_version_guid is not None:
            pulumi.set(__self__, "gcs_access_key_version_guid", gcs_access_key_version_guid)
        if gcs_hmac_key_access_id is not None:
            pulumi.set(__self__, "gcs_hmac_key_access_id", gcs_hmac_key_access_id)
        if gcs_hmac_key_secret is not None:
            pulumi.set(__self__, "gcs_hmac_key_secret", gcs_hmac_key_secret)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if mslkey is not None:
            pulumi.set(__self__, "mslkey", mslkey)
        if mslname is not None:
            pulumi.set(__self__, "mslname", mslname)
        if nonce is not None:
            pulumi.set(__self__, "nonce", nonce)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_custom_sign_string is not None:
            pulumi.set(__self__, "use_custom_sign_string", use_custom_sign_string)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accessKeyEncryptedStorage")
    def access_key_encrypted_storage(self) -> Optional[bool]:
        return pulumi.get(self, "access_key_encrypted_storage")

    @access_key_encrypted_storage.setter
    def access_key_encrypted_storage(self, value: Optional[bool]):
        pulumi.set(self, "access_key_encrypted_storage", value)

    @property
    @pulumi.getter(name="adcTitle")
    def adc_title(self) -> Optional[str]:
        return pulumi.get(self, "adc_title")

    @adc_title.setter
    def adc_title(self, value: Optional[str]):
        pulumi.set(self, "adc_title", value)

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> Optional[str]:
        return pulumi.get(self, "authentication_method")

    @authentication_method.setter
    def authentication_method(self, value: Optional[str]):
        pulumi.set(self, "authentication_method", value)

    @property
    @pulumi.getter(name="authenticationMethodTitle")
    def authentication_method_title(self) -> Optional[str]:
        return pulumi.get(self, "authentication_method_title")

    @authentication_method_title.setter
    def authentication_method_title(self, value: Optional[str]):
        pulumi.set(self, "authentication_method_title", value)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "aws_access_key_id")

    @aws_access_key_id.setter
    def aws_access_key_id(self, value: Optional[str]):
        pulumi.set(self, "aws_access_key_id", value)

    @property
    @pulumi.getter(name="awsAccessKeyVersionGuid")
    def aws_access_key_version_guid(self) -> Optional[str]:
        return pulumi.get(self, "aws_access_key_version_guid")

    @aws_access_key_version_guid.setter
    def aws_access_key_version_guid(self, value: Optional[str]):
        pulumi.set(self, "aws_access_key_version_guid", value)

    @property
    @pulumi.getter(name="awsHost")
    def aws_host(self) -> Optional[str]:
        return pulumi.get(self, "aws_host")

    @aws_host.setter
    def aws_host(self, value: Optional[str]):
        pulumi.set(self, "aws_host", value)

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[str]:
        return pulumi.get(self, "aws_region")

    @aws_region.setter
    def aws_region(self, value: Optional[str]):
        pulumi.set(self, "aws_region", value)

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "aws_secret_access_key")

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, value: Optional[str]):
        pulumi.set(self, "aws_secret_access_key", value)

    @property
    @pulumi.getter(name="awsService")
    def aws_service(self) -> Optional[str]:
        return pulumi.get(self, "aws_service")

    @aws_service.setter
    def aws_service(self, value: Optional[str]):
        pulumi.set(self, "aws_service", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="customSignStrings")
    def custom_sign_strings(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_sign_strings")

    @custom_sign_strings.setter
    def custom_sign_strings(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "custom_sign_strings", value)

    @property
    @pulumi.getter(name="directConnectGeo")
    def direct_connect_geo(self) -> Optional[str]:
        return pulumi.get(self, "direct_connect_geo")

    @direct_connect_geo.setter
    def direct_connect_geo(self, value: Optional[str]):
        pulumi.set(self, "direct_connect_geo", value)

    @property
    @pulumi.getter(name="encodingVersion")
    def encoding_version(self) -> Optional[int]:
        return pulumi.get(self, "encoding_version")

    @encoding_version.setter
    def encoding_version(self, value: Optional[int]):
        pulumi.set(self, "encoding_version", value)

    @property
    @pulumi.getter(name="gcsAccessKeyVersionGuid")
    def gcs_access_key_version_guid(self) -> Optional[str]:
        return pulumi.get(self, "gcs_access_key_version_guid")

    @gcs_access_key_version_guid.setter
    def gcs_access_key_version_guid(self, value: Optional[str]):
        pulumi.set(self, "gcs_access_key_version_guid", value)

    @property
    @pulumi.getter(name="gcsHmacKeyAccessId")
    def gcs_hmac_key_access_id(self) -> Optional[str]:
        return pulumi.get(self, "gcs_hmac_key_access_id")

    @gcs_hmac_key_access_id.setter
    def gcs_hmac_key_access_id(self, value: Optional[str]):
        pulumi.set(self, "gcs_hmac_key_access_id", value)

    @property
    @pulumi.getter(name="gcsHmacKeySecret")
    def gcs_hmac_key_secret(self) -> Optional[str]:
        return pulumi.get(self, "gcs_hmac_key_secret")

    @gcs_hmac_key_secret.setter
    def gcs_hmac_key_secret(self, value: Optional[str]):
        pulumi.set(self, "gcs_hmac_key_secret", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def mslkey(self) -> Optional[str]:
        return pulumi.get(self, "mslkey")

    @mslkey.setter
    def mslkey(self, value: Optional[str]):
        pulumi.set(self, "mslkey", value)

    @property
    @pulumi.getter
    def mslname(self) -> Optional[str]:
        return pulumi.get(self, "mslname")

    @mslname.setter
    def mslname(self, value: Optional[str]):
        pulumi.set(self, "mslname", value)

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @nonce.setter
    def nonce(self, value: Optional[str]):
        pulumi.set(self, "nonce", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useCustomSignString")
    def use_custom_sign_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_custom_sign_string")

    @use_custom_sign_string.setter
    def use_custom_sign_string(self, value: Optional[bool]):
        pulumi.set(self, "use_custom_sign_string", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsWsdArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origintype: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origintype is not None:
            pulumi.set(__self__, "origintype", origintype)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def origintype(self) -> Optional[str]:
        return pulumi.get(self, "origintype")

    @origintype.setter
    def origintype(self, value: Optional[str]):
        pulumi.set(self, "origintype", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateArgs:
    def __init__(__self__, *,
                 pem_encoded_cert: Optional[str] = None,
                 sha1_fingerprint: Optional[str] = None):
        if pem_encoded_cert is not None:
            pulumi.set(__self__, "pem_encoded_cert", pem_encoded_cert)
        if sha1_fingerprint is not None:
            pulumi.set(__self__, "sha1_fingerprint", sha1_fingerprint)

    @property
    @pulumi.getter(name="pemEncodedCert")
    def pem_encoded_cert(self) -> Optional[str]:
        return pulumi.get(self, "pem_encoded_cert")

    @pem_encoded_cert.setter
    def pem_encoded_cert(self, value: Optional[str]):
        pulumi.set(self, "pem_encoded_cert", value)

    @property
    @pulumi.getter(name="sha1Fingerprint")
    def sha1_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "sha1_fingerprint")

    @sha1_fingerprint.setter
    def sha1_fingerprint(self, value: Optional[str]):
        pulumi.set(self, "sha1_fingerprint", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityArgs:
    def __init__(__self__, *,
                 pem_encoded_cert: Optional[str] = None,
                 sha1_fingerprint: Optional[str] = None):
        if pem_encoded_cert is not None:
            pulumi.set(__self__, "pem_encoded_cert", pem_encoded_cert)
        if sha1_fingerprint is not None:
            pulumi.set(__self__, "sha1_fingerprint", sha1_fingerprint)

    @property
    @pulumi.getter(name="pemEncodedCert")
    def pem_encoded_cert(self) -> Optional[str]:
        return pulumi.get(self, "pem_encoded_cert")

    @pem_encoded_cert.setter
    def pem_encoded_cert(self, value: Optional[str]):
        pulumi.set(self, "pem_encoded_cert", value)

    @property
    @pulumi.getter(name="sha1Fingerprint")
    def sha1_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "sha1_fingerprint")

    @sha1_fingerprint.setter
    def sha1_fingerprint(self, value: Optional[str]):
        pulumi.set(self, "sha1_fingerprint", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryMethodArgs:
    def __init__(__self__, *,
                 custom_status_code: Optional[str] = None,
                 locked: Optional[bool] = None,
                 recovery_method: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_status_code is not None:
            pulumi.set(__self__, "custom_status_code", custom_status_code)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if recovery_method is not None:
            pulumi.set(__self__, "recovery_method", recovery_method)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customStatusCode")
    def custom_status_code(self) -> Optional[str]:
        return pulumi.get(self, "custom_status_code")

    @custom_status_code.setter
    def custom_status_code(self, value: Optional[str]):
        pulumi.set(self, "custom_status_code", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="recoveryMethod")
    def recovery_method(self) -> Optional[str]:
        return pulumi.get(self, "recovery_method")

    @recovery_method.setter
    def recovery_method(self, value: Optional[str]):
        pulumi.set(self, "recovery_method", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryPolicyArgs:
    def __init__(__self__, *,
                 binary_equivalent_content: Optional[bool] = None,
                 enable_ip_avoidance: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 ip_avoidance_error_threshold: Optional[int] = None,
                 ip_avoidance_retry_interval: Optional[int] = None,
                 locked: Optional[bool] = None,
                 monitor_origin_responsiveness: Optional[bool] = None,
                 monitor_response_codes1s: Optional[Sequence[str]] = None,
                 monitor_response_codes2s: Optional[Sequence[str]] = None,
                 monitor_response_codes3s: Optional[Sequence[str]] = None,
                 monitor_status_codes1: Optional[bool] = None,
                 monitor_status_codes1_enable_recovery: Optional[bool] = None,
                 monitor_status_codes1_enable_retry: Optional[bool] = None,
                 monitor_status_codes1_recovery_config_name: Optional[str] = None,
                 monitor_status_codes2: Optional[bool] = None,
                 monitor_status_codes2_enable_recovery: Optional[bool] = None,
                 monitor_status_codes2_enable_retry: Optional[bool] = None,
                 monitor_status_codes2_recovery_config_name: Optional[str] = None,
                 monitor_status_codes3: Optional[bool] = None,
                 monitor_status_codes3_enable_recovery: Optional[bool] = None,
                 monitor_status_codes3_enable_retry: Optional[bool] = None,
                 monitor_status_codes3_recovery_config_name: Optional[str] = None,
                 origin_responsiveness_custom_timeout: Optional[int] = None,
                 origin_responsiveness_enable_recovery: Optional[bool] = None,
                 origin_responsiveness_enable_retry: Optional[bool] = None,
                 origin_responsiveness_monitoring: Optional[str] = None,
                 origin_responsiveness_recovery_config_name: Optional[str] = None,
                 origin_responsiveness_timeout: Optional[str] = None,
                 status_code_monitoring1: Optional[str] = None,
                 status_code_monitoring2: Optional[str] = None,
                 status_code_monitoring3: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tuning_parameters: Optional[str] = None,
                 uuid: Optional[str] = None):
        if binary_equivalent_content is not None:
            pulumi.set(__self__, "binary_equivalent_content", binary_equivalent_content)
        if enable_ip_avoidance is not None:
            pulumi.set(__self__, "enable_ip_avoidance", enable_ip_avoidance)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ip_avoidance_error_threshold is not None:
            pulumi.set(__self__, "ip_avoidance_error_threshold", ip_avoidance_error_threshold)
        if ip_avoidance_retry_interval is not None:
            pulumi.set(__self__, "ip_avoidance_retry_interval", ip_avoidance_retry_interval)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if monitor_origin_responsiveness is not None:
            pulumi.set(__self__, "monitor_origin_responsiveness", monitor_origin_responsiveness)
        if monitor_response_codes1s is not None:
            pulumi.set(__self__, "monitor_response_codes1s", monitor_response_codes1s)
        if monitor_response_codes2s is not None:
            pulumi.set(__self__, "monitor_response_codes2s", monitor_response_codes2s)
        if monitor_response_codes3s is not None:
            pulumi.set(__self__, "monitor_response_codes3s", monitor_response_codes3s)
        if monitor_status_codes1 is not None:
            pulumi.set(__self__, "monitor_status_codes1", monitor_status_codes1)
        if monitor_status_codes1_enable_recovery is not None:
            pulumi.set(__self__, "monitor_status_codes1_enable_recovery", monitor_status_codes1_enable_recovery)
        if monitor_status_codes1_enable_retry is not None:
            pulumi.set(__self__, "monitor_status_codes1_enable_retry", monitor_status_codes1_enable_retry)
        if monitor_status_codes1_recovery_config_name is not None:
            pulumi.set(__self__, "monitor_status_codes1_recovery_config_name", monitor_status_codes1_recovery_config_name)
        if monitor_status_codes2 is not None:
            pulumi.set(__self__, "monitor_status_codes2", monitor_status_codes2)
        if monitor_status_codes2_enable_recovery is not None:
            pulumi.set(__self__, "monitor_status_codes2_enable_recovery", monitor_status_codes2_enable_recovery)
        if monitor_status_codes2_enable_retry is not None:
            pulumi.set(__self__, "monitor_status_codes2_enable_retry", monitor_status_codes2_enable_retry)
        if monitor_status_codes2_recovery_config_name is not None:
            pulumi.set(__self__, "monitor_status_codes2_recovery_config_name", monitor_status_codes2_recovery_config_name)
        if monitor_status_codes3 is not None:
            pulumi.set(__self__, "monitor_status_codes3", monitor_status_codes3)
        if monitor_status_codes3_enable_recovery is not None:
            pulumi.set(__self__, "monitor_status_codes3_enable_recovery", monitor_status_codes3_enable_recovery)
        if monitor_status_codes3_enable_retry is not None:
            pulumi.set(__self__, "monitor_status_codes3_enable_retry", monitor_status_codes3_enable_retry)
        if monitor_status_codes3_recovery_config_name is not None:
            pulumi.set(__self__, "monitor_status_codes3_recovery_config_name", monitor_status_codes3_recovery_config_name)
        if origin_responsiveness_custom_timeout is not None:
            pulumi.set(__self__, "origin_responsiveness_custom_timeout", origin_responsiveness_custom_timeout)
        if origin_responsiveness_enable_recovery is not None:
            pulumi.set(__self__, "origin_responsiveness_enable_recovery", origin_responsiveness_enable_recovery)
        if origin_responsiveness_enable_retry is not None:
            pulumi.set(__self__, "origin_responsiveness_enable_retry", origin_responsiveness_enable_retry)
        if origin_responsiveness_monitoring is not None:
            pulumi.set(__self__, "origin_responsiveness_monitoring", origin_responsiveness_monitoring)
        if origin_responsiveness_recovery_config_name is not None:
            pulumi.set(__self__, "origin_responsiveness_recovery_config_name", origin_responsiveness_recovery_config_name)
        if origin_responsiveness_timeout is not None:
            pulumi.set(__self__, "origin_responsiveness_timeout", origin_responsiveness_timeout)
        if status_code_monitoring1 is not None:
            pulumi.set(__self__, "status_code_monitoring1", status_code_monitoring1)
        if status_code_monitoring2 is not None:
            pulumi.set(__self__, "status_code_monitoring2", status_code_monitoring2)
        if status_code_monitoring3 is not None:
            pulumi.set(__self__, "status_code_monitoring3", status_code_monitoring3)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tuning_parameters is not None:
            pulumi.set(__self__, "tuning_parameters", tuning_parameters)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="binaryEquivalentContent")
    def binary_equivalent_content(self) -> Optional[bool]:
        return pulumi.get(self, "binary_equivalent_content")

    @binary_equivalent_content.setter
    def binary_equivalent_content(self, value: Optional[bool]):
        pulumi.set(self, "binary_equivalent_content", value)

    @property
    @pulumi.getter(name="enableIpAvoidance")
    def enable_ip_avoidance(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_avoidance")

    @enable_ip_avoidance.setter
    def enable_ip_avoidance(self, value: Optional[bool]):
        pulumi.set(self, "enable_ip_avoidance", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ipAvoidanceErrorThreshold")
    def ip_avoidance_error_threshold(self) -> Optional[int]:
        return pulumi.get(self, "ip_avoidance_error_threshold")

    @ip_avoidance_error_threshold.setter
    def ip_avoidance_error_threshold(self, value: Optional[int]):
        pulumi.set(self, "ip_avoidance_error_threshold", value)

    @property
    @pulumi.getter(name="ipAvoidanceRetryInterval")
    def ip_avoidance_retry_interval(self) -> Optional[int]:
        return pulumi.get(self, "ip_avoidance_retry_interval")

    @ip_avoidance_retry_interval.setter
    def ip_avoidance_retry_interval(self, value: Optional[int]):
        pulumi.set(self, "ip_avoidance_retry_interval", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="monitorOriginResponsiveness")
    def monitor_origin_responsiveness(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_origin_responsiveness")

    @monitor_origin_responsiveness.setter
    def monitor_origin_responsiveness(self, value: Optional[bool]):
        pulumi.set(self, "monitor_origin_responsiveness", value)

    @property
    @pulumi.getter(name="monitorResponseCodes1s")
    def monitor_response_codes1s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes1s")

    @monitor_response_codes1s.setter
    def monitor_response_codes1s(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "monitor_response_codes1s", value)

    @property
    @pulumi.getter(name="monitorResponseCodes2s")
    def monitor_response_codes2s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes2s")

    @monitor_response_codes2s.setter
    def monitor_response_codes2s(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "monitor_response_codes2s", value)

    @property
    @pulumi.getter(name="monitorResponseCodes3s")
    def monitor_response_codes3s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes3s")

    @monitor_response_codes3s.setter
    def monitor_response_codes3s(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "monitor_response_codes3s", value)

    @property
    @pulumi.getter(name="monitorStatusCodes1")
    def monitor_status_codes1(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1")

    @monitor_status_codes1.setter
    def monitor_status_codes1(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes1", value)

    @property
    @pulumi.getter(name="monitorStatusCodes1EnableRecovery")
    def monitor_status_codes1_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1_enable_recovery")

    @monitor_status_codes1_enable_recovery.setter
    def monitor_status_codes1_enable_recovery(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes1_enable_recovery", value)

    @property
    @pulumi.getter(name="monitorStatusCodes1EnableRetry")
    def monitor_status_codes1_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1_enable_retry")

    @monitor_status_codes1_enable_retry.setter
    def monitor_status_codes1_enable_retry(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes1_enable_retry", value)

    @property
    @pulumi.getter(name="monitorStatusCodes1RecoveryConfigName")
    def monitor_status_codes1_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes1_recovery_config_name")

    @monitor_status_codes1_recovery_config_name.setter
    def monitor_status_codes1_recovery_config_name(self, value: Optional[str]):
        pulumi.set(self, "monitor_status_codes1_recovery_config_name", value)

    @property
    @pulumi.getter(name="monitorStatusCodes2")
    def monitor_status_codes2(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2")

    @monitor_status_codes2.setter
    def monitor_status_codes2(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes2", value)

    @property
    @pulumi.getter(name="monitorStatusCodes2EnableRecovery")
    def monitor_status_codes2_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2_enable_recovery")

    @monitor_status_codes2_enable_recovery.setter
    def monitor_status_codes2_enable_recovery(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes2_enable_recovery", value)

    @property
    @pulumi.getter(name="monitorStatusCodes2EnableRetry")
    def monitor_status_codes2_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2_enable_retry")

    @monitor_status_codes2_enable_retry.setter
    def monitor_status_codes2_enable_retry(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes2_enable_retry", value)

    @property
    @pulumi.getter(name="monitorStatusCodes2RecoveryConfigName")
    def monitor_status_codes2_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes2_recovery_config_name")

    @monitor_status_codes2_recovery_config_name.setter
    def monitor_status_codes2_recovery_config_name(self, value: Optional[str]):
        pulumi.set(self, "monitor_status_codes2_recovery_config_name", value)

    @property
    @pulumi.getter(name="monitorStatusCodes3")
    def monitor_status_codes3(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3")

    @monitor_status_codes3.setter
    def monitor_status_codes3(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes3", value)

    @property
    @pulumi.getter(name="monitorStatusCodes3EnableRecovery")
    def monitor_status_codes3_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3_enable_recovery")

    @monitor_status_codes3_enable_recovery.setter
    def monitor_status_codes3_enable_recovery(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes3_enable_recovery", value)

    @property
    @pulumi.getter(name="monitorStatusCodes3EnableRetry")
    def monitor_status_codes3_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3_enable_retry")

    @monitor_status_codes3_enable_retry.setter
    def monitor_status_codes3_enable_retry(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes3_enable_retry", value)

    @property
    @pulumi.getter(name="monitorStatusCodes3RecoveryConfigName")
    def monitor_status_codes3_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes3_recovery_config_name")

    @monitor_status_codes3_recovery_config_name.setter
    def monitor_status_codes3_recovery_config_name(self, value: Optional[str]):
        pulumi.set(self, "monitor_status_codes3_recovery_config_name", value)

    @property
    @pulumi.getter(name="originResponsivenessCustomTimeout")
    def origin_responsiveness_custom_timeout(self) -> Optional[int]:
        return pulumi.get(self, "origin_responsiveness_custom_timeout")

    @origin_responsiveness_custom_timeout.setter
    def origin_responsiveness_custom_timeout(self, value: Optional[int]):
        pulumi.set(self, "origin_responsiveness_custom_timeout", value)

    @property
    @pulumi.getter(name="originResponsivenessEnableRecovery")
    def origin_responsiveness_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "origin_responsiveness_enable_recovery")

    @origin_responsiveness_enable_recovery.setter
    def origin_responsiveness_enable_recovery(self, value: Optional[bool]):
        pulumi.set(self, "origin_responsiveness_enable_recovery", value)

    @property
    @pulumi.getter(name="originResponsivenessEnableRetry")
    def origin_responsiveness_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "origin_responsiveness_enable_retry")

    @origin_responsiveness_enable_retry.setter
    def origin_responsiveness_enable_retry(self, value: Optional[bool]):
        pulumi.set(self, "origin_responsiveness_enable_retry", value)

    @property
    @pulumi.getter(name="originResponsivenessMonitoring")
    def origin_responsiveness_monitoring(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_monitoring")

    @origin_responsiveness_monitoring.setter
    def origin_responsiveness_monitoring(self, value: Optional[str]):
        pulumi.set(self, "origin_responsiveness_monitoring", value)

    @property
    @pulumi.getter(name="originResponsivenessRecoveryConfigName")
    def origin_responsiveness_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_recovery_config_name")

    @origin_responsiveness_recovery_config_name.setter
    def origin_responsiveness_recovery_config_name(self, value: Optional[str]):
        pulumi.set(self, "origin_responsiveness_recovery_config_name", value)

    @property
    @pulumi.getter(name="originResponsivenessTimeout")
    def origin_responsiveness_timeout(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_timeout")

    @origin_responsiveness_timeout.setter
    def origin_responsiveness_timeout(self, value: Optional[str]):
        pulumi.set(self, "origin_responsiveness_timeout", value)

    @property
    @pulumi.getter(name="statusCodeMonitoring1")
    def status_code_monitoring1(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring1")

    @status_code_monitoring1.setter
    def status_code_monitoring1(self, value: Optional[str]):
        pulumi.set(self, "status_code_monitoring1", value)

    @property
    @pulumi.getter(name="statusCodeMonitoring2")
    def status_code_monitoring2(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring2")

    @status_code_monitoring2.setter
    def status_code_monitoring2(self, value: Optional[str]):
        pulumi.set(self, "status_code_monitoring2", value)

    @property
    @pulumi.getter(name="statusCodeMonitoring3")
    def status_code_monitoring3(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring3")

    @status_code_monitoring3.setter
    def status_code_monitoring3(self, value: Optional[str]):
        pulumi.set(self, "status_code_monitoring3", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="tuningParameters")
    def tuning_parameters(self) -> Optional[str]:
        return pulumi.get(self, "tuning_parameters")

    @tuning_parameters.setter
    def tuning_parameters(self, value: Optional[str]):
        pulumi.set(self, "tuning_parameters", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginIpAclArgs:
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[bool]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginNetStorageArgs:
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @cp_code.setter
    def cp_code(self, value: Optional[int]):
        pulumi.set(self, "cp_code", value)

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @download_domain_name.setter
    def download_domain_name(self, value: Optional[str]):
        pulumi.set(self, "download_domain_name", value)

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")

    @g2o_token.setter
    def g2o_token(self, value: Optional[str]):
        pulumi.set(self, "g2o_token", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPersistentClientConnectionArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[str]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPersistentConnectionArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[str]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPersonallyIdentifiableInformationArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseArgs:
    def __init__(__self__, *,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseCloudletPolicyArgs'] = None,
                 enabled: Optional[bool] = None,
                 failover_duration: Optional[int] = None,
                 failover_enabled: Optional[bool] = None,
                 failover_response_codes: Optional[Sequence[str]] = None,
                 failover_title: Optional[str] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 population_cookie_type: Optional[str] = None,
                 population_duration: Optional[str] = None,
                 population_expiration_date: Optional[str] = None,
                 population_refresh: Optional[bool] = None,
                 population_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failover_duration is not None:
            pulumi.set(__self__, "failover_duration", failover_duration)
        if failover_enabled is not None:
            pulumi.set(__self__, "failover_enabled", failover_enabled)
        if failover_response_codes is not None:
            pulumi.set(__self__, "failover_response_codes", failover_response_codes)
        if failover_title is not None:
            pulumi.set(__self__, "failover_title", failover_title)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if population_cookie_type is not None:
            pulumi.set(__self__, "population_cookie_type", population_cookie_type)
        if population_duration is not None:
            pulumi.set(__self__, "population_duration", population_duration)
        if population_expiration_date is not None:
            pulumi.set(__self__, "population_expiration_date", population_expiration_date)
        if population_refresh is not None:
            pulumi.set(__self__, "population_refresh", population_refresh)
        if population_title is not None:
            pulumi.set(__self__, "population_title", population_title)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="failoverDuration")
    def failover_duration(self) -> Optional[int]:
        return pulumi.get(self, "failover_duration")

    @failover_duration.setter
    def failover_duration(self, value: Optional[int]):
        pulumi.set(self, "failover_duration", value)

    @property
    @pulumi.getter(name="failoverEnabled")
    def failover_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "failover_enabled")

    @failover_enabled.setter
    def failover_enabled(self, value: Optional[bool]):
        pulumi.set(self, "failover_enabled", value)

    @property
    @pulumi.getter(name="failoverResponseCodes")
    def failover_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "failover_response_codes")

    @failover_response_codes.setter
    def failover_response_codes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "failover_response_codes", value)

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @failover_title.setter
    def failover_title(self, value: Optional[str]):
        pulumi.set(self, "failover_title", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="populationCookieType")
    def population_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_type")

    @population_cookie_type.setter
    def population_cookie_type(self, value: Optional[str]):
        pulumi.set(self, "population_cookie_type", value)

    @property
    @pulumi.getter(name="populationDuration")
    def population_duration(self) -> Optional[str]:
        return pulumi.get(self, "population_duration")

    @population_duration.setter
    def population_duration(self, value: Optional[str]):
        pulumi.set(self, "population_duration", value)

    @property
    @pulumi.getter(name="populationExpirationDate")
    def population_expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "population_expiration_date")

    @population_expiration_date.setter
    def population_expiration_date(self, value: Optional[str]):
        pulumi.set(self, "population_expiration_date", value)

    @property
    @pulumi.getter(name="populationRefresh")
    def population_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "population_refresh")

    @population_refresh.setter
    def population_refresh(self, value: Optional[bool]):
        pulumi.set(self, "population_refresh", value)

    @property
    @pulumi.getter(name="populationTitle")
    def population_title(self) -> Optional[str]:
        return pulumi.get(self, "population_title")

    @population_title.setter
    def population_title(self, value: Optional[str]):
        pulumi.set(self, "population_title", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPreconnectArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 preconnectlists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if preconnectlists is not None:
            pulumi.set(__self__, "preconnectlists", preconnectlists)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def preconnectlists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "preconnectlists")

    @preconnectlists.setter
    def preconnectlists(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "preconnectlists", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPredictiveContentDeliveryArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPredictivePrefetchingArgs:
    def __init__(__self__, *,
                 accuracy_target: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if accuracy_target is not None:
            pulumi.set(__self__, "accuracy_target", accuracy_target)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accuracyTarget")
    def accuracy_target(self) -> Optional[str]:
        return pulumi.get(self, "accuracy_target")

    @accuracy_target.setter
    def accuracy_target(self, value: Optional[str]):
        pulumi.set(self, "accuracy_target", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchableArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPrefreshCacheArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 prefreshval: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if prefreshval is not None:
            pulumi.set(__self__, "prefreshval", prefreshval)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def prefreshval(self) -> Optional[int]:
        return pulumi.get(self, "prefreshval")

    @prefreshval.setter
    def prefreshval(self, value: Optional[int]):
        pulumi.set(self, "prefreshval", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorQualityArgs:
    def __init__(__self__, *,
                 audience_settings: Optional[str] = None,
                 catalog_size: Optional[str] = None,
                 content_settings: Optional[str] = None,
                 content_type: Optional[str] = None,
                 country: Optional[str] = None,
                 delivery_format: Optional[str] = None,
                 delivery_type: Optional[str] = None,
                 download_type: Optional[str] = None,
                 end_user_location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 maximum_concurrent_users: Optional[str] = None,
                 object_size: Optional[str] = None,
                 optimize_for: Optional[str] = None,
                 origin_settings: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 refresh_rate: Optional[str] = None,
                 segment_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if audience_settings is not None:
            pulumi.set(__self__, "audience_settings", audience_settings)
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_settings is not None:
            pulumi.set(__self__, "content_settings", content_settings)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if delivery_format is not None:
            pulumi.set(__self__, "delivery_format", delivery_format)
        if delivery_type is not None:
            pulumi.set(__self__, "delivery_type", delivery_type)
        if download_type is not None:
            pulumi.set(__self__, "download_type", download_type)
        if end_user_location is not None:
            pulumi.set(__self__, "end_user_location", end_user_location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_concurrent_users is not None:
            pulumi.set(__self__, "maximum_concurrent_users", maximum_concurrent_users)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if optimize_for is not None:
            pulumi.set(__self__, "optimize_for", optimize_for)
        if origin_settings is not None:
            pulumi.set(__self__, "origin_settings", origin_settings)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if segment_duration is not None:
            pulumi.set(__self__, "segment_duration", segment_duration)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="audienceSettings")
    def audience_settings(self) -> Optional[str]:
        return pulumi.get(self, "audience_settings")

    @audience_settings.setter
    def audience_settings(self, value: Optional[str]):
        pulumi.set(self, "audience_settings", value)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @catalog_size.setter
    def catalog_size(self, value: Optional[str]):
        pulumi.set(self, "catalog_size", value)

    @property
    @pulumi.getter(name="contentSettings")
    def content_settings(self) -> Optional[str]:
        return pulumi.get(self, "content_settings")

    @content_settings.setter
    def content_settings(self, value: Optional[str]):
        pulumi.set(self, "content_settings", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="deliveryFormat")
    def delivery_format(self) -> Optional[str]:
        return pulumi.get(self, "delivery_format")

    @delivery_format.setter
    def delivery_format(self, value: Optional[str]):
        pulumi.set(self, "delivery_format", value)

    @property
    @pulumi.getter(name="deliveryType")
    def delivery_type(self) -> Optional[str]:
        return pulumi.get(self, "delivery_type")

    @delivery_type.setter
    def delivery_type(self, value: Optional[str]):
        pulumi.set(self, "delivery_type", value)

    @property
    @pulumi.getter(name="downloadType")
    def download_type(self) -> Optional[str]:
        return pulumi.get(self, "download_type")

    @download_type.setter
    def download_type(self, value: Optional[str]):
        pulumi.set(self, "download_type", value)

    @property
    @pulumi.getter(name="endUserLocation")
    def end_user_location(self) -> Optional[str]:
        return pulumi.get(self, "end_user_location")

    @end_user_location.setter
    def end_user_location(self, value: Optional[str]):
        pulumi.set(self, "end_user_location", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="maximumConcurrentUsers")
    def maximum_concurrent_users(self) -> Optional[str]:
        return pulumi.get(self, "maximum_concurrent_users")

    @maximum_concurrent_users.setter
    def maximum_concurrent_users(self, value: Optional[str]):
        pulumi.set(self, "maximum_concurrent_users", value)

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @object_size.setter
    def object_size(self, value: Optional[str]):
        pulumi.set(self, "object_size", value)

    @property
    @pulumi.getter(name="optimizeFor")
    def optimize_for(self) -> Optional[str]:
        return pulumi.get(self, "optimize_for")

    @optimize_for.setter
    def optimize_for(self, value: Optional[str]):
        pulumi.set(self, "optimize_for", value)

    @property
    @pulumi.getter(name="originSettings")
    def origin_settings(self) -> Optional[str]:
        return pulumi.get(self, "origin_settings")

    @origin_settings.setter
    def origin_settings(self, value: Optional[str]):
        pulumi.set(self, "origin_settings", value)

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @popularity_distribution.setter
    def popularity_distribution(self, value: Optional[str]):
        pulumi.set(self, "popularity_distribution", value)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[str]:
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[str]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter(name="segmentDuration")
    def segment_duration(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration")

    @segment_duration.setter
    def segment_duration(self, value: Optional[int]):
        pulumi.set(self, "segment_duration", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorQuicBetaArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 quic_offer_percentage: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if quic_offer_percentage is not None:
            pulumi.set(__self__, "quic_offer_percentage", quic_offer_percentage)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="quicOfferPercentage")
    def quic_offer_percentage(self) -> Optional[int]:
        return pulumi.get(self, "quic_offer_percentage")

    @quic_offer_percentage.setter
    def quic_offer_percentage(self, value: Optional[int]):
        pulumi.set(self, "quic_offer_percentage", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRandomSeekArgs:
    def __init__(__self__, *,
                 flv: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 mp4: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if flv is not None:
            pulumi.set(__self__, "flv", flv)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_size is not None:
            pulumi.set(__self__, "maximum_size", maximum_size)
        if mp4 is not None:
            pulumi.set(__self__, "mp4", mp4)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def flv(self) -> Optional[bool]:
        return pulumi.get(self, "flv")

    @flv.setter
    def flv(self, value: Optional[bool]):
        pulumi.set(self, "flv", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @maximum_size.setter
    def maximum_size(self, value: Optional[str]):
        pulumi.set(self, "maximum_size", value)

    @property
    @pulumi.getter
    def mp4(self) -> Optional[bool]:
        return pulumi.get(self, "mp4")

    @mp4.setter
    def mp4(self, value: Optional[bool]):
        pulumi.set(self, "mp4", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRapidArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorReadTimeoutArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRealTimeReportingArgs:
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 beacon_sampling_percentage: Optional[float] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if beacon_sampling_percentage is not None:
            pulumi.set(__self__, "beacon_sampling_percentage", beacon_sampling_percentage)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[bool]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter(name="beaconSamplingPercentage")
    def beacon_sampling_percentage(self) -> Optional[float]:
        return pulumi.get(self, "beacon_sampling_percentage")

    @beacon_sampling_percentage.setter
    def beacon_sampling_percentage(self, value: Optional[float]):
        pulumi.set(self, "beacon_sampling_percentage", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRealUserMonitoringArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRedirectArgs:
    def __init__(__self__, *,
                 destination_hostname: Optional[str] = None,
                 destination_hostname_other: Optional[str] = None,
                 destination_hostname_sibling: Optional[str] = None,
                 destination_hostname_subdomain: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 destination_path_other: Optional[str] = None,
                 destination_path_prefix: Optional[str] = None,
                 destination_path_suffix: Optional[str] = None,
                 destination_path_suffix_status: Optional[str] = None,
                 destination_protocol: Optional[str] = None,
                 locked: Optional[bool] = None,
                 mobile_default_choice: Optional[str] = None,
                 query_string: Optional[str] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if destination_hostname is not None:
            pulumi.set(__self__, "destination_hostname", destination_hostname)
        if destination_hostname_other is not None:
            pulumi.set(__self__, "destination_hostname_other", destination_hostname_other)
        if destination_hostname_sibling is not None:
            pulumi.set(__self__, "destination_hostname_sibling", destination_hostname_sibling)
        if destination_hostname_subdomain is not None:
            pulumi.set(__self__, "destination_hostname_subdomain", destination_hostname_subdomain)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if destination_path_other is not None:
            pulumi.set(__self__, "destination_path_other", destination_path_other)
        if destination_path_prefix is not None:
            pulumi.set(__self__, "destination_path_prefix", destination_path_prefix)
        if destination_path_suffix is not None:
            pulumi.set(__self__, "destination_path_suffix", destination_path_suffix)
        if destination_path_suffix_status is not None:
            pulumi.set(__self__, "destination_path_suffix_status", destination_path_suffix_status)
        if destination_protocol is not None:
            pulumi.set(__self__, "destination_protocol", destination_protocol)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if mobile_default_choice is not None:
            pulumi.set(__self__, "mobile_default_choice", mobile_default_choice)
        if query_string is not None:
            pulumi.set(__self__, "query_string", query_string)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="destinationHostname")
    def destination_hostname(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname")

    @destination_hostname.setter
    def destination_hostname(self, value: Optional[str]):
        pulumi.set(self, "destination_hostname", value)

    @property
    @pulumi.getter(name="destinationHostnameOther")
    def destination_hostname_other(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_other")

    @destination_hostname_other.setter
    def destination_hostname_other(self, value: Optional[str]):
        pulumi.set(self, "destination_hostname_other", value)

    @property
    @pulumi.getter(name="destinationHostnameSibling")
    def destination_hostname_sibling(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_sibling")

    @destination_hostname_sibling.setter
    def destination_hostname_sibling(self, value: Optional[str]):
        pulumi.set(self, "destination_hostname_sibling", value)

    @property
    @pulumi.getter(name="destinationHostnameSubdomain")
    def destination_hostname_subdomain(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_subdomain")

    @destination_hostname_subdomain.setter
    def destination_hostname_subdomain(self, value: Optional[str]):
        pulumi.set(self, "destination_hostname_subdomain", value)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @destination_path.setter
    def destination_path(self, value: Optional[str]):
        pulumi.set(self, "destination_path", value)

    @property
    @pulumi.getter(name="destinationPathOther")
    def destination_path_other(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_other")

    @destination_path_other.setter
    def destination_path_other(self, value: Optional[str]):
        pulumi.set(self, "destination_path_other", value)

    @property
    @pulumi.getter(name="destinationPathPrefix")
    def destination_path_prefix(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_prefix")

    @destination_path_prefix.setter
    def destination_path_prefix(self, value: Optional[str]):
        pulumi.set(self, "destination_path_prefix", value)

    @property
    @pulumi.getter(name="destinationPathSuffix")
    def destination_path_suffix(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_suffix")

    @destination_path_suffix.setter
    def destination_path_suffix(self, value: Optional[str]):
        pulumi.set(self, "destination_path_suffix", value)

    @property
    @pulumi.getter(name="destinationPathSuffixStatus")
    def destination_path_suffix_status(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_suffix_status")

    @destination_path_suffix_status.setter
    def destination_path_suffix_status(self, value: Optional[str]):
        pulumi.set(self, "destination_path_suffix_status", value)

    @property
    @pulumi.getter(name="destinationProtocol")
    def destination_protocol(self) -> Optional[str]:
        return pulumi.get(self, "destination_protocol")

    @destination_protocol.setter
    def destination_protocol(self, value: Optional[str]):
        pulumi.set(self, "destination_protocol", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="mobileDefaultChoice")
    def mobile_default_choice(self) -> Optional[str]:
        return pulumi.get(self, "mobile_default_choice")

    @mobile_default_choice.setter
    def mobile_default_choice(self, value: Optional[str]):
        pulumi.set(self, "mobile_default_choice", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[str]:
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: Optional[str]):
        pulumi.set(self, "query_string", value)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: Optional[int]):
        pulumi.set(self, "response_code", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRedirectplusArgs:
    def __init__(__self__, *,
                 destination: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[str]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: Optional[int]):
        pulumi.set(self, "response_code", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRefererCheckingArgs:
    def __init__(__self__, *,
                 allow_children: Optional[bool] = None,
                 domains: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 strict: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_children is not None:
            pulumi.set(__self__, "allow_children", allow_children)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if strict is not None:
            pulumi.set(__self__, "strict", strict)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowChildren")
    def allow_children(self) -> Optional[bool]:
        return pulumi.get(self, "allow_children")

    @allow_children.setter
    def allow_children(self, value: Optional[bool]):
        pulumi.set(self, "allow_children", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def strict(self) -> Optional[bool]:
        return pulumi.get(self, "strict")

    @strict.setter
    def strict(self, value: Optional[bool]):
        pulumi.set(self, "strict", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRemoveQueryParameterArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 parameters: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRemoveVaryArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorReportArgs:
    def __init__(__self__, *,
                 cookies: Optional[Sequence[str]] = None,
                 custom_log_field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 log_accept_language: Optional[bool] = None,
                 log_cookies: Optional[str] = None,
                 log_custom_log_field: Optional[bool] = None,
                 log_edge_ip: Optional[bool] = None,
                 log_host: Optional[bool] = None,
                 log_referer: Optional[bool] = None,
                 log_user_agent: Optional[bool] = None,
                 log_x_forwarded_for: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cookies is not None:
            pulumi.set(__self__, "cookies", cookies)
        if custom_log_field is not None:
            pulumi.set(__self__, "custom_log_field", custom_log_field)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if log_accept_language is not None:
            pulumi.set(__self__, "log_accept_language", log_accept_language)
        if log_cookies is not None:
            pulumi.set(__self__, "log_cookies", log_cookies)
        if log_custom_log_field is not None:
            pulumi.set(__self__, "log_custom_log_field", log_custom_log_field)
        if log_edge_ip is not None:
            pulumi.set(__self__, "log_edge_ip", log_edge_ip)
        if log_host is not None:
            pulumi.set(__self__, "log_host", log_host)
        if log_referer is not None:
            pulumi.set(__self__, "log_referer", log_referer)
        if log_user_agent is not None:
            pulumi.set(__self__, "log_user_agent", log_user_agent)
        if log_x_forwarded_for is not None:
            pulumi.set(__self__, "log_x_forwarded_for", log_x_forwarded_for)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def cookies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cookies")

    @cookies.setter
    def cookies(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "cookies", value)

    @property
    @pulumi.getter(name="customLogField")
    def custom_log_field(self) -> Optional[str]:
        return pulumi.get(self, "custom_log_field")

    @custom_log_field.setter
    def custom_log_field(self, value: Optional[str]):
        pulumi.set(self, "custom_log_field", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="logAcceptLanguage")
    def log_accept_language(self) -> Optional[bool]:
        return pulumi.get(self, "log_accept_language")

    @log_accept_language.setter
    def log_accept_language(self, value: Optional[bool]):
        pulumi.set(self, "log_accept_language", value)

    @property
    @pulumi.getter(name="logCookies")
    def log_cookies(self) -> Optional[str]:
        return pulumi.get(self, "log_cookies")

    @log_cookies.setter
    def log_cookies(self, value: Optional[str]):
        pulumi.set(self, "log_cookies", value)

    @property
    @pulumi.getter(name="logCustomLogField")
    def log_custom_log_field(self) -> Optional[bool]:
        return pulumi.get(self, "log_custom_log_field")

    @log_custom_log_field.setter
    def log_custom_log_field(self, value: Optional[bool]):
        pulumi.set(self, "log_custom_log_field", value)

    @property
    @pulumi.getter(name="logEdgeIp")
    def log_edge_ip(self) -> Optional[bool]:
        return pulumi.get(self, "log_edge_ip")

    @log_edge_ip.setter
    def log_edge_ip(self, value: Optional[bool]):
        pulumi.set(self, "log_edge_ip", value)

    @property
    @pulumi.getter(name="logHost")
    def log_host(self) -> Optional[bool]:
        return pulumi.get(self, "log_host")

    @log_host.setter
    def log_host(self, value: Optional[bool]):
        pulumi.set(self, "log_host", value)

    @property
    @pulumi.getter(name="logReferer")
    def log_referer(self) -> Optional[bool]:
        return pulumi.get(self, "log_referer")

    @log_referer.setter
    def log_referer(self, value: Optional[bool]):
        pulumi.set(self, "log_referer", value)

    @property
    @pulumi.getter(name="logUserAgent")
    def log_user_agent(self) -> Optional[bool]:
        return pulumi.get(self, "log_user_agent")

    @log_user_agent.setter
    def log_user_agent(self, value: Optional[bool]):
        pulumi.set(self, "log_user_agent", value)

    @property
    @pulumi.getter(name="logXForwardedFor")
    def log_x_forwarded_for(self) -> Optional[bool]:
        return pulumi.get(self, "log_x_forwarded_for")

    @log_x_forwarded_for.setter
    def log_x_forwarded_for(self, value: Optional[bool]):
        pulumi.set(self, "log_x_forwarded_for", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlArgs:
    def __init__(__self__, *,
                 branded403_file: Optional[str] = None,
                 branded403_status_code: Optional[int] = None,
                 branded403_url: Optional[str] = None,
                 branded_deny_cache_ttl: Optional[int] = None,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlCloudletPolicyArgs'] = None,
                 enable_branded403: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 net_storage: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlNetStorageArgs'] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if branded403_file is not None:
            pulumi.set(__self__, "branded403_file", branded403_file)
        if branded403_status_code is not None:
            pulumi.set(__self__, "branded403_status_code", branded403_status_code)
        if branded403_url is not None:
            pulumi.set(__self__, "branded403_url", branded403_url)
        if branded_deny_cache_ttl is not None:
            pulumi.set(__self__, "branded_deny_cache_ttl", branded_deny_cache_ttl)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enable_branded403 is not None:
            pulumi.set(__self__, "enable_branded403", enable_branded403)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if net_storage is not None:
            pulumi.set(__self__, "net_storage", net_storage)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="branded403File")
    def branded403_file(self) -> Optional[str]:
        return pulumi.get(self, "branded403_file")

    @branded403_file.setter
    def branded403_file(self, value: Optional[str]):
        pulumi.set(self, "branded403_file", value)

    @property
    @pulumi.getter(name="branded403StatusCode")
    def branded403_status_code(self) -> Optional[int]:
        return pulumi.get(self, "branded403_status_code")

    @branded403_status_code.setter
    def branded403_status_code(self, value: Optional[int]):
        pulumi.set(self, "branded403_status_code", value)

    @property
    @pulumi.getter(name="branded403Url")
    def branded403_url(self) -> Optional[str]:
        return pulumi.get(self, "branded403_url")

    @branded403_url.setter
    def branded403_url(self, value: Optional[str]):
        pulumi.set(self, "branded403_url", value)

    @property
    @pulumi.getter(name="brandedDenyCacheTtl")
    def branded_deny_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "branded_deny_cache_ttl")

    @branded_deny_cache_ttl.setter
    def branded_deny_cache_ttl(self, value: Optional[int]):
        pulumi.set(self, "branded_deny_cache_ttl", value)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter(name="enableBranded403")
    def enable_branded403(self) -> Optional[bool]:
        return pulumi.get(self, "enable_branded403")

    @enable_branded403.setter
    def enable_branded403(self, value: Optional[bool]):
        pulumi.set(self, "enable_branded403", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlNetStorageArgs']:
        return pulumi.get(self, "net_storage")

    @net_storage.setter
    def net_storage(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlNetStorageArgs']):
        pulumi.set(self, "net_storage", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlNetStorageArgs:
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @cp_code.setter
    def cp_code(self, value: Optional[int]):
        pulumi.set(self, "cp_code", value)

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @download_domain_name.setter
    def download_domain_name(self, value: Optional[str]):
        pulumi.set(self, "download_domain_name", value)

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")

    @g2o_token.setter
    def g2o_token(self, value: Optional[str]):
        pulumi.set(self, "g2o_token", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRequestTypeMarkerArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 request_type: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[str]:
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: Optional[str]):
        pulumi.set(self, "request_type", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerExtendedCompatibilityArgs:
    def __init__(__self__, *,
                 enable_all_features: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable_all_features is not None:
            pulumi.set(__self__, "enable_all_features", enable_all_features)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="enableAllFeatures")
    def enable_all_features(self) -> Optional[bool]:
        return pulumi.get(self, "enable_all_features")

    @enable_all_features.setter
    def enable_all_features(self, value: Optional[bool]):
        pulumi.set(self, "enable_all_features", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorResponseCodeArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 override206: Optional[bool] = None,
                 status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if override206 is not None:
            pulumi.set(__self__, "override206", override206)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def override206(self) -> Optional[bool]:
        return pulumi.get(self, "override206")

    @override206.setter
    def override206(self, value: Optional[bool]):
        pulumi.set(self, "override206", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[int]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorResponseCookieArgs:
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 default_domain: Optional[bool] = None,
                 default_path: Optional[bool] = None,
                 domain: Optional[str] = None,
                 duration: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 expiration_date: Optional[str] = None,
                 expires: Optional[str] = None,
                 format: Optional[str] = None,
                 http_only: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 path: Optional[str] = None,
                 same_site: Optional[str] = None,
                 secure: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if default_domain is not None:
            pulumi.set(__self__, "default_domain", default_domain)
        if default_path is not None:
            pulumi.set(__self__, "default_path", default_path)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if expires is not None:
            pulumi.set(__self__, "expires", expires)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if http_only is not None:
            pulumi.set(__self__, "http_only", http_only)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if same_site is not None:
            pulumi.set(__self__, "same_site", same_site)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[str]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter(name="defaultDomain")
    def default_domain(self) -> Optional[bool]:
        return pulumi.get(self, "default_domain")

    @default_domain.setter
    def default_domain(self, value: Optional[bool]):
        pulumi.set(self, "default_domain", value)

    @property
    @pulumi.getter(name="defaultPath")
    def default_path(self) -> Optional[bool]:
        return pulumi.get(self, "default_path")

    @default_path.setter
    def default_path(self, value: Optional[bool]):
        pulumi.set(self, "default_path", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[str]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "expiration_date")

    @expiration_date.setter
    def expiration_date(self, value: Optional[str]):
        pulumi.set(self, "expiration_date", value)

    @property
    @pulumi.getter
    def expires(self) -> Optional[str]:
        return pulumi.get(self, "expires")

    @expires.setter
    def expires(self, value: Optional[str]):
        pulumi.set(self, "expires", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="httpOnly")
    def http_only(self) -> Optional[bool]:
        return pulumi.get(self, "http_only")

    @http_only.setter
    def http_only(self, value: Optional[bool]):
        pulumi.set(self, "http_only", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="sameSite")
    def same_site(self) -> Optional[str]:
        return pulumi.get(self, "same_site")

    @same_site.setter
    def same_site(self, value: Optional[str]):
        pulumi.set(self, "same_site", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[bool]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRestrictObjectCachingArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_size is not None:
            pulumi.set(__self__, "maximum_size", maximum_size)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @maximum_size.setter
    def maximum_size(self, value: Optional[str]):
        pulumi.set(self, "maximum_size", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorReturnCacheStatusArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 response_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if response_header_name is not None:
            pulumi.set(__self__, "response_header_name", response_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="responseHeaderName")
    def response_header_name(self) -> Optional[str]:
        return pulumi.get(self, "response_header_name")

    @response_header_name.setter
    def response_header_name(self, value: Optional[str]):
        pulumi.set(self, "response_header_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRewriteUrlArgs:
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 keep_query_string: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match: Optional[str] = None,
                 match_multiple: Optional[bool] = None,
                 match_regex: Optional[str] = None,
                 target_path: Optional[str] = None,
                 target_path_prepend: Optional[str] = None,
                 target_regex: Optional[str] = None,
                 target_url: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if keep_query_string is not None:
            pulumi.set(__self__, "keep_query_string", keep_query_string)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if match_multiple is not None:
            pulumi.set(__self__, "match_multiple", match_multiple)
        if match_regex is not None:
            pulumi.set(__self__, "match_regex", match_regex)
        if target_path is not None:
            pulumi.set(__self__, "target_path", target_path)
        if target_path_prepend is not None:
            pulumi.set(__self__, "target_path_prepend", target_path_prepend)
        if target_regex is not None:
            pulumi.set(__self__, "target_regex", target_regex)
        if target_url is not None:
            pulumi.set(__self__, "target_url", target_url)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[str]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter(name="keepQueryString")
    def keep_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "keep_query_string")

    @keep_query_string.setter
    def keep_query_string(self, value: Optional[bool]):
        pulumi.set(self, "keep_query_string", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[str]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @match_multiple.setter
    def match_multiple(self, value: Optional[bool]):
        pulumi.set(self, "match_multiple", value)

    @property
    @pulumi.getter(name="matchRegex")
    def match_regex(self) -> Optional[str]:
        return pulumi.get(self, "match_regex")

    @match_regex.setter
    def match_regex(self, value: Optional[str]):
        pulumi.set(self, "match_regex", value)

    @property
    @pulumi.getter(name="targetPath")
    def target_path(self) -> Optional[str]:
        return pulumi.get(self, "target_path")

    @target_path.setter
    def target_path(self, value: Optional[str]):
        pulumi.set(self, "target_path", value)

    @property
    @pulumi.getter(name="targetPathPrepend")
    def target_path_prepend(self) -> Optional[str]:
        return pulumi.get(self, "target_path_prepend")

    @target_path_prepend.setter
    def target_path_prepend(self, value: Optional[str]):
        pulumi.set(self, "target_path_prepend", value)

    @property
    @pulumi.getter(name="targetRegex")
    def target_regex(self) -> Optional[str]:
        return pulumi.get(self, "target_regex")

    @target_regex.setter
    def target_regex(self, value: Optional[str]):
        pulumi.set(self, "target_regex", value)

    @property
    @pulumi.getter(name="targetUrl")
    def target_url(self) -> Optional[str]:
        return pulumi.get(self, "target_url")

    @target_url.setter
    def target_url(self, value: Optional[str]):
        pulumi.set(self, "target_url", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRumCustomArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 rum_group_name: Optional[str] = None,
                 rum_sample_rate: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if rum_group_name is not None:
            pulumi.set(__self__, "rum_group_name", rum_group_name)
        if rum_sample_rate is not None:
            pulumi.set(__self__, "rum_sample_rate", rum_sample_rate)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="rumGroupName")
    def rum_group_name(self) -> Optional[str]:
        return pulumi.get(self, "rum_group_name")

    @rum_group_name.setter
    def rum_group_name(self, value: Optional[str]):
        pulumi.set(self, "rum_group_name", value)

    @property
    @pulumi.getter(name="rumSampleRate")
    def rum_sample_rate(self) -> Optional[int]:
        return pulumi.get(self, "rum_sample_rate")

    @rum_sample_rate.setter
    def rum_sample_rate(self, value: Optional[int]):
        pulumi.set(self, "rum_sample_rate", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSaasDefinitionsArgs:
    def __init__(__self__, *,
                 application_action: Optional[str] = None,
                 application_cname_enabled: Optional[bool] = None,
                 application_cname_level: Optional[int] = None,
                 application_cookie: Optional[str] = None,
                 application_query_string: Optional[str] = None,
                 application_regex: Optional[str] = None,
                 application_replace: Optional[str] = None,
                 application_title: Optional[str] = None,
                 customer_action: Optional[str] = None,
                 customer_cname_enabled: Optional[bool] = None,
                 customer_cname_level: Optional[int] = None,
                 customer_cookie: Optional[str] = None,
                 customer_query_string: Optional[str] = None,
                 customer_regex: Optional[str] = None,
                 customer_replace: Optional[str] = None,
                 customer_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 users_action: Optional[str] = None,
                 users_cname_enabled: Optional[bool] = None,
                 users_cname_level: Optional[int] = None,
                 users_cookie: Optional[str] = None,
                 users_query_string: Optional[str] = None,
                 users_regex: Optional[str] = None,
                 users_replace: Optional[str] = None,
                 users_title: Optional[str] = None,
                 uuid: Optional[str] = None):
        if application_action is not None:
            pulumi.set(__self__, "application_action", application_action)
        if application_cname_enabled is not None:
            pulumi.set(__self__, "application_cname_enabled", application_cname_enabled)
        if application_cname_level is not None:
            pulumi.set(__self__, "application_cname_level", application_cname_level)
        if application_cookie is not None:
            pulumi.set(__self__, "application_cookie", application_cookie)
        if application_query_string is not None:
            pulumi.set(__self__, "application_query_string", application_query_string)
        if application_regex is not None:
            pulumi.set(__self__, "application_regex", application_regex)
        if application_replace is not None:
            pulumi.set(__self__, "application_replace", application_replace)
        if application_title is not None:
            pulumi.set(__self__, "application_title", application_title)
        if customer_action is not None:
            pulumi.set(__self__, "customer_action", customer_action)
        if customer_cname_enabled is not None:
            pulumi.set(__self__, "customer_cname_enabled", customer_cname_enabled)
        if customer_cname_level is not None:
            pulumi.set(__self__, "customer_cname_level", customer_cname_level)
        if customer_cookie is not None:
            pulumi.set(__self__, "customer_cookie", customer_cookie)
        if customer_query_string is not None:
            pulumi.set(__self__, "customer_query_string", customer_query_string)
        if customer_regex is not None:
            pulumi.set(__self__, "customer_regex", customer_regex)
        if customer_replace is not None:
            pulumi.set(__self__, "customer_replace", customer_replace)
        if customer_title is not None:
            pulumi.set(__self__, "customer_title", customer_title)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if users_action is not None:
            pulumi.set(__self__, "users_action", users_action)
        if users_cname_enabled is not None:
            pulumi.set(__self__, "users_cname_enabled", users_cname_enabled)
        if users_cname_level is not None:
            pulumi.set(__self__, "users_cname_level", users_cname_level)
        if users_cookie is not None:
            pulumi.set(__self__, "users_cookie", users_cookie)
        if users_query_string is not None:
            pulumi.set(__self__, "users_query_string", users_query_string)
        if users_regex is not None:
            pulumi.set(__self__, "users_regex", users_regex)
        if users_replace is not None:
            pulumi.set(__self__, "users_replace", users_replace)
        if users_title is not None:
            pulumi.set(__self__, "users_title", users_title)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="applicationAction")
    def application_action(self) -> Optional[str]:
        return pulumi.get(self, "application_action")

    @application_action.setter
    def application_action(self, value: Optional[str]):
        pulumi.set(self, "application_action", value)

    @property
    @pulumi.getter(name="applicationCnameEnabled")
    def application_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "application_cname_enabled")

    @application_cname_enabled.setter
    def application_cname_enabled(self, value: Optional[bool]):
        pulumi.set(self, "application_cname_enabled", value)

    @property
    @pulumi.getter(name="applicationCnameLevel")
    def application_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "application_cname_level")

    @application_cname_level.setter
    def application_cname_level(self, value: Optional[int]):
        pulumi.set(self, "application_cname_level", value)

    @property
    @pulumi.getter(name="applicationCookie")
    def application_cookie(self) -> Optional[str]:
        return pulumi.get(self, "application_cookie")

    @application_cookie.setter
    def application_cookie(self, value: Optional[str]):
        pulumi.set(self, "application_cookie", value)

    @property
    @pulumi.getter(name="applicationQueryString")
    def application_query_string(self) -> Optional[str]:
        return pulumi.get(self, "application_query_string")

    @application_query_string.setter
    def application_query_string(self, value: Optional[str]):
        pulumi.set(self, "application_query_string", value)

    @property
    @pulumi.getter(name="applicationRegex")
    def application_regex(self) -> Optional[str]:
        return pulumi.get(self, "application_regex")

    @application_regex.setter
    def application_regex(self, value: Optional[str]):
        pulumi.set(self, "application_regex", value)

    @property
    @pulumi.getter(name="applicationReplace")
    def application_replace(self) -> Optional[str]:
        return pulumi.get(self, "application_replace")

    @application_replace.setter
    def application_replace(self, value: Optional[str]):
        pulumi.set(self, "application_replace", value)

    @property
    @pulumi.getter(name="applicationTitle")
    def application_title(self) -> Optional[str]:
        return pulumi.get(self, "application_title")

    @application_title.setter
    def application_title(self, value: Optional[str]):
        pulumi.set(self, "application_title", value)

    @property
    @pulumi.getter(name="customerAction")
    def customer_action(self) -> Optional[str]:
        return pulumi.get(self, "customer_action")

    @customer_action.setter
    def customer_action(self, value: Optional[str]):
        pulumi.set(self, "customer_action", value)

    @property
    @pulumi.getter(name="customerCnameEnabled")
    def customer_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "customer_cname_enabled")

    @customer_cname_enabled.setter
    def customer_cname_enabled(self, value: Optional[bool]):
        pulumi.set(self, "customer_cname_enabled", value)

    @property
    @pulumi.getter(name="customerCnameLevel")
    def customer_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "customer_cname_level")

    @customer_cname_level.setter
    def customer_cname_level(self, value: Optional[int]):
        pulumi.set(self, "customer_cname_level", value)

    @property
    @pulumi.getter(name="customerCookie")
    def customer_cookie(self) -> Optional[str]:
        return pulumi.get(self, "customer_cookie")

    @customer_cookie.setter
    def customer_cookie(self, value: Optional[str]):
        pulumi.set(self, "customer_cookie", value)

    @property
    @pulumi.getter(name="customerQueryString")
    def customer_query_string(self) -> Optional[str]:
        return pulumi.get(self, "customer_query_string")

    @customer_query_string.setter
    def customer_query_string(self, value: Optional[str]):
        pulumi.set(self, "customer_query_string", value)

    @property
    @pulumi.getter(name="customerRegex")
    def customer_regex(self) -> Optional[str]:
        return pulumi.get(self, "customer_regex")

    @customer_regex.setter
    def customer_regex(self, value: Optional[str]):
        pulumi.set(self, "customer_regex", value)

    @property
    @pulumi.getter(name="customerReplace")
    def customer_replace(self) -> Optional[str]:
        return pulumi.get(self, "customer_replace")

    @customer_replace.setter
    def customer_replace(self, value: Optional[str]):
        pulumi.set(self, "customer_replace", value)

    @property
    @pulumi.getter(name="customerTitle")
    def customer_title(self) -> Optional[str]:
        return pulumi.get(self, "customer_title")

    @customer_title.setter
    def customer_title(self, value: Optional[str]):
        pulumi.set(self, "customer_title", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="usersAction")
    def users_action(self) -> Optional[str]:
        return pulumi.get(self, "users_action")

    @users_action.setter
    def users_action(self, value: Optional[str]):
        pulumi.set(self, "users_action", value)

    @property
    @pulumi.getter(name="usersCnameEnabled")
    def users_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "users_cname_enabled")

    @users_cname_enabled.setter
    def users_cname_enabled(self, value: Optional[bool]):
        pulumi.set(self, "users_cname_enabled", value)

    @property
    @pulumi.getter(name="usersCnameLevel")
    def users_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "users_cname_level")

    @users_cname_level.setter
    def users_cname_level(self, value: Optional[int]):
        pulumi.set(self, "users_cname_level", value)

    @property
    @pulumi.getter(name="usersCookie")
    def users_cookie(self) -> Optional[str]:
        return pulumi.get(self, "users_cookie")

    @users_cookie.setter
    def users_cookie(self, value: Optional[str]):
        pulumi.set(self, "users_cookie", value)

    @property
    @pulumi.getter(name="usersQueryString")
    def users_query_string(self) -> Optional[str]:
        return pulumi.get(self, "users_query_string")

    @users_query_string.setter
    def users_query_string(self, value: Optional[str]):
        pulumi.set(self, "users_query_string", value)

    @property
    @pulumi.getter(name="usersRegex")
    def users_regex(self) -> Optional[str]:
        return pulumi.get(self, "users_regex")

    @users_regex.setter
    def users_regex(self, value: Optional[str]):
        pulumi.set(self, "users_regex", value)

    @property
    @pulumi.getter(name="usersReplace")
    def users_replace(self) -> Optional[str]:
        return pulumi.get(self, "users_replace")

    @users_replace.setter
    def users_replace(self, value: Optional[str]):
        pulumi.set(self, "users_replace", value)

    @property
    @pulumi.getter(name="usersTitle")
    def users_title(self) -> Optional[str]:
        return pulumi.get(self, "users_title")

    @users_title.setter
    def users_title(self, value: Optional[str]):
        pulumi.set(self, "users_title", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudClientArgs:
    def __init__(__self__, *,
                 allow_override_origin_cache_key: Optional[bool] = None,
                 connector_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 origin_host_header: Optional[str] = None,
                 origin_type: Optional[str] = None,
                 sf3c_origin_host: Optional[str] = None,
                 sf3c_origin_host_header: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_override_origin_cache_key is not None:
            pulumi.set(__self__, "allow_override_origin_cache_key", allow_override_origin_cache_key)
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_host_header is not None:
            pulumi.set(__self__, "origin_host_header", origin_host_header)
        if origin_type is not None:
            pulumi.set(__self__, "origin_type", origin_type)
        if sf3c_origin_host is not None:
            pulumi.set(__self__, "sf3c_origin_host", sf3c_origin_host)
        if sf3c_origin_host_header is not None:
            pulumi.set(__self__, "sf3c_origin_host_header", sf3c_origin_host_header)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowOverrideOriginCacheKey")
    def allow_override_origin_cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "allow_override_origin_cache_key")

    @allow_override_origin_cache_key.setter
    def allow_override_origin_cache_key(self, value: Optional[bool]):
        pulumi.set(self, "allow_override_origin_cache_key", value)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[str]:
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: Optional[str]):
        pulumi.set(self, "connector_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="originHostHeader")
    def origin_host_header(self) -> Optional[str]:
        return pulumi.get(self, "origin_host_header")

    @origin_host_header.setter
    def origin_host_header(self, value: Optional[str]):
        pulumi.set(self, "origin_host_header", value)

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional[str]:
        return pulumi.get(self, "origin_type")

    @origin_type.setter
    def origin_type(self, value: Optional[str]):
        pulumi.set(self, "origin_type", value)

    @property
    @pulumi.getter(name="sf3cOriginHost")
    def sf3c_origin_host(self) -> Optional[str]:
        return pulumi.get(self, "sf3c_origin_host")

    @sf3c_origin_host.setter
    def sf3c_origin_host(self, value: Optional[str]):
        pulumi.set(self, "sf3c_origin_host", value)

    @property
    @pulumi.getter(name="sf3cOriginHostHeader")
    def sf3c_origin_host_header(self) -> Optional[str]:
        return pulumi.get(self, "sf3c_origin_host_header")

    @sf3c_origin_host_header.setter
    def sf3c_origin_host_header(self, value: Optional[str]):
        pulumi.set(self, "sf3c_origin_host_header", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderHostHeaderArgs:
    def __init__(__self__, *,
                 host_header_source: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if host_header_source is not None:
            pulumi.set(__self__, "host_header_source", host_header_source)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="hostHeaderSource")
    def host_header_source(self) -> Optional[str]:
        return pulumi.get(self, "host_header_source")

    @host_header_source.setter
    def host_header_source(self, value: Optional[str]):
        pulumi.set(self, "host_header_source", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSavePostDcaProcessingArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorScheduleInvalidationArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 refresh_method: Optional[str] = None,
                 repeat: Optional[bool] = None,
                 repeat_interval: Optional[str] = None,
                 start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if refresh_method is not None:
            pulumi.set(__self__, "refresh_method", refresh_method)
        if repeat is not None:
            pulumi.set(__self__, "repeat", repeat)
        if repeat_interval is not None:
            pulumi.set(__self__, "repeat_interval", repeat_interval)
        if start is not None:
            pulumi.set(__self__, "start", start)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="refreshMethod")
    def refresh_method(self) -> Optional[str]:
        return pulumi.get(self, "refresh_method")

    @refresh_method.setter
    def refresh_method(self, value: Optional[str]):
        pulumi.set(self, "refresh_method", value)

    @property
    @pulumi.getter
    def repeat(self) -> Optional[bool]:
        return pulumi.get(self, "repeat")

    @repeat.setter
    def repeat(self, value: Optional[bool]):
        pulumi.set(self, "repeat", value)

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[str]:
        return pulumi.get(self, "repeat_interval")

    @repeat_interval.setter
    def repeat_interval(self, value: Optional[str]):
        pulumi.set(self, "repeat_interval", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[str]):
        pulumi.set(self, "start", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorScriptManagementArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 serviceworker: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 timestamp: Optional[int] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if serviceworker is not None:
            pulumi.set(__self__, "serviceworker", serviceworker)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def serviceworker(self) -> Optional[str]:
        return pulumi.get(self, "serviceworker")

    @serviceworker.setter
    def serviceworker(self, value: Optional[str]):
        pulumi.set(self, "serviceworker", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[int]:
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[int]):
        pulumi.set(self, "timestamp", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedContentProtectionArgs:
    def __init__(__self__, *,
                 acl: Optional[bool] = None,
                 dash_media_encryption: Optional[bool] = None,
                 data_payload: Optional[bool] = None,
                 enable_token_in_uri: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 field_carry_over: Optional[str] = None,
                 header_for_salts: Optional[Sequence[str]] = None,
                 hls_master_manifest_files: Optional[Sequence[str]] = None,
                 hls_media_encryption: Optional[bool] = None,
                 ip: Optional[bool] = None,
                 key: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_encryption_title: Optional[str] = None,
                 revoked_list_id: Optional[int] = None,
                 salt: Optional[str] = None,
                 session_id: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_auth_hls_title: Optional[str] = None,
                 token_authentication_title: Optional[str] = None,
                 token_revocation_enabled: Optional[bool] = None,
                 token_revocation_title: Optional[str] = None,
                 transition_key: Optional[str] = None,
                 use_advanced: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if dash_media_encryption is not None:
            pulumi.set(__self__, "dash_media_encryption", dash_media_encryption)
        if data_payload is not None:
            pulumi.set(__self__, "data_payload", data_payload)
        if enable_token_in_uri is not None:
            pulumi.set(__self__, "enable_token_in_uri", enable_token_in_uri)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if field_carry_over is not None:
            pulumi.set(__self__, "field_carry_over", field_carry_over)
        if header_for_salts is not None:
            pulumi.set(__self__, "header_for_salts", header_for_salts)
        if hls_master_manifest_files is not None:
            pulumi.set(__self__, "hls_master_manifest_files", hls_master_manifest_files)
        if hls_media_encryption is not None:
            pulumi.set(__self__, "hls_media_encryption", hls_media_encryption)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if media_encryption_title is not None:
            pulumi.set(__self__, "media_encryption_title", media_encryption_title)
        if revoked_list_id is not None:
            pulumi.set(__self__, "revoked_list_id", revoked_list_id)
        if salt is not None:
            pulumi.set(__self__, "salt", salt)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if token_auth_hls_title is not None:
            pulumi.set(__self__, "token_auth_hls_title", token_auth_hls_title)
        if token_authentication_title is not None:
            pulumi.set(__self__, "token_authentication_title", token_authentication_title)
        if token_revocation_enabled is not None:
            pulumi.set(__self__, "token_revocation_enabled", token_revocation_enabled)
        if token_revocation_title is not None:
            pulumi.set(__self__, "token_revocation_title", token_revocation_title)
        if transition_key is not None:
            pulumi.set(__self__, "transition_key", transition_key)
        if use_advanced is not None:
            pulumi.set(__self__, "use_advanced", use_advanced)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def acl(self) -> Optional[bool]:
        return pulumi.get(self, "acl")

    @acl.setter
    def acl(self, value: Optional[bool]):
        pulumi.set(self, "acl", value)

    @property
    @pulumi.getter(name="dashMediaEncryption")
    def dash_media_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "dash_media_encryption")

    @dash_media_encryption.setter
    def dash_media_encryption(self, value: Optional[bool]):
        pulumi.set(self, "dash_media_encryption", value)

    @property
    @pulumi.getter(name="dataPayload")
    def data_payload(self) -> Optional[bool]:
        return pulumi.get(self, "data_payload")

    @data_payload.setter
    def data_payload(self, value: Optional[bool]):
        pulumi.set(self, "data_payload", value)

    @property
    @pulumi.getter(name="enableTokenInUri")
    def enable_token_in_uri(self) -> Optional[bool]:
        return pulumi.get(self, "enable_token_in_uri")

    @enable_token_in_uri.setter
    def enable_token_in_uri(self, value: Optional[bool]):
        pulumi.set(self, "enable_token_in_uri", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="fieldCarryOver")
    def field_carry_over(self) -> Optional[str]:
        return pulumi.get(self, "field_carry_over")

    @field_carry_over.setter
    def field_carry_over(self, value: Optional[str]):
        pulumi.set(self, "field_carry_over", value)

    @property
    @pulumi.getter(name="headerForSalts")
    def header_for_salts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "header_for_salts")

    @header_for_salts.setter
    def header_for_salts(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "header_for_salts", value)

    @property
    @pulumi.getter(name="hlsMasterManifestFiles")
    def hls_master_manifest_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hls_master_manifest_files")

    @hls_master_manifest_files.setter
    def hls_master_manifest_files(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "hls_master_manifest_files", value)

    @property
    @pulumi.getter(name="hlsMediaEncryption")
    def hls_media_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "hls_media_encryption")

    @hls_media_encryption.setter
    def hls_media_encryption(self, value: Optional[bool]):
        pulumi.set(self, "hls_media_encryption", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[bool]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[bool]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="mediaEncryptionTitle")
    def media_encryption_title(self) -> Optional[str]:
        return pulumi.get(self, "media_encryption_title")

    @media_encryption_title.setter
    def media_encryption_title(self, value: Optional[str]):
        pulumi.set(self, "media_encryption_title", value)

    @property
    @pulumi.getter(name="revokedListId")
    def revoked_list_id(self) -> Optional[int]:
        return pulumi.get(self, "revoked_list_id")

    @revoked_list_id.setter
    def revoked_list_id(self, value: Optional[int]):
        pulumi.set(self, "revoked_list_id", value)

    @property
    @pulumi.getter
    def salt(self) -> Optional[str]:
        return pulumi.get(self, "salt")

    @salt.setter
    def salt(self, value: Optional[str]):
        pulumi.set(self, "salt", value)

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[bool]:
        return pulumi.get(self, "session_id")

    @session_id.setter
    def session_id(self, value: Optional[bool]):
        pulumi.set(self, "session_id", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="tokenAuthHlsTitle")
    def token_auth_hls_title(self) -> Optional[str]:
        return pulumi.get(self, "token_auth_hls_title")

    @token_auth_hls_title.setter
    def token_auth_hls_title(self, value: Optional[str]):
        pulumi.set(self, "token_auth_hls_title", value)

    @property
    @pulumi.getter(name="tokenAuthenticationTitle")
    def token_authentication_title(self) -> Optional[str]:
        return pulumi.get(self, "token_authentication_title")

    @token_authentication_title.setter
    def token_authentication_title(self, value: Optional[str]):
        pulumi.set(self, "token_authentication_title", value)

    @property
    @pulumi.getter(name="tokenRevocationEnabled")
    def token_revocation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "token_revocation_enabled")

    @token_revocation_enabled.setter
    def token_revocation_enabled(self, value: Optional[bool]):
        pulumi.set(self, "token_revocation_enabled", value)

    @property
    @pulumi.getter(name="tokenRevocationTitle")
    def token_revocation_title(self) -> Optional[str]:
        return pulumi.get(self, "token_revocation_title")

    @token_revocation_title.setter
    def token_revocation_title(self, value: Optional[str]):
        pulumi.set(self, "token_revocation_title", value)

    @property
    @pulumi.getter(name="transitionKey")
    def transition_key(self) -> Optional[str]:
        return pulumi.get(self, "transition_key")

    @transition_key.setter
    def transition_key(self, value: Optional[str]):
        pulumi.set(self, "transition_key", value)

    @property
    @pulumi.getter(name="useAdvanced")
    def use_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "use_advanced")

    @use_advanced.setter
    def use_advanced(self, value: Optional[bool]):
        pulumi.set(self, "use_advanced", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaOptimizationArgs:
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 dvr_type: Optional[str] = None,
                 dvr_window: Optional[str] = None,
                 enable_ull_streaming: Optional[bool] = None,
                 end_time: Optional[str] = None,
                 live_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 show_advanced: Optional[bool] = None,
                 start_time: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if dvr_type is not None:
            pulumi.set(__self__, "dvr_type", dvr_type)
        if dvr_window is not None:
            pulumi.set(__self__, "dvr_window", dvr_window)
        if enable_ull_streaming is not None:
            pulumi.set(__self__, "enable_ull_streaming", enable_ull_streaming)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if live_type is not None:
            pulumi.set(__self__, "live_type", live_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if show_advanced is not None:
            pulumi.set(__self__, "show_advanced", show_advanced)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[str]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter(name="dvrType")
    def dvr_type(self) -> Optional[str]:
        return pulumi.get(self, "dvr_type")

    @dvr_type.setter
    def dvr_type(self, value: Optional[str]):
        pulumi.set(self, "dvr_type", value)

    @property
    @pulumi.getter(name="dvrWindow")
    def dvr_window(self) -> Optional[str]:
        return pulumi.get(self, "dvr_window")

    @dvr_window.setter
    def dvr_window(self, value: Optional[str]):
        pulumi.set(self, "dvr_window", value)

    @property
    @pulumi.getter(name="enableUllStreaming")
    def enable_ull_streaming(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ull_streaming")

    @enable_ull_streaming.setter
    def enable_ull_streaming(self, value: Optional[bool]):
        pulumi.set(self, "enable_ull_streaming", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="liveType")
    def live_type(self) -> Optional[str]:
        return pulumi.get(self, "live_type")

    @live_type.setter
    def live_type(self, value: Optional[str]):
        pulumi.set(self, "live_type", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="showAdvanced")
    def show_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "show_advanced")

    @show_advanced.setter
    def show_advanced(self, value: Optional[bool]):
        pulumi.set(self, "show_advanced", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaStreamingPrefetchArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSetVariableArgs:
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 case_sensitive: Optional[bool] = None,
                 certificate_field_name: Optional[str] = None,
                 cookie_name: Optional[str] = None,
                 device_profile: Optional[str] = None,
                 encryption_key: Optional[str] = None,
                 encryption_mode: Optional[str] = None,
                 end_index: Optional[str] = None,
                 except_chars: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 force_chars: Optional[str] = None,
                 format_string: Optional[str] = None,
                 generator: Optional[str] = None,
                 global_substitution: Optional[bool] = None,
                 header_name: Optional[str] = None,
                 hmac_algorithm: Optional[str] = None,
                 hmac_key: Optional[str] = None,
                 initialization_vector: Optional[str] = None,
                 ip_version: Optional[str] = None,
                 ipv4_prefix: Optional[int] = None,
                 ipv6_prefix: Optional[int] = None,
                 location_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 max: Optional[int] = None,
                 max_random_number: Optional[str] = None,
                 min: Optional[int] = None,
                 min_random_number: Optional[str] = None,
                 nonce: Optional[str] = None,
                 number_of_bytes: Optional[int] = None,
                 operand_one: Optional[str] = None,
                 param_name: Optional[str] = None,
                 path_component_offset: Optional[str] = None,
                 prepend_bytes: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex: Optional[str] = None,
                 replacement: Optional[str] = None,
                 response_header_name: Optional[str] = None,
                 separator: Optional[str] = None,
                 set_cookie_name: Optional[str] = None,
                 start_index: Optional[str] = None,
                 sub_string: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 transform: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value_source: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 variable_value: Optional[str] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if certificate_field_name is not None:
            pulumi.set(__self__, "certificate_field_name", certificate_field_name)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if device_profile is not None:
            pulumi.set(__self__, "device_profile", device_profile)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if encryption_mode is not None:
            pulumi.set(__self__, "encryption_mode", encryption_mode)
        if end_index is not None:
            pulumi.set(__self__, "end_index", end_index)
        if except_chars is not None:
            pulumi.set(__self__, "except_chars", except_chars)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if force_chars is not None:
            pulumi.set(__self__, "force_chars", force_chars)
        if format_string is not None:
            pulumi.set(__self__, "format_string", format_string)
        if generator is not None:
            pulumi.set(__self__, "generator", generator)
        if global_substitution is not None:
            pulumi.set(__self__, "global_substitution", global_substitution)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if hmac_algorithm is not None:
            pulumi.set(__self__, "hmac_algorithm", hmac_algorithm)
        if hmac_key is not None:
            pulumi.set(__self__, "hmac_key", hmac_key)
        if initialization_vector is not None:
            pulumi.set(__self__, "initialization_vector", initialization_vector)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if ipv4_prefix is not None:
            pulumi.set(__self__, "ipv4_prefix", ipv4_prefix)
        if ipv6_prefix is not None:
            pulumi.set(__self__, "ipv6_prefix", ipv6_prefix)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if max_random_number is not None:
            pulumi.set(__self__, "max_random_number", max_random_number)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if min_random_number is not None:
            pulumi.set(__self__, "min_random_number", min_random_number)
        if nonce is not None:
            pulumi.set(__self__, "nonce", nonce)
        if number_of_bytes is not None:
            pulumi.set(__self__, "number_of_bytes", number_of_bytes)
        if operand_one is not None:
            pulumi.set(__self__, "operand_one", operand_one)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if path_component_offset is not None:
            pulumi.set(__self__, "path_component_offset", path_component_offset)
        if prepend_bytes is not None:
            pulumi.set(__self__, "prepend_bytes", prepend_bytes)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if replacement is not None:
            pulumi.set(__self__, "replacement", replacement)
        if response_header_name is not None:
            pulumi.set(__self__, "response_header_name", response_header_name)
        if separator is not None:
            pulumi.set(__self__, "separator", separator)
        if set_cookie_name is not None:
            pulumi.set(__self__, "set_cookie_name", set_cookie_name)
        if start_index is not None:
            pulumi.set(__self__, "start_index", start_index)
        if sub_string is not None:
            pulumi.set(__self__, "sub_string", sub_string)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if transform is not None:
            pulumi.set(__self__, "transform", transform)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value_source is not None:
            pulumi.set(__self__, "value_source", value_source)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)
        if variable_value is not None:
            pulumi.set(__self__, "variable_value", variable_value)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="certificateFieldName")
    def certificate_field_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_field_name")

    @certificate_field_name.setter
    def certificate_field_name(self, value: Optional[str]):
        pulumi.set(self, "certificate_field_name", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[str]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter(name="deviceProfile")
    def device_profile(self) -> Optional[str]:
        return pulumi.get(self, "device_profile")

    @device_profile.setter
    def device_profile(self, value: Optional[str]):
        pulumi.set(self, "device_profile", value)

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[str]:
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[str]):
        pulumi.set(self, "encryption_key", value)

    @property
    @pulumi.getter(name="encryptionMode")
    def encryption_mode(self) -> Optional[str]:
        return pulumi.get(self, "encryption_mode")

    @encryption_mode.setter
    def encryption_mode(self, value: Optional[str]):
        pulumi.set(self, "encryption_mode", value)

    @property
    @pulumi.getter(name="endIndex")
    def end_index(self) -> Optional[str]:
        return pulumi.get(self, "end_index")

    @end_index.setter
    def end_index(self, value: Optional[str]):
        pulumi.set(self, "end_index", value)

    @property
    @pulumi.getter(name="exceptChars")
    def except_chars(self) -> Optional[str]:
        return pulumi.get(self, "except_chars")

    @except_chars.setter
    def except_chars(self, value: Optional[str]):
        pulumi.set(self, "except_chars", value)

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @extract_location.setter
    def extract_location(self, value: Optional[str]):
        pulumi.set(self, "extract_location", value)

    @property
    @pulumi.getter(name="forceChars")
    def force_chars(self) -> Optional[str]:
        return pulumi.get(self, "force_chars")

    @force_chars.setter
    def force_chars(self, value: Optional[str]):
        pulumi.set(self, "force_chars", value)

    @property
    @pulumi.getter(name="formatString")
    def format_string(self) -> Optional[str]:
        return pulumi.get(self, "format_string")

    @format_string.setter
    def format_string(self, value: Optional[str]):
        pulumi.set(self, "format_string", value)

    @property
    @pulumi.getter
    def generator(self) -> Optional[str]:
        return pulumi.get(self, "generator")

    @generator.setter
    def generator(self, value: Optional[str]):
        pulumi.set(self, "generator", value)

    @property
    @pulumi.getter(name="globalSubstitution")
    def global_substitution(self) -> Optional[bool]:
        return pulumi.get(self, "global_substitution")

    @global_substitution.setter
    def global_substitution(self, value: Optional[bool]):
        pulumi.set(self, "global_substitution", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter(name="hmacAlgorithm")
    def hmac_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hmac_algorithm")

    @hmac_algorithm.setter
    def hmac_algorithm(self, value: Optional[str]):
        pulumi.set(self, "hmac_algorithm", value)

    @property
    @pulumi.getter(name="hmacKey")
    def hmac_key(self) -> Optional[str]:
        return pulumi.get(self, "hmac_key")

    @hmac_key.setter
    def hmac_key(self, value: Optional[str]):
        pulumi.set(self, "hmac_key", value)

    @property
    @pulumi.getter(name="initializationVector")
    def initialization_vector(self) -> Optional[str]:
        return pulumi.get(self, "initialization_vector")

    @initialization_vector.setter
    def initialization_vector(self, value: Optional[str]):
        pulumi.set(self, "initialization_vector", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[str]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="ipv4Prefix")
    def ipv4_prefix(self) -> Optional[int]:
        return pulumi.get(self, "ipv4_prefix")

    @ipv4_prefix.setter
    def ipv4_prefix(self, value: Optional[int]):
        pulumi.set(self, "ipv4_prefix", value)

    @property
    @pulumi.getter(name="ipv6Prefix")
    def ipv6_prefix(self) -> Optional[int]:
        return pulumi.get(self, "ipv6_prefix")

    @ipv6_prefix.setter
    def ipv6_prefix(self, value: Optional[int]):
        pulumi.set(self, "ipv6_prefix", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[str]:
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[str]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[int]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter(name="maxRandomNumber")
    def max_random_number(self) -> Optional[str]:
        return pulumi.get(self, "max_random_number")

    @max_random_number.setter
    def max_random_number(self, value: Optional[str]):
        pulumi.set(self, "max_random_number", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[int]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter(name="minRandomNumber")
    def min_random_number(self) -> Optional[str]:
        return pulumi.get(self, "min_random_number")

    @min_random_number.setter
    def min_random_number(self, value: Optional[str]):
        pulumi.set(self, "min_random_number", value)

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @nonce.setter
    def nonce(self, value: Optional[str]):
        pulumi.set(self, "nonce", value)

    @property
    @pulumi.getter(name="numberOfBytes")
    def number_of_bytes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_bytes")

    @number_of_bytes.setter
    def number_of_bytes(self, value: Optional[int]):
        pulumi.set(self, "number_of_bytes", value)

    @property
    @pulumi.getter(name="operandOne")
    def operand_one(self) -> Optional[str]:
        return pulumi.get(self, "operand_one")

    @operand_one.setter
    def operand_one(self, value: Optional[str]):
        pulumi.set(self, "operand_one", value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @param_name.setter
    def param_name(self, value: Optional[str]):
        pulumi.set(self, "param_name", value)

    @property
    @pulumi.getter(name="pathComponentOffset")
    def path_component_offset(self) -> Optional[str]:
        return pulumi.get(self, "path_component_offset")

    @path_component_offset.setter
    def path_component_offset(self, value: Optional[str]):
        pulumi.set(self, "path_component_offset", value)

    @property
    @pulumi.getter(name="prependBytes")
    def prepend_bytes(self) -> Optional[bool]:
        return pulumi.get(self, "prepend_bytes")

    @prepend_bytes.setter
    def prepend_bytes(self, value: Optional[bool]):
        pulumi.set(self, "prepend_bytes", value)

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @query_parameter_name.setter
    def query_parameter_name(self, value: Optional[str]):
        pulumi.set(self, "query_parameter_name", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[str]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def replacement(self) -> Optional[str]:
        return pulumi.get(self, "replacement")

    @replacement.setter
    def replacement(self, value: Optional[str]):
        pulumi.set(self, "replacement", value)

    @property
    @pulumi.getter(name="responseHeaderName")
    def response_header_name(self) -> Optional[str]:
        return pulumi.get(self, "response_header_name")

    @response_header_name.setter
    def response_header_name(self, value: Optional[str]):
        pulumi.set(self, "response_header_name", value)

    @property
    @pulumi.getter
    def separator(self) -> Optional[str]:
        return pulumi.get(self, "separator")

    @separator.setter
    def separator(self, value: Optional[str]):
        pulumi.set(self, "separator", value)

    @property
    @pulumi.getter(name="setCookieName")
    def set_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "set_cookie_name")

    @set_cookie_name.setter
    def set_cookie_name(self, value: Optional[str]):
        pulumi.set(self, "set_cookie_name", value)

    @property
    @pulumi.getter(name="startIndex")
    def start_index(self) -> Optional[str]:
        return pulumi.get(self, "start_index")

    @start_index.setter
    def start_index(self, value: Optional[str]):
        pulumi.set(self, "start_index", value)

    @property
    @pulumi.getter(name="subString")
    def sub_string(self) -> Optional[str]:
        return pulumi.get(self, "sub_string")

    @sub_string.setter
    def sub_string(self, value: Optional[str]):
        pulumi.set(self, "sub_string", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def transform(self) -> Optional[str]:
        return pulumi.get(self, "transform")

    @transform.setter
    def transform(self, value: Optional[str]):
        pulumi.set(self, "transform", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="valueSource")
    def value_source(self) -> Optional[str]:
        return pulumi.get(self, "value_source")

    @value_source.setter
    def value_source(self, value: Optional[str]):
        pulumi.set(self, "value_source", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[str]):
        pulumi.set(self, "variable_name", value)

    @property
    @pulumi.getter(name="variableValue")
    def variable_value(self) -> Optional[str]:
        return pulumi.get(self, "variable_value")

    @variable_value.setter
    def variable_value(self, value: Optional[str]):
        pulumi.set(self, "variable_value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorShutrArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 status: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSimulateErrorCodeArgs:
    def __init__(__self__, *,
                 error_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if error_type is not None:
            pulumi.set(__self__, "error_type", error_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> Optional[str]:
        return pulumi.get(self, "error_type")

    @error_type.setter
    def error_type(self, value: Optional[str]):
        pulumi.set(self, "error_type", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[str]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 nossmap: Optional[str] = None,
                 ssmap: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldSsmapArgs'] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if nossmap is not None:
            pulumi.set(__self__, "nossmap", nossmap)
        if ssmap is not None:
            pulumi.set(__self__, "ssmap", ssmap)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def nossmap(self) -> Optional[str]:
        return pulumi.get(self, "nossmap")

    @nossmap.setter
    def nossmap(self, value: Optional[str]):
        pulumi.set(self, "nossmap", value)

    @property
    @pulumi.getter
    def ssmap(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldSsmapArgs']:
        return pulumi.get(self, "ssmap")

    @ssmap.setter
    def ssmap(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldSsmapArgs']):
        pulumi.set(self, "ssmap", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldSsmapArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 srmap: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if srmap is not None:
            pulumi.set(__self__, "srmap", srmap)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def srmap(self) -> Optional[str]:
        return pulumi.get(self, "srmap")

    @srmap.setter
    def srmap(self, value: Optional[str]):
        pulumi.set(self, "srmap", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationArgs:
    def __init__(__self__, *,
                 allow_https_downgrade: Optional[bool] = None,
                 allow_https_upgrade: Optional[bool] = None,
                 cache_sharing_duration: Optional[int] = None,
                 cache_sharing_start_time: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 is_certificate_sni_only: Optional[bool] = None,
                 is_tiered_distribution_used: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 migration_duration: Optional[int] = None,
                 migration_from: Optional[str] = None,
                 migration_start_time: Optional[str] = None,
                 td_location: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_https_downgrade is not None:
            pulumi.set(__self__, "allow_https_downgrade", allow_https_downgrade)
        if allow_https_upgrade is not None:
            pulumi.set(__self__, "allow_https_upgrade", allow_https_upgrade)
        if cache_sharing_duration is not None:
            pulumi.set(__self__, "cache_sharing_duration", cache_sharing_duration)
        if cache_sharing_start_time is not None:
            pulumi.set(__self__, "cache_sharing_start_time", cache_sharing_start_time)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_certificate_sni_only is not None:
            pulumi.set(__self__, "is_certificate_sni_only", is_certificate_sni_only)
        if is_tiered_distribution_used is not None:
            pulumi.set(__self__, "is_tiered_distribution_used", is_tiered_distribution_used)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if migration_duration is not None:
            pulumi.set(__self__, "migration_duration", migration_duration)
        if migration_from is not None:
            pulumi.set(__self__, "migration_from", migration_from)
        if migration_start_time is not None:
            pulumi.set(__self__, "migration_start_time", migration_start_time)
        if td_location is not None:
            pulumi.set(__self__, "td_location", td_location)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowHttpsDowngrade")
    def allow_https_downgrade(self) -> Optional[bool]:
        return pulumi.get(self, "allow_https_downgrade")

    @allow_https_downgrade.setter
    def allow_https_downgrade(self, value: Optional[bool]):
        pulumi.set(self, "allow_https_downgrade", value)

    @property
    @pulumi.getter(name="allowHttpsUpgrade")
    def allow_https_upgrade(self) -> Optional[bool]:
        return pulumi.get(self, "allow_https_upgrade")

    @allow_https_upgrade.setter
    def allow_https_upgrade(self, value: Optional[bool]):
        pulumi.set(self, "allow_https_upgrade", value)

    @property
    @pulumi.getter(name="cacheSharingDuration")
    def cache_sharing_duration(self) -> Optional[int]:
        return pulumi.get(self, "cache_sharing_duration")

    @cache_sharing_duration.setter
    def cache_sharing_duration(self, value: Optional[int]):
        pulumi.set(self, "cache_sharing_duration", value)

    @property
    @pulumi.getter(name="cacheSharingStartTime")
    def cache_sharing_start_time(self) -> Optional[str]:
        return pulumi.get(self, "cache_sharing_start_time")

    @cache_sharing_start_time.setter
    def cache_sharing_start_time(self, value: Optional[str]):
        pulumi.set(self, "cache_sharing_start_time", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="isCertificateSniOnly")
    def is_certificate_sni_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_certificate_sni_only")

    @is_certificate_sni_only.setter
    def is_certificate_sni_only(self, value: Optional[bool]):
        pulumi.set(self, "is_certificate_sni_only", value)

    @property
    @pulumi.getter(name="isTieredDistributionUsed")
    def is_tiered_distribution_used(self) -> Optional[bool]:
        return pulumi.get(self, "is_tiered_distribution_used")

    @is_tiered_distribution_used.setter
    def is_tiered_distribution_used(self, value: Optional[bool]):
        pulumi.set(self, "is_tiered_distribution_used", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="migrationDuration")
    def migration_duration(self) -> Optional[int]:
        return pulumi.get(self, "migration_duration")

    @migration_duration.setter
    def migration_duration(self, value: Optional[int]):
        pulumi.set(self, "migration_duration", value)

    @property
    @pulumi.getter(name="migrationFrom")
    def migration_from(self) -> Optional[str]:
        return pulumi.get(self, "migration_from")

    @migration_from.setter
    def migration_from(self, value: Optional[str]):
        pulumi.set(self, "migration_from", value)

    @property
    @pulumi.getter(name="migrationStartTime")
    def migration_start_time(self) -> Optional[str]:
        return pulumi.get(self, "migration_start_time")

    @migration_start_time.setter
    def migration_start_time(self, value: Optional[str]):
        pulumi.set(self, "migration_start_time", value)

    @property
    @pulumi.getter(name="tdLocation")
    def td_location(self) -> Optional[str]:
        return pulumi.get(self, "td_location")

    @td_location.setter
    def td_location(self, value: Optional[str]):
        pulumi.set(self, "td_location", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationOverrideArgs:
    def __init__(__self__, *,
                 info: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if info is not None:
            pulumi.set(__self__, "info", info)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def info(self) -> Optional[str]:
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[str]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorStrictHeaderParsingArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 strict_mode: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 valid_mode: Optional[bool] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if strict_mode is not None:
            pulumi.set(__self__, "strict_mode", strict_mode)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if valid_mode is not None:
            pulumi.set(__self__, "valid_mode", valid_mode)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="strictMode")
    def strict_mode(self) -> Optional[bool]:
        return pulumi.get(self, "strict_mode")

    @strict_mode.setter
    def strict_mode(self, value: Optional[bool]):
        pulumi.set(self, "strict_mode", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="validMode")
    def valid_mode(self) -> Optional[bool]:
        return pulumi.get(self, "valid_mode")

    @valid_mode.setter
    def valid_mode(self, value: Optional[bool]):
        pulumi.set(self, "valid_mode", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSubCustomerArgs:
    def __init__(__self__, *,
                 access_control: Optional[bool] = None,
                 cache_key: Optional[bool] = None,
                 caching: Optional[bool] = None,
                 content_compressor: Optional[bool] = None,
                 dynamic_web_content: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 geo_location: Optional[bool] = None,
                 ip: Optional[bool] = None,
                 large_file_delivery: Optional[bool] = None,
                 live_video_delivery: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modify_path: Optional[bool] = None,
                 on_demand_video_delivery: Optional[bool] = None,
                 origin: Optional[bool] = None,
                 partner_domain_suffix: Optional[str] = None,
                 referrer: Optional[bool] = None,
                 refresh_content: Optional[bool] = None,
                 site_failover: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_authorization: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 web_application_firewall: Optional[bool] = None):
        if access_control is not None:
            pulumi.set(__self__, "access_control", access_control)
        if cache_key is not None:
            pulumi.set(__self__, "cache_key", cache_key)
        if caching is not None:
            pulumi.set(__self__, "caching", caching)
        if content_compressor is not None:
            pulumi.set(__self__, "content_compressor", content_compressor)
        if dynamic_web_content is not None:
            pulumi.set(__self__, "dynamic_web_content", dynamic_web_content)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if geo_location is not None:
            pulumi.set(__self__, "geo_location", geo_location)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if large_file_delivery is not None:
            pulumi.set(__self__, "large_file_delivery", large_file_delivery)
        if live_video_delivery is not None:
            pulumi.set(__self__, "live_video_delivery", live_video_delivery)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if modify_path is not None:
            pulumi.set(__self__, "modify_path", modify_path)
        if on_demand_video_delivery is not None:
            pulumi.set(__self__, "on_demand_video_delivery", on_demand_video_delivery)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if partner_domain_suffix is not None:
            pulumi.set(__self__, "partner_domain_suffix", partner_domain_suffix)
        if referrer is not None:
            pulumi.set(__self__, "referrer", referrer)
        if refresh_content is not None:
            pulumi.set(__self__, "refresh_content", refresh_content)
        if site_failover is not None:
            pulumi.set(__self__, "site_failover", site_failover)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if token_authorization is not None:
            pulumi.set(__self__, "token_authorization", token_authorization)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if web_application_firewall is not None:
            pulumi.set(__self__, "web_application_firewall", web_application_firewall)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> Optional[bool]:
        return pulumi.get(self, "access_control")

    @access_control.setter
    def access_control(self, value: Optional[bool]):
        pulumi.set(self, "access_control", value)

    @property
    @pulumi.getter(name="cacheKey")
    def cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "cache_key")

    @cache_key.setter
    def cache_key(self, value: Optional[bool]):
        pulumi.set(self, "cache_key", value)

    @property
    @pulumi.getter
    def caching(self) -> Optional[bool]:
        return pulumi.get(self, "caching")

    @caching.setter
    def caching(self, value: Optional[bool]):
        pulumi.set(self, "caching", value)

    @property
    @pulumi.getter(name="contentCompressor")
    def content_compressor(self) -> Optional[bool]:
        return pulumi.get(self, "content_compressor")

    @content_compressor.setter
    def content_compressor(self, value: Optional[bool]):
        pulumi.set(self, "content_compressor", value)

    @property
    @pulumi.getter(name="dynamicWebContent")
    def dynamic_web_content(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_web_content")

    @dynamic_web_content.setter
    def dynamic_web_content(self, value: Optional[bool]):
        pulumi.set(self, "dynamic_web_content", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="geoLocation")
    def geo_location(self) -> Optional[bool]:
        return pulumi.get(self, "geo_location")

    @geo_location.setter
    def geo_location(self, value: Optional[bool]):
        pulumi.set(self, "geo_location", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[bool]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[bool]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="largeFileDelivery")
    def large_file_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "large_file_delivery")

    @large_file_delivery.setter
    def large_file_delivery(self, value: Optional[bool]):
        pulumi.set(self, "large_file_delivery", value)

    @property
    @pulumi.getter(name="liveVideoDelivery")
    def live_video_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "live_video_delivery")

    @live_video_delivery.setter
    def live_video_delivery(self, value: Optional[bool]):
        pulumi.set(self, "live_video_delivery", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="modifyPath")
    def modify_path(self) -> Optional[bool]:
        return pulumi.get(self, "modify_path")

    @modify_path.setter
    def modify_path(self, value: Optional[bool]):
        pulumi.set(self, "modify_path", value)

    @property
    @pulumi.getter(name="onDemandVideoDelivery")
    def on_demand_video_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "on_demand_video_delivery")

    @on_demand_video_delivery.setter
    def on_demand_video_delivery(self, value: Optional[bool]):
        pulumi.set(self, "on_demand_video_delivery", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[bool]:
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[bool]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="partnerDomainSuffix")
    def partner_domain_suffix(self) -> Optional[str]:
        return pulumi.get(self, "partner_domain_suffix")

    @partner_domain_suffix.setter
    def partner_domain_suffix(self, value: Optional[str]):
        pulumi.set(self, "partner_domain_suffix", value)

    @property
    @pulumi.getter
    def referrer(self) -> Optional[bool]:
        return pulumi.get(self, "referrer")

    @referrer.setter
    def referrer(self, value: Optional[bool]):
        pulumi.set(self, "referrer", value)

    @property
    @pulumi.getter(name="refreshContent")
    def refresh_content(self) -> Optional[bool]:
        return pulumi.get(self, "refresh_content")

    @refresh_content.setter
    def refresh_content(self, value: Optional[bool]):
        pulumi.set(self, "refresh_content", value)

    @property
    @pulumi.getter(name="siteFailover")
    def site_failover(self) -> Optional[bool]:
        return pulumi.get(self, "site_failover")

    @site_failover.setter
    def site_failover(self, value: Optional[bool]):
        pulumi.set(self, "site_failover", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="tokenAuthorization")
    def token_authorization(self) -> Optional[bool]:
        return pulumi.get(self, "token_authorization")

    @token_authorization.setter
    def token_authorization(self, value: Optional[bool]):
        pulumi.set(self, "token_authorization", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="webApplicationFirewall")
    def web_application_firewall(self) -> Optional[bool]:
        return pulumi.get(self, "web_application_firewall")

    @web_application_firewall.setter
    def web_application_firewall(self, value: Optional[bool]):
        pulumi.set(self, "web_application_firewall", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSureRouteArgs:
    def __init__(__self__, *,
                 allow_fcm_parent_override: Optional[bool] = None,
                 custom_map: Optional[str] = None,
                 custom_stat_key: Optional[str] = None,
                 enable_custom_key: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 force_ssl_forward: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 race_stat_ttl: Optional[str] = None,
                 sr_download_link_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 test_object_url: Optional[str] = None,
                 to_host: Optional[str] = None,
                 to_host_status: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_fcm_parent_override is not None:
            pulumi.set(__self__, "allow_fcm_parent_override", allow_fcm_parent_override)
        if custom_map is not None:
            pulumi.set(__self__, "custom_map", custom_map)
        if custom_stat_key is not None:
            pulumi.set(__self__, "custom_stat_key", custom_stat_key)
        if enable_custom_key is not None:
            pulumi.set(__self__, "enable_custom_key", enable_custom_key)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if force_ssl_forward is not None:
            pulumi.set(__self__, "force_ssl_forward", force_ssl_forward)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if race_stat_ttl is not None:
            pulumi.set(__self__, "race_stat_ttl", race_stat_ttl)
        if sr_download_link_title is not None:
            pulumi.set(__self__, "sr_download_link_title", sr_download_link_title)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if test_object_url is not None:
            pulumi.set(__self__, "test_object_url", test_object_url)
        if to_host is not None:
            pulumi.set(__self__, "to_host", to_host)
        if to_host_status is not None:
            pulumi.set(__self__, "to_host_status", to_host_status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowFcmParentOverride")
    def allow_fcm_parent_override(self) -> Optional[bool]:
        return pulumi.get(self, "allow_fcm_parent_override")

    @allow_fcm_parent_override.setter
    def allow_fcm_parent_override(self, value: Optional[bool]):
        pulumi.set(self, "allow_fcm_parent_override", value)

    @property
    @pulumi.getter(name="customMap")
    def custom_map(self) -> Optional[str]:
        return pulumi.get(self, "custom_map")

    @custom_map.setter
    def custom_map(self, value: Optional[str]):
        pulumi.set(self, "custom_map", value)

    @property
    @pulumi.getter(name="customStatKey")
    def custom_stat_key(self) -> Optional[str]:
        return pulumi.get(self, "custom_stat_key")

    @custom_stat_key.setter
    def custom_stat_key(self, value: Optional[str]):
        pulumi.set(self, "custom_stat_key", value)

    @property
    @pulumi.getter(name="enableCustomKey")
    def enable_custom_key(self) -> Optional[bool]:
        return pulumi.get(self, "enable_custom_key")

    @enable_custom_key.setter
    def enable_custom_key(self, value: Optional[bool]):
        pulumi.set(self, "enable_custom_key", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="forceSslForward")
    def force_ssl_forward(self) -> Optional[bool]:
        return pulumi.get(self, "force_ssl_forward")

    @force_ssl_forward.setter
    def force_ssl_forward(self, value: Optional[bool]):
        pulumi.set(self, "force_ssl_forward", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="raceStatTtl")
    def race_stat_ttl(self) -> Optional[str]:
        return pulumi.get(self, "race_stat_ttl")

    @race_stat_ttl.setter
    def race_stat_ttl(self, value: Optional[str]):
        pulumi.set(self, "race_stat_ttl", value)

    @property
    @pulumi.getter(name="srDownloadLinkTitle")
    def sr_download_link_title(self) -> Optional[str]:
        return pulumi.get(self, "sr_download_link_title")

    @sr_download_link_title.setter
    def sr_download_link_title(self, value: Optional[str]):
        pulumi.set(self, "sr_download_link_title", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="testObjectUrl")
    def test_object_url(self) -> Optional[str]:
        return pulumi.get(self, "test_object_url")

    @test_object_url.setter
    def test_object_url(self, value: Optional[str]):
        pulumi.set(self, "test_object_url", value)

    @property
    @pulumi.getter(name="toHost")
    def to_host(self) -> Optional[str]:
        return pulumi.get(self, "to_host")

    @to_host.setter
    def to_host(self, value: Optional[str]):
        pulumi.set(self, "to_host", value)

    @property
    @pulumi.getter(name="toHostStatus")
    def to_host_status(self) -> Optional[str]:
        return pulumi.get(self, "to_host_status")

    @to_host_status.setter
    def to_host_status(self, value: Optional[str]):
        pulumi.set(self, "to_host_status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTcpOptimizationArgs:
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[str]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTeaLeafArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ibm_customer_id: Optional[int] = None,
                 limit_to_dynamic: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ibm_customer_id is not None:
            pulumi.set(__self__, "ibm_customer_id", ibm_customer_id)
        if limit_to_dynamic is not None:
            pulumi.set(__self__, "limit_to_dynamic", limit_to_dynamic)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ibmCustomerId")
    def ibm_customer_id(self) -> Optional[int]:
        return pulumi.get(self, "ibm_customer_id")

    @ibm_customer_id.setter
    def ibm_customer_id(self, value: Optional[int]):
        pulumi.set(self, "ibm_customer_id", value)

    @property
    @pulumi.getter(name="limitToDynamic")
    def limit_to_dynamic(self) -> Optional[bool]:
        return pulumi.get(self, "limit_to_dynamic")

    @limit_to_dynamic.setter
    def limit_to_dynamic(self, value: Optional[bool]):
        pulumi.set(self, "limit_to_dynamic", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tiered_distribution_map: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tiered_distribution_map is not None:
            pulumi.set(__self__, "tiered_distribution_map", tiered_distribution_map)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="tieredDistributionMap")
    def tiered_distribution_map(self) -> Optional[str]:
        return pulumi.get(self, "tiered_distribution_map")

    @tiered_distribution_map.setter
    def tiered_distribution_map(self, value: Optional[str]):
        pulumi.set(self, "tiered_distribution_map", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionAdvancedArgs:
    def __init__(__self__, *,
                 allowall: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 method: Optional[str] = None,
                 policy: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tiered_distribution_map: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allowall is not None:
            pulumi.set(__self__, "allowall", allowall)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tiered_distribution_map is not None:
            pulumi.set(__self__, "tiered_distribution_map", tiered_distribution_map)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def allowall(self) -> Optional[bool]:
        return pulumi.get(self, "allowall")

    @allowall.setter
    def allowall(self, value: Optional[bool]):
        pulumi.set(self, "allowall", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[str]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="tieredDistributionMap")
    def tiered_distribution_map(self) -> Optional[str]:
        return pulumi.get(self, "tiered_distribution_map")

    @tiered_distribution_map.setter
    def tiered_distribution_map(self, value: Optional[str]):
        pulumi.set(self, "tiered_distribution_map", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionCustomizationArgs:
    def __init__(__self__, *,
                 cloudwrapper_map_migration_title: Optional[str] = None,
                 custom_map_enabled: Optional[bool] = None,
                 custom_map_name: Optional[str] = None,
                 hash_algorithm: Optional[str] = None,
                 location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 map_migration_enabled: Optional[bool] = None,
                 migration_end_date: Optional[str] = None,
                 migration_start_date: Optional[str] = None,
                 migration_within_cw_maps_enabled: Optional[bool] = None,
                 serial_end: Optional[str] = None,
                 serial_start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tier1_title: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudwrapper_map_migration_title is not None:
            pulumi.set(__self__, "cloudwrapper_map_migration_title", cloudwrapper_map_migration_title)
        if custom_map_enabled is not None:
            pulumi.set(__self__, "custom_map_enabled", custom_map_enabled)
        if custom_map_name is not None:
            pulumi.set(__self__, "custom_map_name", custom_map_name)
        if hash_algorithm is not None:
            pulumi.set(__self__, "hash_algorithm", hash_algorithm)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if map_migration_enabled is not None:
            pulumi.set(__self__, "map_migration_enabled", map_migration_enabled)
        if migration_end_date is not None:
            pulumi.set(__self__, "migration_end_date", migration_end_date)
        if migration_start_date is not None:
            pulumi.set(__self__, "migration_start_date", migration_start_date)
        if migration_within_cw_maps_enabled is not None:
            pulumi.set(__self__, "migration_within_cw_maps_enabled", migration_within_cw_maps_enabled)
        if serial_end is not None:
            pulumi.set(__self__, "serial_end", serial_end)
        if serial_start is not None:
            pulumi.set(__self__, "serial_start", serial_start)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tier1_title is not None:
            pulumi.set(__self__, "tier1_title", tier1_title)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudwrapperMapMigrationTitle")
    def cloudwrapper_map_migration_title(self) -> Optional[str]:
        return pulumi.get(self, "cloudwrapper_map_migration_title")

    @cloudwrapper_map_migration_title.setter
    def cloudwrapper_map_migration_title(self, value: Optional[str]):
        pulumi.set(self, "cloudwrapper_map_migration_title", value)

    @property
    @pulumi.getter(name="customMapEnabled")
    def custom_map_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "custom_map_enabled")

    @custom_map_enabled.setter
    def custom_map_enabled(self, value: Optional[bool]):
        pulumi.set(self, "custom_map_enabled", value)

    @property
    @pulumi.getter(name="customMapName")
    def custom_map_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_map_name")

    @custom_map_name.setter
    def custom_map_name(self, value: Optional[str]):
        pulumi.set(self, "custom_map_name", value)

    @property
    @pulumi.getter(name="hashAlgorithm")
    def hash_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hash_algorithm")

    @hash_algorithm.setter
    def hash_algorithm(self, value: Optional[str]):
        pulumi.set(self, "hash_algorithm", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="mapMigrationEnabled")
    def map_migration_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "map_migration_enabled")

    @map_migration_enabled.setter
    def map_migration_enabled(self, value: Optional[bool]):
        pulumi.set(self, "map_migration_enabled", value)

    @property
    @pulumi.getter(name="migrationEndDate")
    def migration_end_date(self) -> Optional[str]:
        return pulumi.get(self, "migration_end_date")

    @migration_end_date.setter
    def migration_end_date(self, value: Optional[str]):
        pulumi.set(self, "migration_end_date", value)

    @property
    @pulumi.getter(name="migrationStartDate")
    def migration_start_date(self) -> Optional[str]:
        return pulumi.get(self, "migration_start_date")

    @migration_start_date.setter
    def migration_start_date(self, value: Optional[str]):
        pulumi.set(self, "migration_start_date", value)

    @property
    @pulumi.getter(name="migrationWithinCwMapsEnabled")
    def migration_within_cw_maps_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "migration_within_cw_maps_enabled")

    @migration_within_cw_maps_enabled.setter
    def migration_within_cw_maps_enabled(self, value: Optional[bool]):
        pulumi.set(self, "migration_within_cw_maps_enabled", value)

    @property
    @pulumi.getter(name="serialEnd")
    def serial_end(self) -> Optional[str]:
        return pulumi.get(self, "serial_end")

    @serial_end.setter
    def serial_end(self, value: Optional[str]):
        pulumi.set(self, "serial_end", value)

    @property
    @pulumi.getter(name="serialStart")
    def serial_start(self) -> Optional[str]:
        return pulumi.get(self, "serial_start")

    @serial_start.setter
    def serial_start(self, value: Optional[str]):
        pulumi.set(self, "serial_start", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="tier1Title")
    def tier1_title(self) -> Optional[str]:
        return pulumi.get(self, "tier1_title")

    @tier1_title.setter
    def tier1_title(self, value: Optional[str]):
        pulumi.set(self, "tier1_title", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTimeoutArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorUidConfigurationArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 legal_text: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if legal_text is not None:
            pulumi.set(__self__, "legal_text", legal_text)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @extract_location.setter
    def extract_location(self, value: Optional[str]):
        pulumi.set(self, "extract_location", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter(name="legalText")
    def legal_text(self) -> Optional[str]:
        return pulumi.get(self, "legal_text")

    @legal_text.setter
    def legal_text(self, value: Optional[str]):
        pulumi.set(self, "legal_text", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @query_parameter_name.setter
    def query_parameter_name(self, value: Optional[str]):
        pulumi.set(self, "query_parameter_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[str]):
        pulumi.set(self, "variable_name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorValidateEntityTagArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenArgs:
    def __init__(__self__, *,
                 enable_es256: Optional[bool] = None,
                 enable_rs256: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 jwt: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable_es256 is not None:
            pulumi.set(__self__, "enable_es256", enable_es256)
        if enable_rs256 is not None:
            pulumi.set(__self__, "enable_rs256", enable_rs256)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if jwt is not None:
            pulumi.set(__self__, "jwt", jwt)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="enableEs256")
    def enable_es256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_es256")

    @enable_es256.setter
    def enable_es256(self, value: Optional[bool]):
        pulumi.set(self, "enable_es256", value)

    @property
    @pulumi.getter(name="enableRs256")
    def enable_rs256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_rs256")

    @enable_rs256.setter
    def enable_rs256(self, value: Optional[bool]):
        pulumi.set(self, "enable_rs256", value)

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @extract_location.setter
    def extract_location(self, value: Optional[str]):
        pulumi.set(self, "extract_location", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def jwt(self) -> Optional[str]:
        return pulumi.get(self, "jwt")

    @jwt.setter
    def jwt(self, value: Optional[str]):
        pulumi.set(self, "jwt", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @query_parameter_name.setter
    def query_parameter_name(self, value: Optional[str]):
        pulumi.set(self, "query_parameter_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenForDcpArgs:
    def __init__(__self__, *,
                 authorizations: Optional[str] = None,
                 client_id: Optional[str] = None,
                 custom_header: Optional[bool] = None,
                 enable_es256: Optional[bool] = None,
                 enable_rs256: Optional[bool] = None,
                 extract_authorizations: Optional[bool] = None,
                 extract_client_id: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 extract_user_name: Optional[bool] = None,
                 header_name: Optional[str] = None,
                 jwt: Optional[str] = None,
                 locked: Optional[bool] = None,
                 primary_location: Optional[str] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 user_name: Optional[str] = None,
                 uuid: Optional[str] = None):
        if authorizations is not None:
            pulumi.set(__self__, "authorizations", authorizations)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if custom_header is not None:
            pulumi.set(__self__, "custom_header", custom_header)
        if enable_es256 is not None:
            pulumi.set(__self__, "enable_es256", enable_es256)
        if enable_rs256 is not None:
            pulumi.set(__self__, "enable_rs256", enable_rs256)
        if extract_authorizations is not None:
            pulumi.set(__self__, "extract_authorizations", extract_authorizations)
        if extract_client_id is not None:
            pulumi.set(__self__, "extract_client_id", extract_client_id)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if extract_user_name is not None:
            pulumi.set(__self__, "extract_user_name", extract_user_name)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if jwt is not None:
            pulumi.set(__self__, "jwt", jwt)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if primary_location is not None:
            pulumi.set(__self__, "primary_location", primary_location)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def authorizations(self) -> Optional[str]:
        return pulumi.get(self, "authorizations")

    @authorizations.setter
    def authorizations(self, value: Optional[str]):
        pulumi.set(self, "authorizations", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="customHeader")
    def custom_header(self) -> Optional[bool]:
        return pulumi.get(self, "custom_header")

    @custom_header.setter
    def custom_header(self, value: Optional[bool]):
        pulumi.set(self, "custom_header", value)

    @property
    @pulumi.getter(name="enableEs256")
    def enable_es256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_es256")

    @enable_es256.setter
    def enable_es256(self, value: Optional[bool]):
        pulumi.set(self, "enable_es256", value)

    @property
    @pulumi.getter(name="enableRs256")
    def enable_rs256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_rs256")

    @enable_rs256.setter
    def enable_rs256(self, value: Optional[bool]):
        pulumi.set(self, "enable_rs256", value)

    @property
    @pulumi.getter(name="extractAuthorizations")
    def extract_authorizations(self) -> Optional[bool]:
        return pulumi.get(self, "extract_authorizations")

    @extract_authorizations.setter
    def extract_authorizations(self, value: Optional[bool]):
        pulumi.set(self, "extract_authorizations", value)

    @property
    @pulumi.getter(name="extractClientId")
    def extract_client_id(self) -> Optional[bool]:
        return pulumi.get(self, "extract_client_id")

    @extract_client_id.setter
    def extract_client_id(self, value: Optional[bool]):
        pulumi.set(self, "extract_client_id", value)

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @extract_location.setter
    def extract_location(self, value: Optional[str]):
        pulumi.set(self, "extract_location", value)

    @property
    @pulumi.getter(name="extractUserName")
    def extract_user_name(self) -> Optional[bool]:
        return pulumi.get(self, "extract_user_name")

    @extract_user_name.setter
    def extract_user_name(self, value: Optional[bool]):
        pulumi.set(self, "extract_user_name", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def jwt(self) -> Optional[str]:
        return pulumi.get(self, "jwt")

    @jwt.setter
    def jwt(self, value: Optional[str]):
        pulumi.set(self, "jwt", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="primaryLocation")
    def primary_location(self) -> Optional[str]:
        return pulumi.get(self, "primary_location")

    @primary_location.setter
    def primary_location(self, value: Optional[str]):
        pulumi.set(self, "primary_location", value)

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @query_parameter_name.setter
    def query_parameter_name(self, value: Optional[str]):
        pulumi.set(self, "query_parameter_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationArgs:
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 escape_hmac_inputs: Optional[bool] = None,
                 failure_response: Optional[bool] = None,
                 ignore_query_string: Optional[bool] = None,
                 key: Optional[str] = None,
                 location: Optional[str] = None,
                 location_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 salt: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 transition_key: Optional[str] = None,
                 use_advanced: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if escape_hmac_inputs is not None:
            pulumi.set(__self__, "escape_hmac_inputs", escape_hmac_inputs)
        if failure_response is not None:
            pulumi.set(__self__, "failure_response", failure_response)
        if ignore_query_string is not None:
            pulumi.set(__self__, "ignore_query_string", ignore_query_string)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if salt is not None:
            pulumi.set(__self__, "salt", salt)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if transition_key is not None:
            pulumi.set(__self__, "transition_key", transition_key)
        if use_advanced is not None:
            pulumi.set(__self__, "use_advanced", use_advanced)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="escapeHmacInputs")
    def escape_hmac_inputs(self) -> Optional[bool]:
        return pulumi.get(self, "escape_hmac_inputs")

    @escape_hmac_inputs.setter
    def escape_hmac_inputs(self, value: Optional[bool]):
        pulumi.set(self, "escape_hmac_inputs", value)

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional[bool]:
        return pulumi.get(self, "failure_response")

    @failure_response.setter
    def failure_response(self, value: Optional[bool]):
        pulumi.set(self, "failure_response", value)

    @property
    @pulumi.getter(name="ignoreQueryString")
    def ignore_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_query_string")

    @ignore_query_string.setter
    def ignore_query_string(self, value: Optional[bool]):
        pulumi.set(self, "ignore_query_string", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[str]:
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[str]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def salt(self) -> Optional[str]:
        return pulumi.get(self, "salt")

    @salt.setter
    def salt(self, value: Optional[str]):
        pulumi.set(self, "salt", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="transitionKey")
    def transition_key(self) -> Optional[str]:
        return pulumi.get(self, "transition_key")

    @transition_key.setter
    def transition_key(self, value: Optional[str]):
        pulumi.set(self, "transition_key", value)

    @property
    @pulumi.getter(name="useAdvanced")
    def use_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "use_advanced")

    @use_advanced.setter
    def use_advanced(self, value: Optional[bool]):
        pulumi.set(self, "use_advanced", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomArgs:
    def __init__(__self__, *,
                 access_title: Optional[str] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 custom_cookie_domain: Optional[str] = None,
                 domain_config: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_auto_prolong: Optional[bool] = None,
                 session_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_assets_paths: Optional[Sequence[str]] = None,
                 waiting_room_path: Optional[str] = None,
                 waiting_room_title: Optional[str] = None):
        if access_title is not None:
            pulumi.set(__self__, "access_title", access_title)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if custom_cookie_domain is not None:
            pulumi.set(__self__, "custom_cookie_domain", custom_cookie_domain)
        if domain_config is not None:
            pulumi.set(__self__, "domain_config", domain_config)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if session_auto_prolong is not None:
            pulumi.set(__self__, "session_auto_prolong", session_auto_prolong)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if waiting_room_assets_paths is not None:
            pulumi.set(__self__, "waiting_room_assets_paths", waiting_room_assets_paths)
        if waiting_room_path is not None:
            pulumi.set(__self__, "waiting_room_path", waiting_room_path)
        if waiting_room_title is not None:
            pulumi.set(__self__, "waiting_room_title", waiting_room_title)

    @property
    @pulumi.getter(name="accessTitle")
    def access_title(self) -> Optional[str]:
        return pulumi.get(self, "access_title")

    @access_title.setter
    def access_title(self, value: Optional[str]):
        pulumi.set(self, "access_title", value)

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @cloudlet_shared_policy.setter
    def cloudlet_shared_policy(self, value: Optional[int]):
        pulumi.set(self, "cloudlet_shared_policy", value)

    @property
    @pulumi.getter(name="customCookieDomain")
    def custom_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_cookie_domain")

    @custom_cookie_domain.setter
    def custom_cookie_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_cookie_domain", value)

    @property
    @pulumi.getter(name="domainConfig")
    def domain_config(self) -> Optional[str]:
        return pulumi.get(self, "domain_config")

    @domain_config.setter
    def domain_config(self, value: Optional[str]):
        pulumi.set(self, "domain_config", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="sessionAutoProlong")
    def session_auto_prolong(self) -> Optional[bool]:
        return pulumi.get(self, "session_auto_prolong")

    @session_auto_prolong.setter
    def session_auto_prolong(self, value: Optional[bool]):
        pulumi.set(self, "session_auto_prolong", value)

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[int]:
        return pulumi.get(self, "session_duration")

    @session_duration.setter
    def session_duration(self, value: Optional[int]):
        pulumi.set(self, "session_duration", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="waitingRoomAssetsPaths")
    def waiting_room_assets_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "waiting_room_assets_paths")

    @waiting_room_assets_paths.setter
    def waiting_room_assets_paths(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "waiting_room_assets_paths", value)

    @property
    @pulumi.getter(name="waitingRoomPath")
    def waiting_room_path(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_path")

    @waiting_room_path.setter
    def waiting_room_path(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_path", value)

    @property
    @pulumi.getter(name="waitingRoomTitle")
    def waiting_room_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_title")

    @waiting_room_title.setter
    def waiting_room_title(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_title", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomWithEdgeWorkersArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationArgs:
    def __init__(__self__, *,
                 allowed_user_cookie_advanced: Optional[bool] = None,
                 allowed_user_cookie_automatic_salt: Optional[bool] = None,
                 allowed_user_cookie_domain: Optional[str] = None,
                 allowed_user_cookie_domain_type: Optional[str] = None,
                 allowed_user_cookie_duration: Optional[int] = None,
                 allowed_user_cookie_enabled: Optional[bool] = None,
                 allowed_user_cookie_http_only: Optional[bool] = None,
                 allowed_user_cookie_label: Optional[str] = None,
                 allowed_user_cookie_management_title: Optional[str] = None,
                 allowed_user_cookie_refresh: Optional[bool] = None,
                 allowed_user_cookie_salt: Optional[str] = None,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationCloudletPolicyArgs'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 user_identification_by_cookie: Optional[bool] = None,
                 user_identification_by_headers: Optional[bool] = None,
                 user_identification_by_ip: Optional[bool] = None,
                 user_identification_by_params: Optional[bool] = None,
                 user_identification_key_cookie: Optional[str] = None,
                 user_identification_key_headers: Optional[Sequence[str]] = None,
                 user_identification_key_params: Optional[Sequence[str]] = None,
                 user_identification_title: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_cache_ttl: Optional[int] = None,
                 waiting_room_cookie_advanced: Optional[bool] = None,
                 waiting_room_cookie_automatic_salt: Optional[bool] = None,
                 waiting_room_cookie_domain: Optional[str] = None,
                 waiting_room_cookie_domain_type: Optional[str] = None,
                 waiting_room_cookie_duration: Optional[int] = None,
                 waiting_room_cookie_enabled: Optional[bool] = None,
                 waiting_room_cookie_http_only: Optional[bool] = None,
                 waiting_room_cookie_label: Optional[str] = None,
                 waiting_room_cookie_management_title: Optional[str] = None,
                 waiting_room_cookie_salt: Optional[str] = None,
                 waiting_room_cookie_share_label: Optional[bool] = None,
                 waiting_room_cp_code: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeArgs'] = None,
                 waiting_room_directory: Optional[str] = None,
                 waiting_room_management_title: Optional[str] = None,
                 waiting_room_net_storage: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomNetStorageArgs'] = None,
                 waiting_room_status_code: Optional[int] = None,
                 waiting_room_use_cp_code: Optional[bool] = None):
        if allowed_user_cookie_advanced is not None:
            pulumi.set(__self__, "allowed_user_cookie_advanced", allowed_user_cookie_advanced)
        if allowed_user_cookie_automatic_salt is not None:
            pulumi.set(__self__, "allowed_user_cookie_automatic_salt", allowed_user_cookie_automatic_salt)
        if allowed_user_cookie_domain is not None:
            pulumi.set(__self__, "allowed_user_cookie_domain", allowed_user_cookie_domain)
        if allowed_user_cookie_domain_type is not None:
            pulumi.set(__self__, "allowed_user_cookie_domain_type", allowed_user_cookie_domain_type)
        if allowed_user_cookie_duration is not None:
            pulumi.set(__self__, "allowed_user_cookie_duration", allowed_user_cookie_duration)
        if allowed_user_cookie_enabled is not None:
            pulumi.set(__self__, "allowed_user_cookie_enabled", allowed_user_cookie_enabled)
        if allowed_user_cookie_http_only is not None:
            pulumi.set(__self__, "allowed_user_cookie_http_only", allowed_user_cookie_http_only)
        if allowed_user_cookie_label is not None:
            pulumi.set(__self__, "allowed_user_cookie_label", allowed_user_cookie_label)
        if allowed_user_cookie_management_title is not None:
            pulumi.set(__self__, "allowed_user_cookie_management_title", allowed_user_cookie_management_title)
        if allowed_user_cookie_refresh is not None:
            pulumi.set(__self__, "allowed_user_cookie_refresh", allowed_user_cookie_refresh)
        if allowed_user_cookie_salt is not None:
            pulumi.set(__self__, "allowed_user_cookie_salt", allowed_user_cookie_salt)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if user_identification_by_cookie is not None:
            pulumi.set(__self__, "user_identification_by_cookie", user_identification_by_cookie)
        if user_identification_by_headers is not None:
            pulumi.set(__self__, "user_identification_by_headers", user_identification_by_headers)
        if user_identification_by_ip is not None:
            pulumi.set(__self__, "user_identification_by_ip", user_identification_by_ip)
        if user_identification_by_params is not None:
            pulumi.set(__self__, "user_identification_by_params", user_identification_by_params)
        if user_identification_key_cookie is not None:
            pulumi.set(__self__, "user_identification_key_cookie", user_identification_key_cookie)
        if user_identification_key_headers is not None:
            pulumi.set(__self__, "user_identification_key_headers", user_identification_key_headers)
        if user_identification_key_params is not None:
            pulumi.set(__self__, "user_identification_key_params", user_identification_key_params)
        if user_identification_title is not None:
            pulumi.set(__self__, "user_identification_title", user_identification_title)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if waiting_room_cache_ttl is not None:
            pulumi.set(__self__, "waiting_room_cache_ttl", waiting_room_cache_ttl)
        if waiting_room_cookie_advanced is not None:
            pulumi.set(__self__, "waiting_room_cookie_advanced", waiting_room_cookie_advanced)
        if waiting_room_cookie_automatic_salt is not None:
            pulumi.set(__self__, "waiting_room_cookie_automatic_salt", waiting_room_cookie_automatic_salt)
        if waiting_room_cookie_domain is not None:
            pulumi.set(__self__, "waiting_room_cookie_domain", waiting_room_cookie_domain)
        if waiting_room_cookie_domain_type is not None:
            pulumi.set(__self__, "waiting_room_cookie_domain_type", waiting_room_cookie_domain_type)
        if waiting_room_cookie_duration is not None:
            pulumi.set(__self__, "waiting_room_cookie_duration", waiting_room_cookie_duration)
        if waiting_room_cookie_enabled is not None:
            pulumi.set(__self__, "waiting_room_cookie_enabled", waiting_room_cookie_enabled)
        if waiting_room_cookie_http_only is not None:
            pulumi.set(__self__, "waiting_room_cookie_http_only", waiting_room_cookie_http_only)
        if waiting_room_cookie_label is not None:
            pulumi.set(__self__, "waiting_room_cookie_label", waiting_room_cookie_label)
        if waiting_room_cookie_management_title is not None:
            pulumi.set(__self__, "waiting_room_cookie_management_title", waiting_room_cookie_management_title)
        if waiting_room_cookie_salt is not None:
            pulumi.set(__self__, "waiting_room_cookie_salt", waiting_room_cookie_salt)
        if waiting_room_cookie_share_label is not None:
            pulumi.set(__self__, "waiting_room_cookie_share_label", waiting_room_cookie_share_label)
        if waiting_room_cp_code is not None:
            pulumi.set(__self__, "waiting_room_cp_code", waiting_room_cp_code)
        if waiting_room_directory is not None:
            pulumi.set(__self__, "waiting_room_directory", waiting_room_directory)
        if waiting_room_management_title is not None:
            pulumi.set(__self__, "waiting_room_management_title", waiting_room_management_title)
        if waiting_room_net_storage is not None:
            pulumi.set(__self__, "waiting_room_net_storage", waiting_room_net_storage)
        if waiting_room_status_code is not None:
            pulumi.set(__self__, "waiting_room_status_code", waiting_room_status_code)
        if waiting_room_use_cp_code is not None:
            pulumi.set(__self__, "waiting_room_use_cp_code", waiting_room_use_cp_code)

    @property
    @pulumi.getter(name="allowedUserCookieAdvanced")
    def allowed_user_cookie_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_advanced")

    @allowed_user_cookie_advanced.setter
    def allowed_user_cookie_advanced(self, value: Optional[bool]):
        pulumi.set(self, "allowed_user_cookie_advanced", value)

    @property
    @pulumi.getter(name="allowedUserCookieAutomaticSalt")
    def allowed_user_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_automatic_salt")

    @allowed_user_cookie_automatic_salt.setter
    def allowed_user_cookie_automatic_salt(self, value: Optional[bool]):
        pulumi.set(self, "allowed_user_cookie_automatic_salt", value)

    @property
    @pulumi.getter(name="allowedUserCookieDomain")
    def allowed_user_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_domain")

    @allowed_user_cookie_domain.setter
    def allowed_user_cookie_domain(self, value: Optional[str]):
        pulumi.set(self, "allowed_user_cookie_domain", value)

    @property
    @pulumi.getter(name="allowedUserCookieDomainType")
    def allowed_user_cookie_domain_type(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_domain_type")

    @allowed_user_cookie_domain_type.setter
    def allowed_user_cookie_domain_type(self, value: Optional[str]):
        pulumi.set(self, "allowed_user_cookie_domain_type", value)

    @property
    @pulumi.getter(name="allowedUserCookieDuration")
    def allowed_user_cookie_duration(self) -> Optional[int]:
        return pulumi.get(self, "allowed_user_cookie_duration")

    @allowed_user_cookie_duration.setter
    def allowed_user_cookie_duration(self, value: Optional[int]):
        pulumi.set(self, "allowed_user_cookie_duration", value)

    @property
    @pulumi.getter(name="allowedUserCookieEnabled")
    def allowed_user_cookie_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_enabled")

    @allowed_user_cookie_enabled.setter
    def allowed_user_cookie_enabled(self, value: Optional[bool]):
        pulumi.set(self, "allowed_user_cookie_enabled", value)

    @property
    @pulumi.getter(name="allowedUserCookieHttpOnly")
    def allowed_user_cookie_http_only(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_http_only")

    @allowed_user_cookie_http_only.setter
    def allowed_user_cookie_http_only(self, value: Optional[bool]):
        pulumi.set(self, "allowed_user_cookie_http_only", value)

    @property
    @pulumi.getter(name="allowedUserCookieLabel")
    def allowed_user_cookie_label(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_label")

    @allowed_user_cookie_label.setter
    def allowed_user_cookie_label(self, value: Optional[str]):
        pulumi.set(self, "allowed_user_cookie_label", value)

    @property
    @pulumi.getter(name="allowedUserCookieManagementTitle")
    def allowed_user_cookie_management_title(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_management_title")

    @allowed_user_cookie_management_title.setter
    def allowed_user_cookie_management_title(self, value: Optional[str]):
        pulumi.set(self, "allowed_user_cookie_management_title", value)

    @property
    @pulumi.getter(name="allowedUserCookieRefresh")
    def allowed_user_cookie_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_refresh")

    @allowed_user_cookie_refresh.setter
    def allowed_user_cookie_refresh(self, value: Optional[bool]):
        pulumi.set(self, "allowed_user_cookie_refresh", value)

    @property
    @pulumi.getter(name="allowedUserCookieSalt")
    def allowed_user_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_salt")

    @allowed_user_cookie_salt.setter
    def allowed_user_cookie_salt(self, value: Optional[str]):
        pulumi.set(self, "allowed_user_cookie_salt", value)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="userIdentificationByCookie")
    def user_identification_by_cookie(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_cookie")

    @user_identification_by_cookie.setter
    def user_identification_by_cookie(self, value: Optional[bool]):
        pulumi.set(self, "user_identification_by_cookie", value)

    @property
    @pulumi.getter(name="userIdentificationByHeaders")
    def user_identification_by_headers(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_headers")

    @user_identification_by_headers.setter
    def user_identification_by_headers(self, value: Optional[bool]):
        pulumi.set(self, "user_identification_by_headers", value)

    @property
    @pulumi.getter(name="userIdentificationByIp")
    def user_identification_by_ip(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_ip")

    @user_identification_by_ip.setter
    def user_identification_by_ip(self, value: Optional[bool]):
        pulumi.set(self, "user_identification_by_ip", value)

    @property
    @pulumi.getter(name="userIdentificationByParams")
    def user_identification_by_params(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_params")

    @user_identification_by_params.setter
    def user_identification_by_params(self, value: Optional[bool]):
        pulumi.set(self, "user_identification_by_params", value)

    @property
    @pulumi.getter(name="userIdentificationKeyCookie")
    def user_identification_key_cookie(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_key_cookie")

    @user_identification_key_cookie.setter
    def user_identification_key_cookie(self, value: Optional[str]):
        pulumi.set(self, "user_identification_key_cookie", value)

    @property
    @pulumi.getter(name="userIdentificationKeyHeaders")
    def user_identification_key_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_headers")

    @user_identification_key_headers.setter
    def user_identification_key_headers(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "user_identification_key_headers", value)

    @property
    @pulumi.getter(name="userIdentificationKeyParams")
    def user_identification_key_params(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_params")

    @user_identification_key_params.setter
    def user_identification_key_params(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "user_identification_key_params", value)

    @property
    @pulumi.getter(name="userIdentificationTitle")
    def user_identification_title(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_title")

    @user_identification_title.setter
    def user_identification_title(self, value: Optional[str]):
        pulumi.set(self, "user_identification_title", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="waitingRoomCacheTtl")
    def waiting_room_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_cache_ttl")

    @waiting_room_cache_ttl.setter
    def waiting_room_cache_ttl(self, value: Optional[int]):
        pulumi.set(self, "waiting_room_cache_ttl", value)

    @property
    @pulumi.getter(name="waitingRoomCookieAdvanced")
    def waiting_room_cookie_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_advanced")

    @waiting_room_cookie_advanced.setter
    def waiting_room_cookie_advanced(self, value: Optional[bool]):
        pulumi.set(self, "waiting_room_cookie_advanced", value)

    @property
    @pulumi.getter(name="waitingRoomCookieAutomaticSalt")
    def waiting_room_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_automatic_salt")

    @waiting_room_cookie_automatic_salt.setter
    def waiting_room_cookie_automatic_salt(self, value: Optional[bool]):
        pulumi.set(self, "waiting_room_cookie_automatic_salt", value)

    @property
    @pulumi.getter(name="waitingRoomCookieDomain")
    def waiting_room_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_domain")

    @waiting_room_cookie_domain.setter
    def waiting_room_cookie_domain(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_cookie_domain", value)

    @property
    @pulumi.getter(name="waitingRoomCookieDomainType")
    def waiting_room_cookie_domain_type(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_domain_type")

    @waiting_room_cookie_domain_type.setter
    def waiting_room_cookie_domain_type(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_cookie_domain_type", value)

    @property
    @pulumi.getter(name="waitingRoomCookieDuration")
    def waiting_room_cookie_duration(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_cookie_duration")

    @waiting_room_cookie_duration.setter
    def waiting_room_cookie_duration(self, value: Optional[int]):
        pulumi.set(self, "waiting_room_cookie_duration", value)

    @property
    @pulumi.getter(name="waitingRoomCookieEnabled")
    def waiting_room_cookie_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_enabled")

    @waiting_room_cookie_enabled.setter
    def waiting_room_cookie_enabled(self, value: Optional[bool]):
        pulumi.set(self, "waiting_room_cookie_enabled", value)

    @property
    @pulumi.getter(name="waitingRoomCookieHttpOnly")
    def waiting_room_cookie_http_only(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_http_only")

    @waiting_room_cookie_http_only.setter
    def waiting_room_cookie_http_only(self, value: Optional[bool]):
        pulumi.set(self, "waiting_room_cookie_http_only", value)

    @property
    @pulumi.getter(name="waitingRoomCookieLabel")
    def waiting_room_cookie_label(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_label")

    @waiting_room_cookie_label.setter
    def waiting_room_cookie_label(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_cookie_label", value)

    @property
    @pulumi.getter(name="waitingRoomCookieManagementTitle")
    def waiting_room_cookie_management_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_management_title")

    @waiting_room_cookie_management_title.setter
    def waiting_room_cookie_management_title(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_cookie_management_title", value)

    @property
    @pulumi.getter(name="waitingRoomCookieSalt")
    def waiting_room_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_salt")

    @waiting_room_cookie_salt.setter
    def waiting_room_cookie_salt(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_cookie_salt", value)

    @property
    @pulumi.getter(name="waitingRoomCookieShareLabel")
    def waiting_room_cookie_share_label(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_share_label")

    @waiting_room_cookie_share_label.setter
    def waiting_room_cookie_share_label(self, value: Optional[bool]):
        pulumi.set(self, "waiting_room_cookie_share_label", value)

    @property
    @pulumi.getter(name="waitingRoomCpCode")
    def waiting_room_cp_code(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeArgs']:
        return pulumi.get(self, "waiting_room_cp_code")

    @waiting_room_cp_code.setter
    def waiting_room_cp_code(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeArgs']):
        pulumi.set(self, "waiting_room_cp_code", value)

    @property
    @pulumi.getter(name="waitingRoomDirectory")
    def waiting_room_directory(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_directory")

    @waiting_room_directory.setter
    def waiting_room_directory(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_directory", value)

    @property
    @pulumi.getter(name="waitingRoomManagementTitle")
    def waiting_room_management_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_management_title")

    @waiting_room_management_title.setter
    def waiting_room_management_title(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_management_title", value)

    @property
    @pulumi.getter(name="waitingRoomNetStorage")
    def waiting_room_net_storage(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomNetStorageArgs']:
        return pulumi.get(self, "waiting_room_net_storage")

    @waiting_room_net_storage.setter
    def waiting_room_net_storage(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomNetStorageArgs']):
        pulumi.set(self, "waiting_room_net_storage", value)

    @property
    @pulumi.getter(name="waitingRoomStatusCode")
    def waiting_room_status_code(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_status_code")

    @waiting_room_status_code.setter
    def waiting_room_status_code(self, value: Optional[int]):
        pulumi.set(self, "waiting_room_status_code", value)

    @property
    @pulumi.getter(name="waitingRoomUseCpCode")
    def waiting_room_use_cp_code(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_use_cp_code")

    @waiting_room_use_cp_code.setter
    def waiting_room_use_cp_code(self, value: Optional[bool]):
        pulumi.set(self, "waiting_room_use_cp_code", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoArgs:
    def __init__(__self__, *,
                 access_title: Optional[str] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 custom_cookie_domain: Optional[str] = None,
                 domain_config: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_auto_prolong: Optional[bool] = None,
                 session_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_assets_paths: Optional[Sequence[str]] = None,
                 waiting_room_path: Optional[str] = None,
                 waiting_room_title: Optional[str] = None):
        if access_title is not None:
            pulumi.set(__self__, "access_title", access_title)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if custom_cookie_domain is not None:
            pulumi.set(__self__, "custom_cookie_domain", custom_cookie_domain)
        if domain_config is not None:
            pulumi.set(__self__, "domain_config", domain_config)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if session_auto_prolong is not None:
            pulumi.set(__self__, "session_auto_prolong", session_auto_prolong)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if waiting_room_assets_paths is not None:
            pulumi.set(__self__, "waiting_room_assets_paths", waiting_room_assets_paths)
        if waiting_room_path is not None:
            pulumi.set(__self__, "waiting_room_path", waiting_room_path)
        if waiting_room_title is not None:
            pulumi.set(__self__, "waiting_room_title", waiting_room_title)

    @property
    @pulumi.getter(name="accessTitle")
    def access_title(self) -> Optional[str]:
        return pulumi.get(self, "access_title")

    @access_title.setter
    def access_title(self, value: Optional[str]):
        pulumi.set(self, "access_title", value)

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @cloudlet_shared_policy.setter
    def cloudlet_shared_policy(self, value: Optional[int]):
        pulumi.set(self, "cloudlet_shared_policy", value)

    @property
    @pulumi.getter(name="customCookieDomain")
    def custom_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_cookie_domain")

    @custom_cookie_domain.setter
    def custom_cookie_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_cookie_domain", value)

    @property
    @pulumi.getter(name="domainConfig")
    def domain_config(self) -> Optional[str]:
        return pulumi.get(self, "domain_config")

    @domain_config.setter
    def domain_config(self, value: Optional[str]):
        pulumi.set(self, "domain_config", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="sessionAutoProlong")
    def session_auto_prolong(self) -> Optional[bool]:
        return pulumi.get(self, "session_auto_prolong")

    @session_auto_prolong.setter
    def session_auto_prolong(self, value: Optional[bool]):
        pulumi.set(self, "session_auto_prolong", value)

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[int]:
        return pulumi.get(self, "session_duration")

    @session_duration.setter
    def session_duration(self, value: Optional[int]):
        pulumi.set(self, "session_duration", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="waitingRoomAssetsPaths")
    def waiting_room_assets_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "waiting_room_assets_paths")

    @waiting_room_assets_paths.setter
    def waiting_room_assets_paths(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "waiting_room_assets_paths", value)

    @property
    @pulumi.getter(name="waitingRoomPath")
    def waiting_room_path(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_path")

    @waiting_room_path.setter
    def waiting_room_path(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_path", value)

    @property
    @pulumi.getter(name="waitingRoomTitle")
    def waiting_room_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_title")

    @waiting_room_title.setter
    def waiting_room_title(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_title", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoStandaloneArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomNetStorageArgs:
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @cp_code.setter
    def cp_code(self, value: Optional[int]):
        pulumi.set(self, "cp_code", value)

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @download_domain_name.setter
    def download_domain_name(self, value: Optional[str]):
        pulumi.set(self, "download_domain_name", value)

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")

    @g2o_token.setter
    def g2o_token(self, value: Optional[str]):
        pulumi.set(self, "g2o_token", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorWatermarkingArgs:
    def __init__(__self__, *,
                 ab_variant_location: Optional[str] = None,
                 decryption_password1: Optional[str] = None,
                 decryption_password2: Optional[str] = None,
                 decryption_password_id1: Optional[str] = None,
                 decryption_password_id2: Optional[str] = None,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 miscellaneous_settings_title: Optional[str] = None,
                 pattern_decryption_enable: Optional[bool] = None,
                 pattern_encryption_title: Optional[str] = None,
                 signature_verification_enable: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_signing_title: Optional[str] = None,
                 use_original_as_a: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 verification_key_id1: Optional[str] = None,
                 verification_key_id2: Optional[str] = None,
                 verification_public_key1: Optional[str] = None,
                 verification_public_key2: Optional[str] = None):
        if ab_variant_location is not None:
            pulumi.set(__self__, "ab_variant_location", ab_variant_location)
        if decryption_password1 is not None:
            pulumi.set(__self__, "decryption_password1", decryption_password1)
        if decryption_password2 is not None:
            pulumi.set(__self__, "decryption_password2", decryption_password2)
        if decryption_password_id1 is not None:
            pulumi.set(__self__, "decryption_password_id1", decryption_password_id1)
        if decryption_password_id2 is not None:
            pulumi.set(__self__, "decryption_password_id2", decryption_password_id2)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if miscellaneous_settings_title is not None:
            pulumi.set(__self__, "miscellaneous_settings_title", miscellaneous_settings_title)
        if pattern_decryption_enable is not None:
            pulumi.set(__self__, "pattern_decryption_enable", pattern_decryption_enable)
        if pattern_encryption_title is not None:
            pulumi.set(__self__, "pattern_encryption_title", pattern_encryption_title)
        if signature_verification_enable is not None:
            pulumi.set(__self__, "signature_verification_enable", signature_verification_enable)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if token_signing_title is not None:
            pulumi.set(__self__, "token_signing_title", token_signing_title)
        if use_original_as_a is not None:
            pulumi.set(__self__, "use_original_as_a", use_original_as_a)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if verification_key_id1 is not None:
            pulumi.set(__self__, "verification_key_id1", verification_key_id1)
        if verification_key_id2 is not None:
            pulumi.set(__self__, "verification_key_id2", verification_key_id2)
        if verification_public_key1 is not None:
            pulumi.set(__self__, "verification_public_key1", verification_public_key1)
        if verification_public_key2 is not None:
            pulumi.set(__self__, "verification_public_key2", verification_public_key2)

    @property
    @pulumi.getter(name="abVariantLocation")
    def ab_variant_location(self) -> Optional[str]:
        return pulumi.get(self, "ab_variant_location")

    @ab_variant_location.setter
    def ab_variant_location(self, value: Optional[str]):
        pulumi.set(self, "ab_variant_location", value)

    @property
    @pulumi.getter(name="decryptionPassword1")
    def decryption_password1(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password1")

    @decryption_password1.setter
    def decryption_password1(self, value: Optional[str]):
        pulumi.set(self, "decryption_password1", value)

    @property
    @pulumi.getter(name="decryptionPassword2")
    def decryption_password2(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password2")

    @decryption_password2.setter
    def decryption_password2(self, value: Optional[str]):
        pulumi.set(self, "decryption_password2", value)

    @property
    @pulumi.getter(name="decryptionPasswordId1")
    def decryption_password_id1(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password_id1")

    @decryption_password_id1.setter
    def decryption_password_id1(self, value: Optional[str]):
        pulumi.set(self, "decryption_password_id1", value)

    @property
    @pulumi.getter(name="decryptionPasswordId2")
    def decryption_password_id2(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password_id2")

    @decryption_password_id2.setter
    def decryption_password_id2(self, value: Optional[str]):
        pulumi.set(self, "decryption_password_id2", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[bool]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="miscellaneousSettingsTitle")
    def miscellaneous_settings_title(self) -> Optional[str]:
        return pulumi.get(self, "miscellaneous_settings_title")

    @miscellaneous_settings_title.setter
    def miscellaneous_settings_title(self, value: Optional[str]):
        pulumi.set(self, "miscellaneous_settings_title", value)

    @property
    @pulumi.getter(name="patternDecryptionEnable")
    def pattern_decryption_enable(self) -> Optional[bool]:
        return pulumi.get(self, "pattern_decryption_enable")

    @pattern_decryption_enable.setter
    def pattern_decryption_enable(self, value: Optional[bool]):
        pulumi.set(self, "pattern_decryption_enable", value)

    @property
    @pulumi.getter(name="patternEncryptionTitle")
    def pattern_encryption_title(self) -> Optional[str]:
        return pulumi.get(self, "pattern_encryption_title")

    @pattern_encryption_title.setter
    def pattern_encryption_title(self, value: Optional[str]):
        pulumi.set(self, "pattern_encryption_title", value)

    @property
    @pulumi.getter(name="signatureVerificationEnable")
    def signature_verification_enable(self) -> Optional[bool]:
        return pulumi.get(self, "signature_verification_enable")

    @signature_verification_enable.setter
    def signature_verification_enable(self, value: Optional[bool]):
        pulumi.set(self, "signature_verification_enable", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="tokenSigningTitle")
    def token_signing_title(self) -> Optional[str]:
        return pulumi.get(self, "token_signing_title")

    @token_signing_title.setter
    def token_signing_title(self, value: Optional[str]):
        pulumi.set(self, "token_signing_title", value)

    @property
    @pulumi.getter(name="useOriginalAsA")
    def use_original_as_a(self) -> Optional[bool]:
        return pulumi.get(self, "use_original_as_a")

    @use_original_as_a.setter
    def use_original_as_a(self, value: Optional[bool]):
        pulumi.set(self, "use_original_as_a", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="verificationKeyId1")
    def verification_key_id1(self) -> Optional[str]:
        return pulumi.get(self, "verification_key_id1")

    @verification_key_id1.setter
    def verification_key_id1(self, value: Optional[str]):
        pulumi.set(self, "verification_key_id1", value)

    @property
    @pulumi.getter(name="verificationKeyId2")
    def verification_key_id2(self) -> Optional[str]:
        return pulumi.get(self, "verification_key_id2")

    @verification_key_id2.setter
    def verification_key_id2(self, value: Optional[str]):
        pulumi.set(self, "verification_key_id2", value)

    @property
    @pulumi.getter(name="verificationPublicKey1")
    def verification_public_key1(self) -> Optional[str]:
        return pulumi.get(self, "verification_public_key1")

    @verification_public_key1.setter
    def verification_public_key1(self, value: Optional[str]):
        pulumi.set(self, "verification_public_key1", value)

    @property
    @pulumi.getter(name="verificationPublicKey2")
    def verification_public_key2(self) -> Optional[str]:
        return pulumi.get(self, "verification_public_key2")

    @verification_public_key2.setter
    def verification_public_key2(self, value: Optional[str]):
        pulumi.set(self, "verification_public_key2", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallArgs:
    def __init__(__self__, *,
                 firewall_configuration: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallFirewallConfigurationArgs'] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if firewall_configuration is not None:
            pulumi.set(__self__, "firewall_configuration", firewall_configuration)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="firewallConfiguration")
    def firewall_configuration(self) -> Optional['GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallFirewallConfigurationArgs']:
        return pulumi.get(self, "firewall_configuration")

    @firewall_configuration.setter
    def firewall_configuration(self, value: Optional['GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallFirewallConfigurationArgs']):
        pulumi.set(self, "firewall_configuration", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallFirewallConfigurationArgs:
    def __init__(__self__, *,
                 config_id: Optional[int] = None,
                 file_name: Optional[str] = None,
                 production_status: Optional[str] = None,
                 production_version: Optional[int] = None,
                 staging_status: Optional[str] = None,
                 staging_version: Optional[int] = None):
        if config_id is not None:
            pulumi.set(__self__, "config_id", config_id)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if production_status is not None:
            pulumi.set(__self__, "production_status", production_status)
        if production_version is not None:
            pulumi.set(__self__, "production_version", production_version)
        if staging_status is not None:
            pulumi.set(__self__, "staging_status", staging_status)
        if staging_version is not None:
            pulumi.set(__self__, "staging_version", staging_version)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[int]:
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: Optional[int]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[str]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter(name="productionStatus")
    def production_status(self) -> Optional[str]:
        return pulumi.get(self, "production_status")

    @production_status.setter
    def production_status(self, value: Optional[str]):
        pulumi.set(self, "production_status", value)

    @property
    @pulumi.getter(name="productionVersion")
    def production_version(self) -> Optional[int]:
        return pulumi.get(self, "production_version")

    @production_version.setter
    def production_version(self, value: Optional[int]):
        pulumi.set(self, "production_version", value)

    @property
    @pulumi.getter(name="stagingStatus")
    def staging_status(self) -> Optional[str]:
        return pulumi.get(self, "staging_status")

    @staging_status.setter
    def staging_status(self, value: Optional[str]):
        pulumi.set(self, "staging_status", value)

    @property
    @pulumi.getter(name="stagingVersion")
    def staging_version(self) -> Optional[int]:
        return pulumi.get(self, "staging_version")

    @staging_version.setter
    def staging_version(self, value: Optional[int]):
        pulumi.set(self, "staging_version", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorWebSocketsArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105BehaviorWebdavArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionArgs:
    def __init__(__self__, *,
                 advanced_im_match: Optional['GetPropertyRulesBuilderRulesV20230105CriterionAdvancedImMatchArgs'] = None,
                 bucket: Optional['GetPropertyRulesBuilderRulesV20230105CriterionBucketArgs'] = None,
                 cacheability: Optional['GetPropertyRulesBuilderRulesV20230105CriterionCacheabilityArgs'] = None,
                 china_cdn_region: Optional['GetPropertyRulesBuilderRulesV20230105CriterionChinaCdnRegionArgs'] = None,
                 client_certificate: Optional['GetPropertyRulesBuilderRulesV20230105CriterionClientCertificateArgs'] = None,
                 client_ip: Optional['GetPropertyRulesBuilderRulesV20230105CriterionClientIpArgs'] = None,
                 client_ip_version: Optional['GetPropertyRulesBuilderRulesV20230105CriterionClientIpVersionArgs'] = None,
                 cloudlets_origin: Optional['GetPropertyRulesBuilderRulesV20230105CriterionCloudletsOriginArgs'] = None,
                 content_delivery_network: Optional['GetPropertyRulesBuilderRulesV20230105CriterionContentDeliveryNetworkArgs'] = None,
                 content_type: Optional['GetPropertyRulesBuilderRulesV20230105CriterionContentTypeArgs'] = None,
                 device_characteristic: Optional['GetPropertyRulesBuilderRulesV20230105CriterionDeviceCharacteristicArgs'] = None,
                 ecmd_auth_groups: Optional['GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthGroupsArgs'] = None,
                 ecmd_auth_scheme: Optional['GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthSchemeArgs'] = None,
                 ecmd_is_authenticated: Optional['GetPropertyRulesBuilderRulesV20230105CriterionEcmdIsAuthenticatedArgs'] = None,
                 ecmd_username: Optional['GetPropertyRulesBuilderRulesV20230105CriterionEcmdUsernameArgs'] = None,
                 edge_workers_failure: Optional['GetPropertyRulesBuilderRulesV20230105CriterionEdgeWorkersFailureArgs'] = None,
                 file_extension: Optional['GetPropertyRulesBuilderRulesV20230105CriterionFileExtensionArgs'] = None,
                 filename: Optional['GetPropertyRulesBuilderRulesV20230105CriterionFilenameArgs'] = None,
                 hostname: Optional['GetPropertyRulesBuilderRulesV20230105CriterionHostnameArgs'] = None,
                 match_advanced: Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchAdvancedArgs'] = None,
                 match_cp_code: Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeArgs'] = None,
                 match_response_code: Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchResponseCodeArgs'] = None,
                 match_variable: Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchVariableArgs'] = None,
                 metadata_stage: Optional['GetPropertyRulesBuilderRulesV20230105CriterionMetadataStageArgs'] = None,
                 origin_timeout: Optional['GetPropertyRulesBuilderRulesV20230105CriterionOriginTimeoutArgs'] = None,
                 path: Optional['GetPropertyRulesBuilderRulesV20230105CriterionPathArgs'] = None,
                 query_string_parameter: Optional['GetPropertyRulesBuilderRulesV20230105CriterionQueryStringParameterArgs'] = None,
                 random: Optional['GetPropertyRulesBuilderRulesV20230105CriterionRandomArgs'] = None,
                 recovery_config: Optional['GetPropertyRulesBuilderRulesV20230105CriterionRecoveryConfigArgs'] = None,
                 regular_expression: Optional['GetPropertyRulesBuilderRulesV20230105CriterionRegularExpressionArgs'] = None,
                 request_cookie: Optional['GetPropertyRulesBuilderRulesV20230105CriterionRequestCookieArgs'] = None,
                 request_header: Optional['GetPropertyRulesBuilderRulesV20230105CriterionRequestHeaderArgs'] = None,
                 request_method: Optional['GetPropertyRulesBuilderRulesV20230105CriterionRequestMethodArgs'] = None,
                 request_protocol: Optional['GetPropertyRulesBuilderRulesV20230105CriterionRequestProtocolArgs'] = None,
                 request_type: Optional['GetPropertyRulesBuilderRulesV20230105CriterionRequestTypeArgs'] = None,
                 response_header: Optional['GetPropertyRulesBuilderRulesV20230105CriterionResponseHeaderArgs'] = None,
                 time: Optional['GetPropertyRulesBuilderRulesV20230105CriterionTimeArgs'] = None,
                 token_authorization: Optional['GetPropertyRulesBuilderRulesV20230105CriterionTokenAuthorizationArgs'] = None,
                 user_agent: Optional['GetPropertyRulesBuilderRulesV20230105CriterionUserAgentArgs'] = None,
                 user_location: Optional['GetPropertyRulesBuilderRulesV20230105CriterionUserLocationArgs'] = None,
                 user_network: Optional['GetPropertyRulesBuilderRulesV20230105CriterionUserNetworkArgs'] = None,
                 variable_error: Optional['GetPropertyRulesBuilderRulesV20230105CriterionVariableErrorArgs'] = None,
                 virtual_waiting_room_request: Optional['GetPropertyRulesBuilderRulesV20230105CriterionVirtualWaitingRoomRequestArgs'] = None,
                 visitor_prioritization_request: Optional['GetPropertyRulesBuilderRulesV20230105CriterionVisitorPrioritizationRequestArgs'] = None):
        if advanced_im_match is not None:
            pulumi.set(__self__, "advanced_im_match", advanced_im_match)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if cacheability is not None:
            pulumi.set(__self__, "cacheability", cacheability)
        if china_cdn_region is not None:
            pulumi.set(__self__, "china_cdn_region", china_cdn_region)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if client_ip_version is not None:
            pulumi.set(__self__, "client_ip_version", client_ip_version)
        if cloudlets_origin is not None:
            pulumi.set(__self__, "cloudlets_origin", cloudlets_origin)
        if content_delivery_network is not None:
            pulumi.set(__self__, "content_delivery_network", content_delivery_network)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if device_characteristic is not None:
            pulumi.set(__self__, "device_characteristic", device_characteristic)
        if ecmd_auth_groups is not None:
            pulumi.set(__self__, "ecmd_auth_groups", ecmd_auth_groups)
        if ecmd_auth_scheme is not None:
            pulumi.set(__self__, "ecmd_auth_scheme", ecmd_auth_scheme)
        if ecmd_is_authenticated is not None:
            pulumi.set(__self__, "ecmd_is_authenticated", ecmd_is_authenticated)
        if ecmd_username is not None:
            pulumi.set(__self__, "ecmd_username", ecmd_username)
        if edge_workers_failure is not None:
            pulumi.set(__self__, "edge_workers_failure", edge_workers_failure)
        if file_extension is not None:
            pulumi.set(__self__, "file_extension", file_extension)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if match_advanced is not None:
            pulumi.set(__self__, "match_advanced", match_advanced)
        if match_cp_code is not None:
            pulumi.set(__self__, "match_cp_code", match_cp_code)
        if match_response_code is not None:
            pulumi.set(__self__, "match_response_code", match_response_code)
        if match_variable is not None:
            pulumi.set(__self__, "match_variable", match_variable)
        if metadata_stage is not None:
            pulumi.set(__self__, "metadata_stage", metadata_stage)
        if origin_timeout is not None:
            pulumi.set(__self__, "origin_timeout", origin_timeout)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if query_string_parameter is not None:
            pulumi.set(__self__, "query_string_parameter", query_string_parameter)
        if random is not None:
            pulumi.set(__self__, "random", random)
        if recovery_config is not None:
            pulumi.set(__self__, "recovery_config", recovery_config)
        if regular_expression is not None:
            pulumi.set(__self__, "regular_expression", regular_expression)
        if request_cookie is not None:
            pulumi.set(__self__, "request_cookie", request_cookie)
        if request_header is not None:
            pulumi.set(__self__, "request_header", request_header)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if response_header is not None:
            pulumi.set(__self__, "response_header", response_header)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if token_authorization is not None:
            pulumi.set(__self__, "token_authorization", token_authorization)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)
        if user_location is not None:
            pulumi.set(__self__, "user_location", user_location)
        if user_network is not None:
            pulumi.set(__self__, "user_network", user_network)
        if variable_error is not None:
            pulumi.set(__self__, "variable_error", variable_error)
        if virtual_waiting_room_request is not None:
            pulumi.set(__self__, "virtual_waiting_room_request", virtual_waiting_room_request)
        if visitor_prioritization_request is not None:
            pulumi.set(__self__, "visitor_prioritization_request", visitor_prioritization_request)

    @property
    @pulumi.getter(name="advancedImMatch")
    def advanced_im_match(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionAdvancedImMatchArgs']:
        return pulumi.get(self, "advanced_im_match")

    @advanced_im_match.setter
    def advanced_im_match(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionAdvancedImMatchArgs']):
        pulumi.set(self, "advanced_im_match", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionBucketArgs']:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionBucketArgs']):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def cacheability(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionCacheabilityArgs']:
        return pulumi.get(self, "cacheability")

    @cacheability.setter
    def cacheability(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionCacheabilityArgs']):
        pulumi.set(self, "cacheability", value)

    @property
    @pulumi.getter(name="chinaCdnRegion")
    def china_cdn_region(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionChinaCdnRegionArgs']:
        return pulumi.get(self, "china_cdn_region")

    @china_cdn_region.setter
    def china_cdn_region(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionChinaCdnRegionArgs']):
        pulumi.set(self, "china_cdn_region", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionClientCertificateArgs']:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionClientCertificateArgs']):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionClientIpArgs']:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionClientIpArgs']):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter(name="clientIpVersion")
    def client_ip_version(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionClientIpVersionArgs']:
        return pulumi.get(self, "client_ip_version")

    @client_ip_version.setter
    def client_ip_version(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionClientIpVersionArgs']):
        pulumi.set(self, "client_ip_version", value)

    @property
    @pulumi.getter(name="cloudletsOrigin")
    def cloudlets_origin(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionCloudletsOriginArgs']:
        return pulumi.get(self, "cloudlets_origin")

    @cloudlets_origin.setter
    def cloudlets_origin(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionCloudletsOriginArgs']):
        pulumi.set(self, "cloudlets_origin", value)

    @property
    @pulumi.getter(name="contentDeliveryNetwork")
    def content_delivery_network(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionContentDeliveryNetworkArgs']:
        return pulumi.get(self, "content_delivery_network")

    @content_delivery_network.setter
    def content_delivery_network(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionContentDeliveryNetworkArgs']):
        pulumi.set(self, "content_delivery_network", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionContentTypeArgs']:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionContentTypeArgs']):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="deviceCharacteristic")
    def device_characteristic(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionDeviceCharacteristicArgs']:
        return pulumi.get(self, "device_characteristic")

    @device_characteristic.setter
    def device_characteristic(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionDeviceCharacteristicArgs']):
        pulumi.set(self, "device_characteristic", value)

    @property
    @pulumi.getter(name="ecmdAuthGroups")
    def ecmd_auth_groups(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthGroupsArgs']:
        return pulumi.get(self, "ecmd_auth_groups")

    @ecmd_auth_groups.setter
    def ecmd_auth_groups(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthGroupsArgs']):
        pulumi.set(self, "ecmd_auth_groups", value)

    @property
    @pulumi.getter(name="ecmdAuthScheme")
    def ecmd_auth_scheme(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthSchemeArgs']:
        return pulumi.get(self, "ecmd_auth_scheme")

    @ecmd_auth_scheme.setter
    def ecmd_auth_scheme(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthSchemeArgs']):
        pulumi.set(self, "ecmd_auth_scheme", value)

    @property
    @pulumi.getter(name="ecmdIsAuthenticated")
    def ecmd_is_authenticated(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionEcmdIsAuthenticatedArgs']:
        return pulumi.get(self, "ecmd_is_authenticated")

    @ecmd_is_authenticated.setter
    def ecmd_is_authenticated(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionEcmdIsAuthenticatedArgs']):
        pulumi.set(self, "ecmd_is_authenticated", value)

    @property
    @pulumi.getter(name="ecmdUsername")
    def ecmd_username(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionEcmdUsernameArgs']:
        return pulumi.get(self, "ecmd_username")

    @ecmd_username.setter
    def ecmd_username(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionEcmdUsernameArgs']):
        pulumi.set(self, "ecmd_username", value)

    @property
    @pulumi.getter(name="edgeWorkersFailure")
    def edge_workers_failure(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionEdgeWorkersFailureArgs']:
        return pulumi.get(self, "edge_workers_failure")

    @edge_workers_failure.setter
    def edge_workers_failure(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionEdgeWorkersFailureArgs']):
        pulumi.set(self, "edge_workers_failure", value)

    @property
    @pulumi.getter(name="fileExtension")
    def file_extension(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionFileExtensionArgs']:
        return pulumi.get(self, "file_extension")

    @file_extension.setter
    def file_extension(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionFileExtensionArgs']):
        pulumi.set(self, "file_extension", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionFilenameArgs']:
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionFilenameArgs']):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionHostnameArgs']:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionHostnameArgs']):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="matchAdvanced")
    def match_advanced(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchAdvancedArgs']:
        return pulumi.get(self, "match_advanced")

    @match_advanced.setter
    def match_advanced(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchAdvancedArgs']):
        pulumi.set(self, "match_advanced", value)

    @property
    @pulumi.getter(name="matchCpCode")
    def match_cp_code(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeArgs']:
        return pulumi.get(self, "match_cp_code")

    @match_cp_code.setter
    def match_cp_code(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeArgs']):
        pulumi.set(self, "match_cp_code", value)

    @property
    @pulumi.getter(name="matchResponseCode")
    def match_response_code(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchResponseCodeArgs']:
        return pulumi.get(self, "match_response_code")

    @match_response_code.setter
    def match_response_code(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchResponseCodeArgs']):
        pulumi.set(self, "match_response_code", value)

    @property
    @pulumi.getter(name="matchVariable")
    def match_variable(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchVariableArgs']:
        return pulumi.get(self, "match_variable")

    @match_variable.setter
    def match_variable(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchVariableArgs']):
        pulumi.set(self, "match_variable", value)

    @property
    @pulumi.getter(name="metadataStage")
    def metadata_stage(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionMetadataStageArgs']:
        return pulumi.get(self, "metadata_stage")

    @metadata_stage.setter
    def metadata_stage(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionMetadataStageArgs']):
        pulumi.set(self, "metadata_stage", value)

    @property
    @pulumi.getter(name="originTimeout")
    def origin_timeout(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionOriginTimeoutArgs']:
        return pulumi.get(self, "origin_timeout")

    @origin_timeout.setter
    def origin_timeout(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionOriginTimeoutArgs']):
        pulumi.set(self, "origin_timeout", value)

    @property
    @pulumi.getter
    def path(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionPathArgs']:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionPathArgs']):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="queryStringParameter")
    def query_string_parameter(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionQueryStringParameterArgs']:
        return pulumi.get(self, "query_string_parameter")

    @query_string_parameter.setter
    def query_string_parameter(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionQueryStringParameterArgs']):
        pulumi.set(self, "query_string_parameter", value)

    @property
    @pulumi.getter
    def random(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionRandomArgs']:
        return pulumi.get(self, "random")

    @random.setter
    def random(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionRandomArgs']):
        pulumi.set(self, "random", value)

    @property
    @pulumi.getter(name="recoveryConfig")
    def recovery_config(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionRecoveryConfigArgs']:
        return pulumi.get(self, "recovery_config")

    @recovery_config.setter
    def recovery_config(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionRecoveryConfigArgs']):
        pulumi.set(self, "recovery_config", value)

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionRegularExpressionArgs']:
        return pulumi.get(self, "regular_expression")

    @regular_expression.setter
    def regular_expression(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionRegularExpressionArgs']):
        pulumi.set(self, "regular_expression", value)

    @property
    @pulumi.getter(name="requestCookie")
    def request_cookie(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionRequestCookieArgs']:
        return pulumi.get(self, "request_cookie")

    @request_cookie.setter
    def request_cookie(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionRequestCookieArgs']):
        pulumi.set(self, "request_cookie", value)

    @property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionRequestHeaderArgs']:
        return pulumi.get(self, "request_header")

    @request_header.setter
    def request_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionRequestHeaderArgs']):
        pulumi.set(self, "request_header", value)

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionRequestMethodArgs']:
        return pulumi.get(self, "request_method")

    @request_method.setter
    def request_method(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionRequestMethodArgs']):
        pulumi.set(self, "request_method", value)

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionRequestProtocolArgs']:
        return pulumi.get(self, "request_protocol")

    @request_protocol.setter
    def request_protocol(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionRequestProtocolArgs']):
        pulumi.set(self, "request_protocol", value)

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionRequestTypeArgs']:
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionRequestTypeArgs']):
        pulumi.set(self, "request_type", value)

    @property
    @pulumi.getter(name="responseHeader")
    def response_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionResponseHeaderArgs']:
        return pulumi.get(self, "response_header")

    @response_header.setter
    def response_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionResponseHeaderArgs']):
        pulumi.set(self, "response_header", value)

    @property
    @pulumi.getter
    def time(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionTimeArgs']:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionTimeArgs']):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="tokenAuthorization")
    def token_authorization(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionTokenAuthorizationArgs']:
        return pulumi.get(self, "token_authorization")

    @token_authorization.setter
    def token_authorization(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionTokenAuthorizationArgs']):
        pulumi.set(self, "token_authorization", value)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionUserAgentArgs']:
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionUserAgentArgs']):
        pulumi.set(self, "user_agent", value)

    @property
    @pulumi.getter(name="userLocation")
    def user_location(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionUserLocationArgs']:
        return pulumi.get(self, "user_location")

    @user_location.setter
    def user_location(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionUserLocationArgs']):
        pulumi.set(self, "user_location", value)

    @property
    @pulumi.getter(name="userNetwork")
    def user_network(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionUserNetworkArgs']:
        return pulumi.get(self, "user_network")

    @user_network.setter
    def user_network(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionUserNetworkArgs']):
        pulumi.set(self, "user_network", value)

    @property
    @pulumi.getter(name="variableError")
    def variable_error(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionVariableErrorArgs']:
        return pulumi.get(self, "variable_error")

    @variable_error.setter
    def variable_error(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionVariableErrorArgs']):
        pulumi.set(self, "variable_error", value)

    @property
    @pulumi.getter(name="virtualWaitingRoomRequest")
    def virtual_waiting_room_request(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionVirtualWaitingRoomRequestArgs']:
        return pulumi.get(self, "virtual_waiting_room_request")

    @virtual_waiting_room_request.setter
    def virtual_waiting_room_request(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionVirtualWaitingRoomRequestArgs']):
        pulumi.set(self, "virtual_waiting_room_request", value)

    @property
    @pulumi.getter(name="visitorPrioritizationRequest")
    def visitor_prioritization_request(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionVisitorPrioritizationRequestArgs']:
        return pulumi.get(self, "visitor_prioritization_request")

    @visitor_prioritization_request.setter
    def visitor_prioritization_request(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionVisitorPrioritizationRequestArgs']):
        pulumi.set(self, "visitor_prioritization_request", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionAdvancedImMatchArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_on is not None:
            pulumi.set(__self__, "match_on", match_on)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @match_on.setter
    def match_on(self, value: Optional[str]):
        pulumi.set(self, "match_on", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionBucketArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 percentage: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def percentage(self) -> Optional[int]:
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: Optional[int]):
        pulumi.set(self, "percentage", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionCacheabilityArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionChinaCdnRegionArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionClientCertificateArgs:
    def __init__(__self__, *,
                 is_certificate_present: Optional[bool] = None,
                 is_certificate_valid: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if is_certificate_present is not None:
            pulumi.set(__self__, "is_certificate_present", is_certificate_present)
        if is_certificate_valid is not None:
            pulumi.set(__self__, "is_certificate_valid", is_certificate_valid)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="isCertificatePresent")
    def is_certificate_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_certificate_present")

    @is_certificate_present.setter
    def is_certificate_present(self, value: Optional[bool]):
        pulumi.set(self, "is_certificate_present", value)

    @property
    @pulumi.getter(name="isCertificateValid")
    def is_certificate_valid(self) -> Optional[str]:
        return pulumi.get(self, "is_certificate_valid")

    @is_certificate_valid.setter
    def is_certificate_valid(self, value: Optional[str]):
        pulumi.set(self, "is_certificate_valid", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionClientIpArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_headers: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_headers is not None:
            pulumi.set(__self__, "use_headers", use_headers)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useHeaders")
    def use_headers(self) -> Optional[bool]:
        return pulumi.get(self, "use_headers")

    @use_headers.setter
    def use_headers(self, value: Optional[bool]):
        pulumi.set(self, "use_headers", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionClientIpVersionArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_x_forwarded_for: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_x_forwarded_for is not None:
            pulumi.set(__self__, "use_x_forwarded_for", use_x_forwarded_for)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useXForwardedFor")
    def use_x_forwarded_for(self) -> Optional[bool]:
        return pulumi.get(self, "use_x_forwarded_for")

    @use_x_forwarded_for.setter
    def use_x_forwarded_for(self, value: Optional[bool]):
        pulumi.set(self, "use_x_forwarded_for", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionCloudletsOriginArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: Optional[str]):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionContentDeliveryNetworkArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 network: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionContentTypeArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard is not None:
            pulumi.set(__self__, "match_wildcard", match_wildcard)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @match_case_sensitive.setter
    def match_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @match_wildcard.setter
    def match_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionDeviceCharacteristicArgs:
    def __init__(__self__, *,
                 boolean_value: Optional[bool] = None,
                 characteristic: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_wildcard: Optional[bool] = None,
                 numeric_match_operator: Optional[str] = None,
                 numeric_value: Optional[int] = None,
                 string_match_operator: Optional[str] = None,
                 string_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 version_match_operator: Optional[str] = None,
                 version_value: Optional[str] = None):
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if characteristic is not None:
            pulumi.set(__self__, "characteristic", characteristic)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_wildcard is not None:
            pulumi.set(__self__, "match_wildcard", match_wildcard)
        if numeric_match_operator is not None:
            pulumi.set(__self__, "numeric_match_operator", numeric_match_operator)
        if numeric_value is not None:
            pulumi.set(__self__, "numeric_value", numeric_value)
        if string_match_operator is not None:
            pulumi.set(__self__, "string_match_operator", string_match_operator)
        if string_values is not None:
            pulumi.set(__self__, "string_values", string_values)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if version_match_operator is not None:
            pulumi.set(__self__, "version_match_operator", version_match_operator)
        if version_value is not None:
            pulumi.set(__self__, "version_value", version_value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[bool]:
        return pulumi.get(self, "boolean_value")

    @boolean_value.setter
    def boolean_value(self, value: Optional[bool]):
        pulumi.set(self, "boolean_value", value)

    @property
    @pulumi.getter
    def characteristic(self) -> Optional[str]:
        return pulumi.get(self, "characteristic")

    @characteristic.setter
    def characteristic(self, value: Optional[str]):
        pulumi.set(self, "characteristic", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @match_case_sensitive.setter
    def match_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive", value)

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @match_wildcard.setter
    def match_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard", value)

    @property
    @pulumi.getter(name="numericMatchOperator")
    def numeric_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "numeric_match_operator")

    @numeric_match_operator.setter
    def numeric_match_operator(self, value: Optional[str]):
        pulumi.set(self, "numeric_match_operator", value)

    @property
    @pulumi.getter(name="numericValue")
    def numeric_value(self) -> Optional[int]:
        return pulumi.get(self, "numeric_value")

    @numeric_value.setter
    def numeric_value(self, value: Optional[int]):
        pulumi.set(self, "numeric_value", value)

    @property
    @pulumi.getter(name="stringMatchOperator")
    def string_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "string_match_operator")

    @string_match_operator.setter
    def string_match_operator(self, value: Optional[str]):
        pulumi.set(self, "string_match_operator", value)

    @property
    @pulumi.getter(name="stringValues")
    def string_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "string_values")

    @string_values.setter
    def string_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "string_values", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="versionMatchOperator")
    def version_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "version_match_operator")

    @version_match_operator.setter
    def version_match_operator(self, value: Optional[str]):
        pulumi.set(self, "version_match_operator", value)

    @property
    @pulumi.getter(name="versionValue")
    def version_value(self) -> Optional[str]:
        return pulumi.get(self, "version_value")

    @version_value.setter
    def version_value(self, value: Optional[str]):
        pulumi.set(self, "version_value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthGroupsArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthSchemeArgs:
    def __init__(__self__, *,
                 auth_scheme: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if auth_scheme is not None:
            pulumi.set(__self__, "auth_scheme", auth_scheme)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="authScheme")
    def auth_scheme(self) -> Optional[str]:
        return pulumi.get(self, "auth_scheme")

    @auth_scheme.setter
    def auth_scheme(self, value: Optional[str]):
        pulumi.set(self, "auth_scheme", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionEcmdIsAuthenticatedArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionEcmdUsernameArgs:
    def __init__(__self__, *,
                 length: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if length is not None:
            pulumi.set(__self__, "length", length)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[str]:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[str]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionEdgeWorkersFailureArgs:
    def __init__(__self__, *,
                 exec_status: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if exec_status is not None:
            pulumi.set(__self__, "exec_status", exec_status)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="execStatus")
    def exec_status(self) -> Optional[str]:
        return pulumi.get(self, "exec_status")

    @exec_status.setter
    def exec_status(self, value: Optional[str]):
        pulumi.set(self, "exec_status", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionFileExtensionArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @match_case_sensitive.setter
    def match_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionFilenameArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @match_case_sensitive.setter
    def match_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionHostnameArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchAdvancedArgs:
    def __init__(__self__, *,
                 close_xml: Optional[str] = None,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 open_xml: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if close_xml is not None:
            pulumi.set(__self__, "close_xml", close_xml)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if open_xml is not None:
            pulumi.set(__self__, "open_xml", open_xml)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="closeXml")
    def close_xml(self) -> Optional[str]:
        return pulumi.get(self, "close_xml")

    @close_xml.setter
    def close_xml(self, value: Optional[str]):
        pulumi.set(self, "close_xml", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="openXml")
    def open_xml(self) -> Optional[str]:
        return pulumi.get(self, "open_xml")

    @open_xml.setter
    def open_xml(self, value: Optional[str]):
        pulumi.set(self, "open_xml", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueArgs'] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueArgs']:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueArgs']):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchResponseCodeArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @lower_bound.setter
    def lower_bound(self, value: Optional[int]):
        pulumi.set(self, "lower_bound", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @upper_bound.setter
    def upper_bound(self, value: Optional[int]):
        pulumi.set(self, "upper_bound", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchVariableArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[str] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_expression: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 variable_values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard is not None:
            pulumi.set(__self__, "match_wildcard", match_wildcard)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_expression is not None:
            pulumi.set(__self__, "variable_expression", variable_expression)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)
        if variable_values is not None:
            pulumi.set(__self__, "variable_values", variable_values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[str]:
        return pulumi.get(self, "lower_bound")

    @lower_bound.setter
    def lower_bound(self, value: Optional[str]):
        pulumi.set(self, "lower_bound", value)

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @match_case_sensitive.setter
    def match_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @match_wildcard.setter
    def match_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[str]:
        return pulumi.get(self, "upper_bound")

    @upper_bound.setter
    def upper_bound(self, value: Optional[str]):
        pulumi.set(self, "upper_bound", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="variableExpression")
    def variable_expression(self) -> Optional[str]:
        return pulumi.get(self, "variable_expression")

    @variable_expression.setter
    def variable_expression(self, value: Optional[str]):
        pulumi.set(self, "variable_expression", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[str]):
        pulumi.set(self, "variable_name", value)

    @property
    @pulumi.getter(name="variableValues")
    def variable_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "variable_values")

    @variable_values.setter
    def variable_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "variable_values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionMetadataStageArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionOriginTimeoutArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionPathArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 normalize: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if normalize is not None:
            pulumi.set(__self__, "normalize", normalize)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @match_case_sensitive.setter
    def match_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter
    def normalize(self) -> Optional[bool]:
        return pulumi.get(self, "normalize")

    @normalize.setter
    def normalize(self, value: Optional[bool]):
        pulumi.set(self, "normalize", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionQueryStringParameterArgs:
    def __init__(__self__, *,
                 escape_value: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_name: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if escape_value is not None:
            pulumi.set(__self__, "escape_value", escape_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_case_sensitive_name is not None:
            pulumi.set(__self__, "match_case_sensitive_name", match_case_sensitive_name)
        if match_case_sensitive_value is not None:
            pulumi.set(__self__, "match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard_name is not None:
            pulumi.set(__self__, "match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            pulumi.set(__self__, "match_wildcard_value", match_wildcard_value)
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="escapeValue")
    def escape_value(self) -> Optional[bool]:
        return pulumi.get(self, "escape_value")

    @escape_value.setter
    def escape_value(self, value: Optional[bool]):
        pulumi.set(self, "escape_value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @lower_bound.setter
    def lower_bound(self, value: Optional[int]):
        pulumi.set(self, "lower_bound", value)

    @property
    @pulumi.getter(name="matchCaseSensitiveName")
    def match_case_sensitive_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_name")

    @match_case_sensitive_name.setter
    def match_case_sensitive_name(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive_name", value)

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @match_case_sensitive_value.setter
    def match_case_sensitive_value(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive_value", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @match_wildcard_name.setter
    def match_wildcard_name(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard_name", value)

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @match_wildcard_value.setter
    def match_wildcard_value(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard_value", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[str]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @upper_bound.setter
    def upper_bound(self, value: Optional[int]):
        pulumi.set(self, "upper_bound", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionRandomArgs:
    def __init__(__self__, *,
                 bucket: Optional[int] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[int]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[int]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionRecoveryConfigArgs:
    def __init__(__self__, *,
                 config_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if config_name is not None:
            pulumi.set(__self__, "config_name", config_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> Optional[str]:
        return pulumi.get(self, "config_name")

    @config_name.setter
    def config_name(self, value: Optional[str]):
        pulumi.set(self, "config_name", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionRegularExpressionArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match_string: Optional[str] = None,
                 regex: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_string is not None:
            pulumi.set(__self__, "match_string", match_string)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchString")
    def match_string(self) -> Optional[str]:
        return pulumi.get(self, "match_string")

    @match_string.setter
    def match_string(self, value: Optional[str]):
        pulumi.set(self, "match_string", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[str]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionRequestCookieArgs:
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_name: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_case_sensitive_name is not None:
            pulumi.set(__self__, "match_case_sensitive_name", match_case_sensitive_name)
        if match_case_sensitive_value is not None:
            pulumi.set(__self__, "match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard_name is not None:
            pulumi.set(__self__, "match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            pulumi.set(__self__, "match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[str]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @lower_bound.setter
    def lower_bound(self, value: Optional[int]):
        pulumi.set(self, "lower_bound", value)

    @property
    @pulumi.getter(name="matchCaseSensitiveName")
    def match_case_sensitive_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_name")

    @match_case_sensitive_name.setter
    def match_case_sensitive_name(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive_name", value)

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @match_case_sensitive_value.setter
    def match_case_sensitive_value(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive_value", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @match_wildcard_name.setter
    def match_wildcard_name(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard_name", value)

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @match_wildcard_value.setter
    def match_wildcard_value(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard_value", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @upper_bound.setter
    def upper_bound(self, value: Optional[int]):
        pulumi.set(self, "upper_bound", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionRequestHeaderArgs:
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive_value is not None:
            pulumi.set(__self__, "match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard_name is not None:
            pulumi.set(__self__, "match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            pulumi.set(__self__, "match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @match_case_sensitive_value.setter
    def match_case_sensitive_value(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive_value", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @match_wildcard_name.setter
    def match_wildcard_name(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard_name", value)

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @match_wildcard_value.setter
    def match_wildcard_value(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard_value", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionRequestMethodArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionRequestProtocolArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionRequestTypeArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionResponseHeaderArgs:
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_case_sensitive_value is not None:
            pulumi.set(__self__, "match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard_name is not None:
            pulumi.set(__self__, "match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            pulumi.set(__self__, "match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @lower_bound.setter
    def lower_bound(self, value: Optional[int]):
        pulumi.set(self, "lower_bound", value)

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @match_case_sensitive_value.setter
    def match_case_sensitive_value(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive_value", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @match_wildcard_name.setter
    def match_wildcard_name(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard_name", value)

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @match_wildcard_value.setter
    def match_wildcard_value(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard_value", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @upper_bound.setter
    def upper_bound(self, value: Optional[int]):
        pulumi.set(self, "upper_bound", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionTimeArgs:
    def __init__(__self__, *,
                 apply_daylight_savings_time: Optional[bool] = None,
                 begin_date: Optional[str] = None,
                 end_date: Optional[str] = None,
                 lasting_date: Optional[str] = None,
                 lasting_duration: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 repeat_begin_date: Optional[str] = None,
                 repeat_duration: Optional[str] = None,
                 repeat_interval: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if apply_daylight_savings_time is not None:
            pulumi.set(__self__, "apply_daylight_savings_time", apply_daylight_savings_time)
        if begin_date is not None:
            pulumi.set(__self__, "begin_date", begin_date)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if lasting_date is not None:
            pulumi.set(__self__, "lasting_date", lasting_date)
        if lasting_duration is not None:
            pulumi.set(__self__, "lasting_duration", lasting_duration)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if repeat_begin_date is not None:
            pulumi.set(__self__, "repeat_begin_date", repeat_begin_date)
        if repeat_duration is not None:
            pulumi.set(__self__, "repeat_duration", repeat_duration)
        if repeat_interval is not None:
            pulumi.set(__self__, "repeat_interval", repeat_interval)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="applyDaylightSavingsTime")
    def apply_daylight_savings_time(self) -> Optional[bool]:
        return pulumi.get(self, "apply_daylight_savings_time")

    @apply_daylight_savings_time.setter
    def apply_daylight_savings_time(self, value: Optional[bool]):
        pulumi.set(self, "apply_daylight_savings_time", value)

    @property
    @pulumi.getter(name="beginDate")
    def begin_date(self) -> Optional[str]:
        return pulumi.get(self, "begin_date")

    @begin_date.setter
    def begin_date(self, value: Optional[str]):
        pulumi.set(self, "begin_date", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[str]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="lastingDate")
    def lasting_date(self) -> Optional[str]:
        return pulumi.get(self, "lasting_date")

    @lasting_date.setter
    def lasting_date(self, value: Optional[str]):
        pulumi.set(self, "lasting_date", value)

    @property
    @pulumi.getter(name="lastingDuration")
    def lasting_duration(self) -> Optional[str]:
        return pulumi.get(self, "lasting_duration")

    @lasting_duration.setter
    def lasting_duration(self, value: Optional[str]):
        pulumi.set(self, "lasting_duration", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="repeatBeginDate")
    def repeat_begin_date(self) -> Optional[str]:
        return pulumi.get(self, "repeat_begin_date")

    @repeat_begin_date.setter
    def repeat_begin_date(self, value: Optional[str]):
        pulumi.set(self, "repeat_begin_date", value)

    @property
    @pulumi.getter(name="repeatDuration")
    def repeat_duration(self) -> Optional[str]:
        return pulumi.get(self, "repeat_duration")

    @repeat_duration.setter
    def repeat_duration(self, value: Optional[str]):
        pulumi.set(self, "repeat_duration", value)

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[str]:
        return pulumi.get(self, "repeat_interval")

    @repeat_interval.setter
    def repeat_interval(self, value: Optional[str]):
        pulumi.set(self, "repeat_interval", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionTokenAuthorizationArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 status_lists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if status_lists is not None:
            pulumi.set(__self__, "status_lists", status_lists)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="statusLists")
    def status_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "status_lists")

    @status_lists.setter
    def status_lists(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "status_lists", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionUserAgentArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard is not None:
            pulumi.set(__self__, "match_wildcard", match_wildcard)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @match_case_sensitive.setter
    def match_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @match_wildcard.setter
    def match_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionUserLocationArgs:
    def __init__(__self__, *,
                 check_ips: Optional[str] = None,
                 continent_values: Optional[Sequence[str]] = None,
                 country_values: Optional[Sequence[str]] = None,
                 field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 region_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 use_only_first_x_forwarded_for_ip: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if continent_values is not None:
            pulumi.set(__self__, "continent_values", continent_values)
        if country_values is not None:
            pulumi.set(__self__, "country_values", country_values)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if region_values is not None:
            pulumi.set(__self__, "region_values", region_values)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_only_first_x_forwarded_for_ip is not None:
            pulumi.set(__self__, "use_only_first_x_forwarded_for_ip", use_only_first_x_forwarded_for_ip)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="continentValues")
    def continent_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "continent_values")

    @continent_values.setter
    def continent_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "continent_values", value)

    @property
    @pulumi.getter(name="countryValues")
    def country_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "country_values")

    @country_values.setter
    def country_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "country_values", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[str]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="regionValues")
    def region_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "region_values")

    @region_values.setter
    def region_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "region_values", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useOnlyFirstXForwardedForIp")
    def use_only_first_x_forwarded_for_ip(self) -> Optional[bool]:
        return pulumi.get(self, "use_only_first_x_forwarded_for_ip")

    @use_only_first_x_forwarded_for_ip.setter
    def use_only_first_x_forwarded_for_ip(self, value: Optional[bool]):
        pulumi.set(self, "use_only_first_x_forwarded_for_ip", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionUserNetworkArgs:
    def __init__(__self__, *,
                 bandwidth_values: Optional[Sequence[str]] = None,
                 check_ips: Optional[str] = None,
                 field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 network_type_values: Optional[Sequence[str]] = None,
                 network_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 use_only_first_x_forwarded_for_ip: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if bandwidth_values is not None:
            pulumi.set(__self__, "bandwidth_values", bandwidth_values)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if network_type_values is not None:
            pulumi.set(__self__, "network_type_values", network_type_values)
        if network_values is not None:
            pulumi.set(__self__, "network_values", network_values)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_only_first_x_forwarded_for_ip is not None:
            pulumi.set(__self__, "use_only_first_x_forwarded_for_ip", use_only_first_x_forwarded_for_ip)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="bandwidthValues")
    def bandwidth_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "bandwidth_values")

    @bandwidth_values.setter
    def bandwidth_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "bandwidth_values", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[str]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="networkTypeValues")
    def network_type_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_type_values")

    @network_type_values.setter
    def network_type_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "network_type_values", value)

    @property
    @pulumi.getter(name="networkValues")
    def network_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_values")

    @network_values.setter
    def network_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "network_values", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useOnlyFirstXForwardedForIp")
    def use_only_first_x_forwarded_for_ip(self) -> Optional[bool]:
        return pulumi.get(self, "use_only_first_x_forwarded_for_ip")

    @use_only_first_x_forwarded_for_ip.setter
    def use_only_first_x_forwarded_for_ip(self, value: Optional[bool]):
        pulumi.set(self, "use_only_first_x_forwarded_for_ip", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionVariableErrorArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 result: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_names: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_names is not None:
            pulumi.set(__self__, "variable_names", variable_names)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def result(self) -> Optional[bool]:
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: Optional[bool]):
        pulumi.set(self, "result", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="variableNames")
    def variable_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "variable_names")

    @variable_names.setter
    def variable_names(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "variable_names", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionVirtualWaitingRoomRequestArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_on is not None:
            pulumi.set(__self__, "match_on", match_on)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @match_on.setter
    def match_on(self, value: Optional[str]):
        pulumi.set(self, "match_on", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CriterionVisitorPrioritizationRequestArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_on is not None:
            pulumi.set(__self__, "match_on", match_on)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @match_on.setter
    def match_on(self, value: Optional[str]):
        pulumi.set(self, "match_on", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105CustomOverrideArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 override_id: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_id is not None:
            pulumi.set(__self__, "override_id", override_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideId")
    def override_id(self) -> Optional[str]:
        return pulumi.get(self, "override_id")

    @override_id.setter
    def override_id(self, value: Optional[str]):
        pulumi.set(self, "override_id", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230105VariableArgs:
    def __init__(__self__, *,
                 description: str,
                 hidden: bool,
                 name: str,
                 sensitive: bool,
                 value: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "hidden", hidden)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sensitive", sensitive)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def hidden(self) -> bool:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: bool):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def sensitive(self) -> bool:
        return pulumi.get(self, "sensitive")

    @sensitive.setter
    def sensitive(self, value: bool):
        pulumi.set(self, "sensitive", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530Args:
    def __init__(__self__, *,
                 name: str,
                 advanced_override: Optional[str] = None,
                 behaviors: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorArgs']] = None,
                 childrens: Optional[Sequence[str]] = None,
                 comments: Optional[str] = None,
                 criteria_locked: Optional[bool] = None,
                 criteria_must_satisfy: Optional[str] = None,
                 criterions: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530CriterionArgs']] = None,
                 custom_override: Optional['GetPropertyRulesBuilderRulesV20230530CustomOverrideArgs'] = None,
                 is_secure: Optional[bool] = None,
                 template_link: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variables: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530VariableArgs']] = None):
        pulumi.set(__self__, "name", name)
        if advanced_override is not None:
            pulumi.set(__self__, "advanced_override", advanced_override)
        if behaviors is not None:
            pulumi.set(__self__, "behaviors", behaviors)
        if childrens is not None:
            pulumi.set(__self__, "childrens", childrens)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if criteria_locked is not None:
            pulumi.set(__self__, "criteria_locked", criteria_locked)
        if criteria_must_satisfy is not None:
            pulumi.set(__self__, "criteria_must_satisfy", criteria_must_satisfy)
        if criterions is not None:
            pulumi.set(__self__, "criterions", criterions)
        if custom_override is not None:
            pulumi.set(__self__, "custom_override", custom_override)
        if is_secure is not None:
            pulumi.set(__self__, "is_secure", is_secure)
        if template_link is not None:
            pulumi.set(__self__, "template_link", template_link)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="advancedOverride")
    def advanced_override(self) -> Optional[str]:
        return pulumi.get(self, "advanced_override")

    @advanced_override.setter
    def advanced_override(self, value: Optional[str]):
        pulumi.set(self, "advanced_override", value)

    @property
    @pulumi.getter
    def behaviors(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorArgs']]:
        return pulumi.get(self, "behaviors")

    @behaviors.setter
    def behaviors(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorArgs']]):
        pulumi.set(self, "behaviors", value)

    @property
    @pulumi.getter
    def childrens(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "childrens")

    @childrens.setter
    def childrens(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "childrens", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[str]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="criteriaLocked")
    def criteria_locked(self) -> Optional[bool]:
        return pulumi.get(self, "criteria_locked")

    @criteria_locked.setter
    def criteria_locked(self, value: Optional[bool]):
        pulumi.set(self, "criteria_locked", value)

    @property
    @pulumi.getter(name="criteriaMustSatisfy")
    def criteria_must_satisfy(self) -> Optional[str]:
        return pulumi.get(self, "criteria_must_satisfy")

    @criteria_must_satisfy.setter
    def criteria_must_satisfy(self, value: Optional[str]):
        pulumi.set(self, "criteria_must_satisfy", value)

    @property
    @pulumi.getter
    def criterions(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230530CriterionArgs']]:
        return pulumi.get(self, "criterions")

    @criterions.setter
    def criterions(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530CriterionArgs']]):
        pulumi.set(self, "criterions", value)

    @property
    @pulumi.getter(name="customOverride")
    def custom_override(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CustomOverrideArgs']:
        return pulumi.get(self, "custom_override")

    @custom_override.setter
    def custom_override(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CustomOverrideArgs']):
        pulumi.set(self, "custom_override", value)

    @property
    @pulumi.getter(name="isSecure")
    def is_secure(self) -> Optional[bool]:
        return pulumi.get(self, "is_secure")

    @is_secure.setter
    def is_secure(self, value: Optional[bool]):
        pulumi.set(self, "is_secure", value)

    @property
    @pulumi.getter(name="templateLink")
    def template_link(self) -> Optional[str]:
        return pulumi.get(self, "template_link")

    @template_link.setter
    def template_link(self, value: Optional[str]):
        pulumi.set(self, "template_link", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230530VariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530VariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorArgs:
    def __init__(__self__, *,
                 ad_scaler_circuit_breaker: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAdScalerCircuitBreakerArgs'] = None,
                 adaptive_acceleration: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveAccelerationArgs'] = None,
                 adaptive_image_compression: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveImageCompressionArgs'] = None,
                 advanced: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAdvancedArgs'] = None,
                 aggregated_reporting: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAggregatedReportingArgs'] = None,
                 akamaizer: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerArgs'] = None,
                 akamaizer_tag: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerTagArgs'] = None,
                 all_http_in_cache_hierarchy: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllHttpInCacheHierarchyArgs'] = None,
                 allow_cloudlets_origins: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowCloudletsOriginsArgs'] = None,
                 allow_delete: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowDeleteArgs'] = None,
                 allow_https_cache_key_sharing: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsCacheKeySharingArgs'] = None,
                 allow_https_downgrade: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsDowngradeArgs'] = None,
                 allow_options: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowOptionsArgs'] = None,
                 allow_patch: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowPatchArgs'] = None,
                 allow_post: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowPostArgs'] = None,
                 allow_put: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowPutArgs'] = None,
                 allow_transfer_encoding: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowTransferEncodingArgs'] = None,
                 alt_svc_header: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAltSvcHeaderArgs'] = None,
                 api_prioritization: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationArgs'] = None,
                 application_load_balancer: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerArgs'] = None,
                 audience_segmentation: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationArgs'] = None,
                 auto_domain_validation: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAutoDomainValidationArgs'] = None,
                 base_directory: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorBaseDirectoryArgs'] = None,
                 boss_beaconing: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorBossBeaconingArgs'] = None,
                 breadcrumbs: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorBreadcrumbsArgs'] = None,
                 break_connection: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorBreakConnectionArgs'] = None,
                 brotli: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorBrotliArgs'] = None,
                 cache_error: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheErrorArgs'] = None,
                 cache_id: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheIdArgs'] = None,
                 cache_key_ignore_case: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyIgnoreCaseArgs'] = None,
                 cache_key_query_params: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyQueryParamsArgs'] = None,
                 cache_key_rewrite: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyRewriteArgs'] = None,
                 cache_post: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCachePostArgs'] = None,
                 cache_redirect: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheRedirectArgs'] = None,
                 cache_tag: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagArgs'] = None,
                 cache_tag_visible: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagVisibleArgs'] = None,
                 caching: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCachingArgs'] = None,
                 central_authorization: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCentralAuthorizationArgs'] = None,
                 chase_redirects: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorChaseRedirectsArgs'] = None,
                 client_characteristics: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorClientCharacteristicsArgs'] = None,
                 cloud_interconnects: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCloudInterconnectsArgs'] = None,
                 cloud_wrapper: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperArgs'] = None,
                 cloud_wrapper_advanced: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperAdvancedArgs'] = None,
                 common_media_client_data: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCommonMediaClientDataArgs'] = None,
                 conditional_origin: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorConditionalOriginArgs'] = None,
                 construct_response: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorConstructResponseArgs'] = None,
                 content_characteristics: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsArgs'] = None,
                 content_characteristics_amd: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsAmdArgs'] = None,
                 content_characteristics_dd: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsDdArgs'] = None,
                 content_characteristics_wsd_large_file: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLargeFileArgs'] = None,
                 content_characteristics_wsd_live: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLiveArgs'] = None,
                 content_characteristics_wsd_vod: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdVodArgs'] = None,
                 content_pre_position: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentPrePositionArgs'] = None,
                 content_targeting_protection: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentTargetingProtectionArgs'] = None,
                 cors_support: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCorsSupportArgs'] = None,
                 cp_code: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeArgs'] = None,
                 custom_behavior: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCustomBehaviorArgs'] = None,
                 datastream: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDatastreamArgs'] = None,
                 dcp: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpArgs'] = None,
                 dcp_auth_hmac_transformation: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthHmacTransformationArgs'] = None,
                 dcp_auth_regex_transformation: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthRegexTransformationArgs'] = None,
                 dcp_auth_substring_transformation: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthSubstringTransformationArgs'] = None,
                 dcp_auth_variable_extractor: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthVariableExtractorArgs'] = None,
                 dcp_default_authz_groups: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpDefaultAuthzGroupsArgs'] = None,
                 dcp_dev_relations: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpDevRelationsArgs'] = None,
                 dcp_real_time_auth: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpRealTimeAuthArgs'] = None,
                 delivery_receipt: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDeliveryReceiptArgs'] = None,
                 deny_access: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDenyAccessArgs'] = None,
                 deny_direct_failover_access: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDenyDirectFailoverAccessArgs'] = None,
                 device_characteristic_cache_id: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicCacheIdArgs'] = None,
                 device_characteristic_header: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicHeaderArgs'] = None,
                 dns_async_refresh: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDnsAsyncRefreshArgs'] = None,
                 dns_prefresh: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDnsPrefreshArgs'] = None,
                 downgrade_protocol: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDowngradeProtocolArgs'] = None,
                 download_complete_marker: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDownloadCompleteMarkerArgs'] = None,
                 download_notification: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDownloadNotificationArgs'] = None,
                 downstream_cache: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDownstreamCacheArgs'] = None,
                 dynamic_throughtput_optimization: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationArgs'] = None,
                 dynamic_throughtput_optimization_override: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationOverrideArgs'] = None,
                 dynamic_web_content: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDynamicWebContentArgs'] = None,
                 ecms_bulk_upload: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEcmsBulkUploadArgs'] = None,
                 ecms_database: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatabaseArgs'] = None,
                 ecms_dataset: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatasetArgs'] = None,
                 ecms_object_key: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEcmsObjectKeyArgs'] = None,
                 edge_connect: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeConnectArgs'] = None,
                 edge_load_balancing_advanced: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingAdvancedArgs'] = None,
                 edge_load_balancing_data_center: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterArgs'] = None,
                 edge_load_balancing_origin: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingOriginArgs'] = None,
                 edge_origin_authorization: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeOriginAuthorizationArgs'] = None,
                 edge_redirector: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorArgs'] = None,
                 edge_scape: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeScapeArgs'] = None,
                 edge_side_includes: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeSideIncludesArgs'] = None,
                 edge_worker: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeWorkerArgs'] = None,
                 enhanced_akamai_protocol: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedAkamaiProtocolArgs'] = None,
                 enhanced_proxy_detection: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedProxyDetectionArgs'] = None,
                 epd_forward_header_enrichment: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEpdForwardHeaderEnrichmentArgs'] = None,
                 fail_action: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFailActionArgs'] = None,
                 failover_bot_manager_feature_compatibility: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFailoverBotManagerFeatureCompatibilityArgs'] = None,
                 fast_invalidate: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFastInvalidateArgs'] = None,
                 first_party_marketing: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingArgs'] = None,
                 first_party_marketing_plus: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusArgs'] = None,
                 forward_rewrite: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteArgs'] = None,
                 g2oheader: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorG2oheaderArgs'] = None,
                 global_request_number: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorGlobalRequestNumberArgs'] = None,
                 graphql_caching: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorGraphqlCachingArgs'] = None,
                 gzip_response: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorGzipResponseArgs'] = None,
                 hd_data_advanced: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHdDataAdvancedArgs'] = None,
                 health_detection: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHealthDetectionArgs'] = None,
                 hsaf_eip_binding: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHsafEipBindingArgs'] = None,
                 http2: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHttp2Args'] = None,
                 http3: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHttp3Args'] = None,
                 http_strict_transport_security: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHttpStrictTransportSecurityArgs'] = None,
                 http_to_https_upgrade: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHttpToHttpsUpgradeArgs'] = None,
                 im_override: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImOverrideArgs'] = None,
                 image_and_video_manager: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerArgs'] = None,
                 image_manager: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerArgs'] = None,
                 image_manager_video: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoArgs'] = None,
                 include: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorIncludeArgs'] = None,
                 instant: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorInstantArgs'] = None,
                 instant_config: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorInstantConfigArgs'] = None,
                 large_file_optimization: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationArgs'] = None,
                 large_file_optimization_advanced: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationAdvancedArgs'] = None,
                 limit_bit_rate: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateArgs'] = None,
                 log_custom: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorLogCustomArgs'] = None,
                 m_pulse: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMPulseArgs'] = None,
                 manifest_personalization: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorManifestPersonalizationArgs'] = None,
                 manifest_rerouting: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorManifestReroutingArgs'] = None,
                 manual_server_push: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorManualServerPushArgs'] = None,
                 media_acceleration: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationArgs'] = None,
                 media_acceleration_quic_optout: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationQuicOptoutArgs'] = None,
                 media_client: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMediaClientArgs'] = None,
                 media_file_retrieval_optimization: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMediaFileRetrievalOptimizationArgs'] = None,
                 media_origin_failover: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMediaOriginFailoverArgs'] = None,
                 metadata_caching: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMetadataCachingArgs'] = None,
                 mobile_sdk_performance: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMobileSdkPerformanceArgs'] = None,
                 modify_incoming_request_header: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingRequestHeaderArgs'] = None,
                 modify_incoming_response_header: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingResponseHeaderArgs'] = None,
                 modify_outgoing_request_header: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingRequestHeaderArgs'] = None,
                 modify_outgoing_response_header: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingResponseHeaderArgs'] = None,
                 modify_via_header: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorModifyViaHeaderArgs'] = None,
                 origin: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginArgs'] = None,
                 origin_characteristics: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsArgs'] = None,
                 origin_characteristics_wsd: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsWsdArgs'] = None,
                 origin_failure_recovery_method: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryMethodArgs'] = None,
                 origin_failure_recovery_policy: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryPolicyArgs'] = None,
                 origin_ip_acl: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginIpAclArgs'] = None,
                 persistent_client_connection: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPersistentClientConnectionArgs'] = None,
                 persistent_connection: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPersistentConnectionArgs'] = None,
                 personally_identifiable_information: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPersonallyIdentifiableInformationArgs'] = None,
                 phased_release: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseArgs'] = None,
                 preconnect: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPreconnectArgs'] = None,
                 predictive_content_delivery: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPredictiveContentDeliveryArgs'] = None,
                 predictive_prefetching: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPredictivePrefetchingArgs'] = None,
                 prefetch: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchArgs'] = None,
                 prefetchable: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchableArgs'] = None,
                 prefresh_cache: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPrefreshCacheArgs'] = None,
                 quality: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorQualityArgs'] = None,
                 quic_beta: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorQuicBetaArgs'] = None,
                 random_seek: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRandomSeekArgs'] = None,
                 rapid: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRapidArgs'] = None,
                 read_timeout: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorReadTimeoutArgs'] = None,
                 real_time_reporting: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRealTimeReportingArgs'] = None,
                 real_user_monitoring: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRealUserMonitoringArgs'] = None,
                 redirect: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRedirectArgs'] = None,
                 redirectplus: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRedirectplusArgs'] = None,
                 referer_checking: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRefererCheckingArgs'] = None,
                 remove_query_parameter: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRemoveQueryParameterArgs'] = None,
                 remove_vary: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRemoveVaryArgs'] = None,
                 report: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorReportArgs'] = None,
                 request_control: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlArgs'] = None,
                 request_type_marker: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRequestTypeMarkerArgs'] = None,
                 resource_optimizer: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerArgs'] = None,
                 resource_optimizer_extended_compatibility: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerExtendedCompatibilityArgs'] = None,
                 response_code: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorResponseCodeArgs'] = None,
                 response_cookie: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorResponseCookieArgs'] = None,
                 restrict_object_caching: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRestrictObjectCachingArgs'] = None,
                 return_cache_status: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorReturnCacheStatusArgs'] = None,
                 rewrite_url: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRewriteUrlArgs'] = None,
                 rum_custom: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRumCustomArgs'] = None,
                 saas_definitions: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSaasDefinitionsArgs'] = None,
                 sales_force_commerce_cloud_client: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudClientArgs'] = None,
                 sales_force_commerce_cloud_provider: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderArgs'] = None,
                 sales_force_commerce_cloud_provider_host_header: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderHostHeaderArgs'] = None,
                 save_post_dca_processing: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSavePostDcaProcessingArgs'] = None,
                 schedule_invalidation: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorScheduleInvalidationArgs'] = None,
                 script_management: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorScriptManagementArgs'] = None,
                 segmented_content_protection: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedContentProtectionArgs'] = None,
                 segmented_media_optimization: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaOptimizationArgs'] = None,
                 segmented_media_streaming_prefetch: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaStreamingPrefetchArgs'] = None,
                 set_variable: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSetVariableArgs'] = None,
                 simulate_error_code: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSimulateErrorCodeArgs'] = None,
                 site_shield: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldArgs'] = None,
                 standard_tls_migration: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationArgs'] = None,
                 standard_tls_migration_override: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationOverrideArgs'] = None,
                 strict_header_parsing: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorStrictHeaderParsingArgs'] = None,
                 sub_customer: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSubCustomerArgs'] = None,
                 sure_route: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSureRouteArgs'] = None,
                 tcp_optimization: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTcpOptimizationArgs'] = None,
                 tea_leaf: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTeaLeafArgs'] = None,
                 tiered_distribution: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionArgs'] = None,
                 tiered_distribution_advanced: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionAdvancedArgs'] = None,
                 tiered_distribution_customization: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionCustomizationArgs'] = None,
                 timeout: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTimeoutArgs'] = None,
                 uid_configuration: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorUidConfigurationArgs'] = None,
                 validate_entity_tag: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorValidateEntityTagArgs'] = None,
                 verify_json_web_token: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenArgs'] = None,
                 verify_json_web_token_for_dcp: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenForDcpArgs'] = None,
                 verify_token_authorization: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVerifyTokenAuthorizationArgs'] = None,
                 virtual_waiting_room: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomArgs'] = None,
                 virtual_waiting_room_with_edge_workers: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomWithEdgeWorkersArgs'] = None,
                 visitor_prioritization: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationArgs'] = None,
                 visitor_prioritization_fifo: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoArgs'] = None,
                 visitor_prioritization_fifo_standalone: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoStandaloneArgs'] = None,
                 watermarking: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorWatermarkingArgs'] = None,
                 web_application_firewall: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallArgs'] = None,
                 web_sockets: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorWebSocketsArgs'] = None,
                 webdav: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorWebdavArgs'] = None):
        if ad_scaler_circuit_breaker is not None:
            pulumi.set(__self__, "ad_scaler_circuit_breaker", ad_scaler_circuit_breaker)
        if adaptive_acceleration is not None:
            pulumi.set(__self__, "adaptive_acceleration", adaptive_acceleration)
        if adaptive_image_compression is not None:
            pulumi.set(__self__, "adaptive_image_compression", adaptive_image_compression)
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if aggregated_reporting is not None:
            pulumi.set(__self__, "aggregated_reporting", aggregated_reporting)
        if akamaizer is not None:
            pulumi.set(__self__, "akamaizer", akamaizer)
        if akamaizer_tag is not None:
            pulumi.set(__self__, "akamaizer_tag", akamaizer_tag)
        if all_http_in_cache_hierarchy is not None:
            pulumi.set(__self__, "all_http_in_cache_hierarchy", all_http_in_cache_hierarchy)
        if allow_cloudlets_origins is not None:
            pulumi.set(__self__, "allow_cloudlets_origins", allow_cloudlets_origins)
        if allow_delete is not None:
            pulumi.set(__self__, "allow_delete", allow_delete)
        if allow_https_cache_key_sharing is not None:
            pulumi.set(__self__, "allow_https_cache_key_sharing", allow_https_cache_key_sharing)
        if allow_https_downgrade is not None:
            pulumi.set(__self__, "allow_https_downgrade", allow_https_downgrade)
        if allow_options is not None:
            pulumi.set(__self__, "allow_options", allow_options)
        if allow_patch is not None:
            pulumi.set(__self__, "allow_patch", allow_patch)
        if allow_post is not None:
            pulumi.set(__self__, "allow_post", allow_post)
        if allow_put is not None:
            pulumi.set(__self__, "allow_put", allow_put)
        if allow_transfer_encoding is not None:
            pulumi.set(__self__, "allow_transfer_encoding", allow_transfer_encoding)
        if alt_svc_header is not None:
            pulumi.set(__self__, "alt_svc_header", alt_svc_header)
        if api_prioritization is not None:
            pulumi.set(__self__, "api_prioritization", api_prioritization)
        if application_load_balancer is not None:
            pulumi.set(__self__, "application_load_balancer", application_load_balancer)
        if audience_segmentation is not None:
            pulumi.set(__self__, "audience_segmentation", audience_segmentation)
        if auto_domain_validation is not None:
            pulumi.set(__self__, "auto_domain_validation", auto_domain_validation)
        if base_directory is not None:
            pulumi.set(__self__, "base_directory", base_directory)
        if boss_beaconing is not None:
            pulumi.set(__self__, "boss_beaconing", boss_beaconing)
        if breadcrumbs is not None:
            pulumi.set(__self__, "breadcrumbs", breadcrumbs)
        if break_connection is not None:
            pulumi.set(__self__, "break_connection", break_connection)
        if brotli is not None:
            pulumi.set(__self__, "brotli", brotli)
        if cache_error is not None:
            pulumi.set(__self__, "cache_error", cache_error)
        if cache_id is not None:
            pulumi.set(__self__, "cache_id", cache_id)
        if cache_key_ignore_case is not None:
            pulumi.set(__self__, "cache_key_ignore_case", cache_key_ignore_case)
        if cache_key_query_params is not None:
            pulumi.set(__self__, "cache_key_query_params", cache_key_query_params)
        if cache_key_rewrite is not None:
            pulumi.set(__self__, "cache_key_rewrite", cache_key_rewrite)
        if cache_post is not None:
            pulumi.set(__self__, "cache_post", cache_post)
        if cache_redirect is not None:
            pulumi.set(__self__, "cache_redirect", cache_redirect)
        if cache_tag is not None:
            pulumi.set(__self__, "cache_tag", cache_tag)
        if cache_tag_visible is not None:
            pulumi.set(__self__, "cache_tag_visible", cache_tag_visible)
        if caching is not None:
            pulumi.set(__self__, "caching", caching)
        if central_authorization is not None:
            pulumi.set(__self__, "central_authorization", central_authorization)
        if chase_redirects is not None:
            pulumi.set(__self__, "chase_redirects", chase_redirects)
        if client_characteristics is not None:
            pulumi.set(__self__, "client_characteristics", client_characteristics)
        if cloud_interconnects is not None:
            pulumi.set(__self__, "cloud_interconnects", cloud_interconnects)
        if cloud_wrapper is not None:
            pulumi.set(__self__, "cloud_wrapper", cloud_wrapper)
        if cloud_wrapper_advanced is not None:
            pulumi.set(__self__, "cloud_wrapper_advanced", cloud_wrapper_advanced)
        if common_media_client_data is not None:
            pulumi.set(__self__, "common_media_client_data", common_media_client_data)
        if conditional_origin is not None:
            pulumi.set(__self__, "conditional_origin", conditional_origin)
        if construct_response is not None:
            pulumi.set(__self__, "construct_response", construct_response)
        if content_characteristics is not None:
            pulumi.set(__self__, "content_characteristics", content_characteristics)
        if content_characteristics_amd is not None:
            pulumi.set(__self__, "content_characteristics_amd", content_characteristics_amd)
        if content_characteristics_dd is not None:
            pulumi.set(__self__, "content_characteristics_dd", content_characteristics_dd)
        if content_characteristics_wsd_large_file is not None:
            pulumi.set(__self__, "content_characteristics_wsd_large_file", content_characteristics_wsd_large_file)
        if content_characteristics_wsd_live is not None:
            pulumi.set(__self__, "content_characteristics_wsd_live", content_characteristics_wsd_live)
        if content_characteristics_wsd_vod is not None:
            pulumi.set(__self__, "content_characteristics_wsd_vod", content_characteristics_wsd_vod)
        if content_pre_position is not None:
            pulumi.set(__self__, "content_pre_position", content_pre_position)
        if content_targeting_protection is not None:
            pulumi.set(__self__, "content_targeting_protection", content_targeting_protection)
        if cors_support is not None:
            pulumi.set(__self__, "cors_support", cors_support)
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if custom_behavior is not None:
            pulumi.set(__self__, "custom_behavior", custom_behavior)
        if datastream is not None:
            pulumi.set(__self__, "datastream", datastream)
        if dcp is not None:
            pulumi.set(__self__, "dcp", dcp)
        if dcp_auth_hmac_transformation is not None:
            pulumi.set(__self__, "dcp_auth_hmac_transformation", dcp_auth_hmac_transformation)
        if dcp_auth_regex_transformation is not None:
            pulumi.set(__self__, "dcp_auth_regex_transformation", dcp_auth_regex_transformation)
        if dcp_auth_substring_transformation is not None:
            pulumi.set(__self__, "dcp_auth_substring_transformation", dcp_auth_substring_transformation)
        if dcp_auth_variable_extractor is not None:
            pulumi.set(__self__, "dcp_auth_variable_extractor", dcp_auth_variable_extractor)
        if dcp_default_authz_groups is not None:
            pulumi.set(__self__, "dcp_default_authz_groups", dcp_default_authz_groups)
        if dcp_dev_relations is not None:
            pulumi.set(__self__, "dcp_dev_relations", dcp_dev_relations)
        if dcp_real_time_auth is not None:
            pulumi.set(__self__, "dcp_real_time_auth", dcp_real_time_auth)
        if delivery_receipt is not None:
            pulumi.set(__self__, "delivery_receipt", delivery_receipt)
        if deny_access is not None:
            pulumi.set(__self__, "deny_access", deny_access)
        if deny_direct_failover_access is not None:
            pulumi.set(__self__, "deny_direct_failover_access", deny_direct_failover_access)
        if device_characteristic_cache_id is not None:
            pulumi.set(__self__, "device_characteristic_cache_id", device_characteristic_cache_id)
        if device_characteristic_header is not None:
            pulumi.set(__self__, "device_characteristic_header", device_characteristic_header)
        if dns_async_refresh is not None:
            pulumi.set(__self__, "dns_async_refresh", dns_async_refresh)
        if dns_prefresh is not None:
            pulumi.set(__self__, "dns_prefresh", dns_prefresh)
        if downgrade_protocol is not None:
            pulumi.set(__self__, "downgrade_protocol", downgrade_protocol)
        if download_complete_marker is not None:
            pulumi.set(__self__, "download_complete_marker", download_complete_marker)
        if download_notification is not None:
            pulumi.set(__self__, "download_notification", download_notification)
        if downstream_cache is not None:
            pulumi.set(__self__, "downstream_cache", downstream_cache)
        if dynamic_throughtput_optimization is not None:
            pulumi.set(__self__, "dynamic_throughtput_optimization", dynamic_throughtput_optimization)
        if dynamic_throughtput_optimization_override is not None:
            pulumi.set(__self__, "dynamic_throughtput_optimization_override", dynamic_throughtput_optimization_override)
        if dynamic_web_content is not None:
            pulumi.set(__self__, "dynamic_web_content", dynamic_web_content)
        if ecms_bulk_upload is not None:
            pulumi.set(__self__, "ecms_bulk_upload", ecms_bulk_upload)
        if ecms_database is not None:
            pulumi.set(__self__, "ecms_database", ecms_database)
        if ecms_dataset is not None:
            pulumi.set(__self__, "ecms_dataset", ecms_dataset)
        if ecms_object_key is not None:
            pulumi.set(__self__, "ecms_object_key", ecms_object_key)
        if edge_connect is not None:
            pulumi.set(__self__, "edge_connect", edge_connect)
        if edge_load_balancing_advanced is not None:
            pulumi.set(__self__, "edge_load_balancing_advanced", edge_load_balancing_advanced)
        if edge_load_balancing_data_center is not None:
            pulumi.set(__self__, "edge_load_balancing_data_center", edge_load_balancing_data_center)
        if edge_load_balancing_origin is not None:
            pulumi.set(__self__, "edge_load_balancing_origin", edge_load_balancing_origin)
        if edge_origin_authorization is not None:
            pulumi.set(__self__, "edge_origin_authorization", edge_origin_authorization)
        if edge_redirector is not None:
            pulumi.set(__self__, "edge_redirector", edge_redirector)
        if edge_scape is not None:
            pulumi.set(__self__, "edge_scape", edge_scape)
        if edge_side_includes is not None:
            pulumi.set(__self__, "edge_side_includes", edge_side_includes)
        if edge_worker is not None:
            pulumi.set(__self__, "edge_worker", edge_worker)
        if enhanced_akamai_protocol is not None:
            pulumi.set(__self__, "enhanced_akamai_protocol", enhanced_akamai_protocol)
        if enhanced_proxy_detection is not None:
            pulumi.set(__self__, "enhanced_proxy_detection", enhanced_proxy_detection)
        if epd_forward_header_enrichment is not None:
            pulumi.set(__self__, "epd_forward_header_enrichment", epd_forward_header_enrichment)
        if fail_action is not None:
            pulumi.set(__self__, "fail_action", fail_action)
        if failover_bot_manager_feature_compatibility is not None:
            pulumi.set(__self__, "failover_bot_manager_feature_compatibility", failover_bot_manager_feature_compatibility)
        if fast_invalidate is not None:
            pulumi.set(__self__, "fast_invalidate", fast_invalidate)
        if first_party_marketing is not None:
            pulumi.set(__self__, "first_party_marketing", first_party_marketing)
        if first_party_marketing_plus is not None:
            pulumi.set(__self__, "first_party_marketing_plus", first_party_marketing_plus)
        if forward_rewrite is not None:
            pulumi.set(__self__, "forward_rewrite", forward_rewrite)
        if g2oheader is not None:
            pulumi.set(__self__, "g2oheader", g2oheader)
        if global_request_number is not None:
            pulumi.set(__self__, "global_request_number", global_request_number)
        if graphql_caching is not None:
            pulumi.set(__self__, "graphql_caching", graphql_caching)
        if gzip_response is not None:
            pulumi.set(__self__, "gzip_response", gzip_response)
        if hd_data_advanced is not None:
            pulumi.set(__self__, "hd_data_advanced", hd_data_advanced)
        if health_detection is not None:
            pulumi.set(__self__, "health_detection", health_detection)
        if hsaf_eip_binding is not None:
            pulumi.set(__self__, "hsaf_eip_binding", hsaf_eip_binding)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)
        if http3 is not None:
            pulumi.set(__self__, "http3", http3)
        if http_strict_transport_security is not None:
            pulumi.set(__self__, "http_strict_transport_security", http_strict_transport_security)
        if http_to_https_upgrade is not None:
            pulumi.set(__self__, "http_to_https_upgrade", http_to_https_upgrade)
        if im_override is not None:
            pulumi.set(__self__, "im_override", im_override)
        if image_and_video_manager is not None:
            pulumi.set(__self__, "image_and_video_manager", image_and_video_manager)
        if image_manager is not None:
            pulumi.set(__self__, "image_manager", image_manager)
        if image_manager_video is not None:
            pulumi.set(__self__, "image_manager_video", image_manager_video)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if instant is not None:
            pulumi.set(__self__, "instant", instant)
        if instant_config is not None:
            pulumi.set(__self__, "instant_config", instant_config)
        if large_file_optimization is not None:
            pulumi.set(__self__, "large_file_optimization", large_file_optimization)
        if large_file_optimization_advanced is not None:
            pulumi.set(__self__, "large_file_optimization_advanced", large_file_optimization_advanced)
        if limit_bit_rate is not None:
            pulumi.set(__self__, "limit_bit_rate", limit_bit_rate)
        if log_custom is not None:
            pulumi.set(__self__, "log_custom", log_custom)
        if m_pulse is not None:
            pulumi.set(__self__, "m_pulse", m_pulse)
        if manifest_personalization is not None:
            pulumi.set(__self__, "manifest_personalization", manifest_personalization)
        if manifest_rerouting is not None:
            pulumi.set(__self__, "manifest_rerouting", manifest_rerouting)
        if manual_server_push is not None:
            pulumi.set(__self__, "manual_server_push", manual_server_push)
        if media_acceleration is not None:
            pulumi.set(__self__, "media_acceleration", media_acceleration)
        if media_acceleration_quic_optout is not None:
            pulumi.set(__self__, "media_acceleration_quic_optout", media_acceleration_quic_optout)
        if media_client is not None:
            pulumi.set(__self__, "media_client", media_client)
        if media_file_retrieval_optimization is not None:
            pulumi.set(__self__, "media_file_retrieval_optimization", media_file_retrieval_optimization)
        if media_origin_failover is not None:
            pulumi.set(__self__, "media_origin_failover", media_origin_failover)
        if metadata_caching is not None:
            pulumi.set(__self__, "metadata_caching", metadata_caching)
        if mobile_sdk_performance is not None:
            pulumi.set(__self__, "mobile_sdk_performance", mobile_sdk_performance)
        if modify_incoming_request_header is not None:
            pulumi.set(__self__, "modify_incoming_request_header", modify_incoming_request_header)
        if modify_incoming_response_header is not None:
            pulumi.set(__self__, "modify_incoming_response_header", modify_incoming_response_header)
        if modify_outgoing_request_header is not None:
            pulumi.set(__self__, "modify_outgoing_request_header", modify_outgoing_request_header)
        if modify_outgoing_response_header is not None:
            pulumi.set(__self__, "modify_outgoing_response_header", modify_outgoing_response_header)
        if modify_via_header is not None:
            pulumi.set(__self__, "modify_via_header", modify_via_header)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if origin_characteristics is not None:
            pulumi.set(__self__, "origin_characteristics", origin_characteristics)
        if origin_characteristics_wsd is not None:
            pulumi.set(__self__, "origin_characteristics_wsd", origin_characteristics_wsd)
        if origin_failure_recovery_method is not None:
            pulumi.set(__self__, "origin_failure_recovery_method", origin_failure_recovery_method)
        if origin_failure_recovery_policy is not None:
            pulumi.set(__self__, "origin_failure_recovery_policy", origin_failure_recovery_policy)
        if origin_ip_acl is not None:
            pulumi.set(__self__, "origin_ip_acl", origin_ip_acl)
        if persistent_client_connection is not None:
            pulumi.set(__self__, "persistent_client_connection", persistent_client_connection)
        if persistent_connection is not None:
            pulumi.set(__self__, "persistent_connection", persistent_connection)
        if personally_identifiable_information is not None:
            pulumi.set(__self__, "personally_identifiable_information", personally_identifiable_information)
        if phased_release is not None:
            pulumi.set(__self__, "phased_release", phased_release)
        if preconnect is not None:
            pulumi.set(__self__, "preconnect", preconnect)
        if predictive_content_delivery is not None:
            pulumi.set(__self__, "predictive_content_delivery", predictive_content_delivery)
        if predictive_prefetching is not None:
            pulumi.set(__self__, "predictive_prefetching", predictive_prefetching)
        if prefetch is not None:
            pulumi.set(__self__, "prefetch", prefetch)
        if prefetchable is not None:
            pulumi.set(__self__, "prefetchable", prefetchable)
        if prefresh_cache is not None:
            pulumi.set(__self__, "prefresh_cache", prefresh_cache)
        if quality is not None:
            pulumi.set(__self__, "quality", quality)
        if quic_beta is not None:
            pulumi.set(__self__, "quic_beta", quic_beta)
        if random_seek is not None:
            pulumi.set(__self__, "random_seek", random_seek)
        if rapid is not None:
            pulumi.set(__self__, "rapid", rapid)
        if read_timeout is not None:
            pulumi.set(__self__, "read_timeout", read_timeout)
        if real_time_reporting is not None:
            pulumi.set(__self__, "real_time_reporting", real_time_reporting)
        if real_user_monitoring is not None:
            pulumi.set(__self__, "real_user_monitoring", real_user_monitoring)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if redirectplus is not None:
            pulumi.set(__self__, "redirectplus", redirectplus)
        if referer_checking is not None:
            pulumi.set(__self__, "referer_checking", referer_checking)
        if remove_query_parameter is not None:
            pulumi.set(__self__, "remove_query_parameter", remove_query_parameter)
        if remove_vary is not None:
            pulumi.set(__self__, "remove_vary", remove_vary)
        if report is not None:
            pulumi.set(__self__, "report", report)
        if request_control is not None:
            pulumi.set(__self__, "request_control", request_control)
        if request_type_marker is not None:
            pulumi.set(__self__, "request_type_marker", request_type_marker)
        if resource_optimizer is not None:
            pulumi.set(__self__, "resource_optimizer", resource_optimizer)
        if resource_optimizer_extended_compatibility is not None:
            pulumi.set(__self__, "resource_optimizer_extended_compatibility", resource_optimizer_extended_compatibility)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if response_cookie is not None:
            pulumi.set(__self__, "response_cookie", response_cookie)
        if restrict_object_caching is not None:
            pulumi.set(__self__, "restrict_object_caching", restrict_object_caching)
        if return_cache_status is not None:
            pulumi.set(__self__, "return_cache_status", return_cache_status)
        if rewrite_url is not None:
            pulumi.set(__self__, "rewrite_url", rewrite_url)
        if rum_custom is not None:
            pulumi.set(__self__, "rum_custom", rum_custom)
        if saas_definitions is not None:
            pulumi.set(__self__, "saas_definitions", saas_definitions)
        if sales_force_commerce_cloud_client is not None:
            pulumi.set(__self__, "sales_force_commerce_cloud_client", sales_force_commerce_cloud_client)
        if sales_force_commerce_cloud_provider is not None:
            pulumi.set(__self__, "sales_force_commerce_cloud_provider", sales_force_commerce_cloud_provider)
        if sales_force_commerce_cloud_provider_host_header is not None:
            pulumi.set(__self__, "sales_force_commerce_cloud_provider_host_header", sales_force_commerce_cloud_provider_host_header)
        if save_post_dca_processing is not None:
            pulumi.set(__self__, "save_post_dca_processing", save_post_dca_processing)
        if schedule_invalidation is not None:
            pulumi.set(__self__, "schedule_invalidation", schedule_invalidation)
        if script_management is not None:
            pulumi.set(__self__, "script_management", script_management)
        if segmented_content_protection is not None:
            pulumi.set(__self__, "segmented_content_protection", segmented_content_protection)
        if segmented_media_optimization is not None:
            pulumi.set(__self__, "segmented_media_optimization", segmented_media_optimization)
        if segmented_media_streaming_prefetch is not None:
            pulumi.set(__self__, "segmented_media_streaming_prefetch", segmented_media_streaming_prefetch)
        if set_variable is not None:
            pulumi.set(__self__, "set_variable", set_variable)
        if simulate_error_code is not None:
            pulumi.set(__self__, "simulate_error_code", simulate_error_code)
        if site_shield is not None:
            pulumi.set(__self__, "site_shield", site_shield)
        if standard_tls_migration is not None:
            pulumi.set(__self__, "standard_tls_migration", standard_tls_migration)
        if standard_tls_migration_override is not None:
            pulumi.set(__self__, "standard_tls_migration_override", standard_tls_migration_override)
        if strict_header_parsing is not None:
            pulumi.set(__self__, "strict_header_parsing", strict_header_parsing)
        if sub_customer is not None:
            pulumi.set(__self__, "sub_customer", sub_customer)
        if sure_route is not None:
            pulumi.set(__self__, "sure_route", sure_route)
        if tcp_optimization is not None:
            pulumi.set(__self__, "tcp_optimization", tcp_optimization)
        if tea_leaf is not None:
            pulumi.set(__self__, "tea_leaf", tea_leaf)
        if tiered_distribution is not None:
            pulumi.set(__self__, "tiered_distribution", tiered_distribution)
        if tiered_distribution_advanced is not None:
            pulumi.set(__self__, "tiered_distribution_advanced", tiered_distribution_advanced)
        if tiered_distribution_customization is not None:
            pulumi.set(__self__, "tiered_distribution_customization", tiered_distribution_customization)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uid_configuration is not None:
            pulumi.set(__self__, "uid_configuration", uid_configuration)
        if validate_entity_tag is not None:
            pulumi.set(__self__, "validate_entity_tag", validate_entity_tag)
        if verify_json_web_token is not None:
            pulumi.set(__self__, "verify_json_web_token", verify_json_web_token)
        if verify_json_web_token_for_dcp is not None:
            pulumi.set(__self__, "verify_json_web_token_for_dcp", verify_json_web_token_for_dcp)
        if verify_token_authorization is not None:
            pulumi.set(__self__, "verify_token_authorization", verify_token_authorization)
        if virtual_waiting_room is not None:
            pulumi.set(__self__, "virtual_waiting_room", virtual_waiting_room)
        if virtual_waiting_room_with_edge_workers is not None:
            pulumi.set(__self__, "virtual_waiting_room_with_edge_workers", virtual_waiting_room_with_edge_workers)
        if visitor_prioritization is not None:
            pulumi.set(__self__, "visitor_prioritization", visitor_prioritization)
        if visitor_prioritization_fifo is not None:
            pulumi.set(__self__, "visitor_prioritization_fifo", visitor_prioritization_fifo)
        if visitor_prioritization_fifo_standalone is not None:
            pulumi.set(__self__, "visitor_prioritization_fifo_standalone", visitor_prioritization_fifo_standalone)
        if watermarking is not None:
            pulumi.set(__self__, "watermarking", watermarking)
        if web_application_firewall is not None:
            pulumi.set(__self__, "web_application_firewall", web_application_firewall)
        if web_sockets is not None:
            pulumi.set(__self__, "web_sockets", web_sockets)
        if webdav is not None:
            pulumi.set(__self__, "webdav", webdav)

    @property
    @pulumi.getter(name="adScalerCircuitBreaker")
    def ad_scaler_circuit_breaker(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAdScalerCircuitBreakerArgs']:
        return pulumi.get(self, "ad_scaler_circuit_breaker")

    @ad_scaler_circuit_breaker.setter
    def ad_scaler_circuit_breaker(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAdScalerCircuitBreakerArgs']):
        pulumi.set(self, "ad_scaler_circuit_breaker", value)

    @property
    @pulumi.getter(name="adaptiveAcceleration")
    def adaptive_acceleration(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveAccelerationArgs']:
        return pulumi.get(self, "adaptive_acceleration")

    @adaptive_acceleration.setter
    def adaptive_acceleration(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveAccelerationArgs']):
        pulumi.set(self, "adaptive_acceleration", value)

    @property
    @pulumi.getter(name="adaptiveImageCompression")
    def adaptive_image_compression(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveImageCompressionArgs']:
        return pulumi.get(self, "adaptive_image_compression")

    @adaptive_image_compression.setter
    def adaptive_image_compression(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveImageCompressionArgs']):
        pulumi.set(self, "adaptive_image_compression", value)

    @property
    @pulumi.getter
    def advanced(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAdvancedArgs']:
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAdvancedArgs']):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter(name="aggregatedReporting")
    def aggregated_reporting(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAggregatedReportingArgs']:
        return pulumi.get(self, "aggregated_reporting")

    @aggregated_reporting.setter
    def aggregated_reporting(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAggregatedReportingArgs']):
        pulumi.set(self, "aggregated_reporting", value)

    @property
    @pulumi.getter
    def akamaizer(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerArgs']:
        return pulumi.get(self, "akamaizer")

    @akamaizer.setter
    def akamaizer(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerArgs']):
        pulumi.set(self, "akamaizer", value)

    @property
    @pulumi.getter(name="akamaizerTag")
    def akamaizer_tag(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerTagArgs']:
        return pulumi.get(self, "akamaizer_tag")

    @akamaizer_tag.setter
    def akamaizer_tag(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerTagArgs']):
        pulumi.set(self, "akamaizer_tag", value)

    @property
    @pulumi.getter(name="allHttpInCacheHierarchy")
    def all_http_in_cache_hierarchy(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllHttpInCacheHierarchyArgs']:
        return pulumi.get(self, "all_http_in_cache_hierarchy")

    @all_http_in_cache_hierarchy.setter
    def all_http_in_cache_hierarchy(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllHttpInCacheHierarchyArgs']):
        pulumi.set(self, "all_http_in_cache_hierarchy", value)

    @property
    @pulumi.getter(name="allowCloudletsOrigins")
    def allow_cloudlets_origins(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowCloudletsOriginsArgs']:
        return pulumi.get(self, "allow_cloudlets_origins")

    @allow_cloudlets_origins.setter
    def allow_cloudlets_origins(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowCloudletsOriginsArgs']):
        pulumi.set(self, "allow_cloudlets_origins", value)

    @property
    @pulumi.getter(name="allowDelete")
    def allow_delete(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowDeleteArgs']:
        return pulumi.get(self, "allow_delete")

    @allow_delete.setter
    def allow_delete(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowDeleteArgs']):
        pulumi.set(self, "allow_delete", value)

    @property
    @pulumi.getter(name="allowHttpsCacheKeySharing")
    def allow_https_cache_key_sharing(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsCacheKeySharingArgs']:
        return pulumi.get(self, "allow_https_cache_key_sharing")

    @allow_https_cache_key_sharing.setter
    def allow_https_cache_key_sharing(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsCacheKeySharingArgs']):
        pulumi.set(self, "allow_https_cache_key_sharing", value)

    @property
    @pulumi.getter(name="allowHttpsDowngrade")
    def allow_https_downgrade(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsDowngradeArgs']:
        return pulumi.get(self, "allow_https_downgrade")

    @allow_https_downgrade.setter
    def allow_https_downgrade(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsDowngradeArgs']):
        pulumi.set(self, "allow_https_downgrade", value)

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowOptionsArgs']:
        return pulumi.get(self, "allow_options")

    @allow_options.setter
    def allow_options(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowOptionsArgs']):
        pulumi.set(self, "allow_options", value)

    @property
    @pulumi.getter(name="allowPatch")
    def allow_patch(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowPatchArgs']:
        return pulumi.get(self, "allow_patch")

    @allow_patch.setter
    def allow_patch(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowPatchArgs']):
        pulumi.set(self, "allow_patch", value)

    @property
    @pulumi.getter(name="allowPost")
    def allow_post(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowPostArgs']:
        return pulumi.get(self, "allow_post")

    @allow_post.setter
    def allow_post(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowPostArgs']):
        pulumi.set(self, "allow_post", value)

    @property
    @pulumi.getter(name="allowPut")
    def allow_put(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowPutArgs']:
        return pulumi.get(self, "allow_put")

    @allow_put.setter
    def allow_put(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowPutArgs']):
        pulumi.set(self, "allow_put", value)

    @property
    @pulumi.getter(name="allowTransferEncoding")
    def allow_transfer_encoding(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowTransferEncodingArgs']:
        return pulumi.get(self, "allow_transfer_encoding")

    @allow_transfer_encoding.setter
    def allow_transfer_encoding(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAllowTransferEncodingArgs']):
        pulumi.set(self, "allow_transfer_encoding", value)

    @property
    @pulumi.getter(name="altSvcHeader")
    def alt_svc_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAltSvcHeaderArgs']:
        return pulumi.get(self, "alt_svc_header")

    @alt_svc_header.setter
    def alt_svc_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAltSvcHeaderArgs']):
        pulumi.set(self, "alt_svc_header", value)

    @property
    @pulumi.getter(name="apiPrioritization")
    def api_prioritization(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationArgs']:
        return pulumi.get(self, "api_prioritization")

    @api_prioritization.setter
    def api_prioritization(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationArgs']):
        pulumi.set(self, "api_prioritization", value)

    @property
    @pulumi.getter(name="applicationLoadBalancer")
    def application_load_balancer(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerArgs']:
        return pulumi.get(self, "application_load_balancer")

    @application_load_balancer.setter
    def application_load_balancer(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerArgs']):
        pulumi.set(self, "application_load_balancer", value)

    @property
    @pulumi.getter(name="audienceSegmentation")
    def audience_segmentation(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationArgs']:
        return pulumi.get(self, "audience_segmentation")

    @audience_segmentation.setter
    def audience_segmentation(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationArgs']):
        pulumi.set(self, "audience_segmentation", value)

    @property
    @pulumi.getter(name="autoDomainValidation")
    def auto_domain_validation(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAutoDomainValidationArgs']:
        return pulumi.get(self, "auto_domain_validation")

    @auto_domain_validation.setter
    def auto_domain_validation(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAutoDomainValidationArgs']):
        pulumi.set(self, "auto_domain_validation", value)

    @property
    @pulumi.getter(name="baseDirectory")
    def base_directory(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorBaseDirectoryArgs']:
        return pulumi.get(self, "base_directory")

    @base_directory.setter
    def base_directory(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorBaseDirectoryArgs']):
        pulumi.set(self, "base_directory", value)

    @property
    @pulumi.getter(name="bossBeaconing")
    def boss_beaconing(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorBossBeaconingArgs']:
        return pulumi.get(self, "boss_beaconing")

    @boss_beaconing.setter
    def boss_beaconing(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorBossBeaconingArgs']):
        pulumi.set(self, "boss_beaconing", value)

    @property
    @pulumi.getter
    def breadcrumbs(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorBreadcrumbsArgs']:
        return pulumi.get(self, "breadcrumbs")

    @breadcrumbs.setter
    def breadcrumbs(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorBreadcrumbsArgs']):
        pulumi.set(self, "breadcrumbs", value)

    @property
    @pulumi.getter(name="breakConnection")
    def break_connection(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorBreakConnectionArgs']:
        return pulumi.get(self, "break_connection")

    @break_connection.setter
    def break_connection(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorBreakConnectionArgs']):
        pulumi.set(self, "break_connection", value)

    @property
    @pulumi.getter
    def brotli(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorBrotliArgs']:
        return pulumi.get(self, "brotli")

    @brotli.setter
    def brotli(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorBrotliArgs']):
        pulumi.set(self, "brotli", value)

    @property
    @pulumi.getter(name="cacheError")
    def cache_error(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheErrorArgs']:
        return pulumi.get(self, "cache_error")

    @cache_error.setter
    def cache_error(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheErrorArgs']):
        pulumi.set(self, "cache_error", value)

    @property
    @pulumi.getter(name="cacheId")
    def cache_id(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheIdArgs']:
        return pulumi.get(self, "cache_id")

    @cache_id.setter
    def cache_id(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheIdArgs']):
        pulumi.set(self, "cache_id", value)

    @property
    @pulumi.getter(name="cacheKeyIgnoreCase")
    def cache_key_ignore_case(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyIgnoreCaseArgs']:
        return pulumi.get(self, "cache_key_ignore_case")

    @cache_key_ignore_case.setter
    def cache_key_ignore_case(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyIgnoreCaseArgs']):
        pulumi.set(self, "cache_key_ignore_case", value)

    @property
    @pulumi.getter(name="cacheKeyQueryParams")
    def cache_key_query_params(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyQueryParamsArgs']:
        return pulumi.get(self, "cache_key_query_params")

    @cache_key_query_params.setter
    def cache_key_query_params(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyQueryParamsArgs']):
        pulumi.set(self, "cache_key_query_params", value)

    @property
    @pulumi.getter(name="cacheKeyRewrite")
    def cache_key_rewrite(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyRewriteArgs']:
        return pulumi.get(self, "cache_key_rewrite")

    @cache_key_rewrite.setter
    def cache_key_rewrite(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyRewriteArgs']):
        pulumi.set(self, "cache_key_rewrite", value)

    @property
    @pulumi.getter(name="cachePost")
    def cache_post(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCachePostArgs']:
        return pulumi.get(self, "cache_post")

    @cache_post.setter
    def cache_post(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCachePostArgs']):
        pulumi.set(self, "cache_post", value)

    @property
    @pulumi.getter(name="cacheRedirect")
    def cache_redirect(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheRedirectArgs']:
        return pulumi.get(self, "cache_redirect")

    @cache_redirect.setter
    def cache_redirect(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheRedirectArgs']):
        pulumi.set(self, "cache_redirect", value)

    @property
    @pulumi.getter(name="cacheTag")
    def cache_tag(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagArgs']:
        return pulumi.get(self, "cache_tag")

    @cache_tag.setter
    def cache_tag(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagArgs']):
        pulumi.set(self, "cache_tag", value)

    @property
    @pulumi.getter(name="cacheTagVisible")
    def cache_tag_visible(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagVisibleArgs']:
        return pulumi.get(self, "cache_tag_visible")

    @cache_tag_visible.setter
    def cache_tag_visible(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagVisibleArgs']):
        pulumi.set(self, "cache_tag_visible", value)

    @property
    @pulumi.getter
    def caching(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCachingArgs']:
        return pulumi.get(self, "caching")

    @caching.setter
    def caching(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCachingArgs']):
        pulumi.set(self, "caching", value)

    @property
    @pulumi.getter(name="centralAuthorization")
    def central_authorization(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCentralAuthorizationArgs']:
        return pulumi.get(self, "central_authorization")

    @central_authorization.setter
    def central_authorization(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCentralAuthorizationArgs']):
        pulumi.set(self, "central_authorization", value)

    @property
    @pulumi.getter(name="chaseRedirects")
    def chase_redirects(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorChaseRedirectsArgs']:
        return pulumi.get(self, "chase_redirects")

    @chase_redirects.setter
    def chase_redirects(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorChaseRedirectsArgs']):
        pulumi.set(self, "chase_redirects", value)

    @property
    @pulumi.getter(name="clientCharacteristics")
    def client_characteristics(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorClientCharacteristicsArgs']:
        return pulumi.get(self, "client_characteristics")

    @client_characteristics.setter
    def client_characteristics(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorClientCharacteristicsArgs']):
        pulumi.set(self, "client_characteristics", value)

    @property
    @pulumi.getter(name="cloudInterconnects")
    def cloud_interconnects(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCloudInterconnectsArgs']:
        return pulumi.get(self, "cloud_interconnects")

    @cloud_interconnects.setter
    def cloud_interconnects(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCloudInterconnectsArgs']):
        pulumi.set(self, "cloud_interconnects", value)

    @property
    @pulumi.getter(name="cloudWrapper")
    def cloud_wrapper(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperArgs']:
        return pulumi.get(self, "cloud_wrapper")

    @cloud_wrapper.setter
    def cloud_wrapper(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperArgs']):
        pulumi.set(self, "cloud_wrapper", value)

    @property
    @pulumi.getter(name="cloudWrapperAdvanced")
    def cloud_wrapper_advanced(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperAdvancedArgs']:
        return pulumi.get(self, "cloud_wrapper_advanced")

    @cloud_wrapper_advanced.setter
    def cloud_wrapper_advanced(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperAdvancedArgs']):
        pulumi.set(self, "cloud_wrapper_advanced", value)

    @property
    @pulumi.getter(name="commonMediaClientData")
    def common_media_client_data(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCommonMediaClientDataArgs']:
        return pulumi.get(self, "common_media_client_data")

    @common_media_client_data.setter
    def common_media_client_data(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCommonMediaClientDataArgs']):
        pulumi.set(self, "common_media_client_data", value)

    @property
    @pulumi.getter(name="conditionalOrigin")
    def conditional_origin(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorConditionalOriginArgs']:
        return pulumi.get(self, "conditional_origin")

    @conditional_origin.setter
    def conditional_origin(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorConditionalOriginArgs']):
        pulumi.set(self, "conditional_origin", value)

    @property
    @pulumi.getter(name="constructResponse")
    def construct_response(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorConstructResponseArgs']:
        return pulumi.get(self, "construct_response")

    @construct_response.setter
    def construct_response(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorConstructResponseArgs']):
        pulumi.set(self, "construct_response", value)

    @property
    @pulumi.getter(name="contentCharacteristics")
    def content_characteristics(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsArgs']:
        return pulumi.get(self, "content_characteristics")

    @content_characteristics.setter
    def content_characteristics(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsArgs']):
        pulumi.set(self, "content_characteristics", value)

    @property
    @pulumi.getter(name="contentCharacteristicsAmd")
    def content_characteristics_amd(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsAmdArgs']:
        return pulumi.get(self, "content_characteristics_amd")

    @content_characteristics_amd.setter
    def content_characteristics_amd(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsAmdArgs']):
        pulumi.set(self, "content_characteristics_amd", value)

    @property
    @pulumi.getter(name="contentCharacteristicsDd")
    def content_characteristics_dd(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsDdArgs']:
        return pulumi.get(self, "content_characteristics_dd")

    @content_characteristics_dd.setter
    def content_characteristics_dd(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsDdArgs']):
        pulumi.set(self, "content_characteristics_dd", value)

    @property
    @pulumi.getter(name="contentCharacteristicsWsdLargeFile")
    def content_characteristics_wsd_large_file(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLargeFileArgs']:
        return pulumi.get(self, "content_characteristics_wsd_large_file")

    @content_characteristics_wsd_large_file.setter
    def content_characteristics_wsd_large_file(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLargeFileArgs']):
        pulumi.set(self, "content_characteristics_wsd_large_file", value)

    @property
    @pulumi.getter(name="contentCharacteristicsWsdLive")
    def content_characteristics_wsd_live(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLiveArgs']:
        return pulumi.get(self, "content_characteristics_wsd_live")

    @content_characteristics_wsd_live.setter
    def content_characteristics_wsd_live(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLiveArgs']):
        pulumi.set(self, "content_characteristics_wsd_live", value)

    @property
    @pulumi.getter(name="contentCharacteristicsWsdVod")
    def content_characteristics_wsd_vod(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdVodArgs']:
        return pulumi.get(self, "content_characteristics_wsd_vod")

    @content_characteristics_wsd_vod.setter
    def content_characteristics_wsd_vod(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdVodArgs']):
        pulumi.set(self, "content_characteristics_wsd_vod", value)

    @property
    @pulumi.getter(name="contentPrePosition")
    def content_pre_position(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentPrePositionArgs']:
        return pulumi.get(self, "content_pre_position")

    @content_pre_position.setter
    def content_pre_position(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentPrePositionArgs']):
        pulumi.set(self, "content_pre_position", value)

    @property
    @pulumi.getter(name="contentTargetingProtection")
    def content_targeting_protection(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentTargetingProtectionArgs']:
        return pulumi.get(self, "content_targeting_protection")

    @content_targeting_protection.setter
    def content_targeting_protection(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorContentTargetingProtectionArgs']):
        pulumi.set(self, "content_targeting_protection", value)

    @property
    @pulumi.getter(name="corsSupport")
    def cors_support(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCorsSupportArgs']:
        return pulumi.get(self, "cors_support")

    @cors_support.setter
    def cors_support(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCorsSupportArgs']):
        pulumi.set(self, "cors_support", value)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeArgs']:
        return pulumi.get(self, "cp_code")

    @cp_code.setter
    def cp_code(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeArgs']):
        pulumi.set(self, "cp_code", value)

    @property
    @pulumi.getter(name="customBehavior")
    def custom_behavior(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCustomBehaviorArgs']:
        return pulumi.get(self, "custom_behavior")

    @custom_behavior.setter
    def custom_behavior(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCustomBehaviorArgs']):
        pulumi.set(self, "custom_behavior", value)

    @property
    @pulumi.getter
    def datastream(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDatastreamArgs']:
        return pulumi.get(self, "datastream")

    @datastream.setter
    def datastream(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDatastreamArgs']):
        pulumi.set(self, "datastream", value)

    @property
    @pulumi.getter
    def dcp(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpArgs']:
        return pulumi.get(self, "dcp")

    @dcp.setter
    def dcp(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpArgs']):
        pulumi.set(self, "dcp", value)

    @property
    @pulumi.getter(name="dcpAuthHmacTransformation")
    def dcp_auth_hmac_transformation(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthHmacTransformationArgs']:
        return pulumi.get(self, "dcp_auth_hmac_transformation")

    @dcp_auth_hmac_transformation.setter
    def dcp_auth_hmac_transformation(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthHmacTransformationArgs']):
        pulumi.set(self, "dcp_auth_hmac_transformation", value)

    @property
    @pulumi.getter(name="dcpAuthRegexTransformation")
    def dcp_auth_regex_transformation(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthRegexTransformationArgs']:
        return pulumi.get(self, "dcp_auth_regex_transformation")

    @dcp_auth_regex_transformation.setter
    def dcp_auth_regex_transformation(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthRegexTransformationArgs']):
        pulumi.set(self, "dcp_auth_regex_transformation", value)

    @property
    @pulumi.getter(name="dcpAuthSubstringTransformation")
    def dcp_auth_substring_transformation(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthSubstringTransformationArgs']:
        return pulumi.get(self, "dcp_auth_substring_transformation")

    @dcp_auth_substring_transformation.setter
    def dcp_auth_substring_transformation(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthSubstringTransformationArgs']):
        pulumi.set(self, "dcp_auth_substring_transformation", value)

    @property
    @pulumi.getter(name="dcpAuthVariableExtractor")
    def dcp_auth_variable_extractor(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthVariableExtractorArgs']:
        return pulumi.get(self, "dcp_auth_variable_extractor")

    @dcp_auth_variable_extractor.setter
    def dcp_auth_variable_extractor(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthVariableExtractorArgs']):
        pulumi.set(self, "dcp_auth_variable_extractor", value)

    @property
    @pulumi.getter(name="dcpDefaultAuthzGroups")
    def dcp_default_authz_groups(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpDefaultAuthzGroupsArgs']:
        return pulumi.get(self, "dcp_default_authz_groups")

    @dcp_default_authz_groups.setter
    def dcp_default_authz_groups(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpDefaultAuthzGroupsArgs']):
        pulumi.set(self, "dcp_default_authz_groups", value)

    @property
    @pulumi.getter(name="dcpDevRelations")
    def dcp_dev_relations(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpDevRelationsArgs']:
        return pulumi.get(self, "dcp_dev_relations")

    @dcp_dev_relations.setter
    def dcp_dev_relations(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpDevRelationsArgs']):
        pulumi.set(self, "dcp_dev_relations", value)

    @property
    @pulumi.getter(name="dcpRealTimeAuth")
    def dcp_real_time_auth(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpRealTimeAuthArgs']:
        return pulumi.get(self, "dcp_real_time_auth")

    @dcp_real_time_auth.setter
    def dcp_real_time_auth(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDcpRealTimeAuthArgs']):
        pulumi.set(self, "dcp_real_time_auth", value)

    @property
    @pulumi.getter(name="deliveryReceipt")
    def delivery_receipt(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDeliveryReceiptArgs']:
        return pulumi.get(self, "delivery_receipt")

    @delivery_receipt.setter
    def delivery_receipt(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDeliveryReceiptArgs']):
        pulumi.set(self, "delivery_receipt", value)

    @property
    @pulumi.getter(name="denyAccess")
    def deny_access(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDenyAccessArgs']:
        return pulumi.get(self, "deny_access")

    @deny_access.setter
    def deny_access(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDenyAccessArgs']):
        pulumi.set(self, "deny_access", value)

    @property
    @pulumi.getter(name="denyDirectFailoverAccess")
    def deny_direct_failover_access(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDenyDirectFailoverAccessArgs']:
        return pulumi.get(self, "deny_direct_failover_access")

    @deny_direct_failover_access.setter
    def deny_direct_failover_access(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDenyDirectFailoverAccessArgs']):
        pulumi.set(self, "deny_direct_failover_access", value)

    @property
    @pulumi.getter(name="deviceCharacteristicCacheId")
    def device_characteristic_cache_id(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicCacheIdArgs']:
        return pulumi.get(self, "device_characteristic_cache_id")

    @device_characteristic_cache_id.setter
    def device_characteristic_cache_id(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicCacheIdArgs']):
        pulumi.set(self, "device_characteristic_cache_id", value)

    @property
    @pulumi.getter(name="deviceCharacteristicHeader")
    def device_characteristic_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicHeaderArgs']:
        return pulumi.get(self, "device_characteristic_header")

    @device_characteristic_header.setter
    def device_characteristic_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicHeaderArgs']):
        pulumi.set(self, "device_characteristic_header", value)

    @property
    @pulumi.getter(name="dnsAsyncRefresh")
    def dns_async_refresh(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDnsAsyncRefreshArgs']:
        return pulumi.get(self, "dns_async_refresh")

    @dns_async_refresh.setter
    def dns_async_refresh(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDnsAsyncRefreshArgs']):
        pulumi.set(self, "dns_async_refresh", value)

    @property
    @pulumi.getter(name="dnsPrefresh")
    def dns_prefresh(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDnsPrefreshArgs']:
        return pulumi.get(self, "dns_prefresh")

    @dns_prefresh.setter
    def dns_prefresh(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDnsPrefreshArgs']):
        pulumi.set(self, "dns_prefresh", value)

    @property
    @pulumi.getter(name="downgradeProtocol")
    def downgrade_protocol(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDowngradeProtocolArgs']:
        return pulumi.get(self, "downgrade_protocol")

    @downgrade_protocol.setter
    def downgrade_protocol(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDowngradeProtocolArgs']):
        pulumi.set(self, "downgrade_protocol", value)

    @property
    @pulumi.getter(name="downloadCompleteMarker")
    def download_complete_marker(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDownloadCompleteMarkerArgs']:
        return pulumi.get(self, "download_complete_marker")

    @download_complete_marker.setter
    def download_complete_marker(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDownloadCompleteMarkerArgs']):
        pulumi.set(self, "download_complete_marker", value)

    @property
    @pulumi.getter(name="downloadNotification")
    def download_notification(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDownloadNotificationArgs']:
        return pulumi.get(self, "download_notification")

    @download_notification.setter
    def download_notification(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDownloadNotificationArgs']):
        pulumi.set(self, "download_notification", value)

    @property
    @pulumi.getter(name="downstreamCache")
    def downstream_cache(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDownstreamCacheArgs']:
        return pulumi.get(self, "downstream_cache")

    @downstream_cache.setter
    def downstream_cache(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDownstreamCacheArgs']):
        pulumi.set(self, "downstream_cache", value)

    @property
    @pulumi.getter(name="dynamicThroughtputOptimization")
    def dynamic_throughtput_optimization(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationArgs']:
        return pulumi.get(self, "dynamic_throughtput_optimization")

    @dynamic_throughtput_optimization.setter
    def dynamic_throughtput_optimization(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationArgs']):
        pulumi.set(self, "dynamic_throughtput_optimization", value)

    @property
    @pulumi.getter(name="dynamicThroughtputOptimizationOverride")
    def dynamic_throughtput_optimization_override(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationOverrideArgs']:
        return pulumi.get(self, "dynamic_throughtput_optimization_override")

    @dynamic_throughtput_optimization_override.setter
    def dynamic_throughtput_optimization_override(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationOverrideArgs']):
        pulumi.set(self, "dynamic_throughtput_optimization_override", value)

    @property
    @pulumi.getter(name="dynamicWebContent")
    def dynamic_web_content(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDynamicWebContentArgs']:
        return pulumi.get(self, "dynamic_web_content")

    @dynamic_web_content.setter
    def dynamic_web_content(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorDynamicWebContentArgs']):
        pulumi.set(self, "dynamic_web_content", value)

    @property
    @pulumi.getter(name="ecmsBulkUpload")
    def ecms_bulk_upload(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEcmsBulkUploadArgs']:
        return pulumi.get(self, "ecms_bulk_upload")

    @ecms_bulk_upload.setter
    def ecms_bulk_upload(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEcmsBulkUploadArgs']):
        pulumi.set(self, "ecms_bulk_upload", value)

    @property
    @pulumi.getter(name="ecmsDatabase")
    def ecms_database(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatabaseArgs']:
        return pulumi.get(self, "ecms_database")

    @ecms_database.setter
    def ecms_database(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatabaseArgs']):
        pulumi.set(self, "ecms_database", value)

    @property
    @pulumi.getter(name="ecmsDataset")
    def ecms_dataset(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatasetArgs']:
        return pulumi.get(self, "ecms_dataset")

    @ecms_dataset.setter
    def ecms_dataset(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatasetArgs']):
        pulumi.set(self, "ecms_dataset", value)

    @property
    @pulumi.getter(name="ecmsObjectKey")
    def ecms_object_key(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEcmsObjectKeyArgs']:
        return pulumi.get(self, "ecms_object_key")

    @ecms_object_key.setter
    def ecms_object_key(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEcmsObjectKeyArgs']):
        pulumi.set(self, "ecms_object_key", value)

    @property
    @pulumi.getter(name="edgeConnect")
    def edge_connect(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeConnectArgs']:
        return pulumi.get(self, "edge_connect")

    @edge_connect.setter
    def edge_connect(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeConnectArgs']):
        pulumi.set(self, "edge_connect", value)

    @property
    @pulumi.getter(name="edgeLoadBalancingAdvanced")
    def edge_load_balancing_advanced(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingAdvancedArgs']:
        return pulumi.get(self, "edge_load_balancing_advanced")

    @edge_load_balancing_advanced.setter
    def edge_load_balancing_advanced(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingAdvancedArgs']):
        pulumi.set(self, "edge_load_balancing_advanced", value)

    @property
    @pulumi.getter(name="edgeLoadBalancingDataCenter")
    def edge_load_balancing_data_center(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterArgs']:
        return pulumi.get(self, "edge_load_balancing_data_center")

    @edge_load_balancing_data_center.setter
    def edge_load_balancing_data_center(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterArgs']):
        pulumi.set(self, "edge_load_balancing_data_center", value)

    @property
    @pulumi.getter(name="edgeLoadBalancingOrigin")
    def edge_load_balancing_origin(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingOriginArgs']:
        return pulumi.get(self, "edge_load_balancing_origin")

    @edge_load_balancing_origin.setter
    def edge_load_balancing_origin(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingOriginArgs']):
        pulumi.set(self, "edge_load_balancing_origin", value)

    @property
    @pulumi.getter(name="edgeOriginAuthorization")
    def edge_origin_authorization(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeOriginAuthorizationArgs']:
        return pulumi.get(self, "edge_origin_authorization")

    @edge_origin_authorization.setter
    def edge_origin_authorization(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeOriginAuthorizationArgs']):
        pulumi.set(self, "edge_origin_authorization", value)

    @property
    @pulumi.getter(name="edgeRedirector")
    def edge_redirector(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorArgs']:
        return pulumi.get(self, "edge_redirector")

    @edge_redirector.setter
    def edge_redirector(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorArgs']):
        pulumi.set(self, "edge_redirector", value)

    @property
    @pulumi.getter(name="edgeScape")
    def edge_scape(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeScapeArgs']:
        return pulumi.get(self, "edge_scape")

    @edge_scape.setter
    def edge_scape(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeScapeArgs']):
        pulumi.set(self, "edge_scape", value)

    @property
    @pulumi.getter(name="edgeSideIncludes")
    def edge_side_includes(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeSideIncludesArgs']:
        return pulumi.get(self, "edge_side_includes")

    @edge_side_includes.setter
    def edge_side_includes(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeSideIncludesArgs']):
        pulumi.set(self, "edge_side_includes", value)

    @property
    @pulumi.getter(name="edgeWorker")
    def edge_worker(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeWorkerArgs']:
        return pulumi.get(self, "edge_worker")

    @edge_worker.setter
    def edge_worker(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeWorkerArgs']):
        pulumi.set(self, "edge_worker", value)

    @property
    @pulumi.getter(name="enhancedAkamaiProtocol")
    def enhanced_akamai_protocol(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedAkamaiProtocolArgs']:
        return pulumi.get(self, "enhanced_akamai_protocol")

    @enhanced_akamai_protocol.setter
    def enhanced_akamai_protocol(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedAkamaiProtocolArgs']):
        pulumi.set(self, "enhanced_akamai_protocol", value)

    @property
    @pulumi.getter(name="enhancedProxyDetection")
    def enhanced_proxy_detection(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedProxyDetectionArgs']:
        return pulumi.get(self, "enhanced_proxy_detection")

    @enhanced_proxy_detection.setter
    def enhanced_proxy_detection(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedProxyDetectionArgs']):
        pulumi.set(self, "enhanced_proxy_detection", value)

    @property
    @pulumi.getter(name="epdForwardHeaderEnrichment")
    def epd_forward_header_enrichment(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEpdForwardHeaderEnrichmentArgs']:
        return pulumi.get(self, "epd_forward_header_enrichment")

    @epd_forward_header_enrichment.setter
    def epd_forward_header_enrichment(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEpdForwardHeaderEnrichmentArgs']):
        pulumi.set(self, "epd_forward_header_enrichment", value)

    @property
    @pulumi.getter(name="failAction")
    def fail_action(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFailActionArgs']:
        return pulumi.get(self, "fail_action")

    @fail_action.setter
    def fail_action(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFailActionArgs']):
        pulumi.set(self, "fail_action", value)

    @property
    @pulumi.getter(name="failoverBotManagerFeatureCompatibility")
    def failover_bot_manager_feature_compatibility(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFailoverBotManagerFeatureCompatibilityArgs']:
        return pulumi.get(self, "failover_bot_manager_feature_compatibility")

    @failover_bot_manager_feature_compatibility.setter
    def failover_bot_manager_feature_compatibility(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFailoverBotManagerFeatureCompatibilityArgs']):
        pulumi.set(self, "failover_bot_manager_feature_compatibility", value)

    @property
    @pulumi.getter(name="fastInvalidate")
    def fast_invalidate(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFastInvalidateArgs']:
        return pulumi.get(self, "fast_invalidate")

    @fast_invalidate.setter
    def fast_invalidate(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFastInvalidateArgs']):
        pulumi.set(self, "fast_invalidate", value)

    @property
    @pulumi.getter(name="firstPartyMarketing")
    def first_party_marketing(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingArgs']:
        return pulumi.get(self, "first_party_marketing")

    @first_party_marketing.setter
    def first_party_marketing(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingArgs']):
        pulumi.set(self, "first_party_marketing", value)

    @property
    @pulumi.getter(name="firstPartyMarketingPlus")
    def first_party_marketing_plus(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusArgs']:
        return pulumi.get(self, "first_party_marketing_plus")

    @first_party_marketing_plus.setter
    def first_party_marketing_plus(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusArgs']):
        pulumi.set(self, "first_party_marketing_plus", value)

    @property
    @pulumi.getter(name="forwardRewrite")
    def forward_rewrite(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteArgs']:
        return pulumi.get(self, "forward_rewrite")

    @forward_rewrite.setter
    def forward_rewrite(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteArgs']):
        pulumi.set(self, "forward_rewrite", value)

    @property
    @pulumi.getter
    def g2oheader(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorG2oheaderArgs']:
        return pulumi.get(self, "g2oheader")

    @g2oheader.setter
    def g2oheader(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorG2oheaderArgs']):
        pulumi.set(self, "g2oheader", value)

    @property
    @pulumi.getter(name="globalRequestNumber")
    def global_request_number(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorGlobalRequestNumberArgs']:
        return pulumi.get(self, "global_request_number")

    @global_request_number.setter
    def global_request_number(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorGlobalRequestNumberArgs']):
        pulumi.set(self, "global_request_number", value)

    @property
    @pulumi.getter(name="graphqlCaching")
    def graphql_caching(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorGraphqlCachingArgs']:
        return pulumi.get(self, "graphql_caching")

    @graphql_caching.setter
    def graphql_caching(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorGraphqlCachingArgs']):
        pulumi.set(self, "graphql_caching", value)

    @property
    @pulumi.getter(name="gzipResponse")
    def gzip_response(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorGzipResponseArgs']:
        return pulumi.get(self, "gzip_response")

    @gzip_response.setter
    def gzip_response(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorGzipResponseArgs']):
        pulumi.set(self, "gzip_response", value)

    @property
    @pulumi.getter(name="hdDataAdvanced")
    def hd_data_advanced(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHdDataAdvancedArgs']:
        return pulumi.get(self, "hd_data_advanced")

    @hd_data_advanced.setter
    def hd_data_advanced(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHdDataAdvancedArgs']):
        pulumi.set(self, "hd_data_advanced", value)

    @property
    @pulumi.getter(name="healthDetection")
    def health_detection(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHealthDetectionArgs']:
        return pulumi.get(self, "health_detection")

    @health_detection.setter
    def health_detection(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHealthDetectionArgs']):
        pulumi.set(self, "health_detection", value)

    @property
    @pulumi.getter(name="hsafEipBinding")
    def hsaf_eip_binding(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHsafEipBindingArgs']:
        return pulumi.get(self, "hsaf_eip_binding")

    @hsaf_eip_binding.setter
    def hsaf_eip_binding(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHsafEipBindingArgs']):
        pulumi.set(self, "hsaf_eip_binding", value)

    @property
    @pulumi.getter
    def http2(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHttp2Args']:
        return pulumi.get(self, "http2")

    @http2.setter
    def http2(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHttp2Args']):
        pulumi.set(self, "http2", value)

    @property
    @pulumi.getter
    def http3(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHttp3Args']:
        return pulumi.get(self, "http3")

    @http3.setter
    def http3(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHttp3Args']):
        pulumi.set(self, "http3", value)

    @property
    @pulumi.getter(name="httpStrictTransportSecurity")
    def http_strict_transport_security(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHttpStrictTransportSecurityArgs']:
        return pulumi.get(self, "http_strict_transport_security")

    @http_strict_transport_security.setter
    def http_strict_transport_security(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHttpStrictTransportSecurityArgs']):
        pulumi.set(self, "http_strict_transport_security", value)

    @property
    @pulumi.getter(name="httpToHttpsUpgrade")
    def http_to_https_upgrade(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHttpToHttpsUpgradeArgs']:
        return pulumi.get(self, "http_to_https_upgrade")

    @http_to_https_upgrade.setter
    def http_to_https_upgrade(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorHttpToHttpsUpgradeArgs']):
        pulumi.set(self, "http_to_https_upgrade", value)

    @property
    @pulumi.getter(name="imOverride")
    def im_override(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImOverrideArgs']:
        return pulumi.get(self, "im_override")

    @im_override.setter
    def im_override(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImOverrideArgs']):
        pulumi.set(self, "im_override", value)

    @property
    @pulumi.getter(name="imageAndVideoManager")
    def image_and_video_manager(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerArgs']:
        return pulumi.get(self, "image_and_video_manager")

    @image_and_video_manager.setter
    def image_and_video_manager(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerArgs']):
        pulumi.set(self, "image_and_video_manager", value)

    @property
    @pulumi.getter(name="imageManager")
    def image_manager(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerArgs']:
        return pulumi.get(self, "image_manager")

    @image_manager.setter
    def image_manager(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerArgs']):
        pulumi.set(self, "image_manager", value)

    @property
    @pulumi.getter(name="imageManagerVideo")
    def image_manager_video(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoArgs']:
        return pulumi.get(self, "image_manager_video")

    @image_manager_video.setter
    def image_manager_video(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoArgs']):
        pulumi.set(self, "image_manager_video", value)

    @property
    @pulumi.getter
    def include(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorIncludeArgs']:
        return pulumi.get(self, "include")

    @include.setter
    def include(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorIncludeArgs']):
        pulumi.set(self, "include", value)

    @property
    @pulumi.getter
    def instant(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorInstantArgs']:
        return pulumi.get(self, "instant")

    @instant.setter
    def instant(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorInstantArgs']):
        pulumi.set(self, "instant", value)

    @property
    @pulumi.getter(name="instantConfig")
    def instant_config(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorInstantConfigArgs']:
        return pulumi.get(self, "instant_config")

    @instant_config.setter
    def instant_config(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorInstantConfigArgs']):
        pulumi.set(self, "instant_config", value)

    @property
    @pulumi.getter(name="largeFileOptimization")
    def large_file_optimization(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationArgs']:
        return pulumi.get(self, "large_file_optimization")

    @large_file_optimization.setter
    def large_file_optimization(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationArgs']):
        pulumi.set(self, "large_file_optimization", value)

    @property
    @pulumi.getter(name="largeFileOptimizationAdvanced")
    def large_file_optimization_advanced(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationAdvancedArgs']:
        return pulumi.get(self, "large_file_optimization_advanced")

    @large_file_optimization_advanced.setter
    def large_file_optimization_advanced(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationAdvancedArgs']):
        pulumi.set(self, "large_file_optimization_advanced", value)

    @property
    @pulumi.getter(name="limitBitRate")
    def limit_bit_rate(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateArgs']:
        return pulumi.get(self, "limit_bit_rate")

    @limit_bit_rate.setter
    def limit_bit_rate(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateArgs']):
        pulumi.set(self, "limit_bit_rate", value)

    @property
    @pulumi.getter(name="logCustom")
    def log_custom(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorLogCustomArgs']:
        return pulumi.get(self, "log_custom")

    @log_custom.setter
    def log_custom(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorLogCustomArgs']):
        pulumi.set(self, "log_custom", value)

    @property
    @pulumi.getter(name="mPulse")
    def m_pulse(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMPulseArgs']:
        return pulumi.get(self, "m_pulse")

    @m_pulse.setter
    def m_pulse(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMPulseArgs']):
        pulumi.set(self, "m_pulse", value)

    @property
    @pulumi.getter(name="manifestPersonalization")
    def manifest_personalization(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorManifestPersonalizationArgs']:
        return pulumi.get(self, "manifest_personalization")

    @manifest_personalization.setter
    def manifest_personalization(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorManifestPersonalizationArgs']):
        pulumi.set(self, "manifest_personalization", value)

    @property
    @pulumi.getter(name="manifestRerouting")
    def manifest_rerouting(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorManifestReroutingArgs']:
        return pulumi.get(self, "manifest_rerouting")

    @manifest_rerouting.setter
    def manifest_rerouting(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorManifestReroutingArgs']):
        pulumi.set(self, "manifest_rerouting", value)

    @property
    @pulumi.getter(name="manualServerPush")
    def manual_server_push(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorManualServerPushArgs']:
        return pulumi.get(self, "manual_server_push")

    @manual_server_push.setter
    def manual_server_push(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorManualServerPushArgs']):
        pulumi.set(self, "manual_server_push", value)

    @property
    @pulumi.getter(name="mediaAcceleration")
    def media_acceleration(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationArgs']:
        return pulumi.get(self, "media_acceleration")

    @media_acceleration.setter
    def media_acceleration(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationArgs']):
        pulumi.set(self, "media_acceleration", value)

    @property
    @pulumi.getter(name="mediaAccelerationQuicOptout")
    def media_acceleration_quic_optout(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationQuicOptoutArgs']:
        return pulumi.get(self, "media_acceleration_quic_optout")

    @media_acceleration_quic_optout.setter
    def media_acceleration_quic_optout(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationQuicOptoutArgs']):
        pulumi.set(self, "media_acceleration_quic_optout", value)

    @property
    @pulumi.getter(name="mediaClient")
    def media_client(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMediaClientArgs']:
        return pulumi.get(self, "media_client")

    @media_client.setter
    def media_client(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMediaClientArgs']):
        pulumi.set(self, "media_client", value)

    @property
    @pulumi.getter(name="mediaFileRetrievalOptimization")
    def media_file_retrieval_optimization(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMediaFileRetrievalOptimizationArgs']:
        return pulumi.get(self, "media_file_retrieval_optimization")

    @media_file_retrieval_optimization.setter
    def media_file_retrieval_optimization(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMediaFileRetrievalOptimizationArgs']):
        pulumi.set(self, "media_file_retrieval_optimization", value)

    @property
    @pulumi.getter(name="mediaOriginFailover")
    def media_origin_failover(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMediaOriginFailoverArgs']:
        return pulumi.get(self, "media_origin_failover")

    @media_origin_failover.setter
    def media_origin_failover(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMediaOriginFailoverArgs']):
        pulumi.set(self, "media_origin_failover", value)

    @property
    @pulumi.getter(name="metadataCaching")
    def metadata_caching(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMetadataCachingArgs']:
        return pulumi.get(self, "metadata_caching")

    @metadata_caching.setter
    def metadata_caching(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMetadataCachingArgs']):
        pulumi.set(self, "metadata_caching", value)

    @property
    @pulumi.getter(name="mobileSdkPerformance")
    def mobile_sdk_performance(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMobileSdkPerformanceArgs']:
        return pulumi.get(self, "mobile_sdk_performance")

    @mobile_sdk_performance.setter
    def mobile_sdk_performance(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorMobileSdkPerformanceArgs']):
        pulumi.set(self, "mobile_sdk_performance", value)

    @property
    @pulumi.getter(name="modifyIncomingRequestHeader")
    def modify_incoming_request_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingRequestHeaderArgs']:
        return pulumi.get(self, "modify_incoming_request_header")

    @modify_incoming_request_header.setter
    def modify_incoming_request_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingRequestHeaderArgs']):
        pulumi.set(self, "modify_incoming_request_header", value)

    @property
    @pulumi.getter(name="modifyIncomingResponseHeader")
    def modify_incoming_response_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingResponseHeaderArgs']:
        return pulumi.get(self, "modify_incoming_response_header")

    @modify_incoming_response_header.setter
    def modify_incoming_response_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingResponseHeaderArgs']):
        pulumi.set(self, "modify_incoming_response_header", value)

    @property
    @pulumi.getter(name="modifyOutgoingRequestHeader")
    def modify_outgoing_request_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingRequestHeaderArgs']:
        return pulumi.get(self, "modify_outgoing_request_header")

    @modify_outgoing_request_header.setter
    def modify_outgoing_request_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingRequestHeaderArgs']):
        pulumi.set(self, "modify_outgoing_request_header", value)

    @property
    @pulumi.getter(name="modifyOutgoingResponseHeader")
    def modify_outgoing_response_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingResponseHeaderArgs']:
        return pulumi.get(self, "modify_outgoing_response_header")

    @modify_outgoing_response_header.setter
    def modify_outgoing_response_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingResponseHeaderArgs']):
        pulumi.set(self, "modify_outgoing_response_header", value)

    @property
    @pulumi.getter(name="modifyViaHeader")
    def modify_via_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorModifyViaHeaderArgs']:
        return pulumi.get(self, "modify_via_header")

    @modify_via_header.setter
    def modify_via_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorModifyViaHeaderArgs']):
        pulumi.set(self, "modify_via_header", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginArgs']:
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginArgs']):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="originCharacteristics")
    def origin_characteristics(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsArgs']:
        return pulumi.get(self, "origin_characteristics")

    @origin_characteristics.setter
    def origin_characteristics(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsArgs']):
        pulumi.set(self, "origin_characteristics", value)

    @property
    @pulumi.getter(name="originCharacteristicsWsd")
    def origin_characteristics_wsd(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsWsdArgs']:
        return pulumi.get(self, "origin_characteristics_wsd")

    @origin_characteristics_wsd.setter
    def origin_characteristics_wsd(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsWsdArgs']):
        pulumi.set(self, "origin_characteristics_wsd", value)

    @property
    @pulumi.getter(name="originFailureRecoveryMethod")
    def origin_failure_recovery_method(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryMethodArgs']:
        return pulumi.get(self, "origin_failure_recovery_method")

    @origin_failure_recovery_method.setter
    def origin_failure_recovery_method(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryMethodArgs']):
        pulumi.set(self, "origin_failure_recovery_method", value)

    @property
    @pulumi.getter(name="originFailureRecoveryPolicy")
    def origin_failure_recovery_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryPolicyArgs']:
        return pulumi.get(self, "origin_failure_recovery_policy")

    @origin_failure_recovery_policy.setter
    def origin_failure_recovery_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryPolicyArgs']):
        pulumi.set(self, "origin_failure_recovery_policy", value)

    @property
    @pulumi.getter(name="originIpAcl")
    def origin_ip_acl(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginIpAclArgs']:
        return pulumi.get(self, "origin_ip_acl")

    @origin_ip_acl.setter
    def origin_ip_acl(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginIpAclArgs']):
        pulumi.set(self, "origin_ip_acl", value)

    @property
    @pulumi.getter(name="persistentClientConnection")
    def persistent_client_connection(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPersistentClientConnectionArgs']:
        return pulumi.get(self, "persistent_client_connection")

    @persistent_client_connection.setter
    def persistent_client_connection(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPersistentClientConnectionArgs']):
        pulumi.set(self, "persistent_client_connection", value)

    @property
    @pulumi.getter(name="persistentConnection")
    def persistent_connection(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPersistentConnectionArgs']:
        return pulumi.get(self, "persistent_connection")

    @persistent_connection.setter
    def persistent_connection(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPersistentConnectionArgs']):
        pulumi.set(self, "persistent_connection", value)

    @property
    @pulumi.getter(name="personallyIdentifiableInformation")
    def personally_identifiable_information(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPersonallyIdentifiableInformationArgs']:
        return pulumi.get(self, "personally_identifiable_information")

    @personally_identifiable_information.setter
    def personally_identifiable_information(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPersonallyIdentifiableInformationArgs']):
        pulumi.set(self, "personally_identifiable_information", value)

    @property
    @pulumi.getter(name="phasedRelease")
    def phased_release(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseArgs']:
        return pulumi.get(self, "phased_release")

    @phased_release.setter
    def phased_release(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseArgs']):
        pulumi.set(self, "phased_release", value)

    @property
    @pulumi.getter
    def preconnect(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPreconnectArgs']:
        return pulumi.get(self, "preconnect")

    @preconnect.setter
    def preconnect(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPreconnectArgs']):
        pulumi.set(self, "preconnect", value)

    @property
    @pulumi.getter(name="predictiveContentDelivery")
    def predictive_content_delivery(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPredictiveContentDeliveryArgs']:
        return pulumi.get(self, "predictive_content_delivery")

    @predictive_content_delivery.setter
    def predictive_content_delivery(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPredictiveContentDeliveryArgs']):
        pulumi.set(self, "predictive_content_delivery", value)

    @property
    @pulumi.getter(name="predictivePrefetching")
    def predictive_prefetching(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPredictivePrefetchingArgs']:
        return pulumi.get(self, "predictive_prefetching")

    @predictive_prefetching.setter
    def predictive_prefetching(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPredictivePrefetchingArgs']):
        pulumi.set(self, "predictive_prefetching", value)

    @property
    @pulumi.getter
    def prefetch(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchArgs']:
        return pulumi.get(self, "prefetch")

    @prefetch.setter
    def prefetch(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchArgs']):
        pulumi.set(self, "prefetch", value)

    @property
    @pulumi.getter
    def prefetchable(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchableArgs']:
        return pulumi.get(self, "prefetchable")

    @prefetchable.setter
    def prefetchable(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchableArgs']):
        pulumi.set(self, "prefetchable", value)

    @property
    @pulumi.getter(name="prefreshCache")
    def prefresh_cache(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPrefreshCacheArgs']:
        return pulumi.get(self, "prefresh_cache")

    @prefresh_cache.setter
    def prefresh_cache(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPrefreshCacheArgs']):
        pulumi.set(self, "prefresh_cache", value)

    @property
    @pulumi.getter
    def quality(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorQualityArgs']:
        return pulumi.get(self, "quality")

    @quality.setter
    def quality(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorQualityArgs']):
        pulumi.set(self, "quality", value)

    @property
    @pulumi.getter(name="quicBeta")
    def quic_beta(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorQuicBetaArgs']:
        return pulumi.get(self, "quic_beta")

    @quic_beta.setter
    def quic_beta(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorQuicBetaArgs']):
        pulumi.set(self, "quic_beta", value)

    @property
    @pulumi.getter(name="randomSeek")
    def random_seek(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRandomSeekArgs']:
        return pulumi.get(self, "random_seek")

    @random_seek.setter
    def random_seek(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRandomSeekArgs']):
        pulumi.set(self, "random_seek", value)

    @property
    @pulumi.getter
    def rapid(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRapidArgs']:
        return pulumi.get(self, "rapid")

    @rapid.setter
    def rapid(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRapidArgs']):
        pulumi.set(self, "rapid", value)

    @property
    @pulumi.getter(name="readTimeout")
    def read_timeout(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorReadTimeoutArgs']:
        return pulumi.get(self, "read_timeout")

    @read_timeout.setter
    def read_timeout(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorReadTimeoutArgs']):
        pulumi.set(self, "read_timeout", value)

    @property
    @pulumi.getter(name="realTimeReporting")
    def real_time_reporting(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRealTimeReportingArgs']:
        return pulumi.get(self, "real_time_reporting")

    @real_time_reporting.setter
    def real_time_reporting(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRealTimeReportingArgs']):
        pulumi.set(self, "real_time_reporting", value)

    @property
    @pulumi.getter(name="realUserMonitoring")
    def real_user_monitoring(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRealUserMonitoringArgs']:
        return pulumi.get(self, "real_user_monitoring")

    @real_user_monitoring.setter
    def real_user_monitoring(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRealUserMonitoringArgs']):
        pulumi.set(self, "real_user_monitoring", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRedirectArgs']:
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRedirectArgs']):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter
    def redirectplus(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRedirectplusArgs']:
        return pulumi.get(self, "redirectplus")

    @redirectplus.setter
    def redirectplus(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRedirectplusArgs']):
        pulumi.set(self, "redirectplus", value)

    @property
    @pulumi.getter(name="refererChecking")
    def referer_checking(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRefererCheckingArgs']:
        return pulumi.get(self, "referer_checking")

    @referer_checking.setter
    def referer_checking(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRefererCheckingArgs']):
        pulumi.set(self, "referer_checking", value)

    @property
    @pulumi.getter(name="removeQueryParameter")
    def remove_query_parameter(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRemoveQueryParameterArgs']:
        return pulumi.get(self, "remove_query_parameter")

    @remove_query_parameter.setter
    def remove_query_parameter(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRemoveQueryParameterArgs']):
        pulumi.set(self, "remove_query_parameter", value)

    @property
    @pulumi.getter(name="removeVary")
    def remove_vary(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRemoveVaryArgs']:
        return pulumi.get(self, "remove_vary")

    @remove_vary.setter
    def remove_vary(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRemoveVaryArgs']):
        pulumi.set(self, "remove_vary", value)

    @property
    @pulumi.getter
    def report(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorReportArgs']:
        return pulumi.get(self, "report")

    @report.setter
    def report(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorReportArgs']):
        pulumi.set(self, "report", value)

    @property
    @pulumi.getter(name="requestControl")
    def request_control(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlArgs']:
        return pulumi.get(self, "request_control")

    @request_control.setter
    def request_control(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlArgs']):
        pulumi.set(self, "request_control", value)

    @property
    @pulumi.getter(name="requestTypeMarker")
    def request_type_marker(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRequestTypeMarkerArgs']:
        return pulumi.get(self, "request_type_marker")

    @request_type_marker.setter
    def request_type_marker(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRequestTypeMarkerArgs']):
        pulumi.set(self, "request_type_marker", value)

    @property
    @pulumi.getter(name="resourceOptimizer")
    def resource_optimizer(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerArgs']:
        return pulumi.get(self, "resource_optimizer")

    @resource_optimizer.setter
    def resource_optimizer(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerArgs']):
        pulumi.set(self, "resource_optimizer", value)

    @property
    @pulumi.getter(name="resourceOptimizerExtendedCompatibility")
    def resource_optimizer_extended_compatibility(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerExtendedCompatibilityArgs']:
        return pulumi.get(self, "resource_optimizer_extended_compatibility")

    @resource_optimizer_extended_compatibility.setter
    def resource_optimizer_extended_compatibility(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerExtendedCompatibilityArgs']):
        pulumi.set(self, "resource_optimizer_extended_compatibility", value)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorResponseCodeArgs']:
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorResponseCodeArgs']):
        pulumi.set(self, "response_code", value)

    @property
    @pulumi.getter(name="responseCookie")
    def response_cookie(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorResponseCookieArgs']:
        return pulumi.get(self, "response_cookie")

    @response_cookie.setter
    def response_cookie(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorResponseCookieArgs']):
        pulumi.set(self, "response_cookie", value)

    @property
    @pulumi.getter(name="restrictObjectCaching")
    def restrict_object_caching(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRestrictObjectCachingArgs']:
        return pulumi.get(self, "restrict_object_caching")

    @restrict_object_caching.setter
    def restrict_object_caching(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRestrictObjectCachingArgs']):
        pulumi.set(self, "restrict_object_caching", value)

    @property
    @pulumi.getter(name="returnCacheStatus")
    def return_cache_status(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorReturnCacheStatusArgs']:
        return pulumi.get(self, "return_cache_status")

    @return_cache_status.setter
    def return_cache_status(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorReturnCacheStatusArgs']):
        pulumi.set(self, "return_cache_status", value)

    @property
    @pulumi.getter(name="rewriteUrl")
    def rewrite_url(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRewriteUrlArgs']:
        return pulumi.get(self, "rewrite_url")

    @rewrite_url.setter
    def rewrite_url(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRewriteUrlArgs']):
        pulumi.set(self, "rewrite_url", value)

    @property
    @pulumi.getter(name="rumCustom")
    def rum_custom(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRumCustomArgs']:
        return pulumi.get(self, "rum_custom")

    @rum_custom.setter
    def rum_custom(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRumCustomArgs']):
        pulumi.set(self, "rum_custom", value)

    @property
    @pulumi.getter(name="saasDefinitions")
    def saas_definitions(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSaasDefinitionsArgs']:
        return pulumi.get(self, "saas_definitions")

    @saas_definitions.setter
    def saas_definitions(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSaasDefinitionsArgs']):
        pulumi.set(self, "saas_definitions", value)

    @property
    @pulumi.getter(name="salesForceCommerceCloudClient")
    def sales_force_commerce_cloud_client(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudClientArgs']:
        return pulumi.get(self, "sales_force_commerce_cloud_client")

    @sales_force_commerce_cloud_client.setter
    def sales_force_commerce_cloud_client(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudClientArgs']):
        pulumi.set(self, "sales_force_commerce_cloud_client", value)

    @property
    @pulumi.getter(name="salesForceCommerceCloudProvider")
    def sales_force_commerce_cloud_provider(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderArgs']:
        return pulumi.get(self, "sales_force_commerce_cloud_provider")

    @sales_force_commerce_cloud_provider.setter
    def sales_force_commerce_cloud_provider(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderArgs']):
        pulumi.set(self, "sales_force_commerce_cloud_provider", value)

    @property
    @pulumi.getter(name="salesForceCommerceCloudProviderHostHeader")
    def sales_force_commerce_cloud_provider_host_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderHostHeaderArgs']:
        return pulumi.get(self, "sales_force_commerce_cloud_provider_host_header")

    @sales_force_commerce_cloud_provider_host_header.setter
    def sales_force_commerce_cloud_provider_host_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderHostHeaderArgs']):
        pulumi.set(self, "sales_force_commerce_cloud_provider_host_header", value)

    @property
    @pulumi.getter(name="savePostDcaProcessing")
    def save_post_dca_processing(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSavePostDcaProcessingArgs']:
        return pulumi.get(self, "save_post_dca_processing")

    @save_post_dca_processing.setter
    def save_post_dca_processing(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSavePostDcaProcessingArgs']):
        pulumi.set(self, "save_post_dca_processing", value)

    @property
    @pulumi.getter(name="scheduleInvalidation")
    def schedule_invalidation(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorScheduleInvalidationArgs']:
        return pulumi.get(self, "schedule_invalidation")

    @schedule_invalidation.setter
    def schedule_invalidation(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorScheduleInvalidationArgs']):
        pulumi.set(self, "schedule_invalidation", value)

    @property
    @pulumi.getter(name="scriptManagement")
    def script_management(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorScriptManagementArgs']:
        return pulumi.get(self, "script_management")

    @script_management.setter
    def script_management(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorScriptManagementArgs']):
        pulumi.set(self, "script_management", value)

    @property
    @pulumi.getter(name="segmentedContentProtection")
    def segmented_content_protection(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedContentProtectionArgs']:
        return pulumi.get(self, "segmented_content_protection")

    @segmented_content_protection.setter
    def segmented_content_protection(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedContentProtectionArgs']):
        pulumi.set(self, "segmented_content_protection", value)

    @property
    @pulumi.getter(name="segmentedMediaOptimization")
    def segmented_media_optimization(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaOptimizationArgs']:
        return pulumi.get(self, "segmented_media_optimization")

    @segmented_media_optimization.setter
    def segmented_media_optimization(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaOptimizationArgs']):
        pulumi.set(self, "segmented_media_optimization", value)

    @property
    @pulumi.getter(name="segmentedMediaStreamingPrefetch")
    def segmented_media_streaming_prefetch(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaStreamingPrefetchArgs']:
        return pulumi.get(self, "segmented_media_streaming_prefetch")

    @segmented_media_streaming_prefetch.setter
    def segmented_media_streaming_prefetch(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaStreamingPrefetchArgs']):
        pulumi.set(self, "segmented_media_streaming_prefetch", value)

    @property
    @pulumi.getter(name="setVariable")
    def set_variable(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSetVariableArgs']:
        return pulumi.get(self, "set_variable")

    @set_variable.setter
    def set_variable(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSetVariableArgs']):
        pulumi.set(self, "set_variable", value)

    @property
    @pulumi.getter(name="simulateErrorCode")
    def simulate_error_code(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSimulateErrorCodeArgs']:
        return pulumi.get(self, "simulate_error_code")

    @simulate_error_code.setter
    def simulate_error_code(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSimulateErrorCodeArgs']):
        pulumi.set(self, "simulate_error_code", value)

    @property
    @pulumi.getter(name="siteShield")
    def site_shield(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldArgs']:
        return pulumi.get(self, "site_shield")

    @site_shield.setter
    def site_shield(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldArgs']):
        pulumi.set(self, "site_shield", value)

    @property
    @pulumi.getter(name="standardTlsMigration")
    def standard_tls_migration(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationArgs']:
        return pulumi.get(self, "standard_tls_migration")

    @standard_tls_migration.setter
    def standard_tls_migration(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationArgs']):
        pulumi.set(self, "standard_tls_migration", value)

    @property
    @pulumi.getter(name="standardTlsMigrationOverride")
    def standard_tls_migration_override(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationOverrideArgs']:
        return pulumi.get(self, "standard_tls_migration_override")

    @standard_tls_migration_override.setter
    def standard_tls_migration_override(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationOverrideArgs']):
        pulumi.set(self, "standard_tls_migration_override", value)

    @property
    @pulumi.getter(name="strictHeaderParsing")
    def strict_header_parsing(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorStrictHeaderParsingArgs']:
        return pulumi.get(self, "strict_header_parsing")

    @strict_header_parsing.setter
    def strict_header_parsing(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorStrictHeaderParsingArgs']):
        pulumi.set(self, "strict_header_parsing", value)

    @property
    @pulumi.getter(name="subCustomer")
    def sub_customer(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSubCustomerArgs']:
        return pulumi.get(self, "sub_customer")

    @sub_customer.setter
    def sub_customer(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSubCustomerArgs']):
        pulumi.set(self, "sub_customer", value)

    @property
    @pulumi.getter(name="sureRoute")
    def sure_route(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSureRouteArgs']:
        return pulumi.get(self, "sure_route")

    @sure_route.setter
    def sure_route(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSureRouteArgs']):
        pulumi.set(self, "sure_route", value)

    @property
    @pulumi.getter(name="tcpOptimization")
    def tcp_optimization(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTcpOptimizationArgs']:
        return pulumi.get(self, "tcp_optimization")

    @tcp_optimization.setter
    def tcp_optimization(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTcpOptimizationArgs']):
        pulumi.set(self, "tcp_optimization", value)

    @property
    @pulumi.getter(name="teaLeaf")
    def tea_leaf(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTeaLeafArgs']:
        return pulumi.get(self, "tea_leaf")

    @tea_leaf.setter
    def tea_leaf(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTeaLeafArgs']):
        pulumi.set(self, "tea_leaf", value)

    @property
    @pulumi.getter(name="tieredDistribution")
    def tiered_distribution(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionArgs']:
        return pulumi.get(self, "tiered_distribution")

    @tiered_distribution.setter
    def tiered_distribution(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionArgs']):
        pulumi.set(self, "tiered_distribution", value)

    @property
    @pulumi.getter(name="tieredDistributionAdvanced")
    def tiered_distribution_advanced(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionAdvancedArgs']:
        return pulumi.get(self, "tiered_distribution_advanced")

    @tiered_distribution_advanced.setter
    def tiered_distribution_advanced(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionAdvancedArgs']):
        pulumi.set(self, "tiered_distribution_advanced", value)

    @property
    @pulumi.getter(name="tieredDistributionCustomization")
    def tiered_distribution_customization(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionCustomizationArgs']:
        return pulumi.get(self, "tiered_distribution_customization")

    @tiered_distribution_customization.setter
    def tiered_distribution_customization(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionCustomizationArgs']):
        pulumi.set(self, "tiered_distribution_customization", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTimeoutArgs']:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorTimeoutArgs']):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="uidConfiguration")
    def uid_configuration(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorUidConfigurationArgs']:
        return pulumi.get(self, "uid_configuration")

    @uid_configuration.setter
    def uid_configuration(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorUidConfigurationArgs']):
        pulumi.set(self, "uid_configuration", value)

    @property
    @pulumi.getter(name="validateEntityTag")
    def validate_entity_tag(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorValidateEntityTagArgs']:
        return pulumi.get(self, "validate_entity_tag")

    @validate_entity_tag.setter
    def validate_entity_tag(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorValidateEntityTagArgs']):
        pulumi.set(self, "validate_entity_tag", value)

    @property
    @pulumi.getter(name="verifyJsonWebToken")
    def verify_json_web_token(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenArgs']:
        return pulumi.get(self, "verify_json_web_token")

    @verify_json_web_token.setter
    def verify_json_web_token(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenArgs']):
        pulumi.set(self, "verify_json_web_token", value)

    @property
    @pulumi.getter(name="verifyJsonWebTokenForDcp")
    def verify_json_web_token_for_dcp(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenForDcpArgs']:
        return pulumi.get(self, "verify_json_web_token_for_dcp")

    @verify_json_web_token_for_dcp.setter
    def verify_json_web_token_for_dcp(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenForDcpArgs']):
        pulumi.set(self, "verify_json_web_token_for_dcp", value)

    @property
    @pulumi.getter(name="verifyTokenAuthorization")
    def verify_token_authorization(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVerifyTokenAuthorizationArgs']:
        return pulumi.get(self, "verify_token_authorization")

    @verify_token_authorization.setter
    def verify_token_authorization(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVerifyTokenAuthorizationArgs']):
        pulumi.set(self, "verify_token_authorization", value)

    @property
    @pulumi.getter(name="virtualWaitingRoom")
    def virtual_waiting_room(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomArgs']:
        return pulumi.get(self, "virtual_waiting_room")

    @virtual_waiting_room.setter
    def virtual_waiting_room(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomArgs']):
        pulumi.set(self, "virtual_waiting_room", value)

    @property
    @pulumi.getter(name="virtualWaitingRoomWithEdgeWorkers")
    def virtual_waiting_room_with_edge_workers(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomWithEdgeWorkersArgs']:
        return pulumi.get(self, "virtual_waiting_room_with_edge_workers")

    @virtual_waiting_room_with_edge_workers.setter
    def virtual_waiting_room_with_edge_workers(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomWithEdgeWorkersArgs']):
        pulumi.set(self, "virtual_waiting_room_with_edge_workers", value)

    @property
    @pulumi.getter(name="visitorPrioritization")
    def visitor_prioritization(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationArgs']:
        return pulumi.get(self, "visitor_prioritization")

    @visitor_prioritization.setter
    def visitor_prioritization(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationArgs']):
        pulumi.set(self, "visitor_prioritization", value)

    @property
    @pulumi.getter(name="visitorPrioritizationFifo")
    def visitor_prioritization_fifo(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoArgs']:
        return pulumi.get(self, "visitor_prioritization_fifo")

    @visitor_prioritization_fifo.setter
    def visitor_prioritization_fifo(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoArgs']):
        pulumi.set(self, "visitor_prioritization_fifo", value)

    @property
    @pulumi.getter(name="visitorPrioritizationFifoStandalone")
    def visitor_prioritization_fifo_standalone(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoStandaloneArgs']:
        return pulumi.get(self, "visitor_prioritization_fifo_standalone")

    @visitor_prioritization_fifo_standalone.setter
    def visitor_prioritization_fifo_standalone(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoStandaloneArgs']):
        pulumi.set(self, "visitor_prioritization_fifo_standalone", value)

    @property
    @pulumi.getter
    def watermarking(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorWatermarkingArgs']:
        return pulumi.get(self, "watermarking")

    @watermarking.setter
    def watermarking(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorWatermarkingArgs']):
        pulumi.set(self, "watermarking", value)

    @property
    @pulumi.getter(name="webApplicationFirewall")
    def web_application_firewall(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallArgs']:
        return pulumi.get(self, "web_application_firewall")

    @web_application_firewall.setter
    def web_application_firewall(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallArgs']):
        pulumi.set(self, "web_application_firewall", value)

    @property
    @pulumi.getter(name="webSockets")
    def web_sockets(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorWebSocketsArgs']:
        return pulumi.get(self, "web_sockets")

    @web_sockets.setter
    def web_sockets(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorWebSocketsArgs']):
        pulumi.set(self, "web_sockets", value)

    @property
    @pulumi.getter
    def webdav(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorWebdavArgs']:
        return pulumi.get(self, "webdav")

    @webdav.setter
    def webdav(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorWebdavArgs']):
        pulumi.set(self, "webdav", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAdScalerCircuitBreakerArgs:
    def __init__(__self__, *,
                 fallback_action_response_code_based: Optional[str] = None,
                 locked: Optional[bool] = None,
                 response_code_based: Optional[bool] = None,
                 response_codes: Optional[str] = None,
                 response_delay_based: Optional[bool] = None,
                 response_delay_threshold: Optional[str] = None,
                 return_error_response_code_based: Optional[str] = None,
                 specify_your_own_response_code_based: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if fallback_action_response_code_based is not None:
            pulumi.set(__self__, "fallback_action_response_code_based", fallback_action_response_code_based)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if response_code_based is not None:
            pulumi.set(__self__, "response_code_based", response_code_based)
        if response_codes is not None:
            pulumi.set(__self__, "response_codes", response_codes)
        if response_delay_based is not None:
            pulumi.set(__self__, "response_delay_based", response_delay_based)
        if response_delay_threshold is not None:
            pulumi.set(__self__, "response_delay_threshold", response_delay_threshold)
        if return_error_response_code_based is not None:
            pulumi.set(__self__, "return_error_response_code_based", return_error_response_code_based)
        if specify_your_own_response_code_based is not None:
            pulumi.set(__self__, "specify_your_own_response_code_based", specify_your_own_response_code_based)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="fallbackActionResponseCodeBased")
    def fallback_action_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "fallback_action_response_code_based")

    @fallback_action_response_code_based.setter
    def fallback_action_response_code_based(self, value: Optional[str]):
        pulumi.set(self, "fallback_action_response_code_based", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="responseCodeBased")
    def response_code_based(self) -> Optional[bool]:
        return pulumi.get(self, "response_code_based")

    @response_code_based.setter
    def response_code_based(self, value: Optional[bool]):
        pulumi.set(self, "response_code_based", value)

    @property
    @pulumi.getter(name="responseCodes")
    def response_codes(self) -> Optional[str]:
        return pulumi.get(self, "response_codes")

    @response_codes.setter
    def response_codes(self, value: Optional[str]):
        pulumi.set(self, "response_codes", value)

    @property
    @pulumi.getter(name="responseDelayBased")
    def response_delay_based(self) -> Optional[bool]:
        return pulumi.get(self, "response_delay_based")

    @response_delay_based.setter
    def response_delay_based(self, value: Optional[bool]):
        pulumi.set(self, "response_delay_based", value)

    @property
    @pulumi.getter(name="responseDelayThreshold")
    def response_delay_threshold(self) -> Optional[str]:
        return pulumi.get(self, "response_delay_threshold")

    @response_delay_threshold.setter
    def response_delay_threshold(self, value: Optional[str]):
        pulumi.set(self, "response_delay_threshold", value)

    @property
    @pulumi.getter(name="returnErrorResponseCodeBased")
    def return_error_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "return_error_response_code_based")

    @return_error_response_code_based.setter
    def return_error_response_code_based(self, value: Optional[str]):
        pulumi.set(self, "return_error_response_code_based", value)

    @property
    @pulumi.getter(name="specifyYourOwnResponseCodeBased")
    def specify_your_own_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "specify_your_own_response_code_based")

    @specify_your_own_response_code_based.setter
    def specify_your_own_response_code_based(self, value: Optional[str]):
        pulumi.set(self, "specify_your_own_response_code_based", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveAccelerationArgs:
    def __init__(__self__, *,
                 ab_logic: Optional[str] = None,
                 ab_testing: Optional[str] = None,
                 compression: Optional[str] = None,
                 cookie_name: Optional[str] = None,
                 enable_brotli_compression: Optional[bool] = None,
                 enable_for_noncacheable: Optional[bool] = None,
                 enable_preconnect: Optional[bool] = None,
                 enable_push: Optional[bool] = None,
                 enable_ro: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 preload_enable: Optional[bool] = None,
                 source: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 title_brotli: Optional[str] = None,
                 title_http2_server_push: Optional[str] = None,
                 title_preconnect: Optional[str] = None,
                 title_preload: Optional[str] = None,
                 title_ro: Optional[str] = None,
                 uuid: Optional[str] = None):
        if ab_logic is not None:
            pulumi.set(__self__, "ab_logic", ab_logic)
        if ab_testing is not None:
            pulumi.set(__self__, "ab_testing", ab_testing)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if enable_brotli_compression is not None:
            pulumi.set(__self__, "enable_brotli_compression", enable_brotli_compression)
        if enable_for_noncacheable is not None:
            pulumi.set(__self__, "enable_for_noncacheable", enable_for_noncacheable)
        if enable_preconnect is not None:
            pulumi.set(__self__, "enable_preconnect", enable_preconnect)
        if enable_push is not None:
            pulumi.set(__self__, "enable_push", enable_push)
        if enable_ro is not None:
            pulumi.set(__self__, "enable_ro", enable_ro)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if preload_enable is not None:
            pulumi.set(__self__, "preload_enable", preload_enable)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if title_brotli is not None:
            pulumi.set(__self__, "title_brotli", title_brotli)
        if title_http2_server_push is not None:
            pulumi.set(__self__, "title_http2_server_push", title_http2_server_push)
        if title_preconnect is not None:
            pulumi.set(__self__, "title_preconnect", title_preconnect)
        if title_preload is not None:
            pulumi.set(__self__, "title_preload", title_preload)
        if title_ro is not None:
            pulumi.set(__self__, "title_ro", title_ro)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="abLogic")
    def ab_logic(self) -> Optional[str]:
        return pulumi.get(self, "ab_logic")

    @ab_logic.setter
    def ab_logic(self, value: Optional[str]):
        pulumi.set(self, "ab_logic", value)

    @property
    @pulumi.getter(name="abTesting")
    def ab_testing(self) -> Optional[str]:
        return pulumi.get(self, "ab_testing")

    @ab_testing.setter
    def ab_testing(self, value: Optional[str]):
        pulumi.set(self, "ab_testing", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[str]:
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[str]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[str]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter(name="enableBrotliCompression")
    def enable_brotli_compression(self) -> Optional[bool]:
        return pulumi.get(self, "enable_brotli_compression")

    @enable_brotli_compression.setter
    def enable_brotli_compression(self, value: Optional[bool]):
        pulumi.set(self, "enable_brotli_compression", value)

    @property
    @pulumi.getter(name="enableForNoncacheable")
    def enable_for_noncacheable(self) -> Optional[bool]:
        return pulumi.get(self, "enable_for_noncacheable")

    @enable_for_noncacheable.setter
    def enable_for_noncacheable(self, value: Optional[bool]):
        pulumi.set(self, "enable_for_noncacheable", value)

    @property
    @pulumi.getter(name="enablePreconnect")
    def enable_preconnect(self) -> Optional[bool]:
        return pulumi.get(self, "enable_preconnect")

    @enable_preconnect.setter
    def enable_preconnect(self, value: Optional[bool]):
        pulumi.set(self, "enable_preconnect", value)

    @property
    @pulumi.getter(name="enablePush")
    def enable_push(self) -> Optional[bool]:
        return pulumi.get(self, "enable_push")

    @enable_push.setter
    def enable_push(self, value: Optional[bool]):
        pulumi.set(self, "enable_push", value)

    @property
    @pulumi.getter(name="enableRo")
    def enable_ro(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ro")

    @enable_ro.setter
    def enable_ro(self, value: Optional[bool]):
        pulumi.set(self, "enable_ro", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="preloadEnable")
    def preload_enable(self) -> Optional[bool]:
        return pulumi.get(self, "preload_enable")

    @preload_enable.setter
    def preload_enable(self, value: Optional[bool]):
        pulumi.set(self, "preload_enable", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="titleBrotli")
    def title_brotli(self) -> Optional[str]:
        return pulumi.get(self, "title_brotli")

    @title_brotli.setter
    def title_brotli(self, value: Optional[str]):
        pulumi.set(self, "title_brotli", value)

    @property
    @pulumi.getter(name="titleHttp2ServerPush")
    def title_http2_server_push(self) -> Optional[str]:
        return pulumi.get(self, "title_http2_server_push")

    @title_http2_server_push.setter
    def title_http2_server_push(self, value: Optional[str]):
        pulumi.set(self, "title_http2_server_push", value)

    @property
    @pulumi.getter(name="titlePreconnect")
    def title_preconnect(self) -> Optional[str]:
        return pulumi.get(self, "title_preconnect")

    @title_preconnect.setter
    def title_preconnect(self, value: Optional[str]):
        pulumi.set(self, "title_preconnect", value)

    @property
    @pulumi.getter(name="titlePreload")
    def title_preload(self) -> Optional[str]:
        return pulumi.get(self, "title_preload")

    @title_preload.setter
    def title_preload(self, value: Optional[str]):
        pulumi.set(self, "title_preload", value)

    @property
    @pulumi.getter(name="titleRo")
    def title_ro(self) -> Optional[str]:
        return pulumi.get(self, "title_ro")

    @title_ro.setter
    def title_ro(self, value: Optional[str]):
        pulumi.set(self, "title_ro", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveImageCompressionArgs:
    def __init__(__self__, *,
                 compress_mobile: Optional[bool] = None,
                 compress_standard: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tier1_mobile_compression_method: Optional[str] = None,
                 tier1_mobile_compression_value: Optional[int] = None,
                 tier1_standard_compression_method: Optional[str] = None,
                 tier1_standard_compression_value: Optional[int] = None,
                 tier2_mobile_compression_method: Optional[str] = None,
                 tier2_mobile_compression_value: Optional[int] = None,
                 tier2_standard_compression_method: Optional[str] = None,
                 tier2_standard_compression_value: Optional[int] = None,
                 tier3_mobile_compression_method: Optional[str] = None,
                 tier3_mobile_compression_value: Optional[int] = None,
                 tier3_standard_compression_method: Optional[str] = None,
                 tier3_standard_compression_value: Optional[int] = None,
                 title_aic_mobile: Optional[str] = None,
                 title_aic_nonmobile: Optional[str] = None,
                 uuid: Optional[str] = None):
        if compress_mobile is not None:
            pulumi.set(__self__, "compress_mobile", compress_mobile)
        if compress_standard is not None:
            pulumi.set(__self__, "compress_standard", compress_standard)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tier1_mobile_compression_method is not None:
            pulumi.set(__self__, "tier1_mobile_compression_method", tier1_mobile_compression_method)
        if tier1_mobile_compression_value is not None:
            pulumi.set(__self__, "tier1_mobile_compression_value", tier1_mobile_compression_value)
        if tier1_standard_compression_method is not None:
            pulumi.set(__self__, "tier1_standard_compression_method", tier1_standard_compression_method)
        if tier1_standard_compression_value is not None:
            pulumi.set(__self__, "tier1_standard_compression_value", tier1_standard_compression_value)
        if tier2_mobile_compression_method is not None:
            pulumi.set(__self__, "tier2_mobile_compression_method", tier2_mobile_compression_method)
        if tier2_mobile_compression_value is not None:
            pulumi.set(__self__, "tier2_mobile_compression_value", tier2_mobile_compression_value)
        if tier2_standard_compression_method is not None:
            pulumi.set(__self__, "tier2_standard_compression_method", tier2_standard_compression_method)
        if tier2_standard_compression_value is not None:
            pulumi.set(__self__, "tier2_standard_compression_value", tier2_standard_compression_value)
        if tier3_mobile_compression_method is not None:
            pulumi.set(__self__, "tier3_mobile_compression_method", tier3_mobile_compression_method)
        if tier3_mobile_compression_value is not None:
            pulumi.set(__self__, "tier3_mobile_compression_value", tier3_mobile_compression_value)
        if tier3_standard_compression_method is not None:
            pulumi.set(__self__, "tier3_standard_compression_method", tier3_standard_compression_method)
        if tier3_standard_compression_value is not None:
            pulumi.set(__self__, "tier3_standard_compression_value", tier3_standard_compression_value)
        if title_aic_mobile is not None:
            pulumi.set(__self__, "title_aic_mobile", title_aic_mobile)
        if title_aic_nonmobile is not None:
            pulumi.set(__self__, "title_aic_nonmobile", title_aic_nonmobile)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="compressMobile")
    def compress_mobile(self) -> Optional[bool]:
        return pulumi.get(self, "compress_mobile")

    @compress_mobile.setter
    def compress_mobile(self, value: Optional[bool]):
        pulumi.set(self, "compress_mobile", value)

    @property
    @pulumi.getter(name="compressStandard")
    def compress_standard(self) -> Optional[bool]:
        return pulumi.get(self, "compress_standard")

    @compress_standard.setter
    def compress_standard(self, value: Optional[bool]):
        pulumi.set(self, "compress_standard", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="tier1MobileCompressionMethod")
    def tier1_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier1_mobile_compression_method")

    @tier1_mobile_compression_method.setter
    def tier1_mobile_compression_method(self, value: Optional[str]):
        pulumi.set(self, "tier1_mobile_compression_method", value)

    @property
    @pulumi.getter(name="tier1MobileCompressionValue")
    def tier1_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier1_mobile_compression_value")

    @tier1_mobile_compression_value.setter
    def tier1_mobile_compression_value(self, value: Optional[int]):
        pulumi.set(self, "tier1_mobile_compression_value", value)

    @property
    @pulumi.getter(name="tier1StandardCompressionMethod")
    def tier1_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier1_standard_compression_method")

    @tier1_standard_compression_method.setter
    def tier1_standard_compression_method(self, value: Optional[str]):
        pulumi.set(self, "tier1_standard_compression_method", value)

    @property
    @pulumi.getter(name="tier1StandardCompressionValue")
    def tier1_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier1_standard_compression_value")

    @tier1_standard_compression_value.setter
    def tier1_standard_compression_value(self, value: Optional[int]):
        pulumi.set(self, "tier1_standard_compression_value", value)

    @property
    @pulumi.getter(name="tier2MobileCompressionMethod")
    def tier2_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier2_mobile_compression_method")

    @tier2_mobile_compression_method.setter
    def tier2_mobile_compression_method(self, value: Optional[str]):
        pulumi.set(self, "tier2_mobile_compression_method", value)

    @property
    @pulumi.getter(name="tier2MobileCompressionValue")
    def tier2_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier2_mobile_compression_value")

    @tier2_mobile_compression_value.setter
    def tier2_mobile_compression_value(self, value: Optional[int]):
        pulumi.set(self, "tier2_mobile_compression_value", value)

    @property
    @pulumi.getter(name="tier2StandardCompressionMethod")
    def tier2_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier2_standard_compression_method")

    @tier2_standard_compression_method.setter
    def tier2_standard_compression_method(self, value: Optional[str]):
        pulumi.set(self, "tier2_standard_compression_method", value)

    @property
    @pulumi.getter(name="tier2StandardCompressionValue")
    def tier2_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier2_standard_compression_value")

    @tier2_standard_compression_value.setter
    def tier2_standard_compression_value(self, value: Optional[int]):
        pulumi.set(self, "tier2_standard_compression_value", value)

    @property
    @pulumi.getter(name="tier3MobileCompressionMethod")
    def tier3_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier3_mobile_compression_method")

    @tier3_mobile_compression_method.setter
    def tier3_mobile_compression_method(self, value: Optional[str]):
        pulumi.set(self, "tier3_mobile_compression_method", value)

    @property
    @pulumi.getter(name="tier3MobileCompressionValue")
    def tier3_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier3_mobile_compression_value")

    @tier3_mobile_compression_value.setter
    def tier3_mobile_compression_value(self, value: Optional[int]):
        pulumi.set(self, "tier3_mobile_compression_value", value)

    @property
    @pulumi.getter(name="tier3StandardCompressionMethod")
    def tier3_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier3_standard_compression_method")

    @tier3_standard_compression_method.setter
    def tier3_standard_compression_method(self, value: Optional[str]):
        pulumi.set(self, "tier3_standard_compression_method", value)

    @property
    @pulumi.getter(name="tier3StandardCompressionValue")
    def tier3_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier3_standard_compression_value")

    @tier3_standard_compression_value.setter
    def tier3_standard_compression_value(self, value: Optional[int]):
        pulumi.set(self, "tier3_standard_compression_value", value)

    @property
    @pulumi.getter(name="titleAicMobile")
    def title_aic_mobile(self) -> Optional[str]:
        return pulumi.get(self, "title_aic_mobile")

    @title_aic_mobile.setter
    def title_aic_mobile(self, value: Optional[str]):
        pulumi.set(self, "title_aic_mobile", value)

    @property
    @pulumi.getter(name="titleAicNonmobile")
    def title_aic_nonmobile(self) -> Optional[str]:
        return pulumi.get(self, "title_aic_nonmobile")

    @title_aic_nonmobile.setter
    def title_aic_nonmobile(self, value: Optional[str]):
        pulumi.set(self, "title_aic_nonmobile", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAdvancedArgs:
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if xml is not None:
            pulumi.set(__self__, "xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")

    @xml.setter
    def xml(self, value: Optional[str]):
        pulumi.set(self, "xml", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAggregatedReportingArgs:
    def __init__(__self__, *,
                 attribute1: Optional[str] = None,
                 attribute2: Optional[str] = None,
                 attribute3: Optional[str] = None,
                 attribute4: Optional[str] = None,
                 attributes_count: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 report_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if attribute1 is not None:
            pulumi.set(__self__, "attribute1", attribute1)
        if attribute2 is not None:
            pulumi.set(__self__, "attribute2", attribute2)
        if attribute3 is not None:
            pulumi.set(__self__, "attribute3", attribute3)
        if attribute4 is not None:
            pulumi.set(__self__, "attribute4", attribute4)
        if attributes_count is not None:
            pulumi.set(__self__, "attributes_count", attributes_count)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if report_name is not None:
            pulumi.set(__self__, "report_name", report_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def attribute1(self) -> Optional[str]:
        return pulumi.get(self, "attribute1")

    @attribute1.setter
    def attribute1(self, value: Optional[str]):
        pulumi.set(self, "attribute1", value)

    @property
    @pulumi.getter
    def attribute2(self) -> Optional[str]:
        return pulumi.get(self, "attribute2")

    @attribute2.setter
    def attribute2(self, value: Optional[str]):
        pulumi.set(self, "attribute2", value)

    @property
    @pulumi.getter
    def attribute3(self) -> Optional[str]:
        return pulumi.get(self, "attribute3")

    @attribute3.setter
    def attribute3(self, value: Optional[str]):
        pulumi.set(self, "attribute3", value)

    @property
    @pulumi.getter
    def attribute4(self) -> Optional[str]:
        return pulumi.get(self, "attribute4")

    @attribute4.setter
    def attribute4(self, value: Optional[str]):
        pulumi.set(self, "attribute4", value)

    @property
    @pulumi.getter(name="attributesCount")
    def attributes_count(self) -> Optional[int]:
        return pulumi.get(self, "attributes_count")

    @attributes_count.setter
    def attributes_count(self, value: Optional[int]):
        pulumi.set(self, "attributes_count", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="reportName")
    def report_name(self) -> Optional[str]:
        return pulumi.get(self, "report_name")

    @report_name.setter
    def report_name(self, value: Optional[str]):
        pulumi.set(self, "report_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerTagArgs:
    def __init__(__self__, *,
                 include_tags_attribute: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match_hostname: Optional[str] = None,
                 replace_all: Optional[bool] = None,
                 replacement_hostname: Optional[str] = None,
                 scope: Optional[str] = None,
                 tags_attribute: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if include_tags_attribute is not None:
            pulumi.set(__self__, "include_tags_attribute", include_tags_attribute)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_hostname is not None:
            pulumi.set(__self__, "match_hostname", match_hostname)
        if replace_all is not None:
            pulumi.set(__self__, "replace_all", replace_all)
        if replacement_hostname is not None:
            pulumi.set(__self__, "replacement_hostname", replacement_hostname)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if tags_attribute is not None:
            pulumi.set(__self__, "tags_attribute", tags_attribute)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="includeTagsAttribute")
    def include_tags_attribute(self) -> Optional[bool]:
        return pulumi.get(self, "include_tags_attribute")

    @include_tags_attribute.setter
    def include_tags_attribute(self, value: Optional[bool]):
        pulumi.set(self, "include_tags_attribute", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchHostname")
    def match_hostname(self) -> Optional[str]:
        return pulumi.get(self, "match_hostname")

    @match_hostname.setter
    def match_hostname(self, value: Optional[str]):
        pulumi.set(self, "match_hostname", value)

    @property
    @pulumi.getter(name="replaceAll")
    def replace_all(self) -> Optional[bool]:
        return pulumi.get(self, "replace_all")

    @replace_all.setter
    def replace_all(self, value: Optional[bool]):
        pulumi.set(self, "replace_all", value)

    @property
    @pulumi.getter(name="replacementHostname")
    def replacement_hostname(self) -> Optional[str]:
        return pulumi.get(self, "replacement_hostname")

    @replacement_hostname.setter
    def replacement_hostname(self, value: Optional[str]):
        pulumi.set(self, "replacement_hostname", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[str]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="tagsAttribute")
    def tags_attribute(self) -> Optional[str]:
        return pulumi.get(self, "tags_attribute")

    @tags_attribute.setter
    def tags_attribute(self, value: Optional[str]):
        pulumi.set(self, "tags_attribute", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllHttpInCacheHierarchyArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowCloudletsOriginsArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 honor_base_directory: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 purge_origin_query_parameter: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if honor_base_directory is not None:
            pulumi.set(__self__, "honor_base_directory", honor_base_directory)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if purge_origin_query_parameter is not None:
            pulumi.set(__self__, "purge_origin_query_parameter", purge_origin_query_parameter)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="honorBaseDirectory")
    def honor_base_directory(self) -> Optional[bool]:
        return pulumi.get(self, "honor_base_directory")

    @honor_base_directory.setter
    def honor_base_directory(self, value: Optional[bool]):
        pulumi.set(self, "honor_base_directory", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="purgeOriginQueryParameter")
    def purge_origin_query_parameter(self) -> Optional[str]:
        return pulumi.get(self, "purge_origin_query_parameter")

    @purge_origin_query_parameter.setter
    def purge_origin_query_parameter(self, value: Optional[str]):
        pulumi.set(self, "purge_origin_query_parameter", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowDeleteArgs:
    def __init__(__self__, *,
                 allow_body: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_body is not None:
            pulumi.set(__self__, "allow_body", allow_body)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowBody")
    def allow_body(self) -> Optional[bool]:
        return pulumi.get(self, "allow_body")

    @allow_body.setter
    def allow_body(self, value: Optional[bool]):
        pulumi.set(self, "allow_body", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsCacheKeySharingArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsDowngradeArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowOptionsArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowPatchArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowPostArgs:
    def __init__(__self__, *,
                 allow_without_content_length: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_without_content_length is not None:
            pulumi.set(__self__, "allow_without_content_length", allow_without_content_length)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowWithoutContentLength")
    def allow_without_content_length(self) -> Optional[bool]:
        return pulumi.get(self, "allow_without_content_length")

    @allow_without_content_length.setter
    def allow_without_content_length(self, value: Optional[bool]):
        pulumi.set(self, "allow_without_content_length", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowPutArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowTransferEncodingArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAltSvcHeaderArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 max_age: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[int]:
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[int]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationArgs:
    def __init__(__self__, *,
                 alternate_response_cache_ttl: Optional[int] = None,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationCloudletPolicyArgs'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 net_storage: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationNetStorageArgs'] = None,
                 net_storage_path: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 throttled_cp_code: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeArgs'] = None,
                 throttled_status_code: Optional[int] = None,
                 use_throttled_cp_code: Optional[bool] = None,
                 use_throttled_status_code: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if alternate_response_cache_ttl is not None:
            pulumi.set(__self__, "alternate_response_cache_ttl", alternate_response_cache_ttl)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if net_storage is not None:
            pulumi.set(__self__, "net_storage", net_storage)
        if net_storage_path is not None:
            pulumi.set(__self__, "net_storage_path", net_storage_path)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if throttled_cp_code is not None:
            pulumi.set(__self__, "throttled_cp_code", throttled_cp_code)
        if throttled_status_code is not None:
            pulumi.set(__self__, "throttled_status_code", throttled_status_code)
        if use_throttled_cp_code is not None:
            pulumi.set(__self__, "use_throttled_cp_code", use_throttled_cp_code)
        if use_throttled_status_code is not None:
            pulumi.set(__self__, "use_throttled_status_code", use_throttled_status_code)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="alternateResponseCacheTtl")
    def alternate_response_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "alternate_response_cache_ttl")

    @alternate_response_cache_ttl.setter
    def alternate_response_cache_ttl(self, value: Optional[int]):
        pulumi.set(self, "alternate_response_cache_ttl", value)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @cloudlet_shared_policy.setter
    def cloudlet_shared_policy(self, value: Optional[int]):
        pulumi.set(self, "cloudlet_shared_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @is_shared_policy.setter
    def is_shared_policy(self, value: Optional[bool]):
        pulumi.set(self, "is_shared_policy", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationNetStorageArgs']:
        return pulumi.get(self, "net_storage")

    @net_storage.setter
    def net_storage(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationNetStorageArgs']):
        pulumi.set(self, "net_storage", value)

    @property
    @pulumi.getter(name="netStoragePath")
    def net_storage_path(self) -> Optional[str]:
        return pulumi.get(self, "net_storage_path")

    @net_storage_path.setter
    def net_storage_path(self, value: Optional[str]):
        pulumi.set(self, "net_storage_path", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="throttledCpCode")
    def throttled_cp_code(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeArgs']:
        return pulumi.get(self, "throttled_cp_code")

    @throttled_cp_code.setter
    def throttled_cp_code(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeArgs']):
        pulumi.set(self, "throttled_cp_code", value)

    @property
    @pulumi.getter(name="throttledStatusCode")
    def throttled_status_code(self) -> Optional[int]:
        return pulumi.get(self, "throttled_status_code")

    @throttled_status_code.setter
    def throttled_status_code(self, value: Optional[int]):
        pulumi.set(self, "throttled_status_code", value)

    @property
    @pulumi.getter(name="useThrottledCpCode")
    def use_throttled_cp_code(self) -> Optional[bool]:
        return pulumi.get(self, "use_throttled_cp_code")

    @use_throttled_cp_code.setter
    def use_throttled_cp_code(self, value: Optional[bool]):
        pulumi.set(self, "use_throttled_cp_code", value)

    @property
    @pulumi.getter(name="useThrottledStatusCode")
    def use_throttled_status_code(self) -> Optional[bool]:
        return pulumi.get(self, "use_throttled_status_code")

    @use_throttled_status_code.setter
    def use_throttled_status_code(self, value: Optional[bool]):
        pulumi.set(self, "use_throttled_status_code", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationNetStorageArgs:
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @cp_code.setter
    def cp_code(self, value: Optional[int]):
        pulumi.set(self, "cp_code", value)

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @download_domain_name.setter
    def download_domain_name(self, value: Optional[str]):
        pulumi.set(self, "download_domain_name", value)

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")

    @g2o_token.setter
    def g2o_token(self, value: Optional[str]):
        pulumi.set(self, "g2o_token", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerArgs:
    def __init__(__self__, *,
                 all_down_net_storage: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerAllDownNetStorageArgs'] = None,
                 all_down_net_storage_file: Optional[str] = None,
                 all_down_status_code: Optional[str] = None,
                 all_down_title: Optional[str] = None,
                 allow_cache_prefresh: Optional[bool] = None,
                 cached_content_title: Optional[str] = None,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerCloudletPolicyArgs'] = None,
                 enabled: Optional[bool] = None,
                 failover_attempts_threshold: Optional[int] = None,
                 failover_mode: Optional[str] = None,
                 failover_origin_maps: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerFailoverOriginMapArgs']] = None,
                 failover_status_codes: Optional[Sequence[str]] = None,
                 failover_title: Optional[str] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 origin_cookie_name: Optional[str] = None,
                 specify_stickiness_cookie_domain: Optional[bool] = None,
                 stickiness_cookie_automatic_salt: Optional[bool] = None,
                 stickiness_cookie_domain: Optional[str] = None,
                 stickiness_cookie_salt: Optional[str] = None,
                 stickiness_cookie_set_http_only_flag: Optional[bool] = None,
                 stickiness_cookie_type: Optional[str] = None,
                 stickiness_duration: Optional[str] = None,
                 stickiness_expiration_date: Optional[str] = None,
                 stickiness_refresh: Optional[bool] = None,
                 stickiness_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if all_down_net_storage is not None:
            pulumi.set(__self__, "all_down_net_storage", all_down_net_storage)
        if all_down_net_storage_file is not None:
            pulumi.set(__self__, "all_down_net_storage_file", all_down_net_storage_file)
        if all_down_status_code is not None:
            pulumi.set(__self__, "all_down_status_code", all_down_status_code)
        if all_down_title is not None:
            pulumi.set(__self__, "all_down_title", all_down_title)
        if allow_cache_prefresh is not None:
            pulumi.set(__self__, "allow_cache_prefresh", allow_cache_prefresh)
        if cached_content_title is not None:
            pulumi.set(__self__, "cached_content_title", cached_content_title)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failover_attempts_threshold is not None:
            pulumi.set(__self__, "failover_attempts_threshold", failover_attempts_threshold)
        if failover_mode is not None:
            pulumi.set(__self__, "failover_mode", failover_mode)
        if failover_origin_maps is not None:
            pulumi.set(__self__, "failover_origin_maps", failover_origin_maps)
        if failover_status_codes is not None:
            pulumi.set(__self__, "failover_status_codes", failover_status_codes)
        if failover_title is not None:
            pulumi.set(__self__, "failover_title", failover_title)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_cookie_name is not None:
            pulumi.set(__self__, "origin_cookie_name", origin_cookie_name)
        if specify_stickiness_cookie_domain is not None:
            pulumi.set(__self__, "specify_stickiness_cookie_domain", specify_stickiness_cookie_domain)
        if stickiness_cookie_automatic_salt is not None:
            pulumi.set(__self__, "stickiness_cookie_automatic_salt", stickiness_cookie_automatic_salt)
        if stickiness_cookie_domain is not None:
            pulumi.set(__self__, "stickiness_cookie_domain", stickiness_cookie_domain)
        if stickiness_cookie_salt is not None:
            pulumi.set(__self__, "stickiness_cookie_salt", stickiness_cookie_salt)
        if stickiness_cookie_set_http_only_flag is not None:
            pulumi.set(__self__, "stickiness_cookie_set_http_only_flag", stickiness_cookie_set_http_only_flag)
        if stickiness_cookie_type is not None:
            pulumi.set(__self__, "stickiness_cookie_type", stickiness_cookie_type)
        if stickiness_duration is not None:
            pulumi.set(__self__, "stickiness_duration", stickiness_duration)
        if stickiness_expiration_date is not None:
            pulumi.set(__self__, "stickiness_expiration_date", stickiness_expiration_date)
        if stickiness_refresh is not None:
            pulumi.set(__self__, "stickiness_refresh", stickiness_refresh)
        if stickiness_title is not None:
            pulumi.set(__self__, "stickiness_title", stickiness_title)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allDownNetStorage")
    def all_down_net_storage(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerAllDownNetStorageArgs']:
        return pulumi.get(self, "all_down_net_storage")

    @all_down_net_storage.setter
    def all_down_net_storage(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerAllDownNetStorageArgs']):
        pulumi.set(self, "all_down_net_storage", value)

    @property
    @pulumi.getter(name="allDownNetStorageFile")
    def all_down_net_storage_file(self) -> Optional[str]:
        return pulumi.get(self, "all_down_net_storage_file")

    @all_down_net_storage_file.setter
    def all_down_net_storage_file(self, value: Optional[str]):
        pulumi.set(self, "all_down_net_storage_file", value)

    @property
    @pulumi.getter(name="allDownStatusCode")
    def all_down_status_code(self) -> Optional[str]:
        return pulumi.get(self, "all_down_status_code")

    @all_down_status_code.setter
    def all_down_status_code(self, value: Optional[str]):
        pulumi.set(self, "all_down_status_code", value)

    @property
    @pulumi.getter(name="allDownTitle")
    def all_down_title(self) -> Optional[str]:
        return pulumi.get(self, "all_down_title")

    @all_down_title.setter
    def all_down_title(self, value: Optional[str]):
        pulumi.set(self, "all_down_title", value)

    @property
    @pulumi.getter(name="allowCachePrefresh")
    def allow_cache_prefresh(self) -> Optional[bool]:
        return pulumi.get(self, "allow_cache_prefresh")

    @allow_cache_prefresh.setter
    def allow_cache_prefresh(self, value: Optional[bool]):
        pulumi.set(self, "allow_cache_prefresh", value)

    @property
    @pulumi.getter(name="cachedContentTitle")
    def cached_content_title(self) -> Optional[str]:
        return pulumi.get(self, "cached_content_title")

    @cached_content_title.setter
    def cached_content_title(self, value: Optional[str]):
        pulumi.set(self, "cached_content_title", value)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="failoverAttemptsThreshold")
    def failover_attempts_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failover_attempts_threshold")

    @failover_attempts_threshold.setter
    def failover_attempts_threshold(self, value: Optional[int]):
        pulumi.set(self, "failover_attempts_threshold", value)

    @property
    @pulumi.getter(name="failoverMode")
    def failover_mode(self) -> Optional[str]:
        return pulumi.get(self, "failover_mode")

    @failover_mode.setter
    def failover_mode(self, value: Optional[str]):
        pulumi.set(self, "failover_mode", value)

    @property
    @pulumi.getter(name="failoverOriginMaps")
    def failover_origin_maps(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerFailoverOriginMapArgs']]:
        return pulumi.get(self, "failover_origin_maps")

    @failover_origin_maps.setter
    def failover_origin_maps(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerFailoverOriginMapArgs']]):
        pulumi.set(self, "failover_origin_maps", value)

    @property
    @pulumi.getter(name="failoverStatusCodes")
    def failover_status_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "failover_status_codes")

    @failover_status_codes.setter
    def failover_status_codes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "failover_status_codes", value)

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @failover_title.setter
    def failover_title(self, value: Optional[str]):
        pulumi.set(self, "failover_title", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="originCookieName")
    def origin_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "origin_cookie_name")

    @origin_cookie_name.setter
    def origin_cookie_name(self, value: Optional[str]):
        pulumi.set(self, "origin_cookie_name", value)

    @property
    @pulumi.getter(name="specifyStickinessCookieDomain")
    def specify_stickiness_cookie_domain(self) -> Optional[bool]:
        return pulumi.get(self, "specify_stickiness_cookie_domain")

    @specify_stickiness_cookie_domain.setter
    def specify_stickiness_cookie_domain(self, value: Optional[bool]):
        pulumi.set(self, "specify_stickiness_cookie_domain", value)

    @property
    @pulumi.getter(name="stickinessCookieAutomaticSalt")
    def stickiness_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_cookie_automatic_salt")

    @stickiness_cookie_automatic_salt.setter
    def stickiness_cookie_automatic_salt(self, value: Optional[bool]):
        pulumi.set(self, "stickiness_cookie_automatic_salt", value)

    @property
    @pulumi.getter(name="stickinessCookieDomain")
    def stickiness_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_domain")

    @stickiness_cookie_domain.setter
    def stickiness_cookie_domain(self, value: Optional[str]):
        pulumi.set(self, "stickiness_cookie_domain", value)

    @property
    @pulumi.getter(name="stickinessCookieSalt")
    def stickiness_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_salt")

    @stickiness_cookie_salt.setter
    def stickiness_cookie_salt(self, value: Optional[str]):
        pulumi.set(self, "stickiness_cookie_salt", value)

    @property
    @pulumi.getter(name="stickinessCookieSetHttpOnlyFlag")
    def stickiness_cookie_set_http_only_flag(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_cookie_set_http_only_flag")

    @stickiness_cookie_set_http_only_flag.setter
    def stickiness_cookie_set_http_only_flag(self, value: Optional[bool]):
        pulumi.set(self, "stickiness_cookie_set_http_only_flag", value)

    @property
    @pulumi.getter(name="stickinessCookieType")
    def stickiness_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_type")

    @stickiness_cookie_type.setter
    def stickiness_cookie_type(self, value: Optional[str]):
        pulumi.set(self, "stickiness_cookie_type", value)

    @property
    @pulumi.getter(name="stickinessDuration")
    def stickiness_duration(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_duration")

    @stickiness_duration.setter
    def stickiness_duration(self, value: Optional[str]):
        pulumi.set(self, "stickiness_duration", value)

    @property
    @pulumi.getter(name="stickinessExpirationDate")
    def stickiness_expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_expiration_date")

    @stickiness_expiration_date.setter
    def stickiness_expiration_date(self, value: Optional[str]):
        pulumi.set(self, "stickiness_expiration_date", value)

    @property
    @pulumi.getter(name="stickinessRefresh")
    def stickiness_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_refresh")

    @stickiness_refresh.setter
    def stickiness_refresh(self, value: Optional[bool]):
        pulumi.set(self, "stickiness_refresh", value)

    @property
    @pulumi.getter(name="stickinessTitle")
    def stickiness_title(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_title")

    @stickiness_title.setter
    def stickiness_title(self, value: Optional[str]):
        pulumi.set(self, "stickiness_title", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerAllDownNetStorageArgs:
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @cp_code.setter
    def cp_code(self, value: Optional[int]):
        pulumi.set(self, "cp_code", value)

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @download_domain_name.setter
    def download_domain_name(self, value: Optional[str]):
        pulumi.set(self, "download_domain_name", value)

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")

    @g2o_token.setter
    def g2o_token(self, value: Optional[str]):
        pulumi.set(self, "g2o_token", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerFailoverOriginMapArgs:
    def __init__(__self__, *,
                 from_origin_id: Optional[str] = None,
                 to_origin_ids: Optional[Sequence[str]] = None):
        if from_origin_id is not None:
            pulumi.set(__self__, "from_origin_id", from_origin_id)
        if to_origin_ids is not None:
            pulumi.set(__self__, "to_origin_ids", to_origin_ids)

    @property
    @pulumi.getter(name="fromOriginId")
    def from_origin_id(self) -> Optional[str]:
        return pulumi.get(self, "from_origin_id")

    @from_origin_id.setter
    def from_origin_id(self, value: Optional[str]):
        pulumi.set(self, "from_origin_id", value)

    @property
    @pulumi.getter(name="toOriginIds")
    def to_origin_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "to_origin_ids")

    @to_origin_ids.setter
    def to_origin_ids(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "to_origin_ids", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationArgs:
    def __init__(__self__, *,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationCloudletPolicyArgs'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 population_cookie_automatic_salt: Optional[bool] = None,
                 population_cookie_domain: Optional[str] = None,
                 population_cookie_include_rule_name: Optional[bool] = None,
                 population_cookie_salt: Optional[str] = None,
                 population_cookie_type: Optional[str] = None,
                 population_duration: Optional[str] = None,
                 population_refresh: Optional[bool] = None,
                 population_title: Optional[str] = None,
                 segment_tracking_cookie_name: Optional[str] = None,
                 segment_tracking_custom_header: Optional[str] = None,
                 segment_tracking_method: Optional[str] = None,
                 segment_tracking_query_param: Optional[str] = None,
                 segment_tracking_title: Optional[str] = None,
                 specify_population_cookie_domain: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if population_cookie_automatic_salt is not None:
            pulumi.set(__self__, "population_cookie_automatic_salt", population_cookie_automatic_salt)
        if population_cookie_domain is not None:
            pulumi.set(__self__, "population_cookie_domain", population_cookie_domain)
        if population_cookie_include_rule_name is not None:
            pulumi.set(__self__, "population_cookie_include_rule_name", population_cookie_include_rule_name)
        if population_cookie_salt is not None:
            pulumi.set(__self__, "population_cookie_salt", population_cookie_salt)
        if population_cookie_type is not None:
            pulumi.set(__self__, "population_cookie_type", population_cookie_type)
        if population_duration is not None:
            pulumi.set(__self__, "population_duration", population_duration)
        if population_refresh is not None:
            pulumi.set(__self__, "population_refresh", population_refresh)
        if population_title is not None:
            pulumi.set(__self__, "population_title", population_title)
        if segment_tracking_cookie_name is not None:
            pulumi.set(__self__, "segment_tracking_cookie_name", segment_tracking_cookie_name)
        if segment_tracking_custom_header is not None:
            pulumi.set(__self__, "segment_tracking_custom_header", segment_tracking_custom_header)
        if segment_tracking_method is not None:
            pulumi.set(__self__, "segment_tracking_method", segment_tracking_method)
        if segment_tracking_query_param is not None:
            pulumi.set(__self__, "segment_tracking_query_param", segment_tracking_query_param)
        if segment_tracking_title is not None:
            pulumi.set(__self__, "segment_tracking_title", segment_tracking_title)
        if specify_population_cookie_domain is not None:
            pulumi.set(__self__, "specify_population_cookie_domain", specify_population_cookie_domain)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @cloudlet_shared_policy.setter
    def cloudlet_shared_policy(self, value: Optional[int]):
        pulumi.set(self, "cloudlet_shared_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @is_shared_policy.setter
    def is_shared_policy(self, value: Optional[bool]):
        pulumi.set(self, "is_shared_policy", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="populationCookieAutomaticSalt")
    def population_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "population_cookie_automatic_salt")

    @population_cookie_automatic_salt.setter
    def population_cookie_automatic_salt(self, value: Optional[bool]):
        pulumi.set(self, "population_cookie_automatic_salt", value)

    @property
    @pulumi.getter(name="populationCookieDomain")
    def population_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_domain")

    @population_cookie_domain.setter
    def population_cookie_domain(self, value: Optional[str]):
        pulumi.set(self, "population_cookie_domain", value)

    @property
    @pulumi.getter(name="populationCookieIncludeRuleName")
    def population_cookie_include_rule_name(self) -> Optional[bool]:
        return pulumi.get(self, "population_cookie_include_rule_name")

    @population_cookie_include_rule_name.setter
    def population_cookie_include_rule_name(self, value: Optional[bool]):
        pulumi.set(self, "population_cookie_include_rule_name", value)

    @property
    @pulumi.getter(name="populationCookieSalt")
    def population_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_salt")

    @population_cookie_salt.setter
    def population_cookie_salt(self, value: Optional[str]):
        pulumi.set(self, "population_cookie_salt", value)

    @property
    @pulumi.getter(name="populationCookieType")
    def population_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_type")

    @population_cookie_type.setter
    def population_cookie_type(self, value: Optional[str]):
        pulumi.set(self, "population_cookie_type", value)

    @property
    @pulumi.getter(name="populationDuration")
    def population_duration(self) -> Optional[str]:
        return pulumi.get(self, "population_duration")

    @population_duration.setter
    def population_duration(self, value: Optional[str]):
        pulumi.set(self, "population_duration", value)

    @property
    @pulumi.getter(name="populationRefresh")
    def population_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "population_refresh")

    @population_refresh.setter
    def population_refresh(self, value: Optional[bool]):
        pulumi.set(self, "population_refresh", value)

    @property
    @pulumi.getter(name="populationTitle")
    def population_title(self) -> Optional[str]:
        return pulumi.get(self, "population_title")

    @population_title.setter
    def population_title(self, value: Optional[str]):
        pulumi.set(self, "population_title", value)

    @property
    @pulumi.getter(name="segmentTrackingCookieName")
    def segment_tracking_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_cookie_name")

    @segment_tracking_cookie_name.setter
    def segment_tracking_cookie_name(self, value: Optional[str]):
        pulumi.set(self, "segment_tracking_cookie_name", value)

    @property
    @pulumi.getter(name="segmentTrackingCustomHeader")
    def segment_tracking_custom_header(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_custom_header")

    @segment_tracking_custom_header.setter
    def segment_tracking_custom_header(self, value: Optional[str]):
        pulumi.set(self, "segment_tracking_custom_header", value)

    @property
    @pulumi.getter(name="segmentTrackingMethod")
    def segment_tracking_method(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_method")

    @segment_tracking_method.setter
    def segment_tracking_method(self, value: Optional[str]):
        pulumi.set(self, "segment_tracking_method", value)

    @property
    @pulumi.getter(name="segmentTrackingQueryParam")
    def segment_tracking_query_param(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_query_param")

    @segment_tracking_query_param.setter
    def segment_tracking_query_param(self, value: Optional[str]):
        pulumi.set(self, "segment_tracking_query_param", value)

    @property
    @pulumi.getter(name="segmentTrackingTitle")
    def segment_tracking_title(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_title")

    @segment_tracking_title.setter
    def segment_tracking_title(self, value: Optional[str]):
        pulumi.set(self, "segment_tracking_title", value)

    @property
    @pulumi.getter(name="specifyPopulationCookieDomain")
    def specify_population_cookie_domain(self) -> Optional[bool]:
        return pulumi.get(self, "specify_population_cookie_domain")

    @specify_population_cookie_domain.setter
    def specify_population_cookie_domain(self, value: Optional[bool]):
        pulumi.set(self, "specify_population_cookie_domain", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAutoDomainValidationArgs:
    def __init__(__self__, *,
                 autodv: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if autodv is not None:
            pulumi.set(__self__, "autodv", autodv)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def autodv(self) -> Optional[str]:
        return pulumi.get(self, "autodv")

    @autodv.setter
    def autodv(self, value: Optional[str]):
        pulumi.set(self, "autodv", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorBaseDirectoryArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorBossBeaconingArgs:
    def __init__(__self__, *,
                 conditional_error_pattern: Optional[str] = None,
                 conditional_http_statuses: Optional[Sequence[str]] = None,
                 conditional_sampling_frequency: Optional[str] = None,
                 cpcodes: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 forward_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 request_type: Optional[str] = None,
                 sampling_frequency: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if conditional_error_pattern is not None:
            pulumi.set(__self__, "conditional_error_pattern", conditional_error_pattern)
        if conditional_http_statuses is not None:
            pulumi.set(__self__, "conditional_http_statuses", conditional_http_statuses)
        if conditional_sampling_frequency is not None:
            pulumi.set(__self__, "conditional_sampling_frequency", conditional_sampling_frequency)
        if cpcodes is not None:
            pulumi.set(__self__, "cpcodes", cpcodes)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if forward_type is not None:
            pulumi.set(__self__, "forward_type", forward_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if sampling_frequency is not None:
            pulumi.set(__self__, "sampling_frequency", sampling_frequency)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="conditionalErrorPattern")
    def conditional_error_pattern(self) -> Optional[str]:
        return pulumi.get(self, "conditional_error_pattern")

    @conditional_error_pattern.setter
    def conditional_error_pattern(self, value: Optional[str]):
        pulumi.set(self, "conditional_error_pattern", value)

    @property
    @pulumi.getter(name="conditionalHttpStatuses")
    def conditional_http_statuses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "conditional_http_statuses")

    @conditional_http_statuses.setter
    def conditional_http_statuses(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "conditional_http_statuses", value)

    @property
    @pulumi.getter(name="conditionalSamplingFrequency")
    def conditional_sampling_frequency(self) -> Optional[str]:
        return pulumi.get(self, "conditional_sampling_frequency")

    @conditional_sampling_frequency.setter
    def conditional_sampling_frequency(self, value: Optional[str]):
        pulumi.set(self, "conditional_sampling_frequency", value)

    @property
    @pulumi.getter
    def cpcodes(self) -> Optional[str]:
        return pulumi.get(self, "cpcodes")

    @cpcodes.setter
    def cpcodes(self, value: Optional[str]):
        pulumi.set(self, "cpcodes", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="forwardType")
    def forward_type(self) -> Optional[str]:
        return pulumi.get(self, "forward_type")

    @forward_type.setter
    def forward_type(self, value: Optional[str]):
        pulumi.set(self, "forward_type", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[str]:
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: Optional[str]):
        pulumi.set(self, "request_type", value)

    @property
    @pulumi.getter(name="samplingFrequency")
    def sampling_frequency(self) -> Optional[str]:
        return pulumi.get(self, "sampling_frequency")

    @sampling_frequency.setter
    def sampling_frequency(self, value: Optional[str]):
        pulumi.set(self, "sampling_frequency", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorBreadcrumbsArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 logging_enabled: Optional[bool] = None,
                 opt_mode: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if logging_enabled is not None:
            pulumi.set(__self__, "logging_enabled", logging_enabled)
        if opt_mode is not None:
            pulumi.set(__self__, "opt_mode", opt_mode)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="loggingEnabled")
    def logging_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "logging_enabled")

    @logging_enabled.setter
    def logging_enabled(self, value: Optional[bool]):
        pulumi.set(self, "logging_enabled", value)

    @property
    @pulumi.getter(name="optMode")
    def opt_mode(self) -> Optional[bool]:
        return pulumi.get(self, "opt_mode")

    @opt_mode.setter
    def opt_mode(self, value: Optional[bool]):
        pulumi.set(self, "opt_mode", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorBreakConnectionArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorBrotliArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheErrorArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 preserve_stale: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if preserve_stale is not None:
            pulumi.set(__self__, "preserve_stale", preserve_stale)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="preserveStale")
    def preserve_stale(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_stale")

    @preserve_stale.setter
    def preserve_stale(self, value: Optional[bool]):
        pulumi.set(self, "preserve_stale", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[str]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheIdArgs:
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 include_value: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 optional: Optional[bool] = None,
                 rule: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        if elements is not None:
            pulumi.set(__self__, "elements", elements)
        if include_value is not None:
            pulumi.set(__self__, "include_value", include_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter(name="includeValue")
    def include_value(self) -> Optional[bool]:
        return pulumi.get(self, "include_value")

    @include_value.setter
    def include_value(self, value: Optional[bool]):
        pulumi.set(self, "include_value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[bool]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[str]:
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[str]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[str]):
        pulumi.set(self, "variable_name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyIgnoreCaseArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyQueryParamsArgs:
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 exact_match: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 parameters: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[str]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[bool]:
        return pulumi.get(self, "exact_match")

    @exact_match.setter
    def exact_match(self, value: Optional[bool]):
        pulumi.set(self, "exact_match", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyRewriteArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 purge_key: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if purge_key is not None:
            pulumi.set(__self__, "purge_key", purge_key)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="purgeKey")
    def purge_key(self) -> Optional[str]:
        return pulumi.get(self, "purge_key")

    @purge_key.setter
    def purge_key(self, value: Optional[str]):
        pulumi.set(self, "purge_key", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCachePostArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_body: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_body is not None:
            pulumi.set(__self__, "use_body", use_body)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useBody")
    def use_body(self) -> Optional[str]:
        return pulumi.get(self, "use_body")

    @use_body.setter
    def use_body(self, value: Optional[str]):
        pulumi.set(self, "use_body", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheRedirectArgs:
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 tag: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[str]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagVisibleArgs:
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[str]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCachingArgs:
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 cache_control_directives: Optional[str] = None,
                 cacheability_settings: Optional[str] = None,
                 default_ttl: Optional[str] = None,
                 enhanced_rfc_support: Optional[bool] = None,
                 expiration_settings: Optional[str] = None,
                 honor_max_age: Optional[bool] = None,
                 honor_must_revalidate: Optional[bool] = None,
                 honor_no_cache: Optional[bool] = None,
                 honor_no_store: Optional[bool] = None,
                 honor_private: Optional[bool] = None,
                 honor_proxy_revalidate: Optional[bool] = None,
                 honor_s_maxage: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 must_revalidate: Optional[bool] = None,
                 revalidation_settings: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if cache_control_directives is not None:
            pulumi.set(__self__, "cache_control_directives", cache_control_directives)
        if cacheability_settings is not None:
            pulumi.set(__self__, "cacheability_settings", cacheability_settings)
        if default_ttl is not None:
            pulumi.set(__self__, "default_ttl", default_ttl)
        if enhanced_rfc_support is not None:
            pulumi.set(__self__, "enhanced_rfc_support", enhanced_rfc_support)
        if expiration_settings is not None:
            pulumi.set(__self__, "expiration_settings", expiration_settings)
        if honor_max_age is not None:
            pulumi.set(__self__, "honor_max_age", honor_max_age)
        if honor_must_revalidate is not None:
            pulumi.set(__self__, "honor_must_revalidate", honor_must_revalidate)
        if honor_no_cache is not None:
            pulumi.set(__self__, "honor_no_cache", honor_no_cache)
        if honor_no_store is not None:
            pulumi.set(__self__, "honor_no_store", honor_no_store)
        if honor_private is not None:
            pulumi.set(__self__, "honor_private", honor_private)
        if honor_proxy_revalidate is not None:
            pulumi.set(__self__, "honor_proxy_revalidate", honor_proxy_revalidate)
        if honor_s_maxage is not None:
            pulumi.set(__self__, "honor_s_maxage", honor_s_maxage)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if must_revalidate is not None:
            pulumi.set(__self__, "must_revalidate", must_revalidate)
        if revalidation_settings is not None:
            pulumi.set(__self__, "revalidation_settings", revalidation_settings)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[str]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter(name="cacheControlDirectives")
    def cache_control_directives(self) -> Optional[str]:
        return pulumi.get(self, "cache_control_directives")

    @cache_control_directives.setter
    def cache_control_directives(self, value: Optional[str]):
        pulumi.set(self, "cache_control_directives", value)

    @property
    @pulumi.getter(name="cacheabilitySettings")
    def cacheability_settings(self) -> Optional[str]:
        return pulumi.get(self, "cacheability_settings")

    @cacheability_settings.setter
    def cacheability_settings(self, value: Optional[str]):
        pulumi.set(self, "cacheability_settings", value)

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[str]:
        return pulumi.get(self, "default_ttl")

    @default_ttl.setter
    def default_ttl(self, value: Optional[str]):
        pulumi.set(self, "default_ttl", value)

    @property
    @pulumi.getter(name="enhancedRfcSupport")
    def enhanced_rfc_support(self) -> Optional[bool]:
        return pulumi.get(self, "enhanced_rfc_support")

    @enhanced_rfc_support.setter
    def enhanced_rfc_support(self, value: Optional[bool]):
        pulumi.set(self, "enhanced_rfc_support", value)

    @property
    @pulumi.getter(name="expirationSettings")
    def expiration_settings(self) -> Optional[str]:
        return pulumi.get(self, "expiration_settings")

    @expiration_settings.setter
    def expiration_settings(self, value: Optional[str]):
        pulumi.set(self, "expiration_settings", value)

    @property
    @pulumi.getter(name="honorMaxAge")
    def honor_max_age(self) -> Optional[bool]:
        return pulumi.get(self, "honor_max_age")

    @honor_max_age.setter
    def honor_max_age(self, value: Optional[bool]):
        pulumi.set(self, "honor_max_age", value)

    @property
    @pulumi.getter(name="honorMustRevalidate")
    def honor_must_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "honor_must_revalidate")

    @honor_must_revalidate.setter
    def honor_must_revalidate(self, value: Optional[bool]):
        pulumi.set(self, "honor_must_revalidate", value)

    @property
    @pulumi.getter(name="honorNoCache")
    def honor_no_cache(self) -> Optional[bool]:
        return pulumi.get(self, "honor_no_cache")

    @honor_no_cache.setter
    def honor_no_cache(self, value: Optional[bool]):
        pulumi.set(self, "honor_no_cache", value)

    @property
    @pulumi.getter(name="honorNoStore")
    def honor_no_store(self) -> Optional[bool]:
        return pulumi.get(self, "honor_no_store")

    @honor_no_store.setter
    def honor_no_store(self, value: Optional[bool]):
        pulumi.set(self, "honor_no_store", value)

    @property
    @pulumi.getter(name="honorPrivate")
    def honor_private(self) -> Optional[bool]:
        return pulumi.get(self, "honor_private")

    @honor_private.setter
    def honor_private(self, value: Optional[bool]):
        pulumi.set(self, "honor_private", value)

    @property
    @pulumi.getter(name="honorProxyRevalidate")
    def honor_proxy_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "honor_proxy_revalidate")

    @honor_proxy_revalidate.setter
    def honor_proxy_revalidate(self, value: Optional[bool]):
        pulumi.set(self, "honor_proxy_revalidate", value)

    @property
    @pulumi.getter(name="honorSMaxage")
    def honor_s_maxage(self) -> Optional[bool]:
        return pulumi.get(self, "honor_s_maxage")

    @honor_s_maxage.setter
    def honor_s_maxage(self, value: Optional[bool]):
        pulumi.set(self, "honor_s_maxage", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="mustRevalidate")
    def must_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "must_revalidate")

    @must_revalidate.setter
    def must_revalidate(self, value: Optional[bool]):
        pulumi.set(self, "must_revalidate", value)

    @property
    @pulumi.getter(name="revalidationSettings")
    def revalidation_settings(self) -> Optional[str]:
        return pulumi.get(self, "revalidation_settings")

    @revalidation_settings.setter
    def revalidation_settings(self, value: Optional[str]):
        pulumi.set(self, "revalidation_settings", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[str]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCentralAuthorizationArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorChaseRedirectsArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 limit: Optional[str] = None,
                 locked: Optional[bool] = None,
                 serve404: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if serve404 is not None:
            pulumi.set(__self__, "serve404", serve404)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[str]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def serve404(self) -> Optional[bool]:
        return pulumi.get(self, "serve404")

    @serve404.setter
    def serve404(self, value: Optional[bool]):
        pulumi.set(self, "serve404", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorClientCharacteristicsArgs:
    def __init__(__self__, *,
                 country: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if country is not None:
            pulumi.set(__self__, "country", country)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCloudInterconnectsArgs:
    def __init__(__self__, *,
                 cloud_locations: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloud_locations is not None:
            pulumi.set(__self__, "cloud_locations", cloud_locations)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudLocations")
    def cloud_locations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cloud_locations")

    @cloud_locations.setter
    def cloud_locations(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "cloud_locations", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperAdvancedArgs:
    def __init__(__self__, *,
                 custom_failover_map: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 failover_map: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_failover_map is not None:
            pulumi.set(__self__, "custom_failover_map", custom_failover_map)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failover_map is not None:
            pulumi.set(__self__, "failover_map", failover_map)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customFailoverMap")
    def custom_failover_map(self) -> Optional[str]:
        return pulumi.get(self, "custom_failover_map")

    @custom_failover_map.setter
    def custom_failover_map(self, value: Optional[str]):
        pulumi.set(self, "custom_failover_map", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="failoverMap")
    def failover_map(self) -> Optional[str]:
        return pulumi.get(self, "failover_map")

    @failover_map.setter
    def failover_map(self, value: Optional[str]):
        pulumi.set(self, "failover_map", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCommonMediaClientDataArgs:
    def __init__(__self__, *,
                 enable_cmcd_segment_prefetch: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable_cmcd_segment_prefetch is not None:
            pulumi.set(__self__, "enable_cmcd_segment_prefetch", enable_cmcd_segment_prefetch)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="enableCmcdSegmentPrefetch")
    def enable_cmcd_segment_prefetch(self) -> Optional[bool]:
        return pulumi.get(self, "enable_cmcd_segment_prefetch")

    @enable_cmcd_segment_prefetch.setter
    def enable_cmcd_segment_prefetch(self, value: Optional[bool]):
        pulumi.set(self, "enable_cmcd_segment_prefetch", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorConditionalOriginArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: Optional[str]):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorConstructResponseArgs:
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 force_eviction: Optional[bool] = None,
                 ignore_purge: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if body is not None:
            pulumi.set(__self__, "body", body)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if force_eviction is not None:
            pulumi.set(__self__, "force_eviction", force_eviction)
        if ignore_purge is not None:
            pulumi.set(__self__, "ignore_purge", ignore_purge)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[str]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="forceEviction")
    def force_eviction(self) -> Optional[bool]:
        return pulumi.get(self, "force_eviction")

    @force_eviction.setter
    def force_eviction(self, value: Optional[bool]):
        pulumi.set(self, "force_eviction", value)

    @property
    @pulumi.getter(name="ignorePurge")
    def ignore_purge(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_purge")

    @ignore_purge.setter
    def ignore_purge(self, value: Optional[bool]):
        pulumi.set(self, "ignore_purge", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: Optional[int]):
        pulumi.set(self, "response_code", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsArgs:
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @catalog_size.setter
    def catalog_size(self, value: Optional[str]):
        pulumi.set(self, "catalog_size", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @object_size.setter
    def object_size(self, value: Optional[str]):
        pulumi.set(self, "object_size", value)

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @popularity_distribution.setter
    def popularity_distribution(self, value: Optional[str]):
        pulumi.set(self, "popularity_distribution", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsAmdArgs:
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_dash_custom: Optional[int] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hds_custom: Optional[int] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_hls_custom: Optional[float] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_duration_smooth_custom: Optional[float] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if dash is not None:
            pulumi.set(__self__, "dash", dash)
        if hds is not None:
            pulumi.set(__self__, "hds", hds)
        if hls is not None:
            pulumi.set(__self__, "hls", hls)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            pulumi.set(__self__, "segment_duration_dash", segment_duration_dash)
        if segment_duration_dash_custom is not None:
            pulumi.set(__self__, "segment_duration_dash_custom", segment_duration_dash_custom)
        if segment_duration_hds is not None:
            pulumi.set(__self__, "segment_duration_hds", segment_duration_hds)
        if segment_duration_hds_custom is not None:
            pulumi.set(__self__, "segment_duration_hds_custom", segment_duration_hds_custom)
        if segment_duration_hls is not None:
            pulumi.set(__self__, "segment_duration_hls", segment_duration_hls)
        if segment_duration_hls_custom is not None:
            pulumi.set(__self__, "segment_duration_hls_custom", segment_duration_hls_custom)
        if segment_duration_smooth is not None:
            pulumi.set(__self__, "segment_duration_smooth", segment_duration_smooth)
        if segment_duration_smooth_custom is not None:
            pulumi.set(__self__, "segment_duration_smooth_custom", segment_duration_smooth_custom)
        if segment_size_dash is not None:
            pulumi.set(__self__, "segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            pulumi.set(__self__, "segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            pulumi.set(__self__, "segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            pulumi.set(__self__, "segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            pulumi.set(__self__, "smooth", smooth)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @catalog_size.setter
    def catalog_size(self, value: Optional[str]):
        pulumi.set(self, "catalog_size", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @dash.setter
    def dash(self, value: Optional[bool]):
        pulumi.set(self, "dash", value)

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @hds.setter
    def hds(self, value: Optional[bool]):
        pulumi.set(self, "hds", value)

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @hls.setter
    def hls(self, value: Optional[bool]):
        pulumi.set(self, "hls", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @popularity_distribution.setter
    def popularity_distribution(self, value: Optional[str]):
        pulumi.set(self, "popularity_distribution", value)

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @segment_duration_dash.setter
    def segment_duration_dash(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_dash", value)

    @property
    @pulumi.getter(name="segmentDurationDashCustom")
    def segment_duration_dash_custom(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration_dash_custom")

    @segment_duration_dash_custom.setter
    def segment_duration_dash_custom(self, value: Optional[int]):
        pulumi.set(self, "segment_duration_dash_custom", value)

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @segment_duration_hds.setter
    def segment_duration_hds(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_hds", value)

    @property
    @pulumi.getter(name="segmentDurationHdsCustom")
    def segment_duration_hds_custom(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration_hds_custom")

    @segment_duration_hds_custom.setter
    def segment_duration_hds_custom(self, value: Optional[int]):
        pulumi.set(self, "segment_duration_hds_custom", value)

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @segment_duration_hls.setter
    def segment_duration_hls(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_hls", value)

    @property
    @pulumi.getter(name="segmentDurationHlsCustom")
    def segment_duration_hls_custom(self) -> Optional[float]:
        return pulumi.get(self, "segment_duration_hls_custom")

    @segment_duration_hls_custom.setter
    def segment_duration_hls_custom(self, value: Optional[float]):
        pulumi.set(self, "segment_duration_hls_custom", value)

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @segment_duration_smooth.setter
    def segment_duration_smooth(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_smooth", value)

    @property
    @pulumi.getter(name="segmentDurationSmoothCustom")
    def segment_duration_smooth_custom(self) -> Optional[float]:
        return pulumi.get(self, "segment_duration_smooth_custom")

    @segment_duration_smooth_custom.setter
    def segment_duration_smooth_custom(self, value: Optional[float]):
        pulumi.set(self, "segment_duration_smooth_custom", value)

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @segment_size_dash.setter
    def segment_size_dash(self, value: Optional[str]):
        pulumi.set(self, "segment_size_dash", value)

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @segment_size_hds.setter
    def segment_size_hds(self, value: Optional[str]):
        pulumi.set(self, "segment_size_hds", value)

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @segment_size_hls.setter
    def segment_size_hls(self, value: Optional[str]):
        pulumi.set(self, "segment_size_hls", value)

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @segment_size_smooth.setter
    def segment_size_smooth(self, value: Optional[str]):
        pulumi.set(self, "segment_size_smooth", value)

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @smooth.setter
    def smooth(self, value: Optional[bool]):
        pulumi.set(self, "smooth", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsDdArgs:
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 optimize_option: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if optimize_option is not None:
            pulumi.set(__self__, "optimize_option", optimize_option)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @catalog_size.setter
    def catalog_size(self, value: Optional[str]):
        pulumi.set(self, "catalog_size", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @object_size.setter
    def object_size(self, value: Optional[str]):
        pulumi.set(self, "object_size", value)

    @property
    @pulumi.getter(name="optimizeOption")
    def optimize_option(self) -> Optional[bool]:
        return pulumi.get(self, "optimize_option")

    @optimize_option.setter
    def optimize_option(self, value: Optional[bool]):
        pulumi.set(self, "optimize_option", value)

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @popularity_distribution.setter
    def popularity_distribution(self, value: Optional[str]):
        pulumi.set(self, "popularity_distribution", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLargeFileArgs:
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @catalog_size.setter
    def catalog_size(self, value: Optional[str]):
        pulumi.set(self, "catalog_size", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @object_size.setter
    def object_size(self, value: Optional[str]):
        pulumi.set(self, "object_size", value)

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @popularity_distribution.setter
    def popularity_distribution(self, value: Optional[str]):
        pulumi.set(self, "popularity_distribution", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLiveArgs:
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if dash is not None:
            pulumi.set(__self__, "dash", dash)
        if hds is not None:
            pulumi.set(__self__, "hds", hds)
        if hls is not None:
            pulumi.set(__self__, "hls", hls)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            pulumi.set(__self__, "segment_duration_dash", segment_duration_dash)
        if segment_duration_hds is not None:
            pulumi.set(__self__, "segment_duration_hds", segment_duration_hds)
        if segment_duration_hls is not None:
            pulumi.set(__self__, "segment_duration_hls", segment_duration_hls)
        if segment_duration_smooth is not None:
            pulumi.set(__self__, "segment_duration_smooth", segment_duration_smooth)
        if segment_size_dash is not None:
            pulumi.set(__self__, "segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            pulumi.set(__self__, "segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            pulumi.set(__self__, "segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            pulumi.set(__self__, "segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            pulumi.set(__self__, "smooth", smooth)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @catalog_size.setter
    def catalog_size(self, value: Optional[str]):
        pulumi.set(self, "catalog_size", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @dash.setter
    def dash(self, value: Optional[bool]):
        pulumi.set(self, "dash", value)

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @hds.setter
    def hds(self, value: Optional[bool]):
        pulumi.set(self, "hds", value)

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @hls.setter
    def hls(self, value: Optional[bool]):
        pulumi.set(self, "hls", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @popularity_distribution.setter
    def popularity_distribution(self, value: Optional[str]):
        pulumi.set(self, "popularity_distribution", value)

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @segment_duration_dash.setter
    def segment_duration_dash(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_dash", value)

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @segment_duration_hds.setter
    def segment_duration_hds(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_hds", value)

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @segment_duration_hls.setter
    def segment_duration_hls(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_hls", value)

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @segment_duration_smooth.setter
    def segment_duration_smooth(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_smooth", value)

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @segment_size_dash.setter
    def segment_size_dash(self, value: Optional[str]):
        pulumi.set(self, "segment_size_dash", value)

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @segment_size_hds.setter
    def segment_size_hds(self, value: Optional[str]):
        pulumi.set(self, "segment_size_hds", value)

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @segment_size_hls.setter
    def segment_size_hls(self, value: Optional[str]):
        pulumi.set(self, "segment_size_hls", value)

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @segment_size_smooth.setter
    def segment_size_smooth(self, value: Optional[str]):
        pulumi.set(self, "segment_size_smooth", value)

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @smooth.setter
    def smooth(self, value: Optional[bool]):
        pulumi.set(self, "smooth", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdVodArgs:
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if dash is not None:
            pulumi.set(__self__, "dash", dash)
        if hds is not None:
            pulumi.set(__self__, "hds", hds)
        if hls is not None:
            pulumi.set(__self__, "hls", hls)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            pulumi.set(__self__, "segment_duration_dash", segment_duration_dash)
        if segment_duration_hds is not None:
            pulumi.set(__self__, "segment_duration_hds", segment_duration_hds)
        if segment_duration_hls is not None:
            pulumi.set(__self__, "segment_duration_hls", segment_duration_hls)
        if segment_duration_smooth is not None:
            pulumi.set(__self__, "segment_duration_smooth", segment_duration_smooth)
        if segment_size_dash is not None:
            pulumi.set(__self__, "segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            pulumi.set(__self__, "segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            pulumi.set(__self__, "segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            pulumi.set(__self__, "segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            pulumi.set(__self__, "smooth", smooth)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @catalog_size.setter
    def catalog_size(self, value: Optional[str]):
        pulumi.set(self, "catalog_size", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @dash.setter
    def dash(self, value: Optional[bool]):
        pulumi.set(self, "dash", value)

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @hds.setter
    def hds(self, value: Optional[bool]):
        pulumi.set(self, "hds", value)

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @hls.setter
    def hls(self, value: Optional[bool]):
        pulumi.set(self, "hls", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @popularity_distribution.setter
    def popularity_distribution(self, value: Optional[str]):
        pulumi.set(self, "popularity_distribution", value)

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @segment_duration_dash.setter
    def segment_duration_dash(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_dash", value)

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @segment_duration_hds.setter
    def segment_duration_hds(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_hds", value)

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @segment_duration_hls.setter
    def segment_duration_hls(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_hls", value)

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @segment_duration_smooth.setter
    def segment_duration_smooth(self, value: Optional[str]):
        pulumi.set(self, "segment_duration_smooth", value)

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @segment_size_dash.setter
    def segment_size_dash(self, value: Optional[str]):
        pulumi.set(self, "segment_size_dash", value)

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @segment_size_hds.setter
    def segment_size_hds(self, value: Optional[str]):
        pulumi.set(self, "segment_size_hds", value)

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @segment_size_hls.setter
    def segment_size_hls(self, value: Optional[str]):
        pulumi.set(self, "segment_size_hls", value)

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @segment_size_smooth.setter
    def segment_size_smooth(self, value: Optional[str]):
        pulumi.set(self, "segment_size_smooth", value)

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @smooth.setter
    def smooth(self, value: Optional[bool]):
        pulumi.set(self, "smooth", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentPrePositionArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 first_location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 second_location: Optional[str] = None,
                 source_type: Optional[str] = None,
                 targets: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if first_location is not None:
            pulumi.set(__self__, "first_location", first_location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if second_location is not None:
            pulumi.set(__self__, "second_location", second_location)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="firstLocation")
    def first_location(self) -> Optional[str]:
        return pulumi.get(self, "first_location")

    @first_location.setter
    def first_location(self, value: Optional[str]):
        pulumi.set(self, "first_location", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="secondLocation")
    def second_location(self) -> Optional[str]:
        return pulumi.get(self, "second_location")

    @second_location.setter
    def second_location(self, value: Optional[str]):
        pulumi.set(self, "second_location", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[str]:
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[str]):
        pulumi.set(self, "targets", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentTargetingProtectionArgs:
    def __init__(__self__, *,
                 countries: Optional[Sequence[str]] = None,
                 dmas: Optional[Sequence[str]] = None,
                 enable_geo_protection: Optional[bool] = None,
                 enable_geo_redirect_on_deny: Optional[bool] = None,
                 enable_ip_protection: Optional[bool] = None,
                 enable_ip_redirect_on_deny: Optional[bool] = None,
                 enable_referrer_protection: Optional[bool] = None,
                 enable_referrer_redirect_on_deny: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 geo_protection_mode: Optional[str] = None,
                 geo_protection_title: Optional[str] = None,
                 geo_redirect_url: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 ip_protection_mode: Optional[str] = None,
                 ip_protection_title: Optional[str] = None,
                 ip_redirect_url: Optional[str] = None,
                 locked: Optional[bool] = None,
                 override_ip_addresses: Optional[Sequence[str]] = None,
                 referrer_domains: Optional[Sequence[str]] = None,
                 referrer_protection_mode: Optional[str] = None,
                 referrer_protection_title: Optional[str] = None,
                 referrer_redirect_url: Optional[str] = None,
                 regions: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if dmas is not None:
            pulumi.set(__self__, "dmas", dmas)
        if enable_geo_protection is not None:
            pulumi.set(__self__, "enable_geo_protection", enable_geo_protection)
        if enable_geo_redirect_on_deny is not None:
            pulumi.set(__self__, "enable_geo_redirect_on_deny", enable_geo_redirect_on_deny)
        if enable_ip_protection is not None:
            pulumi.set(__self__, "enable_ip_protection", enable_ip_protection)
        if enable_ip_redirect_on_deny is not None:
            pulumi.set(__self__, "enable_ip_redirect_on_deny", enable_ip_redirect_on_deny)
        if enable_referrer_protection is not None:
            pulumi.set(__self__, "enable_referrer_protection", enable_referrer_protection)
        if enable_referrer_redirect_on_deny is not None:
            pulumi.set(__self__, "enable_referrer_redirect_on_deny", enable_referrer_redirect_on_deny)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if geo_protection_mode is not None:
            pulumi.set(__self__, "geo_protection_mode", geo_protection_mode)
        if geo_protection_title is not None:
            pulumi.set(__self__, "geo_protection_title", geo_protection_title)
        if geo_redirect_url is not None:
            pulumi.set(__self__, "geo_redirect_url", geo_redirect_url)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ip_protection_mode is not None:
            pulumi.set(__self__, "ip_protection_mode", ip_protection_mode)
        if ip_protection_title is not None:
            pulumi.set(__self__, "ip_protection_title", ip_protection_title)
        if ip_redirect_url is not None:
            pulumi.set(__self__, "ip_redirect_url", ip_redirect_url)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if override_ip_addresses is not None:
            pulumi.set(__self__, "override_ip_addresses", override_ip_addresses)
        if referrer_domains is not None:
            pulumi.set(__self__, "referrer_domains", referrer_domains)
        if referrer_protection_mode is not None:
            pulumi.set(__self__, "referrer_protection_mode", referrer_protection_mode)
        if referrer_protection_title is not None:
            pulumi.set(__self__, "referrer_protection_title", referrer_protection_title)
        if referrer_redirect_url is not None:
            pulumi.set(__self__, "referrer_redirect_url", referrer_redirect_url)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "countries", value)

    @property
    @pulumi.getter
    def dmas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dmas")

    @dmas.setter
    def dmas(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "dmas", value)

    @property
    @pulumi.getter(name="enableGeoProtection")
    def enable_geo_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_geo_protection")

    @enable_geo_protection.setter
    def enable_geo_protection(self, value: Optional[bool]):
        pulumi.set(self, "enable_geo_protection", value)

    @property
    @pulumi.getter(name="enableGeoRedirectOnDeny")
    def enable_geo_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_geo_redirect_on_deny")

    @enable_geo_redirect_on_deny.setter
    def enable_geo_redirect_on_deny(self, value: Optional[bool]):
        pulumi.set(self, "enable_geo_redirect_on_deny", value)

    @property
    @pulumi.getter(name="enableIpProtection")
    def enable_ip_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_protection")

    @enable_ip_protection.setter
    def enable_ip_protection(self, value: Optional[bool]):
        pulumi.set(self, "enable_ip_protection", value)

    @property
    @pulumi.getter(name="enableIpRedirectOnDeny")
    def enable_ip_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_redirect_on_deny")

    @enable_ip_redirect_on_deny.setter
    def enable_ip_redirect_on_deny(self, value: Optional[bool]):
        pulumi.set(self, "enable_ip_redirect_on_deny", value)

    @property
    @pulumi.getter(name="enableReferrerProtection")
    def enable_referrer_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_referrer_protection")

    @enable_referrer_protection.setter
    def enable_referrer_protection(self, value: Optional[bool]):
        pulumi.set(self, "enable_referrer_protection", value)

    @property
    @pulumi.getter(name="enableReferrerRedirectOnDeny")
    def enable_referrer_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_referrer_redirect_on_deny")

    @enable_referrer_redirect_on_deny.setter
    def enable_referrer_redirect_on_deny(self, value: Optional[bool]):
        pulumi.set(self, "enable_referrer_redirect_on_deny", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="geoProtectionMode")
    def geo_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "geo_protection_mode")

    @geo_protection_mode.setter
    def geo_protection_mode(self, value: Optional[str]):
        pulumi.set(self, "geo_protection_mode", value)

    @property
    @pulumi.getter(name="geoProtectionTitle")
    def geo_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "geo_protection_title")

    @geo_protection_title.setter
    def geo_protection_title(self, value: Optional[str]):
        pulumi.set(self, "geo_protection_title", value)

    @property
    @pulumi.getter(name="geoRedirectUrl")
    def geo_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "geo_redirect_url")

    @geo_redirect_url.setter
    def geo_redirect_url(self, value: Optional[str]):
        pulumi.set(self, "geo_redirect_url", value)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_addresses", value)

    @property
    @pulumi.getter(name="ipProtectionMode")
    def ip_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "ip_protection_mode")

    @ip_protection_mode.setter
    def ip_protection_mode(self, value: Optional[str]):
        pulumi.set(self, "ip_protection_mode", value)

    @property
    @pulumi.getter(name="ipProtectionTitle")
    def ip_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "ip_protection_title")

    @ip_protection_title.setter
    def ip_protection_title(self, value: Optional[str]):
        pulumi.set(self, "ip_protection_title", value)

    @property
    @pulumi.getter(name="ipRedirectUrl")
    def ip_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "ip_redirect_url")

    @ip_redirect_url.setter
    def ip_redirect_url(self, value: Optional[str]):
        pulumi.set(self, "ip_redirect_url", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="overrideIpAddresses")
    def override_ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "override_ip_addresses")

    @override_ip_addresses.setter
    def override_ip_addresses(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "override_ip_addresses", value)

    @property
    @pulumi.getter(name="referrerDomains")
    def referrer_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "referrer_domains")

    @referrer_domains.setter
    def referrer_domains(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "referrer_domains", value)

    @property
    @pulumi.getter(name="referrerProtectionMode")
    def referrer_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "referrer_protection_mode")

    @referrer_protection_mode.setter
    def referrer_protection_mode(self, value: Optional[str]):
        pulumi.set(self, "referrer_protection_mode", value)

    @property
    @pulumi.getter(name="referrerProtectionTitle")
    def referrer_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "referrer_protection_title")

    @referrer_protection_title.setter
    def referrer_protection_title(self, value: Optional[str]):
        pulumi.set(self, "referrer_protection_title", value)

    @property
    @pulumi.getter(name="referrerRedirectUrl")
    def referrer_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "referrer_redirect_url")

    @referrer_redirect_url.setter
    def referrer_redirect_url(self, value: Optional[str]):
        pulumi.set(self, "referrer_redirect_url", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCorsSupportArgs:
    def __init__(__self__, *,
                 allow_credentials: Optional[bool] = None,
                 allow_headers: Optional[str] = None,
                 allow_origins: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 expose_headers: Optional[Sequence[str]] = None,
                 headers: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 methods: Optional[Sequence[str]] = None,
                 origins: Optional[Sequence[str]] = None,
                 preflight_max_age: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_credentials is not None:
            pulumi.set(__self__, "allow_credentials", allow_credentials)
        if allow_headers is not None:
            pulumi.set(__self__, "allow_headers", allow_headers)
        if allow_origins is not None:
            pulumi.set(__self__, "allow_origins", allow_origins)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expose_headers is not None:
            pulumi.set(__self__, "expose_headers", expose_headers)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)
        if preflight_max_age is not None:
            pulumi.set(__self__, "preflight_max_age", preflight_max_age)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "allow_credentials")

    @allow_credentials.setter
    def allow_credentials(self, value: Optional[bool]):
        pulumi.set(self, "allow_credentials", value)

    @property
    @pulumi.getter(name="allowHeaders")
    def allow_headers(self) -> Optional[str]:
        return pulumi.get(self, "allow_headers")

    @allow_headers.setter
    def allow_headers(self, value: Optional[str]):
        pulumi.set(self, "allow_headers", value)

    @property
    @pulumi.getter(name="allowOrigins")
    def allow_origins(self) -> Optional[str]:
        return pulumi.get(self, "allow_origins")

    @allow_origins.setter
    def allow_origins(self, value: Optional[str]):
        pulumi.set(self, "allow_origins", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "expose_headers")

    @expose_headers.setter
    def expose_headers(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "expose_headers", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "origins")

    @origins.setter
    def origins(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "origins", value)

    @property
    @pulumi.getter(name="preflightMaxAge")
    def preflight_max_age(self) -> Optional[str]:
        return pulumi.get(self, "preflight_max_age")

    @preflight_max_age.setter
    def preflight_max_age(self, value: Optional[str]):
        pulumi.set(self, "preflight_max_age", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueArgs'] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueArgs']:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueArgs']):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCustomBehaviorArgs:
    def __init__(__self__, *,
                 behavior_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior_id is not None:
            pulumi.set(__self__, "behavior_id", behavior_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="behaviorId")
    def behavior_id(self) -> Optional[str]:
        return pulumi.get(self, "behavior_id")

    @behavior_id.setter
    def behavior_id(self, value: Optional[str]):
        pulumi.set(self, "behavior_id", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDatastreamArgs:
    def __init__(__self__, *,
                 beacon_stream_title: Optional[str] = None,
                 collect_midgress_traffic: Optional[bool] = None,
                 datastream_ids: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 log_enabled: Optional[bool] = None,
                 log_stream_names: Optional[Sequence[str]] = None,
                 log_stream_title: Optional[str] = None,
                 sampling_percentage: Optional[int] = None,
                 stream_type: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if beacon_stream_title is not None:
            pulumi.set(__self__, "beacon_stream_title", beacon_stream_title)
        if collect_midgress_traffic is not None:
            pulumi.set(__self__, "collect_midgress_traffic", collect_midgress_traffic)
        if datastream_ids is not None:
            pulumi.set(__self__, "datastream_ids", datastream_ids)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if log_enabled is not None:
            pulumi.set(__self__, "log_enabled", log_enabled)
        if log_stream_names is not None:
            pulumi.set(__self__, "log_stream_names", log_stream_names)
        if log_stream_title is not None:
            pulumi.set(__self__, "log_stream_title", log_stream_title)
        if sampling_percentage is not None:
            pulumi.set(__self__, "sampling_percentage", sampling_percentage)
        if stream_type is not None:
            pulumi.set(__self__, "stream_type", stream_type)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="beaconStreamTitle")
    def beacon_stream_title(self) -> Optional[str]:
        return pulumi.get(self, "beacon_stream_title")

    @beacon_stream_title.setter
    def beacon_stream_title(self, value: Optional[str]):
        pulumi.set(self, "beacon_stream_title", value)

    @property
    @pulumi.getter(name="collectMidgressTraffic")
    def collect_midgress_traffic(self) -> Optional[bool]:
        return pulumi.get(self, "collect_midgress_traffic")

    @collect_midgress_traffic.setter
    def collect_midgress_traffic(self, value: Optional[bool]):
        pulumi.set(self, "collect_midgress_traffic", value)

    @property
    @pulumi.getter(name="datastreamIds")
    def datastream_ids(self) -> Optional[str]:
        return pulumi.get(self, "datastream_ids")

    @datastream_ids.setter
    def datastream_ids(self, value: Optional[str]):
        pulumi.set(self, "datastream_ids", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="logEnabled")
    def log_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "log_enabled")

    @log_enabled.setter
    def log_enabled(self, value: Optional[bool]):
        pulumi.set(self, "log_enabled", value)

    @property
    @pulumi.getter(name="logStreamNames")
    def log_stream_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "log_stream_names")

    @log_stream_names.setter
    def log_stream_names(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "log_stream_names", value)

    @property
    @pulumi.getter(name="logStreamTitle")
    def log_stream_title(self) -> Optional[str]:
        return pulumi.get(self, "log_stream_title")

    @log_stream_title.setter
    def log_stream_title(self, value: Optional[str]):
        pulumi.set(self, "log_stream_title", value)

    @property
    @pulumi.getter(name="samplingPercentage")
    def sampling_percentage(self) -> Optional[int]:
        return pulumi.get(self, "sampling_percentage")

    @sampling_percentage.setter
    def sampling_percentage(self, value: Optional[int]):
        pulumi.set(self, "sampling_percentage", value)

    @property
    @pulumi.getter(name="streamType")
    def stream_type(self) -> Optional[str]:
        return pulumi.get(self, "stream_type")

    @stream_type.setter
    def stream_type(self, value: Optional[str]):
        pulumi.set(self, "stream_type", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpArgs:
    def __init__(__self__, *,
                 anonymous: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 gwenabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 namespace_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tlsenabled: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 wsenabled: Optional[bool] = None):
        if anonymous is not None:
            pulumi.set(__self__, "anonymous", anonymous)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if gwenabled is not None:
            pulumi.set(__self__, "gwenabled", gwenabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tlsenabled is not None:
            pulumi.set(__self__, "tlsenabled", tlsenabled)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if wsenabled is not None:
            pulumi.set(__self__, "wsenabled", wsenabled)

    @property
    @pulumi.getter
    def anonymous(self) -> Optional[bool]:
        return pulumi.get(self, "anonymous")

    @anonymous.setter
    def anonymous(self, value: Optional[bool]):
        pulumi.set(self, "anonymous", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def gwenabled(self) -> Optional[bool]:
        return pulumi.get(self, "gwenabled")

    @gwenabled.setter
    def gwenabled(self, value: Optional[bool]):
        pulumi.set(self, "gwenabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[str]:
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: Optional[str]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def tlsenabled(self) -> Optional[bool]:
        return pulumi.get(self, "tlsenabled")

    @tlsenabled.setter
    def tlsenabled(self, value: Optional[bool]):
        pulumi.set(self, "tlsenabled", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def wsenabled(self) -> Optional[bool]:
        return pulumi.get(self, "wsenabled")

    @wsenabled.setter
    def wsenabled(self, value: Optional[bool]):
        pulumi.set(self, "wsenabled", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthHmacTransformationArgs:
    def __init__(__self__, *,
                 hash_conversion_algorithm: Optional[str] = None,
                 hash_conversion_key: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if hash_conversion_algorithm is not None:
            pulumi.set(__self__, "hash_conversion_algorithm", hash_conversion_algorithm)
        if hash_conversion_key is not None:
            pulumi.set(__self__, "hash_conversion_key", hash_conversion_key)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="hashConversionAlgorithm")
    def hash_conversion_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hash_conversion_algorithm")

    @hash_conversion_algorithm.setter
    def hash_conversion_algorithm(self, value: Optional[str]):
        pulumi.set(self, "hash_conversion_algorithm", value)

    @property
    @pulumi.getter(name="hashConversionKey")
    def hash_conversion_key(self) -> Optional[str]:
        return pulumi.get(self, "hash_conversion_key")

    @hash_conversion_key.setter
    def hash_conversion_key(self, value: Optional[str]):
        pulumi.set(self, "hash_conversion_key", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthRegexTransformationArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if regex_pattern is not None:
            pulumi.set(__self__, "regex_pattern", regex_pattern)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @regex_pattern.setter
    def regex_pattern(self, value: Optional[str]):
        pulumi.set(self, "regex_pattern", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthSubstringTransformationArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 substring_end: Optional[str] = None,
                 substring_start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if substring_end is not None:
            pulumi.set(__self__, "substring_end", substring_end)
        if substring_start is not None:
            pulumi.set(__self__, "substring_start", substring_start)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="substringEnd")
    def substring_end(self) -> Optional[str]:
        return pulumi.get(self, "substring_end")

    @substring_end.setter
    def substring_end(self, value: Optional[str]):
        pulumi.set(self, "substring_end", value)

    @property
    @pulumi.getter(name="substringStart")
    def substring_start(self) -> Optional[str]:
        return pulumi.get(self, "substring_start")

    @substring_start.setter
    def substring_start(self, value: Optional[str]):
        pulumi.set(self, "substring_start", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthVariableExtractorArgs:
    def __init__(__self__, *,
                 certificate_field: Optional[str] = None,
                 dcp_mutual_auth_processing_variable_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if certificate_field is not None:
            pulumi.set(__self__, "certificate_field", certificate_field)
        if dcp_mutual_auth_processing_variable_id is not None:
            pulumi.set(__self__, "dcp_mutual_auth_processing_variable_id", dcp_mutual_auth_processing_variable_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="certificateField")
    def certificate_field(self) -> Optional[str]:
        return pulumi.get(self, "certificate_field")

    @certificate_field.setter
    def certificate_field(self, value: Optional[str]):
        pulumi.set(self, "certificate_field", value)

    @property
    @pulumi.getter(name="dcpMutualAuthProcessingVariableId")
    def dcp_mutual_auth_processing_variable_id(self) -> Optional[str]:
        return pulumi.get(self, "dcp_mutual_auth_processing_variable_id")

    @dcp_mutual_auth_processing_variable_id.setter
    def dcp_mutual_auth_processing_variable_id(self, value: Optional[str]):
        pulumi.set(self, "dcp_mutual_auth_processing_variable_id", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpDefaultAuthzGroupsArgs:
    def __init__(__self__, *,
                 group_names: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if group_names is not None:
            pulumi.set(__self__, "group_names", group_names)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="groupNames")
    def group_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_names")

    @group_names.setter
    def group_names(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "group_names", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpDevRelationsArgs:
    def __init__(__self__, *,
                 custom_values: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 locked: Optional[bool] = None,
                 path: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_values is not None:
            pulumi.set(__self__, "custom_values", custom_values)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customValues")
    def custom_values(self) -> Optional[bool]:
        return pulumi.get(self, "custom_values")

    @custom_values.setter
    def custom_values(self, value: Optional[bool]):
        pulumi.set(self, "custom_values", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpRealTimeAuthArgs:
    def __init__(__self__, *,
                 extract_hostname: Optional[bool] = None,
                 extract_jurisdiction: Optional[bool] = None,
                 extract_namespace: Optional[bool] = None,
                 hostname_claim: Optional[str] = None,
                 jurisdiction_claim: Optional[str] = None,
                 locked: Optional[bool] = None,
                 namespace_claim: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if extract_hostname is not None:
            pulumi.set(__self__, "extract_hostname", extract_hostname)
        if extract_jurisdiction is not None:
            pulumi.set(__self__, "extract_jurisdiction", extract_jurisdiction)
        if extract_namespace is not None:
            pulumi.set(__self__, "extract_namespace", extract_namespace)
        if hostname_claim is not None:
            pulumi.set(__self__, "hostname_claim", hostname_claim)
        if jurisdiction_claim is not None:
            pulumi.set(__self__, "jurisdiction_claim", jurisdiction_claim)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if namespace_claim is not None:
            pulumi.set(__self__, "namespace_claim", namespace_claim)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="extractHostname")
    def extract_hostname(self) -> Optional[bool]:
        return pulumi.get(self, "extract_hostname")

    @extract_hostname.setter
    def extract_hostname(self, value: Optional[bool]):
        pulumi.set(self, "extract_hostname", value)

    @property
    @pulumi.getter(name="extractJurisdiction")
    def extract_jurisdiction(self) -> Optional[bool]:
        return pulumi.get(self, "extract_jurisdiction")

    @extract_jurisdiction.setter
    def extract_jurisdiction(self, value: Optional[bool]):
        pulumi.set(self, "extract_jurisdiction", value)

    @property
    @pulumi.getter(name="extractNamespace")
    def extract_namespace(self) -> Optional[bool]:
        return pulumi.get(self, "extract_namespace")

    @extract_namespace.setter
    def extract_namespace(self, value: Optional[bool]):
        pulumi.set(self, "extract_namespace", value)

    @property
    @pulumi.getter(name="hostnameClaim")
    def hostname_claim(self) -> Optional[str]:
        return pulumi.get(self, "hostname_claim")

    @hostname_claim.setter
    def hostname_claim(self, value: Optional[str]):
        pulumi.set(self, "hostname_claim", value)

    @property
    @pulumi.getter(name="jurisdictionClaim")
    def jurisdiction_claim(self) -> Optional[str]:
        return pulumi.get(self, "jurisdiction_claim")

    @jurisdiction_claim.setter
    def jurisdiction_claim(self, value: Optional[str]):
        pulumi.set(self, "jurisdiction_claim", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="namespaceClaim")
    def namespace_claim(self) -> Optional[str]:
        return pulumi.get(self, "namespace_claim")

    @namespace_claim.setter
    def namespace_claim(self, value: Optional[str]):
        pulumi.set(self, "namespace_claim", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDeliveryReceiptArgs:
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDenyAccessArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 reason: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[str]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDenyDirectFailoverAccessArgs:
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicCacheIdArgs:
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if elements is not None:
            pulumi.set(__self__, "elements", elements)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicHeaderArgs:
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if elements is not None:
            pulumi.set(__self__, "elements", elements)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDnsAsyncRefreshArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[str]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDnsPrefreshArgs:
    def __init__(__self__, *,
                 delay: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def delay(self) -> Optional[str]:
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[str]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[str]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDowngradeProtocolArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDownloadCompleteMarkerArgs:
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDownloadNotificationArgs:
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDownstreamCacheArgs:
    def __init__(__self__, *,
                 allow_behavior: Optional[str] = None,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 send_headers: Optional[str] = None,
                 send_private: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_behavior is not None:
            pulumi.set(__self__, "allow_behavior", allow_behavior)
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if send_headers is not None:
            pulumi.set(__self__, "send_headers", send_headers)
        if send_private is not None:
            pulumi.set(__self__, "send_private", send_private)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowBehavior")
    def allow_behavior(self) -> Optional[str]:
        return pulumi.get(self, "allow_behavior")

    @allow_behavior.setter
    def allow_behavior(self, value: Optional[str]):
        pulumi.set(self, "allow_behavior", value)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[str]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="sendHeaders")
    def send_headers(self) -> Optional[str]:
        return pulumi.get(self, "send_headers")

    @send_headers.setter
    def send_headers(self, value: Optional[str]):
        pulumi.set(self, "send_headers", value)

    @property
    @pulumi.getter(name="sendPrivate")
    def send_private(self) -> Optional[bool]:
        return pulumi.get(self, "send_private")

    @send_private.setter
    def send_private(self, value: Optional[bool]):
        pulumi.set(self, "send_private", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[str]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationOverrideArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 throughput: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def throughput(self) -> Optional[str]:
        return pulumi.get(self, "throughput")

    @throughput.setter
    def throughput(self, value: Optional[str]):
        pulumi.set(self, "throughput", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDynamicWebContentArgs:
    def __init__(__self__, *,
                 image_compression: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 prefetch: Optional[bool] = None,
                 real_user_monitoring: Optional[bool] = None,
                 sure_route: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if image_compression is not None:
            pulumi.set(__self__, "image_compression", image_compression)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if prefetch is not None:
            pulumi.set(__self__, "prefetch", prefetch)
        if real_user_monitoring is not None:
            pulumi.set(__self__, "real_user_monitoring", real_user_monitoring)
        if sure_route is not None:
            pulumi.set(__self__, "sure_route", sure_route)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="imageCompression")
    def image_compression(self) -> Optional[bool]:
        return pulumi.get(self, "image_compression")

    @image_compression.setter
    def image_compression(self, value: Optional[bool]):
        pulumi.set(self, "image_compression", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def prefetch(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch")

    @prefetch.setter
    def prefetch(self, value: Optional[bool]):
        pulumi.set(self, "prefetch", value)

    @property
    @pulumi.getter(name="realUserMonitoring")
    def real_user_monitoring(self) -> Optional[bool]:
        return pulumi.get(self, "real_user_monitoring")

    @real_user_monitoring.setter
    def real_user_monitoring(self, value: Optional[bool]):
        pulumi.set(self, "real_user_monitoring", value)

    @property
    @pulumi.getter(name="sureRoute")
    def sure_route(self) -> Optional[bool]:
        return pulumi.get(self, "sure_route")

    @sure_route.setter
    def sure_route(self, value: Optional[bool]):
        pulumi.set(self, "sure_route", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEcmsBulkUploadArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatabaseArgs:
    def __init__(__self__, *,
                 database: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if database is not None:
            pulumi.set(__self__, "database", database)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if regex_pattern is not None:
            pulumi.set(__self__, "regex_pattern", regex_pattern)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @extract_location.setter
    def extract_location(self, value: Optional[str]):
        pulumi.set(self, "extract_location", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @query_parameter_name.setter
    def query_parameter_name(self, value: Optional[str]):
        pulumi.set(self, "query_parameter_name", value)

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @regex_pattern.setter
    def regex_pattern(self, value: Optional[str]):
        pulumi.set(self, "regex_pattern", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatasetArgs:
    def __init__(__self__, *,
                 dataset: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if dataset is not None:
            pulumi.set(__self__, "dataset", dataset)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if regex_pattern is not None:
            pulumi.set(__self__, "regex_pattern", regex_pattern)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[str]:
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[str]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @extract_location.setter
    def extract_location(self, value: Optional[str]):
        pulumi.set(self, "extract_location", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @query_parameter_name.setter
    def query_parameter_name(self, value: Optional[str]):
        pulumi.set(self, "query_parameter_name", value)

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @regex_pattern.setter
    def regex_pattern(self, value: Optional[str]):
        pulumi.set(self, "regex_pattern", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEcmsObjectKeyArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 regex: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[str]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeConnectArgs:
    def __init__(__self__, *,
                 aggregate_lines: Optional[str] = None,
                 aggregate_size: Optional[str] = None,
                 aggregate_time: Optional[str] = None,
                 api_connector: Optional[str] = None,
                 api_data_elements: Optional[Sequence[str]] = None,
                 destination_hostname: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 override_aggregate_settings: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if aggregate_lines is not None:
            pulumi.set(__self__, "aggregate_lines", aggregate_lines)
        if aggregate_size is not None:
            pulumi.set(__self__, "aggregate_size", aggregate_size)
        if aggregate_time is not None:
            pulumi.set(__self__, "aggregate_time", aggregate_time)
        if api_connector is not None:
            pulumi.set(__self__, "api_connector", api_connector)
        if api_data_elements is not None:
            pulumi.set(__self__, "api_data_elements", api_data_elements)
        if destination_hostname is not None:
            pulumi.set(__self__, "destination_hostname", destination_hostname)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if override_aggregate_settings is not None:
            pulumi.set(__self__, "override_aggregate_settings", override_aggregate_settings)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="aggregateLines")
    def aggregate_lines(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_lines")

    @aggregate_lines.setter
    def aggregate_lines(self, value: Optional[str]):
        pulumi.set(self, "aggregate_lines", value)

    @property
    @pulumi.getter(name="aggregateSize")
    def aggregate_size(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_size")

    @aggregate_size.setter
    def aggregate_size(self, value: Optional[str]):
        pulumi.set(self, "aggregate_size", value)

    @property
    @pulumi.getter(name="aggregateTime")
    def aggregate_time(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_time")

    @aggregate_time.setter
    def aggregate_time(self, value: Optional[str]):
        pulumi.set(self, "aggregate_time", value)

    @property
    @pulumi.getter(name="apiConnector")
    def api_connector(self) -> Optional[str]:
        return pulumi.get(self, "api_connector")

    @api_connector.setter
    def api_connector(self, value: Optional[str]):
        pulumi.set(self, "api_connector", value)

    @property
    @pulumi.getter(name="apiDataElements")
    def api_data_elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "api_data_elements")

    @api_data_elements.setter
    def api_data_elements(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "api_data_elements", value)

    @property
    @pulumi.getter(name="destinationHostname")
    def destination_hostname(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname")

    @destination_hostname.setter
    def destination_hostname(self, value: Optional[str]):
        pulumi.set(self, "destination_hostname", value)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @destination_path.setter
    def destination_path(self, value: Optional[str]):
        pulumi.set(self, "destination_path", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="overrideAggregateSettings")
    def override_aggregate_settings(self) -> Optional[bool]:
        return pulumi.get(self, "override_aggregate_settings")

    @override_aggregate_settings.setter
    def override_aggregate_settings(self, value: Optional[bool]):
        pulumi.set(self, "override_aggregate_settings", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingAdvancedArgs:
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if xml is not None:
            pulumi.set(__self__, "xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")

    @xml.setter
    def xml(self, value: Optional[str]):
        pulumi.set(self, "xml", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterArgs:
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 description: Optional[str] = None,
                 enable_failover: Optional[bool] = None,
                 failover_rules: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs']] = None,
                 failover_title: Optional[str] = None,
                 hostname: Optional[str] = None,
                 ip: Optional[str] = None,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_failover is not None:
            pulumi.set(__self__, "enable_failover", enable_failover)
        if failover_rules is not None:
            pulumi.set(__self__, "failover_rules", failover_rules)
        if failover_title is not None:
            pulumi.set(__self__, "failover_title", failover_title)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[str]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableFailover")
    def enable_failover(self) -> Optional[bool]:
        return pulumi.get(self, "enable_failover")

    @enable_failover.setter
    def enable_failover(self, value: Optional[bool]):
        pulumi.set(self, "enable_failover", value)

    @property
    @pulumi.getter(name="failoverRules")
    def failover_rules(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs']]:
        return pulumi.get(self, "failover_rules")

    @failover_rules.setter
    def failover_rules(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs']]):
        pulumi.set(self, "failover_rules", value)

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @failover_title.setter
    def failover_title(self, value: Optional[str]):
        pulumi.set(self, "failover_title", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: Optional[str]):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs:
    def __init__(__self__, *,
                 absolute_path: Optional[bool] = None,
                 context_root: Optional[str] = None,
                 failover_hostname: Optional[str] = None,
                 modify_request: Optional[bool] = None,
                 override_hostname: Optional[bool] = None):
        if absolute_path is not None:
            pulumi.set(__self__, "absolute_path", absolute_path)
        if context_root is not None:
            pulumi.set(__self__, "context_root", context_root)
        if failover_hostname is not None:
            pulumi.set(__self__, "failover_hostname", failover_hostname)
        if modify_request is not None:
            pulumi.set(__self__, "modify_request", modify_request)
        if override_hostname is not None:
            pulumi.set(__self__, "override_hostname", override_hostname)

    @property
    @pulumi.getter(name="absolutePath")
    def absolute_path(self) -> Optional[bool]:
        return pulumi.get(self, "absolute_path")

    @absolute_path.setter
    def absolute_path(self, value: Optional[bool]):
        pulumi.set(self, "absolute_path", value)

    @property
    @pulumi.getter(name="contextRoot")
    def context_root(self) -> Optional[str]:
        return pulumi.get(self, "context_root")

    @context_root.setter
    def context_root(self, value: Optional[str]):
        pulumi.set(self, "context_root", value)

    @property
    @pulumi.getter(name="failoverHostname")
    def failover_hostname(self) -> Optional[str]:
        return pulumi.get(self, "failover_hostname")

    @failover_hostname.setter
    def failover_hostname(self, value: Optional[str]):
        pulumi.set(self, "failover_hostname", value)

    @property
    @pulumi.getter(name="modifyRequest")
    def modify_request(self) -> Optional[bool]:
        return pulumi.get(self, "modify_request")

    @modify_request.setter
    def modify_request(self, value: Optional[bool]):
        pulumi.set(self, "modify_request", value)

    @property
    @pulumi.getter(name="overrideHostname")
    def override_hostname(self) -> Optional[bool]:
        return pulumi.get(self, "override_hostname")

    @override_hostname.setter
    def override_hostname(self, value: Optional[bool]):
        pulumi.set(self, "override_hostname", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingOriginArgs:
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 description: Optional[str] = None,
                 enable_session_persistence: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_persistence_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_session_persistence is not None:
            pulumi.set(__self__, "enable_session_persistence", enable_session_persistence)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if session_persistence_title is not None:
            pulumi.set(__self__, "session_persistence_title", session_persistence_title)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[str]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableSessionPersistence")
    def enable_session_persistence(self) -> Optional[bool]:
        return pulumi.get(self, "enable_session_persistence")

    @enable_session_persistence.setter
    def enable_session_persistence(self, value: Optional[bool]):
        pulumi.set(self, "enable_session_persistence", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="sessionPersistenceTitle")
    def session_persistence_title(self) -> Optional[str]:
        return pulumi.get(self, "session_persistence_title")

    @session_persistence_title.setter
    def session_persistence_title(self, value: Optional[str]):
        pulumi.set(self, "session_persistence_title", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeOriginAuthorizationArgs:
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 domain: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[str]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorArgs:
    def __init__(__self__, *,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorCloudletPolicyArgs'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @cloudlet_shared_policy.setter
    def cloudlet_shared_policy(self, value: Optional[int]):
        pulumi.set(self, "cloudlet_shared_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @is_shared_policy.setter
    def is_shared_policy(self, value: Optional[bool]):
        pulumi.set(self, "is_shared_policy", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeScapeArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeSideIncludesArgs:
    def __init__(__self__, *,
                 detect_injection: Optional[bool] = None,
                 enable_via_http: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 i18n_charsets: Optional[Sequence[str]] = None,
                 i18n_status: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 pass_client_ip: Optional[bool] = None,
                 pass_set_cookie: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if detect_injection is not None:
            pulumi.set(__self__, "detect_injection", detect_injection)
        if enable_via_http is not None:
            pulumi.set(__self__, "enable_via_http", enable_via_http)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if i18n_charsets is not None:
            pulumi.set(__self__, "i18n_charsets", i18n_charsets)
        if i18n_status is not None:
            pulumi.set(__self__, "i18n_status", i18n_status)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if pass_client_ip is not None:
            pulumi.set(__self__, "pass_client_ip", pass_client_ip)
        if pass_set_cookie is not None:
            pulumi.set(__self__, "pass_set_cookie", pass_set_cookie)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="detectInjection")
    def detect_injection(self) -> Optional[bool]:
        return pulumi.get(self, "detect_injection")

    @detect_injection.setter
    def detect_injection(self, value: Optional[bool]):
        pulumi.set(self, "detect_injection", value)

    @property
    @pulumi.getter(name="enableViaHttp")
    def enable_via_http(self) -> Optional[bool]:
        return pulumi.get(self, "enable_via_http")

    @enable_via_http.setter
    def enable_via_http(self, value: Optional[bool]):
        pulumi.set(self, "enable_via_http", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="i18nCharsets")
    def i18n_charsets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "i18n_charsets")

    @i18n_charsets.setter
    def i18n_charsets(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "i18n_charsets", value)

    @property
    @pulumi.getter(name="i18nStatus")
    def i18n_status(self) -> Optional[bool]:
        return pulumi.get(self, "i18n_status")

    @i18n_status.setter
    def i18n_status(self, value: Optional[bool]):
        pulumi.set(self, "i18n_status", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="passClientIp")
    def pass_client_ip(self) -> Optional[bool]:
        return pulumi.get(self, "pass_client_ip")

    @pass_client_ip.setter
    def pass_client_ip(self, value: Optional[bool]):
        pulumi.set(self, "pass_client_ip", value)

    @property
    @pulumi.getter(name="passSetCookie")
    def pass_set_cookie(self) -> Optional[bool]:
        return pulumi.get(self, "pass_set_cookie")

    @pass_set_cookie.setter
    def pass_set_cookie(self, value: Optional[bool]):
        pulumi.set(self, "pass_set_cookie", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeWorkerArgs:
    def __init__(__self__, *,
                 create_edge_worker: Optional[str] = None,
                 edge_worker_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 resource_tier: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if create_edge_worker is not None:
            pulumi.set(__self__, "create_edge_worker", create_edge_worker)
        if edge_worker_id is not None:
            pulumi.set(__self__, "edge_worker_id", edge_worker_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if resource_tier is not None:
            pulumi.set(__self__, "resource_tier", resource_tier)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="createEdgeWorker")
    def create_edge_worker(self) -> Optional[str]:
        return pulumi.get(self, "create_edge_worker")

    @create_edge_worker.setter
    def create_edge_worker(self, value: Optional[str]):
        pulumi.set(self, "create_edge_worker", value)

    @property
    @pulumi.getter(name="edgeWorkerId")
    def edge_worker_id(self) -> Optional[str]:
        return pulumi.get(self, "edge_worker_id")

    @edge_worker_id.setter
    def edge_worker_id(self, value: Optional[str]):
        pulumi.set(self, "edge_worker_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="resourceTier")
    def resource_tier(self) -> Optional[str]:
        return pulumi.get(self, "resource_tier")

    @resource_tier.setter
    def resource_tier(self, value: Optional[str]):
        pulumi.set(self, "resource_tier", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedAkamaiProtocolArgs:
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[str]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedProxyDetectionArgs:
    def __init__(__self__, *,
                 anonymous_vpn: Optional[str] = None,
                 best_practice_action: Optional[str] = None,
                 best_practice_redirecturl: Optional[str] = None,
                 detect_anonymous_vpn: Optional[bool] = None,
                 detect_anonymous_vpn_action: Optional[str] = None,
                 detect_anonymous_vpn_redirecturl: Optional[str] = None,
                 detect_hosting_provider: Optional[bool] = None,
                 detect_hosting_provider_action: Optional[str] = None,
                 detect_hosting_provider_redirecturl: Optional[str] = None,
                 detect_public_proxy: Optional[bool] = None,
                 detect_public_proxy_action: Optional[str] = None,
                 detect_public_proxy_redirecturl: Optional[str] = None,
                 detect_residential_proxy: Optional[bool] = None,
                 detect_residential_proxy_action: Optional[str] = None,
                 detect_residential_proxy_redirecturl: Optional[str] = None,
                 detect_smart_dns_proxy: Optional[bool] = None,
                 detect_smart_dns_proxy_action: Optional[str] = None,
                 detect_smart_dns_proxy_redirecturl: Optional[str] = None,
                 detect_tor_exit_node: Optional[bool] = None,
                 detect_tor_exit_node_action: Optional[str] = None,
                 detect_tor_exit_node_redirecturl: Optional[str] = None,
                 detect_vpn_data_center: Optional[bool] = None,
                 detect_vpn_data_center_action: Optional[str] = None,
                 detect_vpn_data_center_redirecturl: Optional[str] = None,
                 enable_configuration_mode: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 forward_header_enrichment: Optional[bool] = None,
                 hosting_provider: Optional[str] = None,
                 locked: Optional[bool] = None,
                 public_proxy: Optional[str] = None,
                 residential_proxy: Optional[str] = None,
                 smart_dns_proxy: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tor_exit_node: Optional[str] = None,
                 uuid: Optional[str] = None,
                 vpn_data_center: Optional[str] = None):
        if anonymous_vpn is not None:
            pulumi.set(__self__, "anonymous_vpn", anonymous_vpn)
        if best_practice_action is not None:
            pulumi.set(__self__, "best_practice_action", best_practice_action)
        if best_practice_redirecturl is not None:
            pulumi.set(__self__, "best_practice_redirecturl", best_practice_redirecturl)
        if detect_anonymous_vpn is not None:
            pulumi.set(__self__, "detect_anonymous_vpn", detect_anonymous_vpn)
        if detect_anonymous_vpn_action is not None:
            pulumi.set(__self__, "detect_anonymous_vpn_action", detect_anonymous_vpn_action)
        if detect_anonymous_vpn_redirecturl is not None:
            pulumi.set(__self__, "detect_anonymous_vpn_redirecturl", detect_anonymous_vpn_redirecturl)
        if detect_hosting_provider is not None:
            pulumi.set(__self__, "detect_hosting_provider", detect_hosting_provider)
        if detect_hosting_provider_action is not None:
            pulumi.set(__self__, "detect_hosting_provider_action", detect_hosting_provider_action)
        if detect_hosting_provider_redirecturl is not None:
            pulumi.set(__self__, "detect_hosting_provider_redirecturl", detect_hosting_provider_redirecturl)
        if detect_public_proxy is not None:
            pulumi.set(__self__, "detect_public_proxy", detect_public_proxy)
        if detect_public_proxy_action is not None:
            pulumi.set(__self__, "detect_public_proxy_action", detect_public_proxy_action)
        if detect_public_proxy_redirecturl is not None:
            pulumi.set(__self__, "detect_public_proxy_redirecturl", detect_public_proxy_redirecturl)
        if detect_residential_proxy is not None:
            pulumi.set(__self__, "detect_residential_proxy", detect_residential_proxy)
        if detect_residential_proxy_action is not None:
            pulumi.set(__self__, "detect_residential_proxy_action", detect_residential_proxy_action)
        if detect_residential_proxy_redirecturl is not None:
            pulumi.set(__self__, "detect_residential_proxy_redirecturl", detect_residential_proxy_redirecturl)
        if detect_smart_dns_proxy is not None:
            pulumi.set(__self__, "detect_smart_dns_proxy", detect_smart_dns_proxy)
        if detect_smart_dns_proxy_action is not None:
            pulumi.set(__self__, "detect_smart_dns_proxy_action", detect_smart_dns_proxy_action)
        if detect_smart_dns_proxy_redirecturl is not None:
            pulumi.set(__self__, "detect_smart_dns_proxy_redirecturl", detect_smart_dns_proxy_redirecturl)
        if detect_tor_exit_node is not None:
            pulumi.set(__self__, "detect_tor_exit_node", detect_tor_exit_node)
        if detect_tor_exit_node_action is not None:
            pulumi.set(__self__, "detect_tor_exit_node_action", detect_tor_exit_node_action)
        if detect_tor_exit_node_redirecturl is not None:
            pulumi.set(__self__, "detect_tor_exit_node_redirecturl", detect_tor_exit_node_redirecturl)
        if detect_vpn_data_center is not None:
            pulumi.set(__self__, "detect_vpn_data_center", detect_vpn_data_center)
        if detect_vpn_data_center_action is not None:
            pulumi.set(__self__, "detect_vpn_data_center_action", detect_vpn_data_center_action)
        if detect_vpn_data_center_redirecturl is not None:
            pulumi.set(__self__, "detect_vpn_data_center_redirecturl", detect_vpn_data_center_redirecturl)
        if enable_configuration_mode is not None:
            pulumi.set(__self__, "enable_configuration_mode", enable_configuration_mode)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if forward_header_enrichment is not None:
            pulumi.set(__self__, "forward_header_enrichment", forward_header_enrichment)
        if hosting_provider is not None:
            pulumi.set(__self__, "hosting_provider", hosting_provider)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if public_proxy is not None:
            pulumi.set(__self__, "public_proxy", public_proxy)
        if residential_proxy is not None:
            pulumi.set(__self__, "residential_proxy", residential_proxy)
        if smart_dns_proxy is not None:
            pulumi.set(__self__, "smart_dns_proxy", smart_dns_proxy)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tor_exit_node is not None:
            pulumi.set(__self__, "tor_exit_node", tor_exit_node)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vpn_data_center is not None:
            pulumi.set(__self__, "vpn_data_center", vpn_data_center)

    @property
    @pulumi.getter(name="anonymousVpn")
    def anonymous_vpn(self) -> Optional[str]:
        return pulumi.get(self, "anonymous_vpn")

    @anonymous_vpn.setter
    def anonymous_vpn(self, value: Optional[str]):
        pulumi.set(self, "anonymous_vpn", value)

    @property
    @pulumi.getter(name="bestPracticeAction")
    def best_practice_action(self) -> Optional[str]:
        return pulumi.get(self, "best_practice_action")

    @best_practice_action.setter
    def best_practice_action(self, value: Optional[str]):
        pulumi.set(self, "best_practice_action", value)

    @property
    @pulumi.getter(name="bestPracticeRedirecturl")
    def best_practice_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "best_practice_redirecturl")

    @best_practice_redirecturl.setter
    def best_practice_redirecturl(self, value: Optional[str]):
        pulumi.set(self, "best_practice_redirecturl", value)

    @property
    @pulumi.getter(name="detectAnonymousVpn")
    def detect_anonymous_vpn(self) -> Optional[bool]:
        return pulumi.get(self, "detect_anonymous_vpn")

    @detect_anonymous_vpn.setter
    def detect_anonymous_vpn(self, value: Optional[bool]):
        pulumi.set(self, "detect_anonymous_vpn", value)

    @property
    @pulumi.getter(name="detectAnonymousVpnAction")
    def detect_anonymous_vpn_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_anonymous_vpn_action")

    @detect_anonymous_vpn_action.setter
    def detect_anonymous_vpn_action(self, value: Optional[str]):
        pulumi.set(self, "detect_anonymous_vpn_action", value)

    @property
    @pulumi.getter(name="detectAnonymousVpnRedirecturl")
    def detect_anonymous_vpn_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_anonymous_vpn_redirecturl")

    @detect_anonymous_vpn_redirecturl.setter
    def detect_anonymous_vpn_redirecturl(self, value: Optional[str]):
        pulumi.set(self, "detect_anonymous_vpn_redirecturl", value)

    @property
    @pulumi.getter(name="detectHostingProvider")
    def detect_hosting_provider(self) -> Optional[bool]:
        return pulumi.get(self, "detect_hosting_provider")

    @detect_hosting_provider.setter
    def detect_hosting_provider(self, value: Optional[bool]):
        pulumi.set(self, "detect_hosting_provider", value)

    @property
    @pulumi.getter(name="detectHostingProviderAction")
    def detect_hosting_provider_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_hosting_provider_action")

    @detect_hosting_provider_action.setter
    def detect_hosting_provider_action(self, value: Optional[str]):
        pulumi.set(self, "detect_hosting_provider_action", value)

    @property
    @pulumi.getter(name="detectHostingProviderRedirecturl")
    def detect_hosting_provider_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_hosting_provider_redirecturl")

    @detect_hosting_provider_redirecturl.setter
    def detect_hosting_provider_redirecturl(self, value: Optional[str]):
        pulumi.set(self, "detect_hosting_provider_redirecturl", value)

    @property
    @pulumi.getter(name="detectPublicProxy")
    def detect_public_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_public_proxy")

    @detect_public_proxy.setter
    def detect_public_proxy(self, value: Optional[bool]):
        pulumi.set(self, "detect_public_proxy", value)

    @property
    @pulumi.getter(name="detectPublicProxyAction")
    def detect_public_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_public_proxy_action")

    @detect_public_proxy_action.setter
    def detect_public_proxy_action(self, value: Optional[str]):
        pulumi.set(self, "detect_public_proxy_action", value)

    @property
    @pulumi.getter(name="detectPublicProxyRedirecturl")
    def detect_public_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_public_proxy_redirecturl")

    @detect_public_proxy_redirecturl.setter
    def detect_public_proxy_redirecturl(self, value: Optional[str]):
        pulumi.set(self, "detect_public_proxy_redirecturl", value)

    @property
    @pulumi.getter(name="detectResidentialProxy")
    def detect_residential_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_residential_proxy")

    @detect_residential_proxy.setter
    def detect_residential_proxy(self, value: Optional[bool]):
        pulumi.set(self, "detect_residential_proxy", value)

    @property
    @pulumi.getter(name="detectResidentialProxyAction")
    def detect_residential_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_residential_proxy_action")

    @detect_residential_proxy_action.setter
    def detect_residential_proxy_action(self, value: Optional[str]):
        pulumi.set(self, "detect_residential_proxy_action", value)

    @property
    @pulumi.getter(name="detectResidentialProxyRedirecturl")
    def detect_residential_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_residential_proxy_redirecturl")

    @detect_residential_proxy_redirecturl.setter
    def detect_residential_proxy_redirecturl(self, value: Optional[str]):
        pulumi.set(self, "detect_residential_proxy_redirecturl", value)

    @property
    @pulumi.getter(name="detectSmartDnsProxy")
    def detect_smart_dns_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_smart_dns_proxy")

    @detect_smart_dns_proxy.setter
    def detect_smart_dns_proxy(self, value: Optional[bool]):
        pulumi.set(self, "detect_smart_dns_proxy", value)

    @property
    @pulumi.getter(name="detectSmartDnsProxyAction")
    def detect_smart_dns_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_smart_dns_proxy_action")

    @detect_smart_dns_proxy_action.setter
    def detect_smart_dns_proxy_action(self, value: Optional[str]):
        pulumi.set(self, "detect_smart_dns_proxy_action", value)

    @property
    @pulumi.getter(name="detectSmartDnsProxyRedirecturl")
    def detect_smart_dns_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_smart_dns_proxy_redirecturl")

    @detect_smart_dns_proxy_redirecturl.setter
    def detect_smart_dns_proxy_redirecturl(self, value: Optional[str]):
        pulumi.set(self, "detect_smart_dns_proxy_redirecturl", value)

    @property
    @pulumi.getter(name="detectTorExitNode")
    def detect_tor_exit_node(self) -> Optional[bool]:
        return pulumi.get(self, "detect_tor_exit_node")

    @detect_tor_exit_node.setter
    def detect_tor_exit_node(self, value: Optional[bool]):
        pulumi.set(self, "detect_tor_exit_node", value)

    @property
    @pulumi.getter(name="detectTorExitNodeAction")
    def detect_tor_exit_node_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_tor_exit_node_action")

    @detect_tor_exit_node_action.setter
    def detect_tor_exit_node_action(self, value: Optional[str]):
        pulumi.set(self, "detect_tor_exit_node_action", value)

    @property
    @pulumi.getter(name="detectTorExitNodeRedirecturl")
    def detect_tor_exit_node_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_tor_exit_node_redirecturl")

    @detect_tor_exit_node_redirecturl.setter
    def detect_tor_exit_node_redirecturl(self, value: Optional[str]):
        pulumi.set(self, "detect_tor_exit_node_redirecturl", value)

    @property
    @pulumi.getter(name="detectVpnDataCenter")
    def detect_vpn_data_center(self) -> Optional[bool]:
        return pulumi.get(self, "detect_vpn_data_center")

    @detect_vpn_data_center.setter
    def detect_vpn_data_center(self, value: Optional[bool]):
        pulumi.set(self, "detect_vpn_data_center", value)

    @property
    @pulumi.getter(name="detectVpnDataCenterAction")
    def detect_vpn_data_center_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_vpn_data_center_action")

    @detect_vpn_data_center_action.setter
    def detect_vpn_data_center_action(self, value: Optional[str]):
        pulumi.set(self, "detect_vpn_data_center_action", value)

    @property
    @pulumi.getter(name="detectVpnDataCenterRedirecturl")
    def detect_vpn_data_center_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_vpn_data_center_redirecturl")

    @detect_vpn_data_center_redirecturl.setter
    def detect_vpn_data_center_redirecturl(self, value: Optional[str]):
        pulumi.set(self, "detect_vpn_data_center_redirecturl", value)

    @property
    @pulumi.getter(name="enableConfigurationMode")
    def enable_configuration_mode(self) -> Optional[str]:
        return pulumi.get(self, "enable_configuration_mode")

    @enable_configuration_mode.setter
    def enable_configuration_mode(self, value: Optional[str]):
        pulumi.set(self, "enable_configuration_mode", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="forwardHeaderEnrichment")
    def forward_header_enrichment(self) -> Optional[bool]:
        return pulumi.get(self, "forward_header_enrichment")

    @forward_header_enrichment.setter
    def forward_header_enrichment(self, value: Optional[bool]):
        pulumi.set(self, "forward_header_enrichment", value)

    @property
    @pulumi.getter(name="hostingProvider")
    def hosting_provider(self) -> Optional[str]:
        return pulumi.get(self, "hosting_provider")

    @hosting_provider.setter
    def hosting_provider(self, value: Optional[str]):
        pulumi.set(self, "hosting_provider", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="publicProxy")
    def public_proxy(self) -> Optional[str]:
        return pulumi.get(self, "public_proxy")

    @public_proxy.setter
    def public_proxy(self, value: Optional[str]):
        pulumi.set(self, "public_proxy", value)

    @property
    @pulumi.getter(name="residentialProxy")
    def residential_proxy(self) -> Optional[str]:
        return pulumi.get(self, "residential_proxy")

    @residential_proxy.setter
    def residential_proxy(self, value: Optional[str]):
        pulumi.set(self, "residential_proxy", value)

    @property
    @pulumi.getter(name="smartDnsProxy")
    def smart_dns_proxy(self) -> Optional[str]:
        return pulumi.get(self, "smart_dns_proxy")

    @smart_dns_proxy.setter
    def smart_dns_proxy(self, value: Optional[str]):
        pulumi.set(self, "smart_dns_proxy", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="torExitNode")
    def tor_exit_node(self) -> Optional[str]:
        return pulumi.get(self, "tor_exit_node")

    @tor_exit_node.setter
    def tor_exit_node(self, value: Optional[str]):
        pulumi.set(self, "tor_exit_node", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="vpnDataCenter")
    def vpn_data_center(self) -> Optional[str]:
        return pulumi.get(self, "vpn_data_center")

    @vpn_data_center.setter
    def vpn_data_center(self, value: Optional[str]):
        pulumi.set(self, "vpn_data_center", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEpdForwardHeaderEnrichmentArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFailActionArgs:
    def __init__(__self__, *,
                 action_type: Optional[str] = None,
                 allow_fcm_parent_override: Optional[bool] = None,
                 cex_custom_path: Optional[bool] = None,
                 cex_hostname: Optional[str] = None,
                 cex_path: Optional[str] = None,
                 content_custom_path: Optional[bool] = None,
                 content_hostname: Optional[str] = None,
                 content_path: Optional[str] = None,
                 cp_code: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeArgs'] = None,
                 dynamic_custom_path: Optional[bool] = None,
                 dynamic_method: Optional[str] = None,
                 dynamic_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modify_protocol: Optional[bool] = None,
                 net_storage_hostname: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFailActionNetStorageHostnameArgs'] = None,
                 net_storage_path: Optional[str] = None,
                 preserve_query_string: Optional[bool] = None,
                 protocol: Optional[str] = None,
                 redirect_custom_path: Optional[bool] = None,
                 redirect_hostname: Optional[str] = None,
                 redirect_hostname_type: Optional[str] = None,
                 redirect_method: Optional[int] = None,
                 redirect_path: Optional[str] = None,
                 saas_cname_enabled: Optional[bool] = None,
                 saas_cname_level: Optional[int] = None,
                 saas_cookie: Optional[str] = None,
                 saas_query_string: Optional[str] = None,
                 saas_regex: Optional[str] = None,
                 saas_replace: Optional[str] = None,
                 saas_suffix: Optional[str] = None,
                 saas_type: Optional[str] = None,
                 status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if allow_fcm_parent_override is not None:
            pulumi.set(__self__, "allow_fcm_parent_override", allow_fcm_parent_override)
        if cex_custom_path is not None:
            pulumi.set(__self__, "cex_custom_path", cex_custom_path)
        if cex_hostname is not None:
            pulumi.set(__self__, "cex_hostname", cex_hostname)
        if cex_path is not None:
            pulumi.set(__self__, "cex_path", cex_path)
        if content_custom_path is not None:
            pulumi.set(__self__, "content_custom_path", content_custom_path)
        if content_hostname is not None:
            pulumi.set(__self__, "content_hostname", content_hostname)
        if content_path is not None:
            pulumi.set(__self__, "content_path", content_path)
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if dynamic_custom_path is not None:
            pulumi.set(__self__, "dynamic_custom_path", dynamic_custom_path)
        if dynamic_method is not None:
            pulumi.set(__self__, "dynamic_method", dynamic_method)
        if dynamic_path is not None:
            pulumi.set(__self__, "dynamic_path", dynamic_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if modify_protocol is not None:
            pulumi.set(__self__, "modify_protocol", modify_protocol)
        if net_storage_hostname is not None:
            pulumi.set(__self__, "net_storage_hostname", net_storage_hostname)
        if net_storage_path is not None:
            pulumi.set(__self__, "net_storage_path", net_storage_path)
        if preserve_query_string is not None:
            pulumi.set(__self__, "preserve_query_string", preserve_query_string)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if redirect_custom_path is not None:
            pulumi.set(__self__, "redirect_custom_path", redirect_custom_path)
        if redirect_hostname is not None:
            pulumi.set(__self__, "redirect_hostname", redirect_hostname)
        if redirect_hostname_type is not None:
            pulumi.set(__self__, "redirect_hostname_type", redirect_hostname_type)
        if redirect_method is not None:
            pulumi.set(__self__, "redirect_method", redirect_method)
        if redirect_path is not None:
            pulumi.set(__self__, "redirect_path", redirect_path)
        if saas_cname_enabled is not None:
            pulumi.set(__self__, "saas_cname_enabled", saas_cname_enabled)
        if saas_cname_level is not None:
            pulumi.set(__self__, "saas_cname_level", saas_cname_level)
        if saas_cookie is not None:
            pulumi.set(__self__, "saas_cookie", saas_cookie)
        if saas_query_string is not None:
            pulumi.set(__self__, "saas_query_string", saas_query_string)
        if saas_regex is not None:
            pulumi.set(__self__, "saas_regex", saas_regex)
        if saas_replace is not None:
            pulumi.set(__self__, "saas_replace", saas_replace)
        if saas_suffix is not None:
            pulumi.set(__self__, "saas_suffix", saas_suffix)
        if saas_type is not None:
            pulumi.set(__self__, "saas_type", saas_type)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: Optional[str]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter(name="allowFcmParentOverride")
    def allow_fcm_parent_override(self) -> Optional[bool]:
        return pulumi.get(self, "allow_fcm_parent_override")

    @allow_fcm_parent_override.setter
    def allow_fcm_parent_override(self, value: Optional[bool]):
        pulumi.set(self, "allow_fcm_parent_override", value)

    @property
    @pulumi.getter(name="cexCustomPath")
    def cex_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "cex_custom_path")

    @cex_custom_path.setter
    def cex_custom_path(self, value: Optional[bool]):
        pulumi.set(self, "cex_custom_path", value)

    @property
    @pulumi.getter(name="cexHostname")
    def cex_hostname(self) -> Optional[str]:
        return pulumi.get(self, "cex_hostname")

    @cex_hostname.setter
    def cex_hostname(self, value: Optional[str]):
        pulumi.set(self, "cex_hostname", value)

    @property
    @pulumi.getter(name="cexPath")
    def cex_path(self) -> Optional[str]:
        return pulumi.get(self, "cex_path")

    @cex_path.setter
    def cex_path(self, value: Optional[str]):
        pulumi.set(self, "cex_path", value)

    @property
    @pulumi.getter(name="contentCustomPath")
    def content_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "content_custom_path")

    @content_custom_path.setter
    def content_custom_path(self, value: Optional[bool]):
        pulumi.set(self, "content_custom_path", value)

    @property
    @pulumi.getter(name="contentHostname")
    def content_hostname(self) -> Optional[str]:
        return pulumi.get(self, "content_hostname")

    @content_hostname.setter
    def content_hostname(self, value: Optional[str]):
        pulumi.set(self, "content_hostname", value)

    @property
    @pulumi.getter(name="contentPath")
    def content_path(self) -> Optional[str]:
        return pulumi.get(self, "content_path")

    @content_path.setter
    def content_path(self, value: Optional[str]):
        pulumi.set(self, "content_path", value)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeArgs']:
        return pulumi.get(self, "cp_code")

    @cp_code.setter
    def cp_code(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeArgs']):
        pulumi.set(self, "cp_code", value)

    @property
    @pulumi.getter(name="dynamicCustomPath")
    def dynamic_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_custom_path")

    @dynamic_custom_path.setter
    def dynamic_custom_path(self, value: Optional[bool]):
        pulumi.set(self, "dynamic_custom_path", value)

    @property
    @pulumi.getter(name="dynamicMethod")
    def dynamic_method(self) -> Optional[str]:
        return pulumi.get(self, "dynamic_method")

    @dynamic_method.setter
    def dynamic_method(self, value: Optional[str]):
        pulumi.set(self, "dynamic_method", value)

    @property
    @pulumi.getter(name="dynamicPath")
    def dynamic_path(self) -> Optional[str]:
        return pulumi.get(self, "dynamic_path")

    @dynamic_path.setter
    def dynamic_path(self, value: Optional[str]):
        pulumi.set(self, "dynamic_path", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="modifyProtocol")
    def modify_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "modify_protocol")

    @modify_protocol.setter
    def modify_protocol(self, value: Optional[bool]):
        pulumi.set(self, "modify_protocol", value)

    @property
    @pulumi.getter(name="netStorageHostname")
    def net_storage_hostname(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFailActionNetStorageHostnameArgs']:
        return pulumi.get(self, "net_storage_hostname")

    @net_storage_hostname.setter
    def net_storage_hostname(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFailActionNetStorageHostnameArgs']):
        pulumi.set(self, "net_storage_hostname", value)

    @property
    @pulumi.getter(name="netStoragePath")
    def net_storage_path(self) -> Optional[str]:
        return pulumi.get(self, "net_storage_path")

    @net_storage_path.setter
    def net_storage_path(self, value: Optional[str]):
        pulumi.set(self, "net_storage_path", value)

    @property
    @pulumi.getter(name="preserveQueryString")
    def preserve_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_query_string")

    @preserve_query_string.setter
    def preserve_query_string(self, value: Optional[bool]):
        pulumi.set(self, "preserve_query_string", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="redirectCustomPath")
    def redirect_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "redirect_custom_path")

    @redirect_custom_path.setter
    def redirect_custom_path(self, value: Optional[bool]):
        pulumi.set(self, "redirect_custom_path", value)

    @property
    @pulumi.getter(name="redirectHostname")
    def redirect_hostname(self) -> Optional[str]:
        return pulumi.get(self, "redirect_hostname")

    @redirect_hostname.setter
    def redirect_hostname(self, value: Optional[str]):
        pulumi.set(self, "redirect_hostname", value)

    @property
    @pulumi.getter(name="redirectHostnameType")
    def redirect_hostname_type(self) -> Optional[str]:
        return pulumi.get(self, "redirect_hostname_type")

    @redirect_hostname_type.setter
    def redirect_hostname_type(self, value: Optional[str]):
        pulumi.set(self, "redirect_hostname_type", value)

    @property
    @pulumi.getter(name="redirectMethod")
    def redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "redirect_method")

    @redirect_method.setter
    def redirect_method(self, value: Optional[int]):
        pulumi.set(self, "redirect_method", value)

    @property
    @pulumi.getter(name="redirectPath")
    def redirect_path(self) -> Optional[str]:
        return pulumi.get(self, "redirect_path")

    @redirect_path.setter
    def redirect_path(self, value: Optional[str]):
        pulumi.set(self, "redirect_path", value)

    @property
    @pulumi.getter(name="saasCnameEnabled")
    def saas_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "saas_cname_enabled")

    @saas_cname_enabled.setter
    def saas_cname_enabled(self, value: Optional[bool]):
        pulumi.set(self, "saas_cname_enabled", value)

    @property
    @pulumi.getter(name="saasCnameLevel")
    def saas_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "saas_cname_level")

    @saas_cname_level.setter
    def saas_cname_level(self, value: Optional[int]):
        pulumi.set(self, "saas_cname_level", value)

    @property
    @pulumi.getter(name="saasCookie")
    def saas_cookie(self) -> Optional[str]:
        return pulumi.get(self, "saas_cookie")

    @saas_cookie.setter
    def saas_cookie(self, value: Optional[str]):
        pulumi.set(self, "saas_cookie", value)

    @property
    @pulumi.getter(name="saasQueryString")
    def saas_query_string(self) -> Optional[str]:
        return pulumi.get(self, "saas_query_string")

    @saas_query_string.setter
    def saas_query_string(self, value: Optional[str]):
        pulumi.set(self, "saas_query_string", value)

    @property
    @pulumi.getter(name="saasRegex")
    def saas_regex(self) -> Optional[str]:
        return pulumi.get(self, "saas_regex")

    @saas_regex.setter
    def saas_regex(self, value: Optional[str]):
        pulumi.set(self, "saas_regex", value)

    @property
    @pulumi.getter(name="saasReplace")
    def saas_replace(self) -> Optional[str]:
        return pulumi.get(self, "saas_replace")

    @saas_replace.setter
    def saas_replace(self, value: Optional[str]):
        pulumi.set(self, "saas_replace", value)

    @property
    @pulumi.getter(name="saasSuffix")
    def saas_suffix(self) -> Optional[str]:
        return pulumi.get(self, "saas_suffix")

    @saas_suffix.setter
    def saas_suffix(self, value: Optional[str]):
        pulumi.set(self, "saas_suffix", value)

    @property
    @pulumi.getter(name="saasType")
    def saas_type(self) -> Optional[str]:
        return pulumi.get(self, "saas_type")

    @saas_type.setter
    def saas_type(self, value: Optional[str]):
        pulumi.set(self, "saas_type", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[int]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFailActionNetStorageHostnameArgs:
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @cp_code.setter
    def cp_code(self, value: Optional[int]):
        pulumi.set(self, "cp_code", value)

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @download_domain_name.setter
    def download_domain_name(self, value: Optional[str]):
        pulumi.set(self, "download_domain_name", value)

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")

    @g2o_token.setter
    def g2o_token(self, value: Optional[str]):
        pulumi.set(self, "g2o_token", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFailoverBotManagerFeatureCompatibilityArgs:
    def __init__(__self__, *,
                 compatibility: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if compatibility is not None:
            pulumi.set(__self__, "compatibility", compatibility)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def compatibility(self) -> Optional[bool]:
        return pulumi.get(self, "compatibility")

    @compatibility.setter
    def compatibility(self, value: Optional[bool]):
        pulumi.set(self, "compatibility", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFastInvalidateArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingArgs:
    def __init__(__self__, *,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingCloudletPolicyArgs'] = None,
                 enabled: Optional[bool] = None,
                 java_script_insertion_rule: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_math_prefix: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if java_script_insertion_rule is not None:
            pulumi.set(__self__, "java_script_insertion_rule", java_script_insertion_rule)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if media_math_prefix is not None:
            pulumi.set(__self__, "media_math_prefix", media_math_prefix)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="javaScriptInsertionRule")
    def java_script_insertion_rule(self) -> Optional[str]:
        return pulumi.get(self, "java_script_insertion_rule")

    @java_script_insertion_rule.setter
    def java_script_insertion_rule(self, value: Optional[str]):
        pulumi.set(self, "java_script_insertion_rule", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="mediaMathPrefix")
    def media_math_prefix(self) -> Optional[str]:
        return pulumi.get(self, "media_math_prefix")

    @media_math_prefix.setter
    def media_math_prefix(self, value: Optional[str]):
        pulumi.set(self, "media_math_prefix", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusArgs:
    def __init__(__self__, *,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusCloudletPolicyArgs'] = None,
                 enabled: Optional[bool] = None,
                 java_script_insertion_rule: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_math_prefix: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if java_script_insertion_rule is not None:
            pulumi.set(__self__, "java_script_insertion_rule", java_script_insertion_rule)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if media_math_prefix is not None:
            pulumi.set(__self__, "media_math_prefix", media_math_prefix)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="javaScriptInsertionRule")
    def java_script_insertion_rule(self) -> Optional[str]:
        return pulumi.get(self, "java_script_insertion_rule")

    @java_script_insertion_rule.setter
    def java_script_insertion_rule(self, value: Optional[str]):
        pulumi.set(self, "java_script_insertion_rule", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="mediaMathPrefix")
    def media_math_prefix(self) -> Optional[str]:
        return pulumi.get(self, "media_math_prefix")

    @media_math_prefix.setter
    def media_math_prefix(self, value: Optional[str]):
        pulumi.set(self, "media_math_prefix", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteArgs:
    def __init__(__self__, *,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteCloudletPolicyArgs'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @cloudlet_shared_policy.setter
    def cloudlet_shared_policy(self, value: Optional[int]):
        pulumi.set(self, "cloudlet_shared_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @is_shared_policy.setter
    def is_shared_policy(self, value: Optional[bool]):
        pulumi.set(self, "is_shared_policy", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorG2oheaderArgs:
    def __init__(__self__, *,
                 custom_sign_strings: Optional[Sequence[str]] = None,
                 data_header: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 encoding_version: Optional[int] = None,
                 locked: Optional[bool] = None,
                 nonce: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 signed_header: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_custom_sign_string: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if custom_sign_strings is not None:
            pulumi.set(__self__, "custom_sign_strings", custom_sign_strings)
        if data_header is not None:
            pulumi.set(__self__, "data_header", data_header)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if encoding_version is not None:
            pulumi.set(__self__, "encoding_version", encoding_version)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if nonce is not None:
            pulumi.set(__self__, "nonce", nonce)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if signed_header is not None:
            pulumi.set(__self__, "signed_header", signed_header)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_custom_sign_string is not None:
            pulumi.set(__self__, "use_custom_sign_string", use_custom_sign_string)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customSignStrings")
    def custom_sign_strings(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_sign_strings")

    @custom_sign_strings.setter
    def custom_sign_strings(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "custom_sign_strings", value)

    @property
    @pulumi.getter(name="dataHeader")
    def data_header(self) -> Optional[str]:
        return pulumi.get(self, "data_header")

    @data_header.setter
    def data_header(self, value: Optional[str]):
        pulumi.set(self, "data_header", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="encodingVersion")
    def encoding_version(self) -> Optional[int]:
        return pulumi.get(self, "encoding_version")

    @encoding_version.setter
    def encoding_version(self, value: Optional[int]):
        pulumi.set(self, "encoding_version", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @nonce.setter
    def nonce(self, value: Optional[str]):
        pulumi.set(self, "nonce", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="signedHeader")
    def signed_header(self) -> Optional[str]:
        return pulumi.get(self, "signed_header")

    @signed_header.setter
    def signed_header(self, value: Optional[str]):
        pulumi.set(self, "signed_header", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useCustomSignString")
    def use_custom_sign_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_custom_sign_string")

    @use_custom_sign_string.setter
    def use_custom_sign_string(self, value: Optional[bool]):
        pulumi.set(self, "use_custom_sign_string", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorGlobalRequestNumberArgs:
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 output_option: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if output_option is not None:
            pulumi.set(__self__, "output_option", output_option)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="outputOption")
    def output_option(self) -> Optional[str]:
        return pulumi.get(self, "output_option")

    @output_option.setter
    def output_option(self, value: Optional[str]):
        pulumi.set(self, "output_option", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[str]):
        pulumi.set(self, "variable_name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorGraphqlCachingArgs:
    def __init__(__self__, *,
                 advanced: Optional[str] = None,
                 cache_responses_with_errors: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 operations_json_body_parameter_name: Optional[str] = None,
                 operations_url_query_parameter_name: Optional[str] = None,
                 post_request_processing_error_handling: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if cache_responses_with_errors is not None:
            pulumi.set(__self__, "cache_responses_with_errors", cache_responses_with_errors)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if operations_json_body_parameter_name is not None:
            pulumi.set(__self__, "operations_json_body_parameter_name", operations_json_body_parameter_name)
        if operations_url_query_parameter_name is not None:
            pulumi.set(__self__, "operations_url_query_parameter_name", operations_url_query_parameter_name)
        if post_request_processing_error_handling is not None:
            pulumi.set(__self__, "post_request_processing_error_handling", post_request_processing_error_handling)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[str]:
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[str]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter(name="cacheResponsesWithErrors")
    def cache_responses_with_errors(self) -> Optional[bool]:
        return pulumi.get(self, "cache_responses_with_errors")

    @cache_responses_with_errors.setter
    def cache_responses_with_errors(self, value: Optional[bool]):
        pulumi.set(self, "cache_responses_with_errors", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="operationsJsonBodyParameterName")
    def operations_json_body_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "operations_json_body_parameter_name")

    @operations_json_body_parameter_name.setter
    def operations_json_body_parameter_name(self, value: Optional[str]):
        pulumi.set(self, "operations_json_body_parameter_name", value)

    @property
    @pulumi.getter(name="operationsUrlQueryParameterName")
    def operations_url_query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "operations_url_query_parameter_name")

    @operations_url_query_parameter_name.setter
    def operations_url_query_parameter_name(self, value: Optional[str]):
        pulumi.set(self, "operations_url_query_parameter_name", value)

    @property
    @pulumi.getter(name="postRequestProcessingErrorHandling")
    def post_request_processing_error_handling(self) -> Optional[str]:
        return pulumi.get(self, "post_request_processing_error_handling")

    @post_request_processing_error_handling.setter
    def post_request_processing_error_handling(self, value: Optional[str]):
        pulumi.set(self, "post_request_processing_error_handling", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorGzipResponseArgs:
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[str]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHdDataAdvancedArgs:
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if xml is not None:
            pulumi.set(__self__, "xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")

    @xml.setter
    def xml(self, value: Optional[str]):
        pulumi.set(self, "xml", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHealthDetectionArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 maximum_reconnects: Optional[int] = None,
                 retry_count: Optional[int] = None,
                 retry_interval: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_reconnects is not None:
            pulumi.set(__self__, "maximum_reconnects", maximum_reconnects)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if retry_interval is not None:
            pulumi.set(__self__, "retry_interval", retry_interval)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="maximumReconnects")
    def maximum_reconnects(self) -> Optional[int]:
        return pulumi.get(self, "maximum_reconnects")

    @maximum_reconnects.setter
    def maximum_reconnects(self, value: Optional[int]):
        pulumi.set(self, "maximum_reconnects", value)

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[int]:
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[int]):
        pulumi.set(self, "retry_count", value)

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[str]:
        return pulumi.get(self, "retry_interval")

    @retry_interval.setter
    def retry_interval(self, value: Optional[str]):
        pulumi.set(self, "retry_interval", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHsafEipBindingArgs:
    def __init__(__self__, *,
                 custom_extracted_serial: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 hash_max_value: Optional[int] = None,
                 hash_min_value: Optional[int] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tier: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_extracted_serial is not None:
            pulumi.set(__self__, "custom_extracted_serial", custom_extracted_serial)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hash_max_value is not None:
            pulumi.set(__self__, "hash_max_value", hash_max_value)
        if hash_min_value is not None:
            pulumi.set(__self__, "hash_min_value", hash_min_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customExtractedSerial")
    def custom_extracted_serial(self) -> Optional[bool]:
        return pulumi.get(self, "custom_extracted_serial")

    @custom_extracted_serial.setter
    def custom_extracted_serial(self, value: Optional[bool]):
        pulumi.set(self, "custom_extracted_serial", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="hashMaxValue")
    def hash_max_value(self) -> Optional[int]:
        return pulumi.get(self, "hash_max_value")

    @hash_max_value.setter
    def hash_max_value(self, value: Optional[int]):
        pulumi.set(self, "hash_max_value", value)

    @property
    @pulumi.getter(name="hashMinValue")
    def hash_min_value(self) -> Optional[int]:
        return pulumi.get(self, "hash_min_value")

    @hash_min_value.setter
    def hash_min_value(self, value: Optional[int]):
        pulumi.set(self, "hash_min_value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[str]):
        pulumi.set(self, "tier", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHttp2Args:
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHttp3Args:
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[bool]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHttpStrictTransportSecurityArgs:
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 include_sub_domains: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 max_age: Optional[str] = None,
                 preload: Optional[bool] = None,
                 redirect: Optional[bool] = None,
                 redirect_status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if include_sub_domains is not None:
            pulumi.set(__self__, "include_sub_domains", include_sub_domains)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if preload is not None:
            pulumi.set(__self__, "preload", preload)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if redirect_status_code is not None:
            pulumi.set(__self__, "redirect_status_code", redirect_status_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[bool]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="includeSubDomains")
    def include_sub_domains(self) -> Optional[bool]:
        return pulumi.get(self, "include_sub_domains")

    @include_sub_domains.setter
    def include_sub_domains(self, value: Optional[bool]):
        pulumi.set(self, "include_sub_domains", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[str]:
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[str]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter
    def preload(self) -> Optional[bool]:
        return pulumi.get(self, "preload")

    @preload.setter
    def preload(self, value: Optional[bool]):
        pulumi.set(self, "preload", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[bool]:
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[bool]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter(name="redirectStatusCode")
    def redirect_status_code(self) -> Optional[int]:
        return pulumi.get(self, "redirect_status_code")

    @redirect_status_code.setter
    def redirect_status_code(self, value: Optional[int]):
        pulumi.set(self, "redirect_status_code", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHttpToHttpsUpgradeArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upgrade: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upgrade is not None:
            pulumi.set(__self__, "upgrade", upgrade)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def upgrade(self) -> Optional[str]:
        return pulumi.get(self, "upgrade")

    @upgrade.setter
    def upgrade(self, value: Optional[str]):
        pulumi.set(self, "upgrade", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImOverrideArgs:
    def __init__(__self__, *,
                 dpr: Optional[float] = None,
                 dprvar: Optional[str] = None,
                 exclude_all_query_parameters: Optional[bool] = None,
                 excluded_query_parameters: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 formatvar: Optional[str] = None,
                 locked: Optional[bool] = None,
                 override: Optional[str] = None,
                 policy: Optional[str] = None,
                 policyvar: Optional[str] = None,
                 policyvar_i_mvar: Optional[str] = None,
                 policyvar_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 typesel: Optional[str] = None,
                 uuid: Optional[str] = None,
                 width: Optional[float] = None,
                 widthvar: Optional[str] = None):
        if dpr is not None:
            pulumi.set(__self__, "dpr", dpr)
        if dprvar is not None:
            pulumi.set(__self__, "dprvar", dprvar)
        if exclude_all_query_parameters is not None:
            pulumi.set(__self__, "exclude_all_query_parameters", exclude_all_query_parameters)
        if excluded_query_parameters is not None:
            pulumi.set(__self__, "excluded_query_parameters", excluded_query_parameters)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if formatvar is not None:
            pulumi.set(__self__, "formatvar", formatvar)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if policyvar is not None:
            pulumi.set(__self__, "policyvar", policyvar)
        if policyvar_i_mvar is not None:
            pulumi.set(__self__, "policyvar_i_mvar", policyvar_i_mvar)
        if policyvar_name is not None:
            pulumi.set(__self__, "policyvar_name", policyvar_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if typesel is not None:
            pulumi.set(__self__, "typesel", typesel)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if widthvar is not None:
            pulumi.set(__self__, "widthvar", widthvar)

    @property
    @pulumi.getter
    def dpr(self) -> Optional[float]:
        return pulumi.get(self, "dpr")

    @dpr.setter
    def dpr(self, value: Optional[float]):
        pulumi.set(self, "dpr", value)

    @property
    @pulumi.getter
    def dprvar(self) -> Optional[str]:
        return pulumi.get(self, "dprvar")

    @dprvar.setter
    def dprvar(self, value: Optional[str]):
        pulumi.set(self, "dprvar", value)

    @property
    @pulumi.getter(name="excludeAllQueryParameters")
    def exclude_all_query_parameters(self) -> Optional[bool]:
        return pulumi.get(self, "exclude_all_query_parameters")

    @exclude_all_query_parameters.setter
    def exclude_all_query_parameters(self, value: Optional[bool]):
        pulumi.set(self, "exclude_all_query_parameters", value)

    @property
    @pulumi.getter(name="excludedQueryParameters")
    def excluded_query_parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_query_parameters")

    @excluded_query_parameters.setter
    def excluded_query_parameters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "excluded_query_parameters", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def formatvar(self) -> Optional[str]:
        return pulumi.get(self, "formatvar")

    @formatvar.setter
    def formatvar(self, value: Optional[str]):
        pulumi.set(self, "formatvar", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[str]:
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[str]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[str]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def policyvar(self) -> Optional[str]:
        return pulumi.get(self, "policyvar")

    @policyvar.setter
    def policyvar(self, value: Optional[str]):
        pulumi.set(self, "policyvar", value)

    @property
    @pulumi.getter(name="policyvarIMvar")
    def policyvar_i_mvar(self) -> Optional[str]:
        return pulumi.get(self, "policyvar_i_mvar")

    @policyvar_i_mvar.setter
    def policyvar_i_mvar(self, value: Optional[str]):
        pulumi.set(self, "policyvar_i_mvar", value)

    @property
    @pulumi.getter(name="policyvarName")
    def policyvar_name(self) -> Optional[str]:
        return pulumi.get(self, "policyvar_name")

    @policyvar_name.setter
    def policyvar_name(self, value: Optional[str]):
        pulumi.set(self, "policyvar_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def typesel(self) -> Optional[str]:
        return pulumi.get(self, "typesel")

    @typesel.setter
    def typesel(self, value: Optional[str]):
        pulumi.set(self, "typesel", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[float]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[float]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter
    def widthvar(self) -> Optional[str]:
        return pulumi.get(self, "widthvar")

    @widthvar.setter
    def widthvar(self, value: Optional[str]):
        pulumi.set(self, "widthvar", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerArgs:
    def __init__(__self__, *,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalArgs'] = None,
                 cp_code_transformed: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedArgs'] = None,
                 enabled: Optional[bool] = None,
                 image_set: Optional[str] = None,
                 locked: Optional[bool] = None,
                 policy_set_type: Optional[str] = None,
                 resize: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 video_set: Optional[str] = None):
        if apply_best_file_type is not None:
            pulumi.set(__self__, "apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            pulumi.set(__self__, "cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            pulumi.set(__self__, "cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if image_set is not None:
            pulumi.set(__self__, "image_set", image_set)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if policy_set_type is not None:
            pulumi.set(__self__, "policy_set_type", policy_set_type)
        if resize is not None:
            pulumi.set(__self__, "resize", resize)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if video_set is not None:
            pulumi.set(__self__, "video_set", video_set)

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @apply_best_file_type.setter
    def apply_best_file_type(self, value: Optional[bool]):
        pulumi.set(self, "apply_best_file_type", value)

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalArgs']:
        return pulumi.get(self, "cp_code_original")

    @cp_code_original.setter
    def cp_code_original(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalArgs']):
        pulumi.set(self, "cp_code_original", value)

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedArgs']:
        return pulumi.get(self, "cp_code_transformed")

    @cp_code_transformed.setter
    def cp_code_transformed(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedArgs']):
        pulumi.set(self, "cp_code_transformed", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="imageSet")
    def image_set(self) -> Optional[str]:
        return pulumi.get(self, "image_set")

    @image_set.setter
    def image_set(self, value: Optional[str]):
        pulumi.set(self, "image_set", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="policySetType")
    def policy_set_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_set_type")

    @policy_set_type.setter
    def policy_set_type(self, value: Optional[str]):
        pulumi.set(self, "policy_set_type", value)

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @resize.setter
    def resize(self, value: Optional[bool]):
        pulumi.set(self, "resize", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="videoSet")
    def video_set(self) -> Optional[str]:
        return pulumi.get(self, "video_set")

    @video_set.setter
    def video_set(self, value: Optional[str]):
        pulumi.set(self, "video_set", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerArgs:
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 api_reference_title: Optional[str] = None,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalArgs'] = None,
                 cp_code_transformed: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedArgs'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 policy_set: Optional[str] = None,
                 policy_token: Optional[str] = None,
                 policy_token_default: Optional[str] = None,
                 resize: Optional[bool] = None,
                 settings_title: Optional[str] = None,
                 super_cache_region: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 traffic_title: Optional[str] = None,
                 use_existing_policy_set: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if api_reference_title is not None:
            pulumi.set(__self__, "api_reference_title", api_reference_title)
        if apply_best_file_type is not None:
            pulumi.set(__self__, "apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            pulumi.set(__self__, "cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            pulumi.set(__self__, "cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if policy_set is not None:
            pulumi.set(__self__, "policy_set", policy_set)
        if policy_token is not None:
            pulumi.set(__self__, "policy_token", policy_token)
        if policy_token_default is not None:
            pulumi.set(__self__, "policy_token_default", policy_token_default)
        if resize is not None:
            pulumi.set(__self__, "resize", resize)
        if settings_title is not None:
            pulumi.set(__self__, "settings_title", settings_title)
        if super_cache_region is not None:
            pulumi.set(__self__, "super_cache_region", super_cache_region)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if traffic_title is not None:
            pulumi.set(__self__, "traffic_title", traffic_title)
        if use_existing_policy_set is not None:
            pulumi.set(__self__, "use_existing_policy_set", use_existing_policy_set)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[bool]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter(name="apiReferenceTitle")
    def api_reference_title(self) -> Optional[str]:
        return pulumi.get(self, "api_reference_title")

    @api_reference_title.setter
    def api_reference_title(self, value: Optional[str]):
        pulumi.set(self, "api_reference_title", value)

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @apply_best_file_type.setter
    def apply_best_file_type(self, value: Optional[bool]):
        pulumi.set(self, "apply_best_file_type", value)

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalArgs']:
        return pulumi.get(self, "cp_code_original")

    @cp_code_original.setter
    def cp_code_original(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalArgs']):
        pulumi.set(self, "cp_code_original", value)

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedArgs']:
        return pulumi.get(self, "cp_code_transformed")

    @cp_code_transformed.setter
    def cp_code_transformed(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedArgs']):
        pulumi.set(self, "cp_code_transformed", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="policySet")
    def policy_set(self) -> Optional[str]:
        return pulumi.get(self, "policy_set")

    @policy_set.setter
    def policy_set(self, value: Optional[str]):
        pulumi.set(self, "policy_set", value)

    @property
    @pulumi.getter(name="policyToken")
    def policy_token(self) -> Optional[str]:
        return pulumi.get(self, "policy_token")

    @policy_token.setter
    def policy_token(self, value: Optional[str]):
        pulumi.set(self, "policy_token", value)

    @property
    @pulumi.getter(name="policyTokenDefault")
    def policy_token_default(self) -> Optional[str]:
        return pulumi.get(self, "policy_token_default")

    @policy_token_default.setter
    def policy_token_default(self, value: Optional[str]):
        pulumi.set(self, "policy_token_default", value)

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @resize.setter
    def resize(self, value: Optional[bool]):
        pulumi.set(self, "resize", value)

    @property
    @pulumi.getter(name="settingsTitle")
    def settings_title(self) -> Optional[str]:
        return pulumi.get(self, "settings_title")

    @settings_title.setter
    def settings_title(self, value: Optional[str]):
        pulumi.set(self, "settings_title", value)

    @property
    @pulumi.getter(name="superCacheRegion")
    def super_cache_region(self) -> Optional[str]:
        return pulumi.get(self, "super_cache_region")

    @super_cache_region.setter
    def super_cache_region(self, value: Optional[str]):
        pulumi.set(self, "super_cache_region", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="trafficTitle")
    def traffic_title(self) -> Optional[str]:
        return pulumi.get(self, "traffic_title")

    @traffic_title.setter
    def traffic_title(self, value: Optional[str]):
        pulumi.set(self, "traffic_title", value)

    @property
    @pulumi.getter(name="useExistingPolicySet")
    def use_existing_policy_set(self) -> Optional[bool]:
        return pulumi.get(self, "use_existing_policy_set")

    @use_existing_policy_set.setter
    def use_existing_policy_set(self, value: Optional[bool]):
        pulumi.set(self, "use_existing_policy_set", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoArgs:
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 api_reference_title: Optional[str] = None,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalArgs'] = None,
                 cp_code_transformed: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedArgs'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 policy_set: Optional[str] = None,
                 policy_token: Optional[str] = None,
                 policy_token_default: Optional[str] = None,
                 resize: Optional[bool] = None,
                 settings_title: Optional[str] = None,
                 super_cache_region: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 traffic_title: Optional[str] = None,
                 use_existing_policy_set: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if api_reference_title is not None:
            pulumi.set(__self__, "api_reference_title", api_reference_title)
        if apply_best_file_type is not None:
            pulumi.set(__self__, "apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            pulumi.set(__self__, "cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            pulumi.set(__self__, "cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if policy_set is not None:
            pulumi.set(__self__, "policy_set", policy_set)
        if policy_token is not None:
            pulumi.set(__self__, "policy_token", policy_token)
        if policy_token_default is not None:
            pulumi.set(__self__, "policy_token_default", policy_token_default)
        if resize is not None:
            pulumi.set(__self__, "resize", resize)
        if settings_title is not None:
            pulumi.set(__self__, "settings_title", settings_title)
        if super_cache_region is not None:
            pulumi.set(__self__, "super_cache_region", super_cache_region)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if traffic_title is not None:
            pulumi.set(__self__, "traffic_title", traffic_title)
        if use_existing_policy_set is not None:
            pulumi.set(__self__, "use_existing_policy_set", use_existing_policy_set)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[bool]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter(name="apiReferenceTitle")
    def api_reference_title(self) -> Optional[str]:
        return pulumi.get(self, "api_reference_title")

    @api_reference_title.setter
    def api_reference_title(self, value: Optional[str]):
        pulumi.set(self, "api_reference_title", value)

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @apply_best_file_type.setter
    def apply_best_file_type(self, value: Optional[bool]):
        pulumi.set(self, "apply_best_file_type", value)

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalArgs']:
        return pulumi.get(self, "cp_code_original")

    @cp_code_original.setter
    def cp_code_original(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalArgs']):
        pulumi.set(self, "cp_code_original", value)

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedArgs']:
        return pulumi.get(self, "cp_code_transformed")

    @cp_code_transformed.setter
    def cp_code_transformed(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedArgs']):
        pulumi.set(self, "cp_code_transformed", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="policySet")
    def policy_set(self) -> Optional[str]:
        return pulumi.get(self, "policy_set")

    @policy_set.setter
    def policy_set(self, value: Optional[str]):
        pulumi.set(self, "policy_set", value)

    @property
    @pulumi.getter(name="policyToken")
    def policy_token(self) -> Optional[str]:
        return pulumi.get(self, "policy_token")

    @policy_token.setter
    def policy_token(self, value: Optional[str]):
        pulumi.set(self, "policy_token", value)

    @property
    @pulumi.getter(name="policyTokenDefault")
    def policy_token_default(self) -> Optional[str]:
        return pulumi.get(self, "policy_token_default")

    @policy_token_default.setter
    def policy_token_default(self, value: Optional[str]):
        pulumi.set(self, "policy_token_default", value)

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @resize.setter
    def resize(self, value: Optional[bool]):
        pulumi.set(self, "resize", value)

    @property
    @pulumi.getter(name="settingsTitle")
    def settings_title(self) -> Optional[str]:
        return pulumi.get(self, "settings_title")

    @settings_title.setter
    def settings_title(self, value: Optional[str]):
        pulumi.set(self, "settings_title", value)

    @property
    @pulumi.getter(name="superCacheRegion")
    def super_cache_region(self) -> Optional[str]:
        return pulumi.get(self, "super_cache_region")

    @super_cache_region.setter
    def super_cache_region(self, value: Optional[str]):
        pulumi.set(self, "super_cache_region", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="trafficTitle")
    def traffic_title(self) -> Optional[str]:
        return pulumi.get(self, "traffic_title")

    @traffic_title.setter
    def traffic_title(self, value: Optional[str]):
        pulumi.set(self, "traffic_title", value)

    @property
    @pulumi.getter(name="useExistingPolicySet")
    def use_existing_policy_set(self) -> Optional[bool]:
        return pulumi.get(self, "use_existing_policy_set")

    @use_existing_policy_set.setter
    def use_existing_policy_set(self, value: Optional[bool]):
        pulumi.set(self, "use_existing_policy_set", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorIncludeArgs:
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorInstantArgs:
    def __init__(__self__, *,
                 custom_link_relations: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 prefetch_cacheable: Optional[bool] = None,
                 prefetch_html: Optional[bool] = None,
                 prefetch_no_store: Optional[bool] = None,
                 prefetch_no_store_extensions: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_link_relations is not None:
            pulumi.set(__self__, "custom_link_relations", custom_link_relations)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if prefetch_cacheable is not None:
            pulumi.set(__self__, "prefetch_cacheable", prefetch_cacheable)
        if prefetch_html is not None:
            pulumi.set(__self__, "prefetch_html", prefetch_html)
        if prefetch_no_store is not None:
            pulumi.set(__self__, "prefetch_no_store", prefetch_no_store)
        if prefetch_no_store_extensions is not None:
            pulumi.set(__self__, "prefetch_no_store_extensions", prefetch_no_store_extensions)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customLinkRelations")
    def custom_link_relations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_link_relations")

    @custom_link_relations.setter
    def custom_link_relations(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "custom_link_relations", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="prefetchCacheable")
    def prefetch_cacheable(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_cacheable")

    @prefetch_cacheable.setter
    def prefetch_cacheable(self, value: Optional[bool]):
        pulumi.set(self, "prefetch_cacheable", value)

    @property
    @pulumi.getter(name="prefetchHtml")
    def prefetch_html(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_html")

    @prefetch_html.setter
    def prefetch_html(self, value: Optional[bool]):
        pulumi.set(self, "prefetch_html", value)

    @property
    @pulumi.getter(name="prefetchNoStore")
    def prefetch_no_store(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_no_store")

    @prefetch_no_store.setter
    def prefetch_no_store(self, value: Optional[bool]):
        pulumi.set(self, "prefetch_no_store", value)

    @property
    @pulumi.getter(name="prefetchNoStoreExtensions")
    def prefetch_no_store_extensions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prefetch_no_store_extensions")

    @prefetch_no_store_extensions.setter
    def prefetch_no_store_extensions(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "prefetch_no_store_extensions", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorInstantConfigArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationArgs:
    def __init__(__self__, *,
                 enable_partial_object_caching: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 minimum_size: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_versioning: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if enable_partial_object_caching is not None:
            pulumi.set(__self__, "enable_partial_object_caching", enable_partial_object_caching)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_size is not None:
            pulumi.set(__self__, "maximum_size", maximum_size)
        if minimum_size is not None:
            pulumi.set(__self__, "minimum_size", minimum_size)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_versioning is not None:
            pulumi.set(__self__, "use_versioning", use_versioning)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="enablePartialObjectCaching")
    def enable_partial_object_caching(self) -> Optional[str]:
        return pulumi.get(self, "enable_partial_object_caching")

    @enable_partial_object_caching.setter
    def enable_partial_object_caching(self, value: Optional[str]):
        pulumi.set(self, "enable_partial_object_caching", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @maximum_size.setter
    def maximum_size(self, value: Optional[str]):
        pulumi.set(self, "maximum_size", value)

    @property
    @pulumi.getter(name="minimumSize")
    def minimum_size(self) -> Optional[str]:
        return pulumi.get(self, "minimum_size")

    @minimum_size.setter
    def minimum_size(self, value: Optional[str]):
        pulumi.set(self, "minimum_size", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useVersioning")
    def use_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "use_versioning")

    @use_versioning.setter
    def use_versioning(self, value: Optional[bool]):
        pulumi.set(self, "use_versioning", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationAdvancedArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 fragment_size: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 prefetch_after_request: Optional[int] = None,
                 prefetch_during_request: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if fragment_size is not None:
            pulumi.set(__self__, "fragment_size", fragment_size)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if prefetch_after_request is not None:
            pulumi.set(__self__, "prefetch_after_request", prefetch_after_request)
        if prefetch_during_request is not None:
            pulumi.set(__self__, "prefetch_during_request", prefetch_during_request)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="fragmentSize")
    def fragment_size(self) -> Optional[str]:
        return pulumi.get(self, "fragment_size")

    @fragment_size.setter
    def fragment_size(self, value: Optional[str]):
        pulumi.set(self, "fragment_size", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @object_size.setter
    def object_size(self, value: Optional[str]):
        pulumi.set(self, "object_size", value)

    @property
    @pulumi.getter(name="prefetchAfterRequest")
    def prefetch_after_request(self) -> Optional[int]:
        return pulumi.get(self, "prefetch_after_request")

    @prefetch_after_request.setter
    def prefetch_after_request(self, value: Optional[int]):
        pulumi.set(self, "prefetch_after_request", value)

    @property
    @pulumi.getter(name="prefetchDuringRequest")
    def prefetch_during_request(self) -> Optional[int]:
        return pulumi.get(self, "prefetch_during_request")

    @prefetch_during_request.setter
    def prefetch_during_request(self, value: Optional[int]):
        pulumi.set(self, "prefetch_during_request", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateArgs:
    def __init__(__self__, *,
                 bitrate_tables: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateBitrateTableArgs']] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 threshold_tables: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateThresholdTableArgs']] = None,
                 uuid: Optional[str] = None):
        if bitrate_tables is not None:
            pulumi.set(__self__, "bitrate_tables", bitrate_tables)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if threshold_tables is not None:
            pulumi.set(__self__, "threshold_tables", threshold_tables)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="bitrateTables")
    def bitrate_tables(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateBitrateTableArgs']]:
        return pulumi.get(self, "bitrate_tables")

    @bitrate_tables.setter
    def bitrate_tables(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateBitrateTableArgs']]):
        pulumi.set(self, "bitrate_tables", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="thresholdTables")
    def threshold_tables(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateThresholdTableArgs']]:
        return pulumi.get(self, "threshold_tables")

    @threshold_tables.setter
    def threshold_tables(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateThresholdTableArgs']]):
        pulumi.set(self, "threshold_tables", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateBitrateTableArgs:
    def __init__(__self__, *,
                 bitrate_unit: Optional[str] = None,
                 bitrate_value: Optional[float] = None):
        if bitrate_unit is not None:
            pulumi.set(__self__, "bitrate_unit", bitrate_unit)
        if bitrate_value is not None:
            pulumi.set(__self__, "bitrate_value", bitrate_value)

    @property
    @pulumi.getter(name="bitrateUnit")
    def bitrate_unit(self) -> Optional[str]:
        return pulumi.get(self, "bitrate_unit")

    @bitrate_unit.setter
    def bitrate_unit(self, value: Optional[str]):
        pulumi.set(self, "bitrate_unit", value)

    @property
    @pulumi.getter(name="bitrateValue")
    def bitrate_value(self) -> Optional[float]:
        return pulumi.get(self, "bitrate_value")

    @bitrate_value.setter
    def bitrate_value(self, value: Optional[float]):
        pulumi.set(self, "bitrate_value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateThresholdTableArgs:
    def __init__(__self__, *,
                 threshold_unit: Optional[str] = None,
                 threshold_value: Optional[int] = None):
        if threshold_unit is not None:
            pulumi.set(__self__, "threshold_unit", threshold_unit)
        if threshold_value is not None:
            pulumi.set(__self__, "threshold_value", threshold_value)

    @property
    @pulumi.getter(name="thresholdUnit")
    def threshold_unit(self) -> Optional[str]:
        return pulumi.get(self, "threshold_unit")

    @threshold_unit.setter
    def threshold_unit(self, value: Optional[str]):
        pulumi.set(self, "threshold_unit", value)

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> Optional[int]:
        return pulumi.get(self, "threshold_value")

    @threshold_value.setter
    def threshold_value(self, value: Optional[int]):
        pulumi.set(self, "threshold_value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLogCustomArgs:
    def __init__(__self__, *,
                 custom_log_field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 log_custom_log_field: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_log_field is not None:
            pulumi.set(__self__, "custom_log_field", custom_log_field)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if log_custom_log_field is not None:
            pulumi.set(__self__, "log_custom_log_field", log_custom_log_field)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customLogField")
    def custom_log_field(self) -> Optional[str]:
        return pulumi.get(self, "custom_log_field")

    @custom_log_field.setter
    def custom_log_field(self, value: Optional[str]):
        pulumi.set(self, "custom_log_field", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="logCustomLogField")
    def log_custom_log_field(self) -> Optional[bool]:
        return pulumi.get(self, "log_custom_log_field")

    @log_custom_log_field.setter
    def log_custom_log_field(self, value: Optional[bool]):
        pulumi.set(self, "log_custom_log_field", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMPulseArgs:
    def __init__(__self__, *,
                 api_key: Optional[str] = None,
                 buffer_size: Optional[str] = None,
                 config_override: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 loader_version: Optional[str] = None,
                 locked: Optional[bool] = None,
                 require_pci: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 title_optional: Optional[str] = None,
                 uuid: Optional[str] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if buffer_size is not None:
            pulumi.set(__self__, "buffer_size", buffer_size)
        if config_override is not None:
            pulumi.set(__self__, "config_override", config_override)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if loader_version is not None:
            pulumi.set(__self__, "loader_version", loader_version)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if require_pci is not None:
            pulumi.set(__self__, "require_pci", require_pci)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if title_optional is not None:
            pulumi.set(__self__, "title_optional", title_optional)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "buffer_size")

    @buffer_size.setter
    def buffer_size(self, value: Optional[str]):
        pulumi.set(self, "buffer_size", value)

    @property
    @pulumi.getter(name="configOverride")
    def config_override(self) -> Optional[str]:
        return pulumi.get(self, "config_override")

    @config_override.setter
    def config_override(self, value: Optional[str]):
        pulumi.set(self, "config_override", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="loaderVersion")
    def loader_version(self) -> Optional[str]:
        return pulumi.get(self, "loader_version")

    @loader_version.setter
    def loader_version(self, value: Optional[str]):
        pulumi.set(self, "loader_version", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="requirePci")
    def require_pci(self) -> Optional[bool]:
        return pulumi.get(self, "require_pci")

    @require_pci.setter
    def require_pci(self, value: Optional[bool]):
        pulumi.set(self, "require_pci", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="titleOptional")
    def title_optional(self) -> Optional[str]:
        return pulumi.get(self, "title_optional")

    @title_optional.setter
    def title_optional(self, value: Optional[str]):
        pulumi.set(self, "title_optional", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorManifestPersonalizationArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 hls_enable_debug_headers: Optional[bool] = None,
                 hls_enabled: Optional[bool] = None,
                 hls_filter_in_bitrate_ranges: Optional[str] = None,
                 hls_filter_in_bitrates: Optional[str] = None,
                 hls_mode: Optional[str] = None,
                 hls_preferred_bitrate: Optional[str] = None,
                 hls_query_param_enabled: Optional[bool] = None,
                 hls_query_param_secret_key: Optional[str] = None,
                 hls_query_param_transition_key: Optional[str] = None,
                 hls_show_advanced: Optional[bool] = None,
                 hls_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hls_enable_debug_headers is not None:
            pulumi.set(__self__, "hls_enable_debug_headers", hls_enable_debug_headers)
        if hls_enabled is not None:
            pulumi.set(__self__, "hls_enabled", hls_enabled)
        if hls_filter_in_bitrate_ranges is not None:
            pulumi.set(__self__, "hls_filter_in_bitrate_ranges", hls_filter_in_bitrate_ranges)
        if hls_filter_in_bitrates is not None:
            pulumi.set(__self__, "hls_filter_in_bitrates", hls_filter_in_bitrates)
        if hls_mode is not None:
            pulumi.set(__self__, "hls_mode", hls_mode)
        if hls_preferred_bitrate is not None:
            pulumi.set(__self__, "hls_preferred_bitrate", hls_preferred_bitrate)
        if hls_query_param_enabled is not None:
            pulumi.set(__self__, "hls_query_param_enabled", hls_query_param_enabled)
        if hls_query_param_secret_key is not None:
            pulumi.set(__self__, "hls_query_param_secret_key", hls_query_param_secret_key)
        if hls_query_param_transition_key is not None:
            pulumi.set(__self__, "hls_query_param_transition_key", hls_query_param_transition_key)
        if hls_show_advanced is not None:
            pulumi.set(__self__, "hls_show_advanced", hls_show_advanced)
        if hls_title is not None:
            pulumi.set(__self__, "hls_title", hls_title)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="hlsEnableDebugHeaders")
    def hls_enable_debug_headers(self) -> Optional[bool]:
        return pulumi.get(self, "hls_enable_debug_headers")

    @hls_enable_debug_headers.setter
    def hls_enable_debug_headers(self, value: Optional[bool]):
        pulumi.set(self, "hls_enable_debug_headers", value)

    @property
    @pulumi.getter(name="hlsEnabled")
    def hls_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "hls_enabled")

    @hls_enabled.setter
    def hls_enabled(self, value: Optional[bool]):
        pulumi.set(self, "hls_enabled", value)

    @property
    @pulumi.getter(name="hlsFilterInBitrateRanges")
    def hls_filter_in_bitrate_ranges(self) -> Optional[str]:
        return pulumi.get(self, "hls_filter_in_bitrate_ranges")

    @hls_filter_in_bitrate_ranges.setter
    def hls_filter_in_bitrate_ranges(self, value: Optional[str]):
        pulumi.set(self, "hls_filter_in_bitrate_ranges", value)

    @property
    @pulumi.getter(name="hlsFilterInBitrates")
    def hls_filter_in_bitrates(self) -> Optional[str]:
        return pulumi.get(self, "hls_filter_in_bitrates")

    @hls_filter_in_bitrates.setter
    def hls_filter_in_bitrates(self, value: Optional[str]):
        pulumi.set(self, "hls_filter_in_bitrates", value)

    @property
    @pulumi.getter(name="hlsMode")
    def hls_mode(self) -> Optional[str]:
        return pulumi.get(self, "hls_mode")

    @hls_mode.setter
    def hls_mode(self, value: Optional[str]):
        pulumi.set(self, "hls_mode", value)

    @property
    @pulumi.getter(name="hlsPreferredBitrate")
    def hls_preferred_bitrate(self) -> Optional[str]:
        return pulumi.get(self, "hls_preferred_bitrate")

    @hls_preferred_bitrate.setter
    def hls_preferred_bitrate(self, value: Optional[str]):
        pulumi.set(self, "hls_preferred_bitrate", value)

    @property
    @pulumi.getter(name="hlsQueryParamEnabled")
    def hls_query_param_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "hls_query_param_enabled")

    @hls_query_param_enabled.setter
    def hls_query_param_enabled(self, value: Optional[bool]):
        pulumi.set(self, "hls_query_param_enabled", value)

    @property
    @pulumi.getter(name="hlsQueryParamSecretKey")
    def hls_query_param_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "hls_query_param_secret_key")

    @hls_query_param_secret_key.setter
    def hls_query_param_secret_key(self, value: Optional[str]):
        pulumi.set(self, "hls_query_param_secret_key", value)

    @property
    @pulumi.getter(name="hlsQueryParamTransitionKey")
    def hls_query_param_transition_key(self) -> Optional[str]:
        return pulumi.get(self, "hls_query_param_transition_key")

    @hls_query_param_transition_key.setter
    def hls_query_param_transition_key(self, value: Optional[str]):
        pulumi.set(self, "hls_query_param_transition_key", value)

    @property
    @pulumi.getter(name="hlsShowAdvanced")
    def hls_show_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "hls_show_advanced")

    @hls_show_advanced.setter
    def hls_show_advanced(self, value: Optional[bool]):
        pulumi.set(self, "hls_show_advanced", value)

    @property
    @pulumi.getter(name="hlsTitle")
    def hls_title(self) -> Optional[str]:
        return pulumi.get(self, "hls_title")

    @hls_title.setter
    def hls_title(self, value: Optional[str]):
        pulumi.set(self, "hls_title", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorManifestReroutingArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 partner: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 username: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if partner is not None:
            pulumi.set(__self__, "partner", partner)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def partner(self) -> Optional[str]:
        return pulumi.get(self, "partner")

    @partner.setter
    def partner(self, value: Optional[str]):
        pulumi.set(self, "partner", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorManualServerPushArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 serverpushlists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if serverpushlists is not None:
            pulumi.set(__self__, "serverpushlists", serverpushlists)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def serverpushlists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "serverpushlists")

    @serverpushlists.setter
    def serverpushlists(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "serverpushlists", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationQuicOptoutArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 optout: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if optout is not None:
            pulumi.set(__self__, "optout", optout)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def optout(self) -> Optional[str]:
        return pulumi.get(self, "optout")

    @optout.setter
    def optout(self, value: Optional[str]):
        pulumi.set(self, "optout", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMediaClientArgs:
    def __init__(__self__, *,
                 beacon_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_hybrid_http_udp: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if beacon_id is not None:
            pulumi.set(__self__, "beacon_id", beacon_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_hybrid_http_udp is not None:
            pulumi.set(__self__, "use_hybrid_http_udp", use_hybrid_http_udp)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="beaconId")
    def beacon_id(self) -> Optional[str]:
        return pulumi.get(self, "beacon_id")

    @beacon_id.setter
    def beacon_id(self, value: Optional[str]):
        pulumi.set(self, "beacon_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useHybridHttpUdp")
    def use_hybrid_http_udp(self) -> Optional[bool]:
        return pulumi.get(self, "use_hybrid_http_udp")

    @use_hybrid_http_udp.setter
    def use_hybrid_http_udp(self, value: Optional[bool]):
        pulumi.set(self, "use_hybrid_http_udp", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMediaFileRetrievalOptimizationArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMediaOriginFailoverArgs:
    def __init__(__self__, *,
                 cache_error_response: Optional[bool] = None,
                 cache_window: Optional[str] = None,
                 client_response_code: Optional[str] = None,
                 detect_object_unavailable: Optional[bool] = None,
                 detect_object_unavailable_title: Optional[str] = None,
                 detect_origin_unavailable: Optional[bool] = None,
                 detect_origin_unavailable_title: Optional[str] = None,
                 detect_origin_unresponsive: Optional[bool] = None,
                 detect_origin_unresponsive_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_unavailable_alternate_host: Optional[str] = None,
                 object_unavailable_backup_host: Optional[str] = None,
                 object_unavailable_blacklist_origin_ip: Optional[bool] = None,
                 object_unavailable_blacklist_window: Optional[str] = None,
                 object_unavailable_change_protocol: Optional[bool] = None,
                 object_unavailable_detection_level: Optional[str] = None,
                 object_unavailable_include_query_string: Optional[bool] = None,
                 object_unavailable_modified_path: Optional[str] = None,
                 object_unavailable_modify_request_path: Optional[bool] = None,
                 object_unavailable_protocol: Optional[str] = None,
                 object_unavailable_recovery: Optional[str] = None,
                 object_unavailable_redirect_method: Optional[int] = None,
                 object_unavailable_response_codes: Optional[Sequence[str]] = None,
                 object_unavailable_retry_limit: Optional[str] = None,
                 origin_unavailable_alternate_host: Optional[str] = None,
                 origin_unavailable_backup_host: Optional[str] = None,
                 origin_unavailable_blacklist_origin_ip: Optional[bool] = None,
                 origin_unavailable_blacklist_window: Optional[str] = None,
                 origin_unavailable_change_protocol: Optional[bool] = None,
                 origin_unavailable_detection_level: Optional[str] = None,
                 origin_unavailable_include_query_string: Optional[bool] = None,
                 origin_unavailable_modified_path: Optional[str] = None,
                 origin_unavailable_modify_request_path: Optional[bool] = None,
                 origin_unavailable_protocol: Optional[str] = None,
                 origin_unavailable_recovery: Optional[str] = None,
                 origin_unavailable_redirect_method: Optional[int] = None,
                 origin_unavailable_response_codes: Optional[Sequence[str]] = None,
                 origin_unavailable_retry_limit: Optional[str] = None,
                 origin_unresponsive_alternate_host: Optional[str] = None,
                 origin_unresponsive_backup_host: Optional[str] = None,
                 origin_unresponsive_blacklist_origin_ip: Optional[bool] = None,
                 origin_unresponsive_blacklist_window: Optional[str] = None,
                 origin_unresponsive_change_protocol: Optional[bool] = None,
                 origin_unresponsive_detection_level: Optional[str] = None,
                 origin_unresponsive_include_query_string: Optional[bool] = None,
                 origin_unresponsive_modified_path: Optional[str] = None,
                 origin_unresponsive_modify_request_path: Optional[bool] = None,
                 origin_unresponsive_protocol: Optional[str] = None,
                 origin_unresponsive_recovery: Optional[str] = None,
                 origin_unresponsive_redirect_method: Optional[int] = None,
                 origin_unresponsive_retry_limit: Optional[str] = None,
                 other_options: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cache_error_response is not None:
            pulumi.set(__self__, "cache_error_response", cache_error_response)
        if cache_window is not None:
            pulumi.set(__self__, "cache_window", cache_window)
        if client_response_code is not None:
            pulumi.set(__self__, "client_response_code", client_response_code)
        if detect_object_unavailable is not None:
            pulumi.set(__self__, "detect_object_unavailable", detect_object_unavailable)
        if detect_object_unavailable_title is not None:
            pulumi.set(__self__, "detect_object_unavailable_title", detect_object_unavailable_title)
        if detect_origin_unavailable is not None:
            pulumi.set(__self__, "detect_origin_unavailable", detect_origin_unavailable)
        if detect_origin_unavailable_title is not None:
            pulumi.set(__self__, "detect_origin_unavailable_title", detect_origin_unavailable_title)
        if detect_origin_unresponsive is not None:
            pulumi.set(__self__, "detect_origin_unresponsive", detect_origin_unresponsive)
        if detect_origin_unresponsive_title is not None:
            pulumi.set(__self__, "detect_origin_unresponsive_title", detect_origin_unresponsive_title)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_unavailable_alternate_host is not None:
            pulumi.set(__self__, "object_unavailable_alternate_host", object_unavailable_alternate_host)
        if object_unavailable_backup_host is not None:
            pulumi.set(__self__, "object_unavailable_backup_host", object_unavailable_backup_host)
        if object_unavailable_blacklist_origin_ip is not None:
            pulumi.set(__self__, "object_unavailable_blacklist_origin_ip", object_unavailable_blacklist_origin_ip)
        if object_unavailable_blacklist_window is not None:
            pulumi.set(__self__, "object_unavailable_blacklist_window", object_unavailable_blacklist_window)
        if object_unavailable_change_protocol is not None:
            pulumi.set(__self__, "object_unavailable_change_protocol", object_unavailable_change_protocol)
        if object_unavailable_detection_level is not None:
            pulumi.set(__self__, "object_unavailable_detection_level", object_unavailable_detection_level)
        if object_unavailable_include_query_string is not None:
            pulumi.set(__self__, "object_unavailable_include_query_string", object_unavailable_include_query_string)
        if object_unavailable_modified_path is not None:
            pulumi.set(__self__, "object_unavailable_modified_path", object_unavailable_modified_path)
        if object_unavailable_modify_request_path is not None:
            pulumi.set(__self__, "object_unavailable_modify_request_path", object_unavailable_modify_request_path)
        if object_unavailable_protocol is not None:
            pulumi.set(__self__, "object_unavailable_protocol", object_unavailable_protocol)
        if object_unavailable_recovery is not None:
            pulumi.set(__self__, "object_unavailable_recovery", object_unavailable_recovery)
        if object_unavailable_redirect_method is not None:
            pulumi.set(__self__, "object_unavailable_redirect_method", object_unavailable_redirect_method)
        if object_unavailable_response_codes is not None:
            pulumi.set(__self__, "object_unavailable_response_codes", object_unavailable_response_codes)
        if object_unavailable_retry_limit is not None:
            pulumi.set(__self__, "object_unavailable_retry_limit", object_unavailable_retry_limit)
        if origin_unavailable_alternate_host is not None:
            pulumi.set(__self__, "origin_unavailable_alternate_host", origin_unavailable_alternate_host)
        if origin_unavailable_backup_host is not None:
            pulumi.set(__self__, "origin_unavailable_backup_host", origin_unavailable_backup_host)
        if origin_unavailable_blacklist_origin_ip is not None:
            pulumi.set(__self__, "origin_unavailable_blacklist_origin_ip", origin_unavailable_blacklist_origin_ip)
        if origin_unavailable_blacklist_window is not None:
            pulumi.set(__self__, "origin_unavailable_blacklist_window", origin_unavailable_blacklist_window)
        if origin_unavailable_change_protocol is not None:
            pulumi.set(__self__, "origin_unavailable_change_protocol", origin_unavailable_change_protocol)
        if origin_unavailable_detection_level is not None:
            pulumi.set(__self__, "origin_unavailable_detection_level", origin_unavailable_detection_level)
        if origin_unavailable_include_query_string is not None:
            pulumi.set(__self__, "origin_unavailable_include_query_string", origin_unavailable_include_query_string)
        if origin_unavailable_modified_path is not None:
            pulumi.set(__self__, "origin_unavailable_modified_path", origin_unavailable_modified_path)
        if origin_unavailable_modify_request_path is not None:
            pulumi.set(__self__, "origin_unavailable_modify_request_path", origin_unavailable_modify_request_path)
        if origin_unavailable_protocol is not None:
            pulumi.set(__self__, "origin_unavailable_protocol", origin_unavailable_protocol)
        if origin_unavailable_recovery is not None:
            pulumi.set(__self__, "origin_unavailable_recovery", origin_unavailable_recovery)
        if origin_unavailable_redirect_method is not None:
            pulumi.set(__self__, "origin_unavailable_redirect_method", origin_unavailable_redirect_method)
        if origin_unavailable_response_codes is not None:
            pulumi.set(__self__, "origin_unavailable_response_codes", origin_unavailable_response_codes)
        if origin_unavailable_retry_limit is not None:
            pulumi.set(__self__, "origin_unavailable_retry_limit", origin_unavailable_retry_limit)
        if origin_unresponsive_alternate_host is not None:
            pulumi.set(__self__, "origin_unresponsive_alternate_host", origin_unresponsive_alternate_host)
        if origin_unresponsive_backup_host is not None:
            pulumi.set(__self__, "origin_unresponsive_backup_host", origin_unresponsive_backup_host)
        if origin_unresponsive_blacklist_origin_ip is not None:
            pulumi.set(__self__, "origin_unresponsive_blacklist_origin_ip", origin_unresponsive_blacklist_origin_ip)
        if origin_unresponsive_blacklist_window is not None:
            pulumi.set(__self__, "origin_unresponsive_blacklist_window", origin_unresponsive_blacklist_window)
        if origin_unresponsive_change_protocol is not None:
            pulumi.set(__self__, "origin_unresponsive_change_protocol", origin_unresponsive_change_protocol)
        if origin_unresponsive_detection_level is not None:
            pulumi.set(__self__, "origin_unresponsive_detection_level", origin_unresponsive_detection_level)
        if origin_unresponsive_include_query_string is not None:
            pulumi.set(__self__, "origin_unresponsive_include_query_string", origin_unresponsive_include_query_string)
        if origin_unresponsive_modified_path is not None:
            pulumi.set(__self__, "origin_unresponsive_modified_path", origin_unresponsive_modified_path)
        if origin_unresponsive_modify_request_path is not None:
            pulumi.set(__self__, "origin_unresponsive_modify_request_path", origin_unresponsive_modify_request_path)
        if origin_unresponsive_protocol is not None:
            pulumi.set(__self__, "origin_unresponsive_protocol", origin_unresponsive_protocol)
        if origin_unresponsive_recovery is not None:
            pulumi.set(__self__, "origin_unresponsive_recovery", origin_unresponsive_recovery)
        if origin_unresponsive_redirect_method is not None:
            pulumi.set(__self__, "origin_unresponsive_redirect_method", origin_unresponsive_redirect_method)
        if origin_unresponsive_retry_limit is not None:
            pulumi.set(__self__, "origin_unresponsive_retry_limit", origin_unresponsive_retry_limit)
        if other_options is not None:
            pulumi.set(__self__, "other_options", other_options)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cacheErrorResponse")
    def cache_error_response(self) -> Optional[bool]:
        return pulumi.get(self, "cache_error_response")

    @cache_error_response.setter
    def cache_error_response(self, value: Optional[bool]):
        pulumi.set(self, "cache_error_response", value)

    @property
    @pulumi.getter(name="cacheWindow")
    def cache_window(self) -> Optional[str]:
        return pulumi.get(self, "cache_window")

    @cache_window.setter
    def cache_window(self, value: Optional[str]):
        pulumi.set(self, "cache_window", value)

    @property
    @pulumi.getter(name="clientResponseCode")
    def client_response_code(self) -> Optional[str]:
        return pulumi.get(self, "client_response_code")

    @client_response_code.setter
    def client_response_code(self, value: Optional[str]):
        pulumi.set(self, "client_response_code", value)

    @property
    @pulumi.getter(name="detectObjectUnavailable")
    def detect_object_unavailable(self) -> Optional[bool]:
        return pulumi.get(self, "detect_object_unavailable")

    @detect_object_unavailable.setter
    def detect_object_unavailable(self, value: Optional[bool]):
        pulumi.set(self, "detect_object_unavailable", value)

    @property
    @pulumi.getter(name="detectObjectUnavailableTitle")
    def detect_object_unavailable_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_object_unavailable_title")

    @detect_object_unavailable_title.setter
    def detect_object_unavailable_title(self, value: Optional[str]):
        pulumi.set(self, "detect_object_unavailable_title", value)

    @property
    @pulumi.getter(name="detectOriginUnavailable")
    def detect_origin_unavailable(self) -> Optional[bool]:
        return pulumi.get(self, "detect_origin_unavailable")

    @detect_origin_unavailable.setter
    def detect_origin_unavailable(self, value: Optional[bool]):
        pulumi.set(self, "detect_origin_unavailable", value)

    @property
    @pulumi.getter(name="detectOriginUnavailableTitle")
    def detect_origin_unavailable_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_origin_unavailable_title")

    @detect_origin_unavailable_title.setter
    def detect_origin_unavailable_title(self, value: Optional[str]):
        pulumi.set(self, "detect_origin_unavailable_title", value)

    @property
    @pulumi.getter(name="detectOriginUnresponsive")
    def detect_origin_unresponsive(self) -> Optional[bool]:
        return pulumi.get(self, "detect_origin_unresponsive")

    @detect_origin_unresponsive.setter
    def detect_origin_unresponsive(self, value: Optional[bool]):
        pulumi.set(self, "detect_origin_unresponsive", value)

    @property
    @pulumi.getter(name="detectOriginUnresponsiveTitle")
    def detect_origin_unresponsive_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_origin_unresponsive_title")

    @detect_origin_unresponsive_title.setter
    def detect_origin_unresponsive_title(self, value: Optional[str]):
        pulumi.set(self, "detect_origin_unresponsive_title", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="objectUnavailableAlternateHost")
    def object_unavailable_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_alternate_host")

    @object_unavailable_alternate_host.setter
    def object_unavailable_alternate_host(self, value: Optional[str]):
        pulumi.set(self, "object_unavailable_alternate_host", value)

    @property
    @pulumi.getter(name="objectUnavailableBackupHost")
    def object_unavailable_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_backup_host")

    @object_unavailable_backup_host.setter
    def object_unavailable_backup_host(self, value: Optional[str]):
        pulumi.set(self, "object_unavailable_backup_host", value)

    @property
    @pulumi.getter(name="objectUnavailableBlacklistOriginIp")
    def object_unavailable_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_blacklist_origin_ip")

    @object_unavailable_blacklist_origin_ip.setter
    def object_unavailable_blacklist_origin_ip(self, value: Optional[bool]):
        pulumi.set(self, "object_unavailable_blacklist_origin_ip", value)

    @property
    @pulumi.getter(name="objectUnavailableBlacklistWindow")
    def object_unavailable_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_blacklist_window")

    @object_unavailable_blacklist_window.setter
    def object_unavailable_blacklist_window(self, value: Optional[str]):
        pulumi.set(self, "object_unavailable_blacklist_window", value)

    @property
    @pulumi.getter(name="objectUnavailableChangeProtocol")
    def object_unavailable_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_change_protocol")

    @object_unavailable_change_protocol.setter
    def object_unavailable_change_protocol(self, value: Optional[bool]):
        pulumi.set(self, "object_unavailable_change_protocol", value)

    @property
    @pulumi.getter(name="objectUnavailableDetectionLevel")
    def object_unavailable_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_detection_level")

    @object_unavailable_detection_level.setter
    def object_unavailable_detection_level(self, value: Optional[str]):
        pulumi.set(self, "object_unavailable_detection_level", value)

    @property
    @pulumi.getter(name="objectUnavailableIncludeQueryString")
    def object_unavailable_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_include_query_string")

    @object_unavailable_include_query_string.setter
    def object_unavailable_include_query_string(self, value: Optional[bool]):
        pulumi.set(self, "object_unavailable_include_query_string", value)

    @property
    @pulumi.getter(name="objectUnavailableModifiedPath")
    def object_unavailable_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_modified_path")

    @object_unavailable_modified_path.setter
    def object_unavailable_modified_path(self, value: Optional[str]):
        pulumi.set(self, "object_unavailable_modified_path", value)

    @property
    @pulumi.getter(name="objectUnavailableModifyRequestPath")
    def object_unavailable_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_modify_request_path")

    @object_unavailable_modify_request_path.setter
    def object_unavailable_modify_request_path(self, value: Optional[bool]):
        pulumi.set(self, "object_unavailable_modify_request_path", value)

    @property
    @pulumi.getter(name="objectUnavailableProtocol")
    def object_unavailable_protocol(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_protocol")

    @object_unavailable_protocol.setter
    def object_unavailable_protocol(self, value: Optional[str]):
        pulumi.set(self, "object_unavailable_protocol", value)

    @property
    @pulumi.getter(name="objectUnavailableRecovery")
    def object_unavailable_recovery(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_recovery")

    @object_unavailable_recovery.setter
    def object_unavailable_recovery(self, value: Optional[str]):
        pulumi.set(self, "object_unavailable_recovery", value)

    @property
    @pulumi.getter(name="objectUnavailableRedirectMethod")
    def object_unavailable_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "object_unavailable_redirect_method")

    @object_unavailable_redirect_method.setter
    def object_unavailable_redirect_method(self, value: Optional[int]):
        pulumi.set(self, "object_unavailable_redirect_method", value)

    @property
    @pulumi.getter(name="objectUnavailableResponseCodes")
    def object_unavailable_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "object_unavailable_response_codes")

    @object_unavailable_response_codes.setter
    def object_unavailable_response_codes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "object_unavailable_response_codes", value)

    @property
    @pulumi.getter(name="objectUnavailableRetryLimit")
    def object_unavailable_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_retry_limit")

    @object_unavailable_retry_limit.setter
    def object_unavailable_retry_limit(self, value: Optional[str]):
        pulumi.set(self, "object_unavailable_retry_limit", value)

    @property
    @pulumi.getter(name="originUnavailableAlternateHost")
    def origin_unavailable_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_alternate_host")

    @origin_unavailable_alternate_host.setter
    def origin_unavailable_alternate_host(self, value: Optional[str]):
        pulumi.set(self, "origin_unavailable_alternate_host", value)

    @property
    @pulumi.getter(name="originUnavailableBackupHost")
    def origin_unavailable_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_backup_host")

    @origin_unavailable_backup_host.setter
    def origin_unavailable_backup_host(self, value: Optional[str]):
        pulumi.set(self, "origin_unavailable_backup_host", value)

    @property
    @pulumi.getter(name="originUnavailableBlacklistOriginIp")
    def origin_unavailable_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_blacklist_origin_ip")

    @origin_unavailable_blacklist_origin_ip.setter
    def origin_unavailable_blacklist_origin_ip(self, value: Optional[bool]):
        pulumi.set(self, "origin_unavailable_blacklist_origin_ip", value)

    @property
    @pulumi.getter(name="originUnavailableBlacklistWindow")
    def origin_unavailable_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_blacklist_window")

    @origin_unavailable_blacklist_window.setter
    def origin_unavailable_blacklist_window(self, value: Optional[str]):
        pulumi.set(self, "origin_unavailable_blacklist_window", value)

    @property
    @pulumi.getter(name="originUnavailableChangeProtocol")
    def origin_unavailable_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_change_protocol")

    @origin_unavailable_change_protocol.setter
    def origin_unavailable_change_protocol(self, value: Optional[bool]):
        pulumi.set(self, "origin_unavailable_change_protocol", value)

    @property
    @pulumi.getter(name="originUnavailableDetectionLevel")
    def origin_unavailable_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_detection_level")

    @origin_unavailable_detection_level.setter
    def origin_unavailable_detection_level(self, value: Optional[str]):
        pulumi.set(self, "origin_unavailable_detection_level", value)

    @property
    @pulumi.getter(name="originUnavailableIncludeQueryString")
    def origin_unavailable_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_include_query_string")

    @origin_unavailable_include_query_string.setter
    def origin_unavailable_include_query_string(self, value: Optional[bool]):
        pulumi.set(self, "origin_unavailable_include_query_string", value)

    @property
    @pulumi.getter(name="originUnavailableModifiedPath")
    def origin_unavailable_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_modified_path")

    @origin_unavailable_modified_path.setter
    def origin_unavailable_modified_path(self, value: Optional[str]):
        pulumi.set(self, "origin_unavailable_modified_path", value)

    @property
    @pulumi.getter(name="originUnavailableModifyRequestPath")
    def origin_unavailable_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_modify_request_path")

    @origin_unavailable_modify_request_path.setter
    def origin_unavailable_modify_request_path(self, value: Optional[bool]):
        pulumi.set(self, "origin_unavailable_modify_request_path", value)

    @property
    @pulumi.getter(name="originUnavailableProtocol")
    def origin_unavailable_protocol(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_protocol")

    @origin_unavailable_protocol.setter
    def origin_unavailable_protocol(self, value: Optional[str]):
        pulumi.set(self, "origin_unavailable_protocol", value)

    @property
    @pulumi.getter(name="originUnavailableRecovery")
    def origin_unavailable_recovery(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_recovery")

    @origin_unavailable_recovery.setter
    def origin_unavailable_recovery(self, value: Optional[str]):
        pulumi.set(self, "origin_unavailable_recovery", value)

    @property
    @pulumi.getter(name="originUnavailableRedirectMethod")
    def origin_unavailable_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "origin_unavailable_redirect_method")

    @origin_unavailable_redirect_method.setter
    def origin_unavailable_redirect_method(self, value: Optional[int]):
        pulumi.set(self, "origin_unavailable_redirect_method", value)

    @property
    @pulumi.getter(name="originUnavailableResponseCodes")
    def origin_unavailable_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "origin_unavailable_response_codes")

    @origin_unavailable_response_codes.setter
    def origin_unavailable_response_codes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "origin_unavailable_response_codes", value)

    @property
    @pulumi.getter(name="originUnavailableRetryLimit")
    def origin_unavailable_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_retry_limit")

    @origin_unavailable_retry_limit.setter
    def origin_unavailable_retry_limit(self, value: Optional[str]):
        pulumi.set(self, "origin_unavailable_retry_limit", value)

    @property
    @pulumi.getter(name="originUnresponsiveAlternateHost")
    def origin_unresponsive_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_alternate_host")

    @origin_unresponsive_alternate_host.setter
    def origin_unresponsive_alternate_host(self, value: Optional[str]):
        pulumi.set(self, "origin_unresponsive_alternate_host", value)

    @property
    @pulumi.getter(name="originUnresponsiveBackupHost")
    def origin_unresponsive_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_backup_host")

    @origin_unresponsive_backup_host.setter
    def origin_unresponsive_backup_host(self, value: Optional[str]):
        pulumi.set(self, "origin_unresponsive_backup_host", value)

    @property
    @pulumi.getter(name="originUnresponsiveBlacklistOriginIp")
    def origin_unresponsive_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_blacklist_origin_ip")

    @origin_unresponsive_blacklist_origin_ip.setter
    def origin_unresponsive_blacklist_origin_ip(self, value: Optional[bool]):
        pulumi.set(self, "origin_unresponsive_blacklist_origin_ip", value)

    @property
    @pulumi.getter(name="originUnresponsiveBlacklistWindow")
    def origin_unresponsive_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_blacklist_window")

    @origin_unresponsive_blacklist_window.setter
    def origin_unresponsive_blacklist_window(self, value: Optional[str]):
        pulumi.set(self, "origin_unresponsive_blacklist_window", value)

    @property
    @pulumi.getter(name="originUnresponsiveChangeProtocol")
    def origin_unresponsive_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_change_protocol")

    @origin_unresponsive_change_protocol.setter
    def origin_unresponsive_change_protocol(self, value: Optional[bool]):
        pulumi.set(self, "origin_unresponsive_change_protocol", value)

    @property
    @pulumi.getter(name="originUnresponsiveDetectionLevel")
    def origin_unresponsive_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_detection_level")

    @origin_unresponsive_detection_level.setter
    def origin_unresponsive_detection_level(self, value: Optional[str]):
        pulumi.set(self, "origin_unresponsive_detection_level", value)

    @property
    @pulumi.getter(name="originUnresponsiveIncludeQueryString")
    def origin_unresponsive_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_include_query_string")

    @origin_unresponsive_include_query_string.setter
    def origin_unresponsive_include_query_string(self, value: Optional[bool]):
        pulumi.set(self, "origin_unresponsive_include_query_string", value)

    @property
    @pulumi.getter(name="originUnresponsiveModifiedPath")
    def origin_unresponsive_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_modified_path")

    @origin_unresponsive_modified_path.setter
    def origin_unresponsive_modified_path(self, value: Optional[str]):
        pulumi.set(self, "origin_unresponsive_modified_path", value)

    @property
    @pulumi.getter(name="originUnresponsiveModifyRequestPath")
    def origin_unresponsive_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_modify_request_path")

    @origin_unresponsive_modify_request_path.setter
    def origin_unresponsive_modify_request_path(self, value: Optional[bool]):
        pulumi.set(self, "origin_unresponsive_modify_request_path", value)

    @property
    @pulumi.getter(name="originUnresponsiveProtocol")
    def origin_unresponsive_protocol(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_protocol")

    @origin_unresponsive_protocol.setter
    def origin_unresponsive_protocol(self, value: Optional[str]):
        pulumi.set(self, "origin_unresponsive_protocol", value)

    @property
    @pulumi.getter(name="originUnresponsiveRecovery")
    def origin_unresponsive_recovery(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_recovery")

    @origin_unresponsive_recovery.setter
    def origin_unresponsive_recovery(self, value: Optional[str]):
        pulumi.set(self, "origin_unresponsive_recovery", value)

    @property
    @pulumi.getter(name="originUnresponsiveRedirectMethod")
    def origin_unresponsive_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "origin_unresponsive_redirect_method")

    @origin_unresponsive_redirect_method.setter
    def origin_unresponsive_redirect_method(self, value: Optional[int]):
        pulumi.set(self, "origin_unresponsive_redirect_method", value)

    @property
    @pulumi.getter(name="originUnresponsiveRetryLimit")
    def origin_unresponsive_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_retry_limit")

    @origin_unresponsive_retry_limit.setter
    def origin_unresponsive_retry_limit(self, value: Optional[str]):
        pulumi.set(self, "origin_unresponsive_retry_limit", value)

    @property
    @pulumi.getter(name="otherOptions")
    def other_options(self) -> Optional[str]:
        return pulumi.get(self, "other_options")

    @other_options.setter
    def other_options(self, value: Optional[str]):
        pulumi.set(self, "other_options", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMetadataCachingArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMobileSdkPerformanceArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 secondary_multipath_to_origin: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if secondary_multipath_to_origin is not None:
            pulumi.set(__self__, "secondary_multipath_to_origin", secondary_multipath_to_origin)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="secondaryMultipathToOrigin")
    def secondary_multipath_to_origin(self) -> Optional[bool]:
        return pulumi.get(self, "secondary_multipath_to_origin")

    @secondary_multipath_to_origin.setter
    def secondary_multipath_to_origin(self, value: Optional[bool]):
        pulumi.set(self, "secondary_multipath_to_origin", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingRequestHeaderArgs:
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 standard_pass_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if avoid_duplicate_headers is not None:
            pulumi.set(__self__, "avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if new_header_value is not None:
            pulumi.set(__self__, "new_header_value", new_header_value)
        if standard_add_header_name is not None:
            pulumi.set(__self__, "standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            pulumi.set(__self__, "standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            pulumi.set(__self__, "standard_modify_header_name", standard_modify_header_name)
        if standard_pass_header_name is not None:
            pulumi.set(__self__, "standard_pass_header_name", standard_pass_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @avoid_duplicate_headers.setter
    def avoid_duplicate_headers(self, value: Optional[bool]):
        pulumi.set(self, "avoid_duplicate_headers", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[str]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: Optional[str]):
        pulumi.set(self, "header_value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @new_header_value.setter
    def new_header_value(self, value: Optional[str]):
        pulumi.set(self, "new_header_value", value)

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @standard_add_header_name.setter
    def standard_add_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_add_header_name", value)

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @standard_delete_header_name.setter
    def standard_delete_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_delete_header_name", value)

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @standard_modify_header_name.setter
    def standard_modify_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_modify_header_name", value)

    @property
    @pulumi.getter(name="standardPassHeaderName")
    def standard_pass_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_pass_header_name")

    @standard_pass_header_name.setter
    def standard_pass_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_pass_header_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingResponseHeaderArgs:
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 standard_pass_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if avoid_duplicate_headers is not None:
            pulumi.set(__self__, "avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if new_header_value is not None:
            pulumi.set(__self__, "new_header_value", new_header_value)
        if standard_add_header_name is not None:
            pulumi.set(__self__, "standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            pulumi.set(__self__, "standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            pulumi.set(__self__, "standard_modify_header_name", standard_modify_header_name)
        if standard_pass_header_name is not None:
            pulumi.set(__self__, "standard_pass_header_name", standard_pass_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @avoid_duplicate_headers.setter
    def avoid_duplicate_headers(self, value: Optional[bool]):
        pulumi.set(self, "avoid_duplicate_headers", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[str]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: Optional[str]):
        pulumi.set(self, "header_value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @new_header_value.setter
    def new_header_value(self, value: Optional[str]):
        pulumi.set(self, "new_header_value", value)

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @standard_add_header_name.setter
    def standard_add_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_add_header_name", value)

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @standard_delete_header_name.setter
    def standard_delete_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_delete_header_name", value)

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @standard_modify_header_name.setter
    def standard_modify_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_modify_header_name", value)

    @property
    @pulumi.getter(name="standardPassHeaderName")
    def standard_pass_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_pass_header_name")

    @standard_pass_header_name.setter
    def standard_pass_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_pass_header_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingRequestHeaderArgs:
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_multiple: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 regex_header_match: Optional[str] = None,
                 regex_header_replace: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if avoid_duplicate_headers is not None:
            pulumi.set(__self__, "avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_multiple is not None:
            pulumi.set(__self__, "match_multiple", match_multiple)
        if new_header_value is not None:
            pulumi.set(__self__, "new_header_value", new_header_value)
        if regex_header_match is not None:
            pulumi.set(__self__, "regex_header_match", regex_header_match)
        if regex_header_replace is not None:
            pulumi.set(__self__, "regex_header_replace", regex_header_replace)
        if standard_add_header_name is not None:
            pulumi.set(__self__, "standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            pulumi.set(__self__, "standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            pulumi.set(__self__, "standard_modify_header_name", standard_modify_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @avoid_duplicate_headers.setter
    def avoid_duplicate_headers(self, value: Optional[bool]):
        pulumi.set(self, "avoid_duplicate_headers", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[str]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: Optional[str]):
        pulumi.set(self, "header_value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @match_multiple.setter
    def match_multiple(self, value: Optional[bool]):
        pulumi.set(self, "match_multiple", value)

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @new_header_value.setter
    def new_header_value(self, value: Optional[str]):
        pulumi.set(self, "new_header_value", value)

    @property
    @pulumi.getter(name="regexHeaderMatch")
    def regex_header_match(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_match")

    @regex_header_match.setter
    def regex_header_match(self, value: Optional[str]):
        pulumi.set(self, "regex_header_match", value)

    @property
    @pulumi.getter(name="regexHeaderReplace")
    def regex_header_replace(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_replace")

    @regex_header_replace.setter
    def regex_header_replace(self, value: Optional[str]):
        pulumi.set(self, "regex_header_replace", value)

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @standard_add_header_name.setter
    def standard_add_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_add_header_name", value)

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @standard_delete_header_name.setter
    def standard_delete_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_delete_header_name", value)

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @standard_modify_header_name.setter
    def standard_modify_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_modify_header_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingResponseHeaderArgs:
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_multiple: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 regex_header_match: Optional[str] = None,
                 regex_header_replace: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if avoid_duplicate_headers is not None:
            pulumi.set(__self__, "avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_multiple is not None:
            pulumi.set(__self__, "match_multiple", match_multiple)
        if new_header_value is not None:
            pulumi.set(__self__, "new_header_value", new_header_value)
        if regex_header_match is not None:
            pulumi.set(__self__, "regex_header_match", regex_header_match)
        if regex_header_replace is not None:
            pulumi.set(__self__, "regex_header_replace", regex_header_replace)
        if standard_add_header_name is not None:
            pulumi.set(__self__, "standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            pulumi.set(__self__, "standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            pulumi.set(__self__, "standard_modify_header_name", standard_modify_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @avoid_duplicate_headers.setter
    def avoid_duplicate_headers(self, value: Optional[bool]):
        pulumi.set(self, "avoid_duplicate_headers", value)

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @custom_header_name.setter
    def custom_header_name(self, value: Optional[str]):
        pulumi.set(self, "custom_header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: Optional[str]):
        pulumi.set(self, "header_value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @match_multiple.setter
    def match_multiple(self, value: Optional[bool]):
        pulumi.set(self, "match_multiple", value)

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @new_header_value.setter
    def new_header_value(self, value: Optional[str]):
        pulumi.set(self, "new_header_value", value)

    @property
    @pulumi.getter(name="regexHeaderMatch")
    def regex_header_match(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_match")

    @regex_header_match.setter
    def regex_header_match(self, value: Optional[str]):
        pulumi.set(self, "regex_header_match", value)

    @property
    @pulumi.getter(name="regexHeaderReplace")
    def regex_header_replace(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_replace")

    @regex_header_replace.setter
    def regex_header_replace(self, value: Optional[str]):
        pulumi.set(self, "regex_header_replace", value)

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @standard_add_header_name.setter
    def standard_add_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_add_header_name", value)

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @standard_delete_header_name.setter
    def standard_delete_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_delete_header_name", value)

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @standard_modify_header_name.setter
    def standard_modify_header_name(self, value: Optional[str]):
        pulumi.set(self, "standard_modify_header_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorModifyViaHeaderArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modification_option: Optional[str] = None,
                 rename_header_to: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if modification_option is not None:
            pulumi.set(__self__, "modification_option", modification_option)
        if rename_header_to is not None:
            pulumi.set(__self__, "rename_header_to", rename_header_to)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="modificationOption")
    def modification_option(self) -> Optional[str]:
        return pulumi.get(self, "modification_option")

    @modification_option.setter
    def modification_option(self, value: Optional[str]):
        pulumi.set(self, "modification_option", value)

    @property
    @pulumi.getter(name="renameHeaderTo")
    def rename_header_to(self) -> Optional[str]:
        return pulumi.get(self, "rename_header_to")

    @rename_header_to.setter
    def rename_header_to(self, value: Optional[str]):
        pulumi.set(self, "rename_header_to", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginArgs:
    def __init__(__self__, *,
                 cache_key_hostname: Optional[str] = None,
                 compress: Optional[bool] = None,
                 custom_certificate_authorities: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityArgs']] = None,
                 custom_certificates: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateArgs']] = None,
                 custom_forward_host_header: Optional[str] = None,
                 custom_valid_cn_values: Optional[Sequence[str]] = None,
                 enable_true_client_ip: Optional[bool] = None,
                 forward_host_header: Optional[str] = None,
                 hostname: Optional[str] = None,
                 http_port: Optional[int] = None,
                 https_port: Optional[int] = None,
                 ip_version: Optional[str] = None,
                 locked: Optional[bool] = None,
                 mslorigin: Optional[str] = None,
                 net_storage: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginNetStorageArgs'] = None,
                 origin_certificate: Optional[str] = None,
                 origin_certs_to_honor: Optional[str] = None,
                 origin_id: Optional[str] = None,
                 origin_sni: Optional[bool] = None,
                 origin_type: Optional[str] = None,
                 ports: Optional[str] = None,
                 saas_cname_enabled: Optional[bool] = None,
                 saas_cname_level: Optional[int] = None,
                 saas_cookie: Optional[str] = None,
                 saas_query_string: Optional[str] = None,
                 saas_regex: Optional[str] = None,
                 saas_replace: Optional[str] = None,
                 saas_suffix: Optional[str] = None,
                 saas_type: Optional[str] = None,
                 second_hostname: Optional[str] = None,
                 second_hostname_enabled: Optional[bool] = None,
                 standard_certificate_authorities: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 true_client_ip_client_setting: Optional[bool] = None,
                 true_client_ip_header: Optional[str] = None,
                 use_unique_cache_key: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 verification_mode: Optional[str] = None):
        if cache_key_hostname is not None:
            pulumi.set(__self__, "cache_key_hostname", cache_key_hostname)
        if compress is not None:
            pulumi.set(__self__, "compress", compress)
        if custom_certificate_authorities is not None:
            pulumi.set(__self__, "custom_certificate_authorities", custom_certificate_authorities)
        if custom_certificates is not None:
            pulumi.set(__self__, "custom_certificates", custom_certificates)
        if custom_forward_host_header is not None:
            pulumi.set(__self__, "custom_forward_host_header", custom_forward_host_header)
        if custom_valid_cn_values is not None:
            pulumi.set(__self__, "custom_valid_cn_values", custom_valid_cn_values)
        if enable_true_client_ip is not None:
            pulumi.set(__self__, "enable_true_client_ip", enable_true_client_ip)
        if forward_host_header is not None:
            pulumi.set(__self__, "forward_host_header", forward_host_header)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if mslorigin is not None:
            pulumi.set(__self__, "mslorigin", mslorigin)
        if net_storage is not None:
            pulumi.set(__self__, "net_storage", net_storage)
        if origin_certificate is not None:
            pulumi.set(__self__, "origin_certificate", origin_certificate)
        if origin_certs_to_honor is not None:
            pulumi.set(__self__, "origin_certs_to_honor", origin_certs_to_honor)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if origin_sni is not None:
            pulumi.set(__self__, "origin_sni", origin_sni)
        if origin_type is not None:
            pulumi.set(__self__, "origin_type", origin_type)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if saas_cname_enabled is not None:
            pulumi.set(__self__, "saas_cname_enabled", saas_cname_enabled)
        if saas_cname_level is not None:
            pulumi.set(__self__, "saas_cname_level", saas_cname_level)
        if saas_cookie is not None:
            pulumi.set(__self__, "saas_cookie", saas_cookie)
        if saas_query_string is not None:
            pulumi.set(__self__, "saas_query_string", saas_query_string)
        if saas_regex is not None:
            pulumi.set(__self__, "saas_regex", saas_regex)
        if saas_replace is not None:
            pulumi.set(__self__, "saas_replace", saas_replace)
        if saas_suffix is not None:
            pulumi.set(__self__, "saas_suffix", saas_suffix)
        if saas_type is not None:
            pulumi.set(__self__, "saas_type", saas_type)
        if second_hostname is not None:
            pulumi.set(__self__, "second_hostname", second_hostname)
        if second_hostname_enabled is not None:
            pulumi.set(__self__, "second_hostname_enabled", second_hostname_enabled)
        if standard_certificate_authorities is not None:
            pulumi.set(__self__, "standard_certificate_authorities", standard_certificate_authorities)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if true_client_ip_client_setting is not None:
            pulumi.set(__self__, "true_client_ip_client_setting", true_client_ip_client_setting)
        if true_client_ip_header is not None:
            pulumi.set(__self__, "true_client_ip_header", true_client_ip_header)
        if use_unique_cache_key is not None:
            pulumi.set(__self__, "use_unique_cache_key", use_unique_cache_key)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if verification_mode is not None:
            pulumi.set(__self__, "verification_mode", verification_mode)

    @property
    @pulumi.getter(name="cacheKeyHostname")
    def cache_key_hostname(self) -> Optional[str]:
        return pulumi.get(self, "cache_key_hostname")

    @cache_key_hostname.setter
    def cache_key_hostname(self, value: Optional[str]):
        pulumi.set(self, "cache_key_hostname", value)

    @property
    @pulumi.getter
    def compress(self) -> Optional[bool]:
        return pulumi.get(self, "compress")

    @compress.setter
    def compress(self, value: Optional[bool]):
        pulumi.set(self, "compress", value)

    @property
    @pulumi.getter(name="customCertificateAuthorities")
    def custom_certificate_authorities(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityArgs']]:
        return pulumi.get(self, "custom_certificate_authorities")

    @custom_certificate_authorities.setter
    def custom_certificate_authorities(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityArgs']]):
        pulumi.set(self, "custom_certificate_authorities", value)

    @property
    @pulumi.getter(name="customCertificates")
    def custom_certificates(self) -> Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateArgs']]:
        return pulumi.get(self, "custom_certificates")

    @custom_certificates.setter
    def custom_certificates(self, value: Optional[Sequence['GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateArgs']]):
        pulumi.set(self, "custom_certificates", value)

    @property
    @pulumi.getter(name="customForwardHostHeader")
    def custom_forward_host_header(self) -> Optional[str]:
        return pulumi.get(self, "custom_forward_host_header")

    @custom_forward_host_header.setter
    def custom_forward_host_header(self, value: Optional[str]):
        pulumi.set(self, "custom_forward_host_header", value)

    @property
    @pulumi.getter(name="customValidCnValues")
    def custom_valid_cn_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_valid_cn_values")

    @custom_valid_cn_values.setter
    def custom_valid_cn_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "custom_valid_cn_values", value)

    @property
    @pulumi.getter(name="enableTrueClientIp")
    def enable_true_client_ip(self) -> Optional[bool]:
        return pulumi.get(self, "enable_true_client_ip")

    @enable_true_client_ip.setter
    def enable_true_client_ip(self, value: Optional[bool]):
        pulumi.set(self, "enable_true_client_ip", value)

    @property
    @pulumi.getter(name="forwardHostHeader")
    def forward_host_header(self) -> Optional[str]:
        return pulumi.get(self, "forward_host_header")

    @forward_host_header.setter
    def forward_host_header(self, value: Optional[str]):
        pulumi.set(self, "forward_host_header", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[int]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[int]:
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[int]):
        pulumi.set(self, "https_port", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[str]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def mslorigin(self) -> Optional[str]:
        return pulumi.get(self, "mslorigin")

    @mslorigin.setter
    def mslorigin(self, value: Optional[str]):
        pulumi.set(self, "mslorigin", value)

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginNetStorageArgs']:
        return pulumi.get(self, "net_storage")

    @net_storage.setter
    def net_storage(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorOriginNetStorageArgs']):
        pulumi.set(self, "net_storage", value)

    @property
    @pulumi.getter(name="originCertificate")
    def origin_certificate(self) -> Optional[str]:
        return pulumi.get(self, "origin_certificate")

    @origin_certificate.setter
    def origin_certificate(self, value: Optional[str]):
        pulumi.set(self, "origin_certificate", value)

    @property
    @pulumi.getter(name="originCertsToHonor")
    def origin_certs_to_honor(self) -> Optional[str]:
        return pulumi.get(self, "origin_certs_to_honor")

    @origin_certs_to_honor.setter
    def origin_certs_to_honor(self, value: Optional[str]):
        pulumi.set(self, "origin_certs_to_honor", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: Optional[str]):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="originSni")
    def origin_sni(self) -> Optional[bool]:
        return pulumi.get(self, "origin_sni")

    @origin_sni.setter
    def origin_sni(self, value: Optional[bool]):
        pulumi.set(self, "origin_sni", value)

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional[str]:
        return pulumi.get(self, "origin_type")

    @origin_type.setter
    def origin_type(self, value: Optional[str]):
        pulumi.set(self, "origin_type", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[str]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[str]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="saasCnameEnabled")
    def saas_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "saas_cname_enabled")

    @saas_cname_enabled.setter
    def saas_cname_enabled(self, value: Optional[bool]):
        pulumi.set(self, "saas_cname_enabled", value)

    @property
    @pulumi.getter(name="saasCnameLevel")
    def saas_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "saas_cname_level")

    @saas_cname_level.setter
    def saas_cname_level(self, value: Optional[int]):
        pulumi.set(self, "saas_cname_level", value)

    @property
    @pulumi.getter(name="saasCookie")
    def saas_cookie(self) -> Optional[str]:
        return pulumi.get(self, "saas_cookie")

    @saas_cookie.setter
    def saas_cookie(self, value: Optional[str]):
        pulumi.set(self, "saas_cookie", value)

    @property
    @pulumi.getter(name="saasQueryString")
    def saas_query_string(self) -> Optional[str]:
        return pulumi.get(self, "saas_query_string")

    @saas_query_string.setter
    def saas_query_string(self, value: Optional[str]):
        pulumi.set(self, "saas_query_string", value)

    @property
    @pulumi.getter(name="saasRegex")
    def saas_regex(self) -> Optional[str]:
        return pulumi.get(self, "saas_regex")

    @saas_regex.setter
    def saas_regex(self, value: Optional[str]):
        pulumi.set(self, "saas_regex", value)

    @property
    @pulumi.getter(name="saasReplace")
    def saas_replace(self) -> Optional[str]:
        return pulumi.get(self, "saas_replace")

    @saas_replace.setter
    def saas_replace(self, value: Optional[str]):
        pulumi.set(self, "saas_replace", value)

    @property
    @pulumi.getter(name="saasSuffix")
    def saas_suffix(self) -> Optional[str]:
        return pulumi.get(self, "saas_suffix")

    @saas_suffix.setter
    def saas_suffix(self, value: Optional[str]):
        pulumi.set(self, "saas_suffix", value)

    @property
    @pulumi.getter(name="saasType")
    def saas_type(self) -> Optional[str]:
        return pulumi.get(self, "saas_type")

    @saas_type.setter
    def saas_type(self, value: Optional[str]):
        pulumi.set(self, "saas_type", value)

    @property
    @pulumi.getter(name="secondHostname")
    def second_hostname(self) -> Optional[str]:
        return pulumi.get(self, "second_hostname")

    @second_hostname.setter
    def second_hostname(self, value: Optional[str]):
        pulumi.set(self, "second_hostname", value)

    @property
    @pulumi.getter(name="secondHostnameEnabled")
    def second_hostname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "second_hostname_enabled")

    @second_hostname_enabled.setter
    def second_hostname_enabled(self, value: Optional[bool]):
        pulumi.set(self, "second_hostname_enabled", value)

    @property
    @pulumi.getter(name="standardCertificateAuthorities")
    def standard_certificate_authorities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "standard_certificate_authorities")

    @standard_certificate_authorities.setter
    def standard_certificate_authorities(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "standard_certificate_authorities", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="trueClientIpClientSetting")
    def true_client_ip_client_setting(self) -> Optional[bool]:
        return pulumi.get(self, "true_client_ip_client_setting")

    @true_client_ip_client_setting.setter
    def true_client_ip_client_setting(self, value: Optional[bool]):
        pulumi.set(self, "true_client_ip_client_setting", value)

    @property
    @pulumi.getter(name="trueClientIpHeader")
    def true_client_ip_header(self) -> Optional[str]:
        return pulumi.get(self, "true_client_ip_header")

    @true_client_ip_header.setter
    def true_client_ip_header(self, value: Optional[str]):
        pulumi.set(self, "true_client_ip_header", value)

    @property
    @pulumi.getter(name="useUniqueCacheKey")
    def use_unique_cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "use_unique_cache_key")

    @use_unique_cache_key.setter
    def use_unique_cache_key(self, value: Optional[bool]):
        pulumi.set(self, "use_unique_cache_key", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="verificationMode")
    def verification_mode(self) -> Optional[str]:
        return pulumi.get(self, "verification_mode")

    @verification_mode.setter
    def verification_mode(self, value: Optional[str]):
        pulumi.set(self, "verification_mode", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsArgs:
    def __init__(__self__, *,
                 access_key_encrypted_storage: Optional[bool] = None,
                 adc_title: Optional[str] = None,
                 authentication_method: Optional[str] = None,
                 authentication_method_title: Optional[str] = None,
                 aws_access_key_id: Optional[str] = None,
                 aws_access_key_version_guid: Optional[str] = None,
                 aws_ar_region: Optional[str] = None,
                 aws_host: Optional[str] = None,
                 aws_region: Optional[str] = None,
                 aws_secret_access_key: Optional[str] = None,
                 aws_service: Optional[str] = None,
                 country: Optional[str] = None,
                 custom_sign_strings: Optional[Sequence[str]] = None,
                 direct_connect_geo: Optional[str] = None,
                 encoding_version: Optional[int] = None,
                 end_point_service: Optional[str] = None,
                 gcs_access_key_version_guid: Optional[str] = None,
                 gcs_hmac_key_access_id: Optional[str] = None,
                 gcs_hmac_key_secret: Optional[str] = None,
                 hostname_tag: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 mslkey: Optional[str] = None,
                 mslname: Optional[str] = None,
                 nonce: Optional[str] = None,
                 origin_location_title: Optional[str] = None,
                 property_id_tag: Optional[bool] = None,
                 role_arn: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_custom_sign_string: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if access_key_encrypted_storage is not None:
            pulumi.set(__self__, "access_key_encrypted_storage", access_key_encrypted_storage)
        if adc_title is not None:
            pulumi.set(__self__, "adc_title", adc_title)
        if authentication_method is not None:
            pulumi.set(__self__, "authentication_method", authentication_method)
        if authentication_method_title is not None:
            pulumi.set(__self__, "authentication_method_title", authentication_method_title)
        if aws_access_key_id is not None:
            pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        if aws_access_key_version_guid is not None:
            pulumi.set(__self__, "aws_access_key_version_guid", aws_access_key_version_guid)
        if aws_ar_region is not None:
            pulumi.set(__self__, "aws_ar_region", aws_ar_region)
        if aws_host is not None:
            pulumi.set(__self__, "aws_host", aws_host)
        if aws_region is not None:
            pulumi.set(__self__, "aws_region", aws_region)
        if aws_secret_access_key is not None:
            pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        if aws_service is not None:
            pulumi.set(__self__, "aws_service", aws_service)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if custom_sign_strings is not None:
            pulumi.set(__self__, "custom_sign_strings", custom_sign_strings)
        if direct_connect_geo is not None:
            pulumi.set(__self__, "direct_connect_geo", direct_connect_geo)
        if encoding_version is not None:
            pulumi.set(__self__, "encoding_version", encoding_version)
        if end_point_service is not None:
            pulumi.set(__self__, "end_point_service", end_point_service)
        if gcs_access_key_version_guid is not None:
            pulumi.set(__self__, "gcs_access_key_version_guid", gcs_access_key_version_guid)
        if gcs_hmac_key_access_id is not None:
            pulumi.set(__self__, "gcs_hmac_key_access_id", gcs_hmac_key_access_id)
        if gcs_hmac_key_secret is not None:
            pulumi.set(__self__, "gcs_hmac_key_secret", gcs_hmac_key_secret)
        if hostname_tag is not None:
            pulumi.set(__self__, "hostname_tag", hostname_tag)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if mslkey is not None:
            pulumi.set(__self__, "mslkey", mslkey)
        if mslname is not None:
            pulumi.set(__self__, "mslname", mslname)
        if nonce is not None:
            pulumi.set(__self__, "nonce", nonce)
        if origin_location_title is not None:
            pulumi.set(__self__, "origin_location_title", origin_location_title)
        if property_id_tag is not None:
            pulumi.set(__self__, "property_id_tag", property_id_tag)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_custom_sign_string is not None:
            pulumi.set(__self__, "use_custom_sign_string", use_custom_sign_string)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accessKeyEncryptedStorage")
    def access_key_encrypted_storage(self) -> Optional[bool]:
        return pulumi.get(self, "access_key_encrypted_storage")

    @access_key_encrypted_storage.setter
    def access_key_encrypted_storage(self, value: Optional[bool]):
        pulumi.set(self, "access_key_encrypted_storage", value)

    @property
    @pulumi.getter(name="adcTitle")
    def adc_title(self) -> Optional[str]:
        return pulumi.get(self, "adc_title")

    @adc_title.setter
    def adc_title(self, value: Optional[str]):
        pulumi.set(self, "adc_title", value)

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> Optional[str]:
        return pulumi.get(self, "authentication_method")

    @authentication_method.setter
    def authentication_method(self, value: Optional[str]):
        pulumi.set(self, "authentication_method", value)

    @property
    @pulumi.getter(name="authenticationMethodTitle")
    def authentication_method_title(self) -> Optional[str]:
        return pulumi.get(self, "authentication_method_title")

    @authentication_method_title.setter
    def authentication_method_title(self, value: Optional[str]):
        pulumi.set(self, "authentication_method_title", value)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "aws_access_key_id")

    @aws_access_key_id.setter
    def aws_access_key_id(self, value: Optional[str]):
        pulumi.set(self, "aws_access_key_id", value)

    @property
    @pulumi.getter(name="awsAccessKeyVersionGuid")
    def aws_access_key_version_guid(self) -> Optional[str]:
        return pulumi.get(self, "aws_access_key_version_guid")

    @aws_access_key_version_guid.setter
    def aws_access_key_version_guid(self, value: Optional[str]):
        pulumi.set(self, "aws_access_key_version_guid", value)

    @property
    @pulumi.getter(name="awsArRegion")
    def aws_ar_region(self) -> Optional[str]:
        return pulumi.get(self, "aws_ar_region")

    @aws_ar_region.setter
    def aws_ar_region(self, value: Optional[str]):
        pulumi.set(self, "aws_ar_region", value)

    @property
    @pulumi.getter(name="awsHost")
    def aws_host(self) -> Optional[str]:
        return pulumi.get(self, "aws_host")

    @aws_host.setter
    def aws_host(self, value: Optional[str]):
        pulumi.set(self, "aws_host", value)

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[str]:
        return pulumi.get(self, "aws_region")

    @aws_region.setter
    def aws_region(self, value: Optional[str]):
        pulumi.set(self, "aws_region", value)

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "aws_secret_access_key")

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, value: Optional[str]):
        pulumi.set(self, "aws_secret_access_key", value)

    @property
    @pulumi.getter(name="awsService")
    def aws_service(self) -> Optional[str]:
        return pulumi.get(self, "aws_service")

    @aws_service.setter
    def aws_service(self, value: Optional[str]):
        pulumi.set(self, "aws_service", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="customSignStrings")
    def custom_sign_strings(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_sign_strings")

    @custom_sign_strings.setter
    def custom_sign_strings(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "custom_sign_strings", value)

    @property
    @pulumi.getter(name="directConnectGeo")
    def direct_connect_geo(self) -> Optional[str]:
        return pulumi.get(self, "direct_connect_geo")

    @direct_connect_geo.setter
    def direct_connect_geo(self, value: Optional[str]):
        pulumi.set(self, "direct_connect_geo", value)

    @property
    @pulumi.getter(name="encodingVersion")
    def encoding_version(self) -> Optional[int]:
        return pulumi.get(self, "encoding_version")

    @encoding_version.setter
    def encoding_version(self, value: Optional[int]):
        pulumi.set(self, "encoding_version", value)

    @property
    @pulumi.getter(name="endPointService")
    def end_point_service(self) -> Optional[str]:
        return pulumi.get(self, "end_point_service")

    @end_point_service.setter
    def end_point_service(self, value: Optional[str]):
        pulumi.set(self, "end_point_service", value)

    @property
    @pulumi.getter(name="gcsAccessKeyVersionGuid")
    def gcs_access_key_version_guid(self) -> Optional[str]:
        return pulumi.get(self, "gcs_access_key_version_guid")

    @gcs_access_key_version_guid.setter
    def gcs_access_key_version_guid(self, value: Optional[str]):
        pulumi.set(self, "gcs_access_key_version_guid", value)

    @property
    @pulumi.getter(name="gcsHmacKeyAccessId")
    def gcs_hmac_key_access_id(self) -> Optional[str]:
        return pulumi.get(self, "gcs_hmac_key_access_id")

    @gcs_hmac_key_access_id.setter
    def gcs_hmac_key_access_id(self, value: Optional[str]):
        pulumi.set(self, "gcs_hmac_key_access_id", value)

    @property
    @pulumi.getter(name="gcsHmacKeySecret")
    def gcs_hmac_key_secret(self) -> Optional[str]:
        return pulumi.get(self, "gcs_hmac_key_secret")

    @gcs_hmac_key_secret.setter
    def gcs_hmac_key_secret(self, value: Optional[str]):
        pulumi.set(self, "gcs_hmac_key_secret", value)

    @property
    @pulumi.getter(name="hostnameTag")
    def hostname_tag(self) -> Optional[bool]:
        return pulumi.get(self, "hostname_tag")

    @hostname_tag.setter
    def hostname_tag(self, value: Optional[bool]):
        pulumi.set(self, "hostname_tag", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def mslkey(self) -> Optional[str]:
        return pulumi.get(self, "mslkey")

    @mslkey.setter
    def mslkey(self, value: Optional[str]):
        pulumi.set(self, "mslkey", value)

    @property
    @pulumi.getter
    def mslname(self) -> Optional[str]:
        return pulumi.get(self, "mslname")

    @mslname.setter
    def mslname(self, value: Optional[str]):
        pulumi.set(self, "mslname", value)

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @nonce.setter
    def nonce(self, value: Optional[str]):
        pulumi.set(self, "nonce", value)

    @property
    @pulumi.getter(name="originLocationTitle")
    def origin_location_title(self) -> Optional[str]:
        return pulumi.get(self, "origin_location_title")

    @origin_location_title.setter
    def origin_location_title(self, value: Optional[str]):
        pulumi.set(self, "origin_location_title", value)

    @property
    @pulumi.getter(name="propertyIdTag")
    def property_id_tag(self) -> Optional[bool]:
        return pulumi.get(self, "property_id_tag")

    @property_id_tag.setter
    def property_id_tag(self, value: Optional[bool]):
        pulumi.set(self, "property_id_tag", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useCustomSignString")
    def use_custom_sign_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_custom_sign_string")

    @use_custom_sign_string.setter
    def use_custom_sign_string(self, value: Optional[bool]):
        pulumi.set(self, "use_custom_sign_string", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsWsdArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origintype: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origintype is not None:
            pulumi.set(__self__, "origintype", origintype)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def origintype(self) -> Optional[str]:
        return pulumi.get(self, "origintype")

    @origintype.setter
    def origintype(self, value: Optional[str]):
        pulumi.set(self, "origintype", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateArgs:
    def __init__(__self__, *,
                 pem_encoded_cert: Optional[str] = None,
                 sha1_fingerprint: Optional[str] = None):
        if pem_encoded_cert is not None:
            pulumi.set(__self__, "pem_encoded_cert", pem_encoded_cert)
        if sha1_fingerprint is not None:
            pulumi.set(__self__, "sha1_fingerprint", sha1_fingerprint)

    @property
    @pulumi.getter(name="pemEncodedCert")
    def pem_encoded_cert(self) -> Optional[str]:
        return pulumi.get(self, "pem_encoded_cert")

    @pem_encoded_cert.setter
    def pem_encoded_cert(self, value: Optional[str]):
        pulumi.set(self, "pem_encoded_cert", value)

    @property
    @pulumi.getter(name="sha1Fingerprint")
    def sha1_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "sha1_fingerprint")

    @sha1_fingerprint.setter
    def sha1_fingerprint(self, value: Optional[str]):
        pulumi.set(self, "sha1_fingerprint", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityArgs:
    def __init__(__self__, *,
                 pem_encoded_cert: Optional[str] = None,
                 sha1_fingerprint: Optional[str] = None):
        if pem_encoded_cert is not None:
            pulumi.set(__self__, "pem_encoded_cert", pem_encoded_cert)
        if sha1_fingerprint is not None:
            pulumi.set(__self__, "sha1_fingerprint", sha1_fingerprint)

    @property
    @pulumi.getter(name="pemEncodedCert")
    def pem_encoded_cert(self) -> Optional[str]:
        return pulumi.get(self, "pem_encoded_cert")

    @pem_encoded_cert.setter
    def pem_encoded_cert(self, value: Optional[str]):
        pulumi.set(self, "pem_encoded_cert", value)

    @property
    @pulumi.getter(name="sha1Fingerprint")
    def sha1_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "sha1_fingerprint")

    @sha1_fingerprint.setter
    def sha1_fingerprint(self, value: Optional[str]):
        pulumi.set(self, "sha1_fingerprint", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryMethodArgs:
    def __init__(__self__, *,
                 custom_status_code: Optional[str] = None,
                 locked: Optional[bool] = None,
                 recovery_method: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_status_code is not None:
            pulumi.set(__self__, "custom_status_code", custom_status_code)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if recovery_method is not None:
            pulumi.set(__self__, "recovery_method", recovery_method)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customStatusCode")
    def custom_status_code(self) -> Optional[str]:
        return pulumi.get(self, "custom_status_code")

    @custom_status_code.setter
    def custom_status_code(self, value: Optional[str]):
        pulumi.set(self, "custom_status_code", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="recoveryMethod")
    def recovery_method(self) -> Optional[str]:
        return pulumi.get(self, "recovery_method")

    @recovery_method.setter
    def recovery_method(self, value: Optional[str]):
        pulumi.set(self, "recovery_method", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryPolicyArgs:
    def __init__(__self__, *,
                 binary_equivalent_content: Optional[bool] = None,
                 enable_ip_avoidance: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 ip_avoidance_error_threshold: Optional[int] = None,
                 ip_avoidance_retry_interval: Optional[int] = None,
                 locked: Optional[bool] = None,
                 monitor_origin_responsiveness: Optional[bool] = None,
                 monitor_response_codes1s: Optional[Sequence[str]] = None,
                 monitor_response_codes2s: Optional[Sequence[str]] = None,
                 monitor_response_codes3s: Optional[Sequence[str]] = None,
                 monitor_status_codes1: Optional[bool] = None,
                 monitor_status_codes1_enable_recovery: Optional[bool] = None,
                 monitor_status_codes1_enable_retry: Optional[bool] = None,
                 monitor_status_codes1_recovery_config_name: Optional[str] = None,
                 monitor_status_codes2: Optional[bool] = None,
                 monitor_status_codes2_enable_recovery: Optional[bool] = None,
                 monitor_status_codes2_enable_retry: Optional[bool] = None,
                 monitor_status_codes2_recovery_config_name: Optional[str] = None,
                 monitor_status_codes3: Optional[bool] = None,
                 monitor_status_codes3_enable_recovery: Optional[bool] = None,
                 monitor_status_codes3_enable_retry: Optional[bool] = None,
                 monitor_status_codes3_recovery_config_name: Optional[str] = None,
                 origin_responsiveness_custom_timeout: Optional[int] = None,
                 origin_responsiveness_enable_recovery: Optional[bool] = None,
                 origin_responsiveness_enable_retry: Optional[bool] = None,
                 origin_responsiveness_monitoring: Optional[str] = None,
                 origin_responsiveness_recovery_config_name: Optional[str] = None,
                 origin_responsiveness_timeout: Optional[str] = None,
                 status_code_monitoring1: Optional[str] = None,
                 status_code_monitoring2: Optional[str] = None,
                 status_code_monitoring3: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tuning_parameters: Optional[str] = None,
                 uuid: Optional[str] = None):
        if binary_equivalent_content is not None:
            pulumi.set(__self__, "binary_equivalent_content", binary_equivalent_content)
        if enable_ip_avoidance is not None:
            pulumi.set(__self__, "enable_ip_avoidance", enable_ip_avoidance)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ip_avoidance_error_threshold is not None:
            pulumi.set(__self__, "ip_avoidance_error_threshold", ip_avoidance_error_threshold)
        if ip_avoidance_retry_interval is not None:
            pulumi.set(__self__, "ip_avoidance_retry_interval", ip_avoidance_retry_interval)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if monitor_origin_responsiveness is not None:
            pulumi.set(__self__, "monitor_origin_responsiveness", monitor_origin_responsiveness)
        if monitor_response_codes1s is not None:
            pulumi.set(__self__, "monitor_response_codes1s", monitor_response_codes1s)
        if monitor_response_codes2s is not None:
            pulumi.set(__self__, "monitor_response_codes2s", monitor_response_codes2s)
        if monitor_response_codes3s is not None:
            pulumi.set(__self__, "monitor_response_codes3s", monitor_response_codes3s)
        if monitor_status_codes1 is not None:
            pulumi.set(__self__, "monitor_status_codes1", monitor_status_codes1)
        if monitor_status_codes1_enable_recovery is not None:
            pulumi.set(__self__, "monitor_status_codes1_enable_recovery", monitor_status_codes1_enable_recovery)
        if monitor_status_codes1_enable_retry is not None:
            pulumi.set(__self__, "monitor_status_codes1_enable_retry", monitor_status_codes1_enable_retry)
        if monitor_status_codes1_recovery_config_name is not None:
            pulumi.set(__self__, "monitor_status_codes1_recovery_config_name", monitor_status_codes1_recovery_config_name)
        if monitor_status_codes2 is not None:
            pulumi.set(__self__, "monitor_status_codes2", monitor_status_codes2)
        if monitor_status_codes2_enable_recovery is not None:
            pulumi.set(__self__, "monitor_status_codes2_enable_recovery", monitor_status_codes2_enable_recovery)
        if monitor_status_codes2_enable_retry is not None:
            pulumi.set(__self__, "monitor_status_codes2_enable_retry", monitor_status_codes2_enable_retry)
        if monitor_status_codes2_recovery_config_name is not None:
            pulumi.set(__self__, "monitor_status_codes2_recovery_config_name", monitor_status_codes2_recovery_config_name)
        if monitor_status_codes3 is not None:
            pulumi.set(__self__, "monitor_status_codes3", monitor_status_codes3)
        if monitor_status_codes3_enable_recovery is not None:
            pulumi.set(__self__, "monitor_status_codes3_enable_recovery", monitor_status_codes3_enable_recovery)
        if monitor_status_codes3_enable_retry is not None:
            pulumi.set(__self__, "monitor_status_codes3_enable_retry", monitor_status_codes3_enable_retry)
        if monitor_status_codes3_recovery_config_name is not None:
            pulumi.set(__self__, "monitor_status_codes3_recovery_config_name", monitor_status_codes3_recovery_config_name)
        if origin_responsiveness_custom_timeout is not None:
            pulumi.set(__self__, "origin_responsiveness_custom_timeout", origin_responsiveness_custom_timeout)
        if origin_responsiveness_enable_recovery is not None:
            pulumi.set(__self__, "origin_responsiveness_enable_recovery", origin_responsiveness_enable_recovery)
        if origin_responsiveness_enable_retry is not None:
            pulumi.set(__self__, "origin_responsiveness_enable_retry", origin_responsiveness_enable_retry)
        if origin_responsiveness_monitoring is not None:
            pulumi.set(__self__, "origin_responsiveness_monitoring", origin_responsiveness_monitoring)
        if origin_responsiveness_recovery_config_name is not None:
            pulumi.set(__self__, "origin_responsiveness_recovery_config_name", origin_responsiveness_recovery_config_name)
        if origin_responsiveness_timeout is not None:
            pulumi.set(__self__, "origin_responsiveness_timeout", origin_responsiveness_timeout)
        if status_code_monitoring1 is not None:
            pulumi.set(__self__, "status_code_monitoring1", status_code_monitoring1)
        if status_code_monitoring2 is not None:
            pulumi.set(__self__, "status_code_monitoring2", status_code_monitoring2)
        if status_code_monitoring3 is not None:
            pulumi.set(__self__, "status_code_monitoring3", status_code_monitoring3)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tuning_parameters is not None:
            pulumi.set(__self__, "tuning_parameters", tuning_parameters)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="binaryEquivalentContent")
    def binary_equivalent_content(self) -> Optional[bool]:
        return pulumi.get(self, "binary_equivalent_content")

    @binary_equivalent_content.setter
    def binary_equivalent_content(self, value: Optional[bool]):
        pulumi.set(self, "binary_equivalent_content", value)

    @property
    @pulumi.getter(name="enableIpAvoidance")
    def enable_ip_avoidance(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_avoidance")

    @enable_ip_avoidance.setter
    def enable_ip_avoidance(self, value: Optional[bool]):
        pulumi.set(self, "enable_ip_avoidance", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ipAvoidanceErrorThreshold")
    def ip_avoidance_error_threshold(self) -> Optional[int]:
        return pulumi.get(self, "ip_avoidance_error_threshold")

    @ip_avoidance_error_threshold.setter
    def ip_avoidance_error_threshold(self, value: Optional[int]):
        pulumi.set(self, "ip_avoidance_error_threshold", value)

    @property
    @pulumi.getter(name="ipAvoidanceRetryInterval")
    def ip_avoidance_retry_interval(self) -> Optional[int]:
        return pulumi.get(self, "ip_avoidance_retry_interval")

    @ip_avoidance_retry_interval.setter
    def ip_avoidance_retry_interval(self, value: Optional[int]):
        pulumi.set(self, "ip_avoidance_retry_interval", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="monitorOriginResponsiveness")
    def monitor_origin_responsiveness(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_origin_responsiveness")

    @monitor_origin_responsiveness.setter
    def monitor_origin_responsiveness(self, value: Optional[bool]):
        pulumi.set(self, "monitor_origin_responsiveness", value)

    @property
    @pulumi.getter(name="monitorResponseCodes1s")
    def monitor_response_codes1s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes1s")

    @monitor_response_codes1s.setter
    def monitor_response_codes1s(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "monitor_response_codes1s", value)

    @property
    @pulumi.getter(name="monitorResponseCodes2s")
    def monitor_response_codes2s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes2s")

    @monitor_response_codes2s.setter
    def monitor_response_codes2s(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "monitor_response_codes2s", value)

    @property
    @pulumi.getter(name="monitorResponseCodes3s")
    def monitor_response_codes3s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes3s")

    @monitor_response_codes3s.setter
    def monitor_response_codes3s(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "monitor_response_codes3s", value)

    @property
    @pulumi.getter(name="monitorStatusCodes1")
    def monitor_status_codes1(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1")

    @monitor_status_codes1.setter
    def monitor_status_codes1(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes1", value)

    @property
    @pulumi.getter(name="monitorStatusCodes1EnableRecovery")
    def monitor_status_codes1_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1_enable_recovery")

    @monitor_status_codes1_enable_recovery.setter
    def monitor_status_codes1_enable_recovery(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes1_enable_recovery", value)

    @property
    @pulumi.getter(name="monitorStatusCodes1EnableRetry")
    def monitor_status_codes1_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1_enable_retry")

    @monitor_status_codes1_enable_retry.setter
    def monitor_status_codes1_enable_retry(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes1_enable_retry", value)

    @property
    @pulumi.getter(name="monitorStatusCodes1RecoveryConfigName")
    def monitor_status_codes1_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes1_recovery_config_name")

    @monitor_status_codes1_recovery_config_name.setter
    def monitor_status_codes1_recovery_config_name(self, value: Optional[str]):
        pulumi.set(self, "monitor_status_codes1_recovery_config_name", value)

    @property
    @pulumi.getter(name="monitorStatusCodes2")
    def monitor_status_codes2(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2")

    @monitor_status_codes2.setter
    def monitor_status_codes2(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes2", value)

    @property
    @pulumi.getter(name="monitorStatusCodes2EnableRecovery")
    def monitor_status_codes2_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2_enable_recovery")

    @monitor_status_codes2_enable_recovery.setter
    def monitor_status_codes2_enable_recovery(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes2_enable_recovery", value)

    @property
    @pulumi.getter(name="monitorStatusCodes2EnableRetry")
    def monitor_status_codes2_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2_enable_retry")

    @monitor_status_codes2_enable_retry.setter
    def monitor_status_codes2_enable_retry(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes2_enable_retry", value)

    @property
    @pulumi.getter(name="monitorStatusCodes2RecoveryConfigName")
    def monitor_status_codes2_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes2_recovery_config_name")

    @monitor_status_codes2_recovery_config_name.setter
    def monitor_status_codes2_recovery_config_name(self, value: Optional[str]):
        pulumi.set(self, "monitor_status_codes2_recovery_config_name", value)

    @property
    @pulumi.getter(name="monitorStatusCodes3")
    def monitor_status_codes3(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3")

    @monitor_status_codes3.setter
    def monitor_status_codes3(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes3", value)

    @property
    @pulumi.getter(name="monitorStatusCodes3EnableRecovery")
    def monitor_status_codes3_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3_enable_recovery")

    @monitor_status_codes3_enable_recovery.setter
    def monitor_status_codes3_enable_recovery(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes3_enable_recovery", value)

    @property
    @pulumi.getter(name="monitorStatusCodes3EnableRetry")
    def monitor_status_codes3_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3_enable_retry")

    @monitor_status_codes3_enable_retry.setter
    def monitor_status_codes3_enable_retry(self, value: Optional[bool]):
        pulumi.set(self, "monitor_status_codes3_enable_retry", value)

    @property
    @pulumi.getter(name="monitorStatusCodes3RecoveryConfigName")
    def monitor_status_codes3_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes3_recovery_config_name")

    @monitor_status_codes3_recovery_config_name.setter
    def monitor_status_codes3_recovery_config_name(self, value: Optional[str]):
        pulumi.set(self, "monitor_status_codes3_recovery_config_name", value)

    @property
    @pulumi.getter(name="originResponsivenessCustomTimeout")
    def origin_responsiveness_custom_timeout(self) -> Optional[int]:
        return pulumi.get(self, "origin_responsiveness_custom_timeout")

    @origin_responsiveness_custom_timeout.setter
    def origin_responsiveness_custom_timeout(self, value: Optional[int]):
        pulumi.set(self, "origin_responsiveness_custom_timeout", value)

    @property
    @pulumi.getter(name="originResponsivenessEnableRecovery")
    def origin_responsiveness_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "origin_responsiveness_enable_recovery")

    @origin_responsiveness_enable_recovery.setter
    def origin_responsiveness_enable_recovery(self, value: Optional[bool]):
        pulumi.set(self, "origin_responsiveness_enable_recovery", value)

    @property
    @pulumi.getter(name="originResponsivenessEnableRetry")
    def origin_responsiveness_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "origin_responsiveness_enable_retry")

    @origin_responsiveness_enable_retry.setter
    def origin_responsiveness_enable_retry(self, value: Optional[bool]):
        pulumi.set(self, "origin_responsiveness_enable_retry", value)

    @property
    @pulumi.getter(name="originResponsivenessMonitoring")
    def origin_responsiveness_monitoring(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_monitoring")

    @origin_responsiveness_monitoring.setter
    def origin_responsiveness_monitoring(self, value: Optional[str]):
        pulumi.set(self, "origin_responsiveness_monitoring", value)

    @property
    @pulumi.getter(name="originResponsivenessRecoveryConfigName")
    def origin_responsiveness_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_recovery_config_name")

    @origin_responsiveness_recovery_config_name.setter
    def origin_responsiveness_recovery_config_name(self, value: Optional[str]):
        pulumi.set(self, "origin_responsiveness_recovery_config_name", value)

    @property
    @pulumi.getter(name="originResponsivenessTimeout")
    def origin_responsiveness_timeout(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_timeout")

    @origin_responsiveness_timeout.setter
    def origin_responsiveness_timeout(self, value: Optional[str]):
        pulumi.set(self, "origin_responsiveness_timeout", value)

    @property
    @pulumi.getter(name="statusCodeMonitoring1")
    def status_code_monitoring1(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring1")

    @status_code_monitoring1.setter
    def status_code_monitoring1(self, value: Optional[str]):
        pulumi.set(self, "status_code_monitoring1", value)

    @property
    @pulumi.getter(name="statusCodeMonitoring2")
    def status_code_monitoring2(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring2")

    @status_code_monitoring2.setter
    def status_code_monitoring2(self, value: Optional[str]):
        pulumi.set(self, "status_code_monitoring2", value)

    @property
    @pulumi.getter(name="statusCodeMonitoring3")
    def status_code_monitoring3(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring3")

    @status_code_monitoring3.setter
    def status_code_monitoring3(self, value: Optional[str]):
        pulumi.set(self, "status_code_monitoring3", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="tuningParameters")
    def tuning_parameters(self) -> Optional[str]:
        return pulumi.get(self, "tuning_parameters")

    @tuning_parameters.setter
    def tuning_parameters(self, value: Optional[str]):
        pulumi.set(self, "tuning_parameters", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginIpAclArgs:
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[bool]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginNetStorageArgs:
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @cp_code.setter
    def cp_code(self, value: Optional[int]):
        pulumi.set(self, "cp_code", value)

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @download_domain_name.setter
    def download_domain_name(self, value: Optional[str]):
        pulumi.set(self, "download_domain_name", value)

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")

    @g2o_token.setter
    def g2o_token(self, value: Optional[str]):
        pulumi.set(self, "g2o_token", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPersistentClientConnectionArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[str]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPersistentConnectionArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[str]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPersonallyIdentifiableInformationArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseArgs:
    def __init__(__self__, *,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseCloudletPolicyArgs'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 failover_duration: Optional[int] = None,
                 failover_enabled: Optional[bool] = None,
                 failover_response_codes: Optional[Sequence[str]] = None,
                 failover_title: Optional[str] = None,
                 is_shared_policy: Optional[bool] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 population_cookie_type: Optional[str] = None,
                 population_duration: Optional[str] = None,
                 population_expiration_date: Optional[str] = None,
                 population_refresh: Optional[bool] = None,
                 population_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failover_duration is not None:
            pulumi.set(__self__, "failover_duration", failover_duration)
        if failover_enabled is not None:
            pulumi.set(__self__, "failover_enabled", failover_enabled)
        if failover_response_codes is not None:
            pulumi.set(__self__, "failover_response_codes", failover_response_codes)
        if failover_title is not None:
            pulumi.set(__self__, "failover_title", failover_title)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if population_cookie_type is not None:
            pulumi.set(__self__, "population_cookie_type", population_cookie_type)
        if population_duration is not None:
            pulumi.set(__self__, "population_duration", population_duration)
        if population_expiration_date is not None:
            pulumi.set(__self__, "population_expiration_date", population_expiration_date)
        if population_refresh is not None:
            pulumi.set(__self__, "population_refresh", population_refresh)
        if population_title is not None:
            pulumi.set(__self__, "population_title", population_title)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @cloudlet_shared_policy.setter
    def cloudlet_shared_policy(self, value: Optional[int]):
        pulumi.set(self, "cloudlet_shared_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="failoverDuration")
    def failover_duration(self) -> Optional[int]:
        return pulumi.get(self, "failover_duration")

    @failover_duration.setter
    def failover_duration(self, value: Optional[int]):
        pulumi.set(self, "failover_duration", value)

    @property
    @pulumi.getter(name="failoverEnabled")
    def failover_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "failover_enabled")

    @failover_enabled.setter
    def failover_enabled(self, value: Optional[bool]):
        pulumi.set(self, "failover_enabled", value)

    @property
    @pulumi.getter(name="failoverResponseCodes")
    def failover_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "failover_response_codes")

    @failover_response_codes.setter
    def failover_response_codes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "failover_response_codes", value)

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @failover_title.setter
    def failover_title(self, value: Optional[str]):
        pulumi.set(self, "failover_title", value)

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @is_shared_policy.setter
    def is_shared_policy(self, value: Optional[bool]):
        pulumi.set(self, "is_shared_policy", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="populationCookieType")
    def population_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_type")

    @population_cookie_type.setter
    def population_cookie_type(self, value: Optional[str]):
        pulumi.set(self, "population_cookie_type", value)

    @property
    @pulumi.getter(name="populationDuration")
    def population_duration(self) -> Optional[str]:
        return pulumi.get(self, "population_duration")

    @population_duration.setter
    def population_duration(self, value: Optional[str]):
        pulumi.set(self, "population_duration", value)

    @property
    @pulumi.getter(name="populationExpirationDate")
    def population_expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "population_expiration_date")

    @population_expiration_date.setter
    def population_expiration_date(self, value: Optional[str]):
        pulumi.set(self, "population_expiration_date", value)

    @property
    @pulumi.getter(name="populationRefresh")
    def population_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "population_refresh")

    @population_refresh.setter
    def population_refresh(self, value: Optional[bool]):
        pulumi.set(self, "population_refresh", value)

    @property
    @pulumi.getter(name="populationTitle")
    def population_title(self) -> Optional[str]:
        return pulumi.get(self, "population_title")

    @population_title.setter
    def population_title(self, value: Optional[str]):
        pulumi.set(self, "population_title", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPreconnectArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 preconnectlists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if preconnectlists is not None:
            pulumi.set(__self__, "preconnectlists", preconnectlists)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def preconnectlists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "preconnectlists")

    @preconnectlists.setter
    def preconnectlists(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "preconnectlists", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPredictiveContentDeliveryArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPredictivePrefetchingArgs:
    def __init__(__self__, *,
                 accuracy_target: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if accuracy_target is not None:
            pulumi.set(__self__, "accuracy_target", accuracy_target)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accuracyTarget")
    def accuracy_target(self) -> Optional[str]:
        return pulumi.get(self, "accuracy_target")

    @accuracy_target.setter
    def accuracy_target(self, value: Optional[str]):
        pulumi.set(self, "accuracy_target", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchableArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPrefreshCacheArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 prefreshval: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if prefreshval is not None:
            pulumi.set(__self__, "prefreshval", prefreshval)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def prefreshval(self) -> Optional[int]:
        return pulumi.get(self, "prefreshval")

    @prefreshval.setter
    def prefreshval(self, value: Optional[int]):
        pulumi.set(self, "prefreshval", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorQualityArgs:
    def __init__(__self__, *,
                 audience_settings: Optional[str] = None,
                 catalog_size: Optional[str] = None,
                 content_settings: Optional[str] = None,
                 content_type: Optional[str] = None,
                 country: Optional[str] = None,
                 delivery_format: Optional[str] = None,
                 delivery_type: Optional[str] = None,
                 download_type: Optional[str] = None,
                 end_user_location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 maximum_concurrent_users: Optional[str] = None,
                 object_size: Optional[str] = None,
                 optimize_for: Optional[str] = None,
                 origin_settings: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 refresh_rate: Optional[str] = None,
                 segment_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if audience_settings is not None:
            pulumi.set(__self__, "audience_settings", audience_settings)
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_settings is not None:
            pulumi.set(__self__, "content_settings", content_settings)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if delivery_format is not None:
            pulumi.set(__self__, "delivery_format", delivery_format)
        if delivery_type is not None:
            pulumi.set(__self__, "delivery_type", delivery_type)
        if download_type is not None:
            pulumi.set(__self__, "download_type", download_type)
        if end_user_location is not None:
            pulumi.set(__self__, "end_user_location", end_user_location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_concurrent_users is not None:
            pulumi.set(__self__, "maximum_concurrent_users", maximum_concurrent_users)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if optimize_for is not None:
            pulumi.set(__self__, "optimize_for", optimize_for)
        if origin_settings is not None:
            pulumi.set(__self__, "origin_settings", origin_settings)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if segment_duration is not None:
            pulumi.set(__self__, "segment_duration", segment_duration)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="audienceSettings")
    def audience_settings(self) -> Optional[str]:
        return pulumi.get(self, "audience_settings")

    @audience_settings.setter
    def audience_settings(self, value: Optional[str]):
        pulumi.set(self, "audience_settings", value)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @catalog_size.setter
    def catalog_size(self, value: Optional[str]):
        pulumi.set(self, "catalog_size", value)

    @property
    @pulumi.getter(name="contentSettings")
    def content_settings(self) -> Optional[str]:
        return pulumi.get(self, "content_settings")

    @content_settings.setter
    def content_settings(self, value: Optional[str]):
        pulumi.set(self, "content_settings", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="deliveryFormat")
    def delivery_format(self) -> Optional[str]:
        return pulumi.get(self, "delivery_format")

    @delivery_format.setter
    def delivery_format(self, value: Optional[str]):
        pulumi.set(self, "delivery_format", value)

    @property
    @pulumi.getter(name="deliveryType")
    def delivery_type(self) -> Optional[str]:
        return pulumi.get(self, "delivery_type")

    @delivery_type.setter
    def delivery_type(self, value: Optional[str]):
        pulumi.set(self, "delivery_type", value)

    @property
    @pulumi.getter(name="downloadType")
    def download_type(self) -> Optional[str]:
        return pulumi.get(self, "download_type")

    @download_type.setter
    def download_type(self, value: Optional[str]):
        pulumi.set(self, "download_type", value)

    @property
    @pulumi.getter(name="endUserLocation")
    def end_user_location(self) -> Optional[str]:
        return pulumi.get(self, "end_user_location")

    @end_user_location.setter
    def end_user_location(self, value: Optional[str]):
        pulumi.set(self, "end_user_location", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="maximumConcurrentUsers")
    def maximum_concurrent_users(self) -> Optional[str]:
        return pulumi.get(self, "maximum_concurrent_users")

    @maximum_concurrent_users.setter
    def maximum_concurrent_users(self, value: Optional[str]):
        pulumi.set(self, "maximum_concurrent_users", value)

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @object_size.setter
    def object_size(self, value: Optional[str]):
        pulumi.set(self, "object_size", value)

    @property
    @pulumi.getter(name="optimizeFor")
    def optimize_for(self) -> Optional[str]:
        return pulumi.get(self, "optimize_for")

    @optimize_for.setter
    def optimize_for(self, value: Optional[str]):
        pulumi.set(self, "optimize_for", value)

    @property
    @pulumi.getter(name="originSettings")
    def origin_settings(self) -> Optional[str]:
        return pulumi.get(self, "origin_settings")

    @origin_settings.setter
    def origin_settings(self, value: Optional[str]):
        pulumi.set(self, "origin_settings", value)

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @popularity_distribution.setter
    def popularity_distribution(self, value: Optional[str]):
        pulumi.set(self, "popularity_distribution", value)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[str]:
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[str]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter(name="segmentDuration")
    def segment_duration(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration")

    @segment_duration.setter
    def segment_duration(self, value: Optional[int]):
        pulumi.set(self, "segment_duration", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorQuicBetaArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 quic_offer_percentage: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if quic_offer_percentage is not None:
            pulumi.set(__self__, "quic_offer_percentage", quic_offer_percentage)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="quicOfferPercentage")
    def quic_offer_percentage(self) -> Optional[int]:
        return pulumi.get(self, "quic_offer_percentage")

    @quic_offer_percentage.setter
    def quic_offer_percentage(self, value: Optional[int]):
        pulumi.set(self, "quic_offer_percentage", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRandomSeekArgs:
    def __init__(__self__, *,
                 flv: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 mp4: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if flv is not None:
            pulumi.set(__self__, "flv", flv)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_size is not None:
            pulumi.set(__self__, "maximum_size", maximum_size)
        if mp4 is not None:
            pulumi.set(__self__, "mp4", mp4)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def flv(self) -> Optional[bool]:
        return pulumi.get(self, "flv")

    @flv.setter
    def flv(self, value: Optional[bool]):
        pulumi.set(self, "flv", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @maximum_size.setter
    def maximum_size(self, value: Optional[str]):
        pulumi.set(self, "maximum_size", value)

    @property
    @pulumi.getter
    def mp4(self) -> Optional[bool]:
        return pulumi.get(self, "mp4")

    @mp4.setter
    def mp4(self, value: Optional[bool]):
        pulumi.set(self, "mp4", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRapidArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorReadTimeoutArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRealTimeReportingArgs:
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 beacon_sampling_percentage: Optional[float] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if beacon_sampling_percentage is not None:
            pulumi.set(__self__, "beacon_sampling_percentage", beacon_sampling_percentage)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[bool]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter(name="beaconSamplingPercentage")
    def beacon_sampling_percentage(self) -> Optional[float]:
        return pulumi.get(self, "beacon_sampling_percentage")

    @beacon_sampling_percentage.setter
    def beacon_sampling_percentage(self, value: Optional[float]):
        pulumi.set(self, "beacon_sampling_percentage", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRealUserMonitoringArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRedirectArgs:
    def __init__(__self__, *,
                 destination_hostname: Optional[str] = None,
                 destination_hostname_other: Optional[str] = None,
                 destination_hostname_sibling: Optional[str] = None,
                 destination_hostname_subdomain: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 destination_path_other: Optional[str] = None,
                 destination_path_prefix: Optional[str] = None,
                 destination_path_suffix: Optional[str] = None,
                 destination_path_suffix_status: Optional[str] = None,
                 destination_protocol: Optional[str] = None,
                 locked: Optional[bool] = None,
                 mobile_default_choice: Optional[str] = None,
                 query_string: Optional[str] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if destination_hostname is not None:
            pulumi.set(__self__, "destination_hostname", destination_hostname)
        if destination_hostname_other is not None:
            pulumi.set(__self__, "destination_hostname_other", destination_hostname_other)
        if destination_hostname_sibling is not None:
            pulumi.set(__self__, "destination_hostname_sibling", destination_hostname_sibling)
        if destination_hostname_subdomain is not None:
            pulumi.set(__self__, "destination_hostname_subdomain", destination_hostname_subdomain)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if destination_path_other is not None:
            pulumi.set(__self__, "destination_path_other", destination_path_other)
        if destination_path_prefix is not None:
            pulumi.set(__self__, "destination_path_prefix", destination_path_prefix)
        if destination_path_suffix is not None:
            pulumi.set(__self__, "destination_path_suffix", destination_path_suffix)
        if destination_path_suffix_status is not None:
            pulumi.set(__self__, "destination_path_suffix_status", destination_path_suffix_status)
        if destination_protocol is not None:
            pulumi.set(__self__, "destination_protocol", destination_protocol)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if mobile_default_choice is not None:
            pulumi.set(__self__, "mobile_default_choice", mobile_default_choice)
        if query_string is not None:
            pulumi.set(__self__, "query_string", query_string)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="destinationHostname")
    def destination_hostname(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname")

    @destination_hostname.setter
    def destination_hostname(self, value: Optional[str]):
        pulumi.set(self, "destination_hostname", value)

    @property
    @pulumi.getter(name="destinationHostnameOther")
    def destination_hostname_other(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_other")

    @destination_hostname_other.setter
    def destination_hostname_other(self, value: Optional[str]):
        pulumi.set(self, "destination_hostname_other", value)

    @property
    @pulumi.getter(name="destinationHostnameSibling")
    def destination_hostname_sibling(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_sibling")

    @destination_hostname_sibling.setter
    def destination_hostname_sibling(self, value: Optional[str]):
        pulumi.set(self, "destination_hostname_sibling", value)

    @property
    @pulumi.getter(name="destinationHostnameSubdomain")
    def destination_hostname_subdomain(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_subdomain")

    @destination_hostname_subdomain.setter
    def destination_hostname_subdomain(self, value: Optional[str]):
        pulumi.set(self, "destination_hostname_subdomain", value)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @destination_path.setter
    def destination_path(self, value: Optional[str]):
        pulumi.set(self, "destination_path", value)

    @property
    @pulumi.getter(name="destinationPathOther")
    def destination_path_other(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_other")

    @destination_path_other.setter
    def destination_path_other(self, value: Optional[str]):
        pulumi.set(self, "destination_path_other", value)

    @property
    @pulumi.getter(name="destinationPathPrefix")
    def destination_path_prefix(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_prefix")

    @destination_path_prefix.setter
    def destination_path_prefix(self, value: Optional[str]):
        pulumi.set(self, "destination_path_prefix", value)

    @property
    @pulumi.getter(name="destinationPathSuffix")
    def destination_path_suffix(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_suffix")

    @destination_path_suffix.setter
    def destination_path_suffix(self, value: Optional[str]):
        pulumi.set(self, "destination_path_suffix", value)

    @property
    @pulumi.getter(name="destinationPathSuffixStatus")
    def destination_path_suffix_status(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_suffix_status")

    @destination_path_suffix_status.setter
    def destination_path_suffix_status(self, value: Optional[str]):
        pulumi.set(self, "destination_path_suffix_status", value)

    @property
    @pulumi.getter(name="destinationProtocol")
    def destination_protocol(self) -> Optional[str]:
        return pulumi.get(self, "destination_protocol")

    @destination_protocol.setter
    def destination_protocol(self, value: Optional[str]):
        pulumi.set(self, "destination_protocol", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="mobileDefaultChoice")
    def mobile_default_choice(self) -> Optional[str]:
        return pulumi.get(self, "mobile_default_choice")

    @mobile_default_choice.setter
    def mobile_default_choice(self, value: Optional[str]):
        pulumi.set(self, "mobile_default_choice", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[str]:
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: Optional[str]):
        pulumi.set(self, "query_string", value)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: Optional[int]):
        pulumi.set(self, "response_code", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRedirectplusArgs:
    def __init__(__self__, *,
                 destination: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[str]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: Optional[int]):
        pulumi.set(self, "response_code", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRefererCheckingArgs:
    def __init__(__self__, *,
                 allow_children: Optional[bool] = None,
                 domains: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 strict: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_children is not None:
            pulumi.set(__self__, "allow_children", allow_children)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if strict is not None:
            pulumi.set(__self__, "strict", strict)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowChildren")
    def allow_children(self) -> Optional[bool]:
        return pulumi.get(self, "allow_children")

    @allow_children.setter
    def allow_children(self, value: Optional[bool]):
        pulumi.set(self, "allow_children", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def strict(self) -> Optional[bool]:
        return pulumi.get(self, "strict")

    @strict.setter
    def strict(self, value: Optional[bool]):
        pulumi.set(self, "strict", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRemoveQueryParameterArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 parameters: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRemoveVaryArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorReportArgs:
    def __init__(__self__, *,
                 cookies: Optional[Sequence[str]] = None,
                 custom_log_field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 log_accept_language: Optional[bool] = None,
                 log_cookies: Optional[str] = None,
                 log_custom_log_field: Optional[bool] = None,
                 log_edge_ip: Optional[bool] = None,
                 log_host: Optional[bool] = None,
                 log_referer: Optional[bool] = None,
                 log_user_agent: Optional[bool] = None,
                 log_x_forwarded_for: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cookies is not None:
            pulumi.set(__self__, "cookies", cookies)
        if custom_log_field is not None:
            pulumi.set(__self__, "custom_log_field", custom_log_field)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if log_accept_language is not None:
            pulumi.set(__self__, "log_accept_language", log_accept_language)
        if log_cookies is not None:
            pulumi.set(__self__, "log_cookies", log_cookies)
        if log_custom_log_field is not None:
            pulumi.set(__self__, "log_custom_log_field", log_custom_log_field)
        if log_edge_ip is not None:
            pulumi.set(__self__, "log_edge_ip", log_edge_ip)
        if log_host is not None:
            pulumi.set(__self__, "log_host", log_host)
        if log_referer is not None:
            pulumi.set(__self__, "log_referer", log_referer)
        if log_user_agent is not None:
            pulumi.set(__self__, "log_user_agent", log_user_agent)
        if log_x_forwarded_for is not None:
            pulumi.set(__self__, "log_x_forwarded_for", log_x_forwarded_for)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def cookies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cookies")

    @cookies.setter
    def cookies(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "cookies", value)

    @property
    @pulumi.getter(name="customLogField")
    def custom_log_field(self) -> Optional[str]:
        return pulumi.get(self, "custom_log_field")

    @custom_log_field.setter
    def custom_log_field(self, value: Optional[str]):
        pulumi.set(self, "custom_log_field", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="logAcceptLanguage")
    def log_accept_language(self) -> Optional[bool]:
        return pulumi.get(self, "log_accept_language")

    @log_accept_language.setter
    def log_accept_language(self, value: Optional[bool]):
        pulumi.set(self, "log_accept_language", value)

    @property
    @pulumi.getter(name="logCookies")
    def log_cookies(self) -> Optional[str]:
        return pulumi.get(self, "log_cookies")

    @log_cookies.setter
    def log_cookies(self, value: Optional[str]):
        pulumi.set(self, "log_cookies", value)

    @property
    @pulumi.getter(name="logCustomLogField")
    def log_custom_log_field(self) -> Optional[bool]:
        return pulumi.get(self, "log_custom_log_field")

    @log_custom_log_field.setter
    def log_custom_log_field(self, value: Optional[bool]):
        pulumi.set(self, "log_custom_log_field", value)

    @property
    @pulumi.getter(name="logEdgeIp")
    def log_edge_ip(self) -> Optional[bool]:
        return pulumi.get(self, "log_edge_ip")

    @log_edge_ip.setter
    def log_edge_ip(self, value: Optional[bool]):
        pulumi.set(self, "log_edge_ip", value)

    @property
    @pulumi.getter(name="logHost")
    def log_host(self) -> Optional[bool]:
        return pulumi.get(self, "log_host")

    @log_host.setter
    def log_host(self, value: Optional[bool]):
        pulumi.set(self, "log_host", value)

    @property
    @pulumi.getter(name="logReferer")
    def log_referer(self) -> Optional[bool]:
        return pulumi.get(self, "log_referer")

    @log_referer.setter
    def log_referer(self, value: Optional[bool]):
        pulumi.set(self, "log_referer", value)

    @property
    @pulumi.getter(name="logUserAgent")
    def log_user_agent(self) -> Optional[bool]:
        return pulumi.get(self, "log_user_agent")

    @log_user_agent.setter
    def log_user_agent(self, value: Optional[bool]):
        pulumi.set(self, "log_user_agent", value)

    @property
    @pulumi.getter(name="logXForwardedFor")
    def log_x_forwarded_for(self) -> Optional[bool]:
        return pulumi.get(self, "log_x_forwarded_for")

    @log_x_forwarded_for.setter
    def log_x_forwarded_for(self, value: Optional[bool]):
        pulumi.set(self, "log_x_forwarded_for", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlArgs:
    def __init__(__self__, *,
                 branded403_file: Optional[str] = None,
                 branded403_status_code: Optional[int] = None,
                 branded403_url: Optional[str] = None,
                 branded_deny_cache_ttl: Optional[int] = None,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlCloudletPolicyArgs'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enable_branded403: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 net_storage: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlNetStorageArgs'] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if branded403_file is not None:
            pulumi.set(__self__, "branded403_file", branded403_file)
        if branded403_status_code is not None:
            pulumi.set(__self__, "branded403_status_code", branded403_status_code)
        if branded403_url is not None:
            pulumi.set(__self__, "branded403_url", branded403_url)
        if branded_deny_cache_ttl is not None:
            pulumi.set(__self__, "branded_deny_cache_ttl", branded_deny_cache_ttl)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enable_branded403 is not None:
            pulumi.set(__self__, "enable_branded403", enable_branded403)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if net_storage is not None:
            pulumi.set(__self__, "net_storage", net_storage)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="branded403File")
    def branded403_file(self) -> Optional[str]:
        return pulumi.get(self, "branded403_file")

    @branded403_file.setter
    def branded403_file(self, value: Optional[str]):
        pulumi.set(self, "branded403_file", value)

    @property
    @pulumi.getter(name="branded403StatusCode")
    def branded403_status_code(self) -> Optional[int]:
        return pulumi.get(self, "branded403_status_code")

    @branded403_status_code.setter
    def branded403_status_code(self, value: Optional[int]):
        pulumi.set(self, "branded403_status_code", value)

    @property
    @pulumi.getter(name="branded403Url")
    def branded403_url(self) -> Optional[str]:
        return pulumi.get(self, "branded403_url")

    @branded403_url.setter
    def branded403_url(self, value: Optional[str]):
        pulumi.set(self, "branded403_url", value)

    @property
    @pulumi.getter(name="brandedDenyCacheTtl")
    def branded_deny_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "branded_deny_cache_ttl")

    @branded_deny_cache_ttl.setter
    def branded_deny_cache_ttl(self, value: Optional[int]):
        pulumi.set(self, "branded_deny_cache_ttl", value)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @cloudlet_shared_policy.setter
    def cloudlet_shared_policy(self, value: Optional[int]):
        pulumi.set(self, "cloudlet_shared_policy", value)

    @property
    @pulumi.getter(name="enableBranded403")
    def enable_branded403(self) -> Optional[bool]:
        return pulumi.get(self, "enable_branded403")

    @enable_branded403.setter
    def enable_branded403(self, value: Optional[bool]):
        pulumi.set(self, "enable_branded403", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @is_shared_policy.setter
    def is_shared_policy(self, value: Optional[bool]):
        pulumi.set(self, "is_shared_policy", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlNetStorageArgs']:
        return pulumi.get(self, "net_storage")

    @net_storage.setter
    def net_storage(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlNetStorageArgs']):
        pulumi.set(self, "net_storage", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlNetStorageArgs:
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @cp_code.setter
    def cp_code(self, value: Optional[int]):
        pulumi.set(self, "cp_code", value)

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @download_domain_name.setter
    def download_domain_name(self, value: Optional[str]):
        pulumi.set(self, "download_domain_name", value)

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")

    @g2o_token.setter
    def g2o_token(self, value: Optional[str]):
        pulumi.set(self, "g2o_token", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRequestTypeMarkerArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 request_type: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[str]:
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: Optional[str]):
        pulumi.set(self, "request_type", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerExtendedCompatibilityArgs:
    def __init__(__self__, *,
                 enable_all_features: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable_all_features is not None:
            pulumi.set(__self__, "enable_all_features", enable_all_features)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="enableAllFeatures")
    def enable_all_features(self) -> Optional[bool]:
        return pulumi.get(self, "enable_all_features")

    @enable_all_features.setter
    def enable_all_features(self, value: Optional[bool]):
        pulumi.set(self, "enable_all_features", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorResponseCodeArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 override206: Optional[bool] = None,
                 status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if override206 is not None:
            pulumi.set(__self__, "override206", override206)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def override206(self) -> Optional[bool]:
        return pulumi.get(self, "override206")

    @override206.setter
    def override206(self, value: Optional[bool]):
        pulumi.set(self, "override206", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[int]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorResponseCookieArgs:
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 default_domain: Optional[bool] = None,
                 default_path: Optional[bool] = None,
                 domain: Optional[str] = None,
                 duration: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 expiration_date: Optional[str] = None,
                 expires: Optional[str] = None,
                 format: Optional[str] = None,
                 http_only: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 path: Optional[str] = None,
                 same_site: Optional[str] = None,
                 secure: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if default_domain is not None:
            pulumi.set(__self__, "default_domain", default_domain)
        if default_path is not None:
            pulumi.set(__self__, "default_path", default_path)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if expires is not None:
            pulumi.set(__self__, "expires", expires)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if http_only is not None:
            pulumi.set(__self__, "http_only", http_only)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if same_site is not None:
            pulumi.set(__self__, "same_site", same_site)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[str]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter(name="defaultDomain")
    def default_domain(self) -> Optional[bool]:
        return pulumi.get(self, "default_domain")

    @default_domain.setter
    def default_domain(self, value: Optional[bool]):
        pulumi.set(self, "default_domain", value)

    @property
    @pulumi.getter(name="defaultPath")
    def default_path(self) -> Optional[bool]:
        return pulumi.get(self, "default_path")

    @default_path.setter
    def default_path(self, value: Optional[bool]):
        pulumi.set(self, "default_path", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[str]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "expiration_date")

    @expiration_date.setter
    def expiration_date(self, value: Optional[str]):
        pulumi.set(self, "expiration_date", value)

    @property
    @pulumi.getter
    def expires(self) -> Optional[str]:
        return pulumi.get(self, "expires")

    @expires.setter
    def expires(self, value: Optional[str]):
        pulumi.set(self, "expires", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="httpOnly")
    def http_only(self) -> Optional[bool]:
        return pulumi.get(self, "http_only")

    @http_only.setter
    def http_only(self, value: Optional[bool]):
        pulumi.set(self, "http_only", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="sameSite")
    def same_site(self) -> Optional[str]:
        return pulumi.get(self, "same_site")

    @same_site.setter
    def same_site(self, value: Optional[str]):
        pulumi.set(self, "same_site", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[bool]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRestrictObjectCachingArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_size is not None:
            pulumi.set(__self__, "maximum_size", maximum_size)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @maximum_size.setter
    def maximum_size(self, value: Optional[str]):
        pulumi.set(self, "maximum_size", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorReturnCacheStatusArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 response_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if response_header_name is not None:
            pulumi.set(__self__, "response_header_name", response_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="responseHeaderName")
    def response_header_name(self) -> Optional[str]:
        return pulumi.get(self, "response_header_name")

    @response_header_name.setter
    def response_header_name(self, value: Optional[str]):
        pulumi.set(self, "response_header_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRewriteUrlArgs:
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 keep_query_string: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match: Optional[str] = None,
                 match_multiple: Optional[bool] = None,
                 match_regex: Optional[str] = None,
                 target_path: Optional[str] = None,
                 target_path_prepend: Optional[str] = None,
                 target_regex: Optional[str] = None,
                 target_url: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if keep_query_string is not None:
            pulumi.set(__self__, "keep_query_string", keep_query_string)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if match_multiple is not None:
            pulumi.set(__self__, "match_multiple", match_multiple)
        if match_regex is not None:
            pulumi.set(__self__, "match_regex", match_regex)
        if target_path is not None:
            pulumi.set(__self__, "target_path", target_path)
        if target_path_prepend is not None:
            pulumi.set(__self__, "target_path_prepend", target_path_prepend)
        if target_regex is not None:
            pulumi.set(__self__, "target_regex", target_regex)
        if target_url is not None:
            pulumi.set(__self__, "target_url", target_url)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[str]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter(name="keepQueryString")
    def keep_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "keep_query_string")

    @keep_query_string.setter
    def keep_query_string(self, value: Optional[bool]):
        pulumi.set(self, "keep_query_string", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[str]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @match_multiple.setter
    def match_multiple(self, value: Optional[bool]):
        pulumi.set(self, "match_multiple", value)

    @property
    @pulumi.getter(name="matchRegex")
    def match_regex(self) -> Optional[str]:
        return pulumi.get(self, "match_regex")

    @match_regex.setter
    def match_regex(self, value: Optional[str]):
        pulumi.set(self, "match_regex", value)

    @property
    @pulumi.getter(name="targetPath")
    def target_path(self) -> Optional[str]:
        return pulumi.get(self, "target_path")

    @target_path.setter
    def target_path(self, value: Optional[str]):
        pulumi.set(self, "target_path", value)

    @property
    @pulumi.getter(name="targetPathPrepend")
    def target_path_prepend(self) -> Optional[str]:
        return pulumi.get(self, "target_path_prepend")

    @target_path_prepend.setter
    def target_path_prepend(self, value: Optional[str]):
        pulumi.set(self, "target_path_prepend", value)

    @property
    @pulumi.getter(name="targetRegex")
    def target_regex(self) -> Optional[str]:
        return pulumi.get(self, "target_regex")

    @target_regex.setter
    def target_regex(self, value: Optional[str]):
        pulumi.set(self, "target_regex", value)

    @property
    @pulumi.getter(name="targetUrl")
    def target_url(self) -> Optional[str]:
        return pulumi.get(self, "target_url")

    @target_url.setter
    def target_url(self, value: Optional[str]):
        pulumi.set(self, "target_url", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRumCustomArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 rum_group_name: Optional[str] = None,
                 rum_sample_rate: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if rum_group_name is not None:
            pulumi.set(__self__, "rum_group_name", rum_group_name)
        if rum_sample_rate is not None:
            pulumi.set(__self__, "rum_sample_rate", rum_sample_rate)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="rumGroupName")
    def rum_group_name(self) -> Optional[str]:
        return pulumi.get(self, "rum_group_name")

    @rum_group_name.setter
    def rum_group_name(self, value: Optional[str]):
        pulumi.set(self, "rum_group_name", value)

    @property
    @pulumi.getter(name="rumSampleRate")
    def rum_sample_rate(self) -> Optional[int]:
        return pulumi.get(self, "rum_sample_rate")

    @rum_sample_rate.setter
    def rum_sample_rate(self, value: Optional[int]):
        pulumi.set(self, "rum_sample_rate", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSaasDefinitionsArgs:
    def __init__(__self__, *,
                 application_action: Optional[str] = None,
                 application_cname_enabled: Optional[bool] = None,
                 application_cname_level: Optional[int] = None,
                 application_cookie: Optional[str] = None,
                 application_query_string: Optional[str] = None,
                 application_regex: Optional[str] = None,
                 application_replace: Optional[str] = None,
                 application_title: Optional[str] = None,
                 customer_action: Optional[str] = None,
                 customer_cname_enabled: Optional[bool] = None,
                 customer_cname_level: Optional[int] = None,
                 customer_cookie: Optional[str] = None,
                 customer_query_string: Optional[str] = None,
                 customer_regex: Optional[str] = None,
                 customer_replace: Optional[str] = None,
                 customer_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 users_action: Optional[str] = None,
                 users_cname_enabled: Optional[bool] = None,
                 users_cname_level: Optional[int] = None,
                 users_cookie: Optional[str] = None,
                 users_query_string: Optional[str] = None,
                 users_regex: Optional[str] = None,
                 users_replace: Optional[str] = None,
                 users_title: Optional[str] = None,
                 uuid: Optional[str] = None):
        if application_action is not None:
            pulumi.set(__self__, "application_action", application_action)
        if application_cname_enabled is not None:
            pulumi.set(__self__, "application_cname_enabled", application_cname_enabled)
        if application_cname_level is not None:
            pulumi.set(__self__, "application_cname_level", application_cname_level)
        if application_cookie is not None:
            pulumi.set(__self__, "application_cookie", application_cookie)
        if application_query_string is not None:
            pulumi.set(__self__, "application_query_string", application_query_string)
        if application_regex is not None:
            pulumi.set(__self__, "application_regex", application_regex)
        if application_replace is not None:
            pulumi.set(__self__, "application_replace", application_replace)
        if application_title is not None:
            pulumi.set(__self__, "application_title", application_title)
        if customer_action is not None:
            pulumi.set(__self__, "customer_action", customer_action)
        if customer_cname_enabled is not None:
            pulumi.set(__self__, "customer_cname_enabled", customer_cname_enabled)
        if customer_cname_level is not None:
            pulumi.set(__self__, "customer_cname_level", customer_cname_level)
        if customer_cookie is not None:
            pulumi.set(__self__, "customer_cookie", customer_cookie)
        if customer_query_string is not None:
            pulumi.set(__self__, "customer_query_string", customer_query_string)
        if customer_regex is not None:
            pulumi.set(__self__, "customer_regex", customer_regex)
        if customer_replace is not None:
            pulumi.set(__self__, "customer_replace", customer_replace)
        if customer_title is not None:
            pulumi.set(__self__, "customer_title", customer_title)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if users_action is not None:
            pulumi.set(__self__, "users_action", users_action)
        if users_cname_enabled is not None:
            pulumi.set(__self__, "users_cname_enabled", users_cname_enabled)
        if users_cname_level is not None:
            pulumi.set(__self__, "users_cname_level", users_cname_level)
        if users_cookie is not None:
            pulumi.set(__self__, "users_cookie", users_cookie)
        if users_query_string is not None:
            pulumi.set(__self__, "users_query_string", users_query_string)
        if users_regex is not None:
            pulumi.set(__self__, "users_regex", users_regex)
        if users_replace is not None:
            pulumi.set(__self__, "users_replace", users_replace)
        if users_title is not None:
            pulumi.set(__self__, "users_title", users_title)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="applicationAction")
    def application_action(self) -> Optional[str]:
        return pulumi.get(self, "application_action")

    @application_action.setter
    def application_action(self, value: Optional[str]):
        pulumi.set(self, "application_action", value)

    @property
    @pulumi.getter(name="applicationCnameEnabled")
    def application_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "application_cname_enabled")

    @application_cname_enabled.setter
    def application_cname_enabled(self, value: Optional[bool]):
        pulumi.set(self, "application_cname_enabled", value)

    @property
    @pulumi.getter(name="applicationCnameLevel")
    def application_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "application_cname_level")

    @application_cname_level.setter
    def application_cname_level(self, value: Optional[int]):
        pulumi.set(self, "application_cname_level", value)

    @property
    @pulumi.getter(name="applicationCookie")
    def application_cookie(self) -> Optional[str]:
        return pulumi.get(self, "application_cookie")

    @application_cookie.setter
    def application_cookie(self, value: Optional[str]):
        pulumi.set(self, "application_cookie", value)

    @property
    @pulumi.getter(name="applicationQueryString")
    def application_query_string(self) -> Optional[str]:
        return pulumi.get(self, "application_query_string")

    @application_query_string.setter
    def application_query_string(self, value: Optional[str]):
        pulumi.set(self, "application_query_string", value)

    @property
    @pulumi.getter(name="applicationRegex")
    def application_regex(self) -> Optional[str]:
        return pulumi.get(self, "application_regex")

    @application_regex.setter
    def application_regex(self, value: Optional[str]):
        pulumi.set(self, "application_regex", value)

    @property
    @pulumi.getter(name="applicationReplace")
    def application_replace(self) -> Optional[str]:
        return pulumi.get(self, "application_replace")

    @application_replace.setter
    def application_replace(self, value: Optional[str]):
        pulumi.set(self, "application_replace", value)

    @property
    @pulumi.getter(name="applicationTitle")
    def application_title(self) -> Optional[str]:
        return pulumi.get(self, "application_title")

    @application_title.setter
    def application_title(self, value: Optional[str]):
        pulumi.set(self, "application_title", value)

    @property
    @pulumi.getter(name="customerAction")
    def customer_action(self) -> Optional[str]:
        return pulumi.get(self, "customer_action")

    @customer_action.setter
    def customer_action(self, value: Optional[str]):
        pulumi.set(self, "customer_action", value)

    @property
    @pulumi.getter(name="customerCnameEnabled")
    def customer_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "customer_cname_enabled")

    @customer_cname_enabled.setter
    def customer_cname_enabled(self, value: Optional[bool]):
        pulumi.set(self, "customer_cname_enabled", value)

    @property
    @pulumi.getter(name="customerCnameLevel")
    def customer_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "customer_cname_level")

    @customer_cname_level.setter
    def customer_cname_level(self, value: Optional[int]):
        pulumi.set(self, "customer_cname_level", value)

    @property
    @pulumi.getter(name="customerCookie")
    def customer_cookie(self) -> Optional[str]:
        return pulumi.get(self, "customer_cookie")

    @customer_cookie.setter
    def customer_cookie(self, value: Optional[str]):
        pulumi.set(self, "customer_cookie", value)

    @property
    @pulumi.getter(name="customerQueryString")
    def customer_query_string(self) -> Optional[str]:
        return pulumi.get(self, "customer_query_string")

    @customer_query_string.setter
    def customer_query_string(self, value: Optional[str]):
        pulumi.set(self, "customer_query_string", value)

    @property
    @pulumi.getter(name="customerRegex")
    def customer_regex(self) -> Optional[str]:
        return pulumi.get(self, "customer_regex")

    @customer_regex.setter
    def customer_regex(self, value: Optional[str]):
        pulumi.set(self, "customer_regex", value)

    @property
    @pulumi.getter(name="customerReplace")
    def customer_replace(self) -> Optional[str]:
        return pulumi.get(self, "customer_replace")

    @customer_replace.setter
    def customer_replace(self, value: Optional[str]):
        pulumi.set(self, "customer_replace", value)

    @property
    @pulumi.getter(name="customerTitle")
    def customer_title(self) -> Optional[str]:
        return pulumi.get(self, "customer_title")

    @customer_title.setter
    def customer_title(self, value: Optional[str]):
        pulumi.set(self, "customer_title", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="usersAction")
    def users_action(self) -> Optional[str]:
        return pulumi.get(self, "users_action")

    @users_action.setter
    def users_action(self, value: Optional[str]):
        pulumi.set(self, "users_action", value)

    @property
    @pulumi.getter(name="usersCnameEnabled")
    def users_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "users_cname_enabled")

    @users_cname_enabled.setter
    def users_cname_enabled(self, value: Optional[bool]):
        pulumi.set(self, "users_cname_enabled", value)

    @property
    @pulumi.getter(name="usersCnameLevel")
    def users_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "users_cname_level")

    @users_cname_level.setter
    def users_cname_level(self, value: Optional[int]):
        pulumi.set(self, "users_cname_level", value)

    @property
    @pulumi.getter(name="usersCookie")
    def users_cookie(self) -> Optional[str]:
        return pulumi.get(self, "users_cookie")

    @users_cookie.setter
    def users_cookie(self, value: Optional[str]):
        pulumi.set(self, "users_cookie", value)

    @property
    @pulumi.getter(name="usersQueryString")
    def users_query_string(self) -> Optional[str]:
        return pulumi.get(self, "users_query_string")

    @users_query_string.setter
    def users_query_string(self, value: Optional[str]):
        pulumi.set(self, "users_query_string", value)

    @property
    @pulumi.getter(name="usersRegex")
    def users_regex(self) -> Optional[str]:
        return pulumi.get(self, "users_regex")

    @users_regex.setter
    def users_regex(self, value: Optional[str]):
        pulumi.set(self, "users_regex", value)

    @property
    @pulumi.getter(name="usersReplace")
    def users_replace(self) -> Optional[str]:
        return pulumi.get(self, "users_replace")

    @users_replace.setter
    def users_replace(self, value: Optional[str]):
        pulumi.set(self, "users_replace", value)

    @property
    @pulumi.getter(name="usersTitle")
    def users_title(self) -> Optional[str]:
        return pulumi.get(self, "users_title")

    @users_title.setter
    def users_title(self, value: Optional[str]):
        pulumi.set(self, "users_title", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudClientArgs:
    def __init__(__self__, *,
                 allow_override_origin_cache_key: Optional[bool] = None,
                 connector_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 origin_host_header: Optional[str] = None,
                 origin_type: Optional[str] = None,
                 sf3c_origin_host: Optional[str] = None,
                 sf3c_origin_host_header: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_override_origin_cache_key is not None:
            pulumi.set(__self__, "allow_override_origin_cache_key", allow_override_origin_cache_key)
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_host_header is not None:
            pulumi.set(__self__, "origin_host_header", origin_host_header)
        if origin_type is not None:
            pulumi.set(__self__, "origin_type", origin_type)
        if sf3c_origin_host is not None:
            pulumi.set(__self__, "sf3c_origin_host", sf3c_origin_host)
        if sf3c_origin_host_header is not None:
            pulumi.set(__self__, "sf3c_origin_host_header", sf3c_origin_host_header)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowOverrideOriginCacheKey")
    def allow_override_origin_cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "allow_override_origin_cache_key")

    @allow_override_origin_cache_key.setter
    def allow_override_origin_cache_key(self, value: Optional[bool]):
        pulumi.set(self, "allow_override_origin_cache_key", value)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[str]:
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: Optional[str]):
        pulumi.set(self, "connector_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="originHostHeader")
    def origin_host_header(self) -> Optional[str]:
        return pulumi.get(self, "origin_host_header")

    @origin_host_header.setter
    def origin_host_header(self, value: Optional[str]):
        pulumi.set(self, "origin_host_header", value)

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional[str]:
        return pulumi.get(self, "origin_type")

    @origin_type.setter
    def origin_type(self, value: Optional[str]):
        pulumi.set(self, "origin_type", value)

    @property
    @pulumi.getter(name="sf3cOriginHost")
    def sf3c_origin_host(self) -> Optional[str]:
        return pulumi.get(self, "sf3c_origin_host")

    @sf3c_origin_host.setter
    def sf3c_origin_host(self, value: Optional[str]):
        pulumi.set(self, "sf3c_origin_host", value)

    @property
    @pulumi.getter(name="sf3cOriginHostHeader")
    def sf3c_origin_host_header(self) -> Optional[str]:
        return pulumi.get(self, "sf3c_origin_host_header")

    @sf3c_origin_host_header.setter
    def sf3c_origin_host_header(self, value: Optional[str]):
        pulumi.set(self, "sf3c_origin_host_header", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderHostHeaderArgs:
    def __init__(__self__, *,
                 host_header_source: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if host_header_source is not None:
            pulumi.set(__self__, "host_header_source", host_header_source)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="hostHeaderSource")
    def host_header_source(self) -> Optional[str]:
        return pulumi.get(self, "host_header_source")

    @host_header_source.setter
    def host_header_source(self, value: Optional[str]):
        pulumi.set(self, "host_header_source", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSavePostDcaProcessingArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorScheduleInvalidationArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 refresh_method: Optional[str] = None,
                 repeat: Optional[bool] = None,
                 repeat_interval: Optional[str] = None,
                 start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if refresh_method is not None:
            pulumi.set(__self__, "refresh_method", refresh_method)
        if repeat is not None:
            pulumi.set(__self__, "repeat", repeat)
        if repeat_interval is not None:
            pulumi.set(__self__, "repeat_interval", repeat_interval)
        if start is not None:
            pulumi.set(__self__, "start", start)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="refreshMethod")
    def refresh_method(self) -> Optional[str]:
        return pulumi.get(self, "refresh_method")

    @refresh_method.setter
    def refresh_method(self, value: Optional[str]):
        pulumi.set(self, "refresh_method", value)

    @property
    @pulumi.getter
    def repeat(self) -> Optional[bool]:
        return pulumi.get(self, "repeat")

    @repeat.setter
    def repeat(self, value: Optional[bool]):
        pulumi.set(self, "repeat", value)

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[str]:
        return pulumi.get(self, "repeat_interval")

    @repeat_interval.setter
    def repeat_interval(self, value: Optional[str]):
        pulumi.set(self, "repeat_interval", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[str]):
        pulumi.set(self, "start", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorScriptManagementArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 serviceworker: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 timestamp: Optional[int] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if serviceworker is not None:
            pulumi.set(__self__, "serviceworker", serviceworker)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def serviceworker(self) -> Optional[str]:
        return pulumi.get(self, "serviceworker")

    @serviceworker.setter
    def serviceworker(self, value: Optional[str]):
        pulumi.set(self, "serviceworker", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[int]:
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[int]):
        pulumi.set(self, "timestamp", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedContentProtectionArgs:
    def __init__(__self__, *,
                 acl: Optional[bool] = None,
                 dash_media_encryption: Optional[bool] = None,
                 data_payload: Optional[bool] = None,
                 enable_token_in_uri: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 field_carry_over: Optional[str] = None,
                 header_for_salts: Optional[Sequence[str]] = None,
                 hls_master_manifest_files: Optional[Sequence[str]] = None,
                 hls_media_encryption: Optional[bool] = None,
                 ip: Optional[bool] = None,
                 key: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_encryption_title: Optional[str] = None,
                 revoked_list_id: Optional[int] = None,
                 salt: Optional[str] = None,
                 session_id: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_auth_hls_title: Optional[str] = None,
                 token_authentication_title: Optional[str] = None,
                 token_revocation_enabled: Optional[bool] = None,
                 token_revocation_title: Optional[str] = None,
                 transition_key: Optional[str] = None,
                 use_advanced: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if dash_media_encryption is not None:
            pulumi.set(__self__, "dash_media_encryption", dash_media_encryption)
        if data_payload is not None:
            pulumi.set(__self__, "data_payload", data_payload)
        if enable_token_in_uri is not None:
            pulumi.set(__self__, "enable_token_in_uri", enable_token_in_uri)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if field_carry_over is not None:
            pulumi.set(__self__, "field_carry_over", field_carry_over)
        if header_for_salts is not None:
            pulumi.set(__self__, "header_for_salts", header_for_salts)
        if hls_master_manifest_files is not None:
            pulumi.set(__self__, "hls_master_manifest_files", hls_master_manifest_files)
        if hls_media_encryption is not None:
            pulumi.set(__self__, "hls_media_encryption", hls_media_encryption)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if media_encryption_title is not None:
            pulumi.set(__self__, "media_encryption_title", media_encryption_title)
        if revoked_list_id is not None:
            pulumi.set(__self__, "revoked_list_id", revoked_list_id)
        if salt is not None:
            pulumi.set(__self__, "salt", salt)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if token_auth_hls_title is not None:
            pulumi.set(__self__, "token_auth_hls_title", token_auth_hls_title)
        if token_authentication_title is not None:
            pulumi.set(__self__, "token_authentication_title", token_authentication_title)
        if token_revocation_enabled is not None:
            pulumi.set(__self__, "token_revocation_enabled", token_revocation_enabled)
        if token_revocation_title is not None:
            pulumi.set(__self__, "token_revocation_title", token_revocation_title)
        if transition_key is not None:
            pulumi.set(__self__, "transition_key", transition_key)
        if use_advanced is not None:
            pulumi.set(__self__, "use_advanced", use_advanced)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def acl(self) -> Optional[bool]:
        return pulumi.get(self, "acl")

    @acl.setter
    def acl(self, value: Optional[bool]):
        pulumi.set(self, "acl", value)

    @property
    @pulumi.getter(name="dashMediaEncryption")
    def dash_media_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "dash_media_encryption")

    @dash_media_encryption.setter
    def dash_media_encryption(self, value: Optional[bool]):
        pulumi.set(self, "dash_media_encryption", value)

    @property
    @pulumi.getter(name="dataPayload")
    def data_payload(self) -> Optional[bool]:
        return pulumi.get(self, "data_payload")

    @data_payload.setter
    def data_payload(self, value: Optional[bool]):
        pulumi.set(self, "data_payload", value)

    @property
    @pulumi.getter(name="enableTokenInUri")
    def enable_token_in_uri(self) -> Optional[bool]:
        return pulumi.get(self, "enable_token_in_uri")

    @enable_token_in_uri.setter
    def enable_token_in_uri(self, value: Optional[bool]):
        pulumi.set(self, "enable_token_in_uri", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="fieldCarryOver")
    def field_carry_over(self) -> Optional[str]:
        return pulumi.get(self, "field_carry_over")

    @field_carry_over.setter
    def field_carry_over(self, value: Optional[str]):
        pulumi.set(self, "field_carry_over", value)

    @property
    @pulumi.getter(name="headerForSalts")
    def header_for_salts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "header_for_salts")

    @header_for_salts.setter
    def header_for_salts(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "header_for_salts", value)

    @property
    @pulumi.getter(name="hlsMasterManifestFiles")
    def hls_master_manifest_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hls_master_manifest_files")

    @hls_master_manifest_files.setter
    def hls_master_manifest_files(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "hls_master_manifest_files", value)

    @property
    @pulumi.getter(name="hlsMediaEncryption")
    def hls_media_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "hls_media_encryption")

    @hls_media_encryption.setter
    def hls_media_encryption(self, value: Optional[bool]):
        pulumi.set(self, "hls_media_encryption", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[bool]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[bool]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="mediaEncryptionTitle")
    def media_encryption_title(self) -> Optional[str]:
        return pulumi.get(self, "media_encryption_title")

    @media_encryption_title.setter
    def media_encryption_title(self, value: Optional[str]):
        pulumi.set(self, "media_encryption_title", value)

    @property
    @pulumi.getter(name="revokedListId")
    def revoked_list_id(self) -> Optional[int]:
        return pulumi.get(self, "revoked_list_id")

    @revoked_list_id.setter
    def revoked_list_id(self, value: Optional[int]):
        pulumi.set(self, "revoked_list_id", value)

    @property
    @pulumi.getter
    def salt(self) -> Optional[str]:
        return pulumi.get(self, "salt")

    @salt.setter
    def salt(self, value: Optional[str]):
        pulumi.set(self, "salt", value)

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[bool]:
        return pulumi.get(self, "session_id")

    @session_id.setter
    def session_id(self, value: Optional[bool]):
        pulumi.set(self, "session_id", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="tokenAuthHlsTitle")
    def token_auth_hls_title(self) -> Optional[str]:
        return pulumi.get(self, "token_auth_hls_title")

    @token_auth_hls_title.setter
    def token_auth_hls_title(self, value: Optional[str]):
        pulumi.set(self, "token_auth_hls_title", value)

    @property
    @pulumi.getter(name="tokenAuthenticationTitle")
    def token_authentication_title(self) -> Optional[str]:
        return pulumi.get(self, "token_authentication_title")

    @token_authentication_title.setter
    def token_authentication_title(self, value: Optional[str]):
        pulumi.set(self, "token_authentication_title", value)

    @property
    @pulumi.getter(name="tokenRevocationEnabled")
    def token_revocation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "token_revocation_enabled")

    @token_revocation_enabled.setter
    def token_revocation_enabled(self, value: Optional[bool]):
        pulumi.set(self, "token_revocation_enabled", value)

    @property
    @pulumi.getter(name="tokenRevocationTitle")
    def token_revocation_title(self) -> Optional[str]:
        return pulumi.get(self, "token_revocation_title")

    @token_revocation_title.setter
    def token_revocation_title(self, value: Optional[str]):
        pulumi.set(self, "token_revocation_title", value)

    @property
    @pulumi.getter(name="transitionKey")
    def transition_key(self) -> Optional[str]:
        return pulumi.get(self, "transition_key")

    @transition_key.setter
    def transition_key(self, value: Optional[str]):
        pulumi.set(self, "transition_key", value)

    @property
    @pulumi.getter(name="useAdvanced")
    def use_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "use_advanced")

    @use_advanced.setter
    def use_advanced(self, value: Optional[bool]):
        pulumi.set(self, "use_advanced", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaOptimizationArgs:
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 dvr_type: Optional[str] = None,
                 dvr_window: Optional[str] = None,
                 enable_ull_streaming: Optional[bool] = None,
                 end_time: Optional[str] = None,
                 live_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 show_advanced: Optional[bool] = None,
                 start_time: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if dvr_type is not None:
            pulumi.set(__self__, "dvr_type", dvr_type)
        if dvr_window is not None:
            pulumi.set(__self__, "dvr_window", dvr_window)
        if enable_ull_streaming is not None:
            pulumi.set(__self__, "enable_ull_streaming", enable_ull_streaming)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if live_type is not None:
            pulumi.set(__self__, "live_type", live_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if show_advanced is not None:
            pulumi.set(__self__, "show_advanced", show_advanced)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[str]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter(name="dvrType")
    def dvr_type(self) -> Optional[str]:
        return pulumi.get(self, "dvr_type")

    @dvr_type.setter
    def dvr_type(self, value: Optional[str]):
        pulumi.set(self, "dvr_type", value)

    @property
    @pulumi.getter(name="dvrWindow")
    def dvr_window(self) -> Optional[str]:
        return pulumi.get(self, "dvr_window")

    @dvr_window.setter
    def dvr_window(self, value: Optional[str]):
        pulumi.set(self, "dvr_window", value)

    @property
    @pulumi.getter(name="enableUllStreaming")
    def enable_ull_streaming(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ull_streaming")

    @enable_ull_streaming.setter
    def enable_ull_streaming(self, value: Optional[bool]):
        pulumi.set(self, "enable_ull_streaming", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="liveType")
    def live_type(self) -> Optional[str]:
        return pulumi.get(self, "live_type")

    @live_type.setter
    def live_type(self, value: Optional[str]):
        pulumi.set(self, "live_type", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="showAdvanced")
    def show_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "show_advanced")

    @show_advanced.setter
    def show_advanced(self, value: Optional[bool]):
        pulumi.set(self, "show_advanced", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaStreamingPrefetchArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSetVariableArgs:
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 case_sensitive: Optional[bool] = None,
                 certificate_field_name: Optional[str] = None,
                 cookie_name: Optional[str] = None,
                 device_profile: Optional[str] = None,
                 encryption_key: Optional[str] = None,
                 encryption_mode: Optional[str] = None,
                 end_index: Optional[str] = None,
                 except_chars: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 force_chars: Optional[str] = None,
                 format_string: Optional[str] = None,
                 generator: Optional[str] = None,
                 global_substitution: Optional[bool] = None,
                 header_name: Optional[str] = None,
                 hmac_algorithm: Optional[str] = None,
                 hmac_key: Optional[str] = None,
                 initialization_vector: Optional[str] = None,
                 ip_version: Optional[str] = None,
                 ipv4_prefix: Optional[int] = None,
                 ipv6_prefix: Optional[int] = None,
                 location_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 max: Optional[int] = None,
                 max_random_number: Optional[str] = None,
                 min: Optional[int] = None,
                 min_random_number: Optional[str] = None,
                 nonce: Optional[str] = None,
                 number_of_bytes: Optional[int] = None,
                 operand_one: Optional[str] = None,
                 param_name: Optional[str] = None,
                 path_component_offset: Optional[str] = None,
                 prepend_bytes: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex: Optional[str] = None,
                 replacement: Optional[str] = None,
                 response_header_name: Optional[str] = None,
                 separator: Optional[str] = None,
                 set_cookie_name: Optional[str] = None,
                 start_index: Optional[str] = None,
                 sub_string: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 transform: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value_source: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 variable_value: Optional[str] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if certificate_field_name is not None:
            pulumi.set(__self__, "certificate_field_name", certificate_field_name)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if device_profile is not None:
            pulumi.set(__self__, "device_profile", device_profile)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if encryption_mode is not None:
            pulumi.set(__self__, "encryption_mode", encryption_mode)
        if end_index is not None:
            pulumi.set(__self__, "end_index", end_index)
        if except_chars is not None:
            pulumi.set(__self__, "except_chars", except_chars)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if force_chars is not None:
            pulumi.set(__self__, "force_chars", force_chars)
        if format_string is not None:
            pulumi.set(__self__, "format_string", format_string)
        if generator is not None:
            pulumi.set(__self__, "generator", generator)
        if global_substitution is not None:
            pulumi.set(__self__, "global_substitution", global_substitution)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if hmac_algorithm is not None:
            pulumi.set(__self__, "hmac_algorithm", hmac_algorithm)
        if hmac_key is not None:
            pulumi.set(__self__, "hmac_key", hmac_key)
        if initialization_vector is not None:
            pulumi.set(__self__, "initialization_vector", initialization_vector)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if ipv4_prefix is not None:
            pulumi.set(__self__, "ipv4_prefix", ipv4_prefix)
        if ipv6_prefix is not None:
            pulumi.set(__self__, "ipv6_prefix", ipv6_prefix)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if max_random_number is not None:
            pulumi.set(__self__, "max_random_number", max_random_number)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if min_random_number is not None:
            pulumi.set(__self__, "min_random_number", min_random_number)
        if nonce is not None:
            pulumi.set(__self__, "nonce", nonce)
        if number_of_bytes is not None:
            pulumi.set(__self__, "number_of_bytes", number_of_bytes)
        if operand_one is not None:
            pulumi.set(__self__, "operand_one", operand_one)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if path_component_offset is not None:
            pulumi.set(__self__, "path_component_offset", path_component_offset)
        if prepend_bytes is not None:
            pulumi.set(__self__, "prepend_bytes", prepend_bytes)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if replacement is not None:
            pulumi.set(__self__, "replacement", replacement)
        if response_header_name is not None:
            pulumi.set(__self__, "response_header_name", response_header_name)
        if separator is not None:
            pulumi.set(__self__, "separator", separator)
        if set_cookie_name is not None:
            pulumi.set(__self__, "set_cookie_name", set_cookie_name)
        if start_index is not None:
            pulumi.set(__self__, "start_index", start_index)
        if sub_string is not None:
            pulumi.set(__self__, "sub_string", sub_string)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if transform is not None:
            pulumi.set(__self__, "transform", transform)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value_source is not None:
            pulumi.set(__self__, "value_source", value_source)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)
        if variable_value is not None:
            pulumi.set(__self__, "variable_value", variable_value)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="certificateFieldName")
    def certificate_field_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_field_name")

    @certificate_field_name.setter
    def certificate_field_name(self, value: Optional[str]):
        pulumi.set(self, "certificate_field_name", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[str]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter(name="deviceProfile")
    def device_profile(self) -> Optional[str]:
        return pulumi.get(self, "device_profile")

    @device_profile.setter
    def device_profile(self, value: Optional[str]):
        pulumi.set(self, "device_profile", value)

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[str]:
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[str]):
        pulumi.set(self, "encryption_key", value)

    @property
    @pulumi.getter(name="encryptionMode")
    def encryption_mode(self) -> Optional[str]:
        return pulumi.get(self, "encryption_mode")

    @encryption_mode.setter
    def encryption_mode(self, value: Optional[str]):
        pulumi.set(self, "encryption_mode", value)

    @property
    @pulumi.getter(name="endIndex")
    def end_index(self) -> Optional[str]:
        return pulumi.get(self, "end_index")

    @end_index.setter
    def end_index(self, value: Optional[str]):
        pulumi.set(self, "end_index", value)

    @property
    @pulumi.getter(name="exceptChars")
    def except_chars(self) -> Optional[str]:
        return pulumi.get(self, "except_chars")

    @except_chars.setter
    def except_chars(self, value: Optional[str]):
        pulumi.set(self, "except_chars", value)

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @extract_location.setter
    def extract_location(self, value: Optional[str]):
        pulumi.set(self, "extract_location", value)

    @property
    @pulumi.getter(name="forceChars")
    def force_chars(self) -> Optional[str]:
        return pulumi.get(self, "force_chars")

    @force_chars.setter
    def force_chars(self, value: Optional[str]):
        pulumi.set(self, "force_chars", value)

    @property
    @pulumi.getter(name="formatString")
    def format_string(self) -> Optional[str]:
        return pulumi.get(self, "format_string")

    @format_string.setter
    def format_string(self, value: Optional[str]):
        pulumi.set(self, "format_string", value)

    @property
    @pulumi.getter
    def generator(self) -> Optional[str]:
        return pulumi.get(self, "generator")

    @generator.setter
    def generator(self, value: Optional[str]):
        pulumi.set(self, "generator", value)

    @property
    @pulumi.getter(name="globalSubstitution")
    def global_substitution(self) -> Optional[bool]:
        return pulumi.get(self, "global_substitution")

    @global_substitution.setter
    def global_substitution(self, value: Optional[bool]):
        pulumi.set(self, "global_substitution", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter(name="hmacAlgorithm")
    def hmac_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hmac_algorithm")

    @hmac_algorithm.setter
    def hmac_algorithm(self, value: Optional[str]):
        pulumi.set(self, "hmac_algorithm", value)

    @property
    @pulumi.getter(name="hmacKey")
    def hmac_key(self) -> Optional[str]:
        return pulumi.get(self, "hmac_key")

    @hmac_key.setter
    def hmac_key(self, value: Optional[str]):
        pulumi.set(self, "hmac_key", value)

    @property
    @pulumi.getter(name="initializationVector")
    def initialization_vector(self) -> Optional[str]:
        return pulumi.get(self, "initialization_vector")

    @initialization_vector.setter
    def initialization_vector(self, value: Optional[str]):
        pulumi.set(self, "initialization_vector", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[str]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="ipv4Prefix")
    def ipv4_prefix(self) -> Optional[int]:
        return pulumi.get(self, "ipv4_prefix")

    @ipv4_prefix.setter
    def ipv4_prefix(self, value: Optional[int]):
        pulumi.set(self, "ipv4_prefix", value)

    @property
    @pulumi.getter(name="ipv6Prefix")
    def ipv6_prefix(self) -> Optional[int]:
        return pulumi.get(self, "ipv6_prefix")

    @ipv6_prefix.setter
    def ipv6_prefix(self, value: Optional[int]):
        pulumi.set(self, "ipv6_prefix", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[str]:
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[str]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[int]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter(name="maxRandomNumber")
    def max_random_number(self) -> Optional[str]:
        return pulumi.get(self, "max_random_number")

    @max_random_number.setter
    def max_random_number(self, value: Optional[str]):
        pulumi.set(self, "max_random_number", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[int]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter(name="minRandomNumber")
    def min_random_number(self) -> Optional[str]:
        return pulumi.get(self, "min_random_number")

    @min_random_number.setter
    def min_random_number(self, value: Optional[str]):
        pulumi.set(self, "min_random_number", value)

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @nonce.setter
    def nonce(self, value: Optional[str]):
        pulumi.set(self, "nonce", value)

    @property
    @pulumi.getter(name="numberOfBytes")
    def number_of_bytes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_bytes")

    @number_of_bytes.setter
    def number_of_bytes(self, value: Optional[int]):
        pulumi.set(self, "number_of_bytes", value)

    @property
    @pulumi.getter(name="operandOne")
    def operand_one(self) -> Optional[str]:
        return pulumi.get(self, "operand_one")

    @operand_one.setter
    def operand_one(self, value: Optional[str]):
        pulumi.set(self, "operand_one", value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @param_name.setter
    def param_name(self, value: Optional[str]):
        pulumi.set(self, "param_name", value)

    @property
    @pulumi.getter(name="pathComponentOffset")
    def path_component_offset(self) -> Optional[str]:
        return pulumi.get(self, "path_component_offset")

    @path_component_offset.setter
    def path_component_offset(self, value: Optional[str]):
        pulumi.set(self, "path_component_offset", value)

    @property
    @pulumi.getter(name="prependBytes")
    def prepend_bytes(self) -> Optional[bool]:
        return pulumi.get(self, "prepend_bytes")

    @prepend_bytes.setter
    def prepend_bytes(self, value: Optional[bool]):
        pulumi.set(self, "prepend_bytes", value)

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @query_parameter_name.setter
    def query_parameter_name(self, value: Optional[str]):
        pulumi.set(self, "query_parameter_name", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[str]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def replacement(self) -> Optional[str]:
        return pulumi.get(self, "replacement")

    @replacement.setter
    def replacement(self, value: Optional[str]):
        pulumi.set(self, "replacement", value)

    @property
    @pulumi.getter(name="responseHeaderName")
    def response_header_name(self) -> Optional[str]:
        return pulumi.get(self, "response_header_name")

    @response_header_name.setter
    def response_header_name(self, value: Optional[str]):
        pulumi.set(self, "response_header_name", value)

    @property
    @pulumi.getter
    def separator(self) -> Optional[str]:
        return pulumi.get(self, "separator")

    @separator.setter
    def separator(self, value: Optional[str]):
        pulumi.set(self, "separator", value)

    @property
    @pulumi.getter(name="setCookieName")
    def set_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "set_cookie_name")

    @set_cookie_name.setter
    def set_cookie_name(self, value: Optional[str]):
        pulumi.set(self, "set_cookie_name", value)

    @property
    @pulumi.getter(name="startIndex")
    def start_index(self) -> Optional[str]:
        return pulumi.get(self, "start_index")

    @start_index.setter
    def start_index(self, value: Optional[str]):
        pulumi.set(self, "start_index", value)

    @property
    @pulumi.getter(name="subString")
    def sub_string(self) -> Optional[str]:
        return pulumi.get(self, "sub_string")

    @sub_string.setter
    def sub_string(self, value: Optional[str]):
        pulumi.set(self, "sub_string", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def transform(self) -> Optional[str]:
        return pulumi.get(self, "transform")

    @transform.setter
    def transform(self, value: Optional[str]):
        pulumi.set(self, "transform", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="valueSource")
    def value_source(self) -> Optional[str]:
        return pulumi.get(self, "value_source")

    @value_source.setter
    def value_source(self, value: Optional[str]):
        pulumi.set(self, "value_source", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[str]):
        pulumi.set(self, "variable_name", value)

    @property
    @pulumi.getter(name="variableValue")
    def variable_value(self) -> Optional[str]:
        return pulumi.get(self, "variable_value")

    @variable_value.setter
    def variable_value(self, value: Optional[str]):
        pulumi.set(self, "variable_value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSimulateErrorCodeArgs:
    def __init__(__self__, *,
                 error_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if error_type is not None:
            pulumi.set(__self__, "error_type", error_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> Optional[str]:
        return pulumi.get(self, "error_type")

    @error_type.setter
    def error_type(self, value: Optional[str]):
        pulumi.set(self, "error_type", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[str]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 nossmap: Optional[str] = None,
                 ssmap: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldSsmapArgs'] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if nossmap is not None:
            pulumi.set(__self__, "nossmap", nossmap)
        if ssmap is not None:
            pulumi.set(__self__, "ssmap", ssmap)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def nossmap(self) -> Optional[str]:
        return pulumi.get(self, "nossmap")

    @nossmap.setter
    def nossmap(self, value: Optional[str]):
        pulumi.set(self, "nossmap", value)

    @property
    @pulumi.getter
    def ssmap(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldSsmapArgs']:
        return pulumi.get(self, "ssmap")

    @ssmap.setter
    def ssmap(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldSsmapArgs']):
        pulumi.set(self, "ssmap", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldSsmapArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 srmap: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if srmap is not None:
            pulumi.set(__self__, "srmap", srmap)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def srmap(self) -> Optional[str]:
        return pulumi.get(self, "srmap")

    @srmap.setter
    def srmap(self, value: Optional[str]):
        pulumi.set(self, "srmap", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationArgs:
    def __init__(__self__, *,
                 allow_https_downgrade: Optional[bool] = None,
                 allow_https_upgrade: Optional[bool] = None,
                 cache_sharing_duration: Optional[int] = None,
                 cache_sharing_start_time: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 is_certificate_sni_only: Optional[bool] = None,
                 is_tiered_distribution_used: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 migration_duration: Optional[int] = None,
                 migration_from: Optional[str] = None,
                 migration_start_time: Optional[str] = None,
                 td_location: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_https_downgrade is not None:
            pulumi.set(__self__, "allow_https_downgrade", allow_https_downgrade)
        if allow_https_upgrade is not None:
            pulumi.set(__self__, "allow_https_upgrade", allow_https_upgrade)
        if cache_sharing_duration is not None:
            pulumi.set(__self__, "cache_sharing_duration", cache_sharing_duration)
        if cache_sharing_start_time is not None:
            pulumi.set(__self__, "cache_sharing_start_time", cache_sharing_start_time)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_certificate_sni_only is not None:
            pulumi.set(__self__, "is_certificate_sni_only", is_certificate_sni_only)
        if is_tiered_distribution_used is not None:
            pulumi.set(__self__, "is_tiered_distribution_used", is_tiered_distribution_used)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if migration_duration is not None:
            pulumi.set(__self__, "migration_duration", migration_duration)
        if migration_from is not None:
            pulumi.set(__self__, "migration_from", migration_from)
        if migration_start_time is not None:
            pulumi.set(__self__, "migration_start_time", migration_start_time)
        if td_location is not None:
            pulumi.set(__self__, "td_location", td_location)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowHttpsDowngrade")
    def allow_https_downgrade(self) -> Optional[bool]:
        return pulumi.get(self, "allow_https_downgrade")

    @allow_https_downgrade.setter
    def allow_https_downgrade(self, value: Optional[bool]):
        pulumi.set(self, "allow_https_downgrade", value)

    @property
    @pulumi.getter(name="allowHttpsUpgrade")
    def allow_https_upgrade(self) -> Optional[bool]:
        return pulumi.get(self, "allow_https_upgrade")

    @allow_https_upgrade.setter
    def allow_https_upgrade(self, value: Optional[bool]):
        pulumi.set(self, "allow_https_upgrade", value)

    @property
    @pulumi.getter(name="cacheSharingDuration")
    def cache_sharing_duration(self) -> Optional[int]:
        return pulumi.get(self, "cache_sharing_duration")

    @cache_sharing_duration.setter
    def cache_sharing_duration(self, value: Optional[int]):
        pulumi.set(self, "cache_sharing_duration", value)

    @property
    @pulumi.getter(name="cacheSharingStartTime")
    def cache_sharing_start_time(self) -> Optional[str]:
        return pulumi.get(self, "cache_sharing_start_time")

    @cache_sharing_start_time.setter
    def cache_sharing_start_time(self, value: Optional[str]):
        pulumi.set(self, "cache_sharing_start_time", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="isCertificateSniOnly")
    def is_certificate_sni_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_certificate_sni_only")

    @is_certificate_sni_only.setter
    def is_certificate_sni_only(self, value: Optional[bool]):
        pulumi.set(self, "is_certificate_sni_only", value)

    @property
    @pulumi.getter(name="isTieredDistributionUsed")
    def is_tiered_distribution_used(self) -> Optional[bool]:
        return pulumi.get(self, "is_tiered_distribution_used")

    @is_tiered_distribution_used.setter
    def is_tiered_distribution_used(self, value: Optional[bool]):
        pulumi.set(self, "is_tiered_distribution_used", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="migrationDuration")
    def migration_duration(self) -> Optional[int]:
        return pulumi.get(self, "migration_duration")

    @migration_duration.setter
    def migration_duration(self, value: Optional[int]):
        pulumi.set(self, "migration_duration", value)

    @property
    @pulumi.getter(name="migrationFrom")
    def migration_from(self) -> Optional[str]:
        return pulumi.get(self, "migration_from")

    @migration_from.setter
    def migration_from(self, value: Optional[str]):
        pulumi.set(self, "migration_from", value)

    @property
    @pulumi.getter(name="migrationStartTime")
    def migration_start_time(self) -> Optional[str]:
        return pulumi.get(self, "migration_start_time")

    @migration_start_time.setter
    def migration_start_time(self, value: Optional[str]):
        pulumi.set(self, "migration_start_time", value)

    @property
    @pulumi.getter(name="tdLocation")
    def td_location(self) -> Optional[str]:
        return pulumi.get(self, "td_location")

    @td_location.setter
    def td_location(self, value: Optional[str]):
        pulumi.set(self, "td_location", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationOverrideArgs:
    def __init__(__self__, *,
                 info: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if info is not None:
            pulumi.set(__self__, "info", info)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def info(self) -> Optional[str]:
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[str]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorStrictHeaderParsingArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 strict_mode: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 valid_mode: Optional[bool] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if strict_mode is not None:
            pulumi.set(__self__, "strict_mode", strict_mode)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if valid_mode is not None:
            pulumi.set(__self__, "valid_mode", valid_mode)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="strictMode")
    def strict_mode(self) -> Optional[bool]:
        return pulumi.get(self, "strict_mode")

    @strict_mode.setter
    def strict_mode(self, value: Optional[bool]):
        pulumi.set(self, "strict_mode", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="validMode")
    def valid_mode(self) -> Optional[bool]:
        return pulumi.get(self, "valid_mode")

    @valid_mode.setter
    def valid_mode(self, value: Optional[bool]):
        pulumi.set(self, "valid_mode", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSubCustomerArgs:
    def __init__(__self__, *,
                 access_control: Optional[bool] = None,
                 cache_key: Optional[bool] = None,
                 caching: Optional[bool] = None,
                 content_compressor: Optional[bool] = None,
                 dynamic_web_content: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 geo_location: Optional[bool] = None,
                 ip: Optional[bool] = None,
                 large_file_delivery: Optional[bool] = None,
                 live_video_delivery: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modify_path: Optional[bool] = None,
                 on_demand_video_delivery: Optional[bool] = None,
                 origin: Optional[bool] = None,
                 partner_domain_suffix: Optional[str] = None,
                 referrer: Optional[bool] = None,
                 refresh_content: Optional[bool] = None,
                 site_failover: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_authorization: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 web_application_firewall: Optional[bool] = None):
        if access_control is not None:
            pulumi.set(__self__, "access_control", access_control)
        if cache_key is not None:
            pulumi.set(__self__, "cache_key", cache_key)
        if caching is not None:
            pulumi.set(__self__, "caching", caching)
        if content_compressor is not None:
            pulumi.set(__self__, "content_compressor", content_compressor)
        if dynamic_web_content is not None:
            pulumi.set(__self__, "dynamic_web_content", dynamic_web_content)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if geo_location is not None:
            pulumi.set(__self__, "geo_location", geo_location)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if large_file_delivery is not None:
            pulumi.set(__self__, "large_file_delivery", large_file_delivery)
        if live_video_delivery is not None:
            pulumi.set(__self__, "live_video_delivery", live_video_delivery)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if modify_path is not None:
            pulumi.set(__self__, "modify_path", modify_path)
        if on_demand_video_delivery is not None:
            pulumi.set(__self__, "on_demand_video_delivery", on_demand_video_delivery)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if partner_domain_suffix is not None:
            pulumi.set(__self__, "partner_domain_suffix", partner_domain_suffix)
        if referrer is not None:
            pulumi.set(__self__, "referrer", referrer)
        if refresh_content is not None:
            pulumi.set(__self__, "refresh_content", refresh_content)
        if site_failover is not None:
            pulumi.set(__self__, "site_failover", site_failover)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if token_authorization is not None:
            pulumi.set(__self__, "token_authorization", token_authorization)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if web_application_firewall is not None:
            pulumi.set(__self__, "web_application_firewall", web_application_firewall)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> Optional[bool]:
        return pulumi.get(self, "access_control")

    @access_control.setter
    def access_control(self, value: Optional[bool]):
        pulumi.set(self, "access_control", value)

    @property
    @pulumi.getter(name="cacheKey")
    def cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "cache_key")

    @cache_key.setter
    def cache_key(self, value: Optional[bool]):
        pulumi.set(self, "cache_key", value)

    @property
    @pulumi.getter
    def caching(self) -> Optional[bool]:
        return pulumi.get(self, "caching")

    @caching.setter
    def caching(self, value: Optional[bool]):
        pulumi.set(self, "caching", value)

    @property
    @pulumi.getter(name="contentCompressor")
    def content_compressor(self) -> Optional[bool]:
        return pulumi.get(self, "content_compressor")

    @content_compressor.setter
    def content_compressor(self, value: Optional[bool]):
        pulumi.set(self, "content_compressor", value)

    @property
    @pulumi.getter(name="dynamicWebContent")
    def dynamic_web_content(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_web_content")

    @dynamic_web_content.setter
    def dynamic_web_content(self, value: Optional[bool]):
        pulumi.set(self, "dynamic_web_content", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="geoLocation")
    def geo_location(self) -> Optional[bool]:
        return pulumi.get(self, "geo_location")

    @geo_location.setter
    def geo_location(self, value: Optional[bool]):
        pulumi.set(self, "geo_location", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[bool]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[bool]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="largeFileDelivery")
    def large_file_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "large_file_delivery")

    @large_file_delivery.setter
    def large_file_delivery(self, value: Optional[bool]):
        pulumi.set(self, "large_file_delivery", value)

    @property
    @pulumi.getter(name="liveVideoDelivery")
    def live_video_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "live_video_delivery")

    @live_video_delivery.setter
    def live_video_delivery(self, value: Optional[bool]):
        pulumi.set(self, "live_video_delivery", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="modifyPath")
    def modify_path(self) -> Optional[bool]:
        return pulumi.get(self, "modify_path")

    @modify_path.setter
    def modify_path(self, value: Optional[bool]):
        pulumi.set(self, "modify_path", value)

    @property
    @pulumi.getter(name="onDemandVideoDelivery")
    def on_demand_video_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "on_demand_video_delivery")

    @on_demand_video_delivery.setter
    def on_demand_video_delivery(self, value: Optional[bool]):
        pulumi.set(self, "on_demand_video_delivery", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[bool]:
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[bool]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="partnerDomainSuffix")
    def partner_domain_suffix(self) -> Optional[str]:
        return pulumi.get(self, "partner_domain_suffix")

    @partner_domain_suffix.setter
    def partner_domain_suffix(self, value: Optional[str]):
        pulumi.set(self, "partner_domain_suffix", value)

    @property
    @pulumi.getter
    def referrer(self) -> Optional[bool]:
        return pulumi.get(self, "referrer")

    @referrer.setter
    def referrer(self, value: Optional[bool]):
        pulumi.set(self, "referrer", value)

    @property
    @pulumi.getter(name="refreshContent")
    def refresh_content(self) -> Optional[bool]:
        return pulumi.get(self, "refresh_content")

    @refresh_content.setter
    def refresh_content(self, value: Optional[bool]):
        pulumi.set(self, "refresh_content", value)

    @property
    @pulumi.getter(name="siteFailover")
    def site_failover(self) -> Optional[bool]:
        return pulumi.get(self, "site_failover")

    @site_failover.setter
    def site_failover(self, value: Optional[bool]):
        pulumi.set(self, "site_failover", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="tokenAuthorization")
    def token_authorization(self) -> Optional[bool]:
        return pulumi.get(self, "token_authorization")

    @token_authorization.setter
    def token_authorization(self, value: Optional[bool]):
        pulumi.set(self, "token_authorization", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="webApplicationFirewall")
    def web_application_firewall(self) -> Optional[bool]:
        return pulumi.get(self, "web_application_firewall")

    @web_application_firewall.setter
    def web_application_firewall(self, value: Optional[bool]):
        pulumi.set(self, "web_application_firewall", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSureRouteArgs:
    def __init__(__self__, *,
                 allow_fcm_parent_override: Optional[bool] = None,
                 custom_map: Optional[str] = None,
                 custom_stat_key: Optional[str] = None,
                 enable_custom_key: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 force_ssl_forward: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 race_stat_ttl: Optional[str] = None,
                 sr_download_link_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 test_object_url: Optional[str] = None,
                 to_host: Optional[str] = None,
                 to_host_status: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_fcm_parent_override is not None:
            pulumi.set(__self__, "allow_fcm_parent_override", allow_fcm_parent_override)
        if custom_map is not None:
            pulumi.set(__self__, "custom_map", custom_map)
        if custom_stat_key is not None:
            pulumi.set(__self__, "custom_stat_key", custom_stat_key)
        if enable_custom_key is not None:
            pulumi.set(__self__, "enable_custom_key", enable_custom_key)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if force_ssl_forward is not None:
            pulumi.set(__self__, "force_ssl_forward", force_ssl_forward)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if race_stat_ttl is not None:
            pulumi.set(__self__, "race_stat_ttl", race_stat_ttl)
        if sr_download_link_title is not None:
            pulumi.set(__self__, "sr_download_link_title", sr_download_link_title)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if test_object_url is not None:
            pulumi.set(__self__, "test_object_url", test_object_url)
        if to_host is not None:
            pulumi.set(__self__, "to_host", to_host)
        if to_host_status is not None:
            pulumi.set(__self__, "to_host_status", to_host_status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowFcmParentOverride")
    def allow_fcm_parent_override(self) -> Optional[bool]:
        return pulumi.get(self, "allow_fcm_parent_override")

    @allow_fcm_parent_override.setter
    def allow_fcm_parent_override(self, value: Optional[bool]):
        pulumi.set(self, "allow_fcm_parent_override", value)

    @property
    @pulumi.getter(name="customMap")
    def custom_map(self) -> Optional[str]:
        return pulumi.get(self, "custom_map")

    @custom_map.setter
    def custom_map(self, value: Optional[str]):
        pulumi.set(self, "custom_map", value)

    @property
    @pulumi.getter(name="customStatKey")
    def custom_stat_key(self) -> Optional[str]:
        return pulumi.get(self, "custom_stat_key")

    @custom_stat_key.setter
    def custom_stat_key(self, value: Optional[str]):
        pulumi.set(self, "custom_stat_key", value)

    @property
    @pulumi.getter(name="enableCustomKey")
    def enable_custom_key(self) -> Optional[bool]:
        return pulumi.get(self, "enable_custom_key")

    @enable_custom_key.setter
    def enable_custom_key(self, value: Optional[bool]):
        pulumi.set(self, "enable_custom_key", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="forceSslForward")
    def force_ssl_forward(self) -> Optional[bool]:
        return pulumi.get(self, "force_ssl_forward")

    @force_ssl_forward.setter
    def force_ssl_forward(self, value: Optional[bool]):
        pulumi.set(self, "force_ssl_forward", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="raceStatTtl")
    def race_stat_ttl(self) -> Optional[str]:
        return pulumi.get(self, "race_stat_ttl")

    @race_stat_ttl.setter
    def race_stat_ttl(self, value: Optional[str]):
        pulumi.set(self, "race_stat_ttl", value)

    @property
    @pulumi.getter(name="srDownloadLinkTitle")
    def sr_download_link_title(self) -> Optional[str]:
        return pulumi.get(self, "sr_download_link_title")

    @sr_download_link_title.setter
    def sr_download_link_title(self, value: Optional[str]):
        pulumi.set(self, "sr_download_link_title", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="testObjectUrl")
    def test_object_url(self) -> Optional[str]:
        return pulumi.get(self, "test_object_url")

    @test_object_url.setter
    def test_object_url(self, value: Optional[str]):
        pulumi.set(self, "test_object_url", value)

    @property
    @pulumi.getter(name="toHost")
    def to_host(self) -> Optional[str]:
        return pulumi.get(self, "to_host")

    @to_host.setter
    def to_host(self, value: Optional[str]):
        pulumi.set(self, "to_host", value)

    @property
    @pulumi.getter(name="toHostStatus")
    def to_host_status(self) -> Optional[str]:
        return pulumi.get(self, "to_host_status")

    @to_host_status.setter
    def to_host_status(self, value: Optional[str]):
        pulumi.set(self, "to_host_status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTcpOptimizationArgs:
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[str]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTeaLeafArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ibm_customer_id: Optional[int] = None,
                 limit_to_dynamic: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ibm_customer_id is not None:
            pulumi.set(__self__, "ibm_customer_id", ibm_customer_id)
        if limit_to_dynamic is not None:
            pulumi.set(__self__, "limit_to_dynamic", limit_to_dynamic)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ibmCustomerId")
    def ibm_customer_id(self) -> Optional[int]:
        return pulumi.get(self, "ibm_customer_id")

    @ibm_customer_id.setter
    def ibm_customer_id(self, value: Optional[int]):
        pulumi.set(self, "ibm_customer_id", value)

    @property
    @pulumi.getter(name="limitToDynamic")
    def limit_to_dynamic(self) -> Optional[bool]:
        return pulumi.get(self, "limit_to_dynamic")

    @limit_to_dynamic.setter
    def limit_to_dynamic(self, value: Optional[bool]):
        pulumi.set(self, "limit_to_dynamic", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tiered_distribution_map: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tiered_distribution_map is not None:
            pulumi.set(__self__, "tiered_distribution_map", tiered_distribution_map)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="tieredDistributionMap")
    def tiered_distribution_map(self) -> Optional[str]:
        return pulumi.get(self, "tiered_distribution_map")

    @tiered_distribution_map.setter
    def tiered_distribution_map(self, value: Optional[str]):
        pulumi.set(self, "tiered_distribution_map", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionAdvancedArgs:
    def __init__(__self__, *,
                 allowall: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 method: Optional[str] = None,
                 policy: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tiered_distribution_map: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allowall is not None:
            pulumi.set(__self__, "allowall", allowall)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tiered_distribution_map is not None:
            pulumi.set(__self__, "tiered_distribution_map", tiered_distribution_map)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def allowall(self) -> Optional[bool]:
        return pulumi.get(self, "allowall")

    @allowall.setter
    def allowall(self, value: Optional[bool]):
        pulumi.set(self, "allowall", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[str]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="tieredDistributionMap")
    def tiered_distribution_map(self) -> Optional[str]:
        return pulumi.get(self, "tiered_distribution_map")

    @tiered_distribution_map.setter
    def tiered_distribution_map(self, value: Optional[str]):
        pulumi.set(self, "tiered_distribution_map", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionCustomizationArgs:
    def __init__(__self__, *,
                 cloudwrapper_map_migration_title: Optional[str] = None,
                 custom_map_enabled: Optional[bool] = None,
                 custom_map_name: Optional[str] = None,
                 hash_algorithm: Optional[str] = None,
                 location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 map_migration_enabled: Optional[bool] = None,
                 migration_end_date: Optional[str] = None,
                 migration_start_date: Optional[str] = None,
                 migration_within_cw_maps_enabled: Optional[bool] = None,
                 serial_end: Optional[str] = None,
                 serial_start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tier1_title: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudwrapper_map_migration_title is not None:
            pulumi.set(__self__, "cloudwrapper_map_migration_title", cloudwrapper_map_migration_title)
        if custom_map_enabled is not None:
            pulumi.set(__self__, "custom_map_enabled", custom_map_enabled)
        if custom_map_name is not None:
            pulumi.set(__self__, "custom_map_name", custom_map_name)
        if hash_algorithm is not None:
            pulumi.set(__self__, "hash_algorithm", hash_algorithm)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if map_migration_enabled is not None:
            pulumi.set(__self__, "map_migration_enabled", map_migration_enabled)
        if migration_end_date is not None:
            pulumi.set(__self__, "migration_end_date", migration_end_date)
        if migration_start_date is not None:
            pulumi.set(__self__, "migration_start_date", migration_start_date)
        if migration_within_cw_maps_enabled is not None:
            pulumi.set(__self__, "migration_within_cw_maps_enabled", migration_within_cw_maps_enabled)
        if serial_end is not None:
            pulumi.set(__self__, "serial_end", serial_end)
        if serial_start is not None:
            pulumi.set(__self__, "serial_start", serial_start)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tier1_title is not None:
            pulumi.set(__self__, "tier1_title", tier1_title)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudwrapperMapMigrationTitle")
    def cloudwrapper_map_migration_title(self) -> Optional[str]:
        return pulumi.get(self, "cloudwrapper_map_migration_title")

    @cloudwrapper_map_migration_title.setter
    def cloudwrapper_map_migration_title(self, value: Optional[str]):
        pulumi.set(self, "cloudwrapper_map_migration_title", value)

    @property
    @pulumi.getter(name="customMapEnabled")
    def custom_map_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "custom_map_enabled")

    @custom_map_enabled.setter
    def custom_map_enabled(self, value: Optional[bool]):
        pulumi.set(self, "custom_map_enabled", value)

    @property
    @pulumi.getter(name="customMapName")
    def custom_map_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_map_name")

    @custom_map_name.setter
    def custom_map_name(self, value: Optional[str]):
        pulumi.set(self, "custom_map_name", value)

    @property
    @pulumi.getter(name="hashAlgorithm")
    def hash_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hash_algorithm")

    @hash_algorithm.setter
    def hash_algorithm(self, value: Optional[str]):
        pulumi.set(self, "hash_algorithm", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="mapMigrationEnabled")
    def map_migration_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "map_migration_enabled")

    @map_migration_enabled.setter
    def map_migration_enabled(self, value: Optional[bool]):
        pulumi.set(self, "map_migration_enabled", value)

    @property
    @pulumi.getter(name="migrationEndDate")
    def migration_end_date(self) -> Optional[str]:
        return pulumi.get(self, "migration_end_date")

    @migration_end_date.setter
    def migration_end_date(self, value: Optional[str]):
        pulumi.set(self, "migration_end_date", value)

    @property
    @pulumi.getter(name="migrationStartDate")
    def migration_start_date(self) -> Optional[str]:
        return pulumi.get(self, "migration_start_date")

    @migration_start_date.setter
    def migration_start_date(self, value: Optional[str]):
        pulumi.set(self, "migration_start_date", value)

    @property
    @pulumi.getter(name="migrationWithinCwMapsEnabled")
    def migration_within_cw_maps_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "migration_within_cw_maps_enabled")

    @migration_within_cw_maps_enabled.setter
    def migration_within_cw_maps_enabled(self, value: Optional[bool]):
        pulumi.set(self, "migration_within_cw_maps_enabled", value)

    @property
    @pulumi.getter(name="serialEnd")
    def serial_end(self) -> Optional[str]:
        return pulumi.get(self, "serial_end")

    @serial_end.setter
    def serial_end(self, value: Optional[str]):
        pulumi.set(self, "serial_end", value)

    @property
    @pulumi.getter(name="serialStart")
    def serial_start(self) -> Optional[str]:
        return pulumi.get(self, "serial_start")

    @serial_start.setter
    def serial_start(self, value: Optional[str]):
        pulumi.set(self, "serial_start", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="tier1Title")
    def tier1_title(self) -> Optional[str]:
        return pulumi.get(self, "tier1_title")

    @tier1_title.setter
    def tier1_title(self, value: Optional[str]):
        pulumi.set(self, "tier1_title", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTimeoutArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorUidConfigurationArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 legal_text: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if legal_text is not None:
            pulumi.set(__self__, "legal_text", legal_text)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @extract_location.setter
    def extract_location(self, value: Optional[str]):
        pulumi.set(self, "extract_location", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter(name="legalText")
    def legal_text(self) -> Optional[str]:
        return pulumi.get(self, "legal_text")

    @legal_text.setter
    def legal_text(self, value: Optional[str]):
        pulumi.set(self, "legal_text", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @query_parameter_name.setter
    def query_parameter_name(self, value: Optional[str]):
        pulumi.set(self, "query_parameter_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[str]):
        pulumi.set(self, "variable_name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorValidateEntityTagArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenArgs:
    def __init__(__self__, *,
                 enable_es256: Optional[bool] = None,
                 enable_rs256: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 jwt: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable_es256 is not None:
            pulumi.set(__self__, "enable_es256", enable_es256)
        if enable_rs256 is not None:
            pulumi.set(__self__, "enable_rs256", enable_rs256)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if jwt is not None:
            pulumi.set(__self__, "jwt", jwt)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="enableEs256")
    def enable_es256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_es256")

    @enable_es256.setter
    def enable_es256(self, value: Optional[bool]):
        pulumi.set(self, "enable_es256", value)

    @property
    @pulumi.getter(name="enableRs256")
    def enable_rs256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_rs256")

    @enable_rs256.setter
    def enable_rs256(self, value: Optional[bool]):
        pulumi.set(self, "enable_rs256", value)

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @extract_location.setter
    def extract_location(self, value: Optional[str]):
        pulumi.set(self, "extract_location", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def jwt(self) -> Optional[str]:
        return pulumi.get(self, "jwt")

    @jwt.setter
    def jwt(self, value: Optional[str]):
        pulumi.set(self, "jwt", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @query_parameter_name.setter
    def query_parameter_name(self, value: Optional[str]):
        pulumi.set(self, "query_parameter_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenForDcpArgs:
    def __init__(__self__, *,
                 authorizations: Optional[str] = None,
                 client_id: Optional[str] = None,
                 custom_header: Optional[bool] = None,
                 enable_es256: Optional[bool] = None,
                 enable_rs256: Optional[bool] = None,
                 extract_authorizations: Optional[bool] = None,
                 extract_client_id: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 extract_user_name: Optional[bool] = None,
                 header_name: Optional[str] = None,
                 jwt: Optional[str] = None,
                 locked: Optional[bool] = None,
                 primary_location: Optional[str] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 user_name: Optional[str] = None,
                 uuid: Optional[str] = None):
        if authorizations is not None:
            pulumi.set(__self__, "authorizations", authorizations)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if custom_header is not None:
            pulumi.set(__self__, "custom_header", custom_header)
        if enable_es256 is not None:
            pulumi.set(__self__, "enable_es256", enable_es256)
        if enable_rs256 is not None:
            pulumi.set(__self__, "enable_rs256", enable_rs256)
        if extract_authorizations is not None:
            pulumi.set(__self__, "extract_authorizations", extract_authorizations)
        if extract_client_id is not None:
            pulumi.set(__self__, "extract_client_id", extract_client_id)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if extract_user_name is not None:
            pulumi.set(__self__, "extract_user_name", extract_user_name)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if jwt is not None:
            pulumi.set(__self__, "jwt", jwt)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if primary_location is not None:
            pulumi.set(__self__, "primary_location", primary_location)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def authorizations(self) -> Optional[str]:
        return pulumi.get(self, "authorizations")

    @authorizations.setter
    def authorizations(self, value: Optional[str]):
        pulumi.set(self, "authorizations", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="customHeader")
    def custom_header(self) -> Optional[bool]:
        return pulumi.get(self, "custom_header")

    @custom_header.setter
    def custom_header(self, value: Optional[bool]):
        pulumi.set(self, "custom_header", value)

    @property
    @pulumi.getter(name="enableEs256")
    def enable_es256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_es256")

    @enable_es256.setter
    def enable_es256(self, value: Optional[bool]):
        pulumi.set(self, "enable_es256", value)

    @property
    @pulumi.getter(name="enableRs256")
    def enable_rs256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_rs256")

    @enable_rs256.setter
    def enable_rs256(self, value: Optional[bool]):
        pulumi.set(self, "enable_rs256", value)

    @property
    @pulumi.getter(name="extractAuthorizations")
    def extract_authorizations(self) -> Optional[bool]:
        return pulumi.get(self, "extract_authorizations")

    @extract_authorizations.setter
    def extract_authorizations(self, value: Optional[bool]):
        pulumi.set(self, "extract_authorizations", value)

    @property
    @pulumi.getter(name="extractClientId")
    def extract_client_id(self) -> Optional[bool]:
        return pulumi.get(self, "extract_client_id")

    @extract_client_id.setter
    def extract_client_id(self, value: Optional[bool]):
        pulumi.set(self, "extract_client_id", value)

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @extract_location.setter
    def extract_location(self, value: Optional[str]):
        pulumi.set(self, "extract_location", value)

    @property
    @pulumi.getter(name="extractUserName")
    def extract_user_name(self) -> Optional[bool]:
        return pulumi.get(self, "extract_user_name")

    @extract_user_name.setter
    def extract_user_name(self, value: Optional[bool]):
        pulumi.set(self, "extract_user_name", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def jwt(self) -> Optional[str]:
        return pulumi.get(self, "jwt")

    @jwt.setter
    def jwt(self, value: Optional[str]):
        pulumi.set(self, "jwt", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="primaryLocation")
    def primary_location(self) -> Optional[str]:
        return pulumi.get(self, "primary_location")

    @primary_location.setter
    def primary_location(self, value: Optional[str]):
        pulumi.set(self, "primary_location", value)

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @query_parameter_name.setter
    def query_parameter_name(self, value: Optional[str]):
        pulumi.set(self, "query_parameter_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVerifyTokenAuthorizationArgs:
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 escape_hmac_inputs: Optional[bool] = None,
                 failure_response: Optional[bool] = None,
                 ignore_query_string: Optional[bool] = None,
                 key: Optional[str] = None,
                 location: Optional[str] = None,
                 location_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 salt: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 transition_key: Optional[str] = None,
                 use_advanced: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if escape_hmac_inputs is not None:
            pulumi.set(__self__, "escape_hmac_inputs", escape_hmac_inputs)
        if failure_response is not None:
            pulumi.set(__self__, "failure_response", failure_response)
        if ignore_query_string is not None:
            pulumi.set(__self__, "ignore_query_string", ignore_query_string)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if salt is not None:
            pulumi.set(__self__, "salt", salt)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if transition_key is not None:
            pulumi.set(__self__, "transition_key", transition_key)
        if use_advanced is not None:
            pulumi.set(__self__, "use_advanced", use_advanced)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="escapeHmacInputs")
    def escape_hmac_inputs(self) -> Optional[bool]:
        return pulumi.get(self, "escape_hmac_inputs")

    @escape_hmac_inputs.setter
    def escape_hmac_inputs(self, value: Optional[bool]):
        pulumi.set(self, "escape_hmac_inputs", value)

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional[bool]:
        return pulumi.get(self, "failure_response")

    @failure_response.setter
    def failure_response(self, value: Optional[bool]):
        pulumi.set(self, "failure_response", value)

    @property
    @pulumi.getter(name="ignoreQueryString")
    def ignore_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_query_string")

    @ignore_query_string.setter
    def ignore_query_string(self, value: Optional[bool]):
        pulumi.set(self, "ignore_query_string", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[str]:
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[str]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def salt(self) -> Optional[str]:
        return pulumi.get(self, "salt")

    @salt.setter
    def salt(self, value: Optional[str]):
        pulumi.set(self, "salt", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="transitionKey")
    def transition_key(self) -> Optional[str]:
        return pulumi.get(self, "transition_key")

    @transition_key.setter
    def transition_key(self, value: Optional[str]):
        pulumi.set(self, "transition_key", value)

    @property
    @pulumi.getter(name="useAdvanced")
    def use_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "use_advanced")

    @use_advanced.setter
    def use_advanced(self, value: Optional[bool]):
        pulumi.set(self, "use_advanced", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomArgs:
    def __init__(__self__, *,
                 access_title: Optional[str] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 custom_cookie_domain: Optional[str] = None,
                 domain_config: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_auto_prolong: Optional[bool] = None,
                 session_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_assets_paths: Optional[Sequence[str]] = None,
                 waiting_room_path: Optional[str] = None,
                 waiting_room_title: Optional[str] = None):
        if access_title is not None:
            pulumi.set(__self__, "access_title", access_title)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if custom_cookie_domain is not None:
            pulumi.set(__self__, "custom_cookie_domain", custom_cookie_domain)
        if domain_config is not None:
            pulumi.set(__self__, "domain_config", domain_config)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if session_auto_prolong is not None:
            pulumi.set(__self__, "session_auto_prolong", session_auto_prolong)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if waiting_room_assets_paths is not None:
            pulumi.set(__self__, "waiting_room_assets_paths", waiting_room_assets_paths)
        if waiting_room_path is not None:
            pulumi.set(__self__, "waiting_room_path", waiting_room_path)
        if waiting_room_title is not None:
            pulumi.set(__self__, "waiting_room_title", waiting_room_title)

    @property
    @pulumi.getter(name="accessTitle")
    def access_title(self) -> Optional[str]:
        return pulumi.get(self, "access_title")

    @access_title.setter
    def access_title(self, value: Optional[str]):
        pulumi.set(self, "access_title", value)

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @cloudlet_shared_policy.setter
    def cloudlet_shared_policy(self, value: Optional[int]):
        pulumi.set(self, "cloudlet_shared_policy", value)

    @property
    @pulumi.getter(name="customCookieDomain")
    def custom_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_cookie_domain")

    @custom_cookie_domain.setter
    def custom_cookie_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_cookie_domain", value)

    @property
    @pulumi.getter(name="domainConfig")
    def domain_config(self) -> Optional[str]:
        return pulumi.get(self, "domain_config")

    @domain_config.setter
    def domain_config(self, value: Optional[str]):
        pulumi.set(self, "domain_config", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="sessionAutoProlong")
    def session_auto_prolong(self) -> Optional[bool]:
        return pulumi.get(self, "session_auto_prolong")

    @session_auto_prolong.setter
    def session_auto_prolong(self, value: Optional[bool]):
        pulumi.set(self, "session_auto_prolong", value)

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[int]:
        return pulumi.get(self, "session_duration")

    @session_duration.setter
    def session_duration(self, value: Optional[int]):
        pulumi.set(self, "session_duration", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="waitingRoomAssetsPaths")
    def waiting_room_assets_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "waiting_room_assets_paths")

    @waiting_room_assets_paths.setter
    def waiting_room_assets_paths(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "waiting_room_assets_paths", value)

    @property
    @pulumi.getter(name="waitingRoomPath")
    def waiting_room_path(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_path")

    @waiting_room_path.setter
    def waiting_room_path(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_path", value)

    @property
    @pulumi.getter(name="waitingRoomTitle")
    def waiting_room_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_title")

    @waiting_room_title.setter
    def waiting_room_title(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_title", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomWithEdgeWorkersArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationArgs:
    def __init__(__self__, *,
                 allowed_user_cookie_advanced: Optional[bool] = None,
                 allowed_user_cookie_automatic_salt: Optional[bool] = None,
                 allowed_user_cookie_domain: Optional[str] = None,
                 allowed_user_cookie_domain_type: Optional[str] = None,
                 allowed_user_cookie_duration: Optional[int] = None,
                 allowed_user_cookie_enabled: Optional[bool] = None,
                 allowed_user_cookie_http_only: Optional[bool] = None,
                 allowed_user_cookie_label: Optional[str] = None,
                 allowed_user_cookie_management_title: Optional[str] = None,
                 allowed_user_cookie_refresh: Optional[bool] = None,
                 allowed_user_cookie_salt: Optional[str] = None,
                 cloudlet_policy: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicyArgs'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 user_identification_by_cookie: Optional[bool] = None,
                 user_identification_by_headers: Optional[bool] = None,
                 user_identification_by_ip: Optional[bool] = None,
                 user_identification_by_params: Optional[bool] = None,
                 user_identification_key_cookie: Optional[str] = None,
                 user_identification_key_headers: Optional[Sequence[str]] = None,
                 user_identification_key_params: Optional[Sequence[str]] = None,
                 user_identification_title: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_cache_ttl: Optional[int] = None,
                 waiting_room_cookie_advanced: Optional[bool] = None,
                 waiting_room_cookie_automatic_salt: Optional[bool] = None,
                 waiting_room_cookie_domain: Optional[str] = None,
                 waiting_room_cookie_domain_type: Optional[str] = None,
                 waiting_room_cookie_duration: Optional[int] = None,
                 waiting_room_cookie_enabled: Optional[bool] = None,
                 waiting_room_cookie_http_only: Optional[bool] = None,
                 waiting_room_cookie_label: Optional[str] = None,
                 waiting_room_cookie_management_title: Optional[str] = None,
                 waiting_room_cookie_salt: Optional[str] = None,
                 waiting_room_cookie_share_label: Optional[bool] = None,
                 waiting_room_cp_code: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeArgs'] = None,
                 waiting_room_directory: Optional[str] = None,
                 waiting_room_management_title: Optional[str] = None,
                 waiting_room_net_storage: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorageArgs'] = None,
                 waiting_room_status_code: Optional[int] = None,
                 waiting_room_use_cp_code: Optional[bool] = None):
        if allowed_user_cookie_advanced is not None:
            pulumi.set(__self__, "allowed_user_cookie_advanced", allowed_user_cookie_advanced)
        if allowed_user_cookie_automatic_salt is not None:
            pulumi.set(__self__, "allowed_user_cookie_automatic_salt", allowed_user_cookie_automatic_salt)
        if allowed_user_cookie_domain is not None:
            pulumi.set(__self__, "allowed_user_cookie_domain", allowed_user_cookie_domain)
        if allowed_user_cookie_domain_type is not None:
            pulumi.set(__self__, "allowed_user_cookie_domain_type", allowed_user_cookie_domain_type)
        if allowed_user_cookie_duration is not None:
            pulumi.set(__self__, "allowed_user_cookie_duration", allowed_user_cookie_duration)
        if allowed_user_cookie_enabled is not None:
            pulumi.set(__self__, "allowed_user_cookie_enabled", allowed_user_cookie_enabled)
        if allowed_user_cookie_http_only is not None:
            pulumi.set(__self__, "allowed_user_cookie_http_only", allowed_user_cookie_http_only)
        if allowed_user_cookie_label is not None:
            pulumi.set(__self__, "allowed_user_cookie_label", allowed_user_cookie_label)
        if allowed_user_cookie_management_title is not None:
            pulumi.set(__self__, "allowed_user_cookie_management_title", allowed_user_cookie_management_title)
        if allowed_user_cookie_refresh is not None:
            pulumi.set(__self__, "allowed_user_cookie_refresh", allowed_user_cookie_refresh)
        if allowed_user_cookie_salt is not None:
            pulumi.set(__self__, "allowed_user_cookie_salt", allowed_user_cookie_salt)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if user_identification_by_cookie is not None:
            pulumi.set(__self__, "user_identification_by_cookie", user_identification_by_cookie)
        if user_identification_by_headers is not None:
            pulumi.set(__self__, "user_identification_by_headers", user_identification_by_headers)
        if user_identification_by_ip is not None:
            pulumi.set(__self__, "user_identification_by_ip", user_identification_by_ip)
        if user_identification_by_params is not None:
            pulumi.set(__self__, "user_identification_by_params", user_identification_by_params)
        if user_identification_key_cookie is not None:
            pulumi.set(__self__, "user_identification_key_cookie", user_identification_key_cookie)
        if user_identification_key_headers is not None:
            pulumi.set(__self__, "user_identification_key_headers", user_identification_key_headers)
        if user_identification_key_params is not None:
            pulumi.set(__self__, "user_identification_key_params", user_identification_key_params)
        if user_identification_title is not None:
            pulumi.set(__self__, "user_identification_title", user_identification_title)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if waiting_room_cache_ttl is not None:
            pulumi.set(__self__, "waiting_room_cache_ttl", waiting_room_cache_ttl)
        if waiting_room_cookie_advanced is not None:
            pulumi.set(__self__, "waiting_room_cookie_advanced", waiting_room_cookie_advanced)
        if waiting_room_cookie_automatic_salt is not None:
            pulumi.set(__self__, "waiting_room_cookie_automatic_salt", waiting_room_cookie_automatic_salt)
        if waiting_room_cookie_domain is not None:
            pulumi.set(__self__, "waiting_room_cookie_domain", waiting_room_cookie_domain)
        if waiting_room_cookie_domain_type is not None:
            pulumi.set(__self__, "waiting_room_cookie_domain_type", waiting_room_cookie_domain_type)
        if waiting_room_cookie_duration is not None:
            pulumi.set(__self__, "waiting_room_cookie_duration", waiting_room_cookie_duration)
        if waiting_room_cookie_enabled is not None:
            pulumi.set(__self__, "waiting_room_cookie_enabled", waiting_room_cookie_enabled)
        if waiting_room_cookie_http_only is not None:
            pulumi.set(__self__, "waiting_room_cookie_http_only", waiting_room_cookie_http_only)
        if waiting_room_cookie_label is not None:
            pulumi.set(__self__, "waiting_room_cookie_label", waiting_room_cookie_label)
        if waiting_room_cookie_management_title is not None:
            pulumi.set(__self__, "waiting_room_cookie_management_title", waiting_room_cookie_management_title)
        if waiting_room_cookie_salt is not None:
            pulumi.set(__self__, "waiting_room_cookie_salt", waiting_room_cookie_salt)
        if waiting_room_cookie_share_label is not None:
            pulumi.set(__self__, "waiting_room_cookie_share_label", waiting_room_cookie_share_label)
        if waiting_room_cp_code is not None:
            pulumi.set(__self__, "waiting_room_cp_code", waiting_room_cp_code)
        if waiting_room_directory is not None:
            pulumi.set(__self__, "waiting_room_directory", waiting_room_directory)
        if waiting_room_management_title is not None:
            pulumi.set(__self__, "waiting_room_management_title", waiting_room_management_title)
        if waiting_room_net_storage is not None:
            pulumi.set(__self__, "waiting_room_net_storage", waiting_room_net_storage)
        if waiting_room_status_code is not None:
            pulumi.set(__self__, "waiting_room_status_code", waiting_room_status_code)
        if waiting_room_use_cp_code is not None:
            pulumi.set(__self__, "waiting_room_use_cp_code", waiting_room_use_cp_code)

    @property
    @pulumi.getter(name="allowedUserCookieAdvanced")
    def allowed_user_cookie_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_advanced")

    @allowed_user_cookie_advanced.setter
    def allowed_user_cookie_advanced(self, value: Optional[bool]):
        pulumi.set(self, "allowed_user_cookie_advanced", value)

    @property
    @pulumi.getter(name="allowedUserCookieAutomaticSalt")
    def allowed_user_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_automatic_salt")

    @allowed_user_cookie_automatic_salt.setter
    def allowed_user_cookie_automatic_salt(self, value: Optional[bool]):
        pulumi.set(self, "allowed_user_cookie_automatic_salt", value)

    @property
    @pulumi.getter(name="allowedUserCookieDomain")
    def allowed_user_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_domain")

    @allowed_user_cookie_domain.setter
    def allowed_user_cookie_domain(self, value: Optional[str]):
        pulumi.set(self, "allowed_user_cookie_domain", value)

    @property
    @pulumi.getter(name="allowedUserCookieDomainType")
    def allowed_user_cookie_domain_type(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_domain_type")

    @allowed_user_cookie_domain_type.setter
    def allowed_user_cookie_domain_type(self, value: Optional[str]):
        pulumi.set(self, "allowed_user_cookie_domain_type", value)

    @property
    @pulumi.getter(name="allowedUserCookieDuration")
    def allowed_user_cookie_duration(self) -> Optional[int]:
        return pulumi.get(self, "allowed_user_cookie_duration")

    @allowed_user_cookie_duration.setter
    def allowed_user_cookie_duration(self, value: Optional[int]):
        pulumi.set(self, "allowed_user_cookie_duration", value)

    @property
    @pulumi.getter(name="allowedUserCookieEnabled")
    def allowed_user_cookie_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_enabled")

    @allowed_user_cookie_enabled.setter
    def allowed_user_cookie_enabled(self, value: Optional[bool]):
        pulumi.set(self, "allowed_user_cookie_enabled", value)

    @property
    @pulumi.getter(name="allowedUserCookieHttpOnly")
    def allowed_user_cookie_http_only(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_http_only")

    @allowed_user_cookie_http_only.setter
    def allowed_user_cookie_http_only(self, value: Optional[bool]):
        pulumi.set(self, "allowed_user_cookie_http_only", value)

    @property
    @pulumi.getter(name="allowedUserCookieLabel")
    def allowed_user_cookie_label(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_label")

    @allowed_user_cookie_label.setter
    def allowed_user_cookie_label(self, value: Optional[str]):
        pulumi.set(self, "allowed_user_cookie_label", value)

    @property
    @pulumi.getter(name="allowedUserCookieManagementTitle")
    def allowed_user_cookie_management_title(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_management_title")

    @allowed_user_cookie_management_title.setter
    def allowed_user_cookie_management_title(self, value: Optional[str]):
        pulumi.set(self, "allowed_user_cookie_management_title", value)

    @property
    @pulumi.getter(name="allowedUserCookieRefresh")
    def allowed_user_cookie_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_refresh")

    @allowed_user_cookie_refresh.setter
    def allowed_user_cookie_refresh(self, value: Optional[bool]):
        pulumi.set(self, "allowed_user_cookie_refresh", value)

    @property
    @pulumi.getter(name="allowedUserCookieSalt")
    def allowed_user_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_salt")

    @allowed_user_cookie_salt.setter
    def allowed_user_cookie_salt(self, value: Optional[str]):
        pulumi.set(self, "allowed_user_cookie_salt", value)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicyArgs']:
        return pulumi.get(self, "cloudlet_policy")

    @cloudlet_policy.setter
    def cloudlet_policy(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicyArgs']):
        pulumi.set(self, "cloudlet_policy", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="userIdentificationByCookie")
    def user_identification_by_cookie(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_cookie")

    @user_identification_by_cookie.setter
    def user_identification_by_cookie(self, value: Optional[bool]):
        pulumi.set(self, "user_identification_by_cookie", value)

    @property
    @pulumi.getter(name="userIdentificationByHeaders")
    def user_identification_by_headers(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_headers")

    @user_identification_by_headers.setter
    def user_identification_by_headers(self, value: Optional[bool]):
        pulumi.set(self, "user_identification_by_headers", value)

    @property
    @pulumi.getter(name="userIdentificationByIp")
    def user_identification_by_ip(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_ip")

    @user_identification_by_ip.setter
    def user_identification_by_ip(self, value: Optional[bool]):
        pulumi.set(self, "user_identification_by_ip", value)

    @property
    @pulumi.getter(name="userIdentificationByParams")
    def user_identification_by_params(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_params")

    @user_identification_by_params.setter
    def user_identification_by_params(self, value: Optional[bool]):
        pulumi.set(self, "user_identification_by_params", value)

    @property
    @pulumi.getter(name="userIdentificationKeyCookie")
    def user_identification_key_cookie(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_key_cookie")

    @user_identification_key_cookie.setter
    def user_identification_key_cookie(self, value: Optional[str]):
        pulumi.set(self, "user_identification_key_cookie", value)

    @property
    @pulumi.getter(name="userIdentificationKeyHeaders")
    def user_identification_key_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_headers")

    @user_identification_key_headers.setter
    def user_identification_key_headers(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "user_identification_key_headers", value)

    @property
    @pulumi.getter(name="userIdentificationKeyParams")
    def user_identification_key_params(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_params")

    @user_identification_key_params.setter
    def user_identification_key_params(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "user_identification_key_params", value)

    @property
    @pulumi.getter(name="userIdentificationTitle")
    def user_identification_title(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_title")

    @user_identification_title.setter
    def user_identification_title(self, value: Optional[str]):
        pulumi.set(self, "user_identification_title", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="waitingRoomCacheTtl")
    def waiting_room_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_cache_ttl")

    @waiting_room_cache_ttl.setter
    def waiting_room_cache_ttl(self, value: Optional[int]):
        pulumi.set(self, "waiting_room_cache_ttl", value)

    @property
    @pulumi.getter(name="waitingRoomCookieAdvanced")
    def waiting_room_cookie_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_advanced")

    @waiting_room_cookie_advanced.setter
    def waiting_room_cookie_advanced(self, value: Optional[bool]):
        pulumi.set(self, "waiting_room_cookie_advanced", value)

    @property
    @pulumi.getter(name="waitingRoomCookieAutomaticSalt")
    def waiting_room_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_automatic_salt")

    @waiting_room_cookie_automatic_salt.setter
    def waiting_room_cookie_automatic_salt(self, value: Optional[bool]):
        pulumi.set(self, "waiting_room_cookie_automatic_salt", value)

    @property
    @pulumi.getter(name="waitingRoomCookieDomain")
    def waiting_room_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_domain")

    @waiting_room_cookie_domain.setter
    def waiting_room_cookie_domain(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_cookie_domain", value)

    @property
    @pulumi.getter(name="waitingRoomCookieDomainType")
    def waiting_room_cookie_domain_type(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_domain_type")

    @waiting_room_cookie_domain_type.setter
    def waiting_room_cookie_domain_type(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_cookie_domain_type", value)

    @property
    @pulumi.getter(name="waitingRoomCookieDuration")
    def waiting_room_cookie_duration(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_cookie_duration")

    @waiting_room_cookie_duration.setter
    def waiting_room_cookie_duration(self, value: Optional[int]):
        pulumi.set(self, "waiting_room_cookie_duration", value)

    @property
    @pulumi.getter(name="waitingRoomCookieEnabled")
    def waiting_room_cookie_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_enabled")

    @waiting_room_cookie_enabled.setter
    def waiting_room_cookie_enabled(self, value: Optional[bool]):
        pulumi.set(self, "waiting_room_cookie_enabled", value)

    @property
    @pulumi.getter(name="waitingRoomCookieHttpOnly")
    def waiting_room_cookie_http_only(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_http_only")

    @waiting_room_cookie_http_only.setter
    def waiting_room_cookie_http_only(self, value: Optional[bool]):
        pulumi.set(self, "waiting_room_cookie_http_only", value)

    @property
    @pulumi.getter(name="waitingRoomCookieLabel")
    def waiting_room_cookie_label(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_label")

    @waiting_room_cookie_label.setter
    def waiting_room_cookie_label(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_cookie_label", value)

    @property
    @pulumi.getter(name="waitingRoomCookieManagementTitle")
    def waiting_room_cookie_management_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_management_title")

    @waiting_room_cookie_management_title.setter
    def waiting_room_cookie_management_title(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_cookie_management_title", value)

    @property
    @pulumi.getter(name="waitingRoomCookieSalt")
    def waiting_room_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_salt")

    @waiting_room_cookie_salt.setter
    def waiting_room_cookie_salt(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_cookie_salt", value)

    @property
    @pulumi.getter(name="waitingRoomCookieShareLabel")
    def waiting_room_cookie_share_label(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_share_label")

    @waiting_room_cookie_share_label.setter
    def waiting_room_cookie_share_label(self, value: Optional[bool]):
        pulumi.set(self, "waiting_room_cookie_share_label", value)

    @property
    @pulumi.getter(name="waitingRoomCpCode")
    def waiting_room_cp_code(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeArgs']:
        return pulumi.get(self, "waiting_room_cp_code")

    @waiting_room_cp_code.setter
    def waiting_room_cp_code(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeArgs']):
        pulumi.set(self, "waiting_room_cp_code", value)

    @property
    @pulumi.getter(name="waitingRoomDirectory")
    def waiting_room_directory(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_directory")

    @waiting_room_directory.setter
    def waiting_room_directory(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_directory", value)

    @property
    @pulumi.getter(name="waitingRoomManagementTitle")
    def waiting_room_management_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_management_title")

    @waiting_room_management_title.setter
    def waiting_room_management_title(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_management_title", value)

    @property
    @pulumi.getter(name="waitingRoomNetStorage")
    def waiting_room_net_storage(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorageArgs']:
        return pulumi.get(self, "waiting_room_net_storage")

    @waiting_room_net_storage.setter
    def waiting_room_net_storage(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorageArgs']):
        pulumi.set(self, "waiting_room_net_storage", value)

    @property
    @pulumi.getter(name="waitingRoomStatusCode")
    def waiting_room_status_code(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_status_code")

    @waiting_room_status_code.setter
    def waiting_room_status_code(self, value: Optional[int]):
        pulumi.set(self, "waiting_room_status_code", value)

    @property
    @pulumi.getter(name="waitingRoomUseCpCode")
    def waiting_room_use_cp_code(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_use_cp_code")

    @waiting_room_use_cp_code.setter
    def waiting_room_use_cp_code(self, value: Optional[bool]):
        pulumi.set(self, "waiting_room_use_cp_code", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicyArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoArgs:
    def __init__(__self__, *,
                 access_title: Optional[str] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 custom_cookie_domain: Optional[str] = None,
                 domain_config: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_auto_prolong: Optional[bool] = None,
                 session_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_assets_paths: Optional[Sequence[str]] = None,
                 waiting_room_path: Optional[str] = None,
                 waiting_room_title: Optional[str] = None):
        if access_title is not None:
            pulumi.set(__self__, "access_title", access_title)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if custom_cookie_domain is not None:
            pulumi.set(__self__, "custom_cookie_domain", custom_cookie_domain)
        if domain_config is not None:
            pulumi.set(__self__, "domain_config", domain_config)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if session_auto_prolong is not None:
            pulumi.set(__self__, "session_auto_prolong", session_auto_prolong)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if waiting_room_assets_paths is not None:
            pulumi.set(__self__, "waiting_room_assets_paths", waiting_room_assets_paths)
        if waiting_room_path is not None:
            pulumi.set(__self__, "waiting_room_path", waiting_room_path)
        if waiting_room_title is not None:
            pulumi.set(__self__, "waiting_room_title", waiting_room_title)

    @property
    @pulumi.getter(name="accessTitle")
    def access_title(self) -> Optional[str]:
        return pulumi.get(self, "access_title")

    @access_title.setter
    def access_title(self, value: Optional[str]):
        pulumi.set(self, "access_title", value)

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @cloudlet_shared_policy.setter
    def cloudlet_shared_policy(self, value: Optional[int]):
        pulumi.set(self, "cloudlet_shared_policy", value)

    @property
    @pulumi.getter(name="customCookieDomain")
    def custom_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_cookie_domain")

    @custom_cookie_domain.setter
    def custom_cookie_domain(self, value: Optional[str]):
        pulumi.set(self, "custom_cookie_domain", value)

    @property
    @pulumi.getter(name="domainConfig")
    def domain_config(self) -> Optional[str]:
        return pulumi.get(self, "domain_config")

    @domain_config.setter
    def domain_config(self, value: Optional[str]):
        pulumi.set(self, "domain_config", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="sessionAutoProlong")
    def session_auto_prolong(self) -> Optional[bool]:
        return pulumi.get(self, "session_auto_prolong")

    @session_auto_prolong.setter
    def session_auto_prolong(self, value: Optional[bool]):
        pulumi.set(self, "session_auto_prolong", value)

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[int]:
        return pulumi.get(self, "session_duration")

    @session_duration.setter
    def session_duration(self, value: Optional[int]):
        pulumi.set(self, "session_duration", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="waitingRoomAssetsPaths")
    def waiting_room_assets_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "waiting_room_assets_paths")

    @waiting_room_assets_paths.setter
    def waiting_room_assets_paths(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "waiting_room_assets_paths", value)

    @property
    @pulumi.getter(name="waitingRoomPath")
    def waiting_room_path(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_path")

    @waiting_room_path.setter
    def waiting_room_path(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_path", value)

    @property
    @pulumi.getter(name="waitingRoomTitle")
    def waiting_room_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_title")

    @waiting_room_title.setter
    def waiting_room_title(self, value: Optional[str]):
        pulumi.set(self, "waiting_room_title", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoStandaloneArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorageArgs:
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @cp_code.setter
    def cp_code(self, value: Optional[int]):
        pulumi.set(self, "cp_code", value)

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @download_domain_name.setter
    def download_domain_name(self, value: Optional[str]):
        pulumi.set(self, "download_domain_name", value)

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")

    @g2o_token.setter
    def g2o_token(self, value: Optional[str]):
        pulumi.set(self, "g2o_token", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorWatermarkingArgs:
    def __init__(__self__, *,
                 ab_variant_location: Optional[str] = None,
                 decryption_password1: Optional[str] = None,
                 decryption_password2: Optional[str] = None,
                 decryption_password_id1: Optional[str] = None,
                 decryption_password_id2: Optional[str] = None,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 miscellaneous_settings_title: Optional[str] = None,
                 pattern_decryption_enable: Optional[bool] = None,
                 pattern_encryption_title: Optional[str] = None,
                 signature_verification_enable: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_signing_title: Optional[str] = None,
                 use_original_as_a: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 verification_key_id1: Optional[str] = None,
                 verification_key_id2: Optional[str] = None,
                 verification_public_key1: Optional[str] = None,
                 verification_public_key2: Optional[str] = None):
        if ab_variant_location is not None:
            pulumi.set(__self__, "ab_variant_location", ab_variant_location)
        if decryption_password1 is not None:
            pulumi.set(__self__, "decryption_password1", decryption_password1)
        if decryption_password2 is not None:
            pulumi.set(__self__, "decryption_password2", decryption_password2)
        if decryption_password_id1 is not None:
            pulumi.set(__self__, "decryption_password_id1", decryption_password_id1)
        if decryption_password_id2 is not None:
            pulumi.set(__self__, "decryption_password_id2", decryption_password_id2)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if miscellaneous_settings_title is not None:
            pulumi.set(__self__, "miscellaneous_settings_title", miscellaneous_settings_title)
        if pattern_decryption_enable is not None:
            pulumi.set(__self__, "pattern_decryption_enable", pattern_decryption_enable)
        if pattern_encryption_title is not None:
            pulumi.set(__self__, "pattern_encryption_title", pattern_encryption_title)
        if signature_verification_enable is not None:
            pulumi.set(__self__, "signature_verification_enable", signature_verification_enable)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if token_signing_title is not None:
            pulumi.set(__self__, "token_signing_title", token_signing_title)
        if use_original_as_a is not None:
            pulumi.set(__self__, "use_original_as_a", use_original_as_a)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if verification_key_id1 is not None:
            pulumi.set(__self__, "verification_key_id1", verification_key_id1)
        if verification_key_id2 is not None:
            pulumi.set(__self__, "verification_key_id2", verification_key_id2)
        if verification_public_key1 is not None:
            pulumi.set(__self__, "verification_public_key1", verification_public_key1)
        if verification_public_key2 is not None:
            pulumi.set(__self__, "verification_public_key2", verification_public_key2)

    @property
    @pulumi.getter(name="abVariantLocation")
    def ab_variant_location(self) -> Optional[str]:
        return pulumi.get(self, "ab_variant_location")

    @ab_variant_location.setter
    def ab_variant_location(self, value: Optional[str]):
        pulumi.set(self, "ab_variant_location", value)

    @property
    @pulumi.getter(name="decryptionPassword1")
    def decryption_password1(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password1")

    @decryption_password1.setter
    def decryption_password1(self, value: Optional[str]):
        pulumi.set(self, "decryption_password1", value)

    @property
    @pulumi.getter(name="decryptionPassword2")
    def decryption_password2(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password2")

    @decryption_password2.setter
    def decryption_password2(self, value: Optional[str]):
        pulumi.set(self, "decryption_password2", value)

    @property
    @pulumi.getter(name="decryptionPasswordId1")
    def decryption_password_id1(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password_id1")

    @decryption_password_id1.setter
    def decryption_password_id1(self, value: Optional[str]):
        pulumi.set(self, "decryption_password_id1", value)

    @property
    @pulumi.getter(name="decryptionPasswordId2")
    def decryption_password_id2(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password_id2")

    @decryption_password_id2.setter
    def decryption_password_id2(self, value: Optional[str]):
        pulumi.set(self, "decryption_password_id2", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[bool]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="miscellaneousSettingsTitle")
    def miscellaneous_settings_title(self) -> Optional[str]:
        return pulumi.get(self, "miscellaneous_settings_title")

    @miscellaneous_settings_title.setter
    def miscellaneous_settings_title(self, value: Optional[str]):
        pulumi.set(self, "miscellaneous_settings_title", value)

    @property
    @pulumi.getter(name="patternDecryptionEnable")
    def pattern_decryption_enable(self) -> Optional[bool]:
        return pulumi.get(self, "pattern_decryption_enable")

    @pattern_decryption_enable.setter
    def pattern_decryption_enable(self, value: Optional[bool]):
        pulumi.set(self, "pattern_decryption_enable", value)

    @property
    @pulumi.getter(name="patternEncryptionTitle")
    def pattern_encryption_title(self) -> Optional[str]:
        return pulumi.get(self, "pattern_encryption_title")

    @pattern_encryption_title.setter
    def pattern_encryption_title(self, value: Optional[str]):
        pulumi.set(self, "pattern_encryption_title", value)

    @property
    @pulumi.getter(name="signatureVerificationEnable")
    def signature_verification_enable(self) -> Optional[bool]:
        return pulumi.get(self, "signature_verification_enable")

    @signature_verification_enable.setter
    def signature_verification_enable(self, value: Optional[bool]):
        pulumi.set(self, "signature_verification_enable", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="tokenSigningTitle")
    def token_signing_title(self) -> Optional[str]:
        return pulumi.get(self, "token_signing_title")

    @token_signing_title.setter
    def token_signing_title(self, value: Optional[str]):
        pulumi.set(self, "token_signing_title", value)

    @property
    @pulumi.getter(name="useOriginalAsA")
    def use_original_as_a(self) -> Optional[bool]:
        return pulumi.get(self, "use_original_as_a")

    @use_original_as_a.setter
    def use_original_as_a(self, value: Optional[bool]):
        pulumi.set(self, "use_original_as_a", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="verificationKeyId1")
    def verification_key_id1(self) -> Optional[str]:
        return pulumi.get(self, "verification_key_id1")

    @verification_key_id1.setter
    def verification_key_id1(self, value: Optional[str]):
        pulumi.set(self, "verification_key_id1", value)

    @property
    @pulumi.getter(name="verificationKeyId2")
    def verification_key_id2(self) -> Optional[str]:
        return pulumi.get(self, "verification_key_id2")

    @verification_key_id2.setter
    def verification_key_id2(self, value: Optional[str]):
        pulumi.set(self, "verification_key_id2", value)

    @property
    @pulumi.getter(name="verificationPublicKey1")
    def verification_public_key1(self) -> Optional[str]:
        return pulumi.get(self, "verification_public_key1")

    @verification_public_key1.setter
    def verification_public_key1(self, value: Optional[str]):
        pulumi.set(self, "verification_public_key1", value)

    @property
    @pulumi.getter(name="verificationPublicKey2")
    def verification_public_key2(self) -> Optional[str]:
        return pulumi.get(self, "verification_public_key2")

    @verification_public_key2.setter
    def verification_public_key2(self, value: Optional[str]):
        pulumi.set(self, "verification_public_key2", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallArgs:
    def __init__(__self__, *,
                 firewall_configuration: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallFirewallConfigurationArgs'] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if firewall_configuration is not None:
            pulumi.set(__self__, "firewall_configuration", firewall_configuration)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="firewallConfiguration")
    def firewall_configuration(self) -> Optional['GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallFirewallConfigurationArgs']:
        return pulumi.get(self, "firewall_configuration")

    @firewall_configuration.setter
    def firewall_configuration(self, value: Optional['GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallFirewallConfigurationArgs']):
        pulumi.set(self, "firewall_configuration", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallFirewallConfigurationArgs:
    def __init__(__self__, *,
                 config_id: Optional[int] = None,
                 file_name: Optional[str] = None,
                 production_status: Optional[str] = None,
                 production_version: Optional[int] = None,
                 staging_status: Optional[str] = None,
                 staging_version: Optional[int] = None):
        if config_id is not None:
            pulumi.set(__self__, "config_id", config_id)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if production_status is not None:
            pulumi.set(__self__, "production_status", production_status)
        if production_version is not None:
            pulumi.set(__self__, "production_version", production_version)
        if staging_status is not None:
            pulumi.set(__self__, "staging_status", staging_status)
        if staging_version is not None:
            pulumi.set(__self__, "staging_version", staging_version)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[int]:
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: Optional[int]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[str]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter(name="productionStatus")
    def production_status(self) -> Optional[str]:
        return pulumi.get(self, "production_status")

    @production_status.setter
    def production_status(self, value: Optional[str]):
        pulumi.set(self, "production_status", value)

    @property
    @pulumi.getter(name="productionVersion")
    def production_version(self) -> Optional[int]:
        return pulumi.get(self, "production_version")

    @production_version.setter
    def production_version(self, value: Optional[int]):
        pulumi.set(self, "production_version", value)

    @property
    @pulumi.getter(name="stagingStatus")
    def staging_status(self) -> Optional[str]:
        return pulumi.get(self, "staging_status")

    @staging_status.setter
    def staging_status(self, value: Optional[str]):
        pulumi.set(self, "staging_status", value)

    @property
    @pulumi.getter(name="stagingVersion")
    def staging_version(self) -> Optional[int]:
        return pulumi.get(self, "staging_version")

    @staging_version.setter
    def staging_version(self, value: Optional[int]):
        pulumi.set(self, "staging_version", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorWebSocketsArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530BehaviorWebdavArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionArgs:
    def __init__(__self__, *,
                 advanced_im_match: Optional['GetPropertyRulesBuilderRulesV20230530CriterionAdvancedImMatchArgs'] = None,
                 bucket: Optional['GetPropertyRulesBuilderRulesV20230530CriterionBucketArgs'] = None,
                 cacheability: Optional['GetPropertyRulesBuilderRulesV20230530CriterionCacheabilityArgs'] = None,
                 china_cdn_region: Optional['GetPropertyRulesBuilderRulesV20230530CriterionChinaCdnRegionArgs'] = None,
                 client_certificate: Optional['GetPropertyRulesBuilderRulesV20230530CriterionClientCertificateArgs'] = None,
                 client_ip: Optional['GetPropertyRulesBuilderRulesV20230530CriterionClientIpArgs'] = None,
                 client_ip_version: Optional['GetPropertyRulesBuilderRulesV20230530CriterionClientIpVersionArgs'] = None,
                 cloudlets_origin: Optional['GetPropertyRulesBuilderRulesV20230530CriterionCloudletsOriginArgs'] = None,
                 content_delivery_network: Optional['GetPropertyRulesBuilderRulesV20230530CriterionContentDeliveryNetworkArgs'] = None,
                 content_type: Optional['GetPropertyRulesBuilderRulesV20230530CriterionContentTypeArgs'] = None,
                 device_characteristic: Optional['GetPropertyRulesBuilderRulesV20230530CriterionDeviceCharacteristicArgs'] = None,
                 ecmd_auth_groups: Optional['GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthGroupsArgs'] = None,
                 ecmd_auth_scheme: Optional['GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthSchemeArgs'] = None,
                 ecmd_is_authenticated: Optional['GetPropertyRulesBuilderRulesV20230530CriterionEcmdIsAuthenticatedArgs'] = None,
                 ecmd_username: Optional['GetPropertyRulesBuilderRulesV20230530CriterionEcmdUsernameArgs'] = None,
                 edge_workers_failure: Optional['GetPropertyRulesBuilderRulesV20230530CriterionEdgeWorkersFailureArgs'] = None,
                 file_extension: Optional['GetPropertyRulesBuilderRulesV20230530CriterionFileExtensionArgs'] = None,
                 filename: Optional['GetPropertyRulesBuilderRulesV20230530CriterionFilenameArgs'] = None,
                 hostname: Optional['GetPropertyRulesBuilderRulesV20230530CriterionHostnameArgs'] = None,
                 match_advanced: Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchAdvancedArgs'] = None,
                 match_cp_code: Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeArgs'] = None,
                 match_response_code: Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchResponseCodeArgs'] = None,
                 match_variable: Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchVariableArgs'] = None,
                 metadata_stage: Optional['GetPropertyRulesBuilderRulesV20230530CriterionMetadataStageArgs'] = None,
                 origin_timeout: Optional['GetPropertyRulesBuilderRulesV20230530CriterionOriginTimeoutArgs'] = None,
                 path: Optional['GetPropertyRulesBuilderRulesV20230530CriterionPathArgs'] = None,
                 query_string_parameter: Optional['GetPropertyRulesBuilderRulesV20230530CriterionQueryStringParameterArgs'] = None,
                 random: Optional['GetPropertyRulesBuilderRulesV20230530CriterionRandomArgs'] = None,
                 recovery_config: Optional['GetPropertyRulesBuilderRulesV20230530CriterionRecoveryConfigArgs'] = None,
                 regular_expression: Optional['GetPropertyRulesBuilderRulesV20230530CriterionRegularExpressionArgs'] = None,
                 request_cookie: Optional['GetPropertyRulesBuilderRulesV20230530CriterionRequestCookieArgs'] = None,
                 request_header: Optional['GetPropertyRulesBuilderRulesV20230530CriterionRequestHeaderArgs'] = None,
                 request_method: Optional['GetPropertyRulesBuilderRulesV20230530CriterionRequestMethodArgs'] = None,
                 request_protocol: Optional['GetPropertyRulesBuilderRulesV20230530CriterionRequestProtocolArgs'] = None,
                 request_type: Optional['GetPropertyRulesBuilderRulesV20230530CriterionRequestTypeArgs'] = None,
                 response_header: Optional['GetPropertyRulesBuilderRulesV20230530CriterionResponseHeaderArgs'] = None,
                 server_location: Optional['GetPropertyRulesBuilderRulesV20230530CriterionServerLocationArgs'] = None,
                 time: Optional['GetPropertyRulesBuilderRulesV20230530CriterionTimeArgs'] = None,
                 token_authorization: Optional['GetPropertyRulesBuilderRulesV20230530CriterionTokenAuthorizationArgs'] = None,
                 user_agent: Optional['GetPropertyRulesBuilderRulesV20230530CriterionUserAgentArgs'] = None,
                 user_location: Optional['GetPropertyRulesBuilderRulesV20230530CriterionUserLocationArgs'] = None,
                 user_network: Optional['GetPropertyRulesBuilderRulesV20230530CriterionUserNetworkArgs'] = None,
                 variable_error: Optional['GetPropertyRulesBuilderRulesV20230530CriterionVariableErrorArgs'] = None,
                 virtual_waiting_room_request: Optional['GetPropertyRulesBuilderRulesV20230530CriterionVirtualWaitingRoomRequestArgs'] = None,
                 visitor_prioritization_request: Optional['GetPropertyRulesBuilderRulesV20230530CriterionVisitorPrioritizationRequestArgs'] = None):
        if advanced_im_match is not None:
            pulumi.set(__self__, "advanced_im_match", advanced_im_match)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if cacheability is not None:
            pulumi.set(__self__, "cacheability", cacheability)
        if china_cdn_region is not None:
            pulumi.set(__self__, "china_cdn_region", china_cdn_region)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if client_ip_version is not None:
            pulumi.set(__self__, "client_ip_version", client_ip_version)
        if cloudlets_origin is not None:
            pulumi.set(__self__, "cloudlets_origin", cloudlets_origin)
        if content_delivery_network is not None:
            pulumi.set(__self__, "content_delivery_network", content_delivery_network)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if device_characteristic is not None:
            pulumi.set(__self__, "device_characteristic", device_characteristic)
        if ecmd_auth_groups is not None:
            pulumi.set(__self__, "ecmd_auth_groups", ecmd_auth_groups)
        if ecmd_auth_scheme is not None:
            pulumi.set(__self__, "ecmd_auth_scheme", ecmd_auth_scheme)
        if ecmd_is_authenticated is not None:
            pulumi.set(__self__, "ecmd_is_authenticated", ecmd_is_authenticated)
        if ecmd_username is not None:
            pulumi.set(__self__, "ecmd_username", ecmd_username)
        if edge_workers_failure is not None:
            pulumi.set(__self__, "edge_workers_failure", edge_workers_failure)
        if file_extension is not None:
            pulumi.set(__self__, "file_extension", file_extension)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if match_advanced is not None:
            pulumi.set(__self__, "match_advanced", match_advanced)
        if match_cp_code is not None:
            pulumi.set(__self__, "match_cp_code", match_cp_code)
        if match_response_code is not None:
            pulumi.set(__self__, "match_response_code", match_response_code)
        if match_variable is not None:
            pulumi.set(__self__, "match_variable", match_variable)
        if metadata_stage is not None:
            pulumi.set(__self__, "metadata_stage", metadata_stage)
        if origin_timeout is not None:
            pulumi.set(__self__, "origin_timeout", origin_timeout)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if query_string_parameter is not None:
            pulumi.set(__self__, "query_string_parameter", query_string_parameter)
        if random is not None:
            pulumi.set(__self__, "random", random)
        if recovery_config is not None:
            pulumi.set(__self__, "recovery_config", recovery_config)
        if regular_expression is not None:
            pulumi.set(__self__, "regular_expression", regular_expression)
        if request_cookie is not None:
            pulumi.set(__self__, "request_cookie", request_cookie)
        if request_header is not None:
            pulumi.set(__self__, "request_header", request_header)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if response_header is not None:
            pulumi.set(__self__, "response_header", response_header)
        if server_location is not None:
            pulumi.set(__self__, "server_location", server_location)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if token_authorization is not None:
            pulumi.set(__self__, "token_authorization", token_authorization)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)
        if user_location is not None:
            pulumi.set(__self__, "user_location", user_location)
        if user_network is not None:
            pulumi.set(__self__, "user_network", user_network)
        if variable_error is not None:
            pulumi.set(__self__, "variable_error", variable_error)
        if virtual_waiting_room_request is not None:
            pulumi.set(__self__, "virtual_waiting_room_request", virtual_waiting_room_request)
        if visitor_prioritization_request is not None:
            pulumi.set(__self__, "visitor_prioritization_request", visitor_prioritization_request)

    @property
    @pulumi.getter(name="advancedImMatch")
    def advanced_im_match(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionAdvancedImMatchArgs']:
        return pulumi.get(self, "advanced_im_match")

    @advanced_im_match.setter
    def advanced_im_match(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionAdvancedImMatchArgs']):
        pulumi.set(self, "advanced_im_match", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionBucketArgs']:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionBucketArgs']):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def cacheability(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionCacheabilityArgs']:
        return pulumi.get(self, "cacheability")

    @cacheability.setter
    def cacheability(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionCacheabilityArgs']):
        pulumi.set(self, "cacheability", value)

    @property
    @pulumi.getter(name="chinaCdnRegion")
    def china_cdn_region(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionChinaCdnRegionArgs']:
        return pulumi.get(self, "china_cdn_region")

    @china_cdn_region.setter
    def china_cdn_region(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionChinaCdnRegionArgs']):
        pulumi.set(self, "china_cdn_region", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionClientCertificateArgs']:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionClientCertificateArgs']):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionClientIpArgs']:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionClientIpArgs']):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter(name="clientIpVersion")
    def client_ip_version(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionClientIpVersionArgs']:
        return pulumi.get(self, "client_ip_version")

    @client_ip_version.setter
    def client_ip_version(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionClientIpVersionArgs']):
        pulumi.set(self, "client_ip_version", value)

    @property
    @pulumi.getter(name="cloudletsOrigin")
    def cloudlets_origin(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionCloudletsOriginArgs']:
        return pulumi.get(self, "cloudlets_origin")

    @cloudlets_origin.setter
    def cloudlets_origin(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionCloudletsOriginArgs']):
        pulumi.set(self, "cloudlets_origin", value)

    @property
    @pulumi.getter(name="contentDeliveryNetwork")
    def content_delivery_network(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionContentDeliveryNetworkArgs']:
        return pulumi.get(self, "content_delivery_network")

    @content_delivery_network.setter
    def content_delivery_network(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionContentDeliveryNetworkArgs']):
        pulumi.set(self, "content_delivery_network", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionContentTypeArgs']:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionContentTypeArgs']):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="deviceCharacteristic")
    def device_characteristic(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionDeviceCharacteristicArgs']:
        return pulumi.get(self, "device_characteristic")

    @device_characteristic.setter
    def device_characteristic(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionDeviceCharacteristicArgs']):
        pulumi.set(self, "device_characteristic", value)

    @property
    @pulumi.getter(name="ecmdAuthGroups")
    def ecmd_auth_groups(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthGroupsArgs']:
        return pulumi.get(self, "ecmd_auth_groups")

    @ecmd_auth_groups.setter
    def ecmd_auth_groups(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthGroupsArgs']):
        pulumi.set(self, "ecmd_auth_groups", value)

    @property
    @pulumi.getter(name="ecmdAuthScheme")
    def ecmd_auth_scheme(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthSchemeArgs']:
        return pulumi.get(self, "ecmd_auth_scheme")

    @ecmd_auth_scheme.setter
    def ecmd_auth_scheme(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthSchemeArgs']):
        pulumi.set(self, "ecmd_auth_scheme", value)

    @property
    @pulumi.getter(name="ecmdIsAuthenticated")
    def ecmd_is_authenticated(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionEcmdIsAuthenticatedArgs']:
        return pulumi.get(self, "ecmd_is_authenticated")

    @ecmd_is_authenticated.setter
    def ecmd_is_authenticated(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionEcmdIsAuthenticatedArgs']):
        pulumi.set(self, "ecmd_is_authenticated", value)

    @property
    @pulumi.getter(name="ecmdUsername")
    def ecmd_username(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionEcmdUsernameArgs']:
        return pulumi.get(self, "ecmd_username")

    @ecmd_username.setter
    def ecmd_username(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionEcmdUsernameArgs']):
        pulumi.set(self, "ecmd_username", value)

    @property
    @pulumi.getter(name="edgeWorkersFailure")
    def edge_workers_failure(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionEdgeWorkersFailureArgs']:
        return pulumi.get(self, "edge_workers_failure")

    @edge_workers_failure.setter
    def edge_workers_failure(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionEdgeWorkersFailureArgs']):
        pulumi.set(self, "edge_workers_failure", value)

    @property
    @pulumi.getter(name="fileExtension")
    def file_extension(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionFileExtensionArgs']:
        return pulumi.get(self, "file_extension")

    @file_extension.setter
    def file_extension(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionFileExtensionArgs']):
        pulumi.set(self, "file_extension", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionFilenameArgs']:
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionFilenameArgs']):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionHostnameArgs']:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionHostnameArgs']):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="matchAdvanced")
    def match_advanced(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchAdvancedArgs']:
        return pulumi.get(self, "match_advanced")

    @match_advanced.setter
    def match_advanced(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchAdvancedArgs']):
        pulumi.set(self, "match_advanced", value)

    @property
    @pulumi.getter(name="matchCpCode")
    def match_cp_code(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeArgs']:
        return pulumi.get(self, "match_cp_code")

    @match_cp_code.setter
    def match_cp_code(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeArgs']):
        pulumi.set(self, "match_cp_code", value)

    @property
    @pulumi.getter(name="matchResponseCode")
    def match_response_code(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchResponseCodeArgs']:
        return pulumi.get(self, "match_response_code")

    @match_response_code.setter
    def match_response_code(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchResponseCodeArgs']):
        pulumi.set(self, "match_response_code", value)

    @property
    @pulumi.getter(name="matchVariable")
    def match_variable(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchVariableArgs']:
        return pulumi.get(self, "match_variable")

    @match_variable.setter
    def match_variable(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchVariableArgs']):
        pulumi.set(self, "match_variable", value)

    @property
    @pulumi.getter(name="metadataStage")
    def metadata_stage(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionMetadataStageArgs']:
        return pulumi.get(self, "metadata_stage")

    @metadata_stage.setter
    def metadata_stage(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionMetadataStageArgs']):
        pulumi.set(self, "metadata_stage", value)

    @property
    @pulumi.getter(name="originTimeout")
    def origin_timeout(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionOriginTimeoutArgs']:
        return pulumi.get(self, "origin_timeout")

    @origin_timeout.setter
    def origin_timeout(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionOriginTimeoutArgs']):
        pulumi.set(self, "origin_timeout", value)

    @property
    @pulumi.getter
    def path(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionPathArgs']:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionPathArgs']):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="queryStringParameter")
    def query_string_parameter(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionQueryStringParameterArgs']:
        return pulumi.get(self, "query_string_parameter")

    @query_string_parameter.setter
    def query_string_parameter(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionQueryStringParameterArgs']):
        pulumi.set(self, "query_string_parameter", value)

    @property
    @pulumi.getter
    def random(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionRandomArgs']:
        return pulumi.get(self, "random")

    @random.setter
    def random(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionRandomArgs']):
        pulumi.set(self, "random", value)

    @property
    @pulumi.getter(name="recoveryConfig")
    def recovery_config(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionRecoveryConfigArgs']:
        return pulumi.get(self, "recovery_config")

    @recovery_config.setter
    def recovery_config(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionRecoveryConfigArgs']):
        pulumi.set(self, "recovery_config", value)

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionRegularExpressionArgs']:
        return pulumi.get(self, "regular_expression")

    @regular_expression.setter
    def regular_expression(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionRegularExpressionArgs']):
        pulumi.set(self, "regular_expression", value)

    @property
    @pulumi.getter(name="requestCookie")
    def request_cookie(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionRequestCookieArgs']:
        return pulumi.get(self, "request_cookie")

    @request_cookie.setter
    def request_cookie(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionRequestCookieArgs']):
        pulumi.set(self, "request_cookie", value)

    @property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionRequestHeaderArgs']:
        return pulumi.get(self, "request_header")

    @request_header.setter
    def request_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionRequestHeaderArgs']):
        pulumi.set(self, "request_header", value)

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionRequestMethodArgs']:
        return pulumi.get(self, "request_method")

    @request_method.setter
    def request_method(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionRequestMethodArgs']):
        pulumi.set(self, "request_method", value)

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionRequestProtocolArgs']:
        return pulumi.get(self, "request_protocol")

    @request_protocol.setter
    def request_protocol(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionRequestProtocolArgs']):
        pulumi.set(self, "request_protocol", value)

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionRequestTypeArgs']:
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionRequestTypeArgs']):
        pulumi.set(self, "request_type", value)

    @property
    @pulumi.getter(name="responseHeader")
    def response_header(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionResponseHeaderArgs']:
        return pulumi.get(self, "response_header")

    @response_header.setter
    def response_header(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionResponseHeaderArgs']):
        pulumi.set(self, "response_header", value)

    @property
    @pulumi.getter(name="serverLocation")
    def server_location(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionServerLocationArgs']:
        return pulumi.get(self, "server_location")

    @server_location.setter
    def server_location(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionServerLocationArgs']):
        pulumi.set(self, "server_location", value)

    @property
    @pulumi.getter
    def time(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionTimeArgs']:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionTimeArgs']):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="tokenAuthorization")
    def token_authorization(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionTokenAuthorizationArgs']:
        return pulumi.get(self, "token_authorization")

    @token_authorization.setter
    def token_authorization(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionTokenAuthorizationArgs']):
        pulumi.set(self, "token_authorization", value)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionUserAgentArgs']:
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionUserAgentArgs']):
        pulumi.set(self, "user_agent", value)

    @property
    @pulumi.getter(name="userLocation")
    def user_location(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionUserLocationArgs']:
        return pulumi.get(self, "user_location")

    @user_location.setter
    def user_location(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionUserLocationArgs']):
        pulumi.set(self, "user_location", value)

    @property
    @pulumi.getter(name="userNetwork")
    def user_network(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionUserNetworkArgs']:
        return pulumi.get(self, "user_network")

    @user_network.setter
    def user_network(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionUserNetworkArgs']):
        pulumi.set(self, "user_network", value)

    @property
    @pulumi.getter(name="variableError")
    def variable_error(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionVariableErrorArgs']:
        return pulumi.get(self, "variable_error")

    @variable_error.setter
    def variable_error(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionVariableErrorArgs']):
        pulumi.set(self, "variable_error", value)

    @property
    @pulumi.getter(name="virtualWaitingRoomRequest")
    def virtual_waiting_room_request(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionVirtualWaitingRoomRequestArgs']:
        return pulumi.get(self, "virtual_waiting_room_request")

    @virtual_waiting_room_request.setter
    def virtual_waiting_room_request(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionVirtualWaitingRoomRequestArgs']):
        pulumi.set(self, "virtual_waiting_room_request", value)

    @property
    @pulumi.getter(name="visitorPrioritizationRequest")
    def visitor_prioritization_request(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionVisitorPrioritizationRequestArgs']:
        return pulumi.get(self, "visitor_prioritization_request")

    @visitor_prioritization_request.setter
    def visitor_prioritization_request(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionVisitorPrioritizationRequestArgs']):
        pulumi.set(self, "visitor_prioritization_request", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionAdvancedImMatchArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_on is not None:
            pulumi.set(__self__, "match_on", match_on)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @match_on.setter
    def match_on(self, value: Optional[str]):
        pulumi.set(self, "match_on", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionBucketArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 percentage: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def percentage(self) -> Optional[int]:
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: Optional[int]):
        pulumi.set(self, "percentage", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionCacheabilityArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionChinaCdnRegionArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionClientCertificateArgs:
    def __init__(__self__, *,
                 is_certificate_present: Optional[bool] = None,
                 is_certificate_valid: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if is_certificate_present is not None:
            pulumi.set(__self__, "is_certificate_present", is_certificate_present)
        if is_certificate_valid is not None:
            pulumi.set(__self__, "is_certificate_valid", is_certificate_valid)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="isCertificatePresent")
    def is_certificate_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_certificate_present")

    @is_certificate_present.setter
    def is_certificate_present(self, value: Optional[bool]):
        pulumi.set(self, "is_certificate_present", value)

    @property
    @pulumi.getter(name="isCertificateValid")
    def is_certificate_valid(self) -> Optional[str]:
        return pulumi.get(self, "is_certificate_valid")

    @is_certificate_valid.setter
    def is_certificate_valid(self, value: Optional[str]):
        pulumi.set(self, "is_certificate_valid", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionClientIpArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_headers: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_headers is not None:
            pulumi.set(__self__, "use_headers", use_headers)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useHeaders")
    def use_headers(self) -> Optional[bool]:
        return pulumi.get(self, "use_headers")

    @use_headers.setter
    def use_headers(self, value: Optional[bool]):
        pulumi.set(self, "use_headers", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionClientIpVersionArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_x_forwarded_for: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_x_forwarded_for is not None:
            pulumi.set(__self__, "use_x_forwarded_for", use_x_forwarded_for)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useXForwardedFor")
    def use_x_forwarded_for(self) -> Optional[bool]:
        return pulumi.get(self, "use_x_forwarded_for")

    @use_x_forwarded_for.setter
    def use_x_forwarded_for(self, value: Optional[bool]):
        pulumi.set(self, "use_x_forwarded_for", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionCloudletsOriginArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: Optional[str]):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionContentDeliveryNetworkArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 network: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionContentTypeArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard is not None:
            pulumi.set(__self__, "match_wildcard", match_wildcard)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @match_case_sensitive.setter
    def match_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @match_wildcard.setter
    def match_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionDeviceCharacteristicArgs:
    def __init__(__self__, *,
                 boolean_value: Optional[bool] = None,
                 characteristic: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_wildcard: Optional[bool] = None,
                 numeric_match_operator: Optional[str] = None,
                 numeric_value: Optional[int] = None,
                 string_match_operator: Optional[str] = None,
                 string_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 version_match_operator: Optional[str] = None,
                 version_value: Optional[str] = None):
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if characteristic is not None:
            pulumi.set(__self__, "characteristic", characteristic)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_wildcard is not None:
            pulumi.set(__self__, "match_wildcard", match_wildcard)
        if numeric_match_operator is not None:
            pulumi.set(__self__, "numeric_match_operator", numeric_match_operator)
        if numeric_value is not None:
            pulumi.set(__self__, "numeric_value", numeric_value)
        if string_match_operator is not None:
            pulumi.set(__self__, "string_match_operator", string_match_operator)
        if string_values is not None:
            pulumi.set(__self__, "string_values", string_values)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if version_match_operator is not None:
            pulumi.set(__self__, "version_match_operator", version_match_operator)
        if version_value is not None:
            pulumi.set(__self__, "version_value", version_value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[bool]:
        return pulumi.get(self, "boolean_value")

    @boolean_value.setter
    def boolean_value(self, value: Optional[bool]):
        pulumi.set(self, "boolean_value", value)

    @property
    @pulumi.getter
    def characteristic(self) -> Optional[str]:
        return pulumi.get(self, "characteristic")

    @characteristic.setter
    def characteristic(self, value: Optional[str]):
        pulumi.set(self, "characteristic", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @match_case_sensitive.setter
    def match_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive", value)

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @match_wildcard.setter
    def match_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard", value)

    @property
    @pulumi.getter(name="numericMatchOperator")
    def numeric_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "numeric_match_operator")

    @numeric_match_operator.setter
    def numeric_match_operator(self, value: Optional[str]):
        pulumi.set(self, "numeric_match_operator", value)

    @property
    @pulumi.getter(name="numericValue")
    def numeric_value(self) -> Optional[int]:
        return pulumi.get(self, "numeric_value")

    @numeric_value.setter
    def numeric_value(self, value: Optional[int]):
        pulumi.set(self, "numeric_value", value)

    @property
    @pulumi.getter(name="stringMatchOperator")
    def string_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "string_match_operator")

    @string_match_operator.setter
    def string_match_operator(self, value: Optional[str]):
        pulumi.set(self, "string_match_operator", value)

    @property
    @pulumi.getter(name="stringValues")
    def string_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "string_values")

    @string_values.setter
    def string_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "string_values", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="versionMatchOperator")
    def version_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "version_match_operator")

    @version_match_operator.setter
    def version_match_operator(self, value: Optional[str]):
        pulumi.set(self, "version_match_operator", value)

    @property
    @pulumi.getter(name="versionValue")
    def version_value(self) -> Optional[str]:
        return pulumi.get(self, "version_value")

    @version_value.setter
    def version_value(self, value: Optional[str]):
        pulumi.set(self, "version_value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthGroupsArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthSchemeArgs:
    def __init__(__self__, *,
                 auth_scheme: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if auth_scheme is not None:
            pulumi.set(__self__, "auth_scheme", auth_scheme)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="authScheme")
    def auth_scheme(self) -> Optional[str]:
        return pulumi.get(self, "auth_scheme")

    @auth_scheme.setter
    def auth_scheme(self, value: Optional[str]):
        pulumi.set(self, "auth_scheme", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionEcmdIsAuthenticatedArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionEcmdUsernameArgs:
    def __init__(__self__, *,
                 length: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if length is not None:
            pulumi.set(__self__, "length", length)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[str]:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[str]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionEdgeWorkersFailureArgs:
    def __init__(__self__, *,
                 exec_status: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if exec_status is not None:
            pulumi.set(__self__, "exec_status", exec_status)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="execStatus")
    def exec_status(self) -> Optional[str]:
        return pulumi.get(self, "exec_status")

    @exec_status.setter
    def exec_status(self, value: Optional[str]):
        pulumi.set(self, "exec_status", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionFileExtensionArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @match_case_sensitive.setter
    def match_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionFilenameArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @match_case_sensitive.setter
    def match_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionHostnameArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchAdvancedArgs:
    def __init__(__self__, *,
                 close_xml: Optional[str] = None,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 open_xml: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if close_xml is not None:
            pulumi.set(__self__, "close_xml", close_xml)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if open_xml is not None:
            pulumi.set(__self__, "open_xml", open_xml)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="closeXml")
    def close_xml(self) -> Optional[str]:
        return pulumi.get(self, "close_xml")

    @close_xml.setter
    def close_xml(self, value: Optional[str]):
        pulumi.set(self, "close_xml", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="openXml")
    def open_xml(self) -> Optional[str]:
        return pulumi.get(self, "open_xml")

    @open_xml.setter
    def open_xml(self, value: Optional[str]):
        pulumi.set(self, "open_xml", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueArgs'] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueArgs']:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueArgs']):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueArgs:
    def __init__(__self__, *,
                 cp_code_limits: Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueCpCodeLimitsArgs'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueCpCodeLimitsArgs']:
        return pulumi.get(self, "cp_code_limits")

    @cp_code_limits.setter
    def cp_code_limits(self, value: Optional['GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueCpCodeLimitsArgs']):
        pulumi.set(self, "cp_code_limits", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[int]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "products", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueCpCodeLimitsArgs:
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @current_capacity.setter
    def current_capacity(self, value: Optional[int]):
        pulumi.set(self, "current_capacity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @limit_type.setter
    def limit_type(self, value: Optional[str]):
        pulumi.set(self, "limit_type", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchResponseCodeArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @lower_bound.setter
    def lower_bound(self, value: Optional[int]):
        pulumi.set(self, "lower_bound", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @upper_bound.setter
    def upper_bound(self, value: Optional[int]):
        pulumi.set(self, "upper_bound", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchVariableArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[str] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_expression: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 variable_values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard is not None:
            pulumi.set(__self__, "match_wildcard", match_wildcard)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_expression is not None:
            pulumi.set(__self__, "variable_expression", variable_expression)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)
        if variable_values is not None:
            pulumi.set(__self__, "variable_values", variable_values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[str]:
        return pulumi.get(self, "lower_bound")

    @lower_bound.setter
    def lower_bound(self, value: Optional[str]):
        pulumi.set(self, "lower_bound", value)

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @match_case_sensitive.setter
    def match_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @match_wildcard.setter
    def match_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[str]:
        return pulumi.get(self, "upper_bound")

    @upper_bound.setter
    def upper_bound(self, value: Optional[str]):
        pulumi.set(self, "upper_bound", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="variableExpression")
    def variable_expression(self) -> Optional[str]:
        return pulumi.get(self, "variable_expression")

    @variable_expression.setter
    def variable_expression(self, value: Optional[str]):
        pulumi.set(self, "variable_expression", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[str]):
        pulumi.set(self, "variable_name", value)

    @property
    @pulumi.getter(name="variableValues")
    def variable_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "variable_values")

    @variable_values.setter
    def variable_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "variable_values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionMetadataStageArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionOriginTimeoutArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionPathArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 normalize: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if normalize is not None:
            pulumi.set(__self__, "normalize", normalize)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @match_case_sensitive.setter
    def match_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter
    def normalize(self) -> Optional[bool]:
        return pulumi.get(self, "normalize")

    @normalize.setter
    def normalize(self, value: Optional[bool]):
        pulumi.set(self, "normalize", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionQueryStringParameterArgs:
    def __init__(__self__, *,
                 escape_value: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_name: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if escape_value is not None:
            pulumi.set(__self__, "escape_value", escape_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_case_sensitive_name is not None:
            pulumi.set(__self__, "match_case_sensitive_name", match_case_sensitive_name)
        if match_case_sensitive_value is not None:
            pulumi.set(__self__, "match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard_name is not None:
            pulumi.set(__self__, "match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            pulumi.set(__self__, "match_wildcard_value", match_wildcard_value)
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="escapeValue")
    def escape_value(self) -> Optional[bool]:
        return pulumi.get(self, "escape_value")

    @escape_value.setter
    def escape_value(self, value: Optional[bool]):
        pulumi.set(self, "escape_value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @lower_bound.setter
    def lower_bound(self, value: Optional[int]):
        pulumi.set(self, "lower_bound", value)

    @property
    @pulumi.getter(name="matchCaseSensitiveName")
    def match_case_sensitive_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_name")

    @match_case_sensitive_name.setter
    def match_case_sensitive_name(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive_name", value)

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @match_case_sensitive_value.setter
    def match_case_sensitive_value(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive_value", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @match_wildcard_name.setter
    def match_wildcard_name(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard_name", value)

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @match_wildcard_value.setter
    def match_wildcard_value(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard_value", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[str]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @upper_bound.setter
    def upper_bound(self, value: Optional[int]):
        pulumi.set(self, "upper_bound", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionRandomArgs:
    def __init__(__self__, *,
                 bucket: Optional[int] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[int]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[int]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionRecoveryConfigArgs:
    def __init__(__self__, *,
                 config_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if config_name is not None:
            pulumi.set(__self__, "config_name", config_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> Optional[str]:
        return pulumi.get(self, "config_name")

    @config_name.setter
    def config_name(self, value: Optional[str]):
        pulumi.set(self, "config_name", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionRegularExpressionArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match_string: Optional[str] = None,
                 regex: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_string is not None:
            pulumi.set(__self__, "match_string", match_string)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchString")
    def match_string(self) -> Optional[str]:
        return pulumi.get(self, "match_string")

    @match_string.setter
    def match_string(self, value: Optional[str]):
        pulumi.set(self, "match_string", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[str]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionRequestCookieArgs:
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_name: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_case_sensitive_name is not None:
            pulumi.set(__self__, "match_case_sensitive_name", match_case_sensitive_name)
        if match_case_sensitive_value is not None:
            pulumi.set(__self__, "match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard_name is not None:
            pulumi.set(__self__, "match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            pulumi.set(__self__, "match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[str]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @lower_bound.setter
    def lower_bound(self, value: Optional[int]):
        pulumi.set(self, "lower_bound", value)

    @property
    @pulumi.getter(name="matchCaseSensitiveName")
    def match_case_sensitive_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_name")

    @match_case_sensitive_name.setter
    def match_case_sensitive_name(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive_name", value)

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @match_case_sensitive_value.setter
    def match_case_sensitive_value(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive_value", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @match_wildcard_name.setter
    def match_wildcard_name(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard_name", value)

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @match_wildcard_value.setter
    def match_wildcard_value(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard_value", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @upper_bound.setter
    def upper_bound(self, value: Optional[int]):
        pulumi.set(self, "upper_bound", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionRequestHeaderArgs:
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive_value is not None:
            pulumi.set(__self__, "match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard_name is not None:
            pulumi.set(__self__, "match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            pulumi.set(__self__, "match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @match_case_sensitive_value.setter
    def match_case_sensitive_value(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive_value", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @match_wildcard_name.setter
    def match_wildcard_name(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard_name", value)

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @match_wildcard_value.setter
    def match_wildcard_value(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard_value", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionRequestMethodArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionRequestProtocolArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionRequestTypeArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionResponseHeaderArgs:
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_case_sensitive_value is not None:
            pulumi.set(__self__, "match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard_name is not None:
            pulumi.set(__self__, "match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            pulumi.set(__self__, "match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @lower_bound.setter
    def lower_bound(self, value: Optional[int]):
        pulumi.set(self, "lower_bound", value)

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @match_case_sensitive_value.setter
    def match_case_sensitive_value(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive_value", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @match_wildcard_name.setter
    def match_wildcard_name(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard_name", value)

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @match_wildcard_value.setter
    def match_wildcard_value(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard_value", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @upper_bound.setter
    def upper_bound(self, value: Optional[int]):
        pulumi.set(self, "upper_bound", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionServerLocationArgs:
    def __init__(__self__, *,
                 continents: Optional[Sequence[str]] = None,
                 countries: Optional[Sequence[str]] = None,
                 location_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 regions: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if continents is not None:
            pulumi.set(__self__, "continents", continents)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if location_type is not None:
            pulumi.set(__self__, "location_type", location_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def continents(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "continents")

    @continents.setter
    def continents(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "continents", value)

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "countries", value)

    @property
    @pulumi.getter(name="locationType")
    def location_type(self) -> Optional[str]:
        return pulumi.get(self, "location_type")

    @location_type.setter
    def location_type(self, value: Optional[str]):
        pulumi.set(self, "location_type", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionTimeArgs:
    def __init__(__self__, *,
                 apply_daylight_savings_time: Optional[bool] = None,
                 begin_date: Optional[str] = None,
                 end_date: Optional[str] = None,
                 lasting_date: Optional[str] = None,
                 lasting_duration: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 repeat_begin_date: Optional[str] = None,
                 repeat_duration: Optional[str] = None,
                 repeat_interval: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if apply_daylight_savings_time is not None:
            pulumi.set(__self__, "apply_daylight_savings_time", apply_daylight_savings_time)
        if begin_date is not None:
            pulumi.set(__self__, "begin_date", begin_date)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if lasting_date is not None:
            pulumi.set(__self__, "lasting_date", lasting_date)
        if lasting_duration is not None:
            pulumi.set(__self__, "lasting_duration", lasting_duration)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if repeat_begin_date is not None:
            pulumi.set(__self__, "repeat_begin_date", repeat_begin_date)
        if repeat_duration is not None:
            pulumi.set(__self__, "repeat_duration", repeat_duration)
        if repeat_interval is not None:
            pulumi.set(__self__, "repeat_interval", repeat_interval)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="applyDaylightSavingsTime")
    def apply_daylight_savings_time(self) -> Optional[bool]:
        return pulumi.get(self, "apply_daylight_savings_time")

    @apply_daylight_savings_time.setter
    def apply_daylight_savings_time(self, value: Optional[bool]):
        pulumi.set(self, "apply_daylight_savings_time", value)

    @property
    @pulumi.getter(name="beginDate")
    def begin_date(self) -> Optional[str]:
        return pulumi.get(self, "begin_date")

    @begin_date.setter
    def begin_date(self, value: Optional[str]):
        pulumi.set(self, "begin_date", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[str]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="lastingDate")
    def lasting_date(self) -> Optional[str]:
        return pulumi.get(self, "lasting_date")

    @lasting_date.setter
    def lasting_date(self, value: Optional[str]):
        pulumi.set(self, "lasting_date", value)

    @property
    @pulumi.getter(name="lastingDuration")
    def lasting_duration(self) -> Optional[str]:
        return pulumi.get(self, "lasting_duration")

    @lasting_duration.setter
    def lasting_duration(self, value: Optional[str]):
        pulumi.set(self, "lasting_duration", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="repeatBeginDate")
    def repeat_begin_date(self) -> Optional[str]:
        return pulumi.get(self, "repeat_begin_date")

    @repeat_begin_date.setter
    def repeat_begin_date(self, value: Optional[str]):
        pulumi.set(self, "repeat_begin_date", value)

    @property
    @pulumi.getter(name="repeatDuration")
    def repeat_duration(self) -> Optional[str]:
        return pulumi.get(self, "repeat_duration")

    @repeat_duration.setter
    def repeat_duration(self, value: Optional[str]):
        pulumi.set(self, "repeat_duration", value)

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[str]:
        return pulumi.get(self, "repeat_interval")

    @repeat_interval.setter
    def repeat_interval(self, value: Optional[str]):
        pulumi.set(self, "repeat_interval", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionTokenAuthorizationArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 status_lists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if status_lists is not None:
            pulumi.set(__self__, "status_lists", status_lists)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="statusLists")
    def status_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "status_lists")

    @status_lists.setter
    def status_lists(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "status_lists", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionUserAgentArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard is not None:
            pulumi.set(__self__, "match_wildcard", match_wildcard)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @match_case_sensitive.setter
    def match_case_sensitive(self, value: Optional[bool]):
        pulumi.set(self, "match_case_sensitive", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @match_wildcard.setter
    def match_wildcard(self, value: Optional[bool]):
        pulumi.set(self, "match_wildcard", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionUserLocationArgs:
    def __init__(__self__, *,
                 check_ips: Optional[str] = None,
                 continent_values: Optional[Sequence[str]] = None,
                 country_values: Optional[Sequence[str]] = None,
                 field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 region_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 use_only_first_x_forwarded_for_ip: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if continent_values is not None:
            pulumi.set(__self__, "continent_values", continent_values)
        if country_values is not None:
            pulumi.set(__self__, "country_values", country_values)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if region_values is not None:
            pulumi.set(__self__, "region_values", region_values)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_only_first_x_forwarded_for_ip is not None:
            pulumi.set(__self__, "use_only_first_x_forwarded_for_ip", use_only_first_x_forwarded_for_ip)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter(name="continentValues")
    def continent_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "continent_values")

    @continent_values.setter
    def continent_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "continent_values", value)

    @property
    @pulumi.getter(name="countryValues")
    def country_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "country_values")

    @country_values.setter
    def country_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "country_values", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[str]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="regionValues")
    def region_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "region_values")

    @region_values.setter
    def region_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "region_values", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useOnlyFirstXForwardedForIp")
    def use_only_first_x_forwarded_for_ip(self) -> Optional[bool]:
        return pulumi.get(self, "use_only_first_x_forwarded_for_ip")

    @use_only_first_x_forwarded_for_ip.setter
    def use_only_first_x_forwarded_for_ip(self, value: Optional[bool]):
        pulumi.set(self, "use_only_first_x_forwarded_for_ip", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionUserNetworkArgs:
    def __init__(__self__, *,
                 bandwidth_values: Optional[Sequence[str]] = None,
                 check_ips: Optional[str] = None,
                 field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 network_type_values: Optional[Sequence[str]] = None,
                 network_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 use_only_first_x_forwarded_for_ip: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if bandwidth_values is not None:
            pulumi.set(__self__, "bandwidth_values", bandwidth_values)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if network_type_values is not None:
            pulumi.set(__self__, "network_type_values", network_type_values)
        if network_values is not None:
            pulumi.set(__self__, "network_values", network_values)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_only_first_x_forwarded_for_ip is not None:
            pulumi.set(__self__, "use_only_first_x_forwarded_for_ip", use_only_first_x_forwarded_for_ip)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="bandwidthValues")
    def bandwidth_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "bandwidth_values")

    @bandwidth_values.setter
    def bandwidth_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "bandwidth_values", value)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @check_ips.setter
    def check_ips(self, value: Optional[str]):
        pulumi.set(self, "check_ips", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[str]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="networkTypeValues")
    def network_type_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_type_values")

    @network_type_values.setter
    def network_type_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "network_type_values", value)

    @property
    @pulumi.getter(name="networkValues")
    def network_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_values")

    @network_values.setter
    def network_values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "network_values", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter(name="useOnlyFirstXForwardedForIp")
    def use_only_first_x_forwarded_for_ip(self) -> Optional[bool]:
        return pulumi.get(self, "use_only_first_x_forwarded_for_ip")

    @use_only_first_x_forwarded_for_ip.setter
    def use_only_first_x_forwarded_for_ip(self, value: Optional[bool]):
        pulumi.set(self, "use_only_first_x_forwarded_for_ip", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionVariableErrorArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 result: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_names: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_names is not None:
            pulumi.set(__self__, "variable_names", variable_names)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def result(self) -> Optional[bool]:
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: Optional[bool]):
        pulumi.set(self, "result", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="variableNames")
    def variable_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "variable_names")

    @variable_names.setter
    def variable_names(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "variable_names", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionVirtualWaitingRoomRequestArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_on is not None:
            pulumi.set(__self__, "match_on", match_on)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @match_on.setter
    def match_on(self, value: Optional[str]):
        pulumi.set(self, "match_on", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CriterionVisitorPrioritizationRequestArgs:
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_on is not None:
            pulumi.set(__self__, "match_on", match_on)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @match_on.setter
    def match_on(self, value: Optional[str]):
        pulumi.set(self, "match_on", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: Optional[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[str]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[str]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530CustomOverrideArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 override_id: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_id is not None:
            pulumi.set(__self__, "override_id", override_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideId")
    def override_id(self) -> Optional[str]:
        return pulumi.get(self, "override_id")

    @override_id.setter
    def override_id(self, value: Optional[str]):
        pulumi.set(self, "override_id", value)


@pulumi.input_type
class GetPropertyRulesBuilderRulesV20230530VariableArgs:
    def __init__(__self__, *,
                 description: str,
                 hidden: bool,
                 name: str,
                 sensitive: bool,
                 value: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "hidden", hidden)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sensitive", sensitive)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def hidden(self) -> bool:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: bool):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def sensitive(self) -> bool:
        return pulumi.get(self, "sensitive")

    @sensitive.setter
    def sensitive(self, value: bool):
        pulumi.set(self, "sensitive", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetPropertyRulesTemplateTemplateArgs:
    def __init__(__self__, *,
                 template_data: str,
                 template_dir: str):
        pulumi.set(__self__, "template_data", template_data)
        pulumi.set(__self__, "template_dir", template_dir)

    @property
    @pulumi.getter(name="templateData")
    def template_data(self) -> str:
        return pulumi.get(self, "template_data")

    @template_data.setter
    def template_data(self, value: str):
        pulumi.set(self, "template_data", value)

    @property
    @pulumi.getter(name="templateDir")
    def template_dir(self) -> str:
        return pulumi.get(self, "template_dir")

    @template_dir.setter
    def template_dir(self, value: str):
        pulumi.set(self, "template_dir", value)


@pulumi.input_type
class GetPropertyRulesTemplateVariableArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)


