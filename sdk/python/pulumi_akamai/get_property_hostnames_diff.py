# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPropertyHostnamesDiffResult',
    'AwaitableGetPropertyHostnamesDiffResult',
    'get_property_hostnames_diff',
    'get_property_hostnames_diff_output',
]

@pulumi.output_type
class GetPropertyHostnamesDiffResult:
    """
    A collection of values returned by getPropertyHostnamesDiff.
    """
    def __init__(__self__, account_id=None, contract_id=None, group_id=None, hostnames=None, id=None, property_id=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if contract_id and not isinstance(contract_id, str):
            raise TypeError("Expected argument 'contract_id' to be a str")
        pulumi.set(__self__, "contract_id", contract_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if hostnames and not isinstance(hostnames, list):
            raise TypeError("Expected argument 'hostnames' to be a list")
        pulumi.set(__self__, "hostnames", hostnames)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if property_id and not isinstance(property_id, str):
            raise TypeError("Expected argument 'property_id' to be a str")
        pulumi.set(__self__, "property_id", property_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> builtins.str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> builtins.str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def hostnames(self) -> Sequence['outputs.GetPropertyHostnamesDiffHostnameResult']:
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> builtins.str:
        return pulumi.get(self, "property_id")


class AwaitableGetPropertyHostnamesDiffResult(GetPropertyHostnamesDiffResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPropertyHostnamesDiffResult(
            account_id=self.account_id,
            contract_id=self.contract_id,
            group_id=self.group_id,
            hostnames=self.hostnames,
            id=self.id,
            property_id=self.property_id)


def get_property_hostnames_diff(contract_id: Optional[builtins.str] = None,
                                group_id: Optional[builtins.str] = None,
                                property_id: Optional[builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPropertyHostnamesDiffResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['contractId'] = contract_id
    __args__['groupId'] = group_id
    __args__['propertyId'] = property_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getPropertyHostnamesDiff:getPropertyHostnamesDiff', __args__, opts=opts, typ=GetPropertyHostnamesDiffResult).value

    return AwaitableGetPropertyHostnamesDiffResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        contract_id=pulumi.get(__ret__, 'contract_id'),
        group_id=pulumi.get(__ret__, 'group_id'),
        hostnames=pulumi.get(__ret__, 'hostnames'),
        id=pulumi.get(__ret__, 'id'),
        property_id=pulumi.get(__ret__, 'property_id'))
def get_property_hostnames_diff_output(contract_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                       group_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                       property_id: Optional[pulumi.Input[builtins.str]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPropertyHostnamesDiffResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['contractId'] = contract_id
    __args__['groupId'] = group_id
    __args__['propertyId'] = property_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getPropertyHostnamesDiff:getPropertyHostnamesDiff', __args__, opts=opts, typ=GetPropertyHostnamesDiffResult)
    return __ret__.apply(lambda __response__: GetPropertyHostnamesDiffResult(
        account_id=pulumi.get(__response__, 'account_id'),
        contract_id=pulumi.get(__response__, 'contract_id'),
        group_id=pulumi.get(__response__, 'group_id'),
        hostnames=pulumi.get(__response__, 'hostnames'),
        id=pulumi.get(__response__, 'id'),
        property_id=pulumi.get(__response__, 'property_id')))
