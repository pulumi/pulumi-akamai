# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetPropertyHostnamesResult',
    'AwaitableGetPropertyHostnamesResult',
    'get_property_hostnames',
    'get_property_hostnames_output',
]

@pulumi.output_type
class GetPropertyHostnamesResult:
    """
    A collection of values returned by getPropertyHostnames.
    """
    def __init__(__self__, contract_id=None, group_id=None, hostnames=None, id=None, property_id=None, version=None):
        if contract_id and not isinstance(contract_id, str):
            raise TypeError("Expected argument 'contract_id' to be a str")
        pulumi.set(__self__, "contract_id", contract_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if hostnames and not isinstance(hostnames, list):
            raise TypeError("Expected argument 'hostnames' to be a list")
        pulumi.set(__self__, "hostnames", hostnames)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if property_id and not isinstance(property_id, str):
            raise TypeError("Expected argument 'property_id' to be a str")
        pulumi.set(__self__, "property_id", property_id)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def hostnames(self) -> Sequence['outputs.GetPropertyHostnamesHostnameResult']:
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> str:
        return pulumi.get(self, "property_id")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


class AwaitableGetPropertyHostnamesResult(GetPropertyHostnamesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPropertyHostnamesResult(
            contract_id=self.contract_id,
            group_id=self.group_id,
            hostnames=self.hostnames,
            id=self.id,
            property_id=self.property_id,
            version=self.version)


def get_property_hostnames(contract_id: Optional[str] = None,
                           group_id: Optional[str] = None,
                           property_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPropertyHostnamesResult:
    """
    Use the `get_property_hostnames` data source to query and retrieve hostnames and their certificate statuses for an existing property. This data source lets you search across the contracts and groups you have access to.

    ## Basic usage

    This example returns the property's hostnames based on the selected contract and group:

    ```python
    import pulumi

    pulumi.export("propertyHostnames", data["akamai_property_hostnames"]["my-example"]["hostnames"])
    ```

    ## Attributes reference

    This data source returns these attributes:

    * `hostnames` - A list of hostnames for the property, including:
      * `cname_type` - A string containing the hostname's cname type value.
      * `edge_hostname_id` - The edge hostname's unique ID, including the `ehn_` prefix.
      * `cname_from` - A string containing the original origin's hostname.
      * `cname_to` - A string containing the hostname for edge content.
      * `cert_provisioning_type` - The certificate's provisioning type, either the default `CPS_MANAGED` type for the custom certificates you provision with the Certificate Provisioning System (CPS), or `DEFAULT` for certificates provisioned automatically.
      * `cert_status` - If applicable, this shows a list of certificate statuses, including:
        * `target` - The destination part of the CNAME record used to validate the certificate's domain.
        * `hostname` - The hostname part of the CNAME record used to validate the certificate's domain.
        * `production_status` - A string containing the status of the certificate deployment on the production network.
        * `staging_status` - A string containing the status of the certificate deployment on the staging network.

    ## Domain validation for DEFAULT certificates

    If your `cert_provisioning_type = "DEFAULT"` and the value for `cert_status.production_status` or `cert_status.staging_status` is either `PENDING`, `EXPIRING_SOON_NEEDS_VALIDATION`, or `EXPIRED_NEEDS_VALIDATION`, you need to perform domain validation. This proves to the certificate authority that you control the domain and are authorized to create certificates for it.

    In your DNS configuration, create a CNAME record and map the `cert_status.hostname` value to the `cert_status.target` value.


    :param str contract_id: (Required) A contract's unique ID, including the `ctr_` prefix.
    :param str group_id: (Required) A group's unique ID, including the `grp_` prefix.
    :param str property_id: (Required) A property's unique ID, including the `prp_` prefix.
    """
    __args__ = dict()
    __args__['contractId'] = contract_id
    __args__['groupId'] = group_id
    __args__['propertyId'] = property_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getPropertyHostnames:getPropertyHostnames', __args__, opts=opts, typ=GetPropertyHostnamesResult).value

    return AwaitableGetPropertyHostnamesResult(
        contract_id=__ret__.contract_id,
        group_id=__ret__.group_id,
        hostnames=__ret__.hostnames,
        id=__ret__.id,
        property_id=__ret__.property_id,
        version=__ret__.version)


@_utilities.lift_output_func(get_property_hostnames)
def get_property_hostnames_output(contract_id: Optional[pulumi.Input[str]] = None,
                                  group_id: Optional[pulumi.Input[str]] = None,
                                  property_id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPropertyHostnamesResult]:
    """
    Use the `get_property_hostnames` data source to query and retrieve hostnames and their certificate statuses for an existing property. This data source lets you search across the contracts and groups you have access to.

    ## Basic usage

    This example returns the property's hostnames based on the selected contract and group:

    ```python
    import pulumi

    pulumi.export("propertyHostnames", data["akamai_property_hostnames"]["my-example"]["hostnames"])
    ```

    ## Attributes reference

    This data source returns these attributes:

    * `hostnames` - A list of hostnames for the property, including:
      * `cname_type` - A string containing the hostname's cname type value.
      * `edge_hostname_id` - The edge hostname's unique ID, including the `ehn_` prefix.
      * `cname_from` - A string containing the original origin's hostname.
      * `cname_to` - A string containing the hostname for edge content.
      * `cert_provisioning_type` - The certificate's provisioning type, either the default `CPS_MANAGED` type for the custom certificates you provision with the Certificate Provisioning System (CPS), or `DEFAULT` for certificates provisioned automatically.
      * `cert_status` - If applicable, this shows a list of certificate statuses, including:
        * `target` - The destination part of the CNAME record used to validate the certificate's domain.
        * `hostname` - The hostname part of the CNAME record used to validate the certificate's domain.
        * `production_status` - A string containing the status of the certificate deployment on the production network.
        * `staging_status` - A string containing the status of the certificate deployment on the staging network.

    ## Domain validation for DEFAULT certificates

    If your `cert_provisioning_type = "DEFAULT"` and the value for `cert_status.production_status` or `cert_status.staging_status` is either `PENDING`, `EXPIRING_SOON_NEEDS_VALIDATION`, or `EXPIRED_NEEDS_VALIDATION`, you need to perform domain validation. This proves to the certificate authority that you control the domain and are authorized to create certificates for it.

    In your DNS configuration, create a CNAME record and map the `cert_status.hostname` value to the `cert_status.target` value.


    :param str contract_id: (Required) A contract's unique ID, including the `ctr_` prefix.
    :param str group_id: (Required) A group's unique ID, including the `grp_` prefix.
    :param str property_id: (Required) A property's unique ID, including the `prp_` prefix.
    """
    ...
