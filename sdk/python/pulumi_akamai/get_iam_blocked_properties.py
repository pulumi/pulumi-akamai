# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamBlockedPropertiesResult',
    'AwaitableGetIamBlockedPropertiesResult',
    'get_iam_blocked_properties',
    'get_iam_blocked_properties_output',
]

@pulumi.output_type
class GetIamBlockedPropertiesResult:
    """
    A collection of values returned by getIamBlockedProperties.
    """
    def __init__(__self__, blocked_properties=None, contract_id=None, group_id=None, id=None, ui_identity_id=None):
        if blocked_properties and not isinstance(blocked_properties, list):
            raise TypeError("Expected argument 'blocked_properties' to be a list")
        pulumi.set(__self__, "blocked_properties", blocked_properties)
        if contract_id and not isinstance(contract_id, str):
            raise TypeError("Expected argument 'contract_id' to be a str")
        pulumi.set(__self__, "contract_id", contract_id)
        if group_id and not isinstance(group_id, int):
            raise TypeError("Expected argument 'group_id' to be a int")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ui_identity_id and not isinstance(ui_identity_id, str):
            raise TypeError("Expected argument 'ui_identity_id' to be a str")
        pulumi.set(__self__, "ui_identity_id", ui_identity_id)

    @property
    @pulumi.getter(name="blockedProperties")
    def blocked_properties(self) -> Sequence['outputs.GetIamBlockedPropertiesBlockedPropertyResult']:
        return pulumi.get(self, "blocked_properties")

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="uiIdentityId")
    def ui_identity_id(self) -> str:
        return pulumi.get(self, "ui_identity_id")


class AwaitableGetIamBlockedPropertiesResult(GetIamBlockedPropertiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamBlockedPropertiesResult(
            blocked_properties=self.blocked_properties,
            contract_id=self.contract_id,
            group_id=self.group_id,
            id=self.id,
            ui_identity_id=self.ui_identity_id)


def get_iam_blocked_properties(contract_id: Optional[str] = None,
                               group_id: Optional[int] = None,
                               ui_identity_id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamBlockedPropertiesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['contractId'] = contract_id
    __args__['groupId'] = group_id
    __args__['uiIdentityId'] = ui_identity_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getIamBlockedProperties:getIamBlockedProperties', __args__, opts=opts, typ=GetIamBlockedPropertiesResult).value

    return AwaitableGetIamBlockedPropertiesResult(
        blocked_properties=pulumi.get(__ret__, 'blocked_properties'),
        contract_id=pulumi.get(__ret__, 'contract_id'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        ui_identity_id=pulumi.get(__ret__, 'ui_identity_id'))
def get_iam_blocked_properties_output(contract_id: Optional[pulumi.Input[str]] = None,
                                      group_id: Optional[pulumi.Input[int]] = None,
                                      ui_identity_id: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamBlockedPropertiesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['contractId'] = contract_id
    __args__['groupId'] = group_id
    __args__['uiIdentityId'] = ui_identity_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getIamBlockedProperties:getIamBlockedProperties', __args__, opts=opts, typ=GetIamBlockedPropertiesResult)
    return __ret__.apply(lambda __response__: GetIamBlockedPropertiesResult(
        blocked_properties=pulumi.get(__response__, 'blocked_properties'),
        contract_id=pulumi.get(__response__, 'contract_id'),
        group_id=pulumi.get(__response__, 'group_id'),
        id=pulumi.get(__response__, 'id'),
        ui_identity_id=pulumi.get(__response__, 'ui_identity_id')))
