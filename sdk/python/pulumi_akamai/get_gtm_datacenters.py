# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetGtmDatacentersResult',
    'AwaitableGetGtmDatacentersResult',
    'get_gtm_datacenters',
    'get_gtm_datacenters_output',
]

@pulumi.output_type
class GetGtmDatacentersResult:
    """
    A collection of values returned by getGtmDatacenters.
    """
    def __init__(__self__, datacenters=None, domain=None, id=None):
        if datacenters and not isinstance(datacenters, list):
            raise TypeError("Expected argument 'datacenters' to be a list")
        pulumi.set(__self__, "datacenters", datacenters)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def datacenters(self) -> Sequence['outputs.GetGtmDatacentersDatacenterResult']:
        return pulumi.get(self, "datacenters")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetGtmDatacentersResult(GetGtmDatacentersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGtmDatacentersResult(
            datacenters=self.datacenters,
            domain=self.domain,
            id=self.id)


def get_gtm_datacenters(domain: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGtmDatacentersResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['domain'] = domain
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getGtmDatacenters:getGtmDatacenters', __args__, opts=opts, typ=GetGtmDatacentersResult).value

    return AwaitableGetGtmDatacentersResult(
        datacenters=pulumi.get(__ret__, 'datacenters'),
        domain=pulumi.get(__ret__, 'domain'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_gtm_datacenters)
def get_gtm_datacenters_output(domain: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGtmDatacentersResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
