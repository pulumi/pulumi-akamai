# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIamPasswordPolicyResult',
    'AwaitableGetIamPasswordPolicyResult',
    'get_iam_password_policy',
    'get_iam_password_policy_output',
]

@pulumi.output_type
class GetIamPasswordPolicyResult:
    """
    A collection of values returned by getIamPasswordPolicy.
    """
    def __init__(__self__, case_dif=None, id=None, max_repeating=None, min_digits=None, min_length=None, min_letters=None, min_non_alpha=None, min_reuse=None, pw_class=None, rotate_frequency=None):
        if case_dif and not isinstance(case_dif, int):
            raise TypeError("Expected argument 'case_dif' to be a int")
        pulumi.set(__self__, "case_dif", case_dif)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if max_repeating and not isinstance(max_repeating, int):
            raise TypeError("Expected argument 'max_repeating' to be a int")
        pulumi.set(__self__, "max_repeating", max_repeating)
        if min_digits and not isinstance(min_digits, int):
            raise TypeError("Expected argument 'min_digits' to be a int")
        pulumi.set(__self__, "min_digits", min_digits)
        if min_length and not isinstance(min_length, int):
            raise TypeError("Expected argument 'min_length' to be a int")
        pulumi.set(__self__, "min_length", min_length)
        if min_letters and not isinstance(min_letters, int):
            raise TypeError("Expected argument 'min_letters' to be a int")
        pulumi.set(__self__, "min_letters", min_letters)
        if min_non_alpha and not isinstance(min_non_alpha, int):
            raise TypeError("Expected argument 'min_non_alpha' to be a int")
        pulumi.set(__self__, "min_non_alpha", min_non_alpha)
        if min_reuse and not isinstance(min_reuse, int):
            raise TypeError("Expected argument 'min_reuse' to be a int")
        pulumi.set(__self__, "min_reuse", min_reuse)
        if pw_class and not isinstance(pw_class, str):
            raise TypeError("Expected argument 'pw_class' to be a str")
        pulumi.set(__self__, "pw_class", pw_class)
        if rotate_frequency and not isinstance(rotate_frequency, int):
            raise TypeError("Expected argument 'rotate_frequency' to be a int")
        pulumi.set(__self__, "rotate_frequency", rotate_frequency)

    @property
    @pulumi.getter(name="caseDif")
    def case_dif(self) -> int:
        return pulumi.get(self, "case_dif")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxRepeating")
    def max_repeating(self) -> int:
        return pulumi.get(self, "max_repeating")

    @property
    @pulumi.getter(name="minDigits")
    def min_digits(self) -> int:
        return pulumi.get(self, "min_digits")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> int:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="minLetters")
    def min_letters(self) -> int:
        return pulumi.get(self, "min_letters")

    @property
    @pulumi.getter(name="minNonAlpha")
    def min_non_alpha(self) -> int:
        return pulumi.get(self, "min_non_alpha")

    @property
    @pulumi.getter(name="minReuse")
    def min_reuse(self) -> int:
        return pulumi.get(self, "min_reuse")

    @property
    @pulumi.getter(name="pwClass")
    def pw_class(self) -> str:
        return pulumi.get(self, "pw_class")

    @property
    @pulumi.getter(name="rotateFrequency")
    def rotate_frequency(self) -> int:
        return pulumi.get(self, "rotate_frequency")


class AwaitableGetIamPasswordPolicyResult(GetIamPasswordPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamPasswordPolicyResult(
            case_dif=self.case_dif,
            id=self.id,
            max_repeating=self.max_repeating,
            min_digits=self.min_digits,
            min_length=self.min_length,
            min_letters=self.min_letters,
            min_non_alpha=self.min_non_alpha,
            min_reuse=self.min_reuse,
            pw_class=self.pw_class,
            rotate_frequency=self.rotate_frequency)


def get_iam_password_policy(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamPasswordPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getIamPasswordPolicy:getIamPasswordPolicy', __args__, opts=opts, typ=GetIamPasswordPolicyResult).value

    return AwaitableGetIamPasswordPolicyResult(
        case_dif=pulumi.get(__ret__, 'case_dif'),
        id=pulumi.get(__ret__, 'id'),
        max_repeating=pulumi.get(__ret__, 'max_repeating'),
        min_digits=pulumi.get(__ret__, 'min_digits'),
        min_length=pulumi.get(__ret__, 'min_length'),
        min_letters=pulumi.get(__ret__, 'min_letters'),
        min_non_alpha=pulumi.get(__ret__, 'min_non_alpha'),
        min_reuse=pulumi.get(__ret__, 'min_reuse'),
        pw_class=pulumi.get(__ret__, 'pw_class'),
        rotate_frequency=pulumi.get(__ret__, 'rotate_frequency'))
def get_iam_password_policy_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamPasswordPolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getIamPasswordPolicy:getIamPasswordPolicy', __args__, opts=opts, typ=GetIamPasswordPolicyResult)
    return __ret__.apply(lambda __response__: GetIamPasswordPolicyResult(
        case_dif=pulumi.get(__response__, 'case_dif'),
        id=pulumi.get(__response__, 'id'),
        max_repeating=pulumi.get(__response__, 'max_repeating'),
        min_digits=pulumi.get(__response__, 'min_digits'),
        min_length=pulumi.get(__response__, 'min_length'),
        min_letters=pulumi.get(__response__, 'min_letters'),
        min_non_alpha=pulumi.get(__response__, 'min_non_alpha'),
        min_reuse=pulumi.get(__response__, 'min_reuse'),
        pw_class=pulumi.get(__response__, 'pw_class'),
        rotate_frequency=pulumi.get(__response__, 'rotate_frequency')))
