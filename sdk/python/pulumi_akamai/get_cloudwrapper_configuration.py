# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCloudwrapperConfigurationResult',
    'AwaitableGetCloudwrapperConfigurationResult',
    'get_cloudwrapper_configuration',
    'get_cloudwrapper_configuration_output',
]

@pulumi.output_type
class GetCloudwrapperConfigurationResult:
    """
    A collection of values returned by getCloudwrapperConfiguration.
    """
    def __init__(__self__, capacity_alerts_threshold=None, comments=None, config_name=None, contract_id=None, id=None, last_activated_by=None, last_activated_date=None, last_updated_by=None, last_updated_date=None, locations=None, multi_cdn_settings=None, notification_emails=None, property_ids=None, retain_idle_objects=None, status=None):
        if capacity_alerts_threshold and not isinstance(capacity_alerts_threshold, int):
            raise TypeError("Expected argument 'capacity_alerts_threshold' to be a int")
        pulumi.set(__self__, "capacity_alerts_threshold", capacity_alerts_threshold)
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if config_name and not isinstance(config_name, str):
            raise TypeError("Expected argument 'config_name' to be a str")
        pulumi.set(__self__, "config_name", config_name)
        if contract_id and not isinstance(contract_id, str):
            raise TypeError("Expected argument 'contract_id' to be a str")
        pulumi.set(__self__, "contract_id", contract_id)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if last_activated_by and not isinstance(last_activated_by, str):
            raise TypeError("Expected argument 'last_activated_by' to be a str")
        pulumi.set(__self__, "last_activated_by", last_activated_by)
        if last_activated_date and not isinstance(last_activated_date, str):
            raise TypeError("Expected argument 'last_activated_date' to be a str")
        pulumi.set(__self__, "last_activated_date", last_activated_date)
        if last_updated_by and not isinstance(last_updated_by, str):
            raise TypeError("Expected argument 'last_updated_by' to be a str")
        pulumi.set(__self__, "last_updated_by", last_updated_by)
        if last_updated_date and not isinstance(last_updated_date, str):
            raise TypeError("Expected argument 'last_updated_date' to be a str")
        pulumi.set(__self__, "last_updated_date", last_updated_date)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)
        if multi_cdn_settings and not isinstance(multi_cdn_settings, dict):
            raise TypeError("Expected argument 'multi_cdn_settings' to be a dict")
        pulumi.set(__self__, "multi_cdn_settings", multi_cdn_settings)
        if notification_emails and not isinstance(notification_emails, list):
            raise TypeError("Expected argument 'notification_emails' to be a list")
        pulumi.set(__self__, "notification_emails", notification_emails)
        if property_ids and not isinstance(property_ids, list):
            raise TypeError("Expected argument 'property_ids' to be a list")
        pulumi.set(__self__, "property_ids", property_ids)
        if retain_idle_objects and not isinstance(retain_idle_objects, bool):
            raise TypeError("Expected argument 'retain_idle_objects' to be a bool")
        pulumi.set(__self__, "retain_idle_objects", retain_idle_objects)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="capacityAlertsThreshold")
    def capacity_alerts_threshold(self) -> int:
        return pulumi.get(self, "capacity_alerts_threshold")

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> str:
        return pulumi.get(self, "config_name")

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastActivatedBy")
    def last_activated_by(self) -> str:
        return pulumi.get(self, "last_activated_by")

    @property
    @pulumi.getter(name="lastActivatedDate")
    def last_activated_date(self) -> str:
        return pulumi.get(self, "last_activated_date")

    @property
    @pulumi.getter(name="lastUpdatedBy")
    def last_updated_by(self) -> str:
        return pulumi.get(self, "last_updated_by")

    @property
    @pulumi.getter(name="lastUpdatedDate")
    def last_updated_date(self) -> str:
        return pulumi.get(self, "last_updated_date")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.GetCloudwrapperConfigurationLocationResult']]:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="multiCdnSettings")
    def multi_cdn_settings(self) -> Optional['outputs.GetCloudwrapperConfigurationMultiCdnSettingsResult']:
        return pulumi.get(self, "multi_cdn_settings")

    @property
    @pulumi.getter(name="notificationEmails")
    def notification_emails(self) -> Sequence[str]:
        return pulumi.get(self, "notification_emails")

    @property
    @pulumi.getter(name="propertyIds")
    def property_ids(self) -> Sequence[str]:
        return pulumi.get(self, "property_ids")

    @property
    @pulumi.getter(name="retainIdleObjects")
    def retain_idle_objects(self) -> bool:
        return pulumi.get(self, "retain_idle_objects")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


class AwaitableGetCloudwrapperConfigurationResult(GetCloudwrapperConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudwrapperConfigurationResult(
            capacity_alerts_threshold=self.capacity_alerts_threshold,
            comments=self.comments,
            config_name=self.config_name,
            contract_id=self.contract_id,
            id=self.id,
            last_activated_by=self.last_activated_by,
            last_activated_date=self.last_activated_date,
            last_updated_by=self.last_updated_by,
            last_updated_date=self.last_updated_date,
            locations=self.locations,
            multi_cdn_settings=self.multi_cdn_settings,
            notification_emails=self.notification_emails,
            property_ids=self.property_ids,
            retain_idle_objects=self.retain_idle_objects,
            status=self.status)


def get_cloudwrapper_configuration(id: Optional[int] = None,
                                   locations: Optional[Sequence[pulumi.InputType['GetCloudwrapperConfigurationLocationArgs']]] = None,
                                   multi_cdn_settings: Optional[pulumi.InputType['GetCloudwrapperConfigurationMultiCdnSettingsArgs']] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudwrapperConfigurationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['locations'] = locations
    __args__['multiCdnSettings'] = multi_cdn_settings
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getCloudwrapperConfiguration:getCloudwrapperConfiguration', __args__, opts=opts, typ=GetCloudwrapperConfigurationResult).value

    return AwaitableGetCloudwrapperConfigurationResult(
        capacity_alerts_threshold=pulumi.get(__ret__, 'capacity_alerts_threshold'),
        comments=pulumi.get(__ret__, 'comments'),
        config_name=pulumi.get(__ret__, 'config_name'),
        contract_id=pulumi.get(__ret__, 'contract_id'),
        id=pulumi.get(__ret__, 'id'),
        last_activated_by=pulumi.get(__ret__, 'last_activated_by'),
        last_activated_date=pulumi.get(__ret__, 'last_activated_date'),
        last_updated_by=pulumi.get(__ret__, 'last_updated_by'),
        last_updated_date=pulumi.get(__ret__, 'last_updated_date'),
        locations=pulumi.get(__ret__, 'locations'),
        multi_cdn_settings=pulumi.get(__ret__, 'multi_cdn_settings'),
        notification_emails=pulumi.get(__ret__, 'notification_emails'),
        property_ids=pulumi.get(__ret__, 'property_ids'),
        retain_idle_objects=pulumi.get(__ret__, 'retain_idle_objects'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_cloudwrapper_configuration)
def get_cloudwrapper_configuration_output(id: Optional[pulumi.Input[int]] = None,
                                          locations: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetCloudwrapperConfigurationLocationArgs']]]]] = None,
                                          multi_cdn_settings: Optional[pulumi.Input[Optional[pulumi.InputType['GetCloudwrapperConfigurationMultiCdnSettingsArgs']]]] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudwrapperConfigurationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
