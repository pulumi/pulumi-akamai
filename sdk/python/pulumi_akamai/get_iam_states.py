# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetIamStatesResult',
    'AwaitableGetIamStatesResult',
    'get_iam_states',
    'get_iam_states_output',
]

@pulumi.output_type
class GetIamStatesResult:
    """
    A collection of values returned by getIamStates.
    """
    def __init__(__self__, country=None, id=None, states=None):
        if country and not isinstance(country, str):
            raise TypeError("Expected argument 'country' to be a str")
        pulumi.set(__self__, "country", country)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if states and not isinstance(states, list):
            raise TypeError("Expected argument 'states' to be a list")
        pulumi.set(__self__, "states", states)

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def states(self) -> Sequence[str]:
        return pulumi.get(self, "states")


class AwaitableGetIamStatesResult(GetIamStatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamStatesResult(
            country=self.country,
            id=self.id,
            states=self.states)


def get_iam_states(country: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamStatesResult:
    """
    Use `get_iam_states` to list US states or Canadian provinces. If `country=USA` you may enter a value of `TBD` if you don't know a user's state. Administrators use this data source to set a user's state.

    ## Example Usage

    Basic usage:

    ```python
    import pulumi
    import pulumi_akamai as akamai

    states = akamai.get_iam_states(country="canada")
    pulumi.export("supportedStates", states)
    ```
    ## Attributes reference

    These attributes are returned:

    * `states` — A list of states.

    [API Reference](https://developer.akamai.com/api/core_features/identity_management_user_admin/v2.html#getadmincountrystates)


    :param str country: — (required, string) Sepcifies USA or Canada.
    """
    __args__ = dict()
    __args__['country'] = country
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getIamStates:getIamStates', __args__, opts=opts, typ=GetIamStatesResult).value

    return AwaitableGetIamStatesResult(
        country=__ret__.country,
        id=__ret__.id,
        states=__ret__.states)


@_utilities.lift_output_func(get_iam_states)
def get_iam_states_output(country: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIamStatesResult]:
    """
    Use `get_iam_states` to list US states or Canadian provinces. If `country=USA` you may enter a value of `TBD` if you don't know a user's state. Administrators use this data source to set a user's state.

    ## Example Usage

    Basic usage:

    ```python
    import pulumi
    import pulumi_akamai as akamai

    states = akamai.get_iam_states(country="canada")
    pulumi.export("supportedStates", states)
    ```
    ## Attributes reference

    These attributes are returned:

    * `states` — A list of states.

    [API Reference](https://developer.akamai.com/api/core_features/identity_management_user_admin/v2.html#getadmincountrystates)


    :param str country: — (required, string) Sepcifies USA or Canada.
    """
    ...
