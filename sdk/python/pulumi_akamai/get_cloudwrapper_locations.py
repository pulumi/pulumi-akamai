# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCloudwrapperLocationsResult',
    'AwaitableGetCloudwrapperLocationsResult',
    'get_cloudwrapper_locations',
    'get_cloudwrapper_locations_output',
]

@pulumi.output_type
class GetCloudwrapperLocationsResult:
    """
    A collection of values returned by getCloudwrapperLocations.
    """
    def __init__(__self__, id=None, locations=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def id(self) -> str:
        warnings.warn("""Required by the terraform plugin testing framework, always set to `akamai_cloudwrapper_locations`""", DeprecationWarning)
        pulumi.log.warn("""id is deprecated: Required by the terraform plugin testing framework, always set to `akamai_cloudwrapper_locations`""")

        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.GetCloudwrapperLocationsLocationResult']]:
        return pulumi.get(self, "locations")


class AwaitableGetCloudwrapperLocationsResult(GetCloudwrapperLocationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudwrapperLocationsResult(
            id=self.id,
            locations=self.locations)


def get_cloudwrapper_locations(locations: Optional[Sequence[pulumi.InputType['GetCloudwrapperLocationsLocationArgs']]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudwrapperLocationsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['locations'] = locations
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getCloudwrapperLocations:getCloudwrapperLocations', __args__, opts=opts, typ=GetCloudwrapperLocationsResult).value

    return AwaitableGetCloudwrapperLocationsResult(
        id=pulumi.get(__ret__, 'id'),
        locations=pulumi.get(__ret__, 'locations'))


@_utilities.lift_output_func(get_cloudwrapper_locations)
def get_cloudwrapper_locations_output(locations: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetCloudwrapperLocationsLocationArgs']]]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudwrapperLocationsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
