# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetBotmanBotDetectionResult',
    'AwaitableGetBotmanBotDetectionResult',
    'get_botman_bot_detection',
    'get_botman_bot_detection_output',
]

@pulumi.output_type
class GetBotmanBotDetectionResult:
    """
    A collection of values returned by getBotmanBotDetection.
    """
    def __init__(__self__, detection_name=None, id=None, json=None):
        if detection_name and not isinstance(detection_name, str):
            raise TypeError("Expected argument 'detection_name' to be a str")
        pulumi.set(__self__, "detection_name", detection_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if json and not isinstance(json, str):
            raise TypeError("Expected argument 'json' to be a str")
        pulumi.set(__self__, "json", json)

    @property
    @pulumi.getter(name="detectionName")
    def detection_name(self) -> Optional[str]:
        return pulumi.get(self, "detection_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def json(self) -> str:
        return pulumi.get(self, "json")


class AwaitableGetBotmanBotDetectionResult(GetBotmanBotDetectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBotmanBotDetectionResult(
            detection_name=self.detection_name,
            id=self.id,
            json=self.json)


def get_botman_bot_detection(detection_name: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBotmanBotDetectionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['detectionName'] = detection_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getBotmanBotDetection:getBotmanBotDetection', __args__, opts=opts, typ=GetBotmanBotDetectionResult).value

    return AwaitableGetBotmanBotDetectionResult(
        detection_name=pulumi.get(__ret__, 'detection_name'),
        id=pulumi.get(__ret__, 'id'),
        json=pulumi.get(__ret__, 'json'))


@_utilities.lift_output_func(get_botman_bot_detection)
def get_botman_bot_detection_output(detection_name: Optional[pulumi.Input[Optional[str]]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBotmanBotDetectionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
