# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AppsecAdvancedSettingsPiiLearningArgs', 'AppsecAdvancedSettingsPiiLearning']

@pulumi.input_type
class AppsecAdvancedSettingsPiiLearningArgs:
    def __init__(__self__, *,
                 config_id: pulumi.Input[int],
                 enable_pii_learning: pulumi.Input[bool]):
        """
        The set of arguments for constructing a AppsecAdvancedSettingsPiiLearning resource.
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        :param pulumi.Input[bool] enable_pii_learning: Whether to enable the PII learning advanced setting
        """
        AppsecAdvancedSettingsPiiLearningArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_id=config_id,
            enable_pii_learning=enable_pii_learning,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_id: pulumi.Input[int],
             enable_pii_learning: pulumi.Input[bool],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("config_id", config_id)
        _setter("enable_pii_learning", enable_pii_learning)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Input[int]:
        """
        Unique identifier of the security configuration
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="enablePiiLearning")
    def enable_pii_learning(self) -> pulumi.Input[bool]:
        """
        Whether to enable the PII learning advanced setting
        """
        return pulumi.get(self, "enable_pii_learning")

    @enable_pii_learning.setter
    def enable_pii_learning(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_pii_learning", value)


@pulumi.input_type
class _AppsecAdvancedSettingsPiiLearningState:
    def __init__(__self__, *,
                 config_id: Optional[pulumi.Input[int]] = None,
                 enable_pii_learning: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering AppsecAdvancedSettingsPiiLearning resources.
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        :param pulumi.Input[bool] enable_pii_learning: Whether to enable the PII learning advanced setting
        """
        _AppsecAdvancedSettingsPiiLearningState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_id=config_id,
            enable_pii_learning=enable_pii_learning,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_id: Optional[pulumi.Input[int]] = None,
             enable_pii_learning: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if config_id is not None:
            _setter("config_id", config_id)
        if enable_pii_learning is not None:
            _setter("enable_pii_learning", enable_pii_learning)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[pulumi.Input[int]]:
        """
        Unique identifier of the security configuration
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="enablePiiLearning")
    def enable_pii_learning(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the PII learning advanced setting
        """
        return pulumi.get(self, "enable_pii_learning")

    @enable_pii_learning.setter
    def enable_pii_learning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_pii_learning", value)


class AppsecAdvancedSettingsPiiLearning(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 enable_pii_learning: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a AppsecAdvancedSettingsPiiLearning resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        :param pulumi.Input[bool] enable_pii_learning: Whether to enable the PII learning advanced setting
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppsecAdvancedSettingsPiiLearningArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppsecAdvancedSettingsPiiLearning resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppsecAdvancedSettingsPiiLearningArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppsecAdvancedSettingsPiiLearningArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            AppsecAdvancedSettingsPiiLearningArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 enable_pii_learning: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppsecAdvancedSettingsPiiLearningArgs.__new__(AppsecAdvancedSettingsPiiLearningArgs)

            if config_id is None and not opts.urn:
                raise TypeError("Missing required property 'config_id'")
            __props__.__dict__["config_id"] = config_id
            if enable_pii_learning is None and not opts.urn:
                raise TypeError("Missing required property 'enable_pii_learning'")
            __props__.__dict__["enable_pii_learning"] = enable_pii_learning
        super(AppsecAdvancedSettingsPiiLearning, __self__).__init__(
            'akamai:index/appsecAdvancedSettingsPiiLearning:AppsecAdvancedSettingsPiiLearning',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config_id: Optional[pulumi.Input[int]] = None,
            enable_pii_learning: Optional[pulumi.Input[bool]] = None) -> 'AppsecAdvancedSettingsPiiLearning':
        """
        Get an existing AppsecAdvancedSettingsPiiLearning resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        :param pulumi.Input[bool] enable_pii_learning: Whether to enable the PII learning advanced setting
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppsecAdvancedSettingsPiiLearningState.__new__(_AppsecAdvancedSettingsPiiLearningState)

        __props__.__dict__["config_id"] = config_id
        __props__.__dict__["enable_pii_learning"] = enable_pii_learning
        return AppsecAdvancedSettingsPiiLearning(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Output[int]:
        """
        Unique identifier of the security configuration
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="enablePiiLearning")
    def enable_pii_learning(self) -> pulumi.Output[bool]:
        """
        Whether to enable the PII learning advanced setting
        """
        return pulumi.get(self, "enable_pii_learning")

