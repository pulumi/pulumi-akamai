# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetMtlskeystoreAccountCaCertificatesResult',
    'AwaitableGetMtlskeystoreAccountCaCertificatesResult',
    'get_mtlskeystore_account_ca_certificates',
    'get_mtlskeystore_account_ca_certificates_output',
]

@pulumi.output_type
class GetMtlskeystoreAccountCaCertificatesResult:
    """
    A collection of values returned by getMtlskeystoreAccountCaCertificates.
    """
    def __init__(__self__, certificates=None, id=None, statuses=None):
        if certificates and not isinstance(certificates, list):
            raise TypeError("Expected argument 'certificates' to be a list")
        pulumi.set(__self__, "certificates", certificates)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)

    @_builtins.property
    @pulumi.getter
    def certificates(self) -> Sequence['outputs.GetMtlskeystoreAccountCaCertificatesCertificateResult']:
        return pulumi.get(self, "certificates")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "statuses")


class AwaitableGetMtlskeystoreAccountCaCertificatesResult(GetMtlskeystoreAccountCaCertificatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMtlskeystoreAccountCaCertificatesResult(
            certificates=self.certificates,
            id=self.id,
            statuses=self.statuses)


def get_mtlskeystore_account_ca_certificates(statuses: Optional[Sequence[_builtins.str]] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMtlskeystoreAccountCaCertificatesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getMtlskeystoreAccountCaCertificates:getMtlskeystoreAccountCaCertificates', __args__, opts=opts, typ=GetMtlskeystoreAccountCaCertificatesResult).value

    return AwaitableGetMtlskeystoreAccountCaCertificatesResult(
        certificates=pulumi.get(__ret__, 'certificates'),
        id=pulumi.get(__ret__, 'id'),
        statuses=pulumi.get(__ret__, 'statuses'))
def get_mtlskeystore_account_ca_certificates_output(statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMtlskeystoreAccountCaCertificatesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getMtlskeystoreAccountCaCertificates:getMtlskeystoreAccountCaCertificates', __args__, opts=opts, typ=GetMtlskeystoreAccountCaCertificatesResult)
    return __ret__.apply(lambda __response__: GetMtlskeystoreAccountCaCertificatesResult(
        certificates=pulumi.get(__response__, 'certificates'),
        id=pulumi.get(__response__, 'id'),
        statuses=pulumi.get(__response__, 'statuses')))
