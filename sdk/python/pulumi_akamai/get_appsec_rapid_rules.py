# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAppsecRapidRulesResult',
    'AwaitableGetAppsecRapidRulesResult',
    'get_appsec_rapid_rules',
    'get_appsec_rapid_rules_output',
]

@pulumi.output_type
class GetAppsecRapidRulesResult:
    """
    A collection of values returned by getAppsecRapidRules.
    """
    def __init__(__self__, config_id=None, default_action=None, enabled=None, id=None, output_text=None, rapid_rules=None, rule_id=None, security_policy_id=None):
        if config_id and not isinstance(config_id, int):
            raise TypeError("Expected argument 'config_id' to be a int")
        pulumi.set(__self__, "config_id", config_id)
        if default_action and not isinstance(default_action, str):
            raise TypeError("Expected argument 'default_action' to be a str")
        pulumi.set(__self__, "default_action", default_action)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if output_text and not isinstance(output_text, str):
            raise TypeError("Expected argument 'output_text' to be a str")
        pulumi.set(__self__, "output_text", output_text)
        if rapid_rules and not isinstance(rapid_rules, list):
            raise TypeError("Expected argument 'rapid_rules' to be a list")
        pulumi.set(__self__, "rapid_rules", rapid_rules)
        if rule_id and not isinstance(rule_id, int):
            raise TypeError("Expected argument 'rule_id' to be a int")
        pulumi.set(__self__, "rule_id", rule_id)
        if security_policy_id and not isinstance(security_policy_id, str):
            raise TypeError("Expected argument 'security_policy_id' to be a str")
        pulumi.set(__self__, "security_policy_id", security_policy_id)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> int:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> str:
        return pulumi.get(self, "default_action")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="outputText")
    def output_text(self) -> str:
        return pulumi.get(self, "output_text")

    @property
    @pulumi.getter(name="rapidRules")
    def rapid_rules(self) -> Sequence['outputs.GetAppsecRapidRulesRapidRuleResult']:
        return pulumi.get(self, "rapid_rules")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> str:
        return pulumi.get(self, "security_policy_id")


class AwaitableGetAppsecRapidRulesResult(GetAppsecRapidRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppsecRapidRulesResult(
            config_id=self.config_id,
            default_action=self.default_action,
            enabled=self.enabled,
            id=self.id,
            output_text=self.output_text,
            rapid_rules=self.rapid_rules,
            rule_id=self.rule_id,
            security_policy_id=self.security_policy_id)


def get_appsec_rapid_rules(config_id: Optional[int] = None,
                           rule_id: Optional[int] = None,
                           security_policy_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppsecRapidRulesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['configId'] = config_id
    __args__['ruleId'] = rule_id
    __args__['securityPolicyId'] = security_policy_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getAppsecRapidRules:getAppsecRapidRules', __args__, opts=opts, typ=GetAppsecRapidRulesResult).value

    return AwaitableGetAppsecRapidRulesResult(
        config_id=pulumi.get(__ret__, 'config_id'),
        default_action=pulumi.get(__ret__, 'default_action'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        output_text=pulumi.get(__ret__, 'output_text'),
        rapid_rules=pulumi.get(__ret__, 'rapid_rules'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        security_policy_id=pulumi.get(__ret__, 'security_policy_id'))
def get_appsec_rapid_rules_output(config_id: Optional[pulumi.Input[int]] = None,
                                  rule_id: Optional[pulumi.Input[Optional[int]]] = None,
                                  security_policy_id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppsecRapidRulesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['configId'] = config_id
    __args__['ruleId'] = rule_id
    __args__['securityPolicyId'] = security_policy_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getAppsecRapidRules:getAppsecRapidRules', __args__, opts=opts, typ=GetAppsecRapidRulesResult)
    return __ret__.apply(lambda __response__: GetAppsecRapidRulesResult(
        config_id=pulumi.get(__response__, 'config_id'),
        default_action=pulumi.get(__response__, 'default_action'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        output_text=pulumi.get(__response__, 'output_text'),
        rapid_rules=pulumi.get(__response__, 'rapid_rules'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        security_policy_id=pulumi.get(__response__, 'security_policy_id')))
