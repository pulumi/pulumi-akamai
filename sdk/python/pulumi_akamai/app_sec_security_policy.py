# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AppSecSecurityPolicyArgs', 'AppSecSecurityPolicy']

@pulumi.input_type
class AppSecSecurityPolicyArgs:
    def __init__(__self__, *,
                 config_id: pulumi.Input[int],
                 security_policy_name: pulumi.Input[str],
                 security_policy_prefix: pulumi.Input[str],
                 create_from_security_policy_id: Optional[pulumi.Input[str]] = None,
                 default_settings: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a AppSecSecurityPolicy resource.
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        :param pulumi.Input[str] security_policy_name: Name of the new security policy
        :param pulumi.Input[str] security_policy_prefix: Four-character alphanumeric string prefix used in creating the security policy ID
        :param pulumi.Input[str] create_from_security_policy_id: Unique identifier of the existing security policy being cloned
        :param pulumi.Input[bool] default_settings: Whether to assign default settings to the new security policy
        """
        pulumi.set(__self__, "config_id", config_id)
        pulumi.set(__self__, "security_policy_name", security_policy_name)
        pulumi.set(__self__, "security_policy_prefix", security_policy_prefix)
        if create_from_security_policy_id is not None:
            pulumi.set(__self__, "create_from_security_policy_id", create_from_security_policy_id)
        if default_settings is not None:
            pulumi.set(__self__, "default_settings", default_settings)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Input[int]:
        """
        Unique identifier of the security configuration
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="securityPolicyName")
    def security_policy_name(self) -> pulumi.Input[str]:
        """
        Name of the new security policy
        """
        return pulumi.get(self, "security_policy_name")

    @security_policy_name.setter
    def security_policy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "security_policy_name", value)

    @property
    @pulumi.getter(name="securityPolicyPrefix")
    def security_policy_prefix(self) -> pulumi.Input[str]:
        """
        Four-character alphanumeric string prefix used in creating the security policy ID
        """
        return pulumi.get(self, "security_policy_prefix")

    @security_policy_prefix.setter
    def security_policy_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "security_policy_prefix", value)

    @property
    @pulumi.getter(name="createFromSecurityPolicyId")
    def create_from_security_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier of the existing security policy being cloned
        """
        return pulumi.get(self, "create_from_security_policy_id")

    @create_from_security_policy_id.setter
    def create_from_security_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_from_security_policy_id", value)

    @property
    @pulumi.getter(name="defaultSettings")
    def default_settings(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to assign default settings to the new security policy
        """
        return pulumi.get(self, "default_settings")

    @default_settings.setter
    def default_settings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_settings", value)


@pulumi.input_type
class _AppSecSecurityPolicyState:
    def __init__(__self__, *,
                 config_id: Optional[pulumi.Input[int]] = None,
                 create_from_security_policy_id: Optional[pulumi.Input[str]] = None,
                 default_settings: Optional[pulumi.Input[bool]] = None,
                 security_policy_id: Optional[pulumi.Input[str]] = None,
                 security_policy_name: Optional[pulumi.Input[str]] = None,
                 security_policy_prefix: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AppSecSecurityPolicy resources.
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        :param pulumi.Input[str] create_from_security_policy_id: Unique identifier of the existing security policy being cloned
        :param pulumi.Input[bool] default_settings: Whether to assign default settings to the new security policy
        :param pulumi.Input[str] security_policy_id: Unique identifier of the new security policy
        :param pulumi.Input[str] security_policy_name: Name of the new security policy
        :param pulumi.Input[str] security_policy_prefix: Four-character alphanumeric string prefix used in creating the security policy ID
        """
        if config_id is not None:
            pulumi.set(__self__, "config_id", config_id)
        if create_from_security_policy_id is not None:
            pulumi.set(__self__, "create_from_security_policy_id", create_from_security_policy_id)
        if default_settings is not None:
            pulumi.set(__self__, "default_settings", default_settings)
        if security_policy_id is not None:
            pulumi.set(__self__, "security_policy_id", security_policy_id)
        if security_policy_name is not None:
            pulumi.set(__self__, "security_policy_name", security_policy_name)
        if security_policy_prefix is not None:
            pulumi.set(__self__, "security_policy_prefix", security_policy_prefix)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[pulumi.Input[int]]:
        """
        Unique identifier of the security configuration
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="createFromSecurityPolicyId")
    def create_from_security_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier of the existing security policy being cloned
        """
        return pulumi.get(self, "create_from_security_policy_id")

    @create_from_security_policy_id.setter
    def create_from_security_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_from_security_policy_id", value)

    @property
    @pulumi.getter(name="defaultSettings")
    def default_settings(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to assign default settings to the new security policy
        """
        return pulumi.get(self, "default_settings")

    @default_settings.setter
    def default_settings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_settings", value)

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier of the new security policy
        """
        return pulumi.get(self, "security_policy_id")

    @security_policy_id.setter
    def security_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_policy_id", value)

    @property
    @pulumi.getter(name="securityPolicyName")
    def security_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the new security policy
        """
        return pulumi.get(self, "security_policy_name")

    @security_policy_name.setter
    def security_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_policy_name", value)

    @property
    @pulumi.getter(name="securityPolicyPrefix")
    def security_policy_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Four-character alphanumeric string prefix used in creating the security policy ID
        """
        return pulumi.get(self, "security_policy_prefix")

    @security_policy_prefix.setter
    def security_policy_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_policy_prefix", value)


class AppSecSecurityPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 create_from_security_policy_id: Optional[pulumi.Input[str]] = None,
                 default_settings: Optional[pulumi.Input[bool]] = None,
                 security_policy_name: Optional[pulumi.Input[str]] = None,
                 security_policy_prefix: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a AppSecSecurityPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        :param pulumi.Input[str] create_from_security_policy_id: Unique identifier of the existing security policy being cloned
        :param pulumi.Input[bool] default_settings: Whether to assign default settings to the new security policy
        :param pulumi.Input[str] security_policy_name: Name of the new security policy
        :param pulumi.Input[str] security_policy_prefix: Four-character alphanumeric string prefix used in creating the security policy ID
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppSecSecurityPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppSecSecurityPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppSecSecurityPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppSecSecurityPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 create_from_security_policy_id: Optional[pulumi.Input[str]] = None,
                 default_settings: Optional[pulumi.Input[bool]] = None,
                 security_policy_name: Optional[pulumi.Input[str]] = None,
                 security_policy_prefix: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppSecSecurityPolicyArgs.__new__(AppSecSecurityPolicyArgs)

            if config_id is None and not opts.urn:
                raise TypeError("Missing required property 'config_id'")
            __props__.__dict__["config_id"] = config_id
            __props__.__dict__["create_from_security_policy_id"] = create_from_security_policy_id
            __props__.__dict__["default_settings"] = default_settings
            if security_policy_name is None and not opts.urn:
                raise TypeError("Missing required property 'security_policy_name'")
            __props__.__dict__["security_policy_name"] = security_policy_name
            if security_policy_prefix is None and not opts.urn:
                raise TypeError("Missing required property 'security_policy_prefix'")
            __props__.__dict__["security_policy_prefix"] = security_policy_prefix
            __props__.__dict__["security_policy_id"] = None
        super(AppSecSecurityPolicy, __self__).__init__(
            'akamai:index/appSecSecurityPolicy:AppSecSecurityPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config_id: Optional[pulumi.Input[int]] = None,
            create_from_security_policy_id: Optional[pulumi.Input[str]] = None,
            default_settings: Optional[pulumi.Input[bool]] = None,
            security_policy_id: Optional[pulumi.Input[str]] = None,
            security_policy_name: Optional[pulumi.Input[str]] = None,
            security_policy_prefix: Optional[pulumi.Input[str]] = None) -> 'AppSecSecurityPolicy':
        """
        Get an existing AppSecSecurityPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        :param pulumi.Input[str] create_from_security_policy_id: Unique identifier of the existing security policy being cloned
        :param pulumi.Input[bool] default_settings: Whether to assign default settings to the new security policy
        :param pulumi.Input[str] security_policy_id: Unique identifier of the new security policy
        :param pulumi.Input[str] security_policy_name: Name of the new security policy
        :param pulumi.Input[str] security_policy_prefix: Four-character alphanumeric string prefix used in creating the security policy ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppSecSecurityPolicyState.__new__(_AppSecSecurityPolicyState)

        __props__.__dict__["config_id"] = config_id
        __props__.__dict__["create_from_security_policy_id"] = create_from_security_policy_id
        __props__.__dict__["default_settings"] = default_settings
        __props__.__dict__["security_policy_id"] = security_policy_id
        __props__.__dict__["security_policy_name"] = security_policy_name
        __props__.__dict__["security_policy_prefix"] = security_policy_prefix
        return AppSecSecurityPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Output[int]:
        """
        Unique identifier of the security configuration
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="createFromSecurityPolicyId")
    def create_from_security_policy_id(self) -> pulumi.Output[Optional[str]]:
        """
        Unique identifier of the existing security policy being cloned
        """
        return pulumi.get(self, "create_from_security_policy_id")

    @property
    @pulumi.getter(name="defaultSettings")
    def default_settings(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to assign default settings to the new security policy
        """
        return pulumi.get(self, "default_settings")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> pulumi.Output[str]:
        """
        Unique identifier of the new security policy
        """
        return pulumi.get(self, "security_policy_id")

    @property
    @pulumi.getter(name="securityPolicyName")
    def security_policy_name(self) -> pulumi.Output[str]:
        """
        Name of the new security policy
        """
        return pulumi.get(self, "security_policy_name")

    @property
    @pulumi.getter(name="securityPolicyPrefix")
    def security_policy_prefix(self) -> pulumi.Output[str]:
        """
        Four-character alphanumeric string prefix used in creating the security policy ID
        """
        return pulumi.get(self, "security_policy_prefix")

