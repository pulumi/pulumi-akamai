# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetImagingPolicyVideoResult',
    'AwaitableGetImagingPolicyVideoResult',
    'get_imaging_policy_video',
    'get_imaging_policy_video_output',
]

@pulumi.output_type
class GetImagingPolicyVideoResult:
    """
    A collection of values returned by getImagingPolicyVideo.
    """
    def __init__(__self__, id=None, json=None, policy=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if json and not isinstance(json, str):
            raise TypeError("Expected argument 'json' to be a str")
        pulumi.set(__self__, "json", json)
        if policy and not isinstance(policy, dict):
            raise TypeError("Expected argument 'policy' to be a dict")
        pulumi.set(__self__, "policy", policy)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def json(self) -> str:
        return pulumi.get(self, "json")

    @property
    @pulumi.getter
    def policy(self) -> 'outputs.GetImagingPolicyVideoPolicyResult':
        return pulumi.get(self, "policy")


class AwaitableGetImagingPolicyVideoResult(GetImagingPolicyVideoResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImagingPolicyVideoResult(
            id=self.id,
            json=self.json,
            policy=self.policy)


def get_imaging_policy_video(policy: Optional[pulumi.InputType['GetImagingPolicyVideoPolicyArgs']] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImagingPolicyVideoResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['policy'] = policy
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getImagingPolicyVideo:getImagingPolicyVideo', __args__, opts=opts, typ=GetImagingPolicyVideoResult).value

    return AwaitableGetImagingPolicyVideoResult(
        id=pulumi.get(__ret__, 'id'),
        json=pulumi.get(__ret__, 'json'),
        policy=pulumi.get(__ret__, 'policy'))


@_utilities.lift_output_func(get_imaging_policy_video)
def get_imaging_policy_video_output(policy: Optional[pulumi.Input[pulumi.InputType['GetImagingPolicyVideoPolicyArgs']]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetImagingPolicyVideoResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
