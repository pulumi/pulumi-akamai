# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamAccountSwitchKeysResult',
    'AwaitableGetIamAccountSwitchKeysResult',
    'get_iam_account_switch_keys',
    'get_iam_account_switch_keys_output',
]

@pulumi.output_type
class GetIamAccountSwitchKeysResult:
    """
    A collection of values returned by getIamAccountSwitchKeys.
    """
    def __init__(__self__, account_switch_keys=None, client_id=None, filter=None, id=None):
        if account_switch_keys and not isinstance(account_switch_keys, list):
            raise TypeError("Expected argument 'account_switch_keys' to be a list")
        pulumi.set(__self__, "account_switch_keys", account_switch_keys)
        if client_id and not isinstance(client_id, str):
            raise TypeError("Expected argument 'client_id' to be a str")
        pulumi.set(__self__, "client_id", client_id)
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="accountSwitchKeys")
    def account_switch_keys(self) -> Sequence['outputs.GetIamAccountSwitchKeysAccountSwitchKeyResult']:
        return pulumi.get(self, "account_switch_keys")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetIamAccountSwitchKeysResult(GetIamAccountSwitchKeysResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamAccountSwitchKeysResult(
            account_switch_keys=self.account_switch_keys,
            client_id=self.client_id,
            filter=self.filter,
            id=self.id)


def get_iam_account_switch_keys(client_id: Optional[str] = None,
                                filter: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamAccountSwitchKeysResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clientId'] = client_id
    __args__['filter'] = filter
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getIamAccountSwitchKeys:getIamAccountSwitchKeys', __args__, opts=opts, typ=GetIamAccountSwitchKeysResult).value

    return AwaitableGetIamAccountSwitchKeysResult(
        account_switch_keys=pulumi.get(__ret__, 'account_switch_keys'),
        client_id=pulumi.get(__ret__, 'client_id'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'))
def get_iam_account_switch_keys_output(client_id: Optional[pulumi.Input[Optional[str]]] = None,
                                       filter: Optional[pulumi.Input[Optional[str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamAccountSwitchKeysResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clientId'] = client_id
    __args__['filter'] = filter
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getIamAccountSwitchKeys:getIamAccountSwitchKeys', __args__, opts=opts, typ=GetIamAccountSwitchKeysResult)
    return __ret__.apply(lambda __response__: GetIamAccountSwitchKeysResult(
        account_switch_keys=pulumi.get(__response__, 'account_switch_keys'),
        client_id=pulumi.get(__response__, 'client_id'),
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id')))
