# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAppSecEvalPenaltyBoxResult',
    'AwaitableGetAppSecEvalPenaltyBoxResult',
    'get_app_sec_eval_penalty_box',
    'get_app_sec_eval_penalty_box_output',
]

@pulumi.output_type
class GetAppSecEvalPenaltyBoxResult:
    """
    A collection of values returned by getAppSecEvalPenaltyBox.
    """
    def __init__(__self__, action=None, config_id=None, enabled=None, id=None, output_text=None, security_policy_id=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if config_id and not isinstance(config_id, int):
            raise TypeError("Expected argument 'config_id' to be a int")
        pulumi.set(__self__, "config_id", config_id)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if output_text and not isinstance(output_text, str):
            raise TypeError("Expected argument 'output_text' to be a str")
        pulumi.set(__self__, "output_text", output_text)
        if security_policy_id and not isinstance(security_policy_id, str):
            raise TypeError("Expected argument 'security_policy_id' to be a str")
        pulumi.set(__self__, "security_policy_id", security_policy_id)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> int:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="outputText")
    def output_text(self) -> str:
        return pulumi.get(self, "output_text")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> str:
        return pulumi.get(self, "security_policy_id")


class AwaitableGetAppSecEvalPenaltyBoxResult(GetAppSecEvalPenaltyBoxResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppSecEvalPenaltyBoxResult(
            action=self.action,
            config_id=self.config_id,
            enabled=self.enabled,
            id=self.id,
            output_text=self.output_text,
            security_policy_id=self.security_policy_id)


def get_app_sec_eval_penalty_box(config_id: Optional[int] = None,
                                 security_policy_id: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppSecEvalPenaltyBoxResult:
    """
    **Scopes**: Security policy

     __ASE_Beta__.:
    Returns the penalty box settings for a security policy in evaluation mode - evaluation penalty box.
    When the penalty box is enabled for a policy in evaluation mode, clients that trigger a WAF Deny action are placed in the “penalty box”.
    There, the action you select for the penalty box (either Alert or Deny) continues to apply to any requests from that client for the next 10 minutes.

    **Related API Endpoint**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/security-policies/{policyId}/eval_penalty-box](https://techdocs.akamai.com/application-security/reference/get-policy-eval_penalty-box)

    ## Example Usage

    Basic usage:

    ```python
    import pulumi
    import pulumi_akamai as akamai

    configuration = akamai.get_app_sec_configuration(name="Documentation")
    eval_penalty_box = akamai.get_app_sec_eval_penalty_box(config_id=configuration.config_id,
        security_policy_id="gms1_134637")
    pulumi.export("evalPenaltyBoxAction", eval_penalty_box.action)
    pulumi.export("evalPenaltyBoxEnabled", eval_penalty_box.enabled)
    pulumi.export("evalPenaltyBoxText", eval_penalty_box.output_text)
    ```
    ## Output Options

    The following options can be used to determine the information returned, and how that returned information is formatted:

    - `action`. Action taken any time the penalty box is triggered. Valid values are:
      - **alert**. Record the event.
      - **deny**. The request is blocked.
      - **deny_custom_{custom_deny_id}**. The action defined by the custom deny is taken.
      - **none**. Take no action.
    - `enabled`. If **true**, evaluation penalty box protection is enabled. If **false**, evaluation penalty box protection is disabled.
    - `output_text`. Tabular report of evaluation penalty box protection settings.


    :param int config_id: . Unique identifier of the security configuration associated with the evaluation penalty box settings.
    :param str security_policy_id: . Unique identifier of the security policy associated with the evaluation penalty box settings.
    """
    __args__ = dict()
    __args__['configId'] = config_id
    __args__['securityPolicyId'] = security_policy_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getAppSecEvalPenaltyBox:getAppSecEvalPenaltyBox', __args__, opts=opts, typ=GetAppSecEvalPenaltyBoxResult).value

    return AwaitableGetAppSecEvalPenaltyBoxResult(
        action=__ret__.action,
        config_id=__ret__.config_id,
        enabled=__ret__.enabled,
        id=__ret__.id,
        output_text=__ret__.output_text,
        security_policy_id=__ret__.security_policy_id)


@_utilities.lift_output_func(get_app_sec_eval_penalty_box)
def get_app_sec_eval_penalty_box_output(config_id: Optional[pulumi.Input[int]] = None,
                                        security_policy_id: Optional[pulumi.Input[str]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAppSecEvalPenaltyBoxResult]:
    """
    **Scopes**: Security policy

     __ASE_Beta__.:
    Returns the penalty box settings for a security policy in evaluation mode - evaluation penalty box.
    When the penalty box is enabled for a policy in evaluation mode, clients that trigger a WAF Deny action are placed in the “penalty box”.
    There, the action you select for the penalty box (either Alert or Deny) continues to apply to any requests from that client for the next 10 minutes.

    **Related API Endpoint**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/security-policies/{policyId}/eval_penalty-box](https://techdocs.akamai.com/application-security/reference/get-policy-eval_penalty-box)

    ## Example Usage

    Basic usage:

    ```python
    import pulumi
    import pulumi_akamai as akamai

    configuration = akamai.get_app_sec_configuration(name="Documentation")
    eval_penalty_box = akamai.get_app_sec_eval_penalty_box(config_id=configuration.config_id,
        security_policy_id="gms1_134637")
    pulumi.export("evalPenaltyBoxAction", eval_penalty_box.action)
    pulumi.export("evalPenaltyBoxEnabled", eval_penalty_box.enabled)
    pulumi.export("evalPenaltyBoxText", eval_penalty_box.output_text)
    ```
    ## Output Options

    The following options can be used to determine the information returned, and how that returned information is formatted:

    - `action`. Action taken any time the penalty box is triggered. Valid values are:
      - **alert**. Record the event.
      - **deny**. The request is blocked.
      - **deny_custom_{custom_deny_id}**. The action defined by the custom deny is taken.
      - **none**. Take no action.
    - `enabled`. If **true**, evaluation penalty box protection is enabled. If **false**, evaluation penalty box protection is disabled.
    - `output_text`. Tabular report of evaluation penalty box protection settings.


    :param int config_id: . Unique identifier of the security configuration associated with the evaluation penalty box settings.
    :param str security_policy_id: . Unique identifier of the security policy associated with the evaluation penalty box settings.
    """
    ...
