# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetMtlskeystoreClientCertificateResult',
    'AwaitableGetMtlskeystoreClientCertificateResult',
    'get_mtlskeystore_client_certificate',
    'get_mtlskeystore_client_certificate_output',
]

@pulumi.output_type
class GetMtlskeystoreClientCertificateResult:
    """
    A collection of values returned by getMtlskeystoreClientCertificate.
    """
    def __init__(__self__, certificate_id=None, certificate_name=None, created_by=None, created_date=None, current=None, geography=None, id=None, include_associated_properties=None, key_algorithm=None, notification_emails=None, previous=None, secure_network=None, signer=None, subject=None, versions=None):
        if certificate_id and not isinstance(certificate_id, int):
            raise TypeError("Expected argument 'certificate_id' to be a int")
        pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_name and not isinstance(certificate_name, str):
            raise TypeError("Expected argument 'certificate_name' to be a str")
        pulumi.set(__self__, "certificate_name", certificate_name)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        pulumi.set(__self__, "created_date", created_date)
        if current and not isinstance(current, dict):
            raise TypeError("Expected argument 'current' to be a dict")
        pulumi.set(__self__, "current", current)
        if geography and not isinstance(geography, str):
            raise TypeError("Expected argument 'geography' to be a str")
        pulumi.set(__self__, "geography", geography)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_associated_properties and not isinstance(include_associated_properties, bool):
            raise TypeError("Expected argument 'include_associated_properties' to be a bool")
        pulumi.set(__self__, "include_associated_properties", include_associated_properties)
        if key_algorithm and not isinstance(key_algorithm, str):
            raise TypeError("Expected argument 'key_algorithm' to be a str")
        pulumi.set(__self__, "key_algorithm", key_algorithm)
        if notification_emails and not isinstance(notification_emails, list):
            raise TypeError("Expected argument 'notification_emails' to be a list")
        pulumi.set(__self__, "notification_emails", notification_emails)
        if previous and not isinstance(previous, dict):
            raise TypeError("Expected argument 'previous' to be a dict")
        pulumi.set(__self__, "previous", previous)
        if secure_network and not isinstance(secure_network, str):
            raise TypeError("Expected argument 'secure_network' to be a str")
        pulumi.set(__self__, "secure_network", secure_network)
        if signer and not isinstance(signer, str):
            raise TypeError("Expected argument 'signer' to be a str")
        pulumi.set(__self__, "signer", signer)
        if subject and not isinstance(subject, str):
            raise TypeError("Expected argument 'subject' to be a str")
        pulumi.set(__self__, "subject", subject)
        if versions and not isinstance(versions, list):
            raise TypeError("Expected argument 'versions' to be a list")
        pulumi.set(__self__, "versions", versions)

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> _builtins.int:
        return pulumi.get(self, "certificate_id")

    @_builtins.property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> _builtins.str:
        return pulumi.get(self, "certificate_name")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> _builtins.str:
        return pulumi.get(self, "created_date")

    @_builtins.property
    @pulumi.getter
    def current(self) -> 'outputs.GetMtlskeystoreClientCertificateCurrentResult':
        return pulumi.get(self, "current")

    @_builtins.property
    @pulumi.getter
    def geography(self) -> _builtins.str:
        return pulumi.get(self, "geography")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="includeAssociatedProperties")
    def include_associated_properties(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_associated_properties")

    @_builtins.property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> _builtins.str:
        return pulumi.get(self, "key_algorithm")

    @_builtins.property
    @pulumi.getter(name="notificationEmails")
    def notification_emails(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "notification_emails")

    @_builtins.property
    @pulumi.getter
    def previous(self) -> 'outputs.GetMtlskeystoreClientCertificatePreviousResult':
        return pulumi.get(self, "previous")

    @_builtins.property
    @pulumi.getter(name="secureNetwork")
    def secure_network(self) -> _builtins.str:
        return pulumi.get(self, "secure_network")

    @_builtins.property
    @pulumi.getter
    def signer(self) -> _builtins.str:
        return pulumi.get(self, "signer")

    @_builtins.property
    @pulumi.getter
    def subject(self) -> _builtins.str:
        return pulumi.get(self, "subject")

    @_builtins.property
    @pulumi.getter
    def versions(self) -> Sequence['outputs.GetMtlskeystoreClientCertificateVersionResult']:
        return pulumi.get(self, "versions")


class AwaitableGetMtlskeystoreClientCertificateResult(GetMtlskeystoreClientCertificateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMtlskeystoreClientCertificateResult(
            certificate_id=self.certificate_id,
            certificate_name=self.certificate_name,
            created_by=self.created_by,
            created_date=self.created_date,
            current=self.current,
            geography=self.geography,
            id=self.id,
            include_associated_properties=self.include_associated_properties,
            key_algorithm=self.key_algorithm,
            notification_emails=self.notification_emails,
            previous=self.previous,
            secure_network=self.secure_network,
            signer=self.signer,
            subject=self.subject,
            versions=self.versions)


def get_mtlskeystore_client_certificate(certificate_id: Optional[_builtins.int] = None,
                                        include_associated_properties: Optional[_builtins.bool] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMtlskeystoreClientCertificateResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['certificateId'] = certificate_id
    __args__['includeAssociatedProperties'] = include_associated_properties
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getMtlskeystoreClientCertificate:getMtlskeystoreClientCertificate', __args__, opts=opts, typ=GetMtlskeystoreClientCertificateResult).value

    return AwaitableGetMtlskeystoreClientCertificateResult(
        certificate_id=pulumi.get(__ret__, 'certificate_id'),
        certificate_name=pulumi.get(__ret__, 'certificate_name'),
        created_by=pulumi.get(__ret__, 'created_by'),
        created_date=pulumi.get(__ret__, 'created_date'),
        current=pulumi.get(__ret__, 'current'),
        geography=pulumi.get(__ret__, 'geography'),
        id=pulumi.get(__ret__, 'id'),
        include_associated_properties=pulumi.get(__ret__, 'include_associated_properties'),
        key_algorithm=pulumi.get(__ret__, 'key_algorithm'),
        notification_emails=pulumi.get(__ret__, 'notification_emails'),
        previous=pulumi.get(__ret__, 'previous'),
        secure_network=pulumi.get(__ret__, 'secure_network'),
        signer=pulumi.get(__ret__, 'signer'),
        subject=pulumi.get(__ret__, 'subject'),
        versions=pulumi.get(__ret__, 'versions'))
def get_mtlskeystore_client_certificate_output(certificate_id: Optional[pulumi.Input[_builtins.int]] = None,
                                               include_associated_properties: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMtlskeystoreClientCertificateResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['certificateId'] = certificate_id
    __args__['includeAssociatedProperties'] = include_associated_properties
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getMtlskeystoreClientCertificate:getMtlskeystoreClientCertificate', __args__, opts=opts, typ=GetMtlskeystoreClientCertificateResult)
    return __ret__.apply(lambda __response__: GetMtlskeystoreClientCertificateResult(
        certificate_id=pulumi.get(__response__, 'certificate_id'),
        certificate_name=pulumi.get(__response__, 'certificate_name'),
        created_by=pulumi.get(__response__, 'created_by'),
        created_date=pulumi.get(__response__, 'created_date'),
        current=pulumi.get(__response__, 'current'),
        geography=pulumi.get(__response__, 'geography'),
        id=pulumi.get(__response__, 'id'),
        include_associated_properties=pulumi.get(__response__, 'include_associated_properties'),
        key_algorithm=pulumi.get(__response__, 'key_algorithm'),
        notification_emails=pulumi.get(__response__, 'notification_emails'),
        previous=pulumi.get(__response__, 'previous'),
        secure_network=pulumi.get(__response__, 'secure_network'),
        signer=pulumi.get(__response__, 'signer'),
        subject=pulumi.get(__response__, 'subject'),
        versions=pulumi.get(__response__, 'versions')))
