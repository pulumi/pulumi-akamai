# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetCloudletsPolicyActivationResult',
    'AwaitableGetCloudletsPolicyActivationResult',
    'get_cloudlets_policy_activation',
    'get_cloudlets_policy_activation_output',
]

@pulumi.output_type
class GetCloudletsPolicyActivationResult:
    """
    A collection of values returned by getCloudletsPolicyActivation.
    """
    def __init__(__self__, associated_properties=None, id=None, network=None, policy_id=None, status=None, version=None):
        if associated_properties and not isinstance(associated_properties, list):
            raise TypeError("Expected argument 'associated_properties' to be a list")
        pulumi.set(__self__, "associated_properties", associated_properties)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if network and not isinstance(network, str):
            raise TypeError("Expected argument 'network' to be a str")
        pulumi.set(__self__, "network", network)
        if policy_id and not isinstance(policy_id, int):
            raise TypeError("Expected argument 'policy_id' to be a int")
        pulumi.set(__self__, "policy_id", policy_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="associatedProperties")
    def associated_properties(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "associated_properties")

    @property
    @pulumi.getter
    def id(self) -> str:
        warnings.warn("""Required by the terraform plugin testing framework.""", DeprecationWarning)
        pulumi.log.warn("""id is deprecated: Required by the terraform plugin testing framework.""")

        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> int:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


class AwaitableGetCloudletsPolicyActivationResult(GetCloudletsPolicyActivationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudletsPolicyActivationResult(
            associated_properties=self.associated_properties,
            id=self.id,
            network=self.network,
            policy_id=self.policy_id,
            status=self.status,
            version=self.version)


def get_cloudlets_policy_activation(associated_properties: Optional[Sequence[str]] = None,
                                    network: Optional[str] = None,
                                    policy_id: Optional[int] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudletsPolicyActivationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['associatedProperties'] = associated_properties
    __args__['network'] = network
    __args__['policyId'] = policy_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getCloudletsPolicyActivation:getCloudletsPolicyActivation', __args__, opts=opts, typ=GetCloudletsPolicyActivationResult).value

    return AwaitableGetCloudletsPolicyActivationResult(
        associated_properties=pulumi.get(__ret__, 'associated_properties'),
        id=pulumi.get(__ret__, 'id'),
        network=pulumi.get(__ret__, 'network'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        status=pulumi.get(__ret__, 'status'),
        version=pulumi.get(__ret__, 'version'))


@_utilities.lift_output_func(get_cloudlets_policy_activation)
def get_cloudlets_policy_activation_output(associated_properties: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                           network: Optional[pulumi.Input[str]] = None,
                                           policy_id: Optional[pulumi.Input[int]] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudletsPolicyActivationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
