# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CpsDvEnrollmentArgs', 'CpsDvEnrollment']

@pulumi.input_type
class CpsDvEnrollmentArgs:
    def __init__(__self__, *,
                 admin_contact: pulumi.Input['CpsDvEnrollmentAdminContactArgs'],
                 common_name: pulumi.Input[str],
                 contract_id: pulumi.Input[str],
                 csr: pulumi.Input['CpsDvEnrollmentCsrArgs'],
                 network_configuration: pulumi.Input['CpsDvEnrollmentNetworkConfigurationArgs'],
                 organization: pulumi.Input['CpsDvEnrollmentOrganizationArgs'],
                 secure_network: pulumi.Input[str],
                 signature_algorithm: pulumi.Input[str],
                 sni_only: pulumi.Input[bool],
                 tech_contact: pulumi.Input['CpsDvEnrollmentTechContactArgs'],
                 acknowledge_pre_verification_warnings: Optional[pulumi.Input[bool]] = None,
                 allow_duplicate_common_name: Optional[pulumi.Input[bool]] = None,
                 certificate_chain_type: Optional[pulumi.Input[str]] = None,
                 sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a CpsDvEnrollment resource.
        :param pulumi.Input['CpsDvEnrollmentAdminContactArgs'] admin_contact: Contact information for the certificate administrator to use at organization
        :param pulumi.Input[str] common_name: Common name used for enrollment
        :param pulumi.Input[str] contract_id: Contract ID for which enrollment is retrieved
        :param pulumi.Input['CpsDvEnrollmentCsrArgs'] csr: Certificate signing request generated during enrollment creation
        :param pulumi.Input['CpsDvEnrollmentNetworkConfigurationArgs'] network_configuration: Settings containing network information and TLS Metadata used by CPS
        :param pulumi.Input['CpsDvEnrollmentOrganizationArgs'] organization: Organization information
        :param pulumi.Input[str] secure_network: Type of TLS deployment network
        :param pulumi.Input[str] signature_algorithm: SHA algorithm type
        :param pulumi.Input[bool] sni_only: Whether Server Name Indication is used for enrollment
        :param pulumi.Input['CpsDvEnrollmentTechContactArgs'] tech_contact: Contact information for an administrator at Akamai
        :param pulumi.Input[bool] acknowledge_pre_verification_warnings: Whether acknowledge warnings before certificate verification
        :param pulumi.Input[bool] allow_duplicate_common_name: Allow to duplicate common name
        :param pulumi.Input[str] certificate_chain_type: Certificate trust chain type
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sans: List of SANs
        """
        CpsDvEnrollmentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            admin_contact=admin_contact,
            common_name=common_name,
            contract_id=contract_id,
            csr=csr,
            network_configuration=network_configuration,
            organization=organization,
            secure_network=secure_network,
            signature_algorithm=signature_algorithm,
            sni_only=sni_only,
            tech_contact=tech_contact,
            acknowledge_pre_verification_warnings=acknowledge_pre_verification_warnings,
            allow_duplicate_common_name=allow_duplicate_common_name,
            certificate_chain_type=certificate_chain_type,
            sans=sans,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             admin_contact: pulumi.Input['CpsDvEnrollmentAdminContactArgs'],
             common_name: pulumi.Input[str],
             contract_id: pulumi.Input[str],
             csr: pulumi.Input['CpsDvEnrollmentCsrArgs'],
             network_configuration: pulumi.Input['CpsDvEnrollmentNetworkConfigurationArgs'],
             organization: pulumi.Input['CpsDvEnrollmentOrganizationArgs'],
             secure_network: pulumi.Input[str],
             signature_algorithm: pulumi.Input[str],
             sni_only: pulumi.Input[bool],
             tech_contact: pulumi.Input['CpsDvEnrollmentTechContactArgs'],
             acknowledge_pre_verification_warnings: Optional[pulumi.Input[bool]] = None,
             allow_duplicate_common_name: Optional[pulumi.Input[bool]] = None,
             certificate_chain_type: Optional[pulumi.Input[str]] = None,
             sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'adminContact' in kwargs:
            admin_contact = kwargs['adminContact']
        if 'commonName' in kwargs:
            common_name = kwargs['commonName']
        if 'contractId' in kwargs:
            contract_id = kwargs['contractId']
        if 'networkConfiguration' in kwargs:
            network_configuration = kwargs['networkConfiguration']
        if 'secureNetwork' in kwargs:
            secure_network = kwargs['secureNetwork']
        if 'signatureAlgorithm' in kwargs:
            signature_algorithm = kwargs['signatureAlgorithm']
        if 'sniOnly' in kwargs:
            sni_only = kwargs['sniOnly']
        if 'techContact' in kwargs:
            tech_contact = kwargs['techContact']
        if 'acknowledgePreVerificationWarnings' in kwargs:
            acknowledge_pre_verification_warnings = kwargs['acknowledgePreVerificationWarnings']
        if 'allowDuplicateCommonName' in kwargs:
            allow_duplicate_common_name = kwargs['allowDuplicateCommonName']
        if 'certificateChainType' in kwargs:
            certificate_chain_type = kwargs['certificateChainType']

        _setter("admin_contact", admin_contact)
        _setter("common_name", common_name)
        _setter("contract_id", contract_id)
        _setter("csr", csr)
        _setter("network_configuration", network_configuration)
        _setter("organization", organization)
        _setter("secure_network", secure_network)
        _setter("signature_algorithm", signature_algorithm)
        _setter("sni_only", sni_only)
        _setter("tech_contact", tech_contact)
        if acknowledge_pre_verification_warnings is not None:
            _setter("acknowledge_pre_verification_warnings", acknowledge_pre_verification_warnings)
        if allow_duplicate_common_name is not None:
            _setter("allow_duplicate_common_name", allow_duplicate_common_name)
        if certificate_chain_type is not None:
            _setter("certificate_chain_type", certificate_chain_type)
        if sans is not None:
            _setter("sans", sans)

    @property
    @pulumi.getter(name="adminContact")
    def admin_contact(self) -> pulumi.Input['CpsDvEnrollmentAdminContactArgs']:
        """
        Contact information for the certificate administrator to use at organization
        """
        return pulumi.get(self, "admin_contact")

    @admin_contact.setter
    def admin_contact(self, value: pulumi.Input['CpsDvEnrollmentAdminContactArgs']):
        pulumi.set(self, "admin_contact", value)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> pulumi.Input[str]:
        """
        Common name used for enrollment
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> pulumi.Input[str]:
        """
        Contract ID for which enrollment is retrieved
        """
        return pulumi.get(self, "contract_id")

    @contract_id.setter
    def contract_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "contract_id", value)

    @property
    @pulumi.getter
    def csr(self) -> pulumi.Input['CpsDvEnrollmentCsrArgs']:
        """
        Certificate signing request generated during enrollment creation
        """
        return pulumi.get(self, "csr")

    @csr.setter
    def csr(self, value: pulumi.Input['CpsDvEnrollmentCsrArgs']):
        pulumi.set(self, "csr", value)

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> pulumi.Input['CpsDvEnrollmentNetworkConfigurationArgs']:
        """
        Settings containing network information and TLS Metadata used by CPS
        """
        return pulumi.get(self, "network_configuration")

    @network_configuration.setter
    def network_configuration(self, value: pulumi.Input['CpsDvEnrollmentNetworkConfigurationArgs']):
        pulumi.set(self, "network_configuration", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input['CpsDvEnrollmentOrganizationArgs']:
        """
        Organization information
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input['CpsDvEnrollmentOrganizationArgs']):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="secureNetwork")
    def secure_network(self) -> pulumi.Input[str]:
        """
        Type of TLS deployment network
        """
        return pulumi.get(self, "secure_network")

    @secure_network.setter
    def secure_network(self, value: pulumi.Input[str]):
        pulumi.set(self, "secure_network", value)

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> pulumi.Input[str]:
        """
        SHA algorithm type
        """
        return pulumi.get(self, "signature_algorithm")

    @signature_algorithm.setter
    def signature_algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "signature_algorithm", value)

    @property
    @pulumi.getter(name="sniOnly")
    def sni_only(self) -> pulumi.Input[bool]:
        """
        Whether Server Name Indication is used for enrollment
        """
        return pulumi.get(self, "sni_only")

    @sni_only.setter
    def sni_only(self, value: pulumi.Input[bool]):
        pulumi.set(self, "sni_only", value)

    @property
    @pulumi.getter(name="techContact")
    def tech_contact(self) -> pulumi.Input['CpsDvEnrollmentTechContactArgs']:
        """
        Contact information for an administrator at Akamai
        """
        return pulumi.get(self, "tech_contact")

    @tech_contact.setter
    def tech_contact(self, value: pulumi.Input['CpsDvEnrollmentTechContactArgs']):
        pulumi.set(self, "tech_contact", value)

    @property
    @pulumi.getter(name="acknowledgePreVerificationWarnings")
    def acknowledge_pre_verification_warnings(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether acknowledge warnings before certificate verification
        """
        return pulumi.get(self, "acknowledge_pre_verification_warnings")

    @acknowledge_pre_verification_warnings.setter
    def acknowledge_pre_verification_warnings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "acknowledge_pre_verification_warnings", value)

    @property
    @pulumi.getter(name="allowDuplicateCommonName")
    def allow_duplicate_common_name(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow to duplicate common name
        """
        return pulumi.get(self, "allow_duplicate_common_name")

    @allow_duplicate_common_name.setter
    def allow_duplicate_common_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_duplicate_common_name", value)

    @property
    @pulumi.getter(name="certificateChainType")
    def certificate_chain_type(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate trust chain type
        """
        return pulumi.get(self, "certificate_chain_type")

    @certificate_chain_type.setter
    def certificate_chain_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_chain_type", value)

    @property
    @pulumi.getter
    def sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of SANs
        """
        return pulumi.get(self, "sans")

    @sans.setter
    def sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sans", value)


@pulumi.input_type
class _CpsDvEnrollmentState:
    def __init__(__self__, *,
                 acknowledge_pre_verification_warnings: Optional[pulumi.Input[bool]] = None,
                 admin_contact: Optional[pulumi.Input['CpsDvEnrollmentAdminContactArgs']] = None,
                 allow_duplicate_common_name: Optional[pulumi.Input[bool]] = None,
                 certificate_chain_type: Optional[pulumi.Input[str]] = None,
                 certificate_type: Optional[pulumi.Input[str]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 contract_id: Optional[pulumi.Input[str]] = None,
                 csr: Optional[pulumi.Input['CpsDvEnrollmentCsrArgs']] = None,
                 dns_challenges: Optional[pulumi.Input[Sequence[pulumi.Input['CpsDvEnrollmentDnsChallengeArgs']]]] = None,
                 http_challenges: Optional[pulumi.Input[Sequence[pulumi.Input['CpsDvEnrollmentHttpChallengeArgs']]]] = None,
                 network_configuration: Optional[pulumi.Input['CpsDvEnrollmentNetworkConfigurationArgs']] = None,
                 organization: Optional[pulumi.Input['CpsDvEnrollmentOrganizationArgs']] = None,
                 registration_authority: Optional[pulumi.Input[str]] = None,
                 sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secure_network: Optional[pulumi.Input[str]] = None,
                 signature_algorithm: Optional[pulumi.Input[str]] = None,
                 sni_only: Optional[pulumi.Input[bool]] = None,
                 tech_contact: Optional[pulumi.Input['CpsDvEnrollmentTechContactArgs']] = None,
                 validation_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CpsDvEnrollment resources.
        :param pulumi.Input[bool] acknowledge_pre_verification_warnings: Whether acknowledge warnings before certificate verification
        :param pulumi.Input['CpsDvEnrollmentAdminContactArgs'] admin_contact: Contact information for the certificate administrator to use at organization
        :param pulumi.Input[bool] allow_duplicate_common_name: Allow to duplicate common name
        :param pulumi.Input[str] certificate_chain_type: Certificate trust chain type
        :param pulumi.Input[str] certificate_type: Certificate type of enrollment
        :param pulumi.Input[str] common_name: Common name used for enrollment
        :param pulumi.Input[str] contract_id: Contract ID for which enrollment is retrieved
        :param pulumi.Input['CpsDvEnrollmentCsrArgs'] csr: Certificate signing request generated during enrollment creation
        :param pulumi.Input[Sequence[pulumi.Input['CpsDvEnrollmentDnsChallengeArgs']]] dns_challenges: DNS challenge information
        :param pulumi.Input[Sequence[pulumi.Input['CpsDvEnrollmentHttpChallengeArgs']]] http_challenges: HTTP challenge information
        :param pulumi.Input['CpsDvEnrollmentNetworkConfigurationArgs'] network_configuration: Settings containing network information and TLS Metadata used by CPS
        :param pulumi.Input['CpsDvEnrollmentOrganizationArgs'] organization: Organization information
        :param pulumi.Input[str] registration_authority: The registration authority or certificate authority (CA) used to obtain a certificate
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sans: List of SANs
        :param pulumi.Input[str] secure_network: Type of TLS deployment network
        :param pulumi.Input[str] signature_algorithm: SHA algorithm type
        :param pulumi.Input[bool] sni_only: Whether Server Name Indication is used for enrollment
        :param pulumi.Input['CpsDvEnrollmentTechContactArgs'] tech_contact: Contact information for an administrator at Akamai
        :param pulumi.Input[str] validation_type: Enrolment validation type
        """
        _CpsDvEnrollmentState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acknowledge_pre_verification_warnings=acknowledge_pre_verification_warnings,
            admin_contact=admin_contact,
            allow_duplicate_common_name=allow_duplicate_common_name,
            certificate_chain_type=certificate_chain_type,
            certificate_type=certificate_type,
            common_name=common_name,
            contract_id=contract_id,
            csr=csr,
            dns_challenges=dns_challenges,
            http_challenges=http_challenges,
            network_configuration=network_configuration,
            organization=organization,
            registration_authority=registration_authority,
            sans=sans,
            secure_network=secure_network,
            signature_algorithm=signature_algorithm,
            sni_only=sni_only,
            tech_contact=tech_contact,
            validation_type=validation_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acknowledge_pre_verification_warnings: Optional[pulumi.Input[bool]] = None,
             admin_contact: Optional[pulumi.Input['CpsDvEnrollmentAdminContactArgs']] = None,
             allow_duplicate_common_name: Optional[pulumi.Input[bool]] = None,
             certificate_chain_type: Optional[pulumi.Input[str]] = None,
             certificate_type: Optional[pulumi.Input[str]] = None,
             common_name: Optional[pulumi.Input[str]] = None,
             contract_id: Optional[pulumi.Input[str]] = None,
             csr: Optional[pulumi.Input['CpsDvEnrollmentCsrArgs']] = None,
             dns_challenges: Optional[pulumi.Input[Sequence[pulumi.Input['CpsDvEnrollmentDnsChallengeArgs']]]] = None,
             http_challenges: Optional[pulumi.Input[Sequence[pulumi.Input['CpsDvEnrollmentHttpChallengeArgs']]]] = None,
             network_configuration: Optional[pulumi.Input['CpsDvEnrollmentNetworkConfigurationArgs']] = None,
             organization: Optional[pulumi.Input['CpsDvEnrollmentOrganizationArgs']] = None,
             registration_authority: Optional[pulumi.Input[str]] = None,
             sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             secure_network: Optional[pulumi.Input[str]] = None,
             signature_algorithm: Optional[pulumi.Input[str]] = None,
             sni_only: Optional[pulumi.Input[bool]] = None,
             tech_contact: Optional[pulumi.Input['CpsDvEnrollmentTechContactArgs']] = None,
             validation_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'acknowledgePreVerificationWarnings' in kwargs:
            acknowledge_pre_verification_warnings = kwargs['acknowledgePreVerificationWarnings']
        if 'adminContact' in kwargs:
            admin_contact = kwargs['adminContact']
        if 'allowDuplicateCommonName' in kwargs:
            allow_duplicate_common_name = kwargs['allowDuplicateCommonName']
        if 'certificateChainType' in kwargs:
            certificate_chain_type = kwargs['certificateChainType']
        if 'certificateType' in kwargs:
            certificate_type = kwargs['certificateType']
        if 'commonName' in kwargs:
            common_name = kwargs['commonName']
        if 'contractId' in kwargs:
            contract_id = kwargs['contractId']
        if 'dnsChallenges' in kwargs:
            dns_challenges = kwargs['dnsChallenges']
        if 'httpChallenges' in kwargs:
            http_challenges = kwargs['httpChallenges']
        if 'networkConfiguration' in kwargs:
            network_configuration = kwargs['networkConfiguration']
        if 'registrationAuthority' in kwargs:
            registration_authority = kwargs['registrationAuthority']
        if 'secureNetwork' in kwargs:
            secure_network = kwargs['secureNetwork']
        if 'signatureAlgorithm' in kwargs:
            signature_algorithm = kwargs['signatureAlgorithm']
        if 'sniOnly' in kwargs:
            sni_only = kwargs['sniOnly']
        if 'techContact' in kwargs:
            tech_contact = kwargs['techContact']
        if 'validationType' in kwargs:
            validation_type = kwargs['validationType']

        if acknowledge_pre_verification_warnings is not None:
            _setter("acknowledge_pre_verification_warnings", acknowledge_pre_verification_warnings)
        if admin_contact is not None:
            _setter("admin_contact", admin_contact)
        if allow_duplicate_common_name is not None:
            _setter("allow_duplicate_common_name", allow_duplicate_common_name)
        if certificate_chain_type is not None:
            _setter("certificate_chain_type", certificate_chain_type)
        if certificate_type is not None:
            _setter("certificate_type", certificate_type)
        if common_name is not None:
            _setter("common_name", common_name)
        if contract_id is not None:
            _setter("contract_id", contract_id)
        if csr is not None:
            _setter("csr", csr)
        if dns_challenges is not None:
            _setter("dns_challenges", dns_challenges)
        if http_challenges is not None:
            _setter("http_challenges", http_challenges)
        if network_configuration is not None:
            _setter("network_configuration", network_configuration)
        if organization is not None:
            _setter("organization", organization)
        if registration_authority is not None:
            _setter("registration_authority", registration_authority)
        if sans is not None:
            _setter("sans", sans)
        if secure_network is not None:
            _setter("secure_network", secure_network)
        if signature_algorithm is not None:
            _setter("signature_algorithm", signature_algorithm)
        if sni_only is not None:
            _setter("sni_only", sni_only)
        if tech_contact is not None:
            _setter("tech_contact", tech_contact)
        if validation_type is not None:
            _setter("validation_type", validation_type)

    @property
    @pulumi.getter(name="acknowledgePreVerificationWarnings")
    def acknowledge_pre_verification_warnings(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether acknowledge warnings before certificate verification
        """
        return pulumi.get(self, "acknowledge_pre_verification_warnings")

    @acknowledge_pre_verification_warnings.setter
    def acknowledge_pre_verification_warnings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "acknowledge_pre_verification_warnings", value)

    @property
    @pulumi.getter(name="adminContact")
    def admin_contact(self) -> Optional[pulumi.Input['CpsDvEnrollmentAdminContactArgs']]:
        """
        Contact information for the certificate administrator to use at organization
        """
        return pulumi.get(self, "admin_contact")

    @admin_contact.setter
    def admin_contact(self, value: Optional[pulumi.Input['CpsDvEnrollmentAdminContactArgs']]):
        pulumi.set(self, "admin_contact", value)

    @property
    @pulumi.getter(name="allowDuplicateCommonName")
    def allow_duplicate_common_name(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow to duplicate common name
        """
        return pulumi.get(self, "allow_duplicate_common_name")

    @allow_duplicate_common_name.setter
    def allow_duplicate_common_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_duplicate_common_name", value)

    @property
    @pulumi.getter(name="certificateChainType")
    def certificate_chain_type(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate trust chain type
        """
        return pulumi.get(self, "certificate_chain_type")

    @certificate_chain_type.setter
    def certificate_chain_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_chain_type", value)

    @property
    @pulumi.getter(name="certificateType")
    def certificate_type(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate type of enrollment
        """
        return pulumi.get(self, "certificate_type")

    @certificate_type.setter
    def certificate_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_type", value)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        """
        Common name used for enrollment
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> Optional[pulumi.Input[str]]:
        """
        Contract ID for which enrollment is retrieved
        """
        return pulumi.get(self, "contract_id")

    @contract_id.setter
    def contract_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contract_id", value)

    @property
    @pulumi.getter
    def csr(self) -> Optional[pulumi.Input['CpsDvEnrollmentCsrArgs']]:
        """
        Certificate signing request generated during enrollment creation
        """
        return pulumi.get(self, "csr")

    @csr.setter
    def csr(self, value: Optional[pulumi.Input['CpsDvEnrollmentCsrArgs']]):
        pulumi.set(self, "csr", value)

    @property
    @pulumi.getter(name="dnsChallenges")
    def dns_challenges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CpsDvEnrollmentDnsChallengeArgs']]]]:
        """
        DNS challenge information
        """
        return pulumi.get(self, "dns_challenges")

    @dns_challenges.setter
    def dns_challenges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CpsDvEnrollmentDnsChallengeArgs']]]]):
        pulumi.set(self, "dns_challenges", value)

    @property
    @pulumi.getter(name="httpChallenges")
    def http_challenges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CpsDvEnrollmentHttpChallengeArgs']]]]:
        """
        HTTP challenge information
        """
        return pulumi.get(self, "http_challenges")

    @http_challenges.setter
    def http_challenges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CpsDvEnrollmentHttpChallengeArgs']]]]):
        pulumi.set(self, "http_challenges", value)

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> Optional[pulumi.Input['CpsDvEnrollmentNetworkConfigurationArgs']]:
        """
        Settings containing network information and TLS Metadata used by CPS
        """
        return pulumi.get(self, "network_configuration")

    @network_configuration.setter
    def network_configuration(self, value: Optional[pulumi.Input['CpsDvEnrollmentNetworkConfigurationArgs']]):
        pulumi.set(self, "network_configuration", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input['CpsDvEnrollmentOrganizationArgs']]:
        """
        Organization information
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input['CpsDvEnrollmentOrganizationArgs']]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="registrationAuthority")
    def registration_authority(self) -> Optional[pulumi.Input[str]]:
        """
        The registration authority or certificate authority (CA) used to obtain a certificate
        """
        return pulumi.get(self, "registration_authority")

    @registration_authority.setter
    def registration_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registration_authority", value)

    @property
    @pulumi.getter
    def sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of SANs
        """
        return pulumi.get(self, "sans")

    @sans.setter
    def sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sans", value)

    @property
    @pulumi.getter(name="secureNetwork")
    def secure_network(self) -> Optional[pulumi.Input[str]]:
        """
        Type of TLS deployment network
        """
        return pulumi.get(self, "secure_network")

    @secure_network.setter
    def secure_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure_network", value)

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        SHA algorithm type
        """
        return pulumi.get(self, "signature_algorithm")

    @signature_algorithm.setter
    def signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature_algorithm", value)

    @property
    @pulumi.getter(name="sniOnly")
    def sni_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether Server Name Indication is used for enrollment
        """
        return pulumi.get(self, "sni_only")

    @sni_only.setter
    def sni_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sni_only", value)

    @property
    @pulumi.getter(name="techContact")
    def tech_contact(self) -> Optional[pulumi.Input['CpsDvEnrollmentTechContactArgs']]:
        """
        Contact information for an administrator at Akamai
        """
        return pulumi.get(self, "tech_contact")

    @tech_contact.setter
    def tech_contact(self, value: Optional[pulumi.Input['CpsDvEnrollmentTechContactArgs']]):
        pulumi.set(self, "tech_contact", value)

    @property
    @pulumi.getter(name="validationType")
    def validation_type(self) -> Optional[pulumi.Input[str]]:
        """
        Enrolment validation type
        """
        return pulumi.get(self, "validation_type")

    @validation_type.setter
    def validation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "validation_type", value)


class CpsDvEnrollment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acknowledge_pre_verification_warnings: Optional[pulumi.Input[bool]] = None,
                 admin_contact: Optional[pulumi.Input[pulumi.InputType['CpsDvEnrollmentAdminContactArgs']]] = None,
                 allow_duplicate_common_name: Optional[pulumi.Input[bool]] = None,
                 certificate_chain_type: Optional[pulumi.Input[str]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 contract_id: Optional[pulumi.Input[str]] = None,
                 csr: Optional[pulumi.Input[pulumi.InputType['CpsDvEnrollmentCsrArgs']]] = None,
                 network_configuration: Optional[pulumi.Input[pulumi.InputType['CpsDvEnrollmentNetworkConfigurationArgs']]] = None,
                 organization: Optional[pulumi.Input[pulumi.InputType['CpsDvEnrollmentOrganizationArgs']]] = None,
                 sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secure_network: Optional[pulumi.Input[str]] = None,
                 signature_algorithm: Optional[pulumi.Input[str]] = None,
                 sni_only: Optional[pulumi.Input[bool]] = None,
                 tech_contact: Optional[pulumi.Input[pulumi.InputType['CpsDvEnrollmentTechContactArgs']]] = None,
                 __props__=None):
        """
        Create a CpsDvEnrollment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] acknowledge_pre_verification_warnings: Whether acknowledge warnings before certificate verification
        :param pulumi.Input[pulumi.InputType['CpsDvEnrollmentAdminContactArgs']] admin_contact: Contact information for the certificate administrator to use at organization
        :param pulumi.Input[bool] allow_duplicate_common_name: Allow to duplicate common name
        :param pulumi.Input[str] certificate_chain_type: Certificate trust chain type
        :param pulumi.Input[str] common_name: Common name used for enrollment
        :param pulumi.Input[str] contract_id: Contract ID for which enrollment is retrieved
        :param pulumi.Input[pulumi.InputType['CpsDvEnrollmentCsrArgs']] csr: Certificate signing request generated during enrollment creation
        :param pulumi.Input[pulumi.InputType['CpsDvEnrollmentNetworkConfigurationArgs']] network_configuration: Settings containing network information and TLS Metadata used by CPS
        :param pulumi.Input[pulumi.InputType['CpsDvEnrollmentOrganizationArgs']] organization: Organization information
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sans: List of SANs
        :param pulumi.Input[str] secure_network: Type of TLS deployment network
        :param pulumi.Input[str] signature_algorithm: SHA algorithm type
        :param pulumi.Input[bool] sni_only: Whether Server Name Indication is used for enrollment
        :param pulumi.Input[pulumi.InputType['CpsDvEnrollmentTechContactArgs']] tech_contact: Contact information for an administrator at Akamai
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CpsDvEnrollmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CpsDvEnrollment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CpsDvEnrollmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CpsDvEnrollmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            CpsDvEnrollmentArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acknowledge_pre_verification_warnings: Optional[pulumi.Input[bool]] = None,
                 admin_contact: Optional[pulumi.Input[pulumi.InputType['CpsDvEnrollmentAdminContactArgs']]] = None,
                 allow_duplicate_common_name: Optional[pulumi.Input[bool]] = None,
                 certificate_chain_type: Optional[pulumi.Input[str]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 contract_id: Optional[pulumi.Input[str]] = None,
                 csr: Optional[pulumi.Input[pulumi.InputType['CpsDvEnrollmentCsrArgs']]] = None,
                 network_configuration: Optional[pulumi.Input[pulumi.InputType['CpsDvEnrollmentNetworkConfigurationArgs']]] = None,
                 organization: Optional[pulumi.Input[pulumi.InputType['CpsDvEnrollmentOrganizationArgs']]] = None,
                 sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secure_network: Optional[pulumi.Input[str]] = None,
                 signature_algorithm: Optional[pulumi.Input[str]] = None,
                 sni_only: Optional[pulumi.Input[bool]] = None,
                 tech_contact: Optional[pulumi.Input[pulumi.InputType['CpsDvEnrollmentTechContactArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CpsDvEnrollmentArgs.__new__(CpsDvEnrollmentArgs)

            __props__.__dict__["acknowledge_pre_verification_warnings"] = acknowledge_pre_verification_warnings
            if admin_contact is not None and not isinstance(admin_contact, CpsDvEnrollmentAdminContactArgs):
                admin_contact = admin_contact or {}
                def _setter(key, value):
                    admin_contact[key] = value
                CpsDvEnrollmentAdminContactArgs._configure(_setter, **admin_contact)
            if admin_contact is None and not opts.urn:
                raise TypeError("Missing required property 'admin_contact'")
            __props__.__dict__["admin_contact"] = admin_contact
            __props__.__dict__["allow_duplicate_common_name"] = allow_duplicate_common_name
            __props__.__dict__["certificate_chain_type"] = certificate_chain_type
            if common_name is None and not opts.urn:
                raise TypeError("Missing required property 'common_name'")
            __props__.__dict__["common_name"] = common_name
            if contract_id is None and not opts.urn:
                raise TypeError("Missing required property 'contract_id'")
            __props__.__dict__["contract_id"] = contract_id
            if csr is not None and not isinstance(csr, CpsDvEnrollmentCsrArgs):
                csr = csr or {}
                def _setter(key, value):
                    csr[key] = value
                CpsDvEnrollmentCsrArgs._configure(_setter, **csr)
            if csr is None and not opts.urn:
                raise TypeError("Missing required property 'csr'")
            __props__.__dict__["csr"] = csr
            if network_configuration is not None and not isinstance(network_configuration, CpsDvEnrollmentNetworkConfigurationArgs):
                network_configuration = network_configuration or {}
                def _setter(key, value):
                    network_configuration[key] = value
                CpsDvEnrollmentNetworkConfigurationArgs._configure(_setter, **network_configuration)
            if network_configuration is None and not opts.urn:
                raise TypeError("Missing required property 'network_configuration'")
            __props__.__dict__["network_configuration"] = network_configuration
            if organization is not None and not isinstance(organization, CpsDvEnrollmentOrganizationArgs):
                organization = organization or {}
                def _setter(key, value):
                    organization[key] = value
                CpsDvEnrollmentOrganizationArgs._configure(_setter, **organization)
            if organization is None and not opts.urn:
                raise TypeError("Missing required property 'organization'")
            __props__.__dict__["organization"] = organization
            __props__.__dict__["sans"] = sans
            if secure_network is None and not opts.urn:
                raise TypeError("Missing required property 'secure_network'")
            __props__.__dict__["secure_network"] = secure_network
            if signature_algorithm is None and not opts.urn:
                raise TypeError("Missing required property 'signature_algorithm'")
            __props__.__dict__["signature_algorithm"] = signature_algorithm
            if sni_only is None and not opts.urn:
                raise TypeError("Missing required property 'sni_only'")
            __props__.__dict__["sni_only"] = sni_only
            if tech_contact is not None and not isinstance(tech_contact, CpsDvEnrollmentTechContactArgs):
                tech_contact = tech_contact or {}
                def _setter(key, value):
                    tech_contact[key] = value
                CpsDvEnrollmentTechContactArgs._configure(_setter, **tech_contact)
            if tech_contact is None and not opts.urn:
                raise TypeError("Missing required property 'tech_contact'")
            __props__.__dict__["tech_contact"] = tech_contact
            __props__.__dict__["certificate_type"] = None
            __props__.__dict__["dns_challenges"] = None
            __props__.__dict__["http_challenges"] = None
            __props__.__dict__["registration_authority"] = None
            __props__.__dict__["validation_type"] = None
        super(CpsDvEnrollment, __self__).__init__(
            'akamai:index/cpsDvEnrollment:CpsDvEnrollment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acknowledge_pre_verification_warnings: Optional[pulumi.Input[bool]] = None,
            admin_contact: Optional[pulumi.Input[pulumi.InputType['CpsDvEnrollmentAdminContactArgs']]] = None,
            allow_duplicate_common_name: Optional[pulumi.Input[bool]] = None,
            certificate_chain_type: Optional[pulumi.Input[str]] = None,
            certificate_type: Optional[pulumi.Input[str]] = None,
            common_name: Optional[pulumi.Input[str]] = None,
            contract_id: Optional[pulumi.Input[str]] = None,
            csr: Optional[pulumi.Input[pulumi.InputType['CpsDvEnrollmentCsrArgs']]] = None,
            dns_challenges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CpsDvEnrollmentDnsChallengeArgs']]]]] = None,
            http_challenges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CpsDvEnrollmentHttpChallengeArgs']]]]] = None,
            network_configuration: Optional[pulumi.Input[pulumi.InputType['CpsDvEnrollmentNetworkConfigurationArgs']]] = None,
            organization: Optional[pulumi.Input[pulumi.InputType['CpsDvEnrollmentOrganizationArgs']]] = None,
            registration_authority: Optional[pulumi.Input[str]] = None,
            sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            secure_network: Optional[pulumi.Input[str]] = None,
            signature_algorithm: Optional[pulumi.Input[str]] = None,
            sni_only: Optional[pulumi.Input[bool]] = None,
            tech_contact: Optional[pulumi.Input[pulumi.InputType['CpsDvEnrollmentTechContactArgs']]] = None,
            validation_type: Optional[pulumi.Input[str]] = None) -> 'CpsDvEnrollment':
        """
        Get an existing CpsDvEnrollment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] acknowledge_pre_verification_warnings: Whether acknowledge warnings before certificate verification
        :param pulumi.Input[pulumi.InputType['CpsDvEnrollmentAdminContactArgs']] admin_contact: Contact information for the certificate administrator to use at organization
        :param pulumi.Input[bool] allow_duplicate_common_name: Allow to duplicate common name
        :param pulumi.Input[str] certificate_chain_type: Certificate trust chain type
        :param pulumi.Input[str] certificate_type: Certificate type of enrollment
        :param pulumi.Input[str] common_name: Common name used for enrollment
        :param pulumi.Input[str] contract_id: Contract ID for which enrollment is retrieved
        :param pulumi.Input[pulumi.InputType['CpsDvEnrollmentCsrArgs']] csr: Certificate signing request generated during enrollment creation
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CpsDvEnrollmentDnsChallengeArgs']]]] dns_challenges: DNS challenge information
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CpsDvEnrollmentHttpChallengeArgs']]]] http_challenges: HTTP challenge information
        :param pulumi.Input[pulumi.InputType['CpsDvEnrollmentNetworkConfigurationArgs']] network_configuration: Settings containing network information and TLS Metadata used by CPS
        :param pulumi.Input[pulumi.InputType['CpsDvEnrollmentOrganizationArgs']] organization: Organization information
        :param pulumi.Input[str] registration_authority: The registration authority or certificate authority (CA) used to obtain a certificate
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sans: List of SANs
        :param pulumi.Input[str] secure_network: Type of TLS deployment network
        :param pulumi.Input[str] signature_algorithm: SHA algorithm type
        :param pulumi.Input[bool] sni_only: Whether Server Name Indication is used for enrollment
        :param pulumi.Input[pulumi.InputType['CpsDvEnrollmentTechContactArgs']] tech_contact: Contact information for an administrator at Akamai
        :param pulumi.Input[str] validation_type: Enrolment validation type
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CpsDvEnrollmentState.__new__(_CpsDvEnrollmentState)

        __props__.__dict__["acknowledge_pre_verification_warnings"] = acknowledge_pre_verification_warnings
        __props__.__dict__["admin_contact"] = admin_contact
        __props__.__dict__["allow_duplicate_common_name"] = allow_duplicate_common_name
        __props__.__dict__["certificate_chain_type"] = certificate_chain_type
        __props__.__dict__["certificate_type"] = certificate_type
        __props__.__dict__["common_name"] = common_name
        __props__.__dict__["contract_id"] = contract_id
        __props__.__dict__["csr"] = csr
        __props__.__dict__["dns_challenges"] = dns_challenges
        __props__.__dict__["http_challenges"] = http_challenges
        __props__.__dict__["network_configuration"] = network_configuration
        __props__.__dict__["organization"] = organization
        __props__.__dict__["registration_authority"] = registration_authority
        __props__.__dict__["sans"] = sans
        __props__.__dict__["secure_network"] = secure_network
        __props__.__dict__["signature_algorithm"] = signature_algorithm
        __props__.__dict__["sni_only"] = sni_only
        __props__.__dict__["tech_contact"] = tech_contact
        __props__.__dict__["validation_type"] = validation_type
        return CpsDvEnrollment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acknowledgePreVerificationWarnings")
    def acknowledge_pre_verification_warnings(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether acknowledge warnings before certificate verification
        """
        return pulumi.get(self, "acknowledge_pre_verification_warnings")

    @property
    @pulumi.getter(name="adminContact")
    def admin_contact(self) -> pulumi.Output['outputs.CpsDvEnrollmentAdminContact']:
        """
        Contact information for the certificate administrator to use at organization
        """
        return pulumi.get(self, "admin_contact")

    @property
    @pulumi.getter(name="allowDuplicateCommonName")
    def allow_duplicate_common_name(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow to duplicate common name
        """
        return pulumi.get(self, "allow_duplicate_common_name")

    @property
    @pulumi.getter(name="certificateChainType")
    def certificate_chain_type(self) -> pulumi.Output[Optional[str]]:
        """
        Certificate trust chain type
        """
        return pulumi.get(self, "certificate_chain_type")

    @property
    @pulumi.getter(name="certificateType")
    def certificate_type(self) -> pulumi.Output[str]:
        """
        Certificate type of enrollment
        """
        return pulumi.get(self, "certificate_type")

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> pulumi.Output[str]:
        """
        Common name used for enrollment
        """
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> pulumi.Output[str]:
        """
        Contract ID for which enrollment is retrieved
        """
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter
    def csr(self) -> pulumi.Output['outputs.CpsDvEnrollmentCsr']:
        """
        Certificate signing request generated during enrollment creation
        """
        return pulumi.get(self, "csr")

    @property
    @pulumi.getter(name="dnsChallenges")
    def dns_challenges(self) -> pulumi.Output[Sequence['outputs.CpsDvEnrollmentDnsChallenge']]:
        """
        DNS challenge information
        """
        return pulumi.get(self, "dns_challenges")

    @property
    @pulumi.getter(name="httpChallenges")
    def http_challenges(self) -> pulumi.Output[Sequence['outputs.CpsDvEnrollmentHttpChallenge']]:
        """
        HTTP challenge information
        """
        return pulumi.get(self, "http_challenges")

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> pulumi.Output['outputs.CpsDvEnrollmentNetworkConfiguration']:
        """
        Settings containing network information and TLS Metadata used by CPS
        """
        return pulumi.get(self, "network_configuration")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output['outputs.CpsDvEnrollmentOrganization']:
        """
        Organization information
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="registrationAuthority")
    def registration_authority(self) -> pulumi.Output[str]:
        """
        The registration authority or certificate authority (CA) used to obtain a certificate
        """
        return pulumi.get(self, "registration_authority")

    @property
    @pulumi.getter
    def sans(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of SANs
        """
        return pulumi.get(self, "sans")

    @property
    @pulumi.getter(name="secureNetwork")
    def secure_network(self) -> pulumi.Output[str]:
        """
        Type of TLS deployment network
        """
        return pulumi.get(self, "secure_network")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> pulumi.Output[str]:
        """
        SHA algorithm type
        """
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter(name="sniOnly")
    def sni_only(self) -> pulumi.Output[bool]:
        """
        Whether Server Name Indication is used for enrollment
        """
        return pulumi.get(self, "sni_only")

    @property
    @pulumi.getter(name="techContact")
    def tech_contact(self) -> pulumi.Output['outputs.CpsDvEnrollmentTechContact']:
        """
        Contact information for an administrator at Akamai
        """
        return pulumi.get(self, "tech_contact")

    @property
    @pulumi.getter(name="validationType")
    def validation_type(self) -> pulumi.Output[str]:
        """
        Enrolment validation type
        """
        return pulumi.get(self, "validation_type")

