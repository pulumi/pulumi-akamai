# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetCloudletsPolicyResult',
    'AwaitableGetCloudletsPolicyResult',
    'get_cloudlets_policy',
    'get_cloudlets_policy_output',
]

@pulumi.output_type
class GetCloudletsPolicyResult:
    """
    A collection of values returned by getCloudletsPolicy.
    """
    def __init__(__self__, activations=None, api_version=None, cloudlet_code=None, cloudlet_id=None, description=None, group_id=None, id=None, match_rule_format=None, match_rules=None, name=None, policy_id=None, revision_id=None, rules_locked=None, version=None, version_description=None, warnings=None):
        if activations and not isinstance(activations, list):
            raise TypeError("Expected argument 'activations' to be a list")
        pulumi.set(__self__, "activations", activations)
        if api_version and not isinstance(api_version, str):
            raise TypeError("Expected argument 'api_version' to be a str")
        pulumi.set(__self__, "api_version", api_version)
        if cloudlet_code and not isinstance(cloudlet_code, str):
            raise TypeError("Expected argument 'cloudlet_code' to be a str")
        pulumi.set(__self__, "cloudlet_code", cloudlet_code)
        if cloudlet_id and not isinstance(cloudlet_id, int):
            raise TypeError("Expected argument 'cloudlet_id' to be a int")
        pulumi.set(__self__, "cloudlet_id", cloudlet_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if group_id and not isinstance(group_id, int):
            raise TypeError("Expected argument 'group_id' to be a int")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if match_rule_format and not isinstance(match_rule_format, str):
            raise TypeError("Expected argument 'match_rule_format' to be a str")
        pulumi.set(__self__, "match_rule_format", match_rule_format)
        if match_rules and not isinstance(match_rules, str):
            raise TypeError("Expected argument 'match_rules' to be a str")
        pulumi.set(__self__, "match_rules", match_rules)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_id and not isinstance(policy_id, int):
            raise TypeError("Expected argument 'policy_id' to be a int")
        pulumi.set(__self__, "policy_id", policy_id)
        if revision_id and not isinstance(revision_id, int):
            raise TypeError("Expected argument 'revision_id' to be a int")
        pulumi.set(__self__, "revision_id", revision_id)
        if rules_locked and not isinstance(rules_locked, bool):
            raise TypeError("Expected argument 'rules_locked' to be a bool")
        pulumi.set(__self__, "rules_locked", rules_locked)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)
        if version_description and not isinstance(version_description, str):
            raise TypeError("Expected argument 'version_description' to be a str")
        pulumi.set(__self__, "version_description", version_description)
        if warnings and not isinstance(warnings, str):
            raise TypeError("Expected argument 'warnings' to be a str")
        pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def activations(self) -> Sequence['outputs.GetCloudletsPolicyActivationResult']:
        return pulumi.get(self, "activations")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="cloudletCode")
    def cloudlet_code(self) -> str:
        return pulumi.get(self, "cloudlet_code")

    @property
    @pulumi.getter(name="cloudletId")
    def cloudlet_id(self) -> int:
        return pulumi.get(self, "cloudlet_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchRuleFormat")
    def match_rule_format(self) -> str:
        return pulumi.get(self, "match_rule_format")

    @property
    @pulumi.getter(name="matchRules")
    def match_rules(self) -> str:
        return pulumi.get(self, "match_rules")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> int:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="revisionId")
    def revision_id(self) -> int:
        return pulumi.get(self, "revision_id")

    @property
    @pulumi.getter(name="rulesLocked")
    def rules_locked(self) -> bool:
        return pulumi.get(self, "rules_locked")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionDescription")
    def version_description(self) -> str:
        return pulumi.get(self, "version_description")

    @property
    @pulumi.getter
    def warnings(self) -> str:
        return pulumi.get(self, "warnings")


class AwaitableGetCloudletsPolicyResult(GetCloudletsPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudletsPolicyResult(
            activations=self.activations,
            api_version=self.api_version,
            cloudlet_code=self.cloudlet_code,
            cloudlet_id=self.cloudlet_id,
            description=self.description,
            group_id=self.group_id,
            id=self.id,
            match_rule_format=self.match_rule_format,
            match_rules=self.match_rules,
            name=self.name,
            policy_id=self.policy_id,
            revision_id=self.revision_id,
            rules_locked=self.rules_locked,
            version=self.version,
            version_description=self.version_description,
            warnings=self.warnings)


def get_cloudlets_policy(policy_id: Optional[int] = None,
                         version: Optional[int] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudletsPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['policyId'] = policy_id
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getCloudletsPolicy:getCloudletsPolicy', __args__, opts=opts, typ=GetCloudletsPolicyResult).value

    return AwaitableGetCloudletsPolicyResult(
        activations=pulumi.get(__ret__, 'activations'),
        api_version=pulumi.get(__ret__, 'api_version'),
        cloudlet_code=pulumi.get(__ret__, 'cloudlet_code'),
        cloudlet_id=pulumi.get(__ret__, 'cloudlet_id'),
        description=pulumi.get(__ret__, 'description'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        match_rule_format=pulumi.get(__ret__, 'match_rule_format'),
        match_rules=pulumi.get(__ret__, 'match_rules'),
        name=pulumi.get(__ret__, 'name'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        revision_id=pulumi.get(__ret__, 'revision_id'),
        rules_locked=pulumi.get(__ret__, 'rules_locked'),
        version=pulumi.get(__ret__, 'version'),
        version_description=pulumi.get(__ret__, 'version_description'),
        warnings=pulumi.get(__ret__, 'warnings'))


@_utilities.lift_output_func(get_cloudlets_policy)
def get_cloudlets_policy_output(policy_id: Optional[pulumi.Input[int]] = None,
                                version: Optional[pulumi.Input[Optional[int]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudletsPolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
