# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetPropertyActivationResult',
    'AwaitableGetPropertyActivationResult',
    'get_property_activation',
    'get_property_activation_output',
]

@pulumi.output_type
class GetPropertyActivationResult:
    """
    A collection of values returned by getPropertyActivation.
    """
    def __init__(__self__, activation_id=None, contacts=None, errors=None, id=None, network=None, note=None, property_id=None, status=None, version=None, warnings=None):
        if activation_id and not isinstance(activation_id, str):
            raise TypeError("Expected argument 'activation_id' to be a str")
        pulumi.set(__self__, "activation_id", activation_id)
        if contacts and not isinstance(contacts, list):
            raise TypeError("Expected argument 'contacts' to be a list")
        pulumi.set(__self__, "contacts", contacts)
        if errors and not isinstance(errors, str):
            raise TypeError("Expected argument 'errors' to be a str")
        pulumi.set(__self__, "errors", errors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if network and not isinstance(network, str):
            raise TypeError("Expected argument 'network' to be a str")
        pulumi.set(__self__, "network", network)
        if note and not isinstance(note, str):
            raise TypeError("Expected argument 'note' to be a str")
        pulumi.set(__self__, "note", note)
        if property_id and not isinstance(property_id, str):
            raise TypeError("Expected argument 'property_id' to be a str")
        pulumi.set(__self__, "property_id", property_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)
        if warnings and not isinstance(warnings, str):
            raise TypeError("Expected argument 'warnings' to be a str")
        pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter(name="activationId")
    def activation_id(self) -> str:
        return pulumi.get(self, "activation_id")

    @property
    @pulumi.getter
    def contacts(self) -> Sequence[str]:
        return pulumi.get(self, "contacts")

    @property
    @pulumi.getter
    def errors(self) -> str:
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def note(self) -> str:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> str:
        return pulumi.get(self, "property_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def warnings(self) -> str:
        return pulumi.get(self, "warnings")


class AwaitableGetPropertyActivationResult(GetPropertyActivationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPropertyActivationResult(
            activation_id=self.activation_id,
            contacts=self.contacts,
            errors=self.errors,
            id=self.id,
            network=self.network,
            note=self.note,
            property_id=self.property_id,
            status=self.status,
            version=self.version,
            warnings=self.warnings)


def get_property_activation(network: Optional[str] = None,
                            property_id: Optional[str] = None,
                            version: Optional[int] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPropertyActivationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['network'] = network
    __args__['propertyId'] = property_id
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getPropertyActivation:getPropertyActivation', __args__, opts=opts, typ=GetPropertyActivationResult).value

    return AwaitableGetPropertyActivationResult(
        activation_id=pulumi.get(__ret__, 'activation_id'),
        contacts=pulumi.get(__ret__, 'contacts'),
        errors=pulumi.get(__ret__, 'errors'),
        id=pulumi.get(__ret__, 'id'),
        network=pulumi.get(__ret__, 'network'),
        note=pulumi.get(__ret__, 'note'),
        property_id=pulumi.get(__ret__, 'property_id'),
        status=pulumi.get(__ret__, 'status'),
        version=pulumi.get(__ret__, 'version'),
        warnings=pulumi.get(__ret__, 'warnings'))


@_utilities.lift_output_func(get_property_activation)
def get_property_activation_output(network: Optional[pulumi.Input[Optional[str]]] = None,
                                   property_id: Optional[pulumi.Input[str]] = None,
                                   version: Optional[pulumi.Input[int]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPropertyActivationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
