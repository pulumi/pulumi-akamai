# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetCPSEnrollmentResult',
    'AwaitableGetCPSEnrollmentResult',
    'get_cps_enrollment',
    'get_cps_enrollment_output',
]

@pulumi.output_type
class GetCPSEnrollmentResult:
    """
    A collection of values returned by getCPSEnrollment.
    """
    def __init__(__self__, admin_contacts=None, certificate_chain_type=None, certificate_type=None, common_name=None, contract_id=None, csrs=None, dns_challenges=None, enable_multi_stacked_certificates=None, enrollment_id=None, http_challenges=None, id=None, network_configurations=None, organizations=None, pending_changes=None, registration_authority=None, sans=None, secure_network=None, signature_algorithm=None, sni_only=None, tech_contacts=None, validation_type=None):
        if admin_contacts and not isinstance(admin_contacts, list):
            raise TypeError("Expected argument 'admin_contacts' to be a list")
        pulumi.set(__self__, "admin_contacts", admin_contacts)
        if certificate_chain_type and not isinstance(certificate_chain_type, str):
            raise TypeError("Expected argument 'certificate_chain_type' to be a str")
        pulumi.set(__self__, "certificate_chain_type", certificate_chain_type)
        if certificate_type and not isinstance(certificate_type, str):
            raise TypeError("Expected argument 'certificate_type' to be a str")
        pulumi.set(__self__, "certificate_type", certificate_type)
        if common_name and not isinstance(common_name, str):
            raise TypeError("Expected argument 'common_name' to be a str")
        pulumi.set(__self__, "common_name", common_name)
        if contract_id and not isinstance(contract_id, str):
            raise TypeError("Expected argument 'contract_id' to be a str")
        pulumi.set(__self__, "contract_id", contract_id)
        if csrs and not isinstance(csrs, list):
            raise TypeError("Expected argument 'csrs' to be a list")
        pulumi.set(__self__, "csrs", csrs)
        if dns_challenges and not isinstance(dns_challenges, list):
            raise TypeError("Expected argument 'dns_challenges' to be a list")
        pulumi.set(__self__, "dns_challenges", dns_challenges)
        if enable_multi_stacked_certificates and not isinstance(enable_multi_stacked_certificates, bool):
            raise TypeError("Expected argument 'enable_multi_stacked_certificates' to be a bool")
        pulumi.set(__self__, "enable_multi_stacked_certificates", enable_multi_stacked_certificates)
        if enrollment_id and not isinstance(enrollment_id, int):
            raise TypeError("Expected argument 'enrollment_id' to be a int")
        pulumi.set(__self__, "enrollment_id", enrollment_id)
        if http_challenges and not isinstance(http_challenges, list):
            raise TypeError("Expected argument 'http_challenges' to be a list")
        pulumi.set(__self__, "http_challenges", http_challenges)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if network_configurations and not isinstance(network_configurations, list):
            raise TypeError("Expected argument 'network_configurations' to be a list")
        pulumi.set(__self__, "network_configurations", network_configurations)
        if organizations and not isinstance(organizations, list):
            raise TypeError("Expected argument 'organizations' to be a list")
        pulumi.set(__self__, "organizations", organizations)
        if pending_changes and not isinstance(pending_changes, bool):
            raise TypeError("Expected argument 'pending_changes' to be a bool")
        pulumi.set(__self__, "pending_changes", pending_changes)
        if registration_authority and not isinstance(registration_authority, str):
            raise TypeError("Expected argument 'registration_authority' to be a str")
        pulumi.set(__self__, "registration_authority", registration_authority)
        if sans and not isinstance(sans, list):
            raise TypeError("Expected argument 'sans' to be a list")
        pulumi.set(__self__, "sans", sans)
        if secure_network and not isinstance(secure_network, str):
            raise TypeError("Expected argument 'secure_network' to be a str")
        pulumi.set(__self__, "secure_network", secure_network)
        if signature_algorithm and not isinstance(signature_algorithm, str):
            raise TypeError("Expected argument 'signature_algorithm' to be a str")
        pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if sni_only and not isinstance(sni_only, bool):
            raise TypeError("Expected argument 'sni_only' to be a bool")
        pulumi.set(__self__, "sni_only", sni_only)
        if tech_contacts and not isinstance(tech_contacts, list):
            raise TypeError("Expected argument 'tech_contacts' to be a list")
        pulumi.set(__self__, "tech_contacts", tech_contacts)
        if validation_type and not isinstance(validation_type, str):
            raise TypeError("Expected argument 'validation_type' to be a str")
        pulumi.set(__self__, "validation_type", validation_type)

    @property
    @pulumi.getter(name="adminContacts")
    def admin_contacts(self) -> Sequence['outputs.GetCPSEnrollmentAdminContactResult']:
        return pulumi.get(self, "admin_contacts")

    @property
    @pulumi.getter(name="certificateChainType")
    def certificate_chain_type(self) -> str:
        return pulumi.get(self, "certificate_chain_type")

    @property
    @pulumi.getter(name="certificateType")
    def certificate_type(self) -> str:
        return pulumi.get(self, "certificate_type")

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> str:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter
    def csrs(self) -> Sequence['outputs.GetCPSEnrollmentCsrResult']:
        return pulumi.get(self, "csrs")

    @property
    @pulumi.getter(name="dnsChallenges")
    def dns_challenges(self) -> Sequence['outputs.GetCPSEnrollmentDnsChallengeResult']:
        return pulumi.get(self, "dns_challenges")

    @property
    @pulumi.getter(name="enableMultiStackedCertificates")
    def enable_multi_stacked_certificates(self) -> bool:
        return pulumi.get(self, "enable_multi_stacked_certificates")

    @property
    @pulumi.getter(name="enrollmentId")
    def enrollment_id(self) -> int:
        return pulumi.get(self, "enrollment_id")

    @property
    @pulumi.getter(name="httpChallenges")
    def http_challenges(self) -> Sequence['outputs.GetCPSEnrollmentHttpChallengeResult']:
        return pulumi.get(self, "http_challenges")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="networkConfigurations")
    def network_configurations(self) -> Sequence['outputs.GetCPSEnrollmentNetworkConfigurationResult']:
        return pulumi.get(self, "network_configurations")

    @property
    @pulumi.getter
    def organizations(self) -> Sequence['outputs.GetCPSEnrollmentOrganizationResult']:
        return pulumi.get(self, "organizations")

    @property
    @pulumi.getter(name="pendingChanges")
    def pending_changes(self) -> bool:
        return pulumi.get(self, "pending_changes")

    @property
    @pulumi.getter(name="registrationAuthority")
    def registration_authority(self) -> str:
        return pulumi.get(self, "registration_authority")

    @property
    @pulumi.getter
    def sans(self) -> Sequence[str]:
        return pulumi.get(self, "sans")

    @property
    @pulumi.getter(name="secureNetwork")
    def secure_network(self) -> str:
        return pulumi.get(self, "secure_network")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> str:
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter(name="sniOnly")
    def sni_only(self) -> bool:
        return pulumi.get(self, "sni_only")

    @property
    @pulumi.getter(name="techContacts")
    def tech_contacts(self) -> Sequence['outputs.GetCPSEnrollmentTechContactResult']:
        return pulumi.get(self, "tech_contacts")

    @property
    @pulumi.getter(name="validationType")
    def validation_type(self) -> str:
        return pulumi.get(self, "validation_type")


class AwaitableGetCPSEnrollmentResult(GetCPSEnrollmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCPSEnrollmentResult(
            admin_contacts=self.admin_contacts,
            certificate_chain_type=self.certificate_chain_type,
            certificate_type=self.certificate_type,
            common_name=self.common_name,
            contract_id=self.contract_id,
            csrs=self.csrs,
            dns_challenges=self.dns_challenges,
            enable_multi_stacked_certificates=self.enable_multi_stacked_certificates,
            enrollment_id=self.enrollment_id,
            http_challenges=self.http_challenges,
            id=self.id,
            network_configurations=self.network_configurations,
            organizations=self.organizations,
            pending_changes=self.pending_changes,
            registration_authority=self.registration_authority,
            sans=self.sans,
            secure_network=self.secure_network,
            signature_algorithm=self.signature_algorithm,
            sni_only=self.sni_only,
            tech_contacts=self.tech_contacts,
            validation_type=self.validation_type)


def get_cps_enrollment(enrollment_id: Optional[int] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCPSEnrollmentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['enrollmentId'] = enrollment_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getCPSEnrollment:getCPSEnrollment', __args__, opts=opts, typ=GetCPSEnrollmentResult).value

    return AwaitableGetCPSEnrollmentResult(
        admin_contacts=pulumi.get(__ret__, 'admin_contacts'),
        certificate_chain_type=pulumi.get(__ret__, 'certificate_chain_type'),
        certificate_type=pulumi.get(__ret__, 'certificate_type'),
        common_name=pulumi.get(__ret__, 'common_name'),
        contract_id=pulumi.get(__ret__, 'contract_id'),
        csrs=pulumi.get(__ret__, 'csrs'),
        dns_challenges=pulumi.get(__ret__, 'dns_challenges'),
        enable_multi_stacked_certificates=pulumi.get(__ret__, 'enable_multi_stacked_certificates'),
        enrollment_id=pulumi.get(__ret__, 'enrollment_id'),
        http_challenges=pulumi.get(__ret__, 'http_challenges'),
        id=pulumi.get(__ret__, 'id'),
        network_configurations=pulumi.get(__ret__, 'network_configurations'),
        organizations=pulumi.get(__ret__, 'organizations'),
        pending_changes=pulumi.get(__ret__, 'pending_changes'),
        registration_authority=pulumi.get(__ret__, 'registration_authority'),
        sans=pulumi.get(__ret__, 'sans'),
        secure_network=pulumi.get(__ret__, 'secure_network'),
        signature_algorithm=pulumi.get(__ret__, 'signature_algorithm'),
        sni_only=pulumi.get(__ret__, 'sni_only'),
        tech_contacts=pulumi.get(__ret__, 'tech_contacts'),
        validation_type=pulumi.get(__ret__, 'validation_type'))


@_utilities.lift_output_func(get_cps_enrollment)
def get_cps_enrollment_output(enrollment_id: Optional[pulumi.Input[int]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCPSEnrollmentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
