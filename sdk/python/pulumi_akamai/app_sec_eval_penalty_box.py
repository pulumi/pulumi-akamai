# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AppSecEvalPenaltyBoxArgs', 'AppSecEvalPenaltyBox']

@pulumi.input_type
class AppSecEvalPenaltyBoxArgs:
    def __init__(__self__, *,
                 config_id: pulumi.Input[int],
                 penalty_box_action: pulumi.Input[str],
                 penalty_box_protection: pulumi.Input[bool],
                 security_policy_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a AppSecEvalPenaltyBox resource.
        :param pulumi.Input[int] config_id: . Unique identifier of the security configuration associated with the evaluation penalty box settings being modified.
        :param pulumi.Input[str] penalty_box_action: . Action taken any time evaluation penalty box protection is triggered. Allowed values are:
               - **alert**. Record the event.
               - **deny**. Block the request.
               - **deny_custom_{custom_deny_id}**. Take the action specified by the custom deny.
               - **none**. Take no action.
        :param pulumi.Input[bool] penalty_box_protection: . Set to **true** to enable evaluation penalty box protection; set to **false** to disable evaluation penalty box protection.
        :param pulumi.Input[str] security_policy_id: . Unique identifier of the security policy associated with the evaluation penalty box settings being modified.
        """
        pulumi.set(__self__, "config_id", config_id)
        pulumi.set(__self__, "penalty_box_action", penalty_box_action)
        pulumi.set(__self__, "penalty_box_protection", penalty_box_protection)
        pulumi.set(__self__, "security_policy_id", security_policy_id)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Input[int]:
        """
        . Unique identifier of the security configuration associated with the evaluation penalty box settings being modified.
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="penaltyBoxAction")
    def penalty_box_action(self) -> pulumi.Input[str]:
        """
        . Action taken any time evaluation penalty box protection is triggered. Allowed values are:
        - **alert**. Record the event.
        - **deny**. Block the request.
        - **deny_custom_{custom_deny_id}**. Take the action specified by the custom deny.
        - **none**. Take no action.
        """
        return pulumi.get(self, "penalty_box_action")

    @penalty_box_action.setter
    def penalty_box_action(self, value: pulumi.Input[str]):
        pulumi.set(self, "penalty_box_action", value)

    @property
    @pulumi.getter(name="penaltyBoxProtection")
    def penalty_box_protection(self) -> pulumi.Input[bool]:
        """
        . Set to **true** to enable evaluation penalty box protection; set to **false** to disable evaluation penalty box protection.
        """
        return pulumi.get(self, "penalty_box_protection")

    @penalty_box_protection.setter
    def penalty_box_protection(self, value: pulumi.Input[bool]):
        pulumi.set(self, "penalty_box_protection", value)

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> pulumi.Input[str]:
        """
        . Unique identifier of the security policy associated with the evaluation penalty box settings being modified.
        """
        return pulumi.get(self, "security_policy_id")

    @security_policy_id.setter
    def security_policy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "security_policy_id", value)


@pulumi.input_type
class _AppSecEvalPenaltyBoxState:
    def __init__(__self__, *,
                 config_id: Optional[pulumi.Input[int]] = None,
                 penalty_box_action: Optional[pulumi.Input[str]] = None,
                 penalty_box_protection: Optional[pulumi.Input[bool]] = None,
                 security_policy_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AppSecEvalPenaltyBox resources.
        :param pulumi.Input[int] config_id: . Unique identifier of the security configuration associated with the evaluation penalty box settings being modified.
        :param pulumi.Input[str] penalty_box_action: . Action taken any time evaluation penalty box protection is triggered. Allowed values are:
               - **alert**. Record the event.
               - **deny**. Block the request.
               - **deny_custom_{custom_deny_id}**. Take the action specified by the custom deny.
               - **none**. Take no action.
        :param pulumi.Input[bool] penalty_box_protection: . Set to **true** to enable evaluation penalty box protection; set to **false** to disable evaluation penalty box protection.
        :param pulumi.Input[str] security_policy_id: . Unique identifier of the security policy associated with the evaluation penalty box settings being modified.
        """
        if config_id is not None:
            pulumi.set(__self__, "config_id", config_id)
        if penalty_box_action is not None:
            pulumi.set(__self__, "penalty_box_action", penalty_box_action)
        if penalty_box_protection is not None:
            pulumi.set(__self__, "penalty_box_protection", penalty_box_protection)
        if security_policy_id is not None:
            pulumi.set(__self__, "security_policy_id", security_policy_id)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[pulumi.Input[int]]:
        """
        . Unique identifier of the security configuration associated with the evaluation penalty box settings being modified.
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="penaltyBoxAction")
    def penalty_box_action(self) -> Optional[pulumi.Input[str]]:
        """
        . Action taken any time evaluation penalty box protection is triggered. Allowed values are:
        - **alert**. Record the event.
        - **deny**. Block the request.
        - **deny_custom_{custom_deny_id}**. Take the action specified by the custom deny.
        - **none**. Take no action.
        """
        return pulumi.get(self, "penalty_box_action")

    @penalty_box_action.setter
    def penalty_box_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "penalty_box_action", value)

    @property
    @pulumi.getter(name="penaltyBoxProtection")
    def penalty_box_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        . Set to **true** to enable evaluation penalty box protection; set to **false** to disable evaluation penalty box protection.
        """
        return pulumi.get(self, "penalty_box_protection")

    @penalty_box_protection.setter
    def penalty_box_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "penalty_box_protection", value)

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        . Unique identifier of the security policy associated with the evaluation penalty box settings being modified.
        """
        return pulumi.get(self, "security_policy_id")

    @security_policy_id.setter
    def security_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_policy_id", value)


class AppSecEvalPenaltyBox(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 penalty_box_action: Optional[pulumi.Input[str]] = None,
                 penalty_box_protection: Optional[pulumi.Input[bool]] = None,
                 security_policy_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        **Scopes**: Security policy

         __ASE_Beta__.:
        Modifies the penalty box settings for a security policy in evaluation mode - evaluation penalty box.
        When the penalty box is enabled for a policy in evaluation mode, clients that trigger a WAF Deny action are placed in the “penalty box”.
        There, the action you select for the penalty box (either Alert or Deny) continues to apply to any requests from that client for the next 10 minutes.

        **Related API Endpoint**:  [/appsec/v1/configs/{configId}/versions/{versionNumber}/security-policies/{policyId}/eval_penalty-box](https://techdocs.akamai.com/application-security/reference/put-policy-eval_penalty-box)
        ## Example Usage

        Basic usage:

        ```python
        import pulumi
        import pulumi_akamai as akamai

        configuration = akamai.get_app_sec_configuration(name="Documentation")
        eval_penalty_box = akamai.AppSecEvalPenaltyBox("evalPenaltyBox",
            config_id=configuration.config_id,
            security_policy_id="gms1_134637",
            penalty_box_protection=True,
            penalty_box_action="deny")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] config_id: . Unique identifier of the security configuration associated with the evaluation penalty box settings being modified.
        :param pulumi.Input[str] penalty_box_action: . Action taken any time evaluation penalty box protection is triggered. Allowed values are:
               - **alert**. Record the event.
               - **deny**. Block the request.
               - **deny_custom_{custom_deny_id}**. Take the action specified by the custom deny.
               - **none**. Take no action.
        :param pulumi.Input[bool] penalty_box_protection: . Set to **true** to enable evaluation penalty box protection; set to **false** to disable evaluation penalty box protection.
        :param pulumi.Input[str] security_policy_id: . Unique identifier of the security policy associated with the evaluation penalty box settings being modified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppSecEvalPenaltyBoxArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        **Scopes**: Security policy

         __ASE_Beta__.:
        Modifies the penalty box settings for a security policy in evaluation mode - evaluation penalty box.
        When the penalty box is enabled for a policy in evaluation mode, clients that trigger a WAF Deny action are placed in the “penalty box”.
        There, the action you select for the penalty box (either Alert or Deny) continues to apply to any requests from that client for the next 10 minutes.

        **Related API Endpoint**:  [/appsec/v1/configs/{configId}/versions/{versionNumber}/security-policies/{policyId}/eval_penalty-box](https://techdocs.akamai.com/application-security/reference/put-policy-eval_penalty-box)
        ## Example Usage

        Basic usage:

        ```python
        import pulumi
        import pulumi_akamai as akamai

        configuration = akamai.get_app_sec_configuration(name="Documentation")
        eval_penalty_box = akamai.AppSecEvalPenaltyBox("evalPenaltyBox",
            config_id=configuration.config_id,
            security_policy_id="gms1_134637",
            penalty_box_protection=True,
            penalty_box_action="deny")
        ```

        :param str resource_name: The name of the resource.
        :param AppSecEvalPenaltyBoxArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppSecEvalPenaltyBoxArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 penalty_box_action: Optional[pulumi.Input[str]] = None,
                 penalty_box_protection: Optional[pulumi.Input[bool]] = None,
                 security_policy_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppSecEvalPenaltyBoxArgs.__new__(AppSecEvalPenaltyBoxArgs)

            if config_id is None and not opts.urn:
                raise TypeError("Missing required property 'config_id'")
            __props__.__dict__["config_id"] = config_id
            if penalty_box_action is None and not opts.urn:
                raise TypeError("Missing required property 'penalty_box_action'")
            __props__.__dict__["penalty_box_action"] = penalty_box_action
            if penalty_box_protection is None and not opts.urn:
                raise TypeError("Missing required property 'penalty_box_protection'")
            __props__.__dict__["penalty_box_protection"] = penalty_box_protection
            if security_policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'security_policy_id'")
            __props__.__dict__["security_policy_id"] = security_policy_id
        super(AppSecEvalPenaltyBox, __self__).__init__(
            'akamai:index/appSecEvalPenaltyBox:AppSecEvalPenaltyBox',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config_id: Optional[pulumi.Input[int]] = None,
            penalty_box_action: Optional[pulumi.Input[str]] = None,
            penalty_box_protection: Optional[pulumi.Input[bool]] = None,
            security_policy_id: Optional[pulumi.Input[str]] = None) -> 'AppSecEvalPenaltyBox':
        """
        Get an existing AppSecEvalPenaltyBox resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] config_id: . Unique identifier of the security configuration associated with the evaluation penalty box settings being modified.
        :param pulumi.Input[str] penalty_box_action: . Action taken any time evaluation penalty box protection is triggered. Allowed values are:
               - **alert**. Record the event.
               - **deny**. Block the request.
               - **deny_custom_{custom_deny_id}**. Take the action specified by the custom deny.
               - **none**. Take no action.
        :param pulumi.Input[bool] penalty_box_protection: . Set to **true** to enable evaluation penalty box protection; set to **false** to disable evaluation penalty box protection.
        :param pulumi.Input[str] security_policy_id: . Unique identifier of the security policy associated with the evaluation penalty box settings being modified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppSecEvalPenaltyBoxState.__new__(_AppSecEvalPenaltyBoxState)

        __props__.__dict__["config_id"] = config_id
        __props__.__dict__["penalty_box_action"] = penalty_box_action
        __props__.__dict__["penalty_box_protection"] = penalty_box_protection
        __props__.__dict__["security_policy_id"] = security_policy_id
        return AppSecEvalPenaltyBox(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Output[int]:
        """
        . Unique identifier of the security configuration associated with the evaluation penalty box settings being modified.
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="penaltyBoxAction")
    def penalty_box_action(self) -> pulumi.Output[str]:
        """
        . Action taken any time evaluation penalty box protection is triggered. Allowed values are:
        - **alert**. Record the event.
        - **deny**. Block the request.
        - **deny_custom_{custom_deny_id}**. Take the action specified by the custom deny.
        - **none**. Take no action.
        """
        return pulumi.get(self, "penalty_box_action")

    @property
    @pulumi.getter(name="penaltyBoxProtection")
    def penalty_box_protection(self) -> pulumi.Output[bool]:
        """
        . Set to **true** to enable evaluation penalty box protection; set to **false** to disable evaluation penalty box protection.
        """
        return pulumi.get(self, "penalty_box_protection")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> pulumi.Output[str]:
        """
        . Unique identifier of the security policy associated with the evaluation penalty box settings being modified.
        """
        return pulumi.get(self, "security_policy_id")

