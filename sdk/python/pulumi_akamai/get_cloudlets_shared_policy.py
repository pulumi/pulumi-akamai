# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCloudletsSharedPolicyResult',
    'AwaitableGetCloudletsSharedPolicyResult',
    'get_cloudlets_shared_policy',
    'get_cloudlets_shared_policy_output',
]

@pulumi.output_type
class GetCloudletsSharedPolicyResult:
    """
    A collection of values returned by getCloudletsSharedPolicy.
    """
    def __init__(__self__, activations=None, cloudlet_type=None, description=None, group_id=None, id=None, match_rules=None, name=None, policy_id=None, version=None, version_description=None, warnings=None):
        if activations and not isinstance(activations, dict):
            raise TypeError("Expected argument 'activations' to be a dict")
        pulumi.set(__self__, "activations", activations)
        if cloudlet_type and not isinstance(cloudlet_type, str):
            raise TypeError("Expected argument 'cloudlet_type' to be a str")
        pulumi.set(__self__, "cloudlet_type", cloudlet_type)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if group_id and not isinstance(group_id, int):
            raise TypeError("Expected argument 'group_id' to be a int")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if match_rules and not isinstance(match_rules, str):
            raise TypeError("Expected argument 'match_rules' to be a str")
        pulumi.set(__self__, "match_rules", match_rules)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_id and not isinstance(policy_id, int):
            raise TypeError("Expected argument 'policy_id' to be a int")
        pulumi.set(__self__, "policy_id", policy_id)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)
        if version_description and not isinstance(version_description, str):
            raise TypeError("Expected argument 'version_description' to be a str")
        pulumi.set(__self__, "version_description", version_description)
        if warnings and not isinstance(warnings, str):
            raise TypeError("Expected argument 'warnings' to be a str")
        pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def activations(self) -> Optional['outputs.GetCloudletsSharedPolicyActivationsResult']:
        return pulumi.get(self, "activations")

    @property
    @pulumi.getter(name="cloudletType")
    def cloudlet_type(self) -> str:
        return pulumi.get(self, "cloudlet_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        warnings.warn("""Required by the terraform plugin testing framework, always set to `akamai_cloudlets_shared_policy`.""", DeprecationWarning)
        pulumi.log.warn("""id is deprecated: Required by the terraform plugin testing framework, always set to `akamai_cloudlets_shared_policy`.""")

        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchRules")
    def match_rules(self) -> str:
        return pulumi.get(self, "match_rules")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> int:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionDescription")
    def version_description(self) -> str:
        return pulumi.get(self, "version_description")

    @property
    @pulumi.getter
    def warnings(self) -> str:
        return pulumi.get(self, "warnings")


class AwaitableGetCloudletsSharedPolicyResult(GetCloudletsSharedPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudletsSharedPolicyResult(
            activations=self.activations,
            cloudlet_type=self.cloudlet_type,
            description=self.description,
            group_id=self.group_id,
            id=self.id,
            match_rules=self.match_rules,
            name=self.name,
            policy_id=self.policy_id,
            version=self.version,
            version_description=self.version_description,
            warnings=self.warnings)


def get_cloudlets_shared_policy(activations: Optional[pulumi.InputType['GetCloudletsSharedPolicyActivationsArgs']] = None,
                                policy_id: Optional[int] = None,
                                version: Optional[int] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudletsSharedPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['activations'] = activations
    __args__['policyId'] = policy_id
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getCloudletsSharedPolicy:getCloudletsSharedPolicy', __args__, opts=opts, typ=GetCloudletsSharedPolicyResult).value

    return AwaitableGetCloudletsSharedPolicyResult(
        activations=pulumi.get(__ret__, 'activations'),
        cloudlet_type=pulumi.get(__ret__, 'cloudlet_type'),
        description=pulumi.get(__ret__, 'description'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        match_rules=pulumi.get(__ret__, 'match_rules'),
        name=pulumi.get(__ret__, 'name'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        version=pulumi.get(__ret__, 'version'),
        version_description=pulumi.get(__ret__, 'version_description'),
        warnings=pulumi.get(__ret__, 'warnings'))


@_utilities.lift_output_func(get_cloudlets_shared_policy)
def get_cloudlets_shared_policy_output(activations: Optional[pulumi.Input[Optional[pulumi.InputType['GetCloudletsSharedPolicyActivationsArgs']]]] = None,
                                       policy_id: Optional[pulumi.Input[int]] = None,
                                       version: Optional[pulumi.Input[Optional[int]]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudletsSharedPolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
