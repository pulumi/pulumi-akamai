# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['BotmanCustomBotCategoryItemSequenceArgs', 'BotmanCustomBotCategoryItemSequence']

@pulumi.input_type
class BotmanCustomBotCategoryItemSequenceArgs:
    def __init__(__self__, *,
                 bot_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 category_id: pulumi.Input[str],
                 config_id: pulumi.Input[int]):
        """
        The set of arguments for constructing a BotmanCustomBotCategoryItemSequence resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bot_ids: Unique identifiers of bots in this category, sorted in preferred order
        :param pulumi.Input[str] category_id: Unique identifier of the bot category
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        """
        pulumi.set(__self__, "bot_ids", bot_ids)
        pulumi.set(__self__, "category_id", category_id)
        pulumi.set(__self__, "config_id", config_id)

    @property
    @pulumi.getter(name="botIds")
    def bot_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Unique identifiers of bots in this category, sorted in preferred order
        """
        return pulumi.get(self, "bot_ids")

    @bot_ids.setter
    def bot_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "bot_ids", value)

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> pulumi.Input[str]:
        """
        Unique identifier of the bot category
        """
        return pulumi.get(self, "category_id")

    @category_id.setter
    def category_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "category_id", value)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Input[int]:
        """
        Unique identifier of the security configuration
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "config_id", value)


@pulumi.input_type
class _BotmanCustomBotCategoryItemSequenceState:
    def __init__(__self__, *,
                 bot_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 category_id: Optional[pulumi.Input[str]] = None,
                 config_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering BotmanCustomBotCategoryItemSequence resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bot_ids: Unique identifiers of bots in this category, sorted in preferred order
        :param pulumi.Input[str] category_id: Unique identifier of the bot category
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        """
        if bot_ids is not None:
            pulumi.set(__self__, "bot_ids", bot_ids)
        if category_id is not None:
            pulumi.set(__self__, "category_id", category_id)
        if config_id is not None:
            pulumi.set(__self__, "config_id", config_id)

    @property
    @pulumi.getter(name="botIds")
    def bot_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Unique identifiers of bots in this category, sorted in preferred order
        """
        return pulumi.get(self, "bot_ids")

    @bot_ids.setter
    def bot_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bot_ids", value)

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier of the bot category
        """
        return pulumi.get(self, "category_id")

    @category_id.setter
    def category_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category_id", value)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[pulumi.Input[int]]:
        """
        Unique identifier of the security configuration
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "config_id", value)


class BotmanCustomBotCategoryItemSequence(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bot_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 category_id: Optional[pulumi.Input[str]] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a BotmanCustomBotCategoryItemSequence resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bot_ids: Unique identifiers of bots in this category, sorted in preferred order
        :param pulumi.Input[str] category_id: Unique identifier of the bot category
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BotmanCustomBotCategoryItemSequenceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BotmanCustomBotCategoryItemSequence resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BotmanCustomBotCategoryItemSequenceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BotmanCustomBotCategoryItemSequenceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bot_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 category_id: Optional[pulumi.Input[str]] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BotmanCustomBotCategoryItemSequenceArgs.__new__(BotmanCustomBotCategoryItemSequenceArgs)

            if bot_ids is None and not opts.urn:
                raise TypeError("Missing required property 'bot_ids'")
            __props__.__dict__["bot_ids"] = bot_ids
            if category_id is None and not opts.urn:
                raise TypeError("Missing required property 'category_id'")
            __props__.__dict__["category_id"] = category_id
            if config_id is None and not opts.urn:
                raise TypeError("Missing required property 'config_id'")
            __props__.__dict__["config_id"] = config_id
        super(BotmanCustomBotCategoryItemSequence, __self__).__init__(
            'akamai:index/botmanCustomBotCategoryItemSequence:BotmanCustomBotCategoryItemSequence',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bot_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            category_id: Optional[pulumi.Input[str]] = None,
            config_id: Optional[pulumi.Input[int]] = None) -> 'BotmanCustomBotCategoryItemSequence':
        """
        Get an existing BotmanCustomBotCategoryItemSequence resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bot_ids: Unique identifiers of bots in this category, sorted in preferred order
        :param pulumi.Input[str] category_id: Unique identifier of the bot category
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BotmanCustomBotCategoryItemSequenceState.__new__(_BotmanCustomBotCategoryItemSequenceState)

        __props__.__dict__["bot_ids"] = bot_ids
        __props__.__dict__["category_id"] = category_id
        __props__.__dict__["config_id"] = config_id
        return BotmanCustomBotCategoryItemSequence(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="botIds")
    def bot_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Unique identifiers of bots in this category, sorted in preferred order
        """
        return pulumi.get(self, "bot_ids")

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> pulumi.Output[str]:
        """
        Unique identifier of the bot category
        """
        return pulumi.get(self, "category_id")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Output[int]:
        """
        Unique identifier of the security configuration
        """
        return pulumi.get(self, "config_id")

