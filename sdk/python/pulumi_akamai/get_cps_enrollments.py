# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetCPSEnrollmentsResult',
    'AwaitableGetCPSEnrollmentsResult',
    'get_cps_enrollments',
    'get_cps_enrollments_output',
]

@pulumi.output_type
class GetCPSEnrollmentsResult:
    """
    A collection of values returned by getCPSEnrollments.
    """
    def __init__(__self__, contract_id=None, enrollments=None, id=None):
        if contract_id and not isinstance(contract_id, str):
            raise TypeError("Expected argument 'contract_id' to be a str")
        pulumi.set(__self__, "contract_id", contract_id)
        if enrollments and not isinstance(enrollments, list):
            raise TypeError("Expected argument 'enrollments' to be a list")
        pulumi.set(__self__, "enrollments", enrollments)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter
    def enrollments(self) -> Sequence['outputs.GetCPSEnrollmentsEnrollmentResult']:
        return pulumi.get(self, "enrollments")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetCPSEnrollmentsResult(GetCPSEnrollmentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCPSEnrollmentsResult(
            contract_id=self.contract_id,
            enrollments=self.enrollments,
            id=self.id)


def get_cps_enrollments(contract_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCPSEnrollmentsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['contractId'] = contract_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getCPSEnrollments:getCPSEnrollments', __args__, opts=opts, typ=GetCPSEnrollmentsResult).value

    return AwaitableGetCPSEnrollmentsResult(
        contract_id=pulumi.get(__ret__, 'contract_id'),
        enrollments=pulumi.get(__ret__, 'enrollments'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_cps_enrollments)
def get_cps_enrollments_output(contract_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCPSEnrollmentsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
