# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamCidrBlockResult',
    'AwaitableGetIamCidrBlockResult',
    'get_iam_cidr_block',
    'get_iam_cidr_block_output',
]

@pulumi.output_type
class GetIamCidrBlockResult:
    """
    A collection of values returned by getIamCidrBlock.
    """
    def __init__(__self__, actions=None, cidr_block=None, cidr_block_id=None, comments=None, created_by=None, created_date=None, enabled=None, id=None, modified_by=None, modified_date=None):
        if actions and not isinstance(actions, dict):
            raise TypeError("Expected argument 'actions' to be a dict")
        pulumi.set(__self__, "actions", actions)
        if cidr_block and not isinstance(cidr_block, str):
            raise TypeError("Expected argument 'cidr_block' to be a str")
        pulumi.set(__self__, "cidr_block", cidr_block)
        if cidr_block_id and not isinstance(cidr_block_id, int):
            raise TypeError("Expected argument 'cidr_block_id' to be a int")
        pulumi.set(__self__, "cidr_block_id", cidr_block_id)
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        pulumi.set(__self__, "created_date", created_date)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if modified_by and not isinstance(modified_by, str):
            raise TypeError("Expected argument 'modified_by' to be a str")
        pulumi.set(__self__, "modified_by", modified_by)
        if modified_date and not isinstance(modified_date, str):
            raise TypeError("Expected argument 'modified_date' to be a str")
        pulumi.set(__self__, "modified_date", modified_date)

    @property
    @pulumi.getter
    def actions(self) -> 'outputs.GetIamCidrBlockActionsResult':
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="cidrBlockId")
    def cidr_block_id(self) -> int:
        return pulumi.get(self, "cidr_block_id")

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> str:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="modifiedDate")
    def modified_date(self) -> str:
        return pulumi.get(self, "modified_date")


class AwaitableGetIamCidrBlockResult(GetIamCidrBlockResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamCidrBlockResult(
            actions=self.actions,
            cidr_block=self.cidr_block,
            cidr_block_id=self.cidr_block_id,
            comments=self.comments,
            created_by=self.created_by,
            created_date=self.created_date,
            enabled=self.enabled,
            id=self.id,
            modified_by=self.modified_by,
            modified_date=self.modified_date)


def get_iam_cidr_block(cidr_block_id: Optional[int] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamCidrBlockResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cidrBlockId'] = cidr_block_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getIamCidrBlock:getIamCidrBlock', __args__, opts=opts, typ=GetIamCidrBlockResult).value

    return AwaitableGetIamCidrBlockResult(
        actions=pulumi.get(__ret__, 'actions'),
        cidr_block=pulumi.get(__ret__, 'cidr_block'),
        cidr_block_id=pulumi.get(__ret__, 'cidr_block_id'),
        comments=pulumi.get(__ret__, 'comments'),
        created_by=pulumi.get(__ret__, 'created_by'),
        created_date=pulumi.get(__ret__, 'created_date'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        modified_by=pulumi.get(__ret__, 'modified_by'),
        modified_date=pulumi.get(__ret__, 'modified_date'))
def get_iam_cidr_block_output(cidr_block_id: Optional[pulumi.Input[int]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamCidrBlockResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cidrBlockId'] = cidr_block_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getIamCidrBlock:getIamCidrBlock', __args__, opts=opts, typ=GetIamCidrBlockResult)
    return __ret__.apply(lambda __response__: GetIamCidrBlockResult(
        actions=pulumi.get(__response__, 'actions'),
        cidr_block=pulumi.get(__response__, 'cidr_block'),
        cidr_block_id=pulumi.get(__response__, 'cidr_block_id'),
        comments=pulumi.get(__response__, 'comments'),
        created_by=pulumi.get(__response__, 'created_by'),
        created_date=pulumi.get(__response__, 'created_date'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        modified_by=pulumi.get(__response__, 'modified_by'),
        modified_date=pulumi.get(__response__, 'modified_date')))
