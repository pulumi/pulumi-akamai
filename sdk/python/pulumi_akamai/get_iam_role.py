# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamRoleResult',
    'AwaitableGetIamRoleResult',
    'get_iam_role',
    'get_iam_role_output',
]

@pulumi.output_type
class GetIamRoleResult:
    """
    A collection of values returned by getIamRole.
    """
    def __init__(__self__, actions=None, created_by=None, created_date=None, granted_roles=None, id=None, modified_by=None, modified_date=None, role_description=None, role_id=None, role_name=None, type=None, users=None):
        if actions and not isinstance(actions, dict):
            raise TypeError("Expected argument 'actions' to be a dict")
        pulumi.set(__self__, "actions", actions)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        pulumi.set(__self__, "created_date", created_date)
        if granted_roles and not isinstance(granted_roles, list):
            raise TypeError("Expected argument 'granted_roles' to be a list")
        pulumi.set(__self__, "granted_roles", granted_roles)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if modified_by and not isinstance(modified_by, str):
            raise TypeError("Expected argument 'modified_by' to be a str")
        pulumi.set(__self__, "modified_by", modified_by)
        if modified_date and not isinstance(modified_date, str):
            raise TypeError("Expected argument 'modified_date' to be a str")
        pulumi.set(__self__, "modified_date", modified_date)
        if role_description and not isinstance(role_description, str):
            raise TypeError("Expected argument 'role_description' to be a str")
        pulumi.set(__self__, "role_description", role_description)
        if role_id and not isinstance(role_id, int):
            raise TypeError("Expected argument 'role_id' to be a int")
        pulumi.set(__self__, "role_id", role_id)
        if role_name and not isinstance(role_name, str):
            raise TypeError("Expected argument 'role_name' to be a str")
        pulumi.set(__self__, "role_name", role_name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def actions(self) -> 'outputs.GetIamRoleActionsResult':
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter(name="grantedRoles")
    def granted_roles(self) -> Sequence['outputs.GetIamRoleGrantedRoleResult']:
        return pulumi.get(self, "granted_roles")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> str:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="modifiedDate")
    def modified_date(self) -> str:
        return pulumi.get(self, "modified_date")

    @property
    @pulumi.getter(name="roleDescription")
    def role_description(self) -> str:
        return pulumi.get(self, "role_description")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> int:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> str:
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetIamRoleUserResult']:
        return pulumi.get(self, "users")


class AwaitableGetIamRoleResult(GetIamRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamRoleResult(
            actions=self.actions,
            created_by=self.created_by,
            created_date=self.created_date,
            granted_roles=self.granted_roles,
            id=self.id,
            modified_by=self.modified_by,
            modified_date=self.modified_date,
            role_description=self.role_description,
            role_id=self.role_id,
            role_name=self.role_name,
            type=self.type,
            users=self.users)


def get_iam_role(role_id: Optional[int] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamRoleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['roleId'] = role_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getIamRole:getIamRole', __args__, opts=opts, typ=GetIamRoleResult).value

    return AwaitableGetIamRoleResult(
        actions=pulumi.get(__ret__, 'actions'),
        created_by=pulumi.get(__ret__, 'created_by'),
        created_date=pulumi.get(__ret__, 'created_date'),
        granted_roles=pulumi.get(__ret__, 'granted_roles'),
        id=pulumi.get(__ret__, 'id'),
        modified_by=pulumi.get(__ret__, 'modified_by'),
        modified_date=pulumi.get(__ret__, 'modified_date'),
        role_description=pulumi.get(__ret__, 'role_description'),
        role_id=pulumi.get(__ret__, 'role_id'),
        role_name=pulumi.get(__ret__, 'role_name'),
        type=pulumi.get(__ret__, 'type'),
        users=pulumi.get(__ret__, 'users'))
def get_iam_role_output(role_id: Optional[pulumi.Input[int]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamRoleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['roleId'] = role_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getIamRole:getIamRole', __args__, opts=opts, typ=GetIamRoleResult)
    return __ret__.apply(lambda __response__: GetIamRoleResult(
        actions=pulumi.get(__response__, 'actions'),
        created_by=pulumi.get(__response__, 'created_by'),
        created_date=pulumi.get(__response__, 'created_date'),
        granted_roles=pulumi.get(__response__, 'granted_roles'),
        id=pulumi.get(__response__, 'id'),
        modified_by=pulumi.get(__response__, 'modified_by'),
        modified_date=pulumi.get(__response__, 'modified_date'),
        role_description=pulumi.get(__response__, 'role_description'),
        role_id=pulumi.get(__response__, 'role_id'),
        role_name=pulumi.get(__response__, 'role_name'),
        type=pulumi.get(__response__, 'type'),
        users=pulumi.get(__response__, 'users')))
