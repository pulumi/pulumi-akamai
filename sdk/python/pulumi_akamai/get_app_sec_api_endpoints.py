# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAppSecApiEndpointsResult',
    'AwaitableGetAppSecApiEndpointsResult',
    'get_app_sec_api_endpoints',
    'get_app_sec_api_endpoints_output',
]

@pulumi.output_type
class GetAppSecApiEndpointsResult:
    """
    A collection of values returned by getAppSecApiEndpoints.
    """
    def __init__(__self__, api_name=None, config_id=None, id=None, id_lists=None, json=None, output_text=None, security_policy_id=None):
        if api_name and not isinstance(api_name, str):
            raise TypeError("Expected argument 'api_name' to be a str")
        pulumi.set(__self__, "api_name", api_name)
        if config_id and not isinstance(config_id, int):
            raise TypeError("Expected argument 'config_id' to be a int")
        pulumi.set(__self__, "config_id", config_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if id_lists and not isinstance(id_lists, list):
            raise TypeError("Expected argument 'id_lists' to be a list")
        pulumi.set(__self__, "id_lists", id_lists)
        if json and not isinstance(json, str):
            raise TypeError("Expected argument 'json' to be a str")
        pulumi.set(__self__, "json", json)
        if output_text and not isinstance(output_text, str):
            raise TypeError("Expected argument 'output_text' to be a str")
        pulumi.set(__self__, "output_text", output_text)
        if security_policy_id and not isinstance(security_policy_id, str):
            raise TypeError("Expected argument 'security_policy_id' to be a str")
        pulumi.set(__self__, "security_policy_id", security_policy_id)

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> Optional[str]:
        return pulumi.get(self, "api_name")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> int:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idLists")
    def id_lists(self) -> Sequence[int]:
        return pulumi.get(self, "id_lists")

    @property
    @pulumi.getter
    def json(self) -> str:
        return pulumi.get(self, "json")

    @property
    @pulumi.getter(name="outputText")
    def output_text(self) -> str:
        return pulumi.get(self, "output_text")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "security_policy_id")


class AwaitableGetAppSecApiEndpointsResult(GetAppSecApiEndpointsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppSecApiEndpointsResult(
            api_name=self.api_name,
            config_id=self.config_id,
            id=self.id,
            id_lists=self.id_lists,
            json=self.json,
            output_text=self.output_text,
            security_policy_id=self.security_policy_id)


def get_app_sec_api_endpoints(api_name: Optional[str] = None,
                              config_id: Optional[int] = None,
                              security_policy_id: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppSecApiEndpointsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['apiName'] = api_name
    __args__['configId'] = config_id
    __args__['securityPolicyId'] = security_policy_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getAppSecApiEndpoints:getAppSecApiEndpoints', __args__, opts=opts, typ=GetAppSecApiEndpointsResult).value

    return AwaitableGetAppSecApiEndpointsResult(
        api_name=pulumi.get(__ret__, 'api_name'),
        config_id=pulumi.get(__ret__, 'config_id'),
        id=pulumi.get(__ret__, 'id'),
        id_lists=pulumi.get(__ret__, 'id_lists'),
        json=pulumi.get(__ret__, 'json'),
        output_text=pulumi.get(__ret__, 'output_text'),
        security_policy_id=pulumi.get(__ret__, 'security_policy_id'))


@_utilities.lift_output_func(get_app_sec_api_endpoints)
def get_app_sec_api_endpoints_output(api_name: Optional[pulumi.Input[Optional[str]]] = None,
                                     config_id: Optional[pulumi.Input[int]] = None,
                                     security_policy_id: Optional[pulumi.Input[Optional[str]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAppSecApiEndpointsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
