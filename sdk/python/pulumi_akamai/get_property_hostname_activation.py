# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPropertyHostnameActivationResult',
    'AwaitableGetPropertyHostnameActivationResult',
    'get_property_hostname_activation',
    'get_property_hostname_activation_output',
]

@pulumi.output_type
class GetPropertyHostnameActivationResult:
    """
    A collection of values returned by getPropertyHostnameActivation.
    """
    def __init__(__self__, account_id=None, activation_type=None, contract_id=None, group_id=None, hostname_activation_id=None, hostnames=None, id=None, include_hostnames=None, network=None, note=None, notify_emails=None, property_id=None, property_name=None, status=None, submit_date=None, update_date=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if activation_type and not isinstance(activation_type, str):
            raise TypeError("Expected argument 'activation_type' to be a str")
        pulumi.set(__self__, "activation_type", activation_type)
        if contract_id and not isinstance(contract_id, str):
            raise TypeError("Expected argument 'contract_id' to be a str")
        pulumi.set(__self__, "contract_id", contract_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if hostname_activation_id and not isinstance(hostname_activation_id, str):
            raise TypeError("Expected argument 'hostname_activation_id' to be a str")
        pulumi.set(__self__, "hostname_activation_id", hostname_activation_id)
        if hostnames and not isinstance(hostnames, list):
            raise TypeError("Expected argument 'hostnames' to be a list")
        pulumi.set(__self__, "hostnames", hostnames)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_hostnames and not isinstance(include_hostnames, bool):
            raise TypeError("Expected argument 'include_hostnames' to be a bool")
        pulumi.set(__self__, "include_hostnames", include_hostnames)
        if network and not isinstance(network, str):
            raise TypeError("Expected argument 'network' to be a str")
        pulumi.set(__self__, "network", network)
        if note and not isinstance(note, str):
            raise TypeError("Expected argument 'note' to be a str")
        pulumi.set(__self__, "note", note)
        if notify_emails and not isinstance(notify_emails, list):
            raise TypeError("Expected argument 'notify_emails' to be a list")
        pulumi.set(__self__, "notify_emails", notify_emails)
        if property_id and not isinstance(property_id, str):
            raise TypeError("Expected argument 'property_id' to be a str")
        pulumi.set(__self__, "property_id", property_id)
        if property_name and not isinstance(property_name, str):
            raise TypeError("Expected argument 'property_name' to be a str")
        pulumi.set(__self__, "property_name", property_name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if submit_date and not isinstance(submit_date, str):
            raise TypeError("Expected argument 'submit_date' to be a str")
        pulumi.set(__self__, "submit_date", submit_date)
        if update_date and not isinstance(update_date, str):
            raise TypeError("Expected argument 'update_date' to be a str")
        pulumi.set(__self__, "update_date", update_date)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="activationType")
    def activation_type(self) -> builtins.str:
        return pulumi.get(self, "activation_type")

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> builtins.str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> builtins.str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="hostnameActivationId")
    def hostname_activation_id(self) -> builtins.str:
        return pulumi.get(self, "hostname_activation_id")

    @property
    @pulumi.getter
    def hostnames(self) -> Sequence['outputs.GetPropertyHostnameActivationHostnameResult']:
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeHostnames")
    def include_hostnames(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "include_hostnames")

    @property
    @pulumi.getter
    def network(self) -> builtins.str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def note(self) -> builtins.str:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter(name="notifyEmails")
    def notify_emails(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "notify_emails")

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> builtins.str:
        return pulumi.get(self, "property_id")

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> builtins.str:
        return pulumi.get(self, "property_name")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="submitDate")
    def submit_date(self) -> builtins.str:
        return pulumi.get(self, "submit_date")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> builtins.str:
        return pulumi.get(self, "update_date")


class AwaitableGetPropertyHostnameActivationResult(GetPropertyHostnameActivationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPropertyHostnameActivationResult(
            account_id=self.account_id,
            activation_type=self.activation_type,
            contract_id=self.contract_id,
            group_id=self.group_id,
            hostname_activation_id=self.hostname_activation_id,
            hostnames=self.hostnames,
            id=self.id,
            include_hostnames=self.include_hostnames,
            network=self.network,
            note=self.note,
            notify_emails=self.notify_emails,
            property_id=self.property_id,
            property_name=self.property_name,
            status=self.status,
            submit_date=self.submit_date,
            update_date=self.update_date)


def get_property_hostname_activation(contract_id: Optional[builtins.str] = None,
                                     group_id: Optional[builtins.str] = None,
                                     hostname_activation_id: Optional[builtins.str] = None,
                                     include_hostnames: Optional[builtins.bool] = None,
                                     property_id: Optional[builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPropertyHostnameActivationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['contractId'] = contract_id
    __args__['groupId'] = group_id
    __args__['hostnameActivationId'] = hostname_activation_id
    __args__['includeHostnames'] = include_hostnames
    __args__['propertyId'] = property_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getPropertyHostnameActivation:getPropertyHostnameActivation', __args__, opts=opts, typ=GetPropertyHostnameActivationResult).value

    return AwaitableGetPropertyHostnameActivationResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        activation_type=pulumi.get(__ret__, 'activation_type'),
        contract_id=pulumi.get(__ret__, 'contract_id'),
        group_id=pulumi.get(__ret__, 'group_id'),
        hostname_activation_id=pulumi.get(__ret__, 'hostname_activation_id'),
        hostnames=pulumi.get(__ret__, 'hostnames'),
        id=pulumi.get(__ret__, 'id'),
        include_hostnames=pulumi.get(__ret__, 'include_hostnames'),
        network=pulumi.get(__ret__, 'network'),
        note=pulumi.get(__ret__, 'note'),
        notify_emails=pulumi.get(__ret__, 'notify_emails'),
        property_id=pulumi.get(__ret__, 'property_id'),
        property_name=pulumi.get(__ret__, 'property_name'),
        status=pulumi.get(__ret__, 'status'),
        submit_date=pulumi.get(__ret__, 'submit_date'),
        update_date=pulumi.get(__ret__, 'update_date'))
def get_property_hostname_activation_output(contract_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                            group_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                            hostname_activation_id: Optional[pulumi.Input[builtins.str]] = None,
                                            include_hostnames: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                                            property_id: Optional[pulumi.Input[builtins.str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPropertyHostnameActivationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['contractId'] = contract_id
    __args__['groupId'] = group_id
    __args__['hostnameActivationId'] = hostname_activation_id
    __args__['includeHostnames'] = include_hostnames
    __args__['propertyId'] = property_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getPropertyHostnameActivation:getPropertyHostnameActivation', __args__, opts=opts, typ=GetPropertyHostnameActivationResult)
    return __ret__.apply(lambda __response__: GetPropertyHostnameActivationResult(
        account_id=pulumi.get(__response__, 'account_id'),
        activation_type=pulumi.get(__response__, 'activation_type'),
        contract_id=pulumi.get(__response__, 'contract_id'),
        group_id=pulumi.get(__response__, 'group_id'),
        hostname_activation_id=pulumi.get(__response__, 'hostname_activation_id'),
        hostnames=pulumi.get(__response__, 'hostnames'),
        id=pulumi.get(__response__, 'id'),
        include_hostnames=pulumi.get(__response__, 'include_hostnames'),
        network=pulumi.get(__response__, 'network'),
        note=pulumi.get(__response__, 'note'),
        notify_emails=pulumi.get(__response__, 'notify_emails'),
        property_id=pulumi.get(__response__, 'property_id'),
        property_name=pulumi.get(__response__, 'property_name'),
        status=pulumi.get(__response__, 'status'),
        submit_date=pulumi.get(__response__, 'submit_date'),
        update_date=pulumi.get(__response__, 'update_date')))
