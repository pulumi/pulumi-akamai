# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetPropertyIncludeActivationResult',
    'AwaitableGetPropertyIncludeActivationResult',
    'get_property_include_activation',
    'get_property_include_activation_output',
]

@pulumi.output_type
class GetPropertyIncludeActivationResult:
    """
    A collection of values returned by getPropertyIncludeActivation.
    """
    def __init__(__self__, contract_id=None, group_id=None, id=None, include_id=None, name=None, network=None, note=None, notify_emails=None, version=None):
        if contract_id and not isinstance(contract_id, str):
            raise TypeError("Expected argument 'contract_id' to be a str")
        pulumi.set(__self__, "contract_id", contract_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_id and not isinstance(include_id, str):
            raise TypeError("Expected argument 'include_id' to be a str")
        pulumi.set(__self__, "include_id", include_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network and not isinstance(network, str):
            raise TypeError("Expected argument 'network' to be a str")
        pulumi.set(__self__, "network", network)
        if note and not isinstance(note, str):
            raise TypeError("Expected argument 'note' to be a str")
        pulumi.set(__self__, "note", note)
        if notify_emails and not isinstance(notify_emails, list):
            raise TypeError("Expected argument 'notify_emails' to be a list")
        pulumi.set(__self__, "notify_emails", notify_emails)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeId")
    def include_id(self) -> str:
        return pulumi.get(self, "include_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def note(self) -> str:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter(name="notifyEmails")
    def notify_emails(self) -> Sequence[str]:
        return pulumi.get(self, "notify_emails")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


class AwaitableGetPropertyIncludeActivationResult(GetPropertyIncludeActivationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPropertyIncludeActivationResult(
            contract_id=self.contract_id,
            group_id=self.group_id,
            id=self.id,
            include_id=self.include_id,
            name=self.name,
            network=self.network,
            note=self.note,
            notify_emails=self.notify_emails,
            version=self.version)


def get_property_include_activation(contract_id: Optional[str] = None,
                                    group_id: Optional[str] = None,
                                    include_id: Optional[str] = None,
                                    network: Optional[str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPropertyIncludeActivationResult:
    """
    Use the `PropertyIncludeActivation` data source to get activation details for an include on the provided network.

    ## Attributes reference

    This data source returns these attributes:

    * `version` - The version of the activated include.
    * `name` - The descriptive name for the property.
    * `note` - A log message assigned to the activation request.
    * `notify_emails` - The list of email addresses notified when the activation status changes.


    :param str contract_id: (Required) A contract's unique ID, including the optional `ctr_` prefix.
    :param str group_id: (Required) A group's unique ID, including the optional `grp_` prefix.
    :param str include_id: (Required) An include's unique ID with the optional `inc_` prefix.
    :param str network: (Required) The Akamai network where you want to check the activation details, either `STAGING` or `PRODUCTION`. `STAGING` is the default.
    """
    __args__ = dict()
    __args__['contractId'] = contract_id
    __args__['groupId'] = group_id
    __args__['includeId'] = include_id
    __args__['network'] = network
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getPropertyIncludeActivation:getPropertyIncludeActivation', __args__, opts=opts, typ=GetPropertyIncludeActivationResult).value

    return AwaitableGetPropertyIncludeActivationResult(
        contract_id=__ret__.contract_id,
        group_id=__ret__.group_id,
        id=__ret__.id,
        include_id=__ret__.include_id,
        name=__ret__.name,
        network=__ret__.network,
        note=__ret__.note,
        notify_emails=__ret__.notify_emails,
        version=__ret__.version)


@_utilities.lift_output_func(get_property_include_activation)
def get_property_include_activation_output(contract_id: Optional[pulumi.Input[str]] = None,
                                           group_id: Optional[pulumi.Input[str]] = None,
                                           include_id: Optional[pulumi.Input[str]] = None,
                                           network: Optional[pulumi.Input[str]] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPropertyIncludeActivationResult]:
    """
    Use the `PropertyIncludeActivation` data source to get activation details for an include on the provided network.

    ## Attributes reference

    This data source returns these attributes:

    * `version` - The version of the activated include.
    * `name` - The descriptive name for the property.
    * `note` - A log message assigned to the activation request.
    * `notify_emails` - The list of email addresses notified when the activation status changes.


    :param str contract_id: (Required) A contract's unique ID, including the optional `ctr_` prefix.
    :param str group_id: (Required) A group's unique ID, including the optional `grp_` prefix.
    :param str include_id: (Required) An include's unique ID with the optional `inc_` prefix.
    :param str network: (Required) The Akamai network where you want to check the activation details, either `STAGING` or `PRODUCTION`. `STAGING` is the default.
    """
    ...
