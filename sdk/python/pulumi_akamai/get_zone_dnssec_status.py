# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetZoneDnssecStatusResult',
    'AwaitableGetZoneDnssecStatusResult',
    'get_zone_dnssec_status',
    'get_zone_dnssec_status_output',
]

@pulumi.output_type
class GetZoneDnssecStatusResult:
    """
    A collection of values returned by getZoneDnssecStatus.
    """
    def __init__(__self__, alerts=None, current_records=None, id=None, new_records=None, zone=None):
        if alerts and not isinstance(alerts, list):
            raise TypeError("Expected argument 'alerts' to be a list")
        pulumi.set(__self__, "alerts", alerts)
        if current_records and not isinstance(current_records, dict):
            raise TypeError("Expected argument 'current_records' to be a dict")
        pulumi.set(__self__, "current_records", current_records)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if new_records and not isinstance(new_records, dict):
            raise TypeError("Expected argument 'new_records' to be a dict")
        pulumi.set(__self__, "new_records", new_records)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def alerts(self) -> Sequence[str]:
        return pulumi.get(self, "alerts")

    @property
    @pulumi.getter(name="currentRecords")
    def current_records(self) -> 'outputs.GetZoneDnssecStatusCurrentRecordsResult':
        return pulumi.get(self, "current_records")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="newRecords")
    def new_records(self) -> 'outputs.GetZoneDnssecStatusNewRecordsResult':
        return pulumi.get(self, "new_records")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


class AwaitableGetZoneDnssecStatusResult(GetZoneDnssecStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZoneDnssecStatusResult(
            alerts=self.alerts,
            current_records=self.current_records,
            id=self.id,
            new_records=self.new_records,
            zone=self.zone)


def get_zone_dnssec_status(zone: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZoneDnssecStatusResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getZoneDnssecStatus:getZoneDnssecStatus', __args__, opts=opts, typ=GetZoneDnssecStatusResult).value

    return AwaitableGetZoneDnssecStatusResult(
        alerts=pulumi.get(__ret__, 'alerts'),
        current_records=pulumi.get(__ret__, 'current_records'),
        id=pulumi.get(__ret__, 'id'),
        new_records=pulumi.get(__ret__, 'new_records'),
        zone=pulumi.get(__ret__, 'zone'))
def get_zone_dnssec_status_output(zone: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetZoneDnssecStatusResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['zone'] = zone
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getZoneDnssecStatus:getZoneDnssecStatus', __args__, opts=opts, typ=GetZoneDnssecStatusResult)
    return __ret__.apply(lambda __response__: GetZoneDnssecStatusResult(
        alerts=pulumi.get(__response__, 'alerts'),
        current_records=pulumi.get(__response__, 'current_records'),
        id=pulumi.get(__response__, 'id'),
        new_records=pulumi.get(__response__, 'new_records'),
        zone=pulumi.get(__response__, 'zone')))
