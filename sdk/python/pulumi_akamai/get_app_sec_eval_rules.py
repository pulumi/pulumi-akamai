# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAppSecEvalRulesResult',
    'AwaitableGetAppSecEvalRulesResult',
    'get_app_sec_eval_rules',
    'get_app_sec_eval_rules_output',
]

@pulumi.output_type
class GetAppSecEvalRulesResult:
    """
    A collection of values returned by getAppSecEvalRules.
    """
    def __init__(__self__, condition_exception=None, config_id=None, eval_rule_action=None, id=None, json=None, output_text=None, rule_id=None, security_policy_id=None):
        if condition_exception and not isinstance(condition_exception, str):
            raise TypeError("Expected argument 'condition_exception' to be a str")
        pulumi.set(__self__, "condition_exception", condition_exception)
        if config_id and not isinstance(config_id, int):
            raise TypeError("Expected argument 'config_id' to be a int")
        pulumi.set(__self__, "config_id", config_id)
        if eval_rule_action and not isinstance(eval_rule_action, str):
            raise TypeError("Expected argument 'eval_rule_action' to be a str")
        pulumi.set(__self__, "eval_rule_action", eval_rule_action)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if json and not isinstance(json, str):
            raise TypeError("Expected argument 'json' to be a str")
        pulumi.set(__self__, "json", json)
        if output_text and not isinstance(output_text, str):
            raise TypeError("Expected argument 'output_text' to be a str")
        pulumi.set(__self__, "output_text", output_text)
        if rule_id and not isinstance(rule_id, int):
            raise TypeError("Expected argument 'rule_id' to be a int")
        pulumi.set(__self__, "rule_id", rule_id)
        if security_policy_id and not isinstance(security_policy_id, str):
            raise TypeError("Expected argument 'security_policy_id' to be a str")
        pulumi.set(__self__, "security_policy_id", security_policy_id)

    @property
    @pulumi.getter(name="conditionException")
    def condition_exception(self) -> str:
        return pulumi.get(self, "condition_exception")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> int:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="evalRuleAction")
    def eval_rule_action(self) -> str:
        return pulumi.get(self, "eval_rule_action")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def json(self) -> str:
        return pulumi.get(self, "json")

    @property
    @pulumi.getter(name="outputText")
    def output_text(self) -> str:
        return pulumi.get(self, "output_text")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> str:
        return pulumi.get(self, "security_policy_id")


class AwaitableGetAppSecEvalRulesResult(GetAppSecEvalRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppSecEvalRulesResult(
            condition_exception=self.condition_exception,
            config_id=self.config_id,
            eval_rule_action=self.eval_rule_action,
            id=self.id,
            json=self.json,
            output_text=self.output_text,
            rule_id=self.rule_id,
            security_policy_id=self.security_policy_id)


def get_app_sec_eval_rules(config_id: Optional[int] = None,
                           rule_id: Optional[int] = None,
                           security_policy_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppSecEvalRulesResult:
    """
    **Scopes**: Security policy; evaluation rule

    Returns the action and the condition-exception information for a rule or set of rules being used in evaluation mode.

    **Related API Endpoint**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/security-policies/{policyId}/eval-rules](https://developer.akamai.com/api/cloud_security/application_security/v1.html#getevalrules)

    ## Example Usage

    Basic usage:

    ```python
    import pulumi
    import pulumi_akamai as akamai

    configuration = akamai.get_app_sec_configuration(name="Documentation")
    eval_rule = akamai.get_app_sec_eval_rules(config_id=configuration.config_id,
        security_policy_id="gms1_134637",
        rule_id=60029316)
    pulumi.export("evalRuleAction", eval_rule.eval_rule_action)
    pulumi.export("conditionException", eval_rule.condition_exception)
    pulumi.export("json", eval_rule.json)
    pulumi.export("outputText", eval_rule.output_text)
    ```
    ## Output Options

    The following options can be used to determine the information returned, and how that returned information is formatted:

    - `eval_rule_action`. Action taken anytime the evaluation rule is triggered. Valid values are:
      - **alert**. Record the event,
      - **deny**. Reject the request.
      - **deny_custom_{custom_deny_id}**. The action defined by the custom deny is taken.
      - **none**. Take no action.
    - `condition_exception`. Conditions and exceptions associated with the rule.
    - `json`. JSON-formatted list of the action and the condition-exception information for the rule. This output is only generated if the `rule_id` argument is included.
    - `output_text`. Tabular report showing the rule action as well as Boolean values indicating whether conditions and exceptions have been configured for the rule.


    :param int config_id: . Unique identifier of the security configuration running in evaluation mode.
    :param int rule_id: . Unique identifier of the evaluation rule you want to return information for. If not included, information is returned for all your evaluation rules.
    :param str security_policy_id: . Unique identifier of the security policy associated with the evaluation rule.
    """
    __args__ = dict()
    __args__['configId'] = config_id
    __args__['ruleId'] = rule_id
    __args__['securityPolicyId'] = security_policy_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('akamai:index/getAppSecEvalRules:getAppSecEvalRules', __args__, opts=opts, typ=GetAppSecEvalRulesResult).value

    return AwaitableGetAppSecEvalRulesResult(
        condition_exception=__ret__.condition_exception,
        config_id=__ret__.config_id,
        eval_rule_action=__ret__.eval_rule_action,
        id=__ret__.id,
        json=__ret__.json,
        output_text=__ret__.output_text,
        rule_id=__ret__.rule_id,
        security_policy_id=__ret__.security_policy_id)


@_utilities.lift_output_func(get_app_sec_eval_rules)
def get_app_sec_eval_rules_output(config_id: Optional[pulumi.Input[int]] = None,
                                  rule_id: Optional[pulumi.Input[Optional[int]]] = None,
                                  security_policy_id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAppSecEvalRulesResult]:
    """
    **Scopes**: Security policy; evaluation rule

    Returns the action and the condition-exception information for a rule or set of rules being used in evaluation mode.

    **Related API Endpoint**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/security-policies/{policyId}/eval-rules](https://developer.akamai.com/api/cloud_security/application_security/v1.html#getevalrules)

    ## Example Usage

    Basic usage:

    ```python
    import pulumi
    import pulumi_akamai as akamai

    configuration = akamai.get_app_sec_configuration(name="Documentation")
    eval_rule = akamai.get_app_sec_eval_rules(config_id=configuration.config_id,
        security_policy_id="gms1_134637",
        rule_id=60029316)
    pulumi.export("evalRuleAction", eval_rule.eval_rule_action)
    pulumi.export("conditionException", eval_rule.condition_exception)
    pulumi.export("json", eval_rule.json)
    pulumi.export("outputText", eval_rule.output_text)
    ```
    ## Output Options

    The following options can be used to determine the information returned, and how that returned information is formatted:

    - `eval_rule_action`. Action taken anytime the evaluation rule is triggered. Valid values are:
      - **alert**. Record the event,
      - **deny**. Reject the request.
      - **deny_custom_{custom_deny_id}**. The action defined by the custom deny is taken.
      - **none**. Take no action.
    - `condition_exception`. Conditions and exceptions associated with the rule.
    - `json`. JSON-formatted list of the action and the condition-exception information for the rule. This output is only generated if the `rule_id` argument is included.
    - `output_text`. Tabular report showing the rule action as well as Boolean values indicating whether conditions and exceptions have been configured for the rule.


    :param int config_id: . Unique identifier of the security configuration running in evaluation mode.
    :param int rule_id: . Unique identifier of the evaluation rule you want to return information for. If not included, information is returned for all your evaluation rules.
    :param str security_policy_id: . Unique identifier of the security policy associated with the evaluation rule.
    """
    ...
