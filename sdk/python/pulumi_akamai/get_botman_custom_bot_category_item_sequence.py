# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetBotmanCustomBotCategoryItemSequenceResult',
    'AwaitableGetBotmanCustomBotCategoryItemSequenceResult',
    'get_botman_custom_bot_category_item_sequence',
    'get_botman_custom_bot_category_item_sequence_output',
]

@pulumi.output_type
class GetBotmanCustomBotCategoryItemSequenceResult:
    """
    A collection of values returned by getBotmanCustomBotCategoryItemSequence.
    """
    def __init__(__self__, bot_ids=None, category_id=None, config_id=None, id=None):
        if bot_ids and not isinstance(bot_ids, list):
            raise TypeError("Expected argument 'bot_ids' to be a list")
        pulumi.set(__self__, "bot_ids", bot_ids)
        if category_id and not isinstance(category_id, str):
            raise TypeError("Expected argument 'category_id' to be a str")
        pulumi.set(__self__, "category_id", category_id)
        if config_id and not isinstance(config_id, int):
            raise TypeError("Expected argument 'config_id' to be a int")
        pulumi.set(__self__, "config_id", config_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="botIds")
    def bot_ids(self) -> Sequence[str]:
        return pulumi.get(self, "bot_ids")

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> str:
        return pulumi.get(self, "category_id")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> int:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetBotmanCustomBotCategoryItemSequenceResult(GetBotmanCustomBotCategoryItemSequenceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBotmanCustomBotCategoryItemSequenceResult(
            bot_ids=self.bot_ids,
            category_id=self.category_id,
            config_id=self.config_id,
            id=self.id)


def get_botman_custom_bot_category_item_sequence(category_id: Optional[str] = None,
                                                 config_id: Optional[int] = None,
                                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBotmanCustomBotCategoryItemSequenceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['categoryId'] = category_id
    __args__['configId'] = config_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getBotmanCustomBotCategoryItemSequence:getBotmanCustomBotCategoryItemSequence', __args__, opts=opts, typ=GetBotmanCustomBotCategoryItemSequenceResult).value

    return AwaitableGetBotmanCustomBotCategoryItemSequenceResult(
        bot_ids=pulumi.get(__ret__, 'bot_ids'),
        category_id=pulumi.get(__ret__, 'category_id'),
        config_id=pulumi.get(__ret__, 'config_id'),
        id=pulumi.get(__ret__, 'id'))
def get_botman_custom_bot_category_item_sequence_output(category_id: Optional[pulumi.Input[str]] = None,
                                                        config_id: Optional[pulumi.Input[int]] = None,
                                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBotmanCustomBotCategoryItemSequenceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['categoryId'] = category_id
    __args__['configId'] = config_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getBotmanCustomBotCategoryItemSequence:getBotmanCustomBotCategoryItemSequence', __args__, opts=opts, typ=GetBotmanCustomBotCategoryItemSequenceResult)
    return __ret__.apply(lambda __response__: GetBotmanCustomBotCategoryItemSequenceResult(
        bot_ids=pulumi.get(__response__, 'bot_ids'),
        category_id=pulumi.get(__response__, 'category_id'),
        config_id=pulumi.get(__response__, 'config_id'),
        id=pulumi.get(__response__, 'id')))
