# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetPropertyIncludesResult',
    'AwaitableGetPropertyIncludesResult',
    'get_property_includes',
    'get_property_includes_output',
]

@pulumi.output_type
class GetPropertyIncludesResult:
    """
    A collection of values returned by getPropertyIncludes.
    """
    def __init__(__self__, contract_id=None, group_id=None, id=None, includes=None, parent_property=None, type=None):
        if contract_id and not isinstance(contract_id, str):
            raise TypeError("Expected argument 'contract_id' to be a str")
        pulumi.set(__self__, "contract_id", contract_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if includes and not isinstance(includes, list):
            raise TypeError("Expected argument 'includes' to be a list")
        pulumi.set(__self__, "includes", includes)
        if parent_property and not isinstance(parent_property, dict):
            raise TypeError("Expected argument 'parent_property' to be a dict")
        pulumi.set(__self__, "parent_property", parent_property)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def includes(self) -> Sequence['outputs.GetPropertyIncludesIncludeResult']:
        return pulumi.get(self, "includes")

    @property
    @pulumi.getter(name="parentProperty")
    def parent_property(self) -> Optional['outputs.GetPropertyIncludesParentPropertyResult']:
        return pulumi.get(self, "parent_property")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


class AwaitableGetPropertyIncludesResult(GetPropertyIncludesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPropertyIncludesResult(
            contract_id=self.contract_id,
            group_id=self.group_id,
            id=self.id,
            includes=self.includes,
            parent_property=self.parent_property,
            type=self.type)


def get_property_includes(contract_id: Optional[str] = None,
                          group_id: Optional[str] = None,
                          parent_property: Optional[pulumi.InputType['GetPropertyIncludesParentPropertyArgs']] = None,
                          type: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPropertyIncludesResult:
    """
    Use the `get_property_includes` data source to get all includes available for the current contract and group. Includes are small, reusable, and configurable components for your properties.

    ## Basic usage

    This example returns all includes for the specified contract and group:

    ```python
    import pulumi
    import pulumi_akamai as akamai

    my_example_property_includes = akamai.get_property_includes(contract_id="ctr_1-AB123",
        group_id="grp_12345")
    pulumi.export("myExample", my_example_property_includes)
    ```

    ## Attributes reference

    This data source returns these attributes:

    * `includes` -  The small, reusable, configurable components for your properties.
     * `latest_version` - Returns the most recent version of the include.
     * `staging_version` - The include version currently activated on the staging network.
     * `production_version` - The include version currently activated on the production network.
     * `id` - The include's unique identifier.
     * `name` - The descriptive name for the include.
     * `type` - Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`.


    :param str contract_id: (Required) A contract's unique ID, including the optional `ctr_` prefix.
    :param str group_id: (Required) A group's unique ID, including the optional `grp_` prefix.
    :param pulumi.InputType['GetPropertyIncludesParentPropertyArgs'] parent_property: (Optional) The property that references the includes you want to list.
    :param str type: (Optional) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
    """
    __args__ = dict()
    __args__['contractId'] = contract_id
    __args__['groupId'] = group_id
    __args__['parentProperty'] = parent_property
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getPropertyIncludes:getPropertyIncludes', __args__, opts=opts, typ=GetPropertyIncludesResult).value

    return AwaitableGetPropertyIncludesResult(
        contract_id=__ret__.contract_id,
        group_id=__ret__.group_id,
        id=__ret__.id,
        includes=__ret__.includes,
        parent_property=__ret__.parent_property,
        type=__ret__.type)


@_utilities.lift_output_func(get_property_includes)
def get_property_includes_output(contract_id: Optional[pulumi.Input[str]] = None,
                                 group_id: Optional[pulumi.Input[str]] = None,
                                 parent_property: Optional[pulumi.Input[Optional[pulumi.InputType['GetPropertyIncludesParentPropertyArgs']]]] = None,
                                 type: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPropertyIncludesResult]:
    """
    Use the `get_property_includes` data source to get all includes available for the current contract and group. Includes are small, reusable, and configurable components for your properties.

    ## Basic usage

    This example returns all includes for the specified contract and group:

    ```python
    import pulumi
    import pulumi_akamai as akamai

    my_example_property_includes = akamai.get_property_includes(contract_id="ctr_1-AB123",
        group_id="grp_12345")
    pulumi.export("myExample", my_example_property_includes)
    ```

    ## Attributes reference

    This data source returns these attributes:

    * `includes` -  The small, reusable, configurable components for your properties.
     * `latest_version` - Returns the most recent version of the include.
     * `staging_version` - The include version currently activated on the staging network.
     * `production_version` - The include version currently activated on the production network.
     * `id` - The include's unique identifier.
     * `name` - The descriptive name for the include.
     * `type` - Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`.


    :param str contract_id: (Required) A contract's unique ID, including the optional `ctr_` prefix.
    :param str group_id: (Required) A group's unique ID, including the optional `grp_` prefix.
    :param pulumi.InputType['GetPropertyIncludesParentPropertyArgs'] parent_property: (Optional) The property that references the includes you want to list.
    :param str type: (Optional) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
    """
    ...
