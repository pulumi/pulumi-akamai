# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAppSecSelectableHostnamesResult',
    'AwaitableGetAppSecSelectableHostnamesResult',
    'get_app_sec_selectable_hostnames',
    'get_app_sec_selectable_hostnames_output',
]

@pulumi.output_type
class GetAppSecSelectableHostnamesResult:
    """
    A collection of values returned by getAppSecSelectableHostnames.
    """
    def __init__(__self__, active_in_production=None, active_in_staging=None, config_id=None, contractid=None, groupid=None, hostnames=None, hostnames_json=None, id=None, output_text=None):
        if active_in_production and not isinstance(active_in_production, bool):
            raise TypeError("Expected argument 'active_in_production' to be a bool")
        pulumi.set(__self__, "active_in_production", active_in_production)
        if active_in_staging and not isinstance(active_in_staging, bool):
            raise TypeError("Expected argument 'active_in_staging' to be a bool")
        pulumi.set(__self__, "active_in_staging", active_in_staging)
        if config_id and not isinstance(config_id, int):
            raise TypeError("Expected argument 'config_id' to be a int")
        pulumi.set(__self__, "config_id", config_id)
        if contractid and not isinstance(contractid, str):
            raise TypeError("Expected argument 'contractid' to be a str")
        pulumi.set(__self__, "contractid", contractid)
        if groupid and not isinstance(groupid, int):
            raise TypeError("Expected argument 'groupid' to be a int")
        pulumi.set(__self__, "groupid", groupid)
        if hostnames and not isinstance(hostnames, list):
            raise TypeError("Expected argument 'hostnames' to be a list")
        pulumi.set(__self__, "hostnames", hostnames)
        if hostnames_json and not isinstance(hostnames_json, str):
            raise TypeError("Expected argument 'hostnames_json' to be a str")
        pulumi.set(__self__, "hostnames_json", hostnames_json)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if output_text and not isinstance(output_text, str):
            raise TypeError("Expected argument 'output_text' to be a str")
        pulumi.set(__self__, "output_text", output_text)

    @property
    @pulumi.getter(name="activeInProduction")
    def active_in_production(self) -> Optional[bool]:
        return pulumi.get(self, "active_in_production")

    @property
    @pulumi.getter(name="activeInStaging")
    def active_in_staging(self) -> Optional[bool]:
        return pulumi.get(self, "active_in_staging")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[int]:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter
    def contractid(self) -> Optional[str]:
        return pulumi.get(self, "contractid")

    @property
    @pulumi.getter
    def groupid(self) -> Optional[int]:
        return pulumi.get(self, "groupid")

    @property
    @pulumi.getter
    def hostnames(self) -> Sequence[str]:
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter(name="hostnamesJson")
    def hostnames_json(self) -> str:
        return pulumi.get(self, "hostnames_json")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="outputText")
    def output_text(self) -> str:
        return pulumi.get(self, "output_text")


class AwaitableGetAppSecSelectableHostnamesResult(GetAppSecSelectableHostnamesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppSecSelectableHostnamesResult(
            active_in_production=self.active_in_production,
            active_in_staging=self.active_in_staging,
            config_id=self.config_id,
            contractid=self.contractid,
            groupid=self.groupid,
            hostnames=self.hostnames,
            hostnames_json=self.hostnames_json,
            id=self.id,
            output_text=self.output_text)


def get_app_sec_selectable_hostnames(active_in_production: Optional[bool] = None,
                                     active_in_staging: Optional[bool] = None,
                                     config_id: Optional[int] = None,
                                     contractid: Optional[str] = None,
                                     groupid: Optional[int] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppSecSelectableHostnamesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['activeInProduction'] = active_in_production
    __args__['activeInStaging'] = active_in_staging
    __args__['configId'] = config_id
    __args__['contractid'] = contractid
    __args__['groupid'] = groupid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getAppSecSelectableHostnames:getAppSecSelectableHostnames', __args__, opts=opts, typ=GetAppSecSelectableHostnamesResult).value

    return AwaitableGetAppSecSelectableHostnamesResult(
        active_in_production=pulumi.get(__ret__, 'active_in_production'),
        active_in_staging=pulumi.get(__ret__, 'active_in_staging'),
        config_id=pulumi.get(__ret__, 'config_id'),
        contractid=pulumi.get(__ret__, 'contractid'),
        groupid=pulumi.get(__ret__, 'groupid'),
        hostnames=pulumi.get(__ret__, 'hostnames'),
        hostnames_json=pulumi.get(__ret__, 'hostnames_json'),
        id=pulumi.get(__ret__, 'id'),
        output_text=pulumi.get(__ret__, 'output_text'))


@_utilities.lift_output_func(get_app_sec_selectable_hostnames)
def get_app_sec_selectable_hostnames_output(active_in_production: Optional[pulumi.Input[Optional[bool]]] = None,
                                            active_in_staging: Optional[pulumi.Input[Optional[bool]]] = None,
                                            config_id: Optional[pulumi.Input[Optional[int]]] = None,
                                            contractid: Optional[pulumi.Input[Optional[str]]] = None,
                                            groupid: Optional[pulumi.Input[Optional[int]]] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAppSecSelectableHostnamesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
