# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetEdgeWorkersResourceTierResult',
    'AwaitableGetEdgeWorkersResourceTierResult',
    'get_edge_workers_resource_tier',
    'get_edge_workers_resource_tier_output',
]

@pulumi.output_type
class GetEdgeWorkersResourceTierResult:
    """
    A collection of values returned by getEdgeWorkersResourceTier.
    """
    def __init__(__self__, contract_id=None, id=None, resource_tier_id=None, resource_tier_name=None):
        if contract_id and not isinstance(contract_id, str):
            raise TypeError("Expected argument 'contract_id' to be a str")
        pulumi.set(__self__, "contract_id", contract_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if resource_tier_id and not isinstance(resource_tier_id, int):
            raise TypeError("Expected argument 'resource_tier_id' to be a int")
        pulumi.set(__self__, "resource_tier_id", resource_tier_id)
        if resource_tier_name and not isinstance(resource_tier_name, str):
            raise TypeError("Expected argument 'resource_tier_name' to be a str")
        pulumi.set(__self__, "resource_tier_name", resource_tier_name)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resourceTierId")
    def resource_tier_id(self) -> int:
        return pulumi.get(self, "resource_tier_id")

    @property
    @pulumi.getter(name="resourceTierName")
    def resource_tier_name(self) -> str:
        return pulumi.get(self, "resource_tier_name")


class AwaitableGetEdgeWorkersResourceTierResult(GetEdgeWorkersResourceTierResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEdgeWorkersResourceTierResult(
            contract_id=self.contract_id,
            id=self.id,
            resource_tier_id=self.resource_tier_id,
            resource_tier_name=self.resource_tier_name)


def get_edge_workers_resource_tier(contract_id: Optional[str] = None,
                                   resource_tier_name: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEdgeWorkersResourceTierResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['contractId'] = contract_id
    __args__['resourceTierName'] = resource_tier_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getEdgeWorkersResourceTier:getEdgeWorkersResourceTier', __args__, opts=opts, typ=GetEdgeWorkersResourceTierResult).value

    return AwaitableGetEdgeWorkersResourceTierResult(
        contract_id=pulumi.get(__ret__, 'contract_id'),
        id=pulumi.get(__ret__, 'id'),
        resource_tier_id=pulumi.get(__ret__, 'resource_tier_id'),
        resource_tier_name=pulumi.get(__ret__, 'resource_tier_name'))


@_utilities.lift_output_func(get_edge_workers_resource_tier)
def get_edge_workers_resource_tier_output(contract_id: Optional[pulumi.Input[str]] = None,
                                          resource_tier_name: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEdgeWorkersResourceTierResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
