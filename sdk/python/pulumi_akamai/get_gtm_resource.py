# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetGtmResourceResult',
    'AwaitableGetGtmResourceResult',
    'get_gtm_resource',
    'get_gtm_resource_output',
]

@pulumi.output_type
class GetGtmResourceResult:
    """
    A collection of values returned by getGtmResource.
    """
    def __init__(__self__, aggregation_type=None, constrained_property=None, decay_rate=None, description=None, domain=None, host_header=None, id=None, leader_string=None, least_squares_decay=None, links=None, load_imbalance_percentage=None, max_u_multiplicative_increment=None, resource_instances=None, resource_name=None, type=None, upper_bound=None):
        if aggregation_type and not isinstance(aggregation_type, str):
            raise TypeError("Expected argument 'aggregation_type' to be a str")
        pulumi.set(__self__, "aggregation_type", aggregation_type)
        if constrained_property and not isinstance(constrained_property, str):
            raise TypeError("Expected argument 'constrained_property' to be a str")
        pulumi.set(__self__, "constrained_property", constrained_property)
        if decay_rate and not isinstance(decay_rate, float):
            raise TypeError("Expected argument 'decay_rate' to be a float")
        pulumi.set(__self__, "decay_rate", decay_rate)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if host_header and not isinstance(host_header, str):
            raise TypeError("Expected argument 'host_header' to be a str")
        pulumi.set(__self__, "host_header", host_header)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if leader_string and not isinstance(leader_string, str):
            raise TypeError("Expected argument 'leader_string' to be a str")
        pulumi.set(__self__, "leader_string", leader_string)
        if least_squares_decay and not isinstance(least_squares_decay, float):
            raise TypeError("Expected argument 'least_squares_decay' to be a float")
        pulumi.set(__self__, "least_squares_decay", least_squares_decay)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if load_imbalance_percentage and not isinstance(load_imbalance_percentage, float):
            raise TypeError("Expected argument 'load_imbalance_percentage' to be a float")
        pulumi.set(__self__, "load_imbalance_percentage", load_imbalance_percentage)
        if max_u_multiplicative_increment and not isinstance(max_u_multiplicative_increment, float):
            raise TypeError("Expected argument 'max_u_multiplicative_increment' to be a float")
        pulumi.set(__self__, "max_u_multiplicative_increment", max_u_multiplicative_increment)
        if resource_instances and not isinstance(resource_instances, list):
            raise TypeError("Expected argument 'resource_instances' to be a list")
        pulumi.set(__self__, "resource_instances", resource_instances)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if upper_bound and not isinstance(upper_bound, int):
            raise TypeError("Expected argument 'upper_bound' to be a int")
        pulumi.set(__self__, "upper_bound", upper_bound)

    @property
    @pulumi.getter(name="aggregationType")
    def aggregation_type(self) -> str:
        return pulumi.get(self, "aggregation_type")

    @property
    @pulumi.getter(name="constrainedProperty")
    def constrained_property(self) -> str:
        return pulumi.get(self, "constrained_property")

    @property
    @pulumi.getter(name="decayRate")
    def decay_rate(self) -> float:
        return pulumi.get(self, "decay_rate")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> str:
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="leaderString")
    def leader_string(self) -> str:
        return pulumi.get(self, "leader_string")

    @property
    @pulumi.getter(name="leastSquaresDecay")
    def least_squares_decay(self) -> float:
        return pulumi.get(self, "least_squares_decay")

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['outputs.GetGtmResourceLinkResult']]:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter(name="loadImbalancePercentage")
    def load_imbalance_percentage(self) -> float:
        return pulumi.get(self, "load_imbalance_percentage")

    @property
    @pulumi.getter(name="maxUMultiplicativeIncrement")
    def max_u_multiplicative_increment(self) -> float:
        return pulumi.get(self, "max_u_multiplicative_increment")

    @property
    @pulumi.getter(name="resourceInstances")
    def resource_instances(self) -> Optional[Sequence['outputs.GetGtmResourceResourceInstanceResult']]:
        return pulumi.get(self, "resource_instances")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> int:
        return pulumi.get(self, "upper_bound")


class AwaitableGetGtmResourceResult(GetGtmResourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGtmResourceResult(
            aggregation_type=self.aggregation_type,
            constrained_property=self.constrained_property,
            decay_rate=self.decay_rate,
            description=self.description,
            domain=self.domain,
            host_header=self.host_header,
            id=self.id,
            leader_string=self.leader_string,
            least_squares_decay=self.least_squares_decay,
            links=self.links,
            load_imbalance_percentage=self.load_imbalance_percentage,
            max_u_multiplicative_increment=self.max_u_multiplicative_increment,
            resource_instances=self.resource_instances,
            resource_name=self.resource_name,
            type=self.type,
            upper_bound=self.upper_bound)


def get_gtm_resource(domain: Optional[str] = None,
                     links: Optional[Sequence[pulumi.InputType['GetGtmResourceLinkArgs']]] = None,
                     resource_instances: Optional[Sequence[pulumi.InputType['GetGtmResourceResourceInstanceArgs']]] = None,
                     resource_name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGtmResourceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['links'] = links
    __args__['resourceInstances'] = resource_instances
    __args__['resourceName'] = resource_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getGtmResource:getGtmResource', __args__, opts=opts, typ=GetGtmResourceResult).value

    return AwaitableGetGtmResourceResult(
        aggregation_type=pulumi.get(__ret__, 'aggregation_type'),
        constrained_property=pulumi.get(__ret__, 'constrained_property'),
        decay_rate=pulumi.get(__ret__, 'decay_rate'),
        description=pulumi.get(__ret__, 'description'),
        domain=pulumi.get(__ret__, 'domain'),
        host_header=pulumi.get(__ret__, 'host_header'),
        id=pulumi.get(__ret__, 'id'),
        leader_string=pulumi.get(__ret__, 'leader_string'),
        least_squares_decay=pulumi.get(__ret__, 'least_squares_decay'),
        links=pulumi.get(__ret__, 'links'),
        load_imbalance_percentage=pulumi.get(__ret__, 'load_imbalance_percentage'),
        max_u_multiplicative_increment=pulumi.get(__ret__, 'max_u_multiplicative_increment'),
        resource_instances=pulumi.get(__ret__, 'resource_instances'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        type=pulumi.get(__ret__, 'type'),
        upper_bound=pulumi.get(__ret__, 'upper_bound'))


@_utilities.lift_output_func(get_gtm_resource)
def get_gtm_resource_output(domain: Optional[pulumi.Input[str]] = None,
                            links: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetGtmResourceLinkArgs']]]]] = None,
                            resource_instances: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetGtmResourceResourceInstanceArgs']]]]] = None,
                            resource_name: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGtmResourceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
