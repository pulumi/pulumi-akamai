# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAppSecRatePolicyActionsResult',
    'AwaitableGetAppSecRatePolicyActionsResult',
    'get_app_sec_rate_policy_actions',
    'get_app_sec_rate_policy_actions_output',
]

@pulumi.output_type
class GetAppSecRatePolicyActionsResult:
    """
    A collection of values returned by getAppSecRatePolicyActions.
    """
    def __init__(__self__, config_id=None, id=None, output_text=None, rate_policy_id=None, security_policy_id=None):
        if config_id and not isinstance(config_id, int):
            raise TypeError("Expected argument 'config_id' to be a int")
        pulumi.set(__self__, "config_id", config_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if output_text and not isinstance(output_text, str):
            raise TypeError("Expected argument 'output_text' to be a str")
        pulumi.set(__self__, "output_text", output_text)
        if rate_policy_id and not isinstance(rate_policy_id, int):
            raise TypeError("Expected argument 'rate_policy_id' to be a int")
        pulumi.set(__self__, "rate_policy_id", rate_policy_id)
        if security_policy_id and not isinstance(security_policy_id, str):
            raise TypeError("Expected argument 'security_policy_id' to be a str")
        pulumi.set(__self__, "security_policy_id", security_policy_id)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> int:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="outputText")
    def output_text(self) -> str:
        return pulumi.get(self, "output_text")

    @property
    @pulumi.getter(name="ratePolicyId")
    def rate_policy_id(self) -> Optional[int]:
        return pulumi.get(self, "rate_policy_id")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> str:
        return pulumi.get(self, "security_policy_id")


class AwaitableGetAppSecRatePolicyActionsResult(GetAppSecRatePolicyActionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppSecRatePolicyActionsResult(
            config_id=self.config_id,
            id=self.id,
            output_text=self.output_text,
            rate_policy_id=self.rate_policy_id,
            security_policy_id=self.security_policy_id)


def get_app_sec_rate_policy_actions(config_id: Optional[int] = None,
                                    rate_policy_id: Optional[int] = None,
                                    security_policy_id: Optional[str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppSecRatePolicyActionsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['configId'] = config_id
    __args__['ratePolicyId'] = rate_policy_id
    __args__['securityPolicyId'] = security_policy_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getAppSecRatePolicyActions:getAppSecRatePolicyActions', __args__, opts=opts, typ=GetAppSecRatePolicyActionsResult).value

    return AwaitableGetAppSecRatePolicyActionsResult(
        config_id=pulumi.get(__ret__, 'config_id'),
        id=pulumi.get(__ret__, 'id'),
        output_text=pulumi.get(__ret__, 'output_text'),
        rate_policy_id=pulumi.get(__ret__, 'rate_policy_id'),
        security_policy_id=pulumi.get(__ret__, 'security_policy_id'))


@_utilities.lift_output_func(get_app_sec_rate_policy_actions)
def get_app_sec_rate_policy_actions_output(config_id: Optional[pulumi.Input[int]] = None,
                                           rate_policy_id: Optional[pulumi.Input[Optional[int]]] = None,
                                           security_policy_id: Optional[pulumi.Input[str]] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAppSecRatePolicyActionsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
