# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAppSecTuningRecommendationsResult',
    'AwaitableGetAppSecTuningRecommendationsResult',
    'get_app_sec_tuning_recommendations',
    'get_app_sec_tuning_recommendations_output',
]

@pulumi.output_type
class GetAppSecTuningRecommendationsResult:
    """
    A collection of values returned by getAppSecTuningRecommendations.
    """
    def __init__(__self__, attack_group=None, config_id=None, id=None, json=None, rule_id=None, ruleset_type=None, security_policy_id=None):
        if attack_group and not isinstance(attack_group, str):
            raise TypeError("Expected argument 'attack_group' to be a str")
        pulumi.set(__self__, "attack_group", attack_group)
        if config_id and not isinstance(config_id, int):
            raise TypeError("Expected argument 'config_id' to be a int")
        pulumi.set(__self__, "config_id", config_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if json and not isinstance(json, str):
            raise TypeError("Expected argument 'json' to be a str")
        pulumi.set(__self__, "json", json)
        if rule_id and not isinstance(rule_id, int):
            raise TypeError("Expected argument 'rule_id' to be a int")
        pulumi.set(__self__, "rule_id", rule_id)
        if ruleset_type and not isinstance(ruleset_type, str):
            raise TypeError("Expected argument 'ruleset_type' to be a str")
        pulumi.set(__self__, "ruleset_type", ruleset_type)
        if security_policy_id and not isinstance(security_policy_id, str):
            raise TypeError("Expected argument 'security_policy_id' to be a str")
        pulumi.set(__self__, "security_policy_id", security_policy_id)

    @property
    @pulumi.getter(name="attackGroup")
    def attack_group(self) -> Optional[str]:
        return pulumi.get(self, "attack_group")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> int:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def json(self) -> str:
        return pulumi.get(self, "json")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="rulesetType")
    def ruleset_type(self) -> Optional[str]:
        return pulumi.get(self, "ruleset_type")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "security_policy_id")


class AwaitableGetAppSecTuningRecommendationsResult(GetAppSecTuningRecommendationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppSecTuningRecommendationsResult(
            attack_group=self.attack_group,
            config_id=self.config_id,
            id=self.id,
            json=self.json,
            rule_id=self.rule_id,
            ruleset_type=self.ruleset_type,
            security_policy_id=self.security_policy_id)


def get_app_sec_tuning_recommendations(attack_group: Optional[str] = None,
                                       config_id: Optional[int] = None,
                                       rule_id: Optional[int] = None,
                                       ruleset_type: Optional[str] = None,
                                       security_policy_id: Optional[str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppSecTuningRecommendationsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attackGroup'] = attack_group
    __args__['configId'] = config_id
    __args__['ruleId'] = rule_id
    __args__['rulesetType'] = ruleset_type
    __args__['securityPolicyId'] = security_policy_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getAppSecTuningRecommendations:getAppSecTuningRecommendations', __args__, opts=opts, typ=GetAppSecTuningRecommendationsResult).value

    return AwaitableGetAppSecTuningRecommendationsResult(
        attack_group=pulumi.get(__ret__, 'attack_group'),
        config_id=pulumi.get(__ret__, 'config_id'),
        id=pulumi.get(__ret__, 'id'),
        json=pulumi.get(__ret__, 'json'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        ruleset_type=pulumi.get(__ret__, 'ruleset_type'),
        security_policy_id=pulumi.get(__ret__, 'security_policy_id'))


@_utilities.lift_output_func(get_app_sec_tuning_recommendations)
def get_app_sec_tuning_recommendations_output(attack_group: Optional[pulumi.Input[Optional[str]]] = None,
                                              config_id: Optional[pulumi.Input[int]] = None,
                                              rule_id: Optional[pulumi.Input[Optional[int]]] = None,
                                              ruleset_type: Optional[pulumi.Input[Optional[str]]] = None,
                                              security_policy_id: Optional[pulumi.Input[Optional[str]]] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAppSecTuningRecommendationsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
