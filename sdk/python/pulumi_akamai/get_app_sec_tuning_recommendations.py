# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAppSecTuningRecommendationsResult',
    'AwaitableGetAppSecTuningRecommendationsResult',
    'get_app_sec_tuning_recommendations',
    'get_app_sec_tuning_recommendations_output',
]

@pulumi.output_type
class GetAppSecTuningRecommendationsResult:
    """
    A collection of values returned by getAppSecTuningRecommendations.
    """
    def __init__(__self__, attack_group=None, config_id=None, id=None, json=None, security_policy_id=None):
        if attack_group and not isinstance(attack_group, str):
            raise TypeError("Expected argument 'attack_group' to be a str")
        pulumi.set(__self__, "attack_group", attack_group)
        if config_id and not isinstance(config_id, int):
            raise TypeError("Expected argument 'config_id' to be a int")
        pulumi.set(__self__, "config_id", config_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if json and not isinstance(json, str):
            raise TypeError("Expected argument 'json' to be a str")
        pulumi.set(__self__, "json", json)
        if security_policy_id and not isinstance(security_policy_id, str):
            raise TypeError("Expected argument 'security_policy_id' to be a str")
        pulumi.set(__self__, "security_policy_id", security_policy_id)

    @property
    @pulumi.getter(name="attackGroup")
    def attack_group(self) -> Optional[str]:
        return pulumi.get(self, "attack_group")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> int:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def json(self) -> str:
        """
        JSON-formatted list of the tuning recommendations for the security policy or the attack group. The exception block format in a recommendation conforms to the exception block format used in `condition_exception` element of `attack_group` resource.
        """
        return pulumi.get(self, "json")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "security_policy_id")


class AwaitableGetAppSecTuningRecommendationsResult(GetAppSecTuningRecommendationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppSecTuningRecommendationsResult(
            attack_group=self.attack_group,
            config_id=self.config_id,
            id=self.id,
            json=self.json,
            security_policy_id=self.security_policy_id)


def get_app_sec_tuning_recommendations(attack_group: Optional[str] = None,
                                       config_id: Optional[int] = None,
                                       security_policy_id: Optional[str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppSecTuningRecommendationsResult:
    """
    Returns tuning recommendations for the specified attack group (or, if the `attack_group` argument is not included, returns tuning recommendations for all the attack groups in the specified security policy).
    Tuning recommendations help minimize the number of false positives triggered by a security policy. With a false positive, a client request is marked as having violated the security policy restrictions even though it actually did not.
    Tuning recommendations are returned as attack group exceptions: if you choose, you can copy the response and use the `AppSecAttackGroup` resource to add the recommended exception to a security policy or attack group.
    If the data source response is empty, that means that there are no further recommendations for tuning your security policy or attack group.
    If you need, you can manually merge a recommended exception for an attack group with the exception previously configured in the attack group resource.
    You can find additional information in our [Application Security API v1 documentation](https://developer.akamai.com/api/cloud_security/application_security/v1.html#getrecommendations).

    ## Example Usage

    Basic usage:

    ```python
    import pulumi
    import pulumi_akamai as akamai

    configuration = akamai.get_app_sec_configuration(name=var["security_configuration"])
    policy_recommendations = akamai.get_app_sec_tuning_recommendations(config_id=configuration.config_id,
        security_policy_id=var["security_policy_id"])
    pulumi.export("policyRecommendationsJson", policy_recommendations.json)
    attack_group_recommendations = akamai.get_app_sec_tuning_recommendations(config_id=configuration.config_id,
        security_policy_id=var["security_policy_id"],
        attack_group=var["attack_group"])
    pulumi.export("attackGroupRecommendationsJson", attack_group_recommendations.json)
    ```


    :param str attack_group: . Unique name of the attack group you want to return tuning recommendations for. If not included, recommendations are returned for all your attack groups.
    :param int config_id: . Unique identifier of the security configuration you want to return tuning recommendations for.
    :param str security_policy_id: . Unique identifier of the security policy you want to return tuning recommendations for.
    """
    __args__ = dict()
    __args__['attackGroup'] = attack_group
    __args__['configId'] = config_id
    __args__['securityPolicyId'] = security_policy_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('akamai:index/getAppSecTuningRecommendations:getAppSecTuningRecommendations', __args__, opts=opts, typ=GetAppSecTuningRecommendationsResult).value

    return AwaitableGetAppSecTuningRecommendationsResult(
        attack_group=__ret__.attack_group,
        config_id=__ret__.config_id,
        id=__ret__.id,
        json=__ret__.json,
        security_policy_id=__ret__.security_policy_id)


@_utilities.lift_output_func(get_app_sec_tuning_recommendations)
def get_app_sec_tuning_recommendations_output(attack_group: Optional[pulumi.Input[Optional[str]]] = None,
                                              config_id: Optional[pulumi.Input[int]] = None,
                                              security_policy_id: Optional[pulumi.Input[Optional[str]]] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAppSecTuningRecommendationsResult]:
    """
    Returns tuning recommendations for the specified attack group (or, if the `attack_group` argument is not included, returns tuning recommendations for all the attack groups in the specified security policy).
    Tuning recommendations help minimize the number of false positives triggered by a security policy. With a false positive, a client request is marked as having violated the security policy restrictions even though it actually did not.
    Tuning recommendations are returned as attack group exceptions: if you choose, you can copy the response and use the `AppSecAttackGroup` resource to add the recommended exception to a security policy or attack group.
    If the data source response is empty, that means that there are no further recommendations for tuning your security policy or attack group.
    If you need, you can manually merge a recommended exception for an attack group with the exception previously configured in the attack group resource.
    You can find additional information in our [Application Security API v1 documentation](https://developer.akamai.com/api/cloud_security/application_security/v1.html#getrecommendations).

    ## Example Usage

    Basic usage:

    ```python
    import pulumi
    import pulumi_akamai as akamai

    configuration = akamai.get_app_sec_configuration(name=var["security_configuration"])
    policy_recommendations = akamai.get_app_sec_tuning_recommendations(config_id=configuration.config_id,
        security_policy_id=var["security_policy_id"])
    pulumi.export("policyRecommendationsJson", policy_recommendations.json)
    attack_group_recommendations = akamai.get_app_sec_tuning_recommendations(config_id=configuration.config_id,
        security_policy_id=var["security_policy_id"],
        attack_group=var["attack_group"])
    pulumi.export("attackGroupRecommendationsJson", attack_group_recommendations.json)
    ```


    :param str attack_group: . Unique name of the attack group you want to return tuning recommendations for. If not included, recommendations are returned for all your attack groups.
    :param int config_id: . Unique identifier of the security configuration you want to return tuning recommendations for.
    :param str security_policy_id: . Unique identifier of the security policy you want to return tuning recommendations for.
    """
    ...
