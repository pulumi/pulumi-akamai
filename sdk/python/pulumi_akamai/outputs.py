# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ClientlistListItem',
    'CloudletsApplicationLoadBalancerDataCenter',
    'CloudletsApplicationLoadBalancerLivenessSettings',
    'CloudwrapperActivationTimeouts',
    'CloudwrapperConfigurationLocation',
    'CloudwrapperConfigurationLocationCapacity',
    'CloudwrapperConfigurationTimeouts',
    'CpsDvEnrollmentAdminContact',
    'CpsDvEnrollmentCsr',
    'CpsDvEnrollmentDnsChallenge',
    'CpsDvEnrollmentHttpChallenge',
    'CpsDvEnrollmentNetworkConfiguration',
    'CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication',
    'CpsDvEnrollmentOrganization',
    'CpsDvEnrollmentTechContact',
    'CpsThirdPartyEnrollmentAdminContact',
    'CpsThirdPartyEnrollmentCsr',
    'CpsThirdPartyEnrollmentNetworkConfiguration',
    'CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication',
    'CpsThirdPartyEnrollmentOrganization',
    'CpsThirdPartyEnrollmentTechContact',
    'DatastreamAzureConnector',
    'DatastreamDatadogConnector',
    'DatastreamDeliveryConfiguration',
    'DatastreamDeliveryConfigurationFrequency',
    'DatastreamElasticsearchConnector',
    'DatastreamGcsConnector',
    'DatastreamHttpsConnector',
    'DatastreamLogglyConnector',
    'DatastreamNewRelicConnector',
    'DatastreamOracleConnector',
    'DatastreamS3Connector',
    'DatastreamSplunkConnector',
    'DatastreamSumologicConnector',
    'DnsZoneTsigKey',
    'EdgeKvInitialData',
    'GtmAsmapAssignment',
    'GtmAsmapDefaultDatacenter',
    'GtmCidrmapAssignment',
    'GtmCidrmapDefaultDatacenter',
    'GtmDatacenterDefaultLoadObject',
    'GtmGeomapAssignment',
    'GtmGeomapDefaultDatacenter',
    'GtmPropertyLivenessTest',
    'GtmPropertyLivenessTestHttpHeader',
    'GtmPropertyStaticRrSet',
    'GtmPropertyTrafficTarget',
    'GtmResourceResourceInstance',
    'PropertyActivationComplianceRecord',
    'PropertyActivationComplianceRecordNoncomplianceReasonEmergency',
    'PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic',
    'PropertyActivationComplianceRecordNoncomplianceReasonNone',
    'PropertyActivationComplianceRecordNoncomplianceReasonOther',
    'PropertyActivationRuleError',
    'PropertyHostname',
    'PropertyHostnameCertStatus',
    'PropertyIncludeActivationComplianceRecord',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther',
    'PropertyRuleError',
    'GetCPSEnrollmentAdminContactResult',
    'GetCPSEnrollmentCsrResult',
    'GetCPSEnrollmentDnsChallengeResult',
    'GetCPSEnrollmentHttpChallengeResult',
    'GetCPSEnrollmentNetworkConfigurationResult',
    'GetCPSEnrollmentNetworkConfigurationClientMutualAuthenticationResult',
    'GetCPSEnrollmentOrganizationResult',
    'GetCPSEnrollmentTechContactResult',
    'GetCPSEnrollmentsEnrollmentResult',
    'GetCPSEnrollmentsEnrollmentAdminContactResult',
    'GetCPSEnrollmentsEnrollmentCsrResult',
    'GetCPSEnrollmentsEnrollmentNetworkConfigurationResult',
    'GetCPSEnrollmentsEnrollmentNetworkConfigurationClientMutualAuthenticationResult',
    'GetCPSEnrollmentsEnrollmentOrganizationResult',
    'GetCPSEnrollmentsEnrollmentTechContactResult',
    'GetClientlistListsListResult',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleResult',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchResult',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult',
    'GetCloudletsApplicationLoadBalancerDataCenterResult',
    'GetCloudletsApplicationLoadBalancerLivenessSettingResult',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleResult',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingResult',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchResult',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueResult',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsResult',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleResult',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsResult',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchResult',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueResult',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleResult',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchResult',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueResult',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsResult',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleResult',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsResult',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleMatchResult',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueResult',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsResult',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleResult',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsResult',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchResult',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueResult',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsResult',
    'GetCloudletsPolicyActivationResult',
    'GetCloudletsPolicyActivationPolicyInfoResult',
    'GetCloudletsPolicyActivationPropertyInfoResult',
    'GetCloudletsRequestControlMatchRuleMatchRuleResult',
    'GetCloudletsRequestControlMatchRuleMatchRuleMatchResult',
    'GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueResult',
    'GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsResult',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleResult',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchResult',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult',
    'GetCloudwrapperCapacitiesCapacityResult',
    'GetCloudwrapperCapacitiesCapacityApprovedResult',
    'GetCloudwrapperCapacitiesCapacityAssignedResult',
    'GetCloudwrapperCapacitiesCapacityUnassignedResult',
    'GetCloudwrapperConfigurationLocationResult',
    'GetCloudwrapperConfigurationLocationCapacityResult',
    'GetCloudwrapperConfigurationMultiCdnSettingsResult',
    'GetCloudwrapperConfigurationMultiCdnSettingsBoccResult',
    'GetCloudwrapperConfigurationMultiCdnSettingsCdnResult',
    'GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyResult',
    'GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsResult',
    'GetCloudwrapperConfigurationMultiCdnSettingsOriginResult',
    'GetCloudwrapperConfigurationsConfigurationResult',
    'GetCloudwrapperConfigurationsConfigurationLocationResult',
    'GetCloudwrapperConfigurationsConfigurationLocationCapacityResult',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsResult',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccResult',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnResult',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyResult',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsResult',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginResult',
    'GetCloudwrapperLocationsLocationResult',
    'GetCloudwrapperLocationsLocationTrafficTypeResult',
    'GetCloudwrapperPropertiesPropertyResult',
    'GetContractsContractResult',
    'GetDatastreamActivationHistoryActivationResult',
    'GetDatastreamDatasetFieldsDatasetFieldResult',
    'GetDatastreamsStreamsDetailResult',
    'GetDatastreamsStreamsDetailPropertyResult',
    'GetGroupsGroupResult',
    'GetGtmDatacenterDefaultLoadObjectResult',
    'GetGtmDatacenterLinkResult',
    'GetGtmDatacentersDatacenterResult',
    'GetGtmDatacentersDatacenterDefaultLoadObjectResult',
    'GetGtmDatacentersDatacenterLinkResult',
    'GetIamGrantableRolesGrantableRoleResult',
    'GetIamRolesRoleResult',
    'GetIamTimezonesTimezoneResult',
    'GetImagingPolicyImagePolicyResult',
    'GetImagingPolicyImagePolicyBreakpointsResult',
    'GetImagingPolicyImagePolicyOutputResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationBlurResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationContrastResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationGoopResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationHslResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationHsvResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskResult',
    'GetImagingPolicyImagePolicyTransformationResult',
    'GetImagingPolicyImagePolicyTransformationAppendResult',
    'GetImagingPolicyImagePolicyTransformationAppendImageResult',
    'GetImagingPolicyImagePolicyTransformationAppendImageBoxImageResult',
    'GetImagingPolicyImagePolicyTransformationAppendImageCircleImageResult',
    'GetImagingPolicyImagePolicyTransformationAppendImageTextImageResult',
    'GetImagingPolicyImagePolicyTransformationAppendImageUrlImageResult',
    'GetImagingPolicyImagePolicyTransformationAspectCropResult',
    'GetImagingPolicyImagePolicyTransformationBackgroundColorResult',
    'GetImagingPolicyImagePolicyTransformationBlurResult',
    'GetImagingPolicyImagePolicyTransformationChromaKeyResult',
    'GetImagingPolicyImagePolicyTransformationCompositeResult',
    'GetImagingPolicyImagePolicyTransformationCompositeImageResult',
    'GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageResult',
    'GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageResult',
    'GetImagingPolicyImagePolicyTransformationCompositeImageTextImageResult',
    'GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageResult',
    'GetImagingPolicyImagePolicyTransformationCompoundResult',
    'GetImagingPolicyImagePolicyTransformationContrastResult',
    'GetImagingPolicyImagePolicyTransformationCropResult',
    'GetImagingPolicyImagePolicyTransformationFaceCropResult',
    'GetImagingPolicyImagePolicyTransformationFeatureCropResult',
    'GetImagingPolicyImagePolicyTransformationFitAndFillResult',
    'GetImagingPolicyImagePolicyTransformationGoopResult',
    'GetImagingPolicyImagePolicyTransformationGrayscaleResult',
    'GetImagingPolicyImagePolicyTransformationHslResult',
    'GetImagingPolicyImagePolicyTransformationHsvResult',
    'GetImagingPolicyImagePolicyTransformationIfDimensionResult',
    'GetImagingPolicyImagePolicyTransformationIfOrientationResult',
    'GetImagingPolicyImagePolicyTransformationImQueryResult',
    'GetImagingPolicyImagePolicyTransformationMaxColorResult',
    'GetImagingPolicyImagePolicyTransformationMirrorResult',
    'GetImagingPolicyImagePolicyTransformationMonoHueResult',
    'GetImagingPolicyImagePolicyTransformationOpacityResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeResult',
    'GetImagingPolicyImagePolicyTransformationRelativeCropResult',
    'GetImagingPolicyImagePolicyTransformationRemoveColorResult',
    'GetImagingPolicyImagePolicyTransformationResizeResult',
    'GetImagingPolicyImagePolicyTransformationRotateResult',
    'GetImagingPolicyImagePolicyTransformationScaleResult',
    'GetImagingPolicyImagePolicyTransformationShearsResult',
    'GetImagingPolicyImagePolicyTransformationTrimResult',
    'GetImagingPolicyImagePolicyTransformationUnsharpMaskResult',
    'GetImagingPolicyImagePolicyVariableResult',
    'GetImagingPolicyImagePolicyVariableEnumOptionResult',
    'GetImagingPolicyVideoPolicyResult',
    'GetImagingPolicyVideoPolicyBreakpointsResult',
    'GetImagingPolicyVideoPolicyOutputResult',
    'GetImagingPolicyVideoPolicyVariableResult',
    'GetImagingPolicyVideoPolicyVariableEnumOptionResult',
    'GetPropertiesPropertyResult',
    'GetPropertiesSearchPropertyResult',
    'GetPropertyHostnamesHostnameResult',
    'GetPropertyHostnamesHostnameCertStatusResult',
    'GetPropertyIncludeParentsParentResult',
    'GetPropertyIncludesIncludeResult',
    'GetPropertyIncludesParentPropertyResult',
    'GetPropertyProductsProductResult',
    'GetPropertyRulesBuilderRulesV20230105Result',
    'GetPropertyRulesBuilderRulesV20230105BehaviorResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAdScalerCircuitBreakerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveAccelerationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveImageCompressionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAggregatedReportingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllHttpInCacheHierarchyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowCloudletsOriginsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowDeleteResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsCacheKeySharingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsDowngradeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowOptionsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowPatchResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowPostResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowPutResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowTransferEncodingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAltSvcHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerAllDownNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerFailoverOriginMapResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAutoDomainValidationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorBaseDirectoryResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorBossBeaconingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorBreadcrumbsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorBreakConnectionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorBrotliResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheErrorResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheIdResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyIgnoreCaseResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyQueryParamsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyRewriteResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCachePostResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheRedirectResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagVisibleResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCachingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCentralAuthorizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorChaseRedirectsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorClientCharacteristicsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCloudInterconnectsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorConditionalOriginResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorConstructResponseResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsAmdResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsDdResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLargeFileResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLiveResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdVodResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentPrePositionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentTargetingProtectionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCorsSupportResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCustomBehaviorResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDatastreamResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthHmacTransformationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthRegexTransformationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthSubstringTransformationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthVariableExtractorResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpDefaultAuthzGroupsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpDevRelationsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpRealTimeAuthResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDeliveryReceiptResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDenyAccessResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDenyDirectFailoverAccessResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicCacheIdResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDnsAsyncRefreshResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDnsPrefreshResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDowngradeProtocolResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDownloadCompleteMarkerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDownloadNotificationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDownstreamCacheResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationOverrideResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDynamicWebContentResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEcmsBulkUploadResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatabaseResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatasetResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEcmsObjectKeyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeConnectResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingOriginResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeOriginAuthorizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeScapeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeSideIncludesResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeWorkerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedAkamaiProtocolResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedProxyDetectionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEpdForwardHeaderEnrichmentResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFailActionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFailActionNetStorageHostnameResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFailoverBotManagerFeatureCompatibilityResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFastInvalidateResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFrontEndOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorG2oheaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorGlobalRequestNumberResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorGraphqlCachingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorGzipResponseResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHdDataAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHealthDetectionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHsafEipBindingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHttp2Result',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHttp3Result',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHttpStrictTransportSecurityResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHttpToHttpsUpgradeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImOverrideResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorIncludeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorInstantResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorInstantConfigResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateBitrateTableResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateThresholdTableResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLogCustomResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMPulseResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorManifestPersonalizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorManifestReroutingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorManualServerPushResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationQuicOptoutResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMediaClientResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMediaFileRetrievalOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMediaOriginFailoverResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMetadataCachingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMobileSdkPerformanceResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingRequestHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingResponseHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingRequestHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingResponseHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorModifyViaHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsWsdResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateIssuerRdnsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateSubjectRdnsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryMethodResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginIpAclResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPersistentClientConnectionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPersistentConnectionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPersonallyIdentifiableInformationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPreconnectResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPredictiveContentDeliveryResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPredictivePrefetchingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchableResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPrefreshCacheResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorQualityResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorQuicBetaResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRandomSeekResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRapidResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorReadTimeoutResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRealTimeReportingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRealUserMonitoringResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRedirectResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRedirectplusResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRefererCheckingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRemoveQueryParameterResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRemoveVaryResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorReportResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRequestTypeMarkerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerExtendedCompatibilityResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorResponseCodeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorResponseCookieResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRestrictObjectCachingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorReturnCacheStatusResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRewriteUrlResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRumCustomResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSaasDefinitionsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudClientResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderHostHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSavePostDcaProcessingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorScheduleInvalidationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorScriptManagementResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedContentProtectionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaStreamingPrefetchResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSetVariableResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorShutrResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSimulateErrorCodeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldSsmapResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationOverrideResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorStrictHeaderParsingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSubCustomerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSureRouteResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTcpOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTeaLeafResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionCustomizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTimeoutResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorUidConfigurationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorValidateEntityTagResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenForDcpResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomWithEdgeWorkersResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoStandaloneResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorWatermarkingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallFirewallConfigurationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorWebSocketsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorWebdavResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionAdvancedImMatchResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionBucketResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionCacheabilityResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionChinaCdnRegionResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionClientCertificateResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionClientIpResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionClientIpVersionResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionCloudletsOriginResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionContentDeliveryNetworkResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionContentTypeResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionDeviceCharacteristicResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthGroupsResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthSchemeResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionEcmdIsAuthenticatedResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionEcmdUsernameResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionEdgeWorkersFailureResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionFileExtensionResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionFilenameResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionHostnameResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchResponseCodeResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchVariableResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionMetadataStageResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionOriginTimeoutResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionPathResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionQueryStringParameterResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionRandomResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionRecoveryConfigResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionRegularExpressionResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionRequestCookieResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionRequestHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionRequestMethodResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionRequestProtocolResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionRequestTypeResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionResponseHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionTimeResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionTokenAuthorizationResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionUserAgentResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionUserLocationResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionUserNetworkResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionVariableErrorResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionVirtualWaitingRoomRequestResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionVisitorPrioritizationRequestResult',
    'GetPropertyRulesBuilderRulesV20230105CustomOverrideResult',
    'GetPropertyRulesBuilderRulesV20230105VariableResult',
    'GetPropertyRulesBuilderRulesV20230530Result',
    'GetPropertyRulesBuilderRulesV20230530BehaviorResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAdScalerCircuitBreakerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveAccelerationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveImageCompressionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAggregatedReportingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerTagResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllHttpInCacheHierarchyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowCloudletsOriginsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowDeleteResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsCacheKeySharingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsDowngradeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowOptionsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowPatchResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowPostResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowPutResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowTransferEncodingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAltSvcHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerAllDownNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerFailoverOriginMapResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAutoDomainValidationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorBaseDirectoryResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorBossBeaconingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorBreadcrumbsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorBreakConnectionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorBrotliResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheErrorResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheIdResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyIgnoreCaseResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyQueryParamsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyRewriteResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCachePostResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheRedirectResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagVisibleResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCachingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCentralAuthorizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorChaseRedirectsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorClientCharacteristicsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCloudInterconnectsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCommonMediaClientDataResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorConditionalOriginResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorConstructResponseResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsAmdResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsDdResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLargeFileResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLiveResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdVodResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentPrePositionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentTargetingProtectionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCorsSupportResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCustomBehaviorResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDatastreamResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthHmacTransformationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthRegexTransformationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthSubstringTransformationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthVariableExtractorResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpDefaultAuthzGroupsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpDevRelationsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpRealTimeAuthResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDeliveryReceiptResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDenyAccessResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDenyDirectFailoverAccessResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicCacheIdResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDnsAsyncRefreshResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDnsPrefreshResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDowngradeProtocolResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDownloadCompleteMarkerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDownloadNotificationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDownstreamCacheResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationOverrideResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDynamicWebContentResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEcmsBulkUploadResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatabaseResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatasetResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEcmsObjectKeyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeConnectResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingOriginResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeOriginAuthorizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeScapeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeSideIncludesResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeWorkerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedAkamaiProtocolResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedProxyDetectionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEpdForwardHeaderEnrichmentResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFailActionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFailActionNetStorageHostnameResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFailoverBotManagerFeatureCompatibilityResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFastInvalidateResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorG2oheaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorGlobalRequestNumberResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorGraphqlCachingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorGzipResponseResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHdDataAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHealthDetectionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHsafEipBindingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHttp2Result',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHttp3Result',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHttpStrictTransportSecurityResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHttpToHttpsUpgradeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImOverrideResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorIncludeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorInstantResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorInstantConfigResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateBitrateTableResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateThresholdTableResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLogCustomResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMPulseResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorManifestPersonalizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorManifestReroutingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorManualServerPushResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationQuicOptoutResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMediaClientResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMediaFileRetrievalOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMediaOriginFailoverResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMetadataCachingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMobileSdkPerformanceResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingRequestHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingResponseHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingRequestHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingResponseHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorModifyViaHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsWsdResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateIssuerRdnsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateSubjectRdnsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryMethodResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginIpAclResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPersistentClientConnectionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPersistentConnectionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPersonallyIdentifiableInformationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPreconnectResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPredictiveContentDeliveryResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPredictivePrefetchingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchableResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPrefreshCacheResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorQualityResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorQuicBetaResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRandomSeekResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRapidResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorReadTimeoutResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRealTimeReportingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRealUserMonitoringResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRedirectResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRedirectplusResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRefererCheckingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRemoveQueryParameterResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRemoveVaryResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorReportResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRequestTypeMarkerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerExtendedCompatibilityResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorResponseCodeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorResponseCookieResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRestrictObjectCachingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorReturnCacheStatusResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRewriteUrlResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRumCustomResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSaasDefinitionsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudClientResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderHostHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSavePostDcaProcessingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorScheduleInvalidationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorScriptManagementResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedContentProtectionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaStreamingPrefetchResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSetVariableResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSimulateErrorCodeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldSsmapResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationOverrideResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorStrictHeaderParsingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSubCustomerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSureRouteResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTcpOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTeaLeafResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionCustomizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTimeoutResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorUidConfigurationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorValidateEntityTagResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenForDcpResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVerifyTokenAuthorizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomWithEdgeWorkersResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoStandaloneResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorWatermarkingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallFirewallConfigurationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorWebSocketsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorWebdavResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionAdvancedImMatchResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionBucketResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionCacheabilityResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionChinaCdnRegionResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionClientCertificateResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionClientIpResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionClientIpVersionResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionCloudletsOriginResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionContentDeliveryNetworkResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionContentTypeResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionDeviceCharacteristicResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthGroupsResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthSchemeResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionEcmdIsAuthenticatedResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionEcmdUsernameResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionEdgeWorkersFailureResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionFileExtensionResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionFilenameResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionHostnameResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchResponseCodeResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchVariableResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionMetadataStageResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionOriginTimeoutResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionPathResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionQueryStringParameterResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionRandomResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionRecoveryConfigResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionRegularExpressionResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionRequestCookieResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionRequestHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionRequestMethodResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionRequestProtocolResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionRequestTypeResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionResponseHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionServerLocationResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionTimeResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionTokenAuthorizationResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionUserAgentResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionUserLocationResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionUserNetworkResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionVariableErrorResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionVirtualWaitingRoomRequestResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionVisitorPrioritizationRequestResult',
    'GetPropertyRulesBuilderRulesV20230530CustomOverrideResult',
    'GetPropertyRulesBuilderRulesV20230530VariableResult',
    'GetPropertyRulesTemplateTemplateResult',
    'GetPropertyRulesTemplateVariableResult',
]

@pulumi.output_type
class ClientlistListItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationDate":
            suggest = "expiration_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClientlistListItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClientlistListItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClientlistListItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 description: Optional[str] = None,
                 expiration_date: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None):
        ClientlistListItem._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
            description=description,
            expiration_date=expiration_date,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: str,
             description: Optional[str] = None,
             expiration_date: Optional[str] = None,
             tags: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'expirationDate' in kwargs:
            expiration_date = kwargs['expirationDate']

        _setter("value", value)
        if description is not None:
            _setter("description", description)
        if expiration_date is not None:
            _setter("expiration_date", expiration_date)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class CloudletsApplicationLoadBalancerDataCenter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "originId":
            suggest = "origin_id"
        elif key == "cloudServerHostHeaderOverride":
            suggest = "cloud_server_host_header_override"
        elif key == "cloudService":
            suggest = "cloud_service"
        elif key == "livenessHosts":
            suggest = "liveness_hosts"
        elif key == "stateOrProvince":
            suggest = "state_or_province"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudletsApplicationLoadBalancerDataCenter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudletsApplicationLoadBalancerDataCenter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudletsApplicationLoadBalancerDataCenter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continent: str,
                 country: str,
                 latitude: float,
                 longitude: float,
                 origin_id: str,
                 percent: float,
                 city: Optional[str] = None,
                 cloud_server_host_header_override: Optional[bool] = None,
                 cloud_service: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 liveness_hosts: Optional[Sequence[str]] = None,
                 state_or_province: Optional[str] = None):
        CloudletsApplicationLoadBalancerDataCenter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            continent=continent,
            country=country,
            latitude=latitude,
            longitude=longitude,
            origin_id=origin_id,
            percent=percent,
            city=city,
            cloud_server_host_header_override=cloud_server_host_header_override,
            cloud_service=cloud_service,
            hostname=hostname,
            liveness_hosts=liveness_hosts,
            state_or_province=state_or_province,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             continent: str,
             country: str,
             latitude: float,
             longitude: float,
             origin_id: str,
             percent: float,
             city: Optional[str] = None,
             cloud_server_host_header_override: Optional[bool] = None,
             cloud_service: Optional[bool] = None,
             hostname: Optional[str] = None,
             liveness_hosts: Optional[Sequence[str]] = None,
             state_or_province: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'originId' in kwargs:
            origin_id = kwargs['originId']
        if 'cloudServerHostHeaderOverride' in kwargs:
            cloud_server_host_header_override = kwargs['cloudServerHostHeaderOverride']
        if 'cloudService' in kwargs:
            cloud_service = kwargs['cloudService']
        if 'livenessHosts' in kwargs:
            liveness_hosts = kwargs['livenessHosts']
        if 'stateOrProvince' in kwargs:
            state_or_province = kwargs['stateOrProvince']

        _setter("continent", continent)
        _setter("country", country)
        _setter("latitude", latitude)
        _setter("longitude", longitude)
        _setter("origin_id", origin_id)
        _setter("percent", percent)
        if city is not None:
            _setter("city", city)
        if cloud_server_host_header_override is not None:
            _setter("cloud_server_host_header_override", cloud_server_host_header_override)
        if cloud_service is not None:
            _setter("cloud_service", cloud_service)
        if hostname is not None:
            _setter("hostname", hostname)
        if liveness_hosts is not None:
            _setter("liveness_hosts", liveness_hosts)
        if state_or_province is not None:
            _setter("state_or_province", state_or_province)

    @property
    @pulumi.getter
    def continent(self) -> str:
        return pulumi.get(self, "continent")

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def latitude(self) -> float:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter
    def percent(self) -> float:
        return pulumi.get(self, "percent")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="cloudServerHostHeaderOverride")
    def cloud_server_host_header_override(self) -> Optional[bool]:
        return pulumi.get(self, "cloud_server_host_header_override")

    @property
    @pulumi.getter(name="cloudService")
    def cloud_service(self) -> Optional[bool]:
        return pulumi.get(self, "cloud_service")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="livenessHosts")
    def liveness_hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "liveness_hosts")

    @property
    @pulumi.getter(name="stateOrProvince")
    def state_or_province(self) -> Optional[str]:
        return pulumi.get(self, "state_or_province")


@pulumi.output_type
class CloudletsApplicationLoadBalancerLivenessSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalHeaders":
            suggest = "additional_headers"
        elif key == "hostHeader":
            suggest = "host_header"
        elif key == "peerCertificateVerification":
            suggest = "peer_certificate_verification"
        elif key == "requestString":
            suggest = "request_string"
        elif key == "responseString":
            suggest = "response_string"
        elif key == "status3xxFailure":
            suggest = "status3xx_failure"
        elif key == "status4xxFailure":
            suggest = "status4xx_failure"
        elif key == "status5xxFailure":
            suggest = "status5xx_failure"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudletsApplicationLoadBalancerLivenessSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudletsApplicationLoadBalancerLivenessSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudletsApplicationLoadBalancerLivenessSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 path: str,
                 port: int,
                 protocol: str,
                 additional_headers: Optional[Mapping[str, str]] = None,
                 host_header: Optional[str] = None,
                 interval: Optional[int] = None,
                 peer_certificate_verification: Optional[bool] = None,
                 request_string: Optional[str] = None,
                 response_string: Optional[str] = None,
                 status3xx_failure: Optional[bool] = None,
                 status4xx_failure: Optional[bool] = None,
                 status5xx_failure: Optional[bool] = None,
                 timeout: Optional[float] = None):
        CloudletsApplicationLoadBalancerLivenessSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
            port=port,
            protocol=protocol,
            additional_headers=additional_headers,
            host_header=host_header,
            interval=interval,
            peer_certificate_verification=peer_certificate_verification,
            request_string=request_string,
            response_string=response_string,
            status3xx_failure=status3xx_failure,
            status4xx_failure=status4xx_failure,
            status5xx_failure=status5xx_failure,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: str,
             port: int,
             protocol: str,
             additional_headers: Optional[Mapping[str, str]] = None,
             host_header: Optional[str] = None,
             interval: Optional[int] = None,
             peer_certificate_verification: Optional[bool] = None,
             request_string: Optional[str] = None,
             response_string: Optional[str] = None,
             status3xx_failure: Optional[bool] = None,
             status4xx_failure: Optional[bool] = None,
             status5xx_failure: Optional[bool] = None,
             timeout: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'additionalHeaders' in kwargs:
            additional_headers = kwargs['additionalHeaders']
        if 'hostHeader' in kwargs:
            host_header = kwargs['hostHeader']
        if 'peerCertificateVerification' in kwargs:
            peer_certificate_verification = kwargs['peerCertificateVerification']
        if 'requestString' in kwargs:
            request_string = kwargs['requestString']
        if 'responseString' in kwargs:
            response_string = kwargs['responseString']
        if 'status3xxFailure' in kwargs:
            status3xx_failure = kwargs['status3xxFailure']
        if 'status4xxFailure' in kwargs:
            status4xx_failure = kwargs['status4xxFailure']
        if 'status5xxFailure' in kwargs:
            status5xx_failure = kwargs['status5xxFailure']

        _setter("path", path)
        _setter("port", port)
        _setter("protocol", protocol)
        if additional_headers is not None:
            _setter("additional_headers", additional_headers)
        if host_header is not None:
            _setter("host_header", host_header)
        if interval is not None:
            _setter("interval", interval)
        if peer_certificate_verification is not None:
            _setter("peer_certificate_verification", peer_certificate_verification)
        if request_string is not None:
            _setter("request_string", request_string)
        if response_string is not None:
            _setter("response_string", response_string)
        if status3xx_failure is not None:
            _setter("status3xx_failure", status3xx_failure)
        if status4xx_failure is not None:
            _setter("status4xx_failure", status4xx_failure)
        if status5xx_failure is not None:
            _setter("status5xx_failure", status5xx_failure)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="additionalHeaders")
    def additional_headers(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "additional_headers")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[str]:
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="peerCertificateVerification")
    def peer_certificate_verification(self) -> Optional[bool]:
        return pulumi.get(self, "peer_certificate_verification")

    @property
    @pulumi.getter(name="requestString")
    def request_string(self) -> Optional[str]:
        return pulumi.get(self, "request_string")

    @property
    @pulumi.getter(name="responseString")
    def response_string(self) -> Optional[str]:
        return pulumi.get(self, "response_string")

    @property
    @pulumi.getter(name="status3xxFailure")
    def status3xx_failure(self) -> Optional[bool]:
        return pulumi.get(self, "status3xx_failure")

    @property
    @pulumi.getter(name="status4xxFailure")
    def status4xx_failure(self) -> Optional[bool]:
        return pulumi.get(self, "status4xx_failure")

    @property
    @pulumi.getter(name="status5xxFailure")
    def status5xx_failure(self) -> Optional[bool]:
        return pulumi.get(self, "status5xx_failure")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[float]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class CloudwrapperActivationTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 update: Optional[str] = None):
        CloudwrapperActivationTimeouts._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create=create,
            update=update,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create: Optional[str] = None,
             update: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if create is not None:
            _setter("create", create)
        if update is not None:
            _setter("update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        return pulumi.get(self, "update")


@pulumi.output_type
class CloudwrapperConfigurationLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trafficTypeId":
            suggest = "traffic_type_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudwrapperConfigurationLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudwrapperConfigurationLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudwrapperConfigurationLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comments: str,
                 traffic_type_id: int,
                 capacity: Optional['outputs.CloudwrapperConfigurationLocationCapacity'] = None):
        CloudwrapperConfigurationLocation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comments=comments,
            traffic_type_id=traffic_type_id,
            capacity=capacity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comments: str,
             traffic_type_id: int,
             capacity: Optional['outputs.CloudwrapperConfigurationLocationCapacity'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'trafficTypeId' in kwargs:
            traffic_type_id = kwargs['trafficTypeId']

        _setter("comments", comments)
        _setter("traffic_type_id", traffic_type_id)
        if capacity is not None:
            _setter("capacity", capacity)

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="trafficTypeId")
    def traffic_type_id(self) -> int:
        return pulumi.get(self, "traffic_type_id")

    @property
    @pulumi.getter
    def capacity(self) -> Optional['outputs.CloudwrapperConfigurationLocationCapacity']:
        return pulumi.get(self, "capacity")


@pulumi.output_type
class CloudwrapperConfigurationLocationCapacity(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        CloudwrapperConfigurationLocationCapacity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unit: str,
             value: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("unit", unit)
        _setter("value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class CloudwrapperConfigurationTimeouts(dict):
    def __init__(__self__, *,
                 delete: Optional[str] = None):
        CloudwrapperConfigurationTimeouts._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delete=delete,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delete: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if delete is not None:
            _setter("delete", delete)

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        return pulumi.get(self, "delete")


@pulumi.output_type
class CpsDvEnrollmentAdminContact(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLineOne":
            suggest = "address_line_one"
        elif key == "countryCode":
            suggest = "country_code"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "addressLineTwo":
            suggest = "address_line_two"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsDvEnrollmentAdminContact. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsDvEnrollmentAdminContact.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsDvEnrollmentAdminContact.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 email: str,
                 first_name: str,
                 last_name: str,
                 organization: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None,
                 title: Optional[str] = None):
        CpsDvEnrollmentAdminContact._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address_line_one=address_line_one,
            city=city,
            country_code=country_code,
            email=email,
            first_name=first_name,
            last_name=last_name,
            organization=organization,
            phone=phone,
            postal_code=postal_code,
            region=region,
            address_line_two=address_line_two,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address_line_one: str,
             city: str,
             country_code: str,
             email: str,
             first_name: str,
             last_name: str,
             organization: str,
             phone: str,
             postal_code: str,
             region: str,
             address_line_two: Optional[str] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addressLineOne' in kwargs:
            address_line_one = kwargs['addressLineOne']
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'firstName' in kwargs:
            first_name = kwargs['firstName']
        if 'lastName' in kwargs:
            last_name = kwargs['lastName']
        if 'postalCode' in kwargs:
            postal_code = kwargs['postalCode']
        if 'addressLineTwo' in kwargs:
            address_line_two = kwargs['addressLineTwo']

        _setter("address_line_one", address_line_one)
        _setter("city", city)
        _setter("country_code", country_code)
        _setter("email", email)
        _setter("first_name", first_name)
        _setter("last_name", last_name)
        _setter("organization", organization)
        _setter("phone", phone)
        _setter("postal_code", postal_code)
        _setter("region", region)
        if address_line_two is not None:
            _setter("address_line_two", address_line_two)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class CpsDvEnrollmentCsr(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "countryCode":
            suggest = "country_code"
        elif key == "organizationalUnit":
            suggest = "organizational_unit"
        elif key == "preferredTrustChain":
            suggest = "preferred_trust_chain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsDvEnrollmentCsr. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsDvEnrollmentCsr.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsDvEnrollmentCsr.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 city: str,
                 country_code: str,
                 organization: str,
                 organizational_unit: str,
                 state: str,
                 preferred_trust_chain: Optional[str] = None):
        CpsDvEnrollmentCsr._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            city=city,
            country_code=country_code,
            organization=organization,
            organizational_unit=organizational_unit,
            state=state,
            preferred_trust_chain=preferred_trust_chain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             city: str,
             country_code: str,
             organization: str,
             organizational_unit: str,
             state: str,
             preferred_trust_chain: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'organizationalUnit' in kwargs:
            organizational_unit = kwargs['organizationalUnit']
        if 'preferredTrustChain' in kwargs:
            preferred_trust_chain = kwargs['preferredTrustChain']

        _setter("city", city)
        _setter("country_code", country_code)
        _setter("organization", organization)
        _setter("organizational_unit", organizational_unit)
        _setter("state", state)
        if preferred_trust_chain is not None:
            _setter("preferred_trust_chain", preferred_trust_chain)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> str:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="preferredTrustChain")
    def preferred_trust_chain(self) -> Optional[str]:
        return pulumi.get(self, "preferred_trust_chain")


@pulumi.output_type
class CpsDvEnrollmentDnsChallenge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fullPath":
            suggest = "full_path"
        elif key == "responseBody":
            suggest = "response_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsDvEnrollmentDnsChallenge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsDvEnrollmentDnsChallenge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsDvEnrollmentDnsChallenge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 full_path: Optional[str] = None,
                 response_body: Optional[str] = None):
        CpsDvEnrollmentDnsChallenge._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            domain=domain,
            full_path=full_path,
            response_body=response_body,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             domain: Optional[str] = None,
             full_path: Optional[str] = None,
             response_body: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fullPath' in kwargs:
            full_path = kwargs['fullPath']
        if 'responseBody' in kwargs:
            response_body = kwargs['responseBody']

        if domain is not None:
            _setter("domain", domain)
        if full_path is not None:
            _setter("full_path", full_path)
        if response_body is not None:
            _setter("response_body", response_body)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="fullPath")
    def full_path(self) -> Optional[str]:
        return pulumi.get(self, "full_path")

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> Optional[str]:
        return pulumi.get(self, "response_body")


@pulumi.output_type
class CpsDvEnrollmentHttpChallenge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fullPath":
            suggest = "full_path"
        elif key == "responseBody":
            suggest = "response_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsDvEnrollmentHttpChallenge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsDvEnrollmentHttpChallenge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsDvEnrollmentHttpChallenge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 full_path: Optional[str] = None,
                 response_body: Optional[str] = None):
        CpsDvEnrollmentHttpChallenge._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            domain=domain,
            full_path=full_path,
            response_body=response_body,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             domain: Optional[str] = None,
             full_path: Optional[str] = None,
             response_body: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fullPath' in kwargs:
            full_path = kwargs['fullPath']
        if 'responseBody' in kwargs:
            response_body = kwargs['responseBody']

        if domain is not None:
            _setter("domain", domain)
        if full_path is not None:
            _setter("full_path", full_path)
        if response_body is not None:
            _setter("response_body", response_body)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="fullPath")
    def full_path(self) -> Optional[str]:
        return pulumi.get(self, "full_path")

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> Optional[str]:
        return pulumi.get(self, "response_body")


@pulumi.output_type
class CpsDvEnrollmentNetworkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientMutualAuthentication":
            suggest = "client_mutual_authentication"
        elif key == "cloneDnsNames":
            suggest = "clone_dns_names"
        elif key == "disallowedTlsVersions":
            suggest = "disallowed_tls_versions"
        elif key == "mustHaveCiphers":
            suggest = "must_have_ciphers"
        elif key == "ocspStapling":
            suggest = "ocsp_stapling"
        elif key == "preferredCiphers":
            suggest = "preferred_ciphers"
        elif key == "quicEnabled":
            suggest = "quic_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsDvEnrollmentNetworkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsDvEnrollmentNetworkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsDvEnrollmentNetworkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 geography: str,
                 client_mutual_authentication: Optional['outputs.CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication'] = None,
                 clone_dns_names: Optional[bool] = None,
                 disallowed_tls_versions: Optional[Sequence[str]] = None,
                 must_have_ciphers: Optional[str] = None,
                 ocsp_stapling: Optional[str] = None,
                 preferred_ciphers: Optional[str] = None,
                 quic_enabled: Optional[bool] = None):
        CpsDvEnrollmentNetworkConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            geography=geography,
            client_mutual_authentication=client_mutual_authentication,
            clone_dns_names=clone_dns_names,
            disallowed_tls_versions=disallowed_tls_versions,
            must_have_ciphers=must_have_ciphers,
            ocsp_stapling=ocsp_stapling,
            preferred_ciphers=preferred_ciphers,
            quic_enabled=quic_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             geography: str,
             client_mutual_authentication: Optional['outputs.CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication'] = None,
             clone_dns_names: Optional[bool] = None,
             disallowed_tls_versions: Optional[Sequence[str]] = None,
             must_have_ciphers: Optional[str] = None,
             ocsp_stapling: Optional[str] = None,
             preferred_ciphers: Optional[str] = None,
             quic_enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientMutualAuthentication' in kwargs:
            client_mutual_authentication = kwargs['clientMutualAuthentication']
        if 'cloneDnsNames' in kwargs:
            clone_dns_names = kwargs['cloneDnsNames']
        if 'disallowedTlsVersions' in kwargs:
            disallowed_tls_versions = kwargs['disallowedTlsVersions']
        if 'mustHaveCiphers' in kwargs:
            must_have_ciphers = kwargs['mustHaveCiphers']
        if 'ocspStapling' in kwargs:
            ocsp_stapling = kwargs['ocspStapling']
        if 'preferredCiphers' in kwargs:
            preferred_ciphers = kwargs['preferredCiphers']
        if 'quicEnabled' in kwargs:
            quic_enabled = kwargs['quicEnabled']

        _setter("geography", geography)
        if client_mutual_authentication is not None:
            _setter("client_mutual_authentication", client_mutual_authentication)
        if clone_dns_names is not None:
            _setter("clone_dns_names", clone_dns_names)
        if disallowed_tls_versions is not None:
            _setter("disallowed_tls_versions", disallowed_tls_versions)
        if must_have_ciphers is not None:
            _setter("must_have_ciphers", must_have_ciphers)
        if ocsp_stapling is not None:
            _setter("ocsp_stapling", ocsp_stapling)
        if preferred_ciphers is not None:
            _setter("preferred_ciphers", preferred_ciphers)
        if quic_enabled is not None:
            _setter("quic_enabled", quic_enabled)

    @property
    @pulumi.getter
    def geography(self) -> str:
        return pulumi.get(self, "geography")

    @property
    @pulumi.getter(name="clientMutualAuthentication")
    def client_mutual_authentication(self) -> Optional['outputs.CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication']:
        return pulumi.get(self, "client_mutual_authentication")

    @property
    @pulumi.getter(name="cloneDnsNames")
    def clone_dns_names(self) -> Optional[bool]:
        return pulumi.get(self, "clone_dns_names")

    @property
    @pulumi.getter(name="disallowedTlsVersions")
    def disallowed_tls_versions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "disallowed_tls_versions")

    @property
    @pulumi.getter(name="mustHaveCiphers")
    def must_have_ciphers(self) -> Optional[str]:
        return pulumi.get(self, "must_have_ciphers")

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> Optional[str]:
        return pulumi.get(self, "ocsp_stapling")

    @property
    @pulumi.getter(name="preferredCiphers")
    def preferred_ciphers(self) -> Optional[str]:
        return pulumi.get(self, "preferred_ciphers")

    @property
    @pulumi.getter(name="quicEnabled")
    def quic_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "quic_enabled")


@pulumi.output_type
class CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ocspEnabled":
            suggest = "ocsp_enabled"
        elif key == "sendCaListToClient":
            suggest = "send_ca_list_to_client"
        elif key == "setId":
            suggest = "set_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ocsp_enabled: Optional[bool] = None,
                 send_ca_list_to_client: Optional[bool] = None,
                 set_id: Optional[str] = None):
        CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ocsp_enabled=ocsp_enabled,
            send_ca_list_to_client=send_ca_list_to_client,
            set_id=set_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ocsp_enabled: Optional[bool] = None,
             send_ca_list_to_client: Optional[bool] = None,
             set_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ocspEnabled' in kwargs:
            ocsp_enabled = kwargs['ocspEnabled']
        if 'sendCaListToClient' in kwargs:
            send_ca_list_to_client = kwargs['sendCaListToClient']
        if 'setId' in kwargs:
            set_id = kwargs['setId']

        if ocsp_enabled is not None:
            _setter("ocsp_enabled", ocsp_enabled)
        if send_ca_list_to_client is not None:
            _setter("send_ca_list_to_client", send_ca_list_to_client)
        if set_id is not None:
            _setter("set_id", set_id)

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "ocsp_enabled")

    @property
    @pulumi.getter(name="sendCaListToClient")
    def send_ca_list_to_client(self) -> Optional[bool]:
        return pulumi.get(self, "send_ca_list_to_client")

    @property
    @pulumi.getter(name="setId")
    def set_id(self) -> Optional[str]:
        return pulumi.get(self, "set_id")


@pulumi.output_type
class CpsDvEnrollmentOrganization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLineOne":
            suggest = "address_line_one"
        elif key == "countryCode":
            suggest = "country_code"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "addressLineTwo":
            suggest = "address_line_two"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsDvEnrollmentOrganization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsDvEnrollmentOrganization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsDvEnrollmentOrganization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 name: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None):
        CpsDvEnrollmentOrganization._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address_line_one=address_line_one,
            city=city,
            country_code=country_code,
            name=name,
            phone=phone,
            postal_code=postal_code,
            region=region,
            address_line_two=address_line_two,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address_line_one: str,
             city: str,
             country_code: str,
             name: str,
             phone: str,
             postal_code: str,
             region: str,
             address_line_two: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addressLineOne' in kwargs:
            address_line_one = kwargs['addressLineOne']
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'postalCode' in kwargs:
            postal_code = kwargs['postalCode']
        if 'addressLineTwo' in kwargs:
            address_line_two = kwargs['addressLineTwo']

        _setter("address_line_one", address_line_one)
        _setter("city", city)
        _setter("country_code", country_code)
        _setter("name", name)
        _setter("phone", phone)
        _setter("postal_code", postal_code)
        _setter("region", region)
        if address_line_two is not None:
            _setter("address_line_two", address_line_two)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")


@pulumi.output_type
class CpsDvEnrollmentTechContact(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLineOne":
            suggest = "address_line_one"
        elif key == "countryCode":
            suggest = "country_code"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "addressLineTwo":
            suggest = "address_line_two"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsDvEnrollmentTechContact. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsDvEnrollmentTechContact.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsDvEnrollmentTechContact.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 email: str,
                 first_name: str,
                 last_name: str,
                 organization: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None,
                 title: Optional[str] = None):
        CpsDvEnrollmentTechContact._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address_line_one=address_line_one,
            city=city,
            country_code=country_code,
            email=email,
            first_name=first_name,
            last_name=last_name,
            organization=organization,
            phone=phone,
            postal_code=postal_code,
            region=region,
            address_line_two=address_line_two,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address_line_one: str,
             city: str,
             country_code: str,
             email: str,
             first_name: str,
             last_name: str,
             organization: str,
             phone: str,
             postal_code: str,
             region: str,
             address_line_two: Optional[str] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addressLineOne' in kwargs:
            address_line_one = kwargs['addressLineOne']
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'firstName' in kwargs:
            first_name = kwargs['firstName']
        if 'lastName' in kwargs:
            last_name = kwargs['lastName']
        if 'postalCode' in kwargs:
            postal_code = kwargs['postalCode']
        if 'addressLineTwo' in kwargs:
            address_line_two = kwargs['addressLineTwo']

        _setter("address_line_one", address_line_one)
        _setter("city", city)
        _setter("country_code", country_code)
        _setter("email", email)
        _setter("first_name", first_name)
        _setter("last_name", last_name)
        _setter("organization", organization)
        _setter("phone", phone)
        _setter("postal_code", postal_code)
        _setter("region", region)
        if address_line_two is not None:
            _setter("address_line_two", address_line_two)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class CpsThirdPartyEnrollmentAdminContact(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLineOne":
            suggest = "address_line_one"
        elif key == "countryCode":
            suggest = "country_code"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "addressLineTwo":
            suggest = "address_line_two"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsThirdPartyEnrollmentAdminContact. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsThirdPartyEnrollmentAdminContact.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsThirdPartyEnrollmentAdminContact.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 email: str,
                 first_name: str,
                 last_name: str,
                 organization: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None,
                 title: Optional[str] = None):
        CpsThirdPartyEnrollmentAdminContact._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address_line_one=address_line_one,
            city=city,
            country_code=country_code,
            email=email,
            first_name=first_name,
            last_name=last_name,
            organization=organization,
            phone=phone,
            postal_code=postal_code,
            region=region,
            address_line_two=address_line_two,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address_line_one: str,
             city: str,
             country_code: str,
             email: str,
             first_name: str,
             last_name: str,
             organization: str,
             phone: str,
             postal_code: str,
             region: str,
             address_line_two: Optional[str] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addressLineOne' in kwargs:
            address_line_one = kwargs['addressLineOne']
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'firstName' in kwargs:
            first_name = kwargs['firstName']
        if 'lastName' in kwargs:
            last_name = kwargs['lastName']
        if 'postalCode' in kwargs:
            postal_code = kwargs['postalCode']
        if 'addressLineTwo' in kwargs:
            address_line_two = kwargs['addressLineTwo']

        _setter("address_line_one", address_line_one)
        _setter("city", city)
        _setter("country_code", country_code)
        _setter("email", email)
        _setter("first_name", first_name)
        _setter("last_name", last_name)
        _setter("organization", organization)
        _setter("phone", phone)
        _setter("postal_code", postal_code)
        _setter("region", region)
        if address_line_two is not None:
            _setter("address_line_two", address_line_two)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class CpsThirdPartyEnrollmentCsr(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "countryCode":
            suggest = "country_code"
        elif key == "organizationalUnit":
            suggest = "organizational_unit"
        elif key == "preferredTrustChain":
            suggest = "preferred_trust_chain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsThirdPartyEnrollmentCsr. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsThirdPartyEnrollmentCsr.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsThirdPartyEnrollmentCsr.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 city: str,
                 country_code: str,
                 organization: str,
                 organizational_unit: str,
                 state: str,
                 preferred_trust_chain: Optional[str] = None):
        CpsThirdPartyEnrollmentCsr._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            city=city,
            country_code=country_code,
            organization=organization,
            organizational_unit=organizational_unit,
            state=state,
            preferred_trust_chain=preferred_trust_chain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             city: str,
             country_code: str,
             organization: str,
             organizational_unit: str,
             state: str,
             preferred_trust_chain: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'organizationalUnit' in kwargs:
            organizational_unit = kwargs['organizationalUnit']
        if 'preferredTrustChain' in kwargs:
            preferred_trust_chain = kwargs['preferredTrustChain']

        _setter("city", city)
        _setter("country_code", country_code)
        _setter("organization", organization)
        _setter("organizational_unit", organizational_unit)
        _setter("state", state)
        if preferred_trust_chain is not None:
            _setter("preferred_trust_chain", preferred_trust_chain)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> str:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="preferredTrustChain")
    def preferred_trust_chain(self) -> Optional[str]:
        return pulumi.get(self, "preferred_trust_chain")


@pulumi.output_type
class CpsThirdPartyEnrollmentNetworkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientMutualAuthentication":
            suggest = "client_mutual_authentication"
        elif key == "cloneDnsNames":
            suggest = "clone_dns_names"
        elif key == "disallowedTlsVersions":
            suggest = "disallowed_tls_versions"
        elif key == "mustHaveCiphers":
            suggest = "must_have_ciphers"
        elif key == "ocspStapling":
            suggest = "ocsp_stapling"
        elif key == "preferredCiphers":
            suggest = "preferred_ciphers"
        elif key == "quicEnabled":
            suggest = "quic_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsThirdPartyEnrollmentNetworkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsThirdPartyEnrollmentNetworkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsThirdPartyEnrollmentNetworkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 geography: str,
                 client_mutual_authentication: Optional['outputs.CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication'] = None,
                 clone_dns_names: Optional[bool] = None,
                 disallowed_tls_versions: Optional[Sequence[str]] = None,
                 must_have_ciphers: Optional[str] = None,
                 ocsp_stapling: Optional[str] = None,
                 preferred_ciphers: Optional[str] = None,
                 quic_enabled: Optional[bool] = None):
        CpsThirdPartyEnrollmentNetworkConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            geography=geography,
            client_mutual_authentication=client_mutual_authentication,
            clone_dns_names=clone_dns_names,
            disallowed_tls_versions=disallowed_tls_versions,
            must_have_ciphers=must_have_ciphers,
            ocsp_stapling=ocsp_stapling,
            preferred_ciphers=preferred_ciphers,
            quic_enabled=quic_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             geography: str,
             client_mutual_authentication: Optional['outputs.CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication'] = None,
             clone_dns_names: Optional[bool] = None,
             disallowed_tls_versions: Optional[Sequence[str]] = None,
             must_have_ciphers: Optional[str] = None,
             ocsp_stapling: Optional[str] = None,
             preferred_ciphers: Optional[str] = None,
             quic_enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientMutualAuthentication' in kwargs:
            client_mutual_authentication = kwargs['clientMutualAuthentication']
        if 'cloneDnsNames' in kwargs:
            clone_dns_names = kwargs['cloneDnsNames']
        if 'disallowedTlsVersions' in kwargs:
            disallowed_tls_versions = kwargs['disallowedTlsVersions']
        if 'mustHaveCiphers' in kwargs:
            must_have_ciphers = kwargs['mustHaveCiphers']
        if 'ocspStapling' in kwargs:
            ocsp_stapling = kwargs['ocspStapling']
        if 'preferredCiphers' in kwargs:
            preferred_ciphers = kwargs['preferredCiphers']
        if 'quicEnabled' in kwargs:
            quic_enabled = kwargs['quicEnabled']

        _setter("geography", geography)
        if client_mutual_authentication is not None:
            _setter("client_mutual_authentication", client_mutual_authentication)
        if clone_dns_names is not None:
            _setter("clone_dns_names", clone_dns_names)
        if disallowed_tls_versions is not None:
            _setter("disallowed_tls_versions", disallowed_tls_versions)
        if must_have_ciphers is not None:
            _setter("must_have_ciphers", must_have_ciphers)
        if ocsp_stapling is not None:
            _setter("ocsp_stapling", ocsp_stapling)
        if preferred_ciphers is not None:
            _setter("preferred_ciphers", preferred_ciphers)
        if quic_enabled is not None:
            _setter("quic_enabled", quic_enabled)

    @property
    @pulumi.getter
    def geography(self) -> str:
        return pulumi.get(self, "geography")

    @property
    @pulumi.getter(name="clientMutualAuthentication")
    def client_mutual_authentication(self) -> Optional['outputs.CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication']:
        return pulumi.get(self, "client_mutual_authentication")

    @property
    @pulumi.getter(name="cloneDnsNames")
    def clone_dns_names(self) -> Optional[bool]:
        return pulumi.get(self, "clone_dns_names")

    @property
    @pulumi.getter(name="disallowedTlsVersions")
    def disallowed_tls_versions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "disallowed_tls_versions")

    @property
    @pulumi.getter(name="mustHaveCiphers")
    def must_have_ciphers(self) -> Optional[str]:
        return pulumi.get(self, "must_have_ciphers")

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> Optional[str]:
        return pulumi.get(self, "ocsp_stapling")

    @property
    @pulumi.getter(name="preferredCiphers")
    def preferred_ciphers(self) -> Optional[str]:
        return pulumi.get(self, "preferred_ciphers")

    @property
    @pulumi.getter(name="quicEnabled")
    def quic_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "quic_enabled")


@pulumi.output_type
class CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ocspEnabled":
            suggest = "ocsp_enabled"
        elif key == "sendCaListToClient":
            suggest = "send_ca_list_to_client"
        elif key == "setId":
            suggest = "set_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ocsp_enabled: Optional[bool] = None,
                 send_ca_list_to_client: Optional[bool] = None,
                 set_id: Optional[str] = None):
        CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ocsp_enabled=ocsp_enabled,
            send_ca_list_to_client=send_ca_list_to_client,
            set_id=set_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ocsp_enabled: Optional[bool] = None,
             send_ca_list_to_client: Optional[bool] = None,
             set_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ocspEnabled' in kwargs:
            ocsp_enabled = kwargs['ocspEnabled']
        if 'sendCaListToClient' in kwargs:
            send_ca_list_to_client = kwargs['sendCaListToClient']
        if 'setId' in kwargs:
            set_id = kwargs['setId']

        if ocsp_enabled is not None:
            _setter("ocsp_enabled", ocsp_enabled)
        if send_ca_list_to_client is not None:
            _setter("send_ca_list_to_client", send_ca_list_to_client)
        if set_id is not None:
            _setter("set_id", set_id)

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "ocsp_enabled")

    @property
    @pulumi.getter(name="sendCaListToClient")
    def send_ca_list_to_client(self) -> Optional[bool]:
        return pulumi.get(self, "send_ca_list_to_client")

    @property
    @pulumi.getter(name="setId")
    def set_id(self) -> Optional[str]:
        return pulumi.get(self, "set_id")


@pulumi.output_type
class CpsThirdPartyEnrollmentOrganization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLineOne":
            suggest = "address_line_one"
        elif key == "countryCode":
            suggest = "country_code"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "addressLineTwo":
            suggest = "address_line_two"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsThirdPartyEnrollmentOrganization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsThirdPartyEnrollmentOrganization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsThirdPartyEnrollmentOrganization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 name: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None):
        CpsThirdPartyEnrollmentOrganization._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address_line_one=address_line_one,
            city=city,
            country_code=country_code,
            name=name,
            phone=phone,
            postal_code=postal_code,
            region=region,
            address_line_two=address_line_two,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address_line_one: str,
             city: str,
             country_code: str,
             name: str,
             phone: str,
             postal_code: str,
             region: str,
             address_line_two: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addressLineOne' in kwargs:
            address_line_one = kwargs['addressLineOne']
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'postalCode' in kwargs:
            postal_code = kwargs['postalCode']
        if 'addressLineTwo' in kwargs:
            address_line_two = kwargs['addressLineTwo']

        _setter("address_line_one", address_line_one)
        _setter("city", city)
        _setter("country_code", country_code)
        _setter("name", name)
        _setter("phone", phone)
        _setter("postal_code", postal_code)
        _setter("region", region)
        if address_line_two is not None:
            _setter("address_line_two", address_line_two)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")


@pulumi.output_type
class CpsThirdPartyEnrollmentTechContact(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLineOne":
            suggest = "address_line_one"
        elif key == "countryCode":
            suggest = "country_code"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "addressLineTwo":
            suggest = "address_line_two"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsThirdPartyEnrollmentTechContact. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsThirdPartyEnrollmentTechContact.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsThirdPartyEnrollmentTechContact.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 email: str,
                 first_name: str,
                 last_name: str,
                 organization: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None,
                 title: Optional[str] = None):
        CpsThirdPartyEnrollmentTechContact._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address_line_one=address_line_one,
            city=city,
            country_code=country_code,
            email=email,
            first_name=first_name,
            last_name=last_name,
            organization=organization,
            phone=phone,
            postal_code=postal_code,
            region=region,
            address_line_two=address_line_two,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address_line_one: str,
             city: str,
             country_code: str,
             email: str,
             first_name: str,
             last_name: str,
             organization: str,
             phone: str,
             postal_code: str,
             region: str,
             address_line_two: Optional[str] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addressLineOne' in kwargs:
            address_line_one = kwargs['addressLineOne']
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'firstName' in kwargs:
            first_name = kwargs['firstName']
        if 'lastName' in kwargs:
            last_name = kwargs['lastName']
        if 'postalCode' in kwargs:
            postal_code = kwargs['postalCode']
        if 'addressLineTwo' in kwargs:
            address_line_two = kwargs['addressLineTwo']

        _setter("address_line_one", address_line_one)
        _setter("city", city)
        _setter("country_code", country_code)
        _setter("email", email)
        _setter("first_name", first_name)
        _setter("last_name", last_name)
        _setter("organization", organization)
        _setter("phone", phone)
        _setter("postal_code", postal_code)
        _setter("region", region)
        if address_line_two is not None:
            _setter("address_line_two", address_line_two)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class DatastreamAzureConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "accountName":
            suggest = "account_name"
        elif key == "containerName":
            suggest = "container_name"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "compressLogs":
            suggest = "compress_logs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamAzureConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamAzureConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamAzureConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: str,
                 account_name: str,
                 container_name: str,
                 display_name: str,
                 path: str,
                 compress_logs: Optional[bool] = None):
        DatastreamAzureConnector._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_key=access_key,
            account_name=account_name,
            container_name=container_name,
            display_name=display_name,
            path=path,
            compress_logs=compress_logs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_key: str,
             account_name: str,
             container_name: str,
             display_name: str,
             path: str,
             compress_logs: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'accountName' in kwargs:
            account_name = kwargs['accountName']
        if 'containerName' in kwargs:
            container_name = kwargs['containerName']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'compressLogs' in kwargs:
            compress_logs = kwargs['compressLogs']

        _setter("access_key", access_key)
        _setter("account_name", account_name)
        _setter("container_name", container_name)
        _setter("display_name", display_name)
        _setter("path", path)
        if compress_logs is not None:
            _setter("compress_logs", compress_logs)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> str:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[bool]:
        return pulumi.get(self, "compress_logs")


@pulumi.output_type
class DatastreamDatadogConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authToken":
            suggest = "auth_token"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "compressLogs":
            suggest = "compress_logs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamDatadogConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamDatadogConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamDatadogConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_token: str,
                 display_name: str,
                 endpoint: str,
                 compress_logs: Optional[bool] = None,
                 service: Optional[str] = None,
                 source: Optional[str] = None,
                 tags: Optional[str] = None):
        DatastreamDatadogConnector._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_token=auth_token,
            display_name=display_name,
            endpoint=endpoint,
            compress_logs=compress_logs,
            service=service,
            source=source,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_token: str,
             display_name: str,
             endpoint: str,
             compress_logs: Optional[bool] = None,
             service: Optional[str] = None,
             source: Optional[str] = None,
             tags: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authToken' in kwargs:
            auth_token = kwargs['authToken']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'compressLogs' in kwargs:
            compress_logs = kwargs['compressLogs']

        _setter("auth_token", auth_token)
        _setter("display_name", display_name)
        _setter("endpoint", endpoint)
        if compress_logs is not None:
            _setter("compress_logs", compress_logs)
        if service is not None:
            _setter("service", service)
        if source is not None:
            _setter("source", source)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[bool]:
        return pulumi.get(self, "compress_logs")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def tags(self) -> Optional[str]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class DatastreamDeliveryConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldDelimiter":
            suggest = "field_delimiter"
        elif key == "uploadFilePrefix":
            suggest = "upload_file_prefix"
        elif key == "uploadFileSuffix":
            suggest = "upload_file_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamDeliveryConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamDeliveryConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamDeliveryConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format: str,
                 frequency: 'outputs.DatastreamDeliveryConfigurationFrequency',
                 field_delimiter: Optional[str] = None,
                 upload_file_prefix: Optional[str] = None,
                 upload_file_suffix: Optional[str] = None):
        DatastreamDeliveryConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format=format,
            frequency=frequency,
            field_delimiter=field_delimiter,
            upload_file_prefix=upload_file_prefix,
            upload_file_suffix=upload_file_suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format: str,
             frequency: 'outputs.DatastreamDeliveryConfigurationFrequency',
             field_delimiter: Optional[str] = None,
             upload_file_prefix: Optional[str] = None,
             upload_file_suffix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fieldDelimiter' in kwargs:
            field_delimiter = kwargs['fieldDelimiter']
        if 'uploadFilePrefix' in kwargs:
            upload_file_prefix = kwargs['uploadFilePrefix']
        if 'uploadFileSuffix' in kwargs:
            upload_file_suffix = kwargs['uploadFileSuffix']

        _setter("format", format)
        _setter("frequency", frequency)
        if field_delimiter is not None:
            _setter("field_delimiter", field_delimiter)
        if upload_file_prefix is not None:
            _setter("upload_file_prefix", upload_file_prefix)
        if upload_file_suffix is not None:
            _setter("upload_file_suffix", upload_file_suffix)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def frequency(self) -> 'outputs.DatastreamDeliveryConfigurationFrequency':
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> Optional[str]:
        return pulumi.get(self, "field_delimiter")

    @property
    @pulumi.getter(name="uploadFilePrefix")
    def upload_file_prefix(self) -> Optional[str]:
        return pulumi.get(self, "upload_file_prefix")

    @property
    @pulumi.getter(name="uploadFileSuffix")
    def upload_file_suffix(self) -> Optional[str]:
        return pulumi.get(self, "upload_file_suffix")


@pulumi.output_type
class DatastreamDeliveryConfigurationFrequency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "intervalInSecs":
            suggest = "interval_in_secs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamDeliveryConfigurationFrequency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamDeliveryConfigurationFrequency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamDeliveryConfigurationFrequency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval_in_secs: int):
        DatastreamDeliveryConfigurationFrequency._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            interval_in_secs=interval_in_secs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             interval_in_secs: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'intervalInSecs' in kwargs:
            interval_in_secs = kwargs['intervalInSecs']

        _setter("interval_in_secs", interval_in_secs)

    @property
    @pulumi.getter(name="intervalInSecs")
    def interval_in_secs(self) -> int:
        return pulumi.get(self, "interval_in_secs")


@pulumi.output_type
class DatastreamElasticsearchConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "indexName":
            suggest = "index_name"
        elif key == "userName":
            suggest = "user_name"
        elif key == "caCert":
            suggest = "ca_cert"
        elif key == "clientCert":
            suggest = "client_cert"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "customHeaderName":
            suggest = "custom_header_name"
        elif key == "customHeaderValue":
            suggest = "custom_header_value"
        elif key == "mTls":
            suggest = "m_tls"
        elif key == "tlsHostname":
            suggest = "tls_hostname"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamElasticsearchConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamElasticsearchConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamElasticsearchConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 endpoint: str,
                 index_name: str,
                 password: str,
                 user_name: str,
                 ca_cert: Optional[str] = None,
                 client_cert: Optional[str] = None,
                 client_key: Optional[str] = None,
                 content_type: Optional[str] = None,
                 custom_header_name: Optional[str] = None,
                 custom_header_value: Optional[str] = None,
                 m_tls: Optional[bool] = None,
                 tls_hostname: Optional[str] = None):
        DatastreamElasticsearchConnector._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            endpoint=endpoint,
            index_name=index_name,
            password=password,
            user_name=user_name,
            ca_cert=ca_cert,
            client_cert=client_cert,
            client_key=client_key,
            content_type=content_type,
            custom_header_name=custom_header_name,
            custom_header_value=custom_header_value,
            m_tls=m_tls,
            tls_hostname=tls_hostname,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: str,
             endpoint: str,
             index_name: str,
             password: str,
             user_name: str,
             ca_cert: Optional[str] = None,
             client_cert: Optional[str] = None,
             client_key: Optional[str] = None,
             content_type: Optional[str] = None,
             custom_header_name: Optional[str] = None,
             custom_header_value: Optional[str] = None,
             m_tls: Optional[bool] = None,
             tls_hostname: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'indexName' in kwargs:
            index_name = kwargs['indexName']
        if 'userName' in kwargs:
            user_name = kwargs['userName']
        if 'caCert' in kwargs:
            ca_cert = kwargs['caCert']
        if 'clientCert' in kwargs:
            client_cert = kwargs['clientCert']
        if 'clientKey' in kwargs:
            client_key = kwargs['clientKey']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'customHeaderName' in kwargs:
            custom_header_name = kwargs['customHeaderName']
        if 'customHeaderValue' in kwargs:
            custom_header_value = kwargs['customHeaderValue']
        if 'mTls' in kwargs:
            m_tls = kwargs['mTls']
        if 'tlsHostname' in kwargs:
            tls_hostname = kwargs['tlsHostname']

        _setter("display_name", display_name)
        _setter("endpoint", endpoint)
        _setter("index_name", index_name)
        _setter("password", password)
        _setter("user_name", user_name)
        if ca_cert is not None:
            _setter("ca_cert", ca_cert)
        if client_cert is not None:
            _setter("client_cert", client_cert)
        if client_key is not None:
            _setter("client_key", client_key)
        if content_type is not None:
            _setter("content_type", content_type)
        if custom_header_name is not None:
            _setter("custom_header_name", custom_header_name)
        if custom_header_value is not None:
            _setter("custom_header_value", custom_header_value)
        if m_tls is not None:
            _setter("m_tls", m_tls)
        if tls_hostname is not None:
            _setter("tls_hostname", tls_hostname)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> str:
        return pulumi.get(self, "index_name")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[str]:
        return pulumi.get(self, "ca_cert")

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[str]:
        return pulumi.get(self, "client_cert")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_value")

    @property
    @pulumi.getter(name="mTls")
    def m_tls(self) -> Optional[bool]:
        return pulumi.get(self, "m_tls")

    @property
    @pulumi.getter(name="tlsHostname")
    def tls_hostname(self) -> Optional[str]:
        return pulumi.get(self, "tls_hostname")


@pulumi.output_type
class DatastreamGcsConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "serviceAccountName":
            suggest = "service_account_name"
        elif key == "compressLogs":
            suggest = "compress_logs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamGcsConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamGcsConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamGcsConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 display_name: str,
                 private_key: str,
                 project_id: str,
                 service_account_name: str,
                 compress_logs: Optional[bool] = None,
                 path: Optional[str] = None):
        DatastreamGcsConnector._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            display_name=display_name,
            private_key=private_key,
            project_id=project_id,
            service_account_name=service_account_name,
            compress_logs=compress_logs,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: str,
             display_name: str,
             private_key: str,
             project_id: str,
             service_account_name: str,
             compress_logs: Optional[bool] = None,
             path: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'privateKey' in kwargs:
            private_key = kwargs['privateKey']
        if 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if 'serviceAccountName' in kwargs:
            service_account_name = kwargs['serviceAccountName']
        if 'compressLogs' in kwargs:
            compress_logs = kwargs['compressLogs']

        _setter("bucket", bucket)
        _setter("display_name", display_name)
        _setter("private_key", private_key)
        _setter("project_id", project_id)
        _setter("service_account_name", service_account_name)
        if compress_logs is not None:
            _setter("compress_logs", compress_logs)
        if path is not None:
            _setter("path", path)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> str:
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[bool]:
        return pulumi.get(self, "compress_logs")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class DatastreamHttpsConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationType":
            suggest = "authentication_type"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "caCert":
            suggest = "ca_cert"
        elif key == "clientCert":
            suggest = "client_cert"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "compressLogs":
            suggest = "compress_logs"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "customHeaderName":
            suggest = "custom_header_name"
        elif key == "customHeaderValue":
            suggest = "custom_header_value"
        elif key == "mTls":
            suggest = "m_tls"
        elif key == "tlsHostname":
            suggest = "tls_hostname"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamHttpsConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamHttpsConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamHttpsConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_type: str,
                 display_name: str,
                 endpoint: str,
                 ca_cert: Optional[str] = None,
                 client_cert: Optional[str] = None,
                 client_key: Optional[str] = None,
                 compress_logs: Optional[bool] = None,
                 content_type: Optional[str] = None,
                 custom_header_name: Optional[str] = None,
                 custom_header_value: Optional[str] = None,
                 m_tls: Optional[bool] = None,
                 password: Optional[str] = None,
                 tls_hostname: Optional[str] = None,
                 user_name: Optional[str] = None):
        DatastreamHttpsConnector._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authentication_type=authentication_type,
            display_name=display_name,
            endpoint=endpoint,
            ca_cert=ca_cert,
            client_cert=client_cert,
            client_key=client_key,
            compress_logs=compress_logs,
            content_type=content_type,
            custom_header_name=custom_header_name,
            custom_header_value=custom_header_value,
            m_tls=m_tls,
            password=password,
            tls_hostname=tls_hostname,
            user_name=user_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authentication_type: str,
             display_name: str,
             endpoint: str,
             ca_cert: Optional[str] = None,
             client_cert: Optional[str] = None,
             client_key: Optional[str] = None,
             compress_logs: Optional[bool] = None,
             content_type: Optional[str] = None,
             custom_header_name: Optional[str] = None,
             custom_header_value: Optional[str] = None,
             m_tls: Optional[bool] = None,
             password: Optional[str] = None,
             tls_hostname: Optional[str] = None,
             user_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authenticationType' in kwargs:
            authentication_type = kwargs['authenticationType']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'caCert' in kwargs:
            ca_cert = kwargs['caCert']
        if 'clientCert' in kwargs:
            client_cert = kwargs['clientCert']
        if 'clientKey' in kwargs:
            client_key = kwargs['clientKey']
        if 'compressLogs' in kwargs:
            compress_logs = kwargs['compressLogs']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'customHeaderName' in kwargs:
            custom_header_name = kwargs['customHeaderName']
        if 'customHeaderValue' in kwargs:
            custom_header_value = kwargs['customHeaderValue']
        if 'mTls' in kwargs:
            m_tls = kwargs['mTls']
        if 'tlsHostname' in kwargs:
            tls_hostname = kwargs['tlsHostname']
        if 'userName' in kwargs:
            user_name = kwargs['userName']

        _setter("authentication_type", authentication_type)
        _setter("display_name", display_name)
        _setter("endpoint", endpoint)
        if ca_cert is not None:
            _setter("ca_cert", ca_cert)
        if client_cert is not None:
            _setter("client_cert", client_cert)
        if client_key is not None:
            _setter("client_key", client_key)
        if compress_logs is not None:
            _setter("compress_logs", compress_logs)
        if content_type is not None:
            _setter("content_type", content_type)
        if custom_header_name is not None:
            _setter("custom_header_name", custom_header_name)
        if custom_header_value is not None:
            _setter("custom_header_value", custom_header_value)
        if m_tls is not None:
            _setter("m_tls", m_tls)
        if password is not None:
            _setter("password", password)
        if tls_hostname is not None:
            _setter("tls_hostname", tls_hostname)
        if user_name is not None:
            _setter("user_name", user_name)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> str:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[str]:
        return pulumi.get(self, "ca_cert")

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[str]:
        return pulumi.get(self, "client_cert")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[bool]:
        return pulumi.get(self, "compress_logs")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_value")

    @property
    @pulumi.getter(name="mTls")
    def m_tls(self) -> Optional[bool]:
        return pulumi.get(self, "m_tls")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="tlsHostname")
    def tls_hostname(self) -> Optional[str]:
        return pulumi.get(self, "tls_hostname")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class DatastreamLogglyConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authToken":
            suggest = "auth_token"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "customHeaderName":
            suggest = "custom_header_name"
        elif key == "customHeaderValue":
            suggest = "custom_header_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamLogglyConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamLogglyConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamLogglyConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_token: str,
                 display_name: str,
                 endpoint: str,
                 content_type: Optional[str] = None,
                 custom_header_name: Optional[str] = None,
                 custom_header_value: Optional[str] = None,
                 tags: Optional[str] = None):
        DatastreamLogglyConnector._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_token=auth_token,
            display_name=display_name,
            endpoint=endpoint,
            content_type=content_type,
            custom_header_name=custom_header_name,
            custom_header_value=custom_header_value,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_token: str,
             display_name: str,
             endpoint: str,
             content_type: Optional[str] = None,
             custom_header_name: Optional[str] = None,
             custom_header_value: Optional[str] = None,
             tags: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authToken' in kwargs:
            auth_token = kwargs['authToken']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'customHeaderName' in kwargs:
            custom_header_name = kwargs['customHeaderName']
        if 'customHeaderValue' in kwargs:
            custom_header_value = kwargs['customHeaderValue']

        _setter("auth_token", auth_token)
        _setter("display_name", display_name)
        _setter("endpoint", endpoint)
        if content_type is not None:
            _setter("content_type", content_type)
        if custom_header_name is not None:
            _setter("custom_header_name", custom_header_name)
        if custom_header_value is not None:
            _setter("custom_header_value", custom_header_value)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_value")

    @property
    @pulumi.getter
    def tags(self) -> Optional[str]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class DatastreamNewRelicConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authToken":
            suggest = "auth_token"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "customHeaderName":
            suggest = "custom_header_name"
        elif key == "customHeaderValue":
            suggest = "custom_header_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamNewRelicConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamNewRelicConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamNewRelicConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_token: str,
                 display_name: str,
                 endpoint: str,
                 content_type: Optional[str] = None,
                 custom_header_name: Optional[str] = None,
                 custom_header_value: Optional[str] = None):
        DatastreamNewRelicConnector._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_token=auth_token,
            display_name=display_name,
            endpoint=endpoint,
            content_type=content_type,
            custom_header_name=custom_header_name,
            custom_header_value=custom_header_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_token: str,
             display_name: str,
             endpoint: str,
             content_type: Optional[str] = None,
             custom_header_name: Optional[str] = None,
             custom_header_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authToken' in kwargs:
            auth_token = kwargs['authToken']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'customHeaderName' in kwargs:
            custom_header_name = kwargs['customHeaderName']
        if 'customHeaderValue' in kwargs:
            custom_header_value = kwargs['customHeaderValue']

        _setter("auth_token", auth_token)
        _setter("display_name", display_name)
        _setter("endpoint", endpoint)
        if content_type is not None:
            _setter("content_type", content_type)
        if custom_header_name is not None:
            _setter("custom_header_name", custom_header_name)
        if custom_header_value is not None:
            _setter("custom_header_value", custom_header_value)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_value")


@pulumi.output_type
class DatastreamOracleConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"
        elif key == "compressLogs":
            suggest = "compress_logs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamOracleConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamOracleConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamOracleConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: str,
                 bucket: str,
                 display_name: str,
                 namespace: str,
                 path: str,
                 region: str,
                 secret_access_key: str,
                 compress_logs: Optional[bool] = None):
        DatastreamOracleConnector._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_key=access_key,
            bucket=bucket,
            display_name=display_name,
            namespace=namespace,
            path=path,
            region=region,
            secret_access_key=secret_access_key,
            compress_logs=compress_logs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_key: str,
             bucket: str,
             display_name: str,
             namespace: str,
             path: str,
             region: str,
             secret_access_key: str,
             compress_logs: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'secretAccessKey' in kwargs:
            secret_access_key = kwargs['secretAccessKey']
        if 'compressLogs' in kwargs:
            compress_logs = kwargs['compressLogs']

        _setter("access_key", access_key)
        _setter("bucket", bucket)
        _setter("display_name", display_name)
        _setter("namespace", namespace)
        _setter("path", path)
        _setter("region", region)
        _setter("secret_access_key", secret_access_key)
        if compress_logs is not None:
            _setter("compress_logs", compress_logs)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[bool]:
        return pulumi.get(self, "compress_logs")


@pulumi.output_type
class DatastreamS3Connector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"
        elif key == "compressLogs":
            suggest = "compress_logs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamS3Connector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamS3Connector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamS3Connector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: str,
                 bucket: str,
                 display_name: str,
                 path: str,
                 region: str,
                 secret_access_key: str,
                 compress_logs: Optional[bool] = None):
        DatastreamS3Connector._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_key=access_key,
            bucket=bucket,
            display_name=display_name,
            path=path,
            region=region,
            secret_access_key=secret_access_key,
            compress_logs=compress_logs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_key: str,
             bucket: str,
             display_name: str,
             path: str,
             region: str,
             secret_access_key: str,
             compress_logs: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'secretAccessKey' in kwargs:
            secret_access_key = kwargs['secretAccessKey']
        if 'compressLogs' in kwargs:
            compress_logs = kwargs['compressLogs']

        _setter("access_key", access_key)
        _setter("bucket", bucket)
        _setter("display_name", display_name)
        _setter("path", path)
        _setter("region", region)
        _setter("secret_access_key", secret_access_key)
        if compress_logs is not None:
            _setter("compress_logs", compress_logs)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[bool]:
        return pulumi.get(self, "compress_logs")


@pulumi.output_type
class DatastreamSplunkConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "eventCollectorToken":
            suggest = "event_collector_token"
        elif key == "caCert":
            suggest = "ca_cert"
        elif key == "clientCert":
            suggest = "client_cert"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "compressLogs":
            suggest = "compress_logs"
        elif key == "customHeaderName":
            suggest = "custom_header_name"
        elif key == "customHeaderValue":
            suggest = "custom_header_value"
        elif key == "mTls":
            suggest = "m_tls"
        elif key == "tlsHostname":
            suggest = "tls_hostname"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamSplunkConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamSplunkConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamSplunkConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 endpoint: str,
                 event_collector_token: str,
                 ca_cert: Optional[str] = None,
                 client_cert: Optional[str] = None,
                 client_key: Optional[str] = None,
                 compress_logs: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 custom_header_value: Optional[str] = None,
                 m_tls: Optional[bool] = None,
                 tls_hostname: Optional[str] = None):
        DatastreamSplunkConnector._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            endpoint=endpoint,
            event_collector_token=event_collector_token,
            ca_cert=ca_cert,
            client_cert=client_cert,
            client_key=client_key,
            compress_logs=compress_logs,
            custom_header_name=custom_header_name,
            custom_header_value=custom_header_value,
            m_tls=m_tls,
            tls_hostname=tls_hostname,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: str,
             endpoint: str,
             event_collector_token: str,
             ca_cert: Optional[str] = None,
             client_cert: Optional[str] = None,
             client_key: Optional[str] = None,
             compress_logs: Optional[bool] = None,
             custom_header_name: Optional[str] = None,
             custom_header_value: Optional[str] = None,
             m_tls: Optional[bool] = None,
             tls_hostname: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'eventCollectorToken' in kwargs:
            event_collector_token = kwargs['eventCollectorToken']
        if 'caCert' in kwargs:
            ca_cert = kwargs['caCert']
        if 'clientCert' in kwargs:
            client_cert = kwargs['clientCert']
        if 'clientKey' in kwargs:
            client_key = kwargs['clientKey']
        if 'compressLogs' in kwargs:
            compress_logs = kwargs['compressLogs']
        if 'customHeaderName' in kwargs:
            custom_header_name = kwargs['customHeaderName']
        if 'customHeaderValue' in kwargs:
            custom_header_value = kwargs['customHeaderValue']
        if 'mTls' in kwargs:
            m_tls = kwargs['mTls']
        if 'tlsHostname' in kwargs:
            tls_hostname = kwargs['tlsHostname']

        _setter("display_name", display_name)
        _setter("endpoint", endpoint)
        _setter("event_collector_token", event_collector_token)
        if ca_cert is not None:
            _setter("ca_cert", ca_cert)
        if client_cert is not None:
            _setter("client_cert", client_cert)
        if client_key is not None:
            _setter("client_key", client_key)
        if compress_logs is not None:
            _setter("compress_logs", compress_logs)
        if custom_header_name is not None:
            _setter("custom_header_name", custom_header_name)
        if custom_header_value is not None:
            _setter("custom_header_value", custom_header_value)
        if m_tls is not None:
            _setter("m_tls", m_tls)
        if tls_hostname is not None:
            _setter("tls_hostname", tls_hostname)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="eventCollectorToken")
    def event_collector_token(self) -> str:
        return pulumi.get(self, "event_collector_token")

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[str]:
        return pulumi.get(self, "ca_cert")

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[str]:
        return pulumi.get(self, "client_cert")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[bool]:
        return pulumi.get(self, "compress_logs")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_value")

    @property
    @pulumi.getter(name="mTls")
    def m_tls(self) -> Optional[bool]:
        return pulumi.get(self, "m_tls")

    @property
    @pulumi.getter(name="tlsHostname")
    def tls_hostname(self) -> Optional[str]:
        return pulumi.get(self, "tls_hostname")


@pulumi.output_type
class DatastreamSumologicConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "collectorCode":
            suggest = "collector_code"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "compressLogs":
            suggest = "compress_logs"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "customHeaderName":
            suggest = "custom_header_name"
        elif key == "customHeaderValue":
            suggest = "custom_header_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamSumologicConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamSumologicConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamSumologicConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collector_code: str,
                 display_name: str,
                 endpoint: str,
                 compress_logs: Optional[bool] = None,
                 content_type: Optional[str] = None,
                 custom_header_name: Optional[str] = None,
                 custom_header_value: Optional[str] = None):
        DatastreamSumologicConnector._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            collector_code=collector_code,
            display_name=display_name,
            endpoint=endpoint,
            compress_logs=compress_logs,
            content_type=content_type,
            custom_header_name=custom_header_name,
            custom_header_value=custom_header_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             collector_code: str,
             display_name: str,
             endpoint: str,
             compress_logs: Optional[bool] = None,
             content_type: Optional[str] = None,
             custom_header_name: Optional[str] = None,
             custom_header_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'collectorCode' in kwargs:
            collector_code = kwargs['collectorCode']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'compressLogs' in kwargs:
            compress_logs = kwargs['compressLogs']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'customHeaderName' in kwargs:
            custom_header_name = kwargs['customHeaderName']
        if 'customHeaderValue' in kwargs:
            custom_header_value = kwargs['customHeaderValue']

        _setter("collector_code", collector_code)
        _setter("display_name", display_name)
        _setter("endpoint", endpoint)
        if compress_logs is not None:
            _setter("compress_logs", compress_logs)
        if content_type is not None:
            _setter("content_type", content_type)
        if custom_header_name is not None:
            _setter("custom_header_name", custom_header_name)
        if custom_header_value is not None:
            _setter("custom_header_value", custom_header_value)

    @property
    @pulumi.getter(name="collectorCode")
    def collector_code(self) -> str:
        return pulumi.get(self, "collector_code")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[bool]:
        return pulumi.get(self, "compress_logs")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_value")


@pulumi.output_type
class DnsZoneTsigKey(dict):
    def __init__(__self__, *,
                 algorithm: str,
                 name: str,
                 secret: str):
        DnsZoneTsigKey._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            algorithm=algorithm,
            name=name,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             algorithm: str,
             name: str,
             secret: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("algorithm", algorithm)
        _setter("name", name)
        _setter("secret", secret)

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")


@pulumi.output_type
class EdgeKvInitialData(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 group: Optional[str] = None):
        EdgeKvInitialData._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
            group=group,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             group: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("key", key)
        _setter("value", value)
        if group is not None:
            _setter("group", group)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")


@pulumi.output_type
class GtmAsmapAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asNumbers":
            suggest = "as_numbers"
        elif key == "datacenterId":
            suggest = "datacenter_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmAsmapAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmAsmapAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmAsmapAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_numbers: Sequence[int],
                 datacenter_id: int,
                 nickname: str):
        GtmAsmapAssignment._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            as_numbers=as_numbers,
            datacenter_id=datacenter_id,
            nickname=nickname,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             as_numbers: Sequence[int],
             datacenter_id: int,
             nickname: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'asNumbers' in kwargs:
            as_numbers = kwargs['asNumbers']
        if 'datacenterId' in kwargs:
            datacenter_id = kwargs['datacenterId']

        _setter("as_numbers", as_numbers)
        _setter("datacenter_id", datacenter_id)
        _setter("nickname", nickname)

    @property
    @pulumi.getter(name="asNumbers")
    def as_numbers(self) -> Sequence[int]:
        return pulumi.get(self, "as_numbers")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> int:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def nickname(self) -> str:
        return pulumi.get(self, "nickname")


@pulumi.output_type
class GtmAsmapDefaultDatacenter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmAsmapDefaultDatacenter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmAsmapDefaultDatacenter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmAsmapDefaultDatacenter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter_id: int,
                 nickname: Optional[str] = None):
        GtmAsmapDefaultDatacenter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datacenter_id=datacenter_id,
            nickname=nickname,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datacenter_id: int,
             nickname: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'datacenterId' in kwargs:
            datacenter_id = kwargs['datacenterId']

        _setter("datacenter_id", datacenter_id)
        if nickname is not None:
            _setter("nickname", nickname)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> int:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def nickname(self) -> Optional[str]:
        return pulumi.get(self, "nickname")


@pulumi.output_type
class GtmCidrmapAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmCidrmapAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmCidrmapAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmCidrmapAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter_id: int,
                 nickname: str,
                 blocks: Optional[Sequence[str]] = None):
        GtmCidrmapAssignment._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datacenter_id=datacenter_id,
            nickname=nickname,
            blocks=blocks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datacenter_id: int,
             nickname: str,
             blocks: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'datacenterId' in kwargs:
            datacenter_id = kwargs['datacenterId']

        _setter("datacenter_id", datacenter_id)
        _setter("nickname", nickname)
        if blocks is not None:
            _setter("blocks", blocks)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> int:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def nickname(self) -> str:
        return pulumi.get(self, "nickname")

    @property
    @pulumi.getter
    def blocks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "blocks")


@pulumi.output_type
class GtmCidrmapDefaultDatacenter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmCidrmapDefaultDatacenter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmCidrmapDefaultDatacenter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmCidrmapDefaultDatacenter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter_id: int,
                 nickname: Optional[str] = None):
        GtmCidrmapDefaultDatacenter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datacenter_id=datacenter_id,
            nickname=nickname,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datacenter_id: int,
             nickname: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'datacenterId' in kwargs:
            datacenter_id = kwargs['datacenterId']

        _setter("datacenter_id", datacenter_id)
        if nickname is not None:
            _setter("nickname", nickname)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> int:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def nickname(self) -> Optional[str]:
        return pulumi.get(self, "nickname")


@pulumi.output_type
class GtmDatacenterDefaultLoadObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "loadObject":
            suggest = "load_object"
        elif key == "loadObjectPort":
            suggest = "load_object_port"
        elif key == "loadServers":
            suggest = "load_servers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmDatacenterDefaultLoadObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmDatacenterDefaultLoadObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmDatacenterDefaultLoadObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 load_object: Optional[str] = None,
                 load_object_port: Optional[int] = None,
                 load_servers: Optional[Sequence[str]] = None):
        GtmDatacenterDefaultLoadObject._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            load_object=load_object,
            load_object_port=load_object_port,
            load_servers=load_servers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             load_object: Optional[str] = None,
             load_object_port: Optional[int] = None,
             load_servers: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'loadObject' in kwargs:
            load_object = kwargs['loadObject']
        if 'loadObjectPort' in kwargs:
            load_object_port = kwargs['loadObjectPort']
        if 'loadServers' in kwargs:
            load_servers = kwargs['loadServers']

        if load_object is not None:
            _setter("load_object", load_object)
        if load_object_port is not None:
            _setter("load_object_port", load_object_port)
        if load_servers is not None:
            _setter("load_servers", load_servers)

    @property
    @pulumi.getter(name="loadObject")
    def load_object(self) -> Optional[str]:
        return pulumi.get(self, "load_object")

    @property
    @pulumi.getter(name="loadObjectPort")
    def load_object_port(self) -> Optional[int]:
        return pulumi.get(self, "load_object_port")

    @property
    @pulumi.getter(name="loadServers")
    def load_servers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "load_servers")


@pulumi.output_type
class GtmGeomapAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmGeomapAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmGeomapAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmGeomapAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter_id: int,
                 nickname: str,
                 countries: Optional[Sequence[str]] = None):
        GtmGeomapAssignment._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datacenter_id=datacenter_id,
            nickname=nickname,
            countries=countries,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datacenter_id: int,
             nickname: str,
             countries: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'datacenterId' in kwargs:
            datacenter_id = kwargs['datacenterId']

        _setter("datacenter_id", datacenter_id)
        _setter("nickname", nickname)
        if countries is not None:
            _setter("countries", countries)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> int:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def nickname(self) -> str:
        return pulumi.get(self, "nickname")

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "countries")


@pulumi.output_type
class GtmGeomapDefaultDatacenter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmGeomapDefaultDatacenter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmGeomapDefaultDatacenter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmGeomapDefaultDatacenter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter_id: int,
                 nickname: Optional[str] = None):
        GtmGeomapDefaultDatacenter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datacenter_id=datacenter_id,
            nickname=nickname,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datacenter_id: int,
             nickname: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'datacenterId' in kwargs:
            datacenter_id = kwargs['datacenterId']

        _setter("datacenter_id", datacenter_id)
        if nickname is not None:
            _setter("nickname", nickname)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> int:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def nickname(self) -> Optional[str]:
        return pulumi.get(self, "nickname")


@pulumi.output_type
class GtmPropertyLivenessTest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "testInterval":
            suggest = "test_interval"
        elif key == "testObjectProtocol":
            suggest = "test_object_protocol"
        elif key == "testTimeout":
            suggest = "test_timeout"
        elif key == "answersRequired":
            suggest = "answers_required"
        elif key == "disableNonstandardPortWarning":
            suggest = "disable_nonstandard_port_warning"
        elif key == "errorPenalty":
            suggest = "error_penalty"
        elif key == "httpError3xx":
            suggest = "http_error3xx"
        elif key == "httpError4xx":
            suggest = "http_error4xx"
        elif key == "httpError5xx":
            suggest = "http_error5xx"
        elif key == "httpHeaders":
            suggest = "http_headers"
        elif key == "peerCertificateVerification":
            suggest = "peer_certificate_verification"
        elif key == "recursionRequested":
            suggest = "recursion_requested"
        elif key == "requestString":
            suggest = "request_string"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "responseString":
            suggest = "response_string"
        elif key == "sslClientCertificate":
            suggest = "ssl_client_certificate"
        elif key == "sslClientPrivateKey":
            suggest = "ssl_client_private_key"
        elif key == "testObject":
            suggest = "test_object"
        elif key == "testObjectPassword":
            suggest = "test_object_password"
        elif key == "testObjectPort":
            suggest = "test_object_port"
        elif key == "testObjectUsername":
            suggest = "test_object_username"
        elif key == "timeoutPenalty":
            suggest = "timeout_penalty"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmPropertyLivenessTest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmPropertyLivenessTest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmPropertyLivenessTest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 test_interval: int,
                 test_object_protocol: str,
                 test_timeout: float,
                 answers_required: Optional[bool] = None,
                 disable_nonstandard_port_warning: Optional[bool] = None,
                 disabled: Optional[bool] = None,
                 error_penalty: Optional[float] = None,
                 http_error3xx: Optional[bool] = None,
                 http_error4xx: Optional[bool] = None,
                 http_error5xx: Optional[bool] = None,
                 http_headers: Optional[Sequence['outputs.GtmPropertyLivenessTestHttpHeader']] = None,
                 peer_certificate_verification: Optional[bool] = None,
                 recursion_requested: Optional[bool] = None,
                 request_string: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 response_string: Optional[str] = None,
                 ssl_client_certificate: Optional[str] = None,
                 ssl_client_private_key: Optional[str] = None,
                 test_object: Optional[str] = None,
                 test_object_password: Optional[str] = None,
                 test_object_port: Optional[int] = None,
                 test_object_username: Optional[str] = None,
                 timeout_penalty: Optional[float] = None):
        GtmPropertyLivenessTest._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            test_interval=test_interval,
            test_object_protocol=test_object_protocol,
            test_timeout=test_timeout,
            answers_required=answers_required,
            disable_nonstandard_port_warning=disable_nonstandard_port_warning,
            disabled=disabled,
            error_penalty=error_penalty,
            http_error3xx=http_error3xx,
            http_error4xx=http_error4xx,
            http_error5xx=http_error5xx,
            http_headers=http_headers,
            peer_certificate_verification=peer_certificate_verification,
            recursion_requested=recursion_requested,
            request_string=request_string,
            resource_type=resource_type,
            response_string=response_string,
            ssl_client_certificate=ssl_client_certificate,
            ssl_client_private_key=ssl_client_private_key,
            test_object=test_object,
            test_object_password=test_object_password,
            test_object_port=test_object_port,
            test_object_username=test_object_username,
            timeout_penalty=timeout_penalty,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             test_interval: int,
             test_object_protocol: str,
             test_timeout: float,
             answers_required: Optional[bool] = None,
             disable_nonstandard_port_warning: Optional[bool] = None,
             disabled: Optional[bool] = None,
             error_penalty: Optional[float] = None,
             http_error3xx: Optional[bool] = None,
             http_error4xx: Optional[bool] = None,
             http_error5xx: Optional[bool] = None,
             http_headers: Optional[Sequence['outputs.GtmPropertyLivenessTestHttpHeader']] = None,
             peer_certificate_verification: Optional[bool] = None,
             recursion_requested: Optional[bool] = None,
             request_string: Optional[str] = None,
             resource_type: Optional[str] = None,
             response_string: Optional[str] = None,
             ssl_client_certificate: Optional[str] = None,
             ssl_client_private_key: Optional[str] = None,
             test_object: Optional[str] = None,
             test_object_password: Optional[str] = None,
             test_object_port: Optional[int] = None,
             test_object_username: Optional[str] = None,
             timeout_penalty: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'testInterval' in kwargs:
            test_interval = kwargs['testInterval']
        if 'testObjectProtocol' in kwargs:
            test_object_protocol = kwargs['testObjectProtocol']
        if 'testTimeout' in kwargs:
            test_timeout = kwargs['testTimeout']
        if 'answersRequired' in kwargs:
            answers_required = kwargs['answersRequired']
        if 'disableNonstandardPortWarning' in kwargs:
            disable_nonstandard_port_warning = kwargs['disableNonstandardPortWarning']
        if 'errorPenalty' in kwargs:
            error_penalty = kwargs['errorPenalty']
        if 'httpError3xx' in kwargs:
            http_error3xx = kwargs['httpError3xx']
        if 'httpError4xx' in kwargs:
            http_error4xx = kwargs['httpError4xx']
        if 'httpError5xx' in kwargs:
            http_error5xx = kwargs['httpError5xx']
        if 'httpHeaders' in kwargs:
            http_headers = kwargs['httpHeaders']
        if 'peerCertificateVerification' in kwargs:
            peer_certificate_verification = kwargs['peerCertificateVerification']
        if 'recursionRequested' in kwargs:
            recursion_requested = kwargs['recursionRequested']
        if 'requestString' in kwargs:
            request_string = kwargs['requestString']
        if 'resourceType' in kwargs:
            resource_type = kwargs['resourceType']
        if 'responseString' in kwargs:
            response_string = kwargs['responseString']
        if 'sslClientCertificate' in kwargs:
            ssl_client_certificate = kwargs['sslClientCertificate']
        if 'sslClientPrivateKey' in kwargs:
            ssl_client_private_key = kwargs['sslClientPrivateKey']
        if 'testObject' in kwargs:
            test_object = kwargs['testObject']
        if 'testObjectPassword' in kwargs:
            test_object_password = kwargs['testObjectPassword']
        if 'testObjectPort' in kwargs:
            test_object_port = kwargs['testObjectPort']
        if 'testObjectUsername' in kwargs:
            test_object_username = kwargs['testObjectUsername']
        if 'timeoutPenalty' in kwargs:
            timeout_penalty = kwargs['timeoutPenalty']

        _setter("name", name)
        _setter("test_interval", test_interval)
        _setter("test_object_protocol", test_object_protocol)
        _setter("test_timeout", test_timeout)
        if answers_required is not None:
            _setter("answers_required", answers_required)
        if disable_nonstandard_port_warning is not None:
            _setter("disable_nonstandard_port_warning", disable_nonstandard_port_warning)
        if disabled is not None:
            _setter("disabled", disabled)
        if error_penalty is not None:
            _setter("error_penalty", error_penalty)
        if http_error3xx is not None:
            _setter("http_error3xx", http_error3xx)
        if http_error4xx is not None:
            _setter("http_error4xx", http_error4xx)
        if http_error5xx is not None:
            _setter("http_error5xx", http_error5xx)
        if http_headers is not None:
            _setter("http_headers", http_headers)
        if peer_certificate_verification is not None:
            _setter("peer_certificate_verification", peer_certificate_verification)
        if recursion_requested is not None:
            _setter("recursion_requested", recursion_requested)
        if request_string is not None:
            _setter("request_string", request_string)
        if resource_type is not None:
            _setter("resource_type", resource_type)
        if response_string is not None:
            _setter("response_string", response_string)
        if ssl_client_certificate is not None:
            _setter("ssl_client_certificate", ssl_client_certificate)
        if ssl_client_private_key is not None:
            _setter("ssl_client_private_key", ssl_client_private_key)
        if test_object is not None:
            _setter("test_object", test_object)
        if test_object_password is not None:
            _setter("test_object_password", test_object_password)
        if test_object_port is not None:
            _setter("test_object_port", test_object_port)
        if test_object_username is not None:
            _setter("test_object_username", test_object_username)
        if timeout_penalty is not None:
            _setter("timeout_penalty", timeout_penalty)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="testInterval")
    def test_interval(self) -> int:
        return pulumi.get(self, "test_interval")

    @property
    @pulumi.getter(name="testObjectProtocol")
    def test_object_protocol(self) -> str:
        return pulumi.get(self, "test_object_protocol")

    @property
    @pulumi.getter(name="testTimeout")
    def test_timeout(self) -> float:
        return pulumi.get(self, "test_timeout")

    @property
    @pulumi.getter(name="answersRequired")
    def answers_required(self) -> Optional[bool]:
        return pulumi.get(self, "answers_required")

    @property
    @pulumi.getter(name="disableNonstandardPortWarning")
    def disable_nonstandard_port_warning(self) -> Optional[bool]:
        return pulumi.get(self, "disable_nonstandard_port_warning")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="errorPenalty")
    def error_penalty(self) -> Optional[float]:
        return pulumi.get(self, "error_penalty")

    @property
    @pulumi.getter(name="httpError3xx")
    def http_error3xx(self) -> Optional[bool]:
        return pulumi.get(self, "http_error3xx")

    @property
    @pulumi.getter(name="httpError4xx")
    def http_error4xx(self) -> Optional[bool]:
        return pulumi.get(self, "http_error4xx")

    @property
    @pulumi.getter(name="httpError5xx")
    def http_error5xx(self) -> Optional[bool]:
        return pulumi.get(self, "http_error5xx")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.GtmPropertyLivenessTestHttpHeader']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter(name="peerCertificateVerification")
    def peer_certificate_verification(self) -> Optional[bool]:
        return pulumi.get(self, "peer_certificate_verification")

    @property
    @pulumi.getter(name="recursionRequested")
    def recursion_requested(self) -> Optional[bool]:
        return pulumi.get(self, "recursion_requested")

    @property
    @pulumi.getter(name="requestString")
    def request_string(self) -> Optional[str]:
        return pulumi.get(self, "request_string")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="responseString")
    def response_string(self) -> Optional[str]:
        return pulumi.get(self, "response_string")

    @property
    @pulumi.getter(name="sslClientCertificate")
    def ssl_client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "ssl_client_certificate")

    @property
    @pulumi.getter(name="sslClientPrivateKey")
    def ssl_client_private_key(self) -> Optional[str]:
        return pulumi.get(self, "ssl_client_private_key")

    @property
    @pulumi.getter(name="testObject")
    def test_object(self) -> Optional[str]:
        return pulumi.get(self, "test_object")

    @property
    @pulumi.getter(name="testObjectPassword")
    def test_object_password(self) -> Optional[str]:
        return pulumi.get(self, "test_object_password")

    @property
    @pulumi.getter(name="testObjectPort")
    def test_object_port(self) -> Optional[int]:
        return pulumi.get(self, "test_object_port")

    @property
    @pulumi.getter(name="testObjectUsername")
    def test_object_username(self) -> Optional[str]:
        return pulumi.get(self, "test_object_username")

    @property
    @pulumi.getter(name="timeoutPenalty")
    def timeout_penalty(self) -> Optional[float]:
        return pulumi.get(self, "timeout_penalty")


@pulumi.output_type
class GtmPropertyLivenessTestHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        GtmPropertyLivenessTestHttpHeader._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if name is not None:
            _setter("name", name)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GtmPropertyStaticRrSet(dict):
    def __init__(__self__, *,
                 rdatas: Optional[Sequence[str]] = None,
                 ttl: Optional[int] = None,
                 type: Optional[str] = None):
        GtmPropertyStaticRrSet._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rdatas=rdatas,
            ttl=ttl,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rdatas: Optional[Sequence[str]] = None,
             ttl: Optional[int] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if rdatas is not None:
            _setter("rdatas", rdatas)
        if ttl is not None:
            _setter("ttl", ttl)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def rdatas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "rdatas")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GtmPropertyTrafficTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"
        elif key == "handoutCname":
            suggest = "handout_cname"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmPropertyTrafficTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmPropertyTrafficTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmPropertyTrafficTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter_id: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 handout_cname: Optional[str] = None,
                 name: Optional[str] = None,
                 servers: Optional[Sequence[str]] = None,
                 weight: Optional[float] = None):
        GtmPropertyTrafficTarget._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datacenter_id=datacenter_id,
            enabled=enabled,
            handout_cname=handout_cname,
            name=name,
            servers=servers,
            weight=weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datacenter_id: Optional[int] = None,
             enabled: Optional[bool] = None,
             handout_cname: Optional[str] = None,
             name: Optional[str] = None,
             servers: Optional[Sequence[str]] = None,
             weight: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'datacenterId' in kwargs:
            datacenter_id = kwargs['datacenterId']
        if 'handoutCname' in kwargs:
            handout_cname = kwargs['handoutCname']

        if datacenter_id is not None:
            _setter("datacenter_id", datacenter_id)
        if enabled is not None:
            _setter("enabled", enabled)
        if handout_cname is not None:
            _setter("handout_cname", handout_cname)
        if name is not None:
            _setter("name", name)
        if servers is not None:
            _setter("servers", servers)
        if weight is not None:
            _setter("weight", weight)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[int]:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="handoutCname")
    def handout_cname(self) -> Optional[str]:
        return pulumi.get(self, "handout_cname")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        warnings.warn("""The attribute `name` has been deprecated. Any reads or writes on this attribute are ignored""", DeprecationWarning)
        pulumi.log.warn("""name is deprecated: The attribute `name` has been deprecated. Any reads or writes on this attribute are ignored""")

        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter
    def weight(self) -> Optional[float]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GtmResourceResourceInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"
        elif key == "loadObject":
            suggest = "load_object"
        elif key == "loadObjectPort":
            suggest = "load_object_port"
        elif key == "loadServers":
            suggest = "load_servers"
        elif key == "useDefaultLoadObject":
            suggest = "use_default_load_object"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmResourceResourceInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmResourceResourceInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmResourceResourceInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter_id: int,
                 load_object: Optional[str] = None,
                 load_object_port: Optional[int] = None,
                 load_servers: Optional[Sequence[str]] = None,
                 use_default_load_object: Optional[bool] = None):
        GtmResourceResourceInstance._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datacenter_id=datacenter_id,
            load_object=load_object,
            load_object_port=load_object_port,
            load_servers=load_servers,
            use_default_load_object=use_default_load_object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datacenter_id: int,
             load_object: Optional[str] = None,
             load_object_port: Optional[int] = None,
             load_servers: Optional[Sequence[str]] = None,
             use_default_load_object: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'datacenterId' in kwargs:
            datacenter_id = kwargs['datacenterId']
        if 'loadObject' in kwargs:
            load_object = kwargs['loadObject']
        if 'loadObjectPort' in kwargs:
            load_object_port = kwargs['loadObjectPort']
        if 'loadServers' in kwargs:
            load_servers = kwargs['loadServers']
        if 'useDefaultLoadObject' in kwargs:
            use_default_load_object = kwargs['useDefaultLoadObject']

        _setter("datacenter_id", datacenter_id)
        if load_object is not None:
            _setter("load_object", load_object)
        if load_object_port is not None:
            _setter("load_object_port", load_object_port)
        if load_servers is not None:
            _setter("load_servers", load_servers)
        if use_default_load_object is not None:
            _setter("use_default_load_object", use_default_load_object)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> int:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="loadObject")
    def load_object(self) -> Optional[str]:
        return pulumi.get(self, "load_object")

    @property
    @pulumi.getter(name="loadObjectPort")
    def load_object_port(self) -> Optional[int]:
        return pulumi.get(self, "load_object_port")

    @property
    @pulumi.getter(name="loadServers")
    def load_servers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "load_servers")

    @property
    @pulumi.getter(name="useDefaultLoadObject")
    def use_default_load_object(self) -> Optional[bool]:
        return pulumi.get(self, "use_default_load_object")


@pulumi.output_type
class PropertyActivationComplianceRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "noncomplianceReasonEmergency":
            suggest = "noncompliance_reason_emergency"
        elif key == "noncomplianceReasonNoProductionTraffic":
            suggest = "noncompliance_reason_no_production_traffic"
        elif key == "noncomplianceReasonNone":
            suggest = "noncompliance_reason_none"
        elif key == "noncomplianceReasonOther":
            suggest = "noncompliance_reason_other"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationComplianceRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationComplianceRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationComplianceRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 noncompliance_reason_emergency: Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonEmergency'] = None,
                 noncompliance_reason_no_production_traffic: Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic'] = None,
                 noncompliance_reason_none: Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonNone'] = None,
                 noncompliance_reason_other: Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonOther'] = None):
        PropertyActivationComplianceRecord._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            noncompliance_reason_emergency=noncompliance_reason_emergency,
            noncompliance_reason_no_production_traffic=noncompliance_reason_no_production_traffic,
            noncompliance_reason_none=noncompliance_reason_none,
            noncompliance_reason_other=noncompliance_reason_other,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             noncompliance_reason_emergency: Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonEmergency'] = None,
             noncompliance_reason_no_production_traffic: Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic'] = None,
             noncompliance_reason_none: Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonNone'] = None,
             noncompliance_reason_other: Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonOther'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'noncomplianceReasonEmergency' in kwargs:
            noncompliance_reason_emergency = kwargs['noncomplianceReasonEmergency']
        if 'noncomplianceReasonNoProductionTraffic' in kwargs:
            noncompliance_reason_no_production_traffic = kwargs['noncomplianceReasonNoProductionTraffic']
        if 'noncomplianceReasonNone' in kwargs:
            noncompliance_reason_none = kwargs['noncomplianceReasonNone']
        if 'noncomplianceReasonOther' in kwargs:
            noncompliance_reason_other = kwargs['noncomplianceReasonOther']

        if noncompliance_reason_emergency is not None:
            _setter("noncompliance_reason_emergency", noncompliance_reason_emergency)
        if noncompliance_reason_no_production_traffic is not None:
            _setter("noncompliance_reason_no_production_traffic", noncompliance_reason_no_production_traffic)
        if noncompliance_reason_none is not None:
            _setter("noncompliance_reason_none", noncompliance_reason_none)
        if noncompliance_reason_other is not None:
            _setter("noncompliance_reason_other", noncompliance_reason_other)

    @property
    @pulumi.getter(name="noncomplianceReasonEmergency")
    def noncompliance_reason_emergency(self) -> Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonEmergency']:
        return pulumi.get(self, "noncompliance_reason_emergency")

    @property
    @pulumi.getter(name="noncomplianceReasonNoProductionTraffic")
    def noncompliance_reason_no_production_traffic(self) -> Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic']:
        return pulumi.get(self, "noncompliance_reason_no_production_traffic")

    @property
    @pulumi.getter(name="noncomplianceReasonNone")
    def noncompliance_reason_none(self) -> Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonNone']:
        return pulumi.get(self, "noncompliance_reason_none")

    @property
    @pulumi.getter(name="noncomplianceReasonOther")
    def noncompliance_reason_other(self) -> Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonOther']:
        return pulumi.get(self, "noncompliance_reason_other")


@pulumi.output_type
class PropertyActivationComplianceRecordNoncomplianceReasonEmergency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ticketId":
            suggest = "ticket_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationComplianceRecordNoncomplianceReasonEmergency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonEmergency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonEmergency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ticket_id: Optional[str] = None):
        PropertyActivationComplianceRecordNoncomplianceReasonEmergency._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ticket_id=ticket_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ticket_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ticketId' in kwargs:
            ticket_id = kwargs['ticketId']

        if ticket_id is not None:
            _setter("ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")


@pulumi.output_type
class PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ticketId":
            suggest = "ticket_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ticket_id: Optional[str] = None):
        PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ticket_id=ticket_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ticket_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ticketId' in kwargs:
            ticket_id = kwargs['ticketId']

        if ticket_id is not None:
            _setter("ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")


@pulumi.output_type
class PropertyActivationComplianceRecordNoncomplianceReasonNone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerEmail":
            suggest = "customer_email"
        elif key == "peerReviewedBy":
            suggest = "peer_reviewed_by"
        elif key == "ticketId":
            suggest = "ticket_id"
        elif key == "unitTested":
            suggest = "unit_tested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationComplianceRecordNoncomplianceReasonNone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonNone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonNone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_email: Optional[str] = None,
                 peer_reviewed_by: Optional[str] = None,
                 ticket_id: Optional[str] = None,
                 unit_tested: Optional[bool] = None):
        PropertyActivationComplianceRecordNoncomplianceReasonNone._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            customer_email=customer_email,
            peer_reviewed_by=peer_reviewed_by,
            ticket_id=ticket_id,
            unit_tested=unit_tested,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             customer_email: Optional[str] = None,
             peer_reviewed_by: Optional[str] = None,
             ticket_id: Optional[str] = None,
             unit_tested: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customerEmail' in kwargs:
            customer_email = kwargs['customerEmail']
        if 'peerReviewedBy' in kwargs:
            peer_reviewed_by = kwargs['peerReviewedBy']
        if 'ticketId' in kwargs:
            ticket_id = kwargs['ticketId']
        if 'unitTested' in kwargs:
            unit_tested = kwargs['unitTested']

        if customer_email is not None:
            _setter("customer_email", customer_email)
        if peer_reviewed_by is not None:
            _setter("peer_reviewed_by", peer_reviewed_by)
        if ticket_id is not None:
            _setter("ticket_id", ticket_id)
        if unit_tested is not None:
            _setter("unit_tested", unit_tested)

    @property
    @pulumi.getter(name="customerEmail")
    def customer_email(self) -> Optional[str]:
        return pulumi.get(self, "customer_email")

    @property
    @pulumi.getter(name="peerReviewedBy")
    def peer_reviewed_by(self) -> Optional[str]:
        return pulumi.get(self, "peer_reviewed_by")

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")

    @property
    @pulumi.getter(name="unitTested")
    def unit_tested(self) -> Optional[bool]:
        return pulumi.get(self, "unit_tested")


@pulumi.output_type
class PropertyActivationComplianceRecordNoncomplianceReasonOther(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "otherNoncomplianceReason":
            suggest = "other_noncompliance_reason"
        elif key == "ticketId":
            suggest = "ticket_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationComplianceRecordNoncomplianceReasonOther. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonOther.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonOther.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 other_noncompliance_reason: Optional[str] = None,
                 ticket_id: Optional[str] = None):
        PropertyActivationComplianceRecordNoncomplianceReasonOther._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            other_noncompliance_reason=other_noncompliance_reason,
            ticket_id=ticket_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             other_noncompliance_reason: Optional[str] = None,
             ticket_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'otherNoncomplianceReason' in kwargs:
            other_noncompliance_reason = kwargs['otherNoncomplianceReason']
        if 'ticketId' in kwargs:
            ticket_id = kwargs['ticketId']

        if other_noncompliance_reason is not None:
            _setter("other_noncompliance_reason", other_noncompliance_reason)
        if ticket_id is not None:
            _setter("ticket_id", ticket_id)

    @property
    @pulumi.getter(name="otherNoncomplianceReason")
    def other_noncompliance_reason(self) -> Optional[str]:
        return pulumi.get(self, "other_noncompliance_reason")

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")


@pulumi.output_type
class PropertyActivationRuleError(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "behaviorName":
            suggest = "behavior_name"
        elif key == "errorLocation":
            suggest = "error_location"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationRuleError. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationRuleError.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationRuleError.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 behavior_name: Optional[str] = None,
                 detail: Optional[str] = None,
                 error_location: Optional[str] = None,
                 instance: Optional[str] = None,
                 status_code: Optional[int] = None,
                 title: Optional[str] = None,
                 type: Optional[str] = None):
        PropertyActivationRuleError._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior_name=behavior_name,
            detail=detail,
            error_location=error_location,
            instance=instance,
            status_code=status_code,
            title=title,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior_name: Optional[str] = None,
             detail: Optional[str] = None,
             error_location: Optional[str] = None,
             instance: Optional[str] = None,
             status_code: Optional[int] = None,
             title: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'behaviorName' in kwargs:
            behavior_name = kwargs['behaviorName']
        if 'errorLocation' in kwargs:
            error_location = kwargs['errorLocation']
        if 'statusCode' in kwargs:
            status_code = kwargs['statusCode']

        if behavior_name is not None:
            _setter("behavior_name", behavior_name)
        if detail is not None:
            _setter("detail", detail)
        if error_location is not None:
            _setter("error_location", error_location)
        if instance is not None:
            _setter("instance", instance)
        if status_code is not None:
            _setter("status_code", status_code)
        if title is not None:
            _setter("title", title)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="behaviorName")
    def behavior_name(self) -> Optional[str]:
        return pulumi.get(self, "behavior_name")

    @property
    @pulumi.getter
    def detail(self) -> Optional[str]:
        return pulumi.get(self, "detail")

    @property
    @pulumi.getter(name="errorLocation")
    def error_location(self) -> Optional[str]:
        return pulumi.get(self, "error_location")

    @property
    @pulumi.getter
    def instance(self) -> Optional[str]:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class PropertyHostname(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certProvisioningType":
            suggest = "cert_provisioning_type"
        elif key == "cnameFrom":
            suggest = "cname_from"
        elif key == "cnameTo":
            suggest = "cname_to"
        elif key == "certStatuses":
            suggest = "cert_statuses"
        elif key == "cnameType":
            suggest = "cname_type"
        elif key == "edgeHostnameId":
            suggest = "edge_hostname_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyHostname. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyHostname.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyHostname.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_provisioning_type: str,
                 cname_from: str,
                 cname_to: str,
                 cert_statuses: Optional[Sequence['outputs.PropertyHostnameCertStatus']] = None,
                 cname_type: Optional[str] = None,
                 edge_hostname_id: Optional[str] = None):
        PropertyHostname._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cert_provisioning_type=cert_provisioning_type,
            cname_from=cname_from,
            cname_to=cname_to,
            cert_statuses=cert_statuses,
            cname_type=cname_type,
            edge_hostname_id=edge_hostname_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cert_provisioning_type: str,
             cname_from: str,
             cname_to: str,
             cert_statuses: Optional[Sequence['outputs.PropertyHostnameCertStatus']] = None,
             cname_type: Optional[str] = None,
             edge_hostname_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'certProvisioningType' in kwargs:
            cert_provisioning_type = kwargs['certProvisioningType']
        if 'cnameFrom' in kwargs:
            cname_from = kwargs['cnameFrom']
        if 'cnameTo' in kwargs:
            cname_to = kwargs['cnameTo']
        if 'certStatuses' in kwargs:
            cert_statuses = kwargs['certStatuses']
        if 'cnameType' in kwargs:
            cname_type = kwargs['cnameType']
        if 'edgeHostnameId' in kwargs:
            edge_hostname_id = kwargs['edgeHostnameId']

        _setter("cert_provisioning_type", cert_provisioning_type)
        _setter("cname_from", cname_from)
        _setter("cname_to", cname_to)
        if cert_statuses is not None:
            _setter("cert_statuses", cert_statuses)
        if cname_type is not None:
            _setter("cname_type", cname_type)
        if edge_hostname_id is not None:
            _setter("edge_hostname_id", edge_hostname_id)

    @property
    @pulumi.getter(name="certProvisioningType")
    def cert_provisioning_type(self) -> str:
        return pulumi.get(self, "cert_provisioning_type")

    @property
    @pulumi.getter(name="cnameFrom")
    def cname_from(self) -> str:
        return pulumi.get(self, "cname_from")

    @property
    @pulumi.getter(name="cnameTo")
    def cname_to(self) -> str:
        return pulumi.get(self, "cname_to")

    @property
    @pulumi.getter(name="certStatuses")
    def cert_statuses(self) -> Optional[Sequence['outputs.PropertyHostnameCertStatus']]:
        return pulumi.get(self, "cert_statuses")

    @property
    @pulumi.getter(name="cnameType")
    def cname_type(self) -> Optional[str]:
        return pulumi.get(self, "cname_type")

    @property
    @pulumi.getter(name="edgeHostnameId")
    def edge_hostname_id(self) -> Optional[str]:
        return pulumi.get(self, "edge_hostname_id")


@pulumi.output_type
class PropertyHostnameCertStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "productionStatus":
            suggest = "production_status"
        elif key == "stagingStatus":
            suggest = "staging_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyHostnameCertStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyHostnameCertStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyHostnameCertStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 production_status: Optional[str] = None,
                 staging_status: Optional[str] = None,
                 target: Optional[str] = None):
        PropertyHostnameCertStatus._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hostname=hostname,
            production_status=production_status,
            staging_status=staging_status,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hostname: Optional[str] = None,
             production_status: Optional[str] = None,
             staging_status: Optional[str] = None,
             target: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'productionStatus' in kwargs:
            production_status = kwargs['productionStatus']
        if 'stagingStatus' in kwargs:
            staging_status = kwargs['stagingStatus']

        if hostname is not None:
            _setter("hostname", hostname)
        if production_status is not None:
            _setter("production_status", production_status)
        if staging_status is not None:
            _setter("staging_status", staging_status)
        if target is not None:
            _setter("target", target)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="productionStatus")
    def production_status(self) -> Optional[str]:
        return pulumi.get(self, "production_status")

    @property
    @pulumi.getter(name="stagingStatus")
    def staging_status(self) -> Optional[str]:
        return pulumi.get(self, "staging_status")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class PropertyIncludeActivationComplianceRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "noncomplianceReasonEmergency":
            suggest = "noncompliance_reason_emergency"
        elif key == "noncomplianceReasonNoProductionTraffic":
            suggest = "noncompliance_reason_no_production_traffic"
        elif key == "noncomplianceReasonNone":
            suggest = "noncompliance_reason_none"
        elif key == "noncomplianceReasonOther":
            suggest = "noncompliance_reason_other"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyIncludeActivationComplianceRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyIncludeActivationComplianceRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyIncludeActivationComplianceRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 noncompliance_reason_emergency: Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency'] = None,
                 noncompliance_reason_no_production_traffic: Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic'] = None,
                 noncompliance_reason_none: Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone'] = None,
                 noncompliance_reason_other: Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther'] = None):
        PropertyIncludeActivationComplianceRecord._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            noncompliance_reason_emergency=noncompliance_reason_emergency,
            noncompliance_reason_no_production_traffic=noncompliance_reason_no_production_traffic,
            noncompliance_reason_none=noncompliance_reason_none,
            noncompliance_reason_other=noncompliance_reason_other,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             noncompliance_reason_emergency: Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency'] = None,
             noncompliance_reason_no_production_traffic: Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic'] = None,
             noncompliance_reason_none: Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone'] = None,
             noncompliance_reason_other: Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'noncomplianceReasonEmergency' in kwargs:
            noncompliance_reason_emergency = kwargs['noncomplianceReasonEmergency']
        if 'noncomplianceReasonNoProductionTraffic' in kwargs:
            noncompliance_reason_no_production_traffic = kwargs['noncomplianceReasonNoProductionTraffic']
        if 'noncomplianceReasonNone' in kwargs:
            noncompliance_reason_none = kwargs['noncomplianceReasonNone']
        if 'noncomplianceReasonOther' in kwargs:
            noncompliance_reason_other = kwargs['noncomplianceReasonOther']

        if noncompliance_reason_emergency is not None:
            _setter("noncompliance_reason_emergency", noncompliance_reason_emergency)
        if noncompliance_reason_no_production_traffic is not None:
            _setter("noncompliance_reason_no_production_traffic", noncompliance_reason_no_production_traffic)
        if noncompliance_reason_none is not None:
            _setter("noncompliance_reason_none", noncompliance_reason_none)
        if noncompliance_reason_other is not None:
            _setter("noncompliance_reason_other", noncompliance_reason_other)

    @property
    @pulumi.getter(name="noncomplianceReasonEmergency")
    def noncompliance_reason_emergency(self) -> Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency']:
        return pulumi.get(self, "noncompliance_reason_emergency")

    @property
    @pulumi.getter(name="noncomplianceReasonNoProductionTraffic")
    def noncompliance_reason_no_production_traffic(self) -> Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic']:
        return pulumi.get(self, "noncompliance_reason_no_production_traffic")

    @property
    @pulumi.getter(name="noncomplianceReasonNone")
    def noncompliance_reason_none(self) -> Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone']:
        return pulumi.get(self, "noncompliance_reason_none")

    @property
    @pulumi.getter(name="noncomplianceReasonOther")
    def noncompliance_reason_other(self) -> Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther']:
        return pulumi.get(self, "noncompliance_reason_other")


@pulumi.output_type
class PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ticketId":
            suggest = "ticket_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ticket_id: Optional[str] = None):
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ticket_id=ticket_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ticket_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ticketId' in kwargs:
            ticket_id = kwargs['ticketId']

        if ticket_id is not None:
            _setter("ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")


@pulumi.output_type
class PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ticketId":
            suggest = "ticket_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ticket_id: Optional[str] = None):
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ticket_id=ticket_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ticket_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ticketId' in kwargs:
            ticket_id = kwargs['ticketId']

        if ticket_id is not None:
            _setter("ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")


@pulumi.output_type
class PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerEmail":
            suggest = "customer_email"
        elif key == "peerReviewedBy":
            suggest = "peer_reviewed_by"
        elif key == "ticketId":
            suggest = "ticket_id"
        elif key == "unitTested":
            suggest = "unit_tested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_email: Optional[str] = None,
                 peer_reviewed_by: Optional[str] = None,
                 ticket_id: Optional[str] = None,
                 unit_tested: Optional[bool] = None):
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            customer_email=customer_email,
            peer_reviewed_by=peer_reviewed_by,
            ticket_id=ticket_id,
            unit_tested=unit_tested,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             customer_email: Optional[str] = None,
             peer_reviewed_by: Optional[str] = None,
             ticket_id: Optional[str] = None,
             unit_tested: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customerEmail' in kwargs:
            customer_email = kwargs['customerEmail']
        if 'peerReviewedBy' in kwargs:
            peer_reviewed_by = kwargs['peerReviewedBy']
        if 'ticketId' in kwargs:
            ticket_id = kwargs['ticketId']
        if 'unitTested' in kwargs:
            unit_tested = kwargs['unitTested']

        if customer_email is not None:
            _setter("customer_email", customer_email)
        if peer_reviewed_by is not None:
            _setter("peer_reviewed_by", peer_reviewed_by)
        if ticket_id is not None:
            _setter("ticket_id", ticket_id)
        if unit_tested is not None:
            _setter("unit_tested", unit_tested)

    @property
    @pulumi.getter(name="customerEmail")
    def customer_email(self) -> Optional[str]:
        return pulumi.get(self, "customer_email")

    @property
    @pulumi.getter(name="peerReviewedBy")
    def peer_reviewed_by(self) -> Optional[str]:
        return pulumi.get(self, "peer_reviewed_by")

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")

    @property
    @pulumi.getter(name="unitTested")
    def unit_tested(self) -> Optional[bool]:
        return pulumi.get(self, "unit_tested")


@pulumi.output_type
class PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "otherNoncomplianceReason":
            suggest = "other_noncompliance_reason"
        elif key == "ticketId":
            suggest = "ticket_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 other_noncompliance_reason: Optional[str] = None,
                 ticket_id: Optional[str] = None):
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            other_noncompliance_reason=other_noncompliance_reason,
            ticket_id=ticket_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             other_noncompliance_reason: Optional[str] = None,
             ticket_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'otherNoncomplianceReason' in kwargs:
            other_noncompliance_reason = kwargs['otherNoncomplianceReason']
        if 'ticketId' in kwargs:
            ticket_id = kwargs['ticketId']

        if other_noncompliance_reason is not None:
            _setter("other_noncompliance_reason", other_noncompliance_reason)
        if ticket_id is not None:
            _setter("ticket_id", ticket_id)

    @property
    @pulumi.getter(name="otherNoncomplianceReason")
    def other_noncompliance_reason(self) -> Optional[str]:
        return pulumi.get(self, "other_noncompliance_reason")

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")


@pulumi.output_type
class PropertyRuleError(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "behaviorName":
            suggest = "behavior_name"
        elif key == "errorLocation":
            suggest = "error_location"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyRuleError. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyRuleError.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyRuleError.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 behavior_name: Optional[str] = None,
                 detail: Optional[str] = None,
                 error_location: Optional[str] = None,
                 instance: Optional[str] = None,
                 status_code: Optional[int] = None,
                 title: Optional[str] = None,
                 type: Optional[str] = None):
        PropertyRuleError._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior_name=behavior_name,
            detail=detail,
            error_location=error_location,
            instance=instance,
            status_code=status_code,
            title=title,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior_name: Optional[str] = None,
             detail: Optional[str] = None,
             error_location: Optional[str] = None,
             instance: Optional[str] = None,
             status_code: Optional[int] = None,
             title: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'behaviorName' in kwargs:
            behavior_name = kwargs['behaviorName']
        if 'errorLocation' in kwargs:
            error_location = kwargs['errorLocation']
        if 'statusCode' in kwargs:
            status_code = kwargs['statusCode']

        if behavior_name is not None:
            _setter("behavior_name", behavior_name)
        if detail is not None:
            _setter("detail", detail)
        if error_location is not None:
            _setter("error_location", error_location)
        if instance is not None:
            _setter("instance", instance)
        if status_code is not None:
            _setter("status_code", status_code)
        if title is not None:
            _setter("title", title)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="behaviorName")
    def behavior_name(self) -> Optional[str]:
        return pulumi.get(self, "behavior_name")

    @property
    @pulumi.getter
    def detail(self) -> Optional[str]:
        return pulumi.get(self, "detail")

    @property
    @pulumi.getter(name="errorLocation")
    def error_location(self) -> Optional[str]:
        return pulumi.get(self, "error_location")

    @property
    @pulumi.getter
    def instance(self) -> Optional[str]:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCPSEnrollmentAdminContactResult(dict):
    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 email: str,
                 first_name: str,
                 last_name: str,
                 organization: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None,
                 title: Optional[str] = None):
        GetCPSEnrollmentAdminContactResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address_line_one=address_line_one,
            city=city,
            country_code=country_code,
            email=email,
            first_name=first_name,
            last_name=last_name,
            organization=organization,
            phone=phone,
            postal_code=postal_code,
            region=region,
            address_line_two=address_line_two,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address_line_one: str,
             city: str,
             country_code: str,
             email: str,
             first_name: str,
             last_name: str,
             organization: str,
             phone: str,
             postal_code: str,
             region: str,
             address_line_two: Optional[str] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addressLineOne' in kwargs:
            address_line_one = kwargs['addressLineOne']
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'firstName' in kwargs:
            first_name = kwargs['firstName']
        if 'lastName' in kwargs:
            last_name = kwargs['lastName']
        if 'postalCode' in kwargs:
            postal_code = kwargs['postalCode']
        if 'addressLineTwo' in kwargs:
            address_line_two = kwargs['addressLineTwo']

        _setter("address_line_one", address_line_one)
        _setter("city", city)
        _setter("country_code", country_code)
        _setter("email", email)
        _setter("first_name", first_name)
        _setter("last_name", last_name)
        _setter("organization", organization)
        _setter("phone", phone)
        _setter("postal_code", postal_code)
        _setter("region", region)
        if address_line_two is not None:
            _setter("address_line_two", address_line_two)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetCPSEnrollmentCsrResult(dict):
    def __init__(__self__, *,
                 city: str,
                 country_code: str,
                 organization: str,
                 organizational_unit: str,
                 preferred_trust_chain: str,
                 state: str):
        GetCPSEnrollmentCsrResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            city=city,
            country_code=country_code,
            organization=organization,
            organizational_unit=organizational_unit,
            preferred_trust_chain=preferred_trust_chain,
            state=state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             city: str,
             country_code: str,
             organization: str,
             organizational_unit: str,
             preferred_trust_chain: str,
             state: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'organizationalUnit' in kwargs:
            organizational_unit = kwargs['organizationalUnit']
        if 'preferredTrustChain' in kwargs:
            preferred_trust_chain = kwargs['preferredTrustChain']

        _setter("city", city)
        _setter("country_code", country_code)
        _setter("organization", organization)
        _setter("organizational_unit", organizational_unit)
        _setter("preferred_trust_chain", preferred_trust_chain)
        _setter("state", state)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> str:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter(name="preferredTrustChain")
    def preferred_trust_chain(self) -> str:
        return pulumi.get(self, "preferred_trust_chain")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetCPSEnrollmentDnsChallengeResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 full_path: str,
                 response_body: str):
        GetCPSEnrollmentDnsChallengeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            domain=domain,
            full_path=full_path,
            response_body=response_body,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             domain: str,
             full_path: str,
             response_body: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fullPath' in kwargs:
            full_path = kwargs['fullPath']
        if 'responseBody' in kwargs:
            response_body = kwargs['responseBody']

        _setter("domain", domain)
        _setter("full_path", full_path)
        _setter("response_body", response_body)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="fullPath")
    def full_path(self) -> str:
        return pulumi.get(self, "full_path")

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> str:
        return pulumi.get(self, "response_body")


@pulumi.output_type
class GetCPSEnrollmentHttpChallengeResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 full_path: str,
                 response_body: str):
        GetCPSEnrollmentHttpChallengeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            domain=domain,
            full_path=full_path,
            response_body=response_body,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             domain: str,
             full_path: str,
             response_body: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fullPath' in kwargs:
            full_path = kwargs['fullPath']
        if 'responseBody' in kwargs:
            response_body = kwargs['responseBody']

        _setter("domain", domain)
        _setter("full_path", full_path)
        _setter("response_body", response_body)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="fullPath")
    def full_path(self) -> str:
        return pulumi.get(self, "full_path")

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> str:
        return pulumi.get(self, "response_body")


@pulumi.output_type
class GetCPSEnrollmentNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 client_mutual_authentications: Sequence['outputs.GetCPSEnrollmentNetworkConfigurationClientMutualAuthenticationResult'],
                 clone_dns_names: bool,
                 disallowed_tls_versions: Sequence[str],
                 geography: str,
                 must_have_ciphers: str,
                 ocsp_stapling: str,
                 preferred_ciphers: str,
                 quic_enabled: bool):
        GetCPSEnrollmentNetworkConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_mutual_authentications=client_mutual_authentications,
            clone_dns_names=clone_dns_names,
            disallowed_tls_versions=disallowed_tls_versions,
            geography=geography,
            must_have_ciphers=must_have_ciphers,
            ocsp_stapling=ocsp_stapling,
            preferred_ciphers=preferred_ciphers,
            quic_enabled=quic_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_mutual_authentications: Sequence['outputs.GetCPSEnrollmentNetworkConfigurationClientMutualAuthenticationResult'],
             clone_dns_names: bool,
             disallowed_tls_versions: Sequence[str],
             geography: str,
             must_have_ciphers: str,
             ocsp_stapling: str,
             preferred_ciphers: str,
             quic_enabled: bool,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientMutualAuthentications' in kwargs:
            client_mutual_authentications = kwargs['clientMutualAuthentications']
        if 'cloneDnsNames' in kwargs:
            clone_dns_names = kwargs['cloneDnsNames']
        if 'disallowedTlsVersions' in kwargs:
            disallowed_tls_versions = kwargs['disallowedTlsVersions']
        if 'mustHaveCiphers' in kwargs:
            must_have_ciphers = kwargs['mustHaveCiphers']
        if 'ocspStapling' in kwargs:
            ocsp_stapling = kwargs['ocspStapling']
        if 'preferredCiphers' in kwargs:
            preferred_ciphers = kwargs['preferredCiphers']
        if 'quicEnabled' in kwargs:
            quic_enabled = kwargs['quicEnabled']

        _setter("client_mutual_authentications", client_mutual_authentications)
        _setter("clone_dns_names", clone_dns_names)
        _setter("disallowed_tls_versions", disallowed_tls_versions)
        _setter("geography", geography)
        _setter("must_have_ciphers", must_have_ciphers)
        _setter("ocsp_stapling", ocsp_stapling)
        _setter("preferred_ciphers", preferred_ciphers)
        _setter("quic_enabled", quic_enabled)

    @property
    @pulumi.getter(name="clientMutualAuthentications")
    def client_mutual_authentications(self) -> Sequence['outputs.GetCPSEnrollmentNetworkConfigurationClientMutualAuthenticationResult']:
        return pulumi.get(self, "client_mutual_authentications")

    @property
    @pulumi.getter(name="cloneDnsNames")
    def clone_dns_names(self) -> bool:
        return pulumi.get(self, "clone_dns_names")

    @property
    @pulumi.getter(name="disallowedTlsVersions")
    def disallowed_tls_versions(self) -> Sequence[str]:
        return pulumi.get(self, "disallowed_tls_versions")

    @property
    @pulumi.getter
    def geography(self) -> str:
        return pulumi.get(self, "geography")

    @property
    @pulumi.getter(name="mustHaveCiphers")
    def must_have_ciphers(self) -> str:
        return pulumi.get(self, "must_have_ciphers")

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> str:
        return pulumi.get(self, "ocsp_stapling")

    @property
    @pulumi.getter(name="preferredCiphers")
    def preferred_ciphers(self) -> str:
        return pulumi.get(self, "preferred_ciphers")

    @property
    @pulumi.getter(name="quicEnabled")
    def quic_enabled(self) -> bool:
        return pulumi.get(self, "quic_enabled")


@pulumi.output_type
class GetCPSEnrollmentNetworkConfigurationClientMutualAuthenticationResult(dict):
    def __init__(__self__, *,
                 ocsp_enabled: bool,
                 send_ca_list_to_client: bool,
                 set_id: str):
        GetCPSEnrollmentNetworkConfigurationClientMutualAuthenticationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ocsp_enabled=ocsp_enabled,
            send_ca_list_to_client=send_ca_list_to_client,
            set_id=set_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ocsp_enabled: bool,
             send_ca_list_to_client: bool,
             set_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ocspEnabled' in kwargs:
            ocsp_enabled = kwargs['ocspEnabled']
        if 'sendCaListToClient' in kwargs:
            send_ca_list_to_client = kwargs['sendCaListToClient']
        if 'setId' in kwargs:
            set_id = kwargs['setId']

        _setter("ocsp_enabled", ocsp_enabled)
        _setter("send_ca_list_to_client", send_ca_list_to_client)
        _setter("set_id", set_id)

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> bool:
        return pulumi.get(self, "ocsp_enabled")

    @property
    @pulumi.getter(name="sendCaListToClient")
    def send_ca_list_to_client(self) -> bool:
        return pulumi.get(self, "send_ca_list_to_client")

    @property
    @pulumi.getter(name="setId")
    def set_id(self) -> str:
        return pulumi.get(self, "set_id")


@pulumi.output_type
class GetCPSEnrollmentOrganizationResult(dict):
    def __init__(__self__, *,
                 address_line_one: str,
                 address_line_two: str,
                 city: str,
                 country_code: str,
                 name: str,
                 phone: str,
                 postal_code: str,
                 region: str):
        GetCPSEnrollmentOrganizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address_line_one=address_line_one,
            address_line_two=address_line_two,
            city=city,
            country_code=country_code,
            name=name,
            phone=phone,
            postal_code=postal_code,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address_line_one: str,
             address_line_two: str,
             city: str,
             country_code: str,
             name: str,
             phone: str,
             postal_code: str,
             region: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addressLineOne' in kwargs:
            address_line_one = kwargs['addressLineOne']
        if 'addressLineTwo' in kwargs:
            address_line_two = kwargs['addressLineTwo']
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'postalCode' in kwargs:
            postal_code = kwargs['postalCode']

        _setter("address_line_one", address_line_one)
        _setter("address_line_two", address_line_two)
        _setter("city", city)
        _setter("country_code", country_code)
        _setter("name", name)
        _setter("phone", phone)
        _setter("postal_code", postal_code)
        _setter("region", region)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> str:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetCPSEnrollmentTechContactResult(dict):
    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 email: str,
                 first_name: str,
                 last_name: str,
                 organization: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None,
                 title: Optional[str] = None):
        GetCPSEnrollmentTechContactResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address_line_one=address_line_one,
            city=city,
            country_code=country_code,
            email=email,
            first_name=first_name,
            last_name=last_name,
            organization=organization,
            phone=phone,
            postal_code=postal_code,
            region=region,
            address_line_two=address_line_two,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address_line_one: str,
             city: str,
             country_code: str,
             email: str,
             first_name: str,
             last_name: str,
             organization: str,
             phone: str,
             postal_code: str,
             region: str,
             address_line_two: Optional[str] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addressLineOne' in kwargs:
            address_line_one = kwargs['addressLineOne']
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'firstName' in kwargs:
            first_name = kwargs['firstName']
        if 'lastName' in kwargs:
            last_name = kwargs['lastName']
        if 'postalCode' in kwargs:
            postal_code = kwargs['postalCode']
        if 'addressLineTwo' in kwargs:
            address_line_two = kwargs['addressLineTwo']

        _setter("address_line_one", address_line_one)
        _setter("city", city)
        _setter("country_code", country_code)
        _setter("email", email)
        _setter("first_name", first_name)
        _setter("last_name", last_name)
        _setter("organization", organization)
        _setter("phone", phone)
        _setter("postal_code", postal_code)
        _setter("region", region)
        if address_line_two is not None:
            _setter("address_line_two", address_line_two)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetCPSEnrollmentsEnrollmentResult(dict):
    def __init__(__self__, *,
                 admin_contacts: Sequence['outputs.GetCPSEnrollmentsEnrollmentAdminContactResult'],
                 certificate_chain_type: str,
                 certificate_type: str,
                 common_name: str,
                 csrs: Sequence['outputs.GetCPSEnrollmentsEnrollmentCsrResult'],
                 enable_multi_stacked_certificates: bool,
                 enrollment_id: int,
                 network_configurations: Sequence['outputs.GetCPSEnrollmentsEnrollmentNetworkConfigurationResult'],
                 organizations: Sequence['outputs.GetCPSEnrollmentsEnrollmentOrganizationResult'],
                 pending_changes: bool,
                 registration_authority: str,
                 sans: Sequence[str],
                 secure_network: str,
                 signature_algorithm: str,
                 sni_only: bool,
                 tech_contacts: Sequence['outputs.GetCPSEnrollmentsEnrollmentTechContactResult'],
                 validation_type: str):
        GetCPSEnrollmentsEnrollmentResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            admin_contacts=admin_contacts,
            certificate_chain_type=certificate_chain_type,
            certificate_type=certificate_type,
            common_name=common_name,
            csrs=csrs,
            enable_multi_stacked_certificates=enable_multi_stacked_certificates,
            enrollment_id=enrollment_id,
            network_configurations=network_configurations,
            organizations=organizations,
            pending_changes=pending_changes,
            registration_authority=registration_authority,
            sans=sans,
            secure_network=secure_network,
            signature_algorithm=signature_algorithm,
            sni_only=sni_only,
            tech_contacts=tech_contacts,
            validation_type=validation_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             admin_contacts: Sequence['outputs.GetCPSEnrollmentsEnrollmentAdminContactResult'],
             certificate_chain_type: str,
             certificate_type: str,
             common_name: str,
             csrs: Sequence['outputs.GetCPSEnrollmentsEnrollmentCsrResult'],
             enable_multi_stacked_certificates: bool,
             enrollment_id: int,
             network_configurations: Sequence['outputs.GetCPSEnrollmentsEnrollmentNetworkConfigurationResult'],
             organizations: Sequence['outputs.GetCPSEnrollmentsEnrollmentOrganizationResult'],
             pending_changes: bool,
             registration_authority: str,
             sans: Sequence[str],
             secure_network: str,
             signature_algorithm: str,
             sni_only: bool,
             tech_contacts: Sequence['outputs.GetCPSEnrollmentsEnrollmentTechContactResult'],
             validation_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'adminContacts' in kwargs:
            admin_contacts = kwargs['adminContacts']
        if 'certificateChainType' in kwargs:
            certificate_chain_type = kwargs['certificateChainType']
        if 'certificateType' in kwargs:
            certificate_type = kwargs['certificateType']
        if 'commonName' in kwargs:
            common_name = kwargs['commonName']
        if 'enableMultiStackedCertificates' in kwargs:
            enable_multi_stacked_certificates = kwargs['enableMultiStackedCertificates']
        if 'enrollmentId' in kwargs:
            enrollment_id = kwargs['enrollmentId']
        if 'networkConfigurations' in kwargs:
            network_configurations = kwargs['networkConfigurations']
        if 'pendingChanges' in kwargs:
            pending_changes = kwargs['pendingChanges']
        if 'registrationAuthority' in kwargs:
            registration_authority = kwargs['registrationAuthority']
        if 'secureNetwork' in kwargs:
            secure_network = kwargs['secureNetwork']
        if 'signatureAlgorithm' in kwargs:
            signature_algorithm = kwargs['signatureAlgorithm']
        if 'sniOnly' in kwargs:
            sni_only = kwargs['sniOnly']
        if 'techContacts' in kwargs:
            tech_contacts = kwargs['techContacts']
        if 'validationType' in kwargs:
            validation_type = kwargs['validationType']

        _setter("admin_contacts", admin_contacts)
        _setter("certificate_chain_type", certificate_chain_type)
        _setter("certificate_type", certificate_type)
        _setter("common_name", common_name)
        _setter("csrs", csrs)
        _setter("enable_multi_stacked_certificates", enable_multi_stacked_certificates)
        _setter("enrollment_id", enrollment_id)
        _setter("network_configurations", network_configurations)
        _setter("organizations", organizations)
        _setter("pending_changes", pending_changes)
        _setter("registration_authority", registration_authority)
        _setter("sans", sans)
        _setter("secure_network", secure_network)
        _setter("signature_algorithm", signature_algorithm)
        _setter("sni_only", sni_only)
        _setter("tech_contacts", tech_contacts)
        _setter("validation_type", validation_type)

    @property
    @pulumi.getter(name="adminContacts")
    def admin_contacts(self) -> Sequence['outputs.GetCPSEnrollmentsEnrollmentAdminContactResult']:
        return pulumi.get(self, "admin_contacts")

    @property
    @pulumi.getter(name="certificateChainType")
    def certificate_chain_type(self) -> str:
        return pulumi.get(self, "certificate_chain_type")

    @property
    @pulumi.getter(name="certificateType")
    def certificate_type(self) -> str:
        return pulumi.get(self, "certificate_type")

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> str:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def csrs(self) -> Sequence['outputs.GetCPSEnrollmentsEnrollmentCsrResult']:
        return pulumi.get(self, "csrs")

    @property
    @pulumi.getter(name="enableMultiStackedCertificates")
    def enable_multi_stacked_certificates(self) -> bool:
        return pulumi.get(self, "enable_multi_stacked_certificates")

    @property
    @pulumi.getter(name="enrollmentId")
    def enrollment_id(self) -> int:
        return pulumi.get(self, "enrollment_id")

    @property
    @pulumi.getter(name="networkConfigurations")
    def network_configurations(self) -> Sequence['outputs.GetCPSEnrollmentsEnrollmentNetworkConfigurationResult']:
        return pulumi.get(self, "network_configurations")

    @property
    @pulumi.getter
    def organizations(self) -> Sequence['outputs.GetCPSEnrollmentsEnrollmentOrganizationResult']:
        return pulumi.get(self, "organizations")

    @property
    @pulumi.getter(name="pendingChanges")
    def pending_changes(self) -> bool:
        return pulumi.get(self, "pending_changes")

    @property
    @pulumi.getter(name="registrationAuthority")
    def registration_authority(self) -> str:
        return pulumi.get(self, "registration_authority")

    @property
    @pulumi.getter
    def sans(self) -> Sequence[str]:
        return pulumi.get(self, "sans")

    @property
    @pulumi.getter(name="secureNetwork")
    def secure_network(self) -> str:
        return pulumi.get(self, "secure_network")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> str:
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter(name="sniOnly")
    def sni_only(self) -> bool:
        return pulumi.get(self, "sni_only")

    @property
    @pulumi.getter(name="techContacts")
    def tech_contacts(self) -> Sequence['outputs.GetCPSEnrollmentsEnrollmentTechContactResult']:
        return pulumi.get(self, "tech_contacts")

    @property
    @pulumi.getter(name="validationType")
    def validation_type(self) -> str:
        return pulumi.get(self, "validation_type")


@pulumi.output_type
class GetCPSEnrollmentsEnrollmentAdminContactResult(dict):
    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 email: str,
                 first_name: str,
                 last_name: str,
                 organization: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None,
                 title: Optional[str] = None):
        GetCPSEnrollmentsEnrollmentAdminContactResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address_line_one=address_line_one,
            city=city,
            country_code=country_code,
            email=email,
            first_name=first_name,
            last_name=last_name,
            organization=organization,
            phone=phone,
            postal_code=postal_code,
            region=region,
            address_line_two=address_line_two,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address_line_one: str,
             city: str,
             country_code: str,
             email: str,
             first_name: str,
             last_name: str,
             organization: str,
             phone: str,
             postal_code: str,
             region: str,
             address_line_two: Optional[str] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addressLineOne' in kwargs:
            address_line_one = kwargs['addressLineOne']
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'firstName' in kwargs:
            first_name = kwargs['firstName']
        if 'lastName' in kwargs:
            last_name = kwargs['lastName']
        if 'postalCode' in kwargs:
            postal_code = kwargs['postalCode']
        if 'addressLineTwo' in kwargs:
            address_line_two = kwargs['addressLineTwo']

        _setter("address_line_one", address_line_one)
        _setter("city", city)
        _setter("country_code", country_code)
        _setter("email", email)
        _setter("first_name", first_name)
        _setter("last_name", last_name)
        _setter("organization", organization)
        _setter("phone", phone)
        _setter("postal_code", postal_code)
        _setter("region", region)
        if address_line_two is not None:
            _setter("address_line_two", address_line_two)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetCPSEnrollmentsEnrollmentCsrResult(dict):
    def __init__(__self__, *,
                 city: str,
                 country_code: str,
                 organization: str,
                 organizational_unit: str,
                 preferred_trust_chain: str,
                 state: str):
        GetCPSEnrollmentsEnrollmentCsrResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            city=city,
            country_code=country_code,
            organization=organization,
            organizational_unit=organizational_unit,
            preferred_trust_chain=preferred_trust_chain,
            state=state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             city: str,
             country_code: str,
             organization: str,
             organizational_unit: str,
             preferred_trust_chain: str,
             state: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'organizationalUnit' in kwargs:
            organizational_unit = kwargs['organizationalUnit']
        if 'preferredTrustChain' in kwargs:
            preferred_trust_chain = kwargs['preferredTrustChain']

        _setter("city", city)
        _setter("country_code", country_code)
        _setter("organization", organization)
        _setter("organizational_unit", organizational_unit)
        _setter("preferred_trust_chain", preferred_trust_chain)
        _setter("state", state)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> str:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter(name="preferredTrustChain")
    def preferred_trust_chain(self) -> str:
        return pulumi.get(self, "preferred_trust_chain")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetCPSEnrollmentsEnrollmentNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 client_mutual_authentications: Sequence['outputs.GetCPSEnrollmentsEnrollmentNetworkConfigurationClientMutualAuthenticationResult'],
                 clone_dns_names: bool,
                 disallowed_tls_versions: Sequence[str],
                 geography: str,
                 must_have_ciphers: str,
                 ocsp_stapling: str,
                 preferred_ciphers: str,
                 quic_enabled: bool):
        GetCPSEnrollmentsEnrollmentNetworkConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_mutual_authentications=client_mutual_authentications,
            clone_dns_names=clone_dns_names,
            disallowed_tls_versions=disallowed_tls_versions,
            geography=geography,
            must_have_ciphers=must_have_ciphers,
            ocsp_stapling=ocsp_stapling,
            preferred_ciphers=preferred_ciphers,
            quic_enabled=quic_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_mutual_authentications: Sequence['outputs.GetCPSEnrollmentsEnrollmentNetworkConfigurationClientMutualAuthenticationResult'],
             clone_dns_names: bool,
             disallowed_tls_versions: Sequence[str],
             geography: str,
             must_have_ciphers: str,
             ocsp_stapling: str,
             preferred_ciphers: str,
             quic_enabled: bool,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientMutualAuthentications' in kwargs:
            client_mutual_authentications = kwargs['clientMutualAuthentications']
        if 'cloneDnsNames' in kwargs:
            clone_dns_names = kwargs['cloneDnsNames']
        if 'disallowedTlsVersions' in kwargs:
            disallowed_tls_versions = kwargs['disallowedTlsVersions']
        if 'mustHaveCiphers' in kwargs:
            must_have_ciphers = kwargs['mustHaveCiphers']
        if 'ocspStapling' in kwargs:
            ocsp_stapling = kwargs['ocspStapling']
        if 'preferredCiphers' in kwargs:
            preferred_ciphers = kwargs['preferredCiphers']
        if 'quicEnabled' in kwargs:
            quic_enabled = kwargs['quicEnabled']

        _setter("client_mutual_authentications", client_mutual_authentications)
        _setter("clone_dns_names", clone_dns_names)
        _setter("disallowed_tls_versions", disallowed_tls_versions)
        _setter("geography", geography)
        _setter("must_have_ciphers", must_have_ciphers)
        _setter("ocsp_stapling", ocsp_stapling)
        _setter("preferred_ciphers", preferred_ciphers)
        _setter("quic_enabled", quic_enabled)

    @property
    @pulumi.getter(name="clientMutualAuthentications")
    def client_mutual_authentications(self) -> Sequence['outputs.GetCPSEnrollmentsEnrollmentNetworkConfigurationClientMutualAuthenticationResult']:
        return pulumi.get(self, "client_mutual_authentications")

    @property
    @pulumi.getter(name="cloneDnsNames")
    def clone_dns_names(self) -> bool:
        return pulumi.get(self, "clone_dns_names")

    @property
    @pulumi.getter(name="disallowedTlsVersions")
    def disallowed_tls_versions(self) -> Sequence[str]:
        return pulumi.get(self, "disallowed_tls_versions")

    @property
    @pulumi.getter
    def geography(self) -> str:
        return pulumi.get(self, "geography")

    @property
    @pulumi.getter(name="mustHaveCiphers")
    def must_have_ciphers(self) -> str:
        return pulumi.get(self, "must_have_ciphers")

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> str:
        return pulumi.get(self, "ocsp_stapling")

    @property
    @pulumi.getter(name="preferredCiphers")
    def preferred_ciphers(self) -> str:
        return pulumi.get(self, "preferred_ciphers")

    @property
    @pulumi.getter(name="quicEnabled")
    def quic_enabled(self) -> bool:
        return pulumi.get(self, "quic_enabled")


@pulumi.output_type
class GetCPSEnrollmentsEnrollmentNetworkConfigurationClientMutualAuthenticationResult(dict):
    def __init__(__self__, *,
                 ocsp_enabled: bool,
                 send_ca_list_to_client: bool,
                 set_id: str):
        GetCPSEnrollmentsEnrollmentNetworkConfigurationClientMutualAuthenticationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ocsp_enabled=ocsp_enabled,
            send_ca_list_to_client=send_ca_list_to_client,
            set_id=set_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ocsp_enabled: bool,
             send_ca_list_to_client: bool,
             set_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ocspEnabled' in kwargs:
            ocsp_enabled = kwargs['ocspEnabled']
        if 'sendCaListToClient' in kwargs:
            send_ca_list_to_client = kwargs['sendCaListToClient']
        if 'setId' in kwargs:
            set_id = kwargs['setId']

        _setter("ocsp_enabled", ocsp_enabled)
        _setter("send_ca_list_to_client", send_ca_list_to_client)
        _setter("set_id", set_id)

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> bool:
        return pulumi.get(self, "ocsp_enabled")

    @property
    @pulumi.getter(name="sendCaListToClient")
    def send_ca_list_to_client(self) -> bool:
        return pulumi.get(self, "send_ca_list_to_client")

    @property
    @pulumi.getter(name="setId")
    def set_id(self) -> str:
        return pulumi.get(self, "set_id")


@pulumi.output_type
class GetCPSEnrollmentsEnrollmentOrganizationResult(dict):
    def __init__(__self__, *,
                 address_line_one: str,
                 address_line_two: str,
                 city: str,
                 country_code: str,
                 name: str,
                 phone: str,
                 postal_code: str,
                 region: str):
        GetCPSEnrollmentsEnrollmentOrganizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address_line_one=address_line_one,
            address_line_two=address_line_two,
            city=city,
            country_code=country_code,
            name=name,
            phone=phone,
            postal_code=postal_code,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address_line_one: str,
             address_line_two: str,
             city: str,
             country_code: str,
             name: str,
             phone: str,
             postal_code: str,
             region: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addressLineOne' in kwargs:
            address_line_one = kwargs['addressLineOne']
        if 'addressLineTwo' in kwargs:
            address_line_two = kwargs['addressLineTwo']
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'postalCode' in kwargs:
            postal_code = kwargs['postalCode']

        _setter("address_line_one", address_line_one)
        _setter("address_line_two", address_line_two)
        _setter("city", city)
        _setter("country_code", country_code)
        _setter("name", name)
        _setter("phone", phone)
        _setter("postal_code", postal_code)
        _setter("region", region)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> str:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetCPSEnrollmentsEnrollmentTechContactResult(dict):
    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 email: str,
                 first_name: str,
                 last_name: str,
                 organization: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None,
                 title: Optional[str] = None):
        GetCPSEnrollmentsEnrollmentTechContactResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address_line_one=address_line_one,
            city=city,
            country_code=country_code,
            email=email,
            first_name=first_name,
            last_name=last_name,
            organization=organization,
            phone=phone,
            postal_code=postal_code,
            region=region,
            address_line_two=address_line_two,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address_line_one: str,
             city: str,
             country_code: str,
             email: str,
             first_name: str,
             last_name: str,
             organization: str,
             phone: str,
             postal_code: str,
             region: str,
             address_line_two: Optional[str] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addressLineOne' in kwargs:
            address_line_one = kwargs['addressLineOne']
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'firstName' in kwargs:
            first_name = kwargs['firstName']
        if 'lastName' in kwargs:
            last_name = kwargs['lastName']
        if 'postalCode' in kwargs:
            postal_code = kwargs['postalCode']
        if 'addressLineTwo' in kwargs:
            address_line_two = kwargs['addressLineTwo']

        _setter("address_line_one", address_line_one)
        _setter("city", city)
        _setter("country_code", country_code)
        _setter("email", email)
        _setter("first_name", first_name)
        _setter("last_name", last_name)
        _setter("organization", organization)
        _setter("phone", phone)
        _setter("postal_code", postal_code)
        _setter("region", region)
        if address_line_two is not None:
            _setter("address_line_two", address_line_two)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetClientlistListsListResult(dict):
    def __init__(__self__, *,
                 create_date: str,
                 created_by: str,
                 deprecated: bool,
                 items_count: int,
                 list_id: str,
                 list_type: str,
                 notes: str,
                 production_activation_status: str,
                 read_only: bool,
                 shared: bool,
                 staging_activation_status: str,
                 tags: Sequence[str],
                 update_date: str,
                 updated_by: str,
                 version: int,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        GetClientlistListsListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create_date=create_date,
            created_by=created_by,
            deprecated=deprecated,
            items_count=items_count,
            list_id=list_id,
            list_type=list_type,
            notes=notes,
            production_activation_status=production_activation_status,
            read_only=read_only,
            shared=shared,
            staging_activation_status=staging_activation_status,
            tags=tags,
            update_date=update_date,
            updated_by=updated_by,
            version=version,
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create_date: str,
             created_by: str,
             deprecated: bool,
             items_count: int,
             list_id: str,
             list_type: str,
             notes: str,
             production_activation_status: str,
             read_only: bool,
             shared: bool,
             staging_activation_status: str,
             tags: Sequence[str],
             update_date: str,
             updated_by: str,
             version: int,
             name: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createDate' in kwargs:
            create_date = kwargs['createDate']
        if 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if 'itemsCount' in kwargs:
            items_count = kwargs['itemsCount']
        if 'listId' in kwargs:
            list_id = kwargs['listId']
        if 'listType' in kwargs:
            list_type = kwargs['listType']
        if 'productionActivationStatus' in kwargs:
            production_activation_status = kwargs['productionActivationStatus']
        if 'readOnly' in kwargs:
            read_only = kwargs['readOnly']
        if 'stagingActivationStatus' in kwargs:
            staging_activation_status = kwargs['stagingActivationStatus']
        if 'updateDate' in kwargs:
            update_date = kwargs['updateDate']
        if 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']

        _setter("create_date", create_date)
        _setter("created_by", created_by)
        _setter("deprecated", deprecated)
        _setter("items_count", items_count)
        _setter("list_id", list_id)
        _setter("list_type", list_type)
        _setter("notes", notes)
        _setter("production_activation_status", production_activation_status)
        _setter("read_only", read_only)
        _setter("shared", shared)
        _setter("staging_activation_status", staging_activation_status)
        _setter("tags", tags)
        _setter("update_date", update_date)
        _setter("updated_by", updated_by)
        _setter("version", version)
        if name is not None:
            _setter("name", name)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="createDate")
    def create_date(self) -> str:
        return pulumi.get(self, "create_date")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def deprecated(self) -> bool:
        return pulumi.get(self, "deprecated")

    @property
    @pulumi.getter(name="itemsCount")
    def items_count(self) -> int:
        return pulumi.get(self, "items_count")

    @property
    @pulumi.getter(name="listId")
    def list_id(self) -> str:
        return pulumi.get(self, "list_id")

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> str:
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter
    def notes(self) -> str:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="productionActivationStatus")
    def production_activation_status(self) -> str:
        return pulumi.get(self, "production_activation_status")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def shared(self) -> bool:
        return pulumi.get(self, "shared")

    @property
    @pulumi.getter(name="stagingActivationStatus")
    def staging_activation_status(self) -> str:
        return pulumi.get(self, "staging_activation_status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> str:
        return pulumi.get(self, "update_date")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCloudletsApiPrioritizationMatchRuleMatchRuleResult(dict):
    def __init__(__self__, *,
                 pass_through_percent: float,
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchResult']] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        GetCloudletsApiPrioritizationMatchRuleMatchRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pass_through_percent=pass_through_percent,
            type=type,
            disabled=disabled,
            end=end,
            match_url=match_url,
            matches=matches,
            name=name,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pass_through_percent: float,
             type: str,
             disabled: Optional[bool] = None,
             end: Optional[int] = None,
             match_url: Optional[str] = None,
             matches: Optional[Sequence['outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchResult']] = None,
             name: Optional[str] = None,
             start: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'passThroughPercent' in kwargs:
            pass_through_percent = kwargs['passThroughPercent']
        if 'matchUrl' in kwargs:
            match_url = kwargs['matchUrl']

        _setter("pass_through_percent", pass_through_percent)
        _setter("type", type)
        if disabled is not None:
            _setter("disabled", disabled)
        if end is not None:
            _setter("end", end)
        if match_url is not None:
            _setter("match_url", match_url)
        if matches is not None:
            _setter("matches", matches)
        if name is not None:
            _setter("name", name)
        if start is not None:
            _setter("start", start)

    @property
    @pulumi.getter(name="passThroughPercent")
    def pass_through_percent(self) -> float:
        return pulumi.get(self, "pass_through_percent")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchResult']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult']] = None):
        GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            case_sensitive=case_sensitive,
            check_ips=check_ips,
            match_operator=match_operator,
            match_type=match_type,
            match_value=match_value,
            negate=negate,
            object_match_values=object_match_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             case_sensitive: Optional[bool] = None,
             check_ips: Optional[str] = None,
             match_operator: Optional[str] = None,
             match_type: Optional[str] = None,
             match_value: Optional[str] = None,
             negate: Optional[bool] = None,
             object_match_values: Optional[Sequence['outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'caseSensitive' in kwargs:
            case_sensitive = kwargs['caseSensitive']
        if 'checkIps' in kwargs:
            check_ips = kwargs['checkIps']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchType' in kwargs:
            match_type = kwargs['matchType']
        if 'matchValue' in kwargs:
            match_value = kwargs['matchValue']
        if 'objectMatchValues' in kwargs:
            object_match_values = kwargs['objectMatchValues']

        if case_sensitive is not None:
            _setter("case_sensitive", case_sensitive)
        if check_ips is not None:
            _setter("check_ips", check_ips)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_type is not None:
            _setter("match_type", match_type)
        if match_value is not None:
            _setter("match_value", match_value)
        if negate is not None:
            _setter("negate", negate)
        if object_match_values is not None:
            _setter("object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult']]:
        return pulumi.get(self, "object_match_values")


@pulumi.output_type
class GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult(dict):
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
                 values: Optional[Sequence[str]] = None):
        GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            name=name,
            name_case_sensitive=name_case_sensitive,
            name_has_wildcard=name_has_wildcard,
            options=options,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             name: Optional[str] = None,
             name_case_sensitive: Optional[bool] = None,
             name_has_wildcard: Optional[bool] = None,
             options: Optional['outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'nameCaseSensitive' in kwargs:
            name_case_sensitive = kwargs['nameCaseSensitive']
        if 'nameHasWildcard' in kwargs:
            name_has_wildcard = kwargs['nameHasWildcard']

        _setter("type", type)
        if name is not None:
            _setter("name", name)
        if name_case_sensitive is not None:
            _setter("name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            _setter("name_has_wildcard", name_has_wildcard)
        if options is not None:
            _setter("options", options)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult(dict):
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value_case_sensitive=value_case_sensitive,
            value_escaped=value_escaped,
            value_has_wildcard=value_has_wildcard,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value_case_sensitive: Optional[bool] = None,
             value_escaped: Optional[bool] = None,
             value_has_wildcard: Optional[bool] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'valueCaseSensitive' in kwargs:
            value_case_sensitive = kwargs['valueCaseSensitive']
        if 'valueEscaped' in kwargs:
            value_escaped = kwargs['valueEscaped']
        if 'valueHasWildcard' in kwargs:
            value_has_wildcard = kwargs['valueHasWildcard']

        if value_case_sensitive is not None:
            _setter("value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            _setter("value_escaped", value_escaped)
        if value_has_wildcard is not None:
            _setter("value_has_wildcard", value_has_wildcard)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsApplicationLoadBalancerDataCenterResult(dict):
    def __init__(__self__, *,
                 city: str,
                 cloud_server_host_header_override: bool,
                 cloud_service: bool,
                 continent: str,
                 country: str,
                 hostname: str,
                 latitude: float,
                 liveness_hosts: Sequence[str],
                 longitude: float,
                 origin_id: str,
                 percent: float,
                 state_or_province: str):
        GetCloudletsApplicationLoadBalancerDataCenterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            city=city,
            cloud_server_host_header_override=cloud_server_host_header_override,
            cloud_service=cloud_service,
            continent=continent,
            country=country,
            hostname=hostname,
            latitude=latitude,
            liveness_hosts=liveness_hosts,
            longitude=longitude,
            origin_id=origin_id,
            percent=percent,
            state_or_province=state_or_province,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             city: str,
             cloud_server_host_header_override: bool,
             cloud_service: bool,
             continent: str,
             country: str,
             hostname: str,
             latitude: float,
             liveness_hosts: Sequence[str],
             longitude: float,
             origin_id: str,
             percent: float,
             state_or_province: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudServerHostHeaderOverride' in kwargs:
            cloud_server_host_header_override = kwargs['cloudServerHostHeaderOverride']
        if 'cloudService' in kwargs:
            cloud_service = kwargs['cloudService']
        if 'livenessHosts' in kwargs:
            liveness_hosts = kwargs['livenessHosts']
        if 'originId' in kwargs:
            origin_id = kwargs['originId']
        if 'stateOrProvince' in kwargs:
            state_or_province = kwargs['stateOrProvince']

        _setter("city", city)
        _setter("cloud_server_host_header_override", cloud_server_host_header_override)
        _setter("cloud_service", cloud_service)
        _setter("continent", continent)
        _setter("country", country)
        _setter("hostname", hostname)
        _setter("latitude", latitude)
        _setter("liveness_hosts", liveness_hosts)
        _setter("longitude", longitude)
        _setter("origin_id", origin_id)
        _setter("percent", percent)
        _setter("state_or_province", state_or_province)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="cloudServerHostHeaderOverride")
    def cloud_server_host_header_override(self) -> bool:
        return pulumi.get(self, "cloud_server_host_header_override")

    @property
    @pulumi.getter(name="cloudService")
    def cloud_service(self) -> bool:
        return pulumi.get(self, "cloud_service")

    @property
    @pulumi.getter
    def continent(self) -> str:
        return pulumi.get(self, "continent")

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def latitude(self) -> float:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter(name="livenessHosts")
    def liveness_hosts(self) -> Sequence[str]:
        return pulumi.get(self, "liveness_hosts")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter
    def percent(self) -> float:
        return pulumi.get(self, "percent")

    @property
    @pulumi.getter(name="stateOrProvince")
    def state_or_province(self) -> str:
        return pulumi.get(self, "state_or_province")


@pulumi.output_type
class GetCloudletsApplicationLoadBalancerLivenessSettingResult(dict):
    def __init__(__self__, *,
                 additional_headers: Mapping[str, str],
                 host_header: str,
                 interval: int,
                 path: str,
                 peer_certificate_verification: bool,
                 port: int,
                 protocol: str,
                 request_string: str,
                 response_string: str,
                 status3xx_failure: bool,
                 status4xx_failure: bool,
                 status5xx_failure: bool,
                 timeout: float):
        GetCloudletsApplicationLoadBalancerLivenessSettingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            additional_headers=additional_headers,
            host_header=host_header,
            interval=interval,
            path=path,
            peer_certificate_verification=peer_certificate_verification,
            port=port,
            protocol=protocol,
            request_string=request_string,
            response_string=response_string,
            status3xx_failure=status3xx_failure,
            status4xx_failure=status4xx_failure,
            status5xx_failure=status5xx_failure,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             additional_headers: Mapping[str, str],
             host_header: str,
             interval: int,
             path: str,
             peer_certificate_verification: bool,
             port: int,
             protocol: str,
             request_string: str,
             response_string: str,
             status3xx_failure: bool,
             status4xx_failure: bool,
             status5xx_failure: bool,
             timeout: float,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'additionalHeaders' in kwargs:
            additional_headers = kwargs['additionalHeaders']
        if 'hostHeader' in kwargs:
            host_header = kwargs['hostHeader']
        if 'peerCertificateVerification' in kwargs:
            peer_certificate_verification = kwargs['peerCertificateVerification']
        if 'requestString' in kwargs:
            request_string = kwargs['requestString']
        if 'responseString' in kwargs:
            response_string = kwargs['responseString']
        if 'status3xxFailure' in kwargs:
            status3xx_failure = kwargs['status3xxFailure']
        if 'status4xxFailure' in kwargs:
            status4xx_failure = kwargs['status4xxFailure']
        if 'status5xxFailure' in kwargs:
            status5xx_failure = kwargs['status5xxFailure']

        _setter("additional_headers", additional_headers)
        _setter("host_header", host_header)
        _setter("interval", interval)
        _setter("path", path)
        _setter("peer_certificate_verification", peer_certificate_verification)
        _setter("port", port)
        _setter("protocol", protocol)
        _setter("request_string", request_string)
        _setter("response_string", response_string)
        _setter("status3xx_failure", status3xx_failure)
        _setter("status4xx_failure", status4xx_failure)
        _setter("status5xx_failure", status5xx_failure)
        _setter("timeout", timeout)

    @property
    @pulumi.getter(name="additionalHeaders")
    def additional_headers(self) -> Mapping[str, str]:
        return pulumi.get(self, "additional_headers")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> str:
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="peerCertificateVerification")
    def peer_certificate_verification(self) -> bool:
        return pulumi.get(self, "peer_certificate_verification")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="requestString")
    def request_string(self) -> str:
        return pulumi.get(self, "request_string")

    @property
    @pulumi.getter(name="responseString")
    def response_string(self) -> str:
        return pulumi.get(self, "response_string")

    @property
    @pulumi.getter(name="status3xxFailure")
    def status3xx_failure(self) -> bool:
        return pulumi.get(self, "status3xx_failure")

    @property
    @pulumi.getter(name="status4xxFailure")
    def status4xx_failure(self) -> bool:
        return pulumi.get(self, "status4xx_failure")

    @property
    @pulumi.getter(name="status5xxFailure")
    def status5xx_failure(self) -> bool:
        return pulumi.get(self, "status5xx_failure")

    @property
    @pulumi.getter
    def timeout(self) -> float:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleResult(dict):
    def __init__(__self__, *,
                 forward_settings: Sequence['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingResult'],
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 id: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchResult']] = None,
                 matches_always: Optional[bool] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            forward_settings=forward_settings,
            type=type,
            disabled=disabled,
            end=end,
            id=id,
            match_url=match_url,
            matches=matches,
            matches_always=matches_always,
            name=name,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             forward_settings: Sequence['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingResult'],
             type: str,
             disabled: Optional[bool] = None,
             end: Optional[int] = None,
             id: Optional[int] = None,
             match_url: Optional[str] = None,
             matches: Optional[Sequence['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchResult']] = None,
             matches_always: Optional[bool] = None,
             name: Optional[str] = None,
             start: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'forwardSettings' in kwargs:
            forward_settings = kwargs['forwardSettings']
        if 'matchUrl' in kwargs:
            match_url = kwargs['matchUrl']
        if 'matchesAlways' in kwargs:
            matches_always = kwargs['matchesAlways']

        _setter("forward_settings", forward_settings)
        _setter("type", type)
        if disabled is not None:
            _setter("disabled", disabled)
        if end is not None:
            _setter("end", end)
        if id is not None:
            _setter("id", id)
        if match_url is not None:
            _setter("match_url", match_url)
        if matches is not None:
            _setter("matches", matches)
        if matches_always is not None:
            _setter("matches_always", matches_always)
        if name is not None:
            _setter("name", name)
        if start is not None:
            _setter("start", start)

    @property
    @pulumi.getter(name="forwardSettings")
    def forward_settings(self) -> Sequence['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingResult']:
        return pulumi.get(self, "forward_settings")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchResult']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter(name="matchesAlways")
    def matches_always(self) -> Optional[bool]:
        return pulumi.get(self, "matches_always")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingResult(dict):
    def __init__(__self__, *,
                 origin_id: str):
        GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            origin_id=origin_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             origin_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'originId' in kwargs:
            origin_id = kwargs['originId']

        _setter("origin_id", origin_id)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")


@pulumi.output_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueResult']] = None):
        GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            case_sensitive=case_sensitive,
            check_ips=check_ips,
            match_operator=match_operator,
            match_type=match_type,
            match_value=match_value,
            negate=negate,
            object_match_values=object_match_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             case_sensitive: Optional[bool] = None,
             check_ips: Optional[str] = None,
             match_operator: Optional[str] = None,
             match_type: Optional[str] = None,
             match_value: Optional[str] = None,
             negate: Optional[bool] = None,
             object_match_values: Optional[Sequence['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'caseSensitive' in kwargs:
            case_sensitive = kwargs['caseSensitive']
        if 'checkIps' in kwargs:
            check_ips = kwargs['checkIps']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchType' in kwargs:
            match_type = kwargs['matchType']
        if 'matchValue' in kwargs:
            match_value = kwargs['matchValue']
        if 'objectMatchValues' in kwargs:
            object_match_values = kwargs['objectMatchValues']

        if case_sensitive is not None:
            _setter("case_sensitive", case_sensitive)
        if check_ips is not None:
            _setter("check_ips", check_ips)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_type is not None:
            _setter("match_type", match_type)
        if match_value is not None:
            _setter("match_value", match_value)
        if negate is not None:
            _setter("negate", negate)
        if object_match_values is not None:
            _setter("object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueResult']]:
        return pulumi.get(self, "object_match_values")


@pulumi.output_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueResult(dict):
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
                 values: Optional[Sequence[str]] = None):
        GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            name=name,
            name_case_sensitive=name_case_sensitive,
            name_has_wildcard=name_has_wildcard,
            options=options,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             name: Optional[str] = None,
             name_case_sensitive: Optional[bool] = None,
             name_has_wildcard: Optional[bool] = None,
             options: Optional['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'nameCaseSensitive' in kwargs:
            name_case_sensitive = kwargs['nameCaseSensitive']
        if 'nameHasWildcard' in kwargs:
            name_has_wildcard = kwargs['nameHasWildcard']

        _setter("type", type)
        if name is not None:
            _setter("name", name)
        if name_case_sensitive is not None:
            _setter("name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            _setter("name_has_wildcard", name_has_wildcard)
        if options is not None:
            _setter("options", options)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsResult(dict):
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value_case_sensitive=value_case_sensitive,
            value_escaped=value_escaped,
            value_has_wildcard=value_has_wildcard,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value_case_sensitive: Optional[bool] = None,
             value_escaped: Optional[bool] = None,
             value_has_wildcard: Optional[bool] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'valueCaseSensitive' in kwargs:
            value_case_sensitive = kwargs['valueCaseSensitive']
        if 'valueEscaped' in kwargs:
            value_escaped = kwargs['valueEscaped']
        if 'valueHasWildcard' in kwargs:
            value_has_wildcard = kwargs['valueHasWildcard']

        if value_case_sensitive is not None:
            _setter("value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            _setter("value_escaped", value_escaped)
        if value_has_wildcard is not None:
            _setter("value_has_wildcard", value_has_wildcard)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleResult(dict):
    def __init__(__self__, *,
                 forward_settings: 'outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsResult',
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchResult']] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        GetCloudletsAudienceSegmentationMatchRuleMatchRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            forward_settings=forward_settings,
            type=type,
            disabled=disabled,
            end=end,
            match_url=match_url,
            matches=matches,
            name=name,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             forward_settings: 'outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsResult',
             type: str,
             disabled: Optional[bool] = None,
             end: Optional[int] = None,
             match_url: Optional[str] = None,
             matches: Optional[Sequence['outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchResult']] = None,
             name: Optional[str] = None,
             start: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'forwardSettings' in kwargs:
            forward_settings = kwargs['forwardSettings']
        if 'matchUrl' in kwargs:
            match_url = kwargs['matchUrl']

        _setter("forward_settings", forward_settings)
        _setter("type", type)
        if disabled is not None:
            _setter("disabled", disabled)
        if end is not None:
            _setter("end", end)
        if match_url is not None:
            _setter("match_url", match_url)
        if matches is not None:
            _setter("matches", matches)
        if name is not None:
            _setter("name", name)
        if start is not None:
            _setter("start", start)

    @property
    @pulumi.getter(name="forwardSettings")
    def forward_settings(self) -> 'outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsResult':
        return pulumi.get(self, "forward_settings")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchResult']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsResult(dict):
    def __init__(__self__, *,
                 origin_id: Optional[str] = None,
                 path_and_qs: Optional[str] = None,
                 use_incoming_query_string: Optional[bool] = None):
        GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            origin_id=origin_id,
            path_and_qs=path_and_qs,
            use_incoming_query_string=use_incoming_query_string,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             origin_id: Optional[str] = None,
             path_and_qs: Optional[str] = None,
             use_incoming_query_string: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'originId' in kwargs:
            origin_id = kwargs['originId']
        if 'pathAndQs' in kwargs:
            path_and_qs = kwargs['pathAndQs']
        if 'useIncomingQueryString' in kwargs:
            use_incoming_query_string = kwargs['useIncomingQueryString']

        if origin_id is not None:
            _setter("origin_id", origin_id)
        if path_and_qs is not None:
            _setter("path_and_qs", path_and_qs)
        if use_incoming_query_string is not None:
            _setter("use_incoming_query_string", use_incoming_query_string)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="pathAndQs")
    def path_and_qs(self) -> Optional[str]:
        return pulumi.get(self, "path_and_qs")

    @property
    @pulumi.getter(name="useIncomingQueryString")
    def use_incoming_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_incoming_query_string")


@pulumi.output_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueResult']] = None):
        GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            case_sensitive=case_sensitive,
            check_ips=check_ips,
            match_operator=match_operator,
            match_type=match_type,
            match_value=match_value,
            negate=negate,
            object_match_values=object_match_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             case_sensitive: Optional[bool] = None,
             check_ips: Optional[str] = None,
             match_operator: Optional[str] = None,
             match_type: Optional[str] = None,
             match_value: Optional[str] = None,
             negate: Optional[bool] = None,
             object_match_values: Optional[Sequence['outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'caseSensitive' in kwargs:
            case_sensitive = kwargs['caseSensitive']
        if 'checkIps' in kwargs:
            check_ips = kwargs['checkIps']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchType' in kwargs:
            match_type = kwargs['matchType']
        if 'matchValue' in kwargs:
            match_value = kwargs['matchValue']
        if 'objectMatchValues' in kwargs:
            object_match_values = kwargs['objectMatchValues']

        if case_sensitive is not None:
            _setter("case_sensitive", case_sensitive)
        if check_ips is not None:
            _setter("check_ips", check_ips)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_type is not None:
            _setter("match_type", match_type)
        if match_value is not None:
            _setter("match_value", match_value)
        if negate is not None:
            _setter("negate", negate)
        if object_match_values is not None:
            _setter("object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueResult']]:
        return pulumi.get(self, "object_match_values")


@pulumi.output_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueResult(dict):
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
                 values: Optional[Sequence[str]] = None):
        GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            name=name,
            name_case_sensitive=name_case_sensitive,
            name_has_wildcard=name_has_wildcard,
            options=options,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             name: Optional[str] = None,
             name_case_sensitive: Optional[bool] = None,
             name_has_wildcard: Optional[bool] = None,
             options: Optional['outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'nameCaseSensitive' in kwargs:
            name_case_sensitive = kwargs['nameCaseSensitive']
        if 'nameHasWildcard' in kwargs:
            name_has_wildcard = kwargs['nameHasWildcard']

        _setter("type", type)
        if name is not None:
            _setter("name", name)
        if name_case_sensitive is not None:
            _setter("name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            _setter("name_has_wildcard", name_has_wildcard)
        if options is not None:
            _setter("options", options)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult(dict):
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value_case_sensitive=value_case_sensitive,
            value_escaped=value_escaped,
            value_has_wildcard=value_has_wildcard,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value_case_sensitive: Optional[bool] = None,
             value_escaped: Optional[bool] = None,
             value_has_wildcard: Optional[bool] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'valueCaseSensitive' in kwargs:
            value_case_sensitive = kwargs['valueCaseSensitive']
        if 'valueEscaped' in kwargs:
            value_escaped = kwargs['valueEscaped']
        if 'valueHasWildcard' in kwargs:
            value_has_wildcard = kwargs['valueHasWildcard']

        if value_case_sensitive is not None:
            _setter("value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            _setter("value_escaped", value_escaped)
        if value_has_wildcard is not None:
            _setter("value_has_wildcard", value_has_wildcard)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsEdgeRedirectorMatchRuleMatchRuleResult(dict):
    def __init__(__self__, *,
                 redirect_url: str,
                 status_code: int,
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchResult']] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None,
                 use_incoming_query_string: Optional[bool] = None,
                 use_relative_url: Optional[str] = None):
        GetCloudletsEdgeRedirectorMatchRuleMatchRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            redirect_url=redirect_url,
            status_code=status_code,
            type=type,
            disabled=disabled,
            end=end,
            match_url=match_url,
            matches=matches,
            name=name,
            start=start,
            use_incoming_query_string=use_incoming_query_string,
            use_relative_url=use_relative_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             redirect_url: str,
             status_code: int,
             type: str,
             disabled: Optional[bool] = None,
             end: Optional[int] = None,
             match_url: Optional[str] = None,
             matches: Optional[Sequence['outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchResult']] = None,
             name: Optional[str] = None,
             start: Optional[int] = None,
             use_incoming_query_string: Optional[bool] = None,
             use_relative_url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'redirectUrl' in kwargs:
            redirect_url = kwargs['redirectUrl']
        if 'statusCode' in kwargs:
            status_code = kwargs['statusCode']
        if 'matchUrl' in kwargs:
            match_url = kwargs['matchUrl']
        if 'useIncomingQueryString' in kwargs:
            use_incoming_query_string = kwargs['useIncomingQueryString']
        if 'useRelativeUrl' in kwargs:
            use_relative_url = kwargs['useRelativeUrl']

        _setter("redirect_url", redirect_url)
        _setter("status_code", status_code)
        _setter("type", type)
        if disabled is not None:
            _setter("disabled", disabled)
        if end is not None:
            _setter("end", end)
        if match_url is not None:
            _setter("match_url", match_url)
        if matches is not None:
            _setter("matches", matches)
        if name is not None:
            _setter("name", name)
        if start is not None:
            _setter("start", start)
        if use_incoming_query_string is not None:
            _setter("use_incoming_query_string", use_incoming_query_string)
        if use_relative_url is not None:
            _setter("use_relative_url", use_relative_url)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> int:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchResult']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")

    @property
    @pulumi.getter(name="useIncomingQueryString")
    def use_incoming_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_incoming_query_string")

    @property
    @pulumi.getter(name="useRelativeUrl")
    def use_relative_url(self) -> Optional[str]:
        return pulumi.get(self, "use_relative_url")


@pulumi.output_type
class GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueResult']] = None):
        GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            case_sensitive=case_sensitive,
            check_ips=check_ips,
            match_operator=match_operator,
            match_type=match_type,
            match_value=match_value,
            negate=negate,
            object_match_values=object_match_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             case_sensitive: Optional[bool] = None,
             check_ips: Optional[str] = None,
             match_operator: Optional[str] = None,
             match_type: Optional[str] = None,
             match_value: Optional[str] = None,
             negate: Optional[bool] = None,
             object_match_values: Optional[Sequence['outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'caseSensitive' in kwargs:
            case_sensitive = kwargs['caseSensitive']
        if 'checkIps' in kwargs:
            check_ips = kwargs['checkIps']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchType' in kwargs:
            match_type = kwargs['matchType']
        if 'matchValue' in kwargs:
            match_value = kwargs['matchValue']
        if 'objectMatchValues' in kwargs:
            object_match_values = kwargs['objectMatchValues']

        if case_sensitive is not None:
            _setter("case_sensitive", case_sensitive)
        if check_ips is not None:
            _setter("check_ips", check_ips)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_type is not None:
            _setter("match_type", match_type)
        if match_value is not None:
            _setter("match_value", match_value)
        if negate is not None:
            _setter("negate", negate)
        if object_match_values is not None:
            _setter("object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueResult']]:
        return pulumi.get(self, "object_match_values")


@pulumi.output_type
class GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueResult(dict):
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
                 values: Optional[Sequence[str]] = None):
        GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            name=name,
            name_case_sensitive=name_case_sensitive,
            name_has_wildcard=name_has_wildcard,
            options=options,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             name: Optional[str] = None,
             name_case_sensitive: Optional[bool] = None,
             name_has_wildcard: Optional[bool] = None,
             options: Optional['outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'nameCaseSensitive' in kwargs:
            name_case_sensitive = kwargs['nameCaseSensitive']
        if 'nameHasWildcard' in kwargs:
            name_has_wildcard = kwargs['nameHasWildcard']

        _setter("type", type)
        if name is not None:
            _setter("name", name)
        if name_case_sensitive is not None:
            _setter("name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            _setter("name_has_wildcard", name_has_wildcard)
        if options is not None:
            _setter("options", options)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsResult(dict):
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value_case_sensitive=value_case_sensitive,
            value_escaped=value_escaped,
            value_has_wildcard=value_has_wildcard,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value_case_sensitive: Optional[bool] = None,
             value_escaped: Optional[bool] = None,
             value_has_wildcard: Optional[bool] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'valueCaseSensitive' in kwargs:
            value_case_sensitive = kwargs['valueCaseSensitive']
        if 'valueEscaped' in kwargs:
            value_escaped = kwargs['valueEscaped']
        if 'valueHasWildcard' in kwargs:
            value_has_wildcard = kwargs['valueHasWildcard']

        if value_case_sensitive is not None:
            _setter("value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            _setter("value_escaped", value_escaped)
        if value_has_wildcard is not None:
            _setter("value_has_wildcard", value_has_wildcard)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleResult(dict):
    def __init__(__self__, *,
                 forward_settings: 'outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsResult',
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchResult']] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        GetCloudletsForwardRewriteMatchRuleMatchRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            forward_settings=forward_settings,
            type=type,
            disabled=disabled,
            end=end,
            match_url=match_url,
            matches=matches,
            name=name,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             forward_settings: 'outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsResult',
             type: str,
             disabled: Optional[bool] = None,
             end: Optional[int] = None,
             match_url: Optional[str] = None,
             matches: Optional[Sequence['outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchResult']] = None,
             name: Optional[str] = None,
             start: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'forwardSettings' in kwargs:
            forward_settings = kwargs['forwardSettings']
        if 'matchUrl' in kwargs:
            match_url = kwargs['matchUrl']

        _setter("forward_settings", forward_settings)
        _setter("type", type)
        if disabled is not None:
            _setter("disabled", disabled)
        if end is not None:
            _setter("end", end)
        if match_url is not None:
            _setter("match_url", match_url)
        if matches is not None:
            _setter("matches", matches)
        if name is not None:
            _setter("name", name)
        if start is not None:
            _setter("start", start)

    @property
    @pulumi.getter(name="forwardSettings")
    def forward_settings(self) -> 'outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsResult':
        return pulumi.get(self, "forward_settings")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchResult']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsResult(dict):
    def __init__(__self__, *,
                 origin_id: Optional[str] = None,
                 path_and_qs: Optional[str] = None,
                 use_incoming_query_string: Optional[bool] = None):
        GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            origin_id=origin_id,
            path_and_qs=path_and_qs,
            use_incoming_query_string=use_incoming_query_string,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             origin_id: Optional[str] = None,
             path_and_qs: Optional[str] = None,
             use_incoming_query_string: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'originId' in kwargs:
            origin_id = kwargs['originId']
        if 'pathAndQs' in kwargs:
            path_and_qs = kwargs['pathAndQs']
        if 'useIncomingQueryString' in kwargs:
            use_incoming_query_string = kwargs['useIncomingQueryString']

        if origin_id is not None:
            _setter("origin_id", origin_id)
        if path_and_qs is not None:
            _setter("path_and_qs", path_and_qs)
        if use_incoming_query_string is not None:
            _setter("use_incoming_query_string", use_incoming_query_string)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="pathAndQs")
    def path_and_qs(self) -> Optional[str]:
        return pulumi.get(self, "path_and_qs")

    @property
    @pulumi.getter(name="useIncomingQueryString")
    def use_incoming_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_incoming_query_string")


@pulumi.output_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleMatchResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueResult']] = None):
        GetCloudletsForwardRewriteMatchRuleMatchRuleMatchResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            case_sensitive=case_sensitive,
            check_ips=check_ips,
            match_operator=match_operator,
            match_type=match_type,
            match_value=match_value,
            negate=negate,
            object_match_values=object_match_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             case_sensitive: Optional[bool] = None,
             check_ips: Optional[str] = None,
             match_operator: Optional[str] = None,
             match_type: Optional[str] = None,
             match_value: Optional[str] = None,
             negate: Optional[bool] = None,
             object_match_values: Optional[Sequence['outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'caseSensitive' in kwargs:
            case_sensitive = kwargs['caseSensitive']
        if 'checkIps' in kwargs:
            check_ips = kwargs['checkIps']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchType' in kwargs:
            match_type = kwargs['matchType']
        if 'matchValue' in kwargs:
            match_value = kwargs['matchValue']
        if 'objectMatchValues' in kwargs:
            object_match_values = kwargs['objectMatchValues']

        if case_sensitive is not None:
            _setter("case_sensitive", case_sensitive)
        if check_ips is not None:
            _setter("check_ips", check_ips)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_type is not None:
            _setter("match_type", match_type)
        if match_value is not None:
            _setter("match_value", match_value)
        if negate is not None:
            _setter("negate", negate)
        if object_match_values is not None:
            _setter("object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueResult']]:
        return pulumi.get(self, "object_match_values")


@pulumi.output_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueResult(dict):
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
                 values: Optional[Sequence[str]] = None):
        GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            name=name,
            name_case_sensitive=name_case_sensitive,
            name_has_wildcard=name_has_wildcard,
            options=options,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             name: Optional[str] = None,
             name_case_sensitive: Optional[bool] = None,
             name_has_wildcard: Optional[bool] = None,
             options: Optional['outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'nameCaseSensitive' in kwargs:
            name_case_sensitive = kwargs['nameCaseSensitive']
        if 'nameHasWildcard' in kwargs:
            name_has_wildcard = kwargs['nameHasWildcard']

        _setter("type", type)
        if name is not None:
            _setter("name", name)
        if name_case_sensitive is not None:
            _setter("name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            _setter("name_has_wildcard", name_has_wildcard)
        if options is not None:
            _setter("options", options)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsResult(dict):
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value_case_sensitive=value_case_sensitive,
            value_escaped=value_escaped,
            value_has_wildcard=value_has_wildcard,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value_case_sensitive: Optional[bool] = None,
             value_escaped: Optional[bool] = None,
             value_has_wildcard: Optional[bool] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'valueCaseSensitive' in kwargs:
            value_case_sensitive = kwargs['valueCaseSensitive']
        if 'valueEscaped' in kwargs:
            value_escaped = kwargs['valueEscaped']
        if 'valueHasWildcard' in kwargs:
            value_has_wildcard = kwargs['valueHasWildcard']

        if value_case_sensitive is not None:
            _setter("value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            _setter("value_escaped", value_escaped)
        if value_has_wildcard is not None:
            _setter("value_has_wildcard", value_has_wildcard)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleResult(dict):
    def __init__(__self__, *,
                 forward_settings: 'outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsResult',
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchResult']] = None,
                 matches_always: Optional[bool] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        GetCloudletsPhasedReleaseMatchRuleMatchRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            forward_settings=forward_settings,
            type=type,
            disabled=disabled,
            end=end,
            match_url=match_url,
            matches=matches,
            matches_always=matches_always,
            name=name,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             forward_settings: 'outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsResult',
             type: str,
             disabled: Optional[bool] = None,
             end: Optional[int] = None,
             match_url: Optional[str] = None,
             matches: Optional[Sequence['outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchResult']] = None,
             matches_always: Optional[bool] = None,
             name: Optional[str] = None,
             start: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'forwardSettings' in kwargs:
            forward_settings = kwargs['forwardSettings']
        if 'matchUrl' in kwargs:
            match_url = kwargs['matchUrl']
        if 'matchesAlways' in kwargs:
            matches_always = kwargs['matchesAlways']

        _setter("forward_settings", forward_settings)
        _setter("type", type)
        if disabled is not None:
            _setter("disabled", disabled)
        if end is not None:
            _setter("end", end)
        if match_url is not None:
            _setter("match_url", match_url)
        if matches is not None:
            _setter("matches", matches)
        if matches_always is not None:
            _setter("matches_always", matches_always)
        if name is not None:
            _setter("name", name)
        if start is not None:
            _setter("start", start)

    @property
    @pulumi.getter(name="forwardSettings")
    def forward_settings(self) -> 'outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsResult':
        return pulumi.get(self, "forward_settings")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchResult']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter(name="matchesAlways")
    def matches_always(self) -> Optional[bool]:
        return pulumi.get(self, "matches_always")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsResult(dict):
    def __init__(__self__, *,
                 origin_id: str,
                 percent: int):
        GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            origin_id=origin_id,
            percent=percent,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             origin_id: str,
             percent: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'originId' in kwargs:
            origin_id = kwargs['originId']

        _setter("origin_id", origin_id)
        _setter("percent", percent)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter
    def percent(self) -> int:
        return pulumi.get(self, "percent")


@pulumi.output_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueResult']] = None):
        GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            case_sensitive=case_sensitive,
            check_ips=check_ips,
            match_operator=match_operator,
            match_type=match_type,
            match_value=match_value,
            negate=negate,
            object_match_values=object_match_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             case_sensitive: Optional[bool] = None,
             check_ips: Optional[str] = None,
             match_operator: Optional[str] = None,
             match_type: Optional[str] = None,
             match_value: Optional[str] = None,
             negate: Optional[bool] = None,
             object_match_values: Optional[Sequence['outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'caseSensitive' in kwargs:
            case_sensitive = kwargs['caseSensitive']
        if 'checkIps' in kwargs:
            check_ips = kwargs['checkIps']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchType' in kwargs:
            match_type = kwargs['matchType']
        if 'matchValue' in kwargs:
            match_value = kwargs['matchValue']
        if 'objectMatchValues' in kwargs:
            object_match_values = kwargs['objectMatchValues']

        if case_sensitive is not None:
            _setter("case_sensitive", case_sensitive)
        if check_ips is not None:
            _setter("check_ips", check_ips)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_type is not None:
            _setter("match_type", match_type)
        if match_value is not None:
            _setter("match_value", match_value)
        if negate is not None:
            _setter("negate", negate)
        if object_match_values is not None:
            _setter("object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueResult']]:
        return pulumi.get(self, "object_match_values")


@pulumi.output_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueResult(dict):
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
                 values: Optional[Sequence[str]] = None):
        GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            name=name,
            name_case_sensitive=name_case_sensitive,
            name_has_wildcard=name_has_wildcard,
            options=options,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             name: Optional[str] = None,
             name_case_sensitive: Optional[bool] = None,
             name_has_wildcard: Optional[bool] = None,
             options: Optional['outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'nameCaseSensitive' in kwargs:
            name_case_sensitive = kwargs['nameCaseSensitive']
        if 'nameHasWildcard' in kwargs:
            name_has_wildcard = kwargs['nameHasWildcard']

        _setter("type", type)
        if name is not None:
            _setter("name", name)
        if name_case_sensitive is not None:
            _setter("name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            _setter("name_has_wildcard", name_has_wildcard)
        if options is not None:
            _setter("options", options)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsResult(dict):
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value_case_sensitive=value_case_sensitive,
            value_escaped=value_escaped,
            value_has_wildcard=value_has_wildcard,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value_case_sensitive: Optional[bool] = None,
             value_escaped: Optional[bool] = None,
             value_has_wildcard: Optional[bool] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'valueCaseSensitive' in kwargs:
            value_case_sensitive = kwargs['valueCaseSensitive']
        if 'valueEscaped' in kwargs:
            value_escaped = kwargs['valueEscaped']
        if 'valueHasWildcard' in kwargs:
            value_has_wildcard = kwargs['valueHasWildcard']

        if value_case_sensitive is not None:
            _setter("value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            _setter("value_escaped", value_escaped)
        if value_has_wildcard is not None:
            _setter("value_has_wildcard", value_has_wildcard)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsPolicyActivationResult(dict):
    def __init__(__self__, *,
                 api_version: str,
                 network: str,
                 policy_infos: Sequence['outputs.GetCloudletsPolicyActivationPolicyInfoResult'],
                 property_infos: Sequence['outputs.GetCloudletsPolicyActivationPropertyInfoResult']):
        GetCloudletsPolicyActivationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            api_version=api_version,
            network=network,
            policy_infos=policy_infos,
            property_infos=property_infos,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             api_version: str,
             network: str,
             policy_infos: Sequence['outputs.GetCloudletsPolicyActivationPolicyInfoResult'],
             property_infos: Sequence['outputs.GetCloudletsPolicyActivationPropertyInfoResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiVersion' in kwargs:
            api_version = kwargs['apiVersion']
        if 'policyInfos' in kwargs:
            policy_infos = kwargs['policyInfos']
        if 'propertyInfos' in kwargs:
            property_infos = kwargs['propertyInfos']

        _setter("api_version", api_version)
        _setter("network", network)
        _setter("policy_infos", policy_infos)
        _setter("property_infos", property_infos)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="policyInfos")
    def policy_infos(self) -> Sequence['outputs.GetCloudletsPolicyActivationPolicyInfoResult']:
        return pulumi.get(self, "policy_infos")

    @property
    @pulumi.getter(name="propertyInfos")
    def property_infos(self) -> Sequence['outputs.GetCloudletsPolicyActivationPropertyInfoResult']:
        return pulumi.get(self, "property_infos")


@pulumi.output_type
class GetCloudletsPolicyActivationPolicyInfoResult(dict):
    def __init__(__self__, *,
                 activated_by: str,
                 activation_date: int,
                 name: str,
                 policy_id: int,
                 status: str,
                 status_detail: str,
                 version: int):
        GetCloudletsPolicyActivationPolicyInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            activated_by=activated_by,
            activation_date=activation_date,
            name=name,
            policy_id=policy_id,
            status=status,
            status_detail=status_detail,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             activated_by: str,
             activation_date: int,
             name: str,
             policy_id: int,
             status: str,
             status_detail: str,
             version: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'activatedBy' in kwargs:
            activated_by = kwargs['activatedBy']
        if 'activationDate' in kwargs:
            activation_date = kwargs['activationDate']
        if 'policyId' in kwargs:
            policy_id = kwargs['policyId']
        if 'statusDetail' in kwargs:
            status_detail = kwargs['statusDetail']

        _setter("activated_by", activated_by)
        _setter("activation_date", activation_date)
        _setter("name", name)
        _setter("policy_id", policy_id)
        _setter("status", status)
        _setter("status_detail", status_detail)
        _setter("version", version)

    @property
    @pulumi.getter(name="activatedBy")
    def activated_by(self) -> str:
        return pulumi.get(self, "activated_by")

    @property
    @pulumi.getter(name="activationDate")
    def activation_date(self) -> int:
        return pulumi.get(self, "activation_date")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> int:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetail")
    def status_detail(self) -> str:
        return pulumi.get(self, "status_detail")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCloudletsPolicyActivationPropertyInfoResult(dict):
    def __init__(__self__, *,
                 activated_by: str,
                 activation_date: int,
                 group_id: int,
                 name: str,
                 status: str,
                 version: int):
        GetCloudletsPolicyActivationPropertyInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            activated_by=activated_by,
            activation_date=activation_date,
            group_id=group_id,
            name=name,
            status=status,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             activated_by: str,
             activation_date: int,
             group_id: int,
             name: str,
             status: str,
             version: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'activatedBy' in kwargs:
            activated_by = kwargs['activatedBy']
        if 'activationDate' in kwargs:
            activation_date = kwargs['activationDate']
        if 'groupId' in kwargs:
            group_id = kwargs['groupId']

        _setter("activated_by", activated_by)
        _setter("activation_date", activation_date)
        _setter("group_id", group_id)
        _setter("name", name)
        _setter("status", status)
        _setter("version", version)

    @property
    @pulumi.getter(name="activatedBy")
    def activated_by(self) -> str:
        return pulumi.get(self, "activated_by")

    @property
    @pulumi.getter(name="activationDate")
    def activation_date(self) -> int:
        return pulumi.get(self, "activation_date")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCloudletsRequestControlMatchRuleMatchRuleResult(dict):
    def __init__(__self__, *,
                 allow_deny: str,
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 matches: Optional[Sequence['outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchResult']] = None,
                 matches_always: Optional[bool] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        GetCloudletsRequestControlMatchRuleMatchRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_deny=allow_deny,
            type=type,
            disabled=disabled,
            end=end,
            matches=matches,
            matches_always=matches_always,
            name=name,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_deny: str,
             type: str,
             disabled: Optional[bool] = None,
             end: Optional[int] = None,
             matches: Optional[Sequence['outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchResult']] = None,
             matches_always: Optional[bool] = None,
             name: Optional[str] = None,
             start: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowDeny' in kwargs:
            allow_deny = kwargs['allowDeny']
        if 'matchesAlways' in kwargs:
            matches_always = kwargs['matchesAlways']

        _setter("allow_deny", allow_deny)
        _setter("type", type)
        if disabled is not None:
            _setter("disabled", disabled)
        if end is not None:
            _setter("end", end)
        if matches is not None:
            _setter("matches", matches)
        if matches_always is not None:
            _setter("matches_always", matches_always)
        if name is not None:
            _setter("name", name)
        if start is not None:
            _setter("start", start)

    @property
    @pulumi.getter(name="allowDeny")
    def allow_deny(self) -> str:
        return pulumi.get(self, "allow_deny")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchResult']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter(name="matchesAlways")
    def matches_always(self) -> Optional[bool]:
        return pulumi.get(self, "matches_always")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class GetCloudletsRequestControlMatchRuleMatchRuleMatchResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueResult']] = None):
        GetCloudletsRequestControlMatchRuleMatchRuleMatchResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            case_sensitive=case_sensitive,
            check_ips=check_ips,
            match_operator=match_operator,
            match_type=match_type,
            match_value=match_value,
            negate=negate,
            object_match_values=object_match_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             case_sensitive: Optional[bool] = None,
             check_ips: Optional[str] = None,
             match_operator: Optional[str] = None,
             match_type: Optional[str] = None,
             match_value: Optional[str] = None,
             negate: Optional[bool] = None,
             object_match_values: Optional[Sequence['outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'caseSensitive' in kwargs:
            case_sensitive = kwargs['caseSensitive']
        if 'checkIps' in kwargs:
            check_ips = kwargs['checkIps']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchType' in kwargs:
            match_type = kwargs['matchType']
        if 'matchValue' in kwargs:
            match_value = kwargs['matchValue']
        if 'objectMatchValues' in kwargs:
            object_match_values = kwargs['objectMatchValues']

        if case_sensitive is not None:
            _setter("case_sensitive", case_sensitive)
        if check_ips is not None:
            _setter("check_ips", check_ips)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_type is not None:
            _setter("match_type", match_type)
        if match_value is not None:
            _setter("match_value", match_value)
        if negate is not None:
            _setter("negate", negate)
        if object_match_values is not None:
            _setter("object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueResult']]:
        return pulumi.get(self, "object_match_values")


@pulumi.output_type
class GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueResult(dict):
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
                 values: Optional[Sequence[str]] = None):
        GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            name=name,
            name_case_sensitive=name_case_sensitive,
            name_has_wildcard=name_has_wildcard,
            options=options,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             name: Optional[str] = None,
             name_case_sensitive: Optional[bool] = None,
             name_has_wildcard: Optional[bool] = None,
             options: Optional['outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'nameCaseSensitive' in kwargs:
            name_case_sensitive = kwargs['nameCaseSensitive']
        if 'nameHasWildcard' in kwargs:
            name_has_wildcard = kwargs['nameHasWildcard']

        _setter("type", type)
        if name is not None:
            _setter("name", name)
        if name_case_sensitive is not None:
            _setter("name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            _setter("name_has_wildcard", name_has_wildcard)
        if options is not None:
            _setter("options", options)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsResult(dict):
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value_case_sensitive=value_case_sensitive,
            value_escaped=value_escaped,
            value_has_wildcard=value_has_wildcard,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value_case_sensitive: Optional[bool] = None,
             value_escaped: Optional[bool] = None,
             value_has_wildcard: Optional[bool] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'valueCaseSensitive' in kwargs:
            value_case_sensitive = kwargs['valueCaseSensitive']
        if 'valueEscaped' in kwargs:
            value_escaped = kwargs['valueEscaped']
        if 'valueHasWildcard' in kwargs:
            value_has_wildcard = kwargs['valueHasWildcard']

        if value_case_sensitive is not None:
            _setter("value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            _setter("value_escaped", value_escaped)
        if value_has_wildcard is not None:
            _setter("value_has_wildcard", value_has_wildcard)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleResult(dict):
    def __init__(__self__, *,
                 pass_through_percent: float,
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchResult']] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        GetCloudletsVisitorPrioritizationMatchRuleMatchRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pass_through_percent=pass_through_percent,
            type=type,
            disabled=disabled,
            end=end,
            match_url=match_url,
            matches=matches,
            name=name,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pass_through_percent: float,
             type: str,
             disabled: Optional[bool] = None,
             end: Optional[int] = None,
             match_url: Optional[str] = None,
             matches: Optional[Sequence['outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchResult']] = None,
             name: Optional[str] = None,
             start: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'passThroughPercent' in kwargs:
            pass_through_percent = kwargs['passThroughPercent']
        if 'matchUrl' in kwargs:
            match_url = kwargs['matchUrl']

        _setter("pass_through_percent", pass_through_percent)
        _setter("type", type)
        if disabled is not None:
            _setter("disabled", disabled)
        if end is not None:
            _setter("end", end)
        if match_url is not None:
            _setter("match_url", match_url)
        if matches is not None:
            _setter("matches", matches)
        if name is not None:
            _setter("name", name)
        if start is not None:
            _setter("start", start)

    @property
    @pulumi.getter(name="passThroughPercent")
    def pass_through_percent(self) -> float:
        return pulumi.get(self, "pass_through_percent")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchResult']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult']] = None):
        GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            case_sensitive=case_sensitive,
            check_ips=check_ips,
            match_operator=match_operator,
            match_type=match_type,
            match_value=match_value,
            negate=negate,
            object_match_values=object_match_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             case_sensitive: Optional[bool] = None,
             check_ips: Optional[str] = None,
             match_operator: Optional[str] = None,
             match_type: Optional[str] = None,
             match_value: Optional[str] = None,
             negate: Optional[bool] = None,
             object_match_values: Optional[Sequence['outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'caseSensitive' in kwargs:
            case_sensitive = kwargs['caseSensitive']
        if 'checkIps' in kwargs:
            check_ips = kwargs['checkIps']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchType' in kwargs:
            match_type = kwargs['matchType']
        if 'matchValue' in kwargs:
            match_value = kwargs['matchValue']
        if 'objectMatchValues' in kwargs:
            object_match_values = kwargs['objectMatchValues']

        if case_sensitive is not None:
            _setter("case_sensitive", case_sensitive)
        if check_ips is not None:
            _setter("check_ips", check_ips)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_type is not None:
            _setter("match_type", match_type)
        if match_value is not None:
            _setter("match_value", match_value)
        if negate is not None:
            _setter("negate", negate)
        if object_match_values is not None:
            _setter("object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult']]:
        return pulumi.get(self, "object_match_values")


@pulumi.output_type
class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult(dict):
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
                 values: Optional[Sequence[str]] = None):
        GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            name=name,
            name_case_sensitive=name_case_sensitive,
            name_has_wildcard=name_has_wildcard,
            options=options,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             name: Optional[str] = None,
             name_case_sensitive: Optional[bool] = None,
             name_has_wildcard: Optional[bool] = None,
             options: Optional['outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'nameCaseSensitive' in kwargs:
            name_case_sensitive = kwargs['nameCaseSensitive']
        if 'nameHasWildcard' in kwargs:
            name_has_wildcard = kwargs['nameHasWildcard']

        _setter("type", type)
        if name is not None:
            _setter("name", name)
        if name_case_sensitive is not None:
            _setter("name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            _setter("name_has_wildcard", name_has_wildcard)
        if options is not None:
            _setter("options", options)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult(dict):
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value_case_sensitive=value_case_sensitive,
            value_escaped=value_escaped,
            value_has_wildcard=value_has_wildcard,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value_case_sensitive: Optional[bool] = None,
             value_escaped: Optional[bool] = None,
             value_has_wildcard: Optional[bool] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'valueCaseSensitive' in kwargs:
            value_case_sensitive = kwargs['valueCaseSensitive']
        if 'valueEscaped' in kwargs:
            value_escaped = kwargs['valueEscaped']
        if 'valueHasWildcard' in kwargs:
            value_has_wildcard = kwargs['valueHasWildcard']

        if value_case_sensitive is not None:
            _setter("value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            _setter("value_escaped", value_escaped)
        if value_has_wildcard is not None:
            _setter("value_has_wildcard", value_has_wildcard)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudwrapperCapacitiesCapacityResult(dict):
    def __init__(__self__, *,
                 approved: 'outputs.GetCloudwrapperCapacitiesCapacityApprovedResult',
                 assigned: 'outputs.GetCloudwrapperCapacitiesCapacityAssignedResult',
                 contract_id: str,
                 location_id: int,
                 location_name: str,
                 type: str,
                 unassigned: 'outputs.GetCloudwrapperCapacitiesCapacityUnassignedResult'):
        GetCloudwrapperCapacitiesCapacityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            approved=approved,
            assigned=assigned,
            contract_id=contract_id,
            location_id=location_id,
            location_name=location_name,
            type=type,
            unassigned=unassigned,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             approved: 'outputs.GetCloudwrapperCapacitiesCapacityApprovedResult',
             assigned: 'outputs.GetCloudwrapperCapacitiesCapacityAssignedResult',
             contract_id: str,
             location_id: int,
             location_name: str,
             type: str,
             unassigned: 'outputs.GetCloudwrapperCapacitiesCapacityUnassignedResult',
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'contractId' in kwargs:
            contract_id = kwargs['contractId']
        if 'locationId' in kwargs:
            location_id = kwargs['locationId']
        if 'locationName' in kwargs:
            location_name = kwargs['locationName']

        _setter("approved", approved)
        _setter("assigned", assigned)
        _setter("contract_id", contract_id)
        _setter("location_id", location_id)
        _setter("location_name", location_name)
        _setter("type", type)
        _setter("unassigned", unassigned)

    @property
    @pulumi.getter
    def approved(self) -> 'outputs.GetCloudwrapperCapacitiesCapacityApprovedResult':
        return pulumi.get(self, "approved")

    @property
    @pulumi.getter
    def assigned(self) -> 'outputs.GetCloudwrapperCapacitiesCapacityAssignedResult':
        return pulumi.get(self, "assigned")

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> int:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> str:
        return pulumi.get(self, "location_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unassigned(self) -> 'outputs.GetCloudwrapperCapacitiesCapacityUnassignedResult':
        return pulumi.get(self, "unassigned")


@pulumi.output_type
class GetCloudwrapperCapacitiesCapacityApprovedResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        GetCloudwrapperCapacitiesCapacityApprovedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unit: str,
             value: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("unit", unit)
        _setter("value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCloudwrapperCapacitiesCapacityAssignedResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        GetCloudwrapperCapacitiesCapacityAssignedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unit: str,
             value: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("unit", unit)
        _setter("value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCloudwrapperCapacitiesCapacityUnassignedResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        GetCloudwrapperCapacitiesCapacityUnassignedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unit: str,
             value: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("unit", unit)
        _setter("value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCloudwrapperConfigurationLocationResult(dict):
    def __init__(__self__, *,
                 capacity: 'outputs.GetCloudwrapperConfigurationLocationCapacityResult',
                 comments: str,
                 map_name: str,
                 traffic_type_id: int):
        GetCloudwrapperConfigurationLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            capacity=capacity,
            comments=comments,
            map_name=map_name,
            traffic_type_id=traffic_type_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             capacity: 'outputs.GetCloudwrapperConfigurationLocationCapacityResult',
             comments: str,
             map_name: str,
             traffic_type_id: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'mapName' in kwargs:
            map_name = kwargs['mapName']
        if 'trafficTypeId' in kwargs:
            traffic_type_id = kwargs['trafficTypeId']

        _setter("capacity", capacity)
        _setter("comments", comments)
        _setter("map_name", map_name)
        _setter("traffic_type_id", traffic_type_id)

    @property
    @pulumi.getter
    def capacity(self) -> 'outputs.GetCloudwrapperConfigurationLocationCapacityResult':
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="mapName")
    def map_name(self) -> str:
        return pulumi.get(self, "map_name")

    @property
    @pulumi.getter(name="trafficTypeId")
    def traffic_type_id(self) -> int:
        return pulumi.get(self, "traffic_type_id")


@pulumi.output_type
class GetCloudwrapperConfigurationLocationCapacityResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        GetCloudwrapperConfigurationLocationCapacityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unit: str,
             value: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("unit", unit)
        _setter("value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCloudwrapperConfigurationMultiCdnSettingsResult(dict):
    def __init__(__self__, *,
                 enable_soft_alerts: bool,
                 bocc: Optional['outputs.GetCloudwrapperConfigurationMultiCdnSettingsBoccResult'] = None,
                 cdns: Optional[Sequence['outputs.GetCloudwrapperConfigurationMultiCdnSettingsCdnResult']] = None,
                 data_streams: Optional['outputs.GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsResult'] = None,
                 origins: Optional[Sequence['outputs.GetCloudwrapperConfigurationMultiCdnSettingsOriginResult']] = None):
        GetCloudwrapperConfigurationMultiCdnSettingsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_soft_alerts=enable_soft_alerts,
            bocc=bocc,
            cdns=cdns,
            data_streams=data_streams,
            origins=origins,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_soft_alerts: bool,
             bocc: Optional['outputs.GetCloudwrapperConfigurationMultiCdnSettingsBoccResult'] = None,
             cdns: Optional[Sequence['outputs.GetCloudwrapperConfigurationMultiCdnSettingsCdnResult']] = None,
             data_streams: Optional['outputs.GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsResult'] = None,
             origins: Optional[Sequence['outputs.GetCloudwrapperConfigurationMultiCdnSettingsOriginResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enableSoftAlerts' in kwargs:
            enable_soft_alerts = kwargs['enableSoftAlerts']
        if 'dataStreams' in kwargs:
            data_streams = kwargs['dataStreams']

        _setter("enable_soft_alerts", enable_soft_alerts)
        if bocc is not None:
            _setter("bocc", bocc)
        if cdns is not None:
            _setter("cdns", cdns)
        if data_streams is not None:
            _setter("data_streams", data_streams)
        if origins is not None:
            _setter("origins", origins)

    @property
    @pulumi.getter(name="enableSoftAlerts")
    def enable_soft_alerts(self) -> bool:
        return pulumi.get(self, "enable_soft_alerts")

    @property
    @pulumi.getter
    def bocc(self) -> Optional['outputs.GetCloudwrapperConfigurationMultiCdnSettingsBoccResult']:
        return pulumi.get(self, "bocc")

    @property
    @pulumi.getter
    def cdns(self) -> Optional[Sequence['outputs.GetCloudwrapperConfigurationMultiCdnSettingsCdnResult']]:
        return pulumi.get(self, "cdns")

    @property
    @pulumi.getter(name="dataStreams")
    def data_streams(self) -> Optional['outputs.GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsResult']:
        return pulumi.get(self, "data_streams")

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence['outputs.GetCloudwrapperConfigurationMultiCdnSettingsOriginResult']]:
        return pulumi.get(self, "origins")


@pulumi.output_type
class GetCloudwrapperConfigurationMultiCdnSettingsBoccResult(dict):
    def __init__(__self__, *,
                 conditional_sampling_frequency: str,
                 enabled: bool,
                 forward_type: str,
                 request_type: str,
                 sampling_frequency: str):
        GetCloudwrapperConfigurationMultiCdnSettingsBoccResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_sampling_frequency=conditional_sampling_frequency,
            enabled=enabled,
            forward_type=forward_type,
            request_type=request_type,
            sampling_frequency=sampling_frequency,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_sampling_frequency: str,
             enabled: bool,
             forward_type: str,
             request_type: str,
             sampling_frequency: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'conditionalSamplingFrequency' in kwargs:
            conditional_sampling_frequency = kwargs['conditionalSamplingFrequency']
        if 'forwardType' in kwargs:
            forward_type = kwargs['forwardType']
        if 'requestType' in kwargs:
            request_type = kwargs['requestType']
        if 'samplingFrequency' in kwargs:
            sampling_frequency = kwargs['samplingFrequency']

        _setter("conditional_sampling_frequency", conditional_sampling_frequency)
        _setter("enabled", enabled)
        _setter("forward_type", forward_type)
        _setter("request_type", request_type)
        _setter("sampling_frequency", sampling_frequency)

    @property
    @pulumi.getter(name="conditionalSamplingFrequency")
    def conditional_sampling_frequency(self) -> str:
        return pulumi.get(self, "conditional_sampling_frequency")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forwardType")
    def forward_type(self) -> str:
        return pulumi.get(self, "forward_type")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> str:
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter(name="samplingFrequency")
    def sampling_frequency(self) -> str:
        return pulumi.get(self, "sampling_frequency")


@pulumi.output_type
class GetCloudwrapperConfigurationMultiCdnSettingsCdnResult(dict):
    def __init__(__self__, *,
                 cdn_code: str,
                 enabled: bool,
                 https_only: bool,
                 ip_acl_cidrs: Sequence[str],
                 cdn_auth_keys: Optional[Sequence['outputs.GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyResult']] = None):
        GetCloudwrapperConfigurationMultiCdnSettingsCdnResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cdn_code=cdn_code,
            enabled=enabled,
            https_only=https_only,
            ip_acl_cidrs=ip_acl_cidrs,
            cdn_auth_keys=cdn_auth_keys,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cdn_code: str,
             enabled: bool,
             https_only: bool,
             ip_acl_cidrs: Sequence[str],
             cdn_auth_keys: Optional[Sequence['outputs.GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cdnCode' in kwargs:
            cdn_code = kwargs['cdnCode']
        if 'httpsOnly' in kwargs:
            https_only = kwargs['httpsOnly']
        if 'ipAclCidrs' in kwargs:
            ip_acl_cidrs = kwargs['ipAclCidrs']
        if 'cdnAuthKeys' in kwargs:
            cdn_auth_keys = kwargs['cdnAuthKeys']

        _setter("cdn_code", cdn_code)
        _setter("enabled", enabled)
        _setter("https_only", https_only)
        _setter("ip_acl_cidrs", ip_acl_cidrs)
        if cdn_auth_keys is not None:
            _setter("cdn_auth_keys", cdn_auth_keys)

    @property
    @pulumi.getter(name="cdnCode")
    def cdn_code(self) -> str:
        return pulumi.get(self, "cdn_code")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="httpsOnly")
    def https_only(self) -> bool:
        return pulumi.get(self, "https_only")

    @property
    @pulumi.getter(name="ipAclCidrs")
    def ip_acl_cidrs(self) -> Sequence[str]:
        return pulumi.get(self, "ip_acl_cidrs")

    @property
    @pulumi.getter(name="cdnAuthKeys")
    def cdn_auth_keys(self) -> Optional[Sequence['outputs.GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyResult']]:
        return pulumi.get(self, "cdn_auth_keys")


@pulumi.output_type
class GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyResult(dict):
    def __init__(__self__, *,
                 auth_key_name: str,
                 expiry_date: str,
                 header_name: str,
                 secret: str):
        GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_key_name=auth_key_name,
            expiry_date=expiry_date,
            header_name=header_name,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_key_name: str,
             expiry_date: str,
             header_name: str,
             secret: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authKeyName' in kwargs:
            auth_key_name = kwargs['authKeyName']
        if 'expiryDate' in kwargs:
            expiry_date = kwargs['expiryDate']
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']

        _setter("auth_key_name", auth_key_name)
        _setter("expiry_date", expiry_date)
        _setter("header_name", header_name)
        _setter("secret", secret)

    @property
    @pulumi.getter(name="authKeyName")
    def auth_key_name(self) -> str:
        return pulumi.get(self, "auth_key_name")

    @property
    @pulumi.getter(name="expiryDate")
    def expiry_date(self) -> str:
        return pulumi.get(self, "expiry_date")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")


@pulumi.output_type
class GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsResult(dict):
    def __init__(__self__, *,
                 data_stream_ids: Sequence[int],
                 enabled: bool,
                 sampling_rate: int):
        GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_stream_ids=data_stream_ids,
            enabled=enabled,
            sampling_rate=sampling_rate,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_stream_ids: Sequence[int],
             enabled: bool,
             sampling_rate: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dataStreamIds' in kwargs:
            data_stream_ids = kwargs['dataStreamIds']
        if 'samplingRate' in kwargs:
            sampling_rate = kwargs['samplingRate']

        _setter("data_stream_ids", data_stream_ids)
        _setter("enabled", enabled)
        _setter("sampling_rate", sampling_rate)

    @property
    @pulumi.getter(name="dataStreamIds")
    def data_stream_ids(self) -> Sequence[int]:
        return pulumi.get(self, "data_stream_ids")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> int:
        return pulumi.get(self, "sampling_rate")


@pulumi.output_type
class GetCloudwrapperConfigurationMultiCdnSettingsOriginResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 origin_id: str,
                 property_id: int):
        GetCloudwrapperConfigurationMultiCdnSettingsOriginResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hostname=hostname,
            origin_id=origin_id,
            property_id=property_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hostname: str,
             origin_id: str,
             property_id: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'originId' in kwargs:
            origin_id = kwargs['originId']
        if 'propertyId' in kwargs:
            property_id = kwargs['propertyId']

        _setter("hostname", hostname)
        _setter("origin_id", origin_id)
        _setter("property_id", property_id)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> int:
        return pulumi.get(self, "property_id")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationResult(dict):
    def __init__(__self__, *,
                 capacity_alerts_threshold: int,
                 comments: str,
                 config_name: str,
                 contract_id: str,
                 id: int,
                 last_activated_by: str,
                 last_activated_date: str,
                 last_updated_by: str,
                 last_updated_date: str,
                 notification_emails: Sequence[str],
                 property_ids: Sequence[str],
                 retain_idle_objects: bool,
                 status: str,
                 locations: Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationLocationResult']] = None,
                 multi_cdn_settings: Optional['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsResult'] = None):
        GetCloudwrapperConfigurationsConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            capacity_alerts_threshold=capacity_alerts_threshold,
            comments=comments,
            config_name=config_name,
            contract_id=contract_id,
            id=id,
            last_activated_by=last_activated_by,
            last_activated_date=last_activated_date,
            last_updated_by=last_updated_by,
            last_updated_date=last_updated_date,
            notification_emails=notification_emails,
            property_ids=property_ids,
            retain_idle_objects=retain_idle_objects,
            status=status,
            locations=locations,
            multi_cdn_settings=multi_cdn_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             capacity_alerts_threshold: int,
             comments: str,
             config_name: str,
             contract_id: str,
             id: int,
             last_activated_by: str,
             last_activated_date: str,
             last_updated_by: str,
             last_updated_date: str,
             notification_emails: Sequence[str],
             property_ids: Sequence[str],
             retain_idle_objects: bool,
             status: str,
             locations: Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationLocationResult']] = None,
             multi_cdn_settings: Optional['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'capacityAlertsThreshold' in kwargs:
            capacity_alerts_threshold = kwargs['capacityAlertsThreshold']
        if 'configName' in kwargs:
            config_name = kwargs['configName']
        if 'contractId' in kwargs:
            contract_id = kwargs['contractId']
        if 'lastActivatedBy' in kwargs:
            last_activated_by = kwargs['lastActivatedBy']
        if 'lastActivatedDate' in kwargs:
            last_activated_date = kwargs['lastActivatedDate']
        if 'lastUpdatedBy' in kwargs:
            last_updated_by = kwargs['lastUpdatedBy']
        if 'lastUpdatedDate' in kwargs:
            last_updated_date = kwargs['lastUpdatedDate']
        if 'notificationEmails' in kwargs:
            notification_emails = kwargs['notificationEmails']
        if 'propertyIds' in kwargs:
            property_ids = kwargs['propertyIds']
        if 'retainIdleObjects' in kwargs:
            retain_idle_objects = kwargs['retainIdleObjects']
        if 'multiCdnSettings' in kwargs:
            multi_cdn_settings = kwargs['multiCdnSettings']

        _setter("capacity_alerts_threshold", capacity_alerts_threshold)
        _setter("comments", comments)
        _setter("config_name", config_name)
        _setter("contract_id", contract_id)
        _setter("id", id)
        _setter("last_activated_by", last_activated_by)
        _setter("last_activated_date", last_activated_date)
        _setter("last_updated_by", last_updated_by)
        _setter("last_updated_date", last_updated_date)
        _setter("notification_emails", notification_emails)
        _setter("property_ids", property_ids)
        _setter("retain_idle_objects", retain_idle_objects)
        _setter("status", status)
        if locations is not None:
            _setter("locations", locations)
        if multi_cdn_settings is not None:
            _setter("multi_cdn_settings", multi_cdn_settings)

    @property
    @pulumi.getter(name="capacityAlertsThreshold")
    def capacity_alerts_threshold(self) -> int:
        return pulumi.get(self, "capacity_alerts_threshold")

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> str:
        return pulumi.get(self, "config_name")

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastActivatedBy")
    def last_activated_by(self) -> str:
        return pulumi.get(self, "last_activated_by")

    @property
    @pulumi.getter(name="lastActivatedDate")
    def last_activated_date(self) -> str:
        return pulumi.get(self, "last_activated_date")

    @property
    @pulumi.getter(name="lastUpdatedBy")
    def last_updated_by(self) -> str:
        return pulumi.get(self, "last_updated_by")

    @property
    @pulumi.getter(name="lastUpdatedDate")
    def last_updated_date(self) -> str:
        return pulumi.get(self, "last_updated_date")

    @property
    @pulumi.getter(name="notificationEmails")
    def notification_emails(self) -> Sequence[str]:
        return pulumi.get(self, "notification_emails")

    @property
    @pulumi.getter(name="propertyIds")
    def property_ids(self) -> Sequence[str]:
        return pulumi.get(self, "property_ids")

    @property
    @pulumi.getter(name="retainIdleObjects")
    def retain_idle_objects(self) -> bool:
        return pulumi.get(self, "retain_idle_objects")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationLocationResult']]:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="multiCdnSettings")
    def multi_cdn_settings(self) -> Optional['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsResult']:
        return pulumi.get(self, "multi_cdn_settings")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationLocationResult(dict):
    def __init__(__self__, *,
                 capacity: 'outputs.GetCloudwrapperConfigurationsConfigurationLocationCapacityResult',
                 comments: str,
                 map_name: str,
                 traffic_type_id: int):
        GetCloudwrapperConfigurationsConfigurationLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            capacity=capacity,
            comments=comments,
            map_name=map_name,
            traffic_type_id=traffic_type_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             capacity: 'outputs.GetCloudwrapperConfigurationsConfigurationLocationCapacityResult',
             comments: str,
             map_name: str,
             traffic_type_id: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'mapName' in kwargs:
            map_name = kwargs['mapName']
        if 'trafficTypeId' in kwargs:
            traffic_type_id = kwargs['trafficTypeId']

        _setter("capacity", capacity)
        _setter("comments", comments)
        _setter("map_name", map_name)
        _setter("traffic_type_id", traffic_type_id)

    @property
    @pulumi.getter
    def capacity(self) -> 'outputs.GetCloudwrapperConfigurationsConfigurationLocationCapacityResult':
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="mapName")
    def map_name(self) -> str:
        return pulumi.get(self, "map_name")

    @property
    @pulumi.getter(name="trafficTypeId")
    def traffic_type_id(self) -> int:
        return pulumi.get(self, "traffic_type_id")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationLocationCapacityResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        GetCloudwrapperConfigurationsConfigurationLocationCapacityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unit: str,
             value: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("unit", unit)
        _setter("value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsResult(dict):
    def __init__(__self__, *,
                 enable_soft_alerts: bool,
                 bocc: Optional['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccResult'] = None,
                 cdns: Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnResult']] = None,
                 data_streams: Optional['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsResult'] = None,
                 origins: Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginResult']] = None):
        GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_soft_alerts=enable_soft_alerts,
            bocc=bocc,
            cdns=cdns,
            data_streams=data_streams,
            origins=origins,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_soft_alerts: bool,
             bocc: Optional['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccResult'] = None,
             cdns: Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnResult']] = None,
             data_streams: Optional['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsResult'] = None,
             origins: Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enableSoftAlerts' in kwargs:
            enable_soft_alerts = kwargs['enableSoftAlerts']
        if 'dataStreams' in kwargs:
            data_streams = kwargs['dataStreams']

        _setter("enable_soft_alerts", enable_soft_alerts)
        if bocc is not None:
            _setter("bocc", bocc)
        if cdns is not None:
            _setter("cdns", cdns)
        if data_streams is not None:
            _setter("data_streams", data_streams)
        if origins is not None:
            _setter("origins", origins)

    @property
    @pulumi.getter(name="enableSoftAlerts")
    def enable_soft_alerts(self) -> bool:
        return pulumi.get(self, "enable_soft_alerts")

    @property
    @pulumi.getter
    def bocc(self) -> Optional['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccResult']:
        return pulumi.get(self, "bocc")

    @property
    @pulumi.getter
    def cdns(self) -> Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnResult']]:
        return pulumi.get(self, "cdns")

    @property
    @pulumi.getter(name="dataStreams")
    def data_streams(self) -> Optional['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsResult']:
        return pulumi.get(self, "data_streams")

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginResult']]:
        return pulumi.get(self, "origins")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccResult(dict):
    def __init__(__self__, *,
                 conditional_sampling_frequency: str,
                 enabled: bool,
                 forward_type: str,
                 request_type: str,
                 sampling_frequency: str):
        GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_sampling_frequency=conditional_sampling_frequency,
            enabled=enabled,
            forward_type=forward_type,
            request_type=request_type,
            sampling_frequency=sampling_frequency,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_sampling_frequency: str,
             enabled: bool,
             forward_type: str,
             request_type: str,
             sampling_frequency: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'conditionalSamplingFrequency' in kwargs:
            conditional_sampling_frequency = kwargs['conditionalSamplingFrequency']
        if 'forwardType' in kwargs:
            forward_type = kwargs['forwardType']
        if 'requestType' in kwargs:
            request_type = kwargs['requestType']
        if 'samplingFrequency' in kwargs:
            sampling_frequency = kwargs['samplingFrequency']

        _setter("conditional_sampling_frequency", conditional_sampling_frequency)
        _setter("enabled", enabled)
        _setter("forward_type", forward_type)
        _setter("request_type", request_type)
        _setter("sampling_frequency", sampling_frequency)

    @property
    @pulumi.getter(name="conditionalSamplingFrequency")
    def conditional_sampling_frequency(self) -> str:
        return pulumi.get(self, "conditional_sampling_frequency")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forwardType")
    def forward_type(self) -> str:
        return pulumi.get(self, "forward_type")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> str:
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter(name="samplingFrequency")
    def sampling_frequency(self) -> str:
        return pulumi.get(self, "sampling_frequency")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnResult(dict):
    def __init__(__self__, *,
                 cdn_code: str,
                 enabled: bool,
                 https_only: bool,
                 ip_acl_cidrs: Sequence[str],
                 cdn_auth_keys: Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyResult']] = None):
        GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cdn_code=cdn_code,
            enabled=enabled,
            https_only=https_only,
            ip_acl_cidrs=ip_acl_cidrs,
            cdn_auth_keys=cdn_auth_keys,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cdn_code: str,
             enabled: bool,
             https_only: bool,
             ip_acl_cidrs: Sequence[str],
             cdn_auth_keys: Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cdnCode' in kwargs:
            cdn_code = kwargs['cdnCode']
        if 'httpsOnly' in kwargs:
            https_only = kwargs['httpsOnly']
        if 'ipAclCidrs' in kwargs:
            ip_acl_cidrs = kwargs['ipAclCidrs']
        if 'cdnAuthKeys' in kwargs:
            cdn_auth_keys = kwargs['cdnAuthKeys']

        _setter("cdn_code", cdn_code)
        _setter("enabled", enabled)
        _setter("https_only", https_only)
        _setter("ip_acl_cidrs", ip_acl_cidrs)
        if cdn_auth_keys is not None:
            _setter("cdn_auth_keys", cdn_auth_keys)

    @property
    @pulumi.getter(name="cdnCode")
    def cdn_code(self) -> str:
        return pulumi.get(self, "cdn_code")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="httpsOnly")
    def https_only(self) -> bool:
        return pulumi.get(self, "https_only")

    @property
    @pulumi.getter(name="ipAclCidrs")
    def ip_acl_cidrs(self) -> Sequence[str]:
        return pulumi.get(self, "ip_acl_cidrs")

    @property
    @pulumi.getter(name="cdnAuthKeys")
    def cdn_auth_keys(self) -> Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyResult']]:
        return pulumi.get(self, "cdn_auth_keys")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyResult(dict):
    def __init__(__self__, *,
                 auth_key_name: str,
                 expiry_date: str,
                 header_name: str,
                 secret: str):
        GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_key_name=auth_key_name,
            expiry_date=expiry_date,
            header_name=header_name,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_key_name: str,
             expiry_date: str,
             header_name: str,
             secret: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authKeyName' in kwargs:
            auth_key_name = kwargs['authKeyName']
        if 'expiryDate' in kwargs:
            expiry_date = kwargs['expiryDate']
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']

        _setter("auth_key_name", auth_key_name)
        _setter("expiry_date", expiry_date)
        _setter("header_name", header_name)
        _setter("secret", secret)

    @property
    @pulumi.getter(name="authKeyName")
    def auth_key_name(self) -> str:
        return pulumi.get(self, "auth_key_name")

    @property
    @pulumi.getter(name="expiryDate")
    def expiry_date(self) -> str:
        return pulumi.get(self, "expiry_date")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsResult(dict):
    def __init__(__self__, *,
                 data_stream_ids: Sequence[int],
                 enabled: bool,
                 sampling_rate: int):
        GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_stream_ids=data_stream_ids,
            enabled=enabled,
            sampling_rate=sampling_rate,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_stream_ids: Sequence[int],
             enabled: bool,
             sampling_rate: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dataStreamIds' in kwargs:
            data_stream_ids = kwargs['dataStreamIds']
        if 'samplingRate' in kwargs:
            sampling_rate = kwargs['samplingRate']

        _setter("data_stream_ids", data_stream_ids)
        _setter("enabled", enabled)
        _setter("sampling_rate", sampling_rate)

    @property
    @pulumi.getter(name="dataStreamIds")
    def data_stream_ids(self) -> Sequence[int]:
        return pulumi.get(self, "data_stream_ids")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> int:
        return pulumi.get(self, "sampling_rate")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 origin_id: str,
                 property_id: int):
        GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hostname=hostname,
            origin_id=origin_id,
            property_id=property_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hostname: str,
             origin_id: str,
             property_id: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'originId' in kwargs:
            origin_id = kwargs['originId']
        if 'propertyId' in kwargs:
            property_id = kwargs['propertyId']

        _setter("hostname", hostname)
        _setter("origin_id", origin_id)
        _setter("property_id", property_id)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> int:
        return pulumi.get(self, "property_id")


@pulumi.output_type
class GetCloudwrapperLocationsLocationResult(dict):
    def __init__(__self__, *,
                 location_id: int,
                 location_name: str,
                 multi_cdn_location_id: str,
                 traffic_types: Optional[Sequence['outputs.GetCloudwrapperLocationsLocationTrafficTypeResult']] = None):
        GetCloudwrapperLocationsLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            location_id=location_id,
            location_name=location_name,
            multi_cdn_location_id=multi_cdn_location_id,
            traffic_types=traffic_types,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             location_id: int,
             location_name: str,
             multi_cdn_location_id: str,
             traffic_types: Optional[Sequence['outputs.GetCloudwrapperLocationsLocationTrafficTypeResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'locationId' in kwargs:
            location_id = kwargs['locationId']
        if 'locationName' in kwargs:
            location_name = kwargs['locationName']
        if 'multiCdnLocationId' in kwargs:
            multi_cdn_location_id = kwargs['multiCdnLocationId']
        if 'trafficTypes' in kwargs:
            traffic_types = kwargs['trafficTypes']

        _setter("location_id", location_id)
        _setter("location_name", location_name)
        _setter("multi_cdn_location_id", multi_cdn_location_id)
        if traffic_types is not None:
            _setter("traffic_types", traffic_types)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> int:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> str:
        return pulumi.get(self, "location_name")

    @property
    @pulumi.getter(name="multiCdnLocationId")
    def multi_cdn_location_id(self) -> str:
        return pulumi.get(self, "multi_cdn_location_id")

    @property
    @pulumi.getter(name="trafficTypes")
    def traffic_types(self) -> Optional[Sequence['outputs.GetCloudwrapperLocationsLocationTrafficTypeResult']]:
        return pulumi.get(self, "traffic_types")


@pulumi.output_type
class GetCloudwrapperLocationsLocationTrafficTypeResult(dict):
    def __init__(__self__, *,
                 location_id: str,
                 traffic_type: str,
                 traffic_type_id: int):
        GetCloudwrapperLocationsLocationTrafficTypeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            location_id=location_id,
            traffic_type=traffic_type,
            traffic_type_id=traffic_type_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             location_id: str,
             traffic_type: str,
             traffic_type_id: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'locationId' in kwargs:
            location_id = kwargs['locationId']
        if 'trafficType' in kwargs:
            traffic_type = kwargs['trafficType']
        if 'trafficTypeId' in kwargs:
            traffic_type_id = kwargs['trafficTypeId']

        _setter("location_id", location_id)
        _setter("traffic_type", traffic_type)
        _setter("traffic_type_id", traffic_type_id)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> str:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> str:
        return pulumi.get(self, "traffic_type")

    @property
    @pulumi.getter(name="trafficTypeId")
    def traffic_type_id(self) -> int:
        return pulumi.get(self, "traffic_type_id")


@pulumi.output_type
class GetCloudwrapperPropertiesPropertyResult(dict):
    def __init__(__self__, *,
                 contract_id: str,
                 group_id: int,
                 property_id: int,
                 property_name: str,
                 type: str):
        GetCloudwrapperPropertiesPropertyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contract_id=contract_id,
            group_id=group_id,
            property_id=property_id,
            property_name=property_name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contract_id: str,
             group_id: int,
             property_id: int,
             property_name: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'contractId' in kwargs:
            contract_id = kwargs['contractId']
        if 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if 'propertyId' in kwargs:
            property_id = kwargs['propertyId']
        if 'propertyName' in kwargs:
            property_name = kwargs['propertyName']

        _setter("contract_id", contract_id)
        _setter("group_id", group_id)
        _setter("property_id", property_id)
        _setter("property_name", property_name)
        _setter("type", type)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> int:
        return pulumi.get(self, "property_id")

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> str:
        return pulumi.get(self, "property_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetContractsContractResult(dict):
    def __init__(__self__, *,
                 contract_id: str,
                 contract_type_name: str):
        GetContractsContractResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contract_id=contract_id,
            contract_type_name=contract_type_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contract_id: str,
             contract_type_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'contractId' in kwargs:
            contract_id = kwargs['contractId']
        if 'contractTypeName' in kwargs:
            contract_type_name = kwargs['contractTypeName']

        _setter("contract_id", contract_id)
        _setter("contract_type_name", contract_type_name)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="contractTypeName")
    def contract_type_name(self) -> str:
        return pulumi.get(self, "contract_type_name")


@pulumi.output_type
class GetDatastreamActivationHistoryActivationResult(dict):
    def __init__(__self__, *,
                 modified_by: str,
                 modified_date: str,
                 status: str,
                 stream_id: int,
                 stream_version: int):
        GetDatastreamActivationHistoryActivationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            modified_by=modified_by,
            modified_date=modified_date,
            status=status,
            stream_id=stream_id,
            stream_version=stream_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             modified_by: str,
             modified_date: str,
             status: str,
             stream_id: int,
             stream_version: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'modifiedBy' in kwargs:
            modified_by = kwargs['modifiedBy']
        if 'modifiedDate' in kwargs:
            modified_date = kwargs['modifiedDate']
        if 'streamId' in kwargs:
            stream_id = kwargs['streamId']
        if 'streamVersion' in kwargs:
            stream_version = kwargs['streamVersion']

        _setter("modified_by", modified_by)
        _setter("modified_date", modified_date)
        _setter("status", status)
        _setter("stream_id", stream_id)
        _setter("stream_version", stream_version)

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> str:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="modifiedDate")
    def modified_date(self) -> str:
        return pulumi.get(self, "modified_date")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> int:
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter(name="streamVersion")
    def stream_version(self) -> int:
        return pulumi.get(self, "stream_version")


@pulumi.output_type
class GetDatastreamDatasetFieldsDatasetFieldResult(dict):
    def __init__(__self__, *,
                 dataset_field_description: str,
                 dataset_field_group: str,
                 dataset_field_id: int,
                 dataset_field_json_key: str,
                 dataset_field_name: str):
        GetDatastreamDatasetFieldsDatasetFieldResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataset_field_description=dataset_field_description,
            dataset_field_group=dataset_field_group,
            dataset_field_id=dataset_field_id,
            dataset_field_json_key=dataset_field_json_key,
            dataset_field_name=dataset_field_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataset_field_description: str,
             dataset_field_group: str,
             dataset_field_id: int,
             dataset_field_json_key: str,
             dataset_field_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'datasetFieldDescription' in kwargs:
            dataset_field_description = kwargs['datasetFieldDescription']
        if 'datasetFieldGroup' in kwargs:
            dataset_field_group = kwargs['datasetFieldGroup']
        if 'datasetFieldId' in kwargs:
            dataset_field_id = kwargs['datasetFieldId']
        if 'datasetFieldJsonKey' in kwargs:
            dataset_field_json_key = kwargs['datasetFieldJsonKey']
        if 'datasetFieldName' in kwargs:
            dataset_field_name = kwargs['datasetFieldName']

        _setter("dataset_field_description", dataset_field_description)
        _setter("dataset_field_group", dataset_field_group)
        _setter("dataset_field_id", dataset_field_id)
        _setter("dataset_field_json_key", dataset_field_json_key)
        _setter("dataset_field_name", dataset_field_name)

    @property
    @pulumi.getter(name="datasetFieldDescription")
    def dataset_field_description(self) -> str:
        return pulumi.get(self, "dataset_field_description")

    @property
    @pulumi.getter(name="datasetFieldGroup")
    def dataset_field_group(self) -> str:
        return pulumi.get(self, "dataset_field_group")

    @property
    @pulumi.getter(name="datasetFieldId")
    def dataset_field_id(self) -> int:
        return pulumi.get(self, "dataset_field_id")

    @property
    @pulumi.getter(name="datasetFieldJsonKey")
    def dataset_field_json_key(self) -> str:
        return pulumi.get(self, "dataset_field_json_key")

    @property
    @pulumi.getter(name="datasetFieldName")
    def dataset_field_name(self) -> str:
        return pulumi.get(self, "dataset_field_name")


@pulumi.output_type
class GetDatastreamsStreamsDetailResult(dict):
    def __init__(__self__, *,
                 contract_id: str,
                 created_by: str,
                 created_date: str,
                 group_id: int,
                 latest_version: int,
                 modified_by: str,
                 modified_date: str,
                 product_id: str,
                 properties: Sequence['outputs.GetDatastreamsStreamsDetailPropertyResult'],
                 stream_id: int,
                 stream_name: str,
                 stream_status: str,
                 stream_version: int):
        GetDatastreamsStreamsDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contract_id=contract_id,
            created_by=created_by,
            created_date=created_date,
            group_id=group_id,
            latest_version=latest_version,
            modified_by=modified_by,
            modified_date=modified_date,
            product_id=product_id,
            properties=properties,
            stream_id=stream_id,
            stream_name=stream_name,
            stream_status=stream_status,
            stream_version=stream_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contract_id: str,
             created_by: str,
             created_date: str,
             group_id: int,
             latest_version: int,
             modified_by: str,
             modified_date: str,
             product_id: str,
             properties: Sequence['outputs.GetDatastreamsStreamsDetailPropertyResult'],
             stream_id: int,
             stream_name: str,
             stream_status: str,
             stream_version: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'contractId' in kwargs:
            contract_id = kwargs['contractId']
        if 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']
        if 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if 'latestVersion' in kwargs:
            latest_version = kwargs['latestVersion']
        if 'modifiedBy' in kwargs:
            modified_by = kwargs['modifiedBy']
        if 'modifiedDate' in kwargs:
            modified_date = kwargs['modifiedDate']
        if 'productId' in kwargs:
            product_id = kwargs['productId']
        if 'streamId' in kwargs:
            stream_id = kwargs['streamId']
        if 'streamName' in kwargs:
            stream_name = kwargs['streamName']
        if 'streamStatus' in kwargs:
            stream_status = kwargs['streamStatus']
        if 'streamVersion' in kwargs:
            stream_version = kwargs['streamVersion']

        _setter("contract_id", contract_id)
        _setter("created_by", created_by)
        _setter("created_date", created_date)
        _setter("group_id", group_id)
        _setter("latest_version", latest_version)
        _setter("modified_by", modified_by)
        _setter("modified_date", modified_date)
        _setter("product_id", product_id)
        _setter("properties", properties)
        _setter("stream_id", stream_id)
        _setter("stream_name", stream_name)
        _setter("stream_status", stream_status)
        _setter("stream_version", stream_version)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> int:
        return pulumi.get(self, "latest_version")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> str:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="modifiedDate")
    def modified_date(self) -> str:
        return pulumi.get(self, "modified_date")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetDatastreamsStreamsDetailPropertyResult']:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> int:
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="streamStatus")
    def stream_status(self) -> str:
        return pulumi.get(self, "stream_status")

    @property
    @pulumi.getter(name="streamVersion")
    def stream_version(self) -> int:
        return pulumi.get(self, "stream_version")


@pulumi.output_type
class GetDatastreamsStreamsDetailPropertyResult(dict):
    def __init__(__self__, *,
                 property_id: int,
                 property_name: str):
        GetDatastreamsStreamsDetailPropertyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            property_id=property_id,
            property_name=property_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             property_id: int,
             property_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'propertyId' in kwargs:
            property_id = kwargs['propertyId']
        if 'propertyName' in kwargs:
            property_name = kwargs['propertyName']

        _setter("property_id", property_id)
        _setter("property_name", property_name)

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> int:
        return pulumi.get(self, "property_id")

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> str:
        return pulumi.get(self, "property_name")


@pulumi.output_type
class GetGroupsGroupResult(dict):
    def __init__(__self__, *,
                 contract_ids: Sequence[str],
                 group_id: str,
                 group_name: str,
                 parent_group_id: str):
        GetGroupsGroupResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contract_ids=contract_ids,
            group_id=group_id,
            group_name=group_name,
            parent_group_id=parent_group_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contract_ids: Sequence[str],
             group_id: str,
             group_name: str,
             parent_group_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'contractIds' in kwargs:
            contract_ids = kwargs['contractIds']
        if 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if 'groupName' in kwargs:
            group_name = kwargs['groupName']
        if 'parentGroupId' in kwargs:
            parent_group_id = kwargs['parentGroupId']

        _setter("contract_ids", contract_ids)
        _setter("group_id", group_id)
        _setter("group_name", group_name)
        _setter("parent_group_id", parent_group_id)

    @property
    @pulumi.getter(name="contractIds")
    def contract_ids(self) -> Sequence[str]:
        return pulumi.get(self, "contract_ids")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="parentGroupId")
    def parent_group_id(self) -> str:
        return pulumi.get(self, "parent_group_id")


@pulumi.output_type
class GetGtmDatacenterDefaultLoadObjectResult(dict):
    def __init__(__self__, *,
                 load_object: str,
                 load_object_port: int,
                 load_servers: Sequence[str]):
        GetGtmDatacenterDefaultLoadObjectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            load_object=load_object,
            load_object_port=load_object_port,
            load_servers=load_servers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             load_object: str,
             load_object_port: int,
             load_servers: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'loadObject' in kwargs:
            load_object = kwargs['loadObject']
        if 'loadObjectPort' in kwargs:
            load_object_port = kwargs['loadObjectPort']
        if 'loadServers' in kwargs:
            load_servers = kwargs['loadServers']

        _setter("load_object", load_object)
        _setter("load_object_port", load_object_port)
        _setter("load_servers", load_servers)

    @property
    @pulumi.getter(name="loadObject")
    def load_object(self) -> str:
        return pulumi.get(self, "load_object")

    @property
    @pulumi.getter(name="loadObjectPort")
    def load_object_port(self) -> int:
        return pulumi.get(self, "load_object_port")

    @property
    @pulumi.getter(name="loadServers")
    def load_servers(self) -> Sequence[str]:
        return pulumi.get(self, "load_servers")


@pulumi.output_type
class GetGtmDatacenterLinkResult(dict):
    def __init__(__self__, *,
                 href: str,
                 rel: str):
        GetGtmDatacenterLinkResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            rel=rel,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: str,
             rel: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("href", href)
        _setter("rel", rel)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")


@pulumi.output_type
class GetGtmDatacentersDatacenterResult(dict):
    def __init__(__self__, *,
                 city: str,
                 clone_of: int,
                 cloud_server_host_header_override: bool,
                 cloud_server_targeting: bool,
                 continent: str,
                 country: str,
                 datacenter_id: int,
                 default_load_objects: Sequence['outputs.GetGtmDatacentersDatacenterDefaultLoadObjectResult'],
                 latitude: float,
                 links: Sequence['outputs.GetGtmDatacentersDatacenterLinkResult'],
                 longitude: float,
                 nickname: str,
                 score_penalty: int,
                 servermonitor_pool: str,
                 state_or_province: str,
                 virtual: bool):
        GetGtmDatacentersDatacenterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            city=city,
            clone_of=clone_of,
            cloud_server_host_header_override=cloud_server_host_header_override,
            cloud_server_targeting=cloud_server_targeting,
            continent=continent,
            country=country,
            datacenter_id=datacenter_id,
            default_load_objects=default_load_objects,
            latitude=latitude,
            links=links,
            longitude=longitude,
            nickname=nickname,
            score_penalty=score_penalty,
            servermonitor_pool=servermonitor_pool,
            state_or_province=state_or_province,
            virtual=virtual,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             city: str,
             clone_of: int,
             cloud_server_host_header_override: bool,
             cloud_server_targeting: bool,
             continent: str,
             country: str,
             datacenter_id: int,
             default_load_objects: Sequence['outputs.GetGtmDatacentersDatacenterDefaultLoadObjectResult'],
             latitude: float,
             links: Sequence['outputs.GetGtmDatacentersDatacenterLinkResult'],
             longitude: float,
             nickname: str,
             score_penalty: int,
             servermonitor_pool: str,
             state_or_province: str,
             virtual: bool,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloneOf' in kwargs:
            clone_of = kwargs['cloneOf']
        if 'cloudServerHostHeaderOverride' in kwargs:
            cloud_server_host_header_override = kwargs['cloudServerHostHeaderOverride']
        if 'cloudServerTargeting' in kwargs:
            cloud_server_targeting = kwargs['cloudServerTargeting']
        if 'datacenterId' in kwargs:
            datacenter_id = kwargs['datacenterId']
        if 'defaultLoadObjects' in kwargs:
            default_load_objects = kwargs['defaultLoadObjects']
        if 'scorePenalty' in kwargs:
            score_penalty = kwargs['scorePenalty']
        if 'servermonitorPool' in kwargs:
            servermonitor_pool = kwargs['servermonitorPool']
        if 'stateOrProvince' in kwargs:
            state_or_province = kwargs['stateOrProvince']

        _setter("city", city)
        _setter("clone_of", clone_of)
        _setter("cloud_server_host_header_override", cloud_server_host_header_override)
        _setter("cloud_server_targeting", cloud_server_targeting)
        _setter("continent", continent)
        _setter("country", country)
        _setter("datacenter_id", datacenter_id)
        _setter("default_load_objects", default_load_objects)
        _setter("latitude", latitude)
        _setter("links", links)
        _setter("longitude", longitude)
        _setter("nickname", nickname)
        _setter("score_penalty", score_penalty)
        _setter("servermonitor_pool", servermonitor_pool)
        _setter("state_or_province", state_or_province)
        _setter("virtual", virtual)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="cloneOf")
    def clone_of(self) -> int:
        return pulumi.get(self, "clone_of")

    @property
    @pulumi.getter(name="cloudServerHostHeaderOverride")
    def cloud_server_host_header_override(self) -> bool:
        return pulumi.get(self, "cloud_server_host_header_override")

    @property
    @pulumi.getter(name="cloudServerTargeting")
    def cloud_server_targeting(self) -> bool:
        return pulumi.get(self, "cloud_server_targeting")

    @property
    @pulumi.getter
    def continent(self) -> str:
        return pulumi.get(self, "continent")

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> int:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="defaultLoadObjects")
    def default_load_objects(self) -> Sequence['outputs.GetGtmDatacentersDatacenterDefaultLoadObjectResult']:
        return pulumi.get(self, "default_load_objects")

    @property
    @pulumi.getter
    def latitude(self) -> float:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetGtmDatacentersDatacenterLinkResult']:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter
    def nickname(self) -> str:
        return pulumi.get(self, "nickname")

    @property
    @pulumi.getter(name="scorePenalty")
    def score_penalty(self) -> int:
        return pulumi.get(self, "score_penalty")

    @property
    @pulumi.getter(name="servermonitorPool")
    def servermonitor_pool(self) -> str:
        return pulumi.get(self, "servermonitor_pool")

    @property
    @pulumi.getter(name="stateOrProvince")
    def state_or_province(self) -> str:
        return pulumi.get(self, "state_or_province")

    @property
    @pulumi.getter
    def virtual(self) -> bool:
        return pulumi.get(self, "virtual")


@pulumi.output_type
class GetGtmDatacentersDatacenterDefaultLoadObjectResult(dict):
    def __init__(__self__, *,
                 load_object: str,
                 load_object_port: int,
                 load_servers: Sequence[str]):
        GetGtmDatacentersDatacenterDefaultLoadObjectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            load_object=load_object,
            load_object_port=load_object_port,
            load_servers=load_servers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             load_object: str,
             load_object_port: int,
             load_servers: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'loadObject' in kwargs:
            load_object = kwargs['loadObject']
        if 'loadObjectPort' in kwargs:
            load_object_port = kwargs['loadObjectPort']
        if 'loadServers' in kwargs:
            load_servers = kwargs['loadServers']

        _setter("load_object", load_object)
        _setter("load_object_port", load_object_port)
        _setter("load_servers", load_servers)

    @property
    @pulumi.getter(name="loadObject")
    def load_object(self) -> str:
        return pulumi.get(self, "load_object")

    @property
    @pulumi.getter(name="loadObjectPort")
    def load_object_port(self) -> int:
        return pulumi.get(self, "load_object_port")

    @property
    @pulumi.getter(name="loadServers")
    def load_servers(self) -> Sequence[str]:
        return pulumi.get(self, "load_servers")


@pulumi.output_type
class GetGtmDatacentersDatacenterLinkResult(dict):
    def __init__(__self__, *,
                 href: str,
                 rel: str):
        GetGtmDatacentersDatacenterLinkResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            rel=rel,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: str,
             rel: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("href", href)
        _setter("rel", rel)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")


@pulumi.output_type
class GetIamGrantableRolesGrantableRoleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 granted_role_id: int,
                 name: str):
        GetIamGrantableRolesGrantableRoleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            granted_role_id=granted_role_id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: str,
             granted_role_id: int,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'grantedRoleId' in kwargs:
            granted_role_id = kwargs['grantedRoleId']

        _setter("description", description)
        _setter("granted_role_id", granted_role_id)
        _setter("name", name)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="grantedRoleId")
    def granted_role_id(self) -> int:
        return pulumi.get(self, "granted_role_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIamRolesRoleResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 description: str,
                 modified_by: str,
                 name: str,
                 role_id: str,
                 time_created: str,
                 time_modified: str,
                 type: str):
        GetIamRolesRoleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_by=created_by,
            description=description,
            modified_by=modified_by,
            name=name,
            role_id=role_id,
            time_created=time_created,
            time_modified=time_modified,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_by: str,
             description: str,
             modified_by: str,
             name: str,
             role_id: str,
             time_created: str,
             time_modified: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if 'modifiedBy' in kwargs:
            modified_by = kwargs['modifiedBy']
        if 'roleId' in kwargs:
            role_id = kwargs['roleId']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeModified' in kwargs:
            time_modified = kwargs['timeModified']

        _setter("created_by", created_by)
        _setter("description", description)
        _setter("modified_by", modified_by)
        _setter("name", name)
        _setter("role_id", role_id)
        _setter("time_created", time_created)
        _setter("time_modified", time_modified)
        _setter("type", type)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> str:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> str:
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIamTimezonesTimezoneResult(dict):
    def __init__(__self__, *,
                 description: str,
                 offset: str,
                 posix: str,
                 timezone: str):
        GetIamTimezonesTimezoneResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            offset=offset,
            posix=posix,
            timezone=timezone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: str,
             offset: str,
             posix: str,
             timezone: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("description", description)
        _setter("offset", offset)
        _setter("posix", posix)
        _setter("timezone", timezone)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def offset(self) -> str:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def posix(self) -> str:
        return pulumi.get(self, "posix")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetImagingPolicyImagePolicyResult(dict):
    def __init__(__self__, *,
                 breakpoints: Optional['outputs.GetImagingPolicyImagePolicyBreakpointsResult'] = None,
                 hosts: Optional[Sequence[str]] = None,
                 output: Optional['outputs.GetImagingPolicyImagePolicyOutputResult'] = None,
                 post_breakpoint_transformations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']] = None,
                 rollout_duration: Optional[str] = None,
                 transformations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationResult']] = None,
                 variables: Optional[Sequence['outputs.GetImagingPolicyImagePolicyVariableResult']] = None):
        GetImagingPolicyImagePolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            breakpoints=breakpoints,
            hosts=hosts,
            output=output,
            post_breakpoint_transformations=post_breakpoint_transformations,
            rollout_duration=rollout_duration,
            transformations=transformations,
            variables=variables,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             breakpoints: Optional['outputs.GetImagingPolicyImagePolicyBreakpointsResult'] = None,
             hosts: Optional[Sequence[str]] = None,
             output: Optional['outputs.GetImagingPolicyImagePolicyOutputResult'] = None,
             post_breakpoint_transformations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']] = None,
             rollout_duration: Optional[str] = None,
             transformations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationResult']] = None,
             variables: Optional[Sequence['outputs.GetImagingPolicyImagePolicyVariableResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'postBreakpointTransformations' in kwargs:
            post_breakpoint_transformations = kwargs['postBreakpointTransformations']
        if 'rolloutDuration' in kwargs:
            rollout_duration = kwargs['rolloutDuration']

        if breakpoints is not None:
            _setter("breakpoints", breakpoints)
        if hosts is not None:
            _setter("hosts", hosts)
        if output is not None:
            _setter("output", output)
        if post_breakpoint_transformations is not None:
            _setter("post_breakpoint_transformations", post_breakpoint_transformations)
        if rollout_duration is not None:
            _setter("rollout_duration", rollout_duration)
        if transformations is not None:
            _setter("transformations", transformations)
        if variables is not None:
            _setter("variables", variables)

    @property
    @pulumi.getter
    def breakpoints(self) -> Optional['outputs.GetImagingPolicyImagePolicyBreakpointsResult']:
        return pulumi.get(self, "breakpoints")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def output(self) -> Optional['outputs.GetImagingPolicyImagePolicyOutputResult']:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="postBreakpointTransformations")
    def post_breakpoint_transformations(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']]:
        return pulumi.get(self, "post_breakpoint_transformations")

    @property
    @pulumi.getter(name="rolloutDuration")
    def rollout_duration(self) -> Optional[str]:
        return pulumi.get(self, "rollout_duration")

    @property
    @pulumi.getter
    def transformations(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationResult']]:
        return pulumi.get(self, "transformations")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetImagingPolicyImagePolicyBreakpointsResult(dict):
    def __init__(__self__, *,
                 widths: Optional[Sequence[int]] = None):
        GetImagingPolicyImagePolicyBreakpointsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            widths=widths,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             widths: Optional[Sequence[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if widths is not None:
            _setter("widths", widths)

    @property
    @pulumi.getter
    def widths(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "widths")


@pulumi.output_type
class GetImagingPolicyImagePolicyOutputResult(dict):
    def __init__(__self__, *,
                 adaptive_quality: Optional[str] = None,
                 allowed_formats: Optional[Sequence[str]] = None,
                 forced_formats: Optional[Sequence[str]] = None,
                 perceptual_quality: Optional[str] = None,
                 perceptual_quality_floor: Optional[str] = None,
                 perceptual_quality_var: Optional[str] = None,
                 quality: Optional[str] = None,
                 quality_var: Optional[str] = None):
        GetImagingPolicyImagePolicyOutputResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            adaptive_quality=adaptive_quality,
            allowed_formats=allowed_formats,
            forced_formats=forced_formats,
            perceptual_quality=perceptual_quality,
            perceptual_quality_floor=perceptual_quality_floor,
            perceptual_quality_var=perceptual_quality_var,
            quality=quality,
            quality_var=quality_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             adaptive_quality: Optional[str] = None,
             allowed_formats: Optional[Sequence[str]] = None,
             forced_formats: Optional[Sequence[str]] = None,
             perceptual_quality: Optional[str] = None,
             perceptual_quality_floor: Optional[str] = None,
             perceptual_quality_var: Optional[str] = None,
             quality: Optional[str] = None,
             quality_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'adaptiveQuality' in kwargs:
            adaptive_quality = kwargs['adaptiveQuality']
        if 'allowedFormats' in kwargs:
            allowed_formats = kwargs['allowedFormats']
        if 'forcedFormats' in kwargs:
            forced_formats = kwargs['forcedFormats']
        if 'perceptualQuality' in kwargs:
            perceptual_quality = kwargs['perceptualQuality']
        if 'perceptualQualityFloor' in kwargs:
            perceptual_quality_floor = kwargs['perceptualQualityFloor']
        if 'perceptualQualityVar' in kwargs:
            perceptual_quality_var = kwargs['perceptualQualityVar']
        if 'qualityVar' in kwargs:
            quality_var = kwargs['qualityVar']

        if adaptive_quality is not None:
            _setter("adaptive_quality", adaptive_quality)
        if allowed_formats is not None:
            _setter("allowed_formats", allowed_formats)
        if forced_formats is not None:
            _setter("forced_formats", forced_formats)
        if perceptual_quality is not None:
            _setter("perceptual_quality", perceptual_quality)
        if perceptual_quality_floor is not None:
            _setter("perceptual_quality_floor", perceptual_quality_floor)
        if perceptual_quality_var is not None:
            _setter("perceptual_quality_var", perceptual_quality_var)
        if quality is not None:
            _setter("quality", quality)
        if quality_var is not None:
            _setter("quality_var", quality_var)

    @property
    @pulumi.getter(name="adaptiveQuality")
    def adaptive_quality(self) -> Optional[str]:
        return pulumi.get(self, "adaptive_quality")

    @property
    @pulumi.getter(name="allowedFormats")
    def allowed_formats(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_formats")

    @property
    @pulumi.getter(name="forcedFormats")
    def forced_formats(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "forced_formats")

    @property
    @pulumi.getter(name="perceptualQuality")
    def perceptual_quality(self) -> Optional[str]:
        return pulumi.get(self, "perceptual_quality")

    @property
    @pulumi.getter(name="perceptualQualityFloor")
    def perceptual_quality_floor(self) -> Optional[str]:
        return pulumi.get(self, "perceptual_quality_floor")

    @property
    @pulumi.getter(name="perceptualQualityVar")
    def perceptual_quality_var(self) -> Optional[str]:
        return pulumi.get(self, "perceptual_quality_var")

    @property
    @pulumi.getter
    def quality(self) -> Optional[str]:
        return pulumi.get(self, "quality")

    @property
    @pulumi.getter(name="qualityVar")
    def quality_var(self) -> Optional[str]:
        return pulumi.get(self, "quality_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationResult(dict):
    def __init__(__self__, *,
                 background_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorResult']] = None,
                 blurs: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBlurResult']] = None,
                 chroma_keys: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyResult']] = None,
                 composites: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeResult']] = None,
                 compounds: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundResult']] = None,
                 contrasts: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationContrastResult']] = None,
                 goops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGoopResult']] = None,
                 grayscales: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleResult']] = None,
                 hsls: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHslResult']] = None,
                 hsvs: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHsvResult']] = None,
                 if_dimensions: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionResult']] = None,
                 if_orientations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationResult']] = None,
                 max_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorResult']] = None,
                 mirrors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorResult']] = None,
                 mono_hues: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueResult']] = None,
                 opacities: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityResult']] = None,
                 remove_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorResult']] = None,
                 unsharp_masks: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskResult']] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_colors=background_colors,
            blurs=blurs,
            chroma_keys=chroma_keys,
            composites=composites,
            compounds=compounds,
            contrasts=contrasts,
            goops=goops,
            grayscales=grayscales,
            hsls=hsls,
            hsvs=hsvs,
            if_dimensions=if_dimensions,
            if_orientations=if_orientations,
            max_colors=max_colors,
            mirrors=mirrors,
            mono_hues=mono_hues,
            opacities=opacities,
            remove_colors=remove_colors,
            unsharp_masks=unsharp_masks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorResult']] = None,
             blurs: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBlurResult']] = None,
             chroma_keys: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyResult']] = None,
             composites: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeResult']] = None,
             compounds: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundResult']] = None,
             contrasts: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationContrastResult']] = None,
             goops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGoopResult']] = None,
             grayscales: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleResult']] = None,
             hsls: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHslResult']] = None,
             hsvs: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHsvResult']] = None,
             if_dimensions: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionResult']] = None,
             if_orientations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationResult']] = None,
             max_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorResult']] = None,
             mirrors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorResult']] = None,
             mono_hues: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueResult']] = None,
             opacities: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityResult']] = None,
             remove_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorResult']] = None,
             unsharp_masks: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'backgroundColors' in kwargs:
            background_colors = kwargs['backgroundColors']
        if 'chromaKeys' in kwargs:
            chroma_keys = kwargs['chromaKeys']
        if 'ifDimensions' in kwargs:
            if_dimensions = kwargs['ifDimensions']
        if 'ifOrientations' in kwargs:
            if_orientations = kwargs['ifOrientations']
        if 'maxColors' in kwargs:
            max_colors = kwargs['maxColors']
        if 'monoHues' in kwargs:
            mono_hues = kwargs['monoHues']
        if 'removeColors' in kwargs:
            remove_colors = kwargs['removeColors']
        if 'unsharpMasks' in kwargs:
            unsharp_masks = kwargs['unsharpMasks']

        if background_colors is not None:
            _setter("background_colors", background_colors)
        if blurs is not None:
            _setter("blurs", blurs)
        if chroma_keys is not None:
            _setter("chroma_keys", chroma_keys)
        if composites is not None:
            _setter("composites", composites)
        if compounds is not None:
            _setter("compounds", compounds)
        if contrasts is not None:
            _setter("contrasts", contrasts)
        if goops is not None:
            _setter("goops", goops)
        if grayscales is not None:
            _setter("grayscales", grayscales)
        if hsls is not None:
            _setter("hsls", hsls)
        if hsvs is not None:
            _setter("hsvs", hsvs)
        if if_dimensions is not None:
            _setter("if_dimensions", if_dimensions)
        if if_orientations is not None:
            _setter("if_orientations", if_orientations)
        if max_colors is not None:
            _setter("max_colors", max_colors)
        if mirrors is not None:
            _setter("mirrors", mirrors)
        if mono_hues is not None:
            _setter("mono_hues", mono_hues)
        if opacities is not None:
            _setter("opacities", opacities)
        if remove_colors is not None:
            _setter("remove_colors", remove_colors)
        if unsharp_masks is not None:
            _setter("unsharp_masks", unsharp_masks)

    @property
    @pulumi.getter(name="backgroundColors")
    def background_colors(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorResult']]:
        return pulumi.get(self, "background_colors")

    @property
    @pulumi.getter
    def blurs(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBlurResult']]:
        return pulumi.get(self, "blurs")

    @property
    @pulumi.getter(name="chromaKeys")
    def chroma_keys(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyResult']]:
        return pulumi.get(self, "chroma_keys")

    @property
    @pulumi.getter
    def composites(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeResult']]:
        return pulumi.get(self, "composites")

    @property
    @pulumi.getter
    def compounds(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundResult']]:
        return pulumi.get(self, "compounds")

    @property
    @pulumi.getter
    def contrasts(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationContrastResult']]:
        return pulumi.get(self, "contrasts")

    @property
    @pulumi.getter
    def goops(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGoopResult']]:
        return pulumi.get(self, "goops")

    @property
    @pulumi.getter
    def grayscales(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleResult']]:
        return pulumi.get(self, "grayscales")

    @property
    @pulumi.getter
    def hsls(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHslResult']]:
        return pulumi.get(self, "hsls")

    @property
    @pulumi.getter
    def hsvs(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHsvResult']]:
        return pulumi.get(self, "hsvs")

    @property
    @pulumi.getter(name="ifDimensions")
    def if_dimensions(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionResult']]:
        return pulumi.get(self, "if_dimensions")

    @property
    @pulumi.getter(name="ifOrientations")
    def if_orientations(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationResult']]:
        return pulumi.get(self, "if_orientations")

    @property
    @pulumi.getter(name="maxColors")
    def max_colors(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorResult']]:
        return pulumi.get(self, "max_colors")

    @property
    @pulumi.getter
    def mirrors(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorResult']]:
        return pulumi.get(self, "mirrors")

    @property
    @pulumi.getter(name="monoHues")
    def mono_hues(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueResult']]:
        return pulumi.get(self, "mono_hues")

    @property
    @pulumi.getter
    def opacities(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityResult']]:
        return pulumi.get(self, "opacities")

    @property
    @pulumi.getter(name="removeColors")
    def remove_colors(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorResult']]:
        return pulumi.get(self, "remove_colors")

    @property
    @pulumi.getter(name="unsharpMasks")
    def unsharp_masks(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskResult']]:
        return pulumi.get(self, "unsharp_masks")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            color_var=color_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[str] = None,
             color_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'colorVar' in kwargs:
            color_var = kwargs['colorVar']

        if color is not None:
            _setter("color", color)
        if color_var is not None:
            _setter("color_var", color_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationBlurResult(dict):
    def __init__(__self__, *,
                 sigma: Optional[str] = None,
                 sigma_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationBlurResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sigma=sigma,
            sigma_var=sigma_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sigma: Optional[str] = None,
             sigma_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sigmaVar' in kwargs:
            sigma_var = kwargs['sigmaVar']

        if sigma is not None:
            _setter("sigma", sigma)
        if sigma_var is not None:
            _setter("sigma_var", sigma_var)

    @property
    @pulumi.getter
    def sigma(self) -> Optional[str]:
        return pulumi.get(self, "sigma")

    @property
    @pulumi.getter(name="sigmaVar")
    def sigma_var(self) -> Optional[str]:
        return pulumi.get(self, "sigma_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyResult(dict):
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_feather: Optional[str] = None,
                 hue_feather_var: Optional[str] = None,
                 hue_tolerance: Optional[str] = None,
                 hue_tolerance_var: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 lightness_feather: Optional[str] = None,
                 lightness_feather_var: Optional[str] = None,
                 lightness_tolerance: Optional[str] = None,
                 lightness_tolerance_var: Optional[str] = None,
                 saturation_feather: Optional[str] = None,
                 saturation_feather_var: Optional[str] = None,
                 saturation_tolerance: Optional[str] = None,
                 saturation_tolerance_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hue=hue,
            hue_feather=hue_feather,
            hue_feather_var=hue_feather_var,
            hue_tolerance=hue_tolerance,
            hue_tolerance_var=hue_tolerance_var,
            hue_var=hue_var,
            lightness_feather=lightness_feather,
            lightness_feather_var=lightness_feather_var,
            lightness_tolerance=lightness_tolerance,
            lightness_tolerance_var=lightness_tolerance_var,
            saturation_feather=saturation_feather,
            saturation_feather_var=saturation_feather_var,
            saturation_tolerance=saturation_tolerance,
            saturation_tolerance_var=saturation_tolerance_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hue: Optional[str] = None,
             hue_feather: Optional[str] = None,
             hue_feather_var: Optional[str] = None,
             hue_tolerance: Optional[str] = None,
             hue_tolerance_var: Optional[str] = None,
             hue_var: Optional[str] = None,
             lightness_feather: Optional[str] = None,
             lightness_feather_var: Optional[str] = None,
             lightness_tolerance: Optional[str] = None,
             lightness_tolerance_var: Optional[str] = None,
             saturation_feather: Optional[str] = None,
             saturation_feather_var: Optional[str] = None,
             saturation_tolerance: Optional[str] = None,
             saturation_tolerance_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hueFeather' in kwargs:
            hue_feather = kwargs['hueFeather']
        if 'hueFeatherVar' in kwargs:
            hue_feather_var = kwargs['hueFeatherVar']
        if 'hueTolerance' in kwargs:
            hue_tolerance = kwargs['hueTolerance']
        if 'hueToleranceVar' in kwargs:
            hue_tolerance_var = kwargs['hueToleranceVar']
        if 'hueVar' in kwargs:
            hue_var = kwargs['hueVar']
        if 'lightnessFeather' in kwargs:
            lightness_feather = kwargs['lightnessFeather']
        if 'lightnessFeatherVar' in kwargs:
            lightness_feather_var = kwargs['lightnessFeatherVar']
        if 'lightnessTolerance' in kwargs:
            lightness_tolerance = kwargs['lightnessTolerance']
        if 'lightnessToleranceVar' in kwargs:
            lightness_tolerance_var = kwargs['lightnessToleranceVar']
        if 'saturationFeather' in kwargs:
            saturation_feather = kwargs['saturationFeather']
        if 'saturationFeatherVar' in kwargs:
            saturation_feather_var = kwargs['saturationFeatherVar']
        if 'saturationTolerance' in kwargs:
            saturation_tolerance = kwargs['saturationTolerance']
        if 'saturationToleranceVar' in kwargs:
            saturation_tolerance_var = kwargs['saturationToleranceVar']

        if hue is not None:
            _setter("hue", hue)
        if hue_feather is not None:
            _setter("hue_feather", hue_feather)
        if hue_feather_var is not None:
            _setter("hue_feather_var", hue_feather_var)
        if hue_tolerance is not None:
            _setter("hue_tolerance", hue_tolerance)
        if hue_tolerance_var is not None:
            _setter("hue_tolerance_var", hue_tolerance_var)
        if hue_var is not None:
            _setter("hue_var", hue_var)
        if lightness_feather is not None:
            _setter("lightness_feather", lightness_feather)
        if lightness_feather_var is not None:
            _setter("lightness_feather_var", lightness_feather_var)
        if lightness_tolerance is not None:
            _setter("lightness_tolerance", lightness_tolerance)
        if lightness_tolerance_var is not None:
            _setter("lightness_tolerance_var", lightness_tolerance_var)
        if saturation_feather is not None:
            _setter("saturation_feather", saturation_feather)
        if saturation_feather_var is not None:
            _setter("saturation_feather_var", saturation_feather_var)
        if saturation_tolerance is not None:
            _setter("saturation_tolerance", saturation_tolerance)
        if saturation_tolerance_var is not None:
            _setter("saturation_tolerance_var", saturation_tolerance_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @property
    @pulumi.getter(name="hueFeather")
    def hue_feather(self) -> Optional[str]:
        return pulumi.get(self, "hue_feather")

    @property
    @pulumi.getter(name="hueFeatherVar")
    def hue_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_feather_var")

    @property
    @pulumi.getter(name="hueTolerance")
    def hue_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "hue_tolerance")

    @property
    @pulumi.getter(name="hueToleranceVar")
    def hue_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_tolerance_var")

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @property
    @pulumi.getter(name="lightnessFeather")
    def lightness_feather(self) -> Optional[str]:
        return pulumi.get(self, "lightness_feather")

    @property
    @pulumi.getter(name="lightnessFeatherVar")
    def lightness_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_feather_var")

    @property
    @pulumi.getter(name="lightnessTolerance")
    def lightness_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "lightness_tolerance")

    @property
    @pulumi.getter(name="lightnessToleranceVar")
    def lightness_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_tolerance_var")

    @property
    @pulumi.getter(name="saturationFeather")
    def saturation_feather(self) -> Optional[str]:
        return pulumi.get(self, "saturation_feather")

    @property
    @pulumi.getter(name="saturationFeatherVar")
    def saturation_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_feather_var")

    @property
    @pulumi.getter(name="saturationTolerance")
    def saturation_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "saturation_tolerance")

    @property
    @pulumi.getter(name="saturationToleranceVar")
    def saturation_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_tolerance_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeResult(dict):
    def __init__(__self__, *,
                 image: 'outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageResult',
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 placement: Optional[str] = None,
                 placement_var: Optional[str] = None,
                 scale: Optional[str] = None,
                 scale_dimension: Optional[str] = None,
                 scale_dimension_var: Optional[str] = None,
                 scale_var: Optional[str] = None,
                 x_position: Optional[str] = None,
                 x_position_var: Optional[str] = None,
                 y_position: Optional[str] = None,
                 y_position_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            image=image,
            gravity=gravity,
            gravity_var=gravity_var,
            placement=placement,
            placement_var=placement_var,
            scale=scale,
            scale_dimension=scale_dimension,
            scale_dimension_var=scale_dimension_var,
            scale_var=scale_var,
            x_position=x_position,
            x_position_var=x_position_var,
            y_position=y_position,
            y_position_var=y_position_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             image: 'outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageResult',
             gravity: Optional[str] = None,
             gravity_var: Optional[str] = None,
             placement: Optional[str] = None,
             placement_var: Optional[str] = None,
             scale: Optional[str] = None,
             scale_dimension: Optional[str] = None,
             scale_dimension_var: Optional[str] = None,
             scale_var: Optional[str] = None,
             x_position: Optional[str] = None,
             x_position_var: Optional[str] = None,
             y_position: Optional[str] = None,
             y_position_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'gravityVar' in kwargs:
            gravity_var = kwargs['gravityVar']
        if 'placementVar' in kwargs:
            placement_var = kwargs['placementVar']
        if 'scaleDimension' in kwargs:
            scale_dimension = kwargs['scaleDimension']
        if 'scaleDimensionVar' in kwargs:
            scale_dimension_var = kwargs['scaleDimensionVar']
        if 'scaleVar' in kwargs:
            scale_var = kwargs['scaleVar']
        if 'xPosition' in kwargs:
            x_position = kwargs['xPosition']
        if 'xPositionVar' in kwargs:
            x_position_var = kwargs['xPositionVar']
        if 'yPosition' in kwargs:
            y_position = kwargs['yPosition']
        if 'yPositionVar' in kwargs:
            y_position_var = kwargs['yPositionVar']

        _setter("image", image)
        if gravity is not None:
            _setter("gravity", gravity)
        if gravity_var is not None:
            _setter("gravity_var", gravity_var)
        if placement is not None:
            _setter("placement", placement)
        if placement_var is not None:
            _setter("placement_var", placement_var)
        if scale is not None:
            _setter("scale", scale)
        if scale_dimension is not None:
            _setter("scale_dimension", scale_dimension)
        if scale_dimension_var is not None:
            _setter("scale_dimension_var", scale_dimension_var)
        if scale_var is not None:
            _setter("scale_var", scale_var)
        if x_position is not None:
            _setter("x_position", x_position)
        if x_position_var is not None:
            _setter("x_position_var", x_position_var)
        if y_position is not None:
            _setter("y_position", y_position)
        if y_position_var is not None:
            _setter("y_position_var", y_position_var)

    @property
    @pulumi.getter
    def image(self) -> 'outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageResult':
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @property
    @pulumi.getter
    def placement(self) -> Optional[str]:
        return pulumi.get(self, "placement")

    @property
    @pulumi.getter(name="placementVar")
    def placement_var(self) -> Optional[str]:
        return pulumi.get(self, "placement_var")

    @property
    @pulumi.getter
    def scale(self) -> Optional[str]:
        return pulumi.get(self, "scale")

    @property
    @pulumi.getter(name="scaleDimension")
    def scale_dimension(self) -> Optional[str]:
        return pulumi.get(self, "scale_dimension")

    @property
    @pulumi.getter(name="scaleDimensionVar")
    def scale_dimension_var(self) -> Optional[str]:
        return pulumi.get(self, "scale_dimension_var")

    @property
    @pulumi.getter(name="scaleVar")
    def scale_var(self) -> Optional[str]:
        return pulumi.get(self, "scale_var")

    @property
    @pulumi.getter(name="xPosition")
    def x_position(self) -> Optional[str]:
        return pulumi.get(self, "x_position")

    @property
    @pulumi.getter(name="xPositionVar")
    def x_position_var(self) -> Optional[str]:
        return pulumi.get(self, "x_position_var")

    @property
    @pulumi.getter(name="yPosition")
    def y_position(self) -> Optional[str]:
        return pulumi.get(self, "y_position")

    @property
    @pulumi.getter(name="yPositionVar")
    def y_position_var(self) -> Optional[str]:
        return pulumi.get(self, "y_position_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageResult(dict):
    def __init__(__self__, *,
                 box_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageResult']] = None,
                 circle_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageResult']] = None,
                 text_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageResult']] = None,
                 url_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageResult']] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            box_images=box_images,
            circle_images=circle_images,
            text_images=text_images,
            url_images=url_images,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             box_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageResult']] = None,
             circle_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageResult']] = None,
             text_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageResult']] = None,
             url_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'boxImages' in kwargs:
            box_images = kwargs['boxImages']
        if 'circleImages' in kwargs:
            circle_images = kwargs['circleImages']
        if 'textImages' in kwargs:
            text_images = kwargs['textImages']
        if 'urlImages' in kwargs:
            url_images = kwargs['urlImages']

        if box_images is not None:
            _setter("box_images", box_images)
        if circle_images is not None:
            _setter("circle_images", circle_images)
        if text_images is not None:
            _setter("text_images", text_images)
        if url_images is not None:
            _setter("url_images", url_images)

    @property
    @pulumi.getter(name="boxImages")
    def box_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageResult']]:
        return pulumi.get(self, "box_images")

    @property
    @pulumi.getter(name="circleImages")
    def circle_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageResult']]:
        return pulumi.get(self, "circle_images")

    @property
    @pulumi.getter(name="textImages")
    def text_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageResult']]:
        return pulumi.get(self, "text_images")

    @property
    @pulumi.getter(name="urlImages")
    def url_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageResult']]:
        return pulumi.get(self, "url_images")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            color_var=color_var,
            height=height,
            height_var=height_var,
            transformation=transformation,
            width=width,
            width_var=width_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[str] = None,
             color_var: Optional[str] = None,
             height: Optional[str] = None,
             height_var: Optional[str] = None,
             transformation: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
             width: Optional[str] = None,
             width_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'colorVar' in kwargs:
            color_var = kwargs['colorVar']
        if 'heightVar' in kwargs:
            height_var = kwargs['heightVar']
        if 'widthVar' in kwargs:
            width_var = kwargs['widthVar']

        if color is not None:
            _setter("color", color)
        if color_var is not None:
            _setter("color_var", color_var)
        if height is not None:
            _setter("height", height)
        if height_var is not None:
            _setter("height_var", height_var)
        if transformation is not None:
            _setter("transformation", transformation)
        if width is not None:
            _setter("width", width)
        if width_var is not None:
            _setter("width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 diameter: Optional[str] = None,
                 diameter_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            color_var=color_var,
            diameter=diameter,
            diameter_var=diameter_var,
            transformation=transformation,
            width=width,
            width_var=width_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[str] = None,
             color_var: Optional[str] = None,
             diameter: Optional[str] = None,
             diameter_var: Optional[str] = None,
             transformation: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
             width: Optional[str] = None,
             width_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'colorVar' in kwargs:
            color_var = kwargs['colorVar']
        if 'diameterVar' in kwargs:
            diameter_var = kwargs['diameterVar']
        if 'widthVar' in kwargs:
            width_var = kwargs['widthVar']

        if color is not None:
            _setter("color", color)
        if color_var is not None:
            _setter("color_var", color_var)
        if diameter is not None:
            _setter("diameter", diameter)
        if diameter_var is not None:
            _setter("diameter_var", diameter_var)
        if transformation is not None:
            _setter("transformation", transformation)
        if width is not None:
            _setter("width", width)
        if width_var is not None:
            _setter("width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @property
    @pulumi.getter
    def diameter(self) -> Optional[str]:
        return pulumi.get(self, "diameter")

    @property
    @pulumi.getter(name="diameterVar")
    def diameter_var(self) -> Optional[str]:
        return pulumi.get(self, "diameter_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageResult(dict):
    def __init__(__self__, *,
                 fill: Optional[str] = None,
                 fill_var: Optional[str] = None,
                 size: Optional[str] = None,
                 size_var: Optional[str] = None,
                 stroke: Optional[str] = None,
                 stroke_size: Optional[str] = None,
                 stroke_size_var: Optional[str] = None,
                 stroke_var: Optional[str] = None,
                 text: Optional[str] = None,
                 text_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 typeface: Optional[str] = None,
                 typeface_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fill=fill,
            fill_var=fill_var,
            size=size,
            size_var=size_var,
            stroke=stroke,
            stroke_size=stroke_size,
            stroke_size_var=stroke_size_var,
            stroke_var=stroke_var,
            text=text,
            text_var=text_var,
            transformation=transformation,
            typeface=typeface,
            typeface_var=typeface_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fill: Optional[str] = None,
             fill_var: Optional[str] = None,
             size: Optional[str] = None,
             size_var: Optional[str] = None,
             stroke: Optional[str] = None,
             stroke_size: Optional[str] = None,
             stroke_size_var: Optional[str] = None,
             stroke_var: Optional[str] = None,
             text: Optional[str] = None,
             text_var: Optional[str] = None,
             transformation: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
             typeface: Optional[str] = None,
             typeface_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fillVar' in kwargs:
            fill_var = kwargs['fillVar']
        if 'sizeVar' in kwargs:
            size_var = kwargs['sizeVar']
        if 'strokeSize' in kwargs:
            stroke_size = kwargs['strokeSize']
        if 'strokeSizeVar' in kwargs:
            stroke_size_var = kwargs['strokeSizeVar']
        if 'strokeVar' in kwargs:
            stroke_var = kwargs['strokeVar']
        if 'textVar' in kwargs:
            text_var = kwargs['textVar']
        if 'typefaceVar' in kwargs:
            typeface_var = kwargs['typefaceVar']

        if fill is not None:
            _setter("fill", fill)
        if fill_var is not None:
            _setter("fill_var", fill_var)
        if size is not None:
            _setter("size", size)
        if size_var is not None:
            _setter("size_var", size_var)
        if stroke is not None:
            _setter("stroke", stroke)
        if stroke_size is not None:
            _setter("stroke_size", stroke_size)
        if stroke_size_var is not None:
            _setter("stroke_size_var", stroke_size_var)
        if stroke_var is not None:
            _setter("stroke_var", stroke_var)
        if text is not None:
            _setter("text", text)
        if text_var is not None:
            _setter("text_var", text_var)
        if transformation is not None:
            _setter("transformation", transformation)
        if typeface is not None:
            _setter("typeface", typeface)
        if typeface_var is not None:
            _setter("typeface_var", typeface_var)

    @property
    @pulumi.getter
    def fill(self) -> Optional[str]:
        return pulumi.get(self, "fill")

    @property
    @pulumi.getter(name="fillVar")
    def fill_var(self) -> Optional[str]:
        return pulumi.get(self, "fill_var")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeVar")
    def size_var(self) -> Optional[str]:
        return pulumi.get(self, "size_var")

    @property
    @pulumi.getter
    def stroke(self) -> Optional[str]:
        return pulumi.get(self, "stroke")

    @property
    @pulumi.getter(name="strokeSize")
    def stroke_size(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size")

    @property
    @pulumi.getter(name="strokeSizeVar")
    def stroke_size_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size_var")

    @property
    @pulumi.getter(name="strokeVar")
    def stroke_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_var")

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter(name="textVar")
    def text_var(self) -> Optional[str]:
        return pulumi.get(self, "text_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def typeface(self) -> Optional[str]:
        return pulumi.get(self, "typeface")

    @property
    @pulumi.getter(name="typefaceVar")
    def typeface_var(self) -> Optional[str]:
        return pulumi.get(self, "typeface_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageResult(dict):
    def __init__(__self__, *,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 url: Optional[str] = None,
                 url_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            transformation=transformation,
            url=url,
            url_var=url_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             transformation: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
             url: Optional[str] = None,
             url_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'urlVar' in kwargs:
            url_var = kwargs['urlVar']

        if transformation is not None:
            _setter("transformation", transformation)
        if url is not None:
            _setter("url", url)
        if url_var is not None:
            _setter("url_var", url_var)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="urlVar")
    def url_var(self) -> Optional[str]:
        return pulumi.get(self, "url_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundResult(dict):
    def __init__(__self__, *,
                 transformations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            transformations=transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             transformations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if transformations is not None:
            _setter("transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']]:
        return pulumi.get(self, "transformations")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationContrastResult(dict):
    def __init__(__self__, *,
                 brightness: Optional[str] = None,
                 brightness_var: Optional[str] = None,
                 contrast: Optional[str] = None,
                 contrast_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationContrastResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            brightness=brightness,
            brightness_var=brightness_var,
            contrast=contrast,
            contrast_var=contrast_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             brightness: Optional[str] = None,
             brightness_var: Optional[str] = None,
             contrast: Optional[str] = None,
             contrast_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'brightnessVar' in kwargs:
            brightness_var = kwargs['brightnessVar']
        if 'contrastVar' in kwargs:
            contrast_var = kwargs['contrastVar']

        if brightness is not None:
            _setter("brightness", brightness)
        if brightness_var is not None:
            _setter("brightness_var", brightness_var)
        if contrast is not None:
            _setter("contrast", contrast)
        if contrast_var is not None:
            _setter("contrast_var", contrast_var)

    @property
    @pulumi.getter
    def brightness(self) -> Optional[str]:
        return pulumi.get(self, "brightness")

    @property
    @pulumi.getter(name="brightnessVar")
    def brightness_var(self) -> Optional[str]:
        return pulumi.get(self, "brightness_var")

    @property
    @pulumi.getter
    def contrast(self) -> Optional[str]:
        return pulumi.get(self, "contrast")

    @property
    @pulumi.getter(name="contrastVar")
    def contrast_var(self) -> Optional[str]:
        return pulumi.get(self, "contrast_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationGoopResult(dict):
    def __init__(__self__, *,
                 chaos: Optional[str] = None,
                 chaos_var: Optional[str] = None,
                 density: Optional[str] = None,
                 density_var: Optional[str] = None,
                 power: Optional[str] = None,
                 power_var: Optional[str] = None,
                 seed: Optional[str] = None,
                 seed_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationGoopResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            chaos=chaos,
            chaos_var=chaos_var,
            density=density,
            density_var=density_var,
            power=power,
            power_var=power_var,
            seed=seed,
            seed_var=seed_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             chaos: Optional[str] = None,
             chaos_var: Optional[str] = None,
             density: Optional[str] = None,
             density_var: Optional[str] = None,
             power: Optional[str] = None,
             power_var: Optional[str] = None,
             seed: Optional[str] = None,
             seed_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'chaosVar' in kwargs:
            chaos_var = kwargs['chaosVar']
        if 'densityVar' in kwargs:
            density_var = kwargs['densityVar']
        if 'powerVar' in kwargs:
            power_var = kwargs['powerVar']
        if 'seedVar' in kwargs:
            seed_var = kwargs['seedVar']

        if chaos is not None:
            _setter("chaos", chaos)
        if chaos_var is not None:
            _setter("chaos_var", chaos_var)
        if density is not None:
            _setter("density", density)
        if density_var is not None:
            _setter("density_var", density_var)
        if power is not None:
            _setter("power", power)
        if power_var is not None:
            _setter("power_var", power_var)
        if seed is not None:
            _setter("seed", seed)
        if seed_var is not None:
            _setter("seed_var", seed_var)

    @property
    @pulumi.getter
    def chaos(self) -> Optional[str]:
        return pulumi.get(self, "chaos")

    @property
    @pulumi.getter(name="chaosVar")
    def chaos_var(self) -> Optional[str]:
        return pulumi.get(self, "chaos_var")

    @property
    @pulumi.getter
    def density(self) -> Optional[str]:
        return pulumi.get(self, "density")

    @property
    @pulumi.getter(name="densityVar")
    def density_var(self) -> Optional[str]:
        return pulumi.get(self, "density_var")

    @property
    @pulumi.getter
    def power(self) -> Optional[str]:
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerVar")
    def power_var(self) -> Optional[str]:
        return pulumi.get(self, "power_var")

    @property
    @pulumi.getter
    def seed(self) -> Optional[str]:
        return pulumi.get(self, "seed")

    @property
    @pulumi.getter(name="seedVar")
    def seed_var(self) -> Optional[str]:
        return pulumi.get(self, "seed_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 type_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            type_var=type_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             type_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'typeVar' in kwargs:
            type_var = kwargs['typeVar']

        if type is not None:
            _setter("type", type)
        if type_var is not None:
            _setter("type_var", type_var)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="typeVar")
    def type_var(self) -> Optional[str]:
        return pulumi.get(self, "type_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationHslResult(dict):
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 lightness: Optional[str] = None,
                 lightness_var: Optional[str] = None,
                 saturation: Optional[str] = None,
                 saturation_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationHslResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hue=hue,
            hue_var=hue_var,
            lightness=lightness,
            lightness_var=lightness_var,
            saturation=saturation,
            saturation_var=saturation_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hue: Optional[str] = None,
             hue_var: Optional[str] = None,
             lightness: Optional[str] = None,
             lightness_var: Optional[str] = None,
             saturation: Optional[str] = None,
             saturation_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hueVar' in kwargs:
            hue_var = kwargs['hueVar']
        if 'lightnessVar' in kwargs:
            lightness_var = kwargs['lightnessVar']
        if 'saturationVar' in kwargs:
            saturation_var = kwargs['saturationVar']

        if hue is not None:
            _setter("hue", hue)
        if hue_var is not None:
            _setter("hue_var", hue_var)
        if lightness is not None:
            _setter("lightness", lightness)
        if lightness_var is not None:
            _setter("lightness_var", lightness_var)
        if saturation is not None:
            _setter("saturation", saturation)
        if saturation_var is not None:
            _setter("saturation_var", saturation_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @property
    @pulumi.getter
    def lightness(self) -> Optional[str]:
        return pulumi.get(self, "lightness")

    @property
    @pulumi.getter(name="lightnessVar")
    def lightness_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_var")

    @property
    @pulumi.getter
    def saturation(self) -> Optional[str]:
        return pulumi.get(self, "saturation")

    @property
    @pulumi.getter(name="saturationVar")
    def saturation_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationHsvResult(dict):
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 saturation: Optional[str] = None,
                 saturation_var: Optional[str] = None,
                 value: Optional[str] = None,
                 value_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationHsvResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hue=hue,
            hue_var=hue_var,
            saturation=saturation,
            saturation_var=saturation_var,
            value=value,
            value_var=value_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hue: Optional[str] = None,
             hue_var: Optional[str] = None,
             saturation: Optional[str] = None,
             saturation_var: Optional[str] = None,
             value: Optional[str] = None,
             value_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hueVar' in kwargs:
            hue_var = kwargs['hueVar']
        if 'saturationVar' in kwargs:
            saturation_var = kwargs['saturationVar']
        if 'valueVar' in kwargs:
            value_var = kwargs['valueVar']

        if hue is not None:
            _setter("hue", hue)
        if hue_var is not None:
            _setter("hue_var", hue_var)
        if saturation is not None:
            _setter("saturation", saturation)
        if saturation_var is not None:
            _setter("saturation_var", saturation_var)
        if value is not None:
            _setter("value", value)
        if value_var is not None:
            _setter("value_var", value_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @property
    @pulumi.getter
    def saturation(self) -> Optional[str]:
        return pulumi.get(self, "saturation")

    @property
    @pulumi.getter(name="saturationVar")
    def saturation_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_var")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueVar")
    def value_var(self) -> Optional[str]:
        return pulumi.get(self, "value_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionResult(dict):
    def __init__(__self__, *,
                 default: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 dimension: Optional[str] = None,
                 dimension_var: Optional[str] = None,
                 equal: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 greater_than: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 less_than: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 value: Optional[str] = None,
                 value_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            dimension=dimension,
            dimension_var=dimension_var,
            equal=equal,
            greater_than=greater_than,
            less_than=less_than,
            value=value,
            value_var=value_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
             dimension: Optional[str] = None,
             dimension_var: Optional[str] = None,
             equal: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
             greater_than: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
             less_than: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
             value: Optional[str] = None,
             value_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dimensionVar' in kwargs:
            dimension_var = kwargs['dimensionVar']
        if 'greaterThan' in kwargs:
            greater_than = kwargs['greaterThan']
        if 'lessThan' in kwargs:
            less_than = kwargs['lessThan']
        if 'valueVar' in kwargs:
            value_var = kwargs['valueVar']

        if default is not None:
            _setter("default", default)
        if dimension is not None:
            _setter("dimension", dimension)
        if dimension_var is not None:
            _setter("dimension_var", dimension_var)
        if equal is not None:
            _setter("equal", equal)
        if greater_than is not None:
            _setter("greater_than", greater_than)
        if less_than is not None:
            _setter("less_than", less_than)
        if value is not None:
            _setter("value", value)
        if value_var is not None:
            _setter("value_var", value_var)

    @property
    @pulumi.getter
    def default(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def dimension(self) -> Optional[str]:
        return pulumi.get(self, "dimension")

    @property
    @pulumi.getter(name="dimensionVar")
    def dimension_var(self) -> Optional[str]:
        return pulumi.get(self, "dimension_var")

    @property
    @pulumi.getter
    def equal(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "equal")

    @property
    @pulumi.getter(name="greaterThan")
    def greater_than(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "greater_than")

    @property
    @pulumi.getter(name="lessThan")
    def less_than(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "less_than")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueVar")
    def value_var(self) -> Optional[str]:
        return pulumi.get(self, "value_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationResult(dict):
    def __init__(__self__, *,
                 default: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 landscape: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 portrait: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 square: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            landscape=landscape,
            portrait=portrait,
            square=square,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
             landscape: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
             portrait: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
             square: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if default is not None:
            _setter("default", default)
        if landscape is not None:
            _setter("landscape", landscape)
        if portrait is not None:
            _setter("portrait", portrait)
        if square is not None:
            _setter("square", square)

    @property
    @pulumi.getter
    def default(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def landscape(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "landscape")

    @property
    @pulumi.getter
    def portrait(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "portrait")

    @property
    @pulumi.getter
    def square(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "square")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorResult(dict):
    def __init__(__self__, *,
                 colors: Optional[str] = None,
                 colors_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            colors=colors,
            colors_var=colors_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             colors: Optional[str] = None,
             colors_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'colorsVar' in kwargs:
            colors_var = kwargs['colorsVar']

        if colors is not None:
            _setter("colors", colors)
        if colors_var is not None:
            _setter("colors_var", colors_var)

    @property
    @pulumi.getter
    def colors(self) -> Optional[str]:
        return pulumi.get(self, "colors")

    @property
    @pulumi.getter(name="colorsVar")
    def colors_var(self) -> Optional[str]:
        return pulumi.get(self, "colors_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorResult(dict):
    def __init__(__self__, *,
                 horizontal: Optional[str] = None,
                 horizontal_var: Optional[str] = None,
                 vertical: Optional[str] = None,
                 vertical_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            horizontal=horizontal,
            horizontal_var=horizontal_var,
            vertical=vertical,
            vertical_var=vertical_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             horizontal: Optional[str] = None,
             horizontal_var: Optional[str] = None,
             vertical: Optional[str] = None,
             vertical_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'horizontalVar' in kwargs:
            horizontal_var = kwargs['horizontalVar']
        if 'verticalVar' in kwargs:
            vertical_var = kwargs['verticalVar']

        if horizontal is not None:
            _setter("horizontal", horizontal)
        if horizontal_var is not None:
            _setter("horizontal_var", horizontal_var)
        if vertical is not None:
            _setter("vertical", vertical)
        if vertical_var is not None:
            _setter("vertical_var", vertical_var)

    @property
    @pulumi.getter
    def horizontal(self) -> Optional[str]:
        return pulumi.get(self, "horizontal")

    @property
    @pulumi.getter(name="horizontalVar")
    def horizontal_var(self) -> Optional[str]:
        return pulumi.get(self, "horizontal_var")

    @property
    @pulumi.getter
    def vertical(self) -> Optional[str]:
        return pulumi.get(self, "vertical")

    @property
    @pulumi.getter(name="verticalVar")
    def vertical_var(self) -> Optional[str]:
        return pulumi.get(self, "vertical_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueResult(dict):
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hue=hue,
            hue_var=hue_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hue: Optional[str] = None,
             hue_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hueVar' in kwargs:
            hue_var = kwargs['hueVar']

        if hue is not None:
            _setter("hue", hue)
        if hue_var is not None:
            _setter("hue_var", hue_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityResult(dict):
    def __init__(__self__, *,
                 opacity: Optional[str] = None,
                 opacity_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            opacity=opacity,
            opacity_var=opacity_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opacity: Optional[str] = None,
             opacity_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'opacityVar' in kwargs:
            opacity_var = kwargs['opacityVar']

        if opacity is not None:
            _setter("opacity", opacity)
        if opacity_var is not None:
            _setter("opacity_var", opacity_var)

    @property
    @pulumi.getter
    def opacity(self) -> Optional[str]:
        return pulumi.get(self, "opacity")

    @property
    @pulumi.getter(name="opacityVar")
    def opacity_var(self) -> Optional[str]:
        return pulumi.get(self, "opacity_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 feather: Optional[str] = None,
                 feather_var: Optional[str] = None,
                 tolerance: Optional[str] = None,
                 tolerance_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            color_var=color_var,
            feather=feather,
            feather_var=feather_var,
            tolerance=tolerance,
            tolerance_var=tolerance_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[str] = None,
             color_var: Optional[str] = None,
             feather: Optional[str] = None,
             feather_var: Optional[str] = None,
             tolerance: Optional[str] = None,
             tolerance_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'colorVar' in kwargs:
            color_var = kwargs['colorVar']
        if 'featherVar' in kwargs:
            feather_var = kwargs['featherVar']
        if 'toleranceVar' in kwargs:
            tolerance_var = kwargs['toleranceVar']

        if color is not None:
            _setter("color", color)
        if color_var is not None:
            _setter("color_var", color_var)
        if feather is not None:
            _setter("feather", feather)
        if feather_var is not None:
            _setter("feather_var", feather_var)
        if tolerance is not None:
            _setter("tolerance", tolerance)
        if tolerance_var is not None:
            _setter("tolerance_var", tolerance_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @property
    @pulumi.getter
    def feather(self) -> Optional[str]:
        return pulumi.get(self, "feather")

    @property
    @pulumi.getter(name="featherVar")
    def feather_var(self) -> Optional[str]:
        return pulumi.get(self, "feather_var")

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[str]:
        return pulumi.get(self, "tolerance")

    @property
    @pulumi.getter(name="toleranceVar")
    def tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "tolerance_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskResult(dict):
    def __init__(__self__, *,
                 gain: Optional[str] = None,
                 gain_var: Optional[str] = None,
                 sigma: Optional[str] = None,
                 sigma_var: Optional[str] = None,
                 threshold: Optional[str] = None,
                 threshold_var: Optional[str] = None):
        GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            gain=gain,
            gain_var=gain_var,
            sigma=sigma,
            sigma_var=sigma_var,
            threshold=threshold,
            threshold_var=threshold_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             gain: Optional[str] = None,
             gain_var: Optional[str] = None,
             sigma: Optional[str] = None,
             sigma_var: Optional[str] = None,
             threshold: Optional[str] = None,
             threshold_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'gainVar' in kwargs:
            gain_var = kwargs['gainVar']
        if 'sigmaVar' in kwargs:
            sigma_var = kwargs['sigmaVar']
        if 'thresholdVar' in kwargs:
            threshold_var = kwargs['thresholdVar']

        if gain is not None:
            _setter("gain", gain)
        if gain_var is not None:
            _setter("gain_var", gain_var)
        if sigma is not None:
            _setter("sigma", sigma)
        if sigma_var is not None:
            _setter("sigma_var", sigma_var)
        if threshold is not None:
            _setter("threshold", threshold)
        if threshold_var is not None:
            _setter("threshold_var", threshold_var)

    @property
    @pulumi.getter
    def gain(self) -> Optional[str]:
        return pulumi.get(self, "gain")

    @property
    @pulumi.getter(name="gainVar")
    def gain_var(self) -> Optional[str]:
        return pulumi.get(self, "gain_var")

    @property
    @pulumi.getter
    def sigma(self) -> Optional[str]:
        return pulumi.get(self, "sigma")

    @property
    @pulumi.getter(name="sigmaVar")
    def sigma_var(self) -> Optional[str]:
        return pulumi.get(self, "sigma_var")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[str]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="thresholdVar")
    def threshold_var(self) -> Optional[str]:
        return pulumi.get(self, "threshold_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationResult(dict):
    def __init__(__self__, *,
                 appends: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendResult']] = None,
                 aspect_crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAspectCropResult']] = None,
                 background_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationBackgroundColorResult']] = None,
                 blurs: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationBlurResult']] = None,
                 chroma_keys: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationChromaKeyResult']] = None,
                 composites: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeResult']] = None,
                 compounds: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompoundResult']] = None,
                 contrasts: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationContrastResult']] = None,
                 crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCropResult']] = None,
                 face_crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationFaceCropResult']] = None,
                 feature_crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationFeatureCropResult']] = None,
                 fit_and_fills: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationFitAndFillResult']] = None,
                 goops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationGoopResult']] = None,
                 grayscales: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationGrayscaleResult']] = None,
                 hsls: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationHslResult']] = None,
                 hsvs: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationHsvResult']] = None,
                 if_dimensions: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationIfDimensionResult']] = None,
                 if_orientations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationIfOrientationResult']] = None,
                 im_queries: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationImQueryResult']] = None,
                 max_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationMaxColorResult']] = None,
                 mirrors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationMirrorResult']] = None,
                 mono_hues: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationMonoHueResult']] = None,
                 opacities: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationOpacityResult']] = None,
                 region_of_interest_crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropResult']] = None,
                 relative_crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRelativeCropResult']] = None,
                 remove_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRemoveColorResult']] = None,
                 resizes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationResizeResult']] = None,
                 rotates: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRotateResult']] = None,
                 scales: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationScaleResult']] = None,
                 shears: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationShearsResult']] = None,
                 trims: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationTrimResult']] = None,
                 unsharp_masks: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationUnsharpMaskResult']] = None):
        GetImagingPolicyImagePolicyTransformationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            appends=appends,
            aspect_crops=aspect_crops,
            background_colors=background_colors,
            blurs=blurs,
            chroma_keys=chroma_keys,
            composites=composites,
            compounds=compounds,
            contrasts=contrasts,
            crops=crops,
            face_crops=face_crops,
            feature_crops=feature_crops,
            fit_and_fills=fit_and_fills,
            goops=goops,
            grayscales=grayscales,
            hsls=hsls,
            hsvs=hsvs,
            if_dimensions=if_dimensions,
            if_orientations=if_orientations,
            im_queries=im_queries,
            max_colors=max_colors,
            mirrors=mirrors,
            mono_hues=mono_hues,
            opacities=opacities,
            region_of_interest_crops=region_of_interest_crops,
            relative_crops=relative_crops,
            remove_colors=remove_colors,
            resizes=resizes,
            rotates=rotates,
            scales=scales,
            shears=shears,
            trims=trims,
            unsharp_masks=unsharp_masks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             appends: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendResult']] = None,
             aspect_crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAspectCropResult']] = None,
             background_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationBackgroundColorResult']] = None,
             blurs: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationBlurResult']] = None,
             chroma_keys: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationChromaKeyResult']] = None,
             composites: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeResult']] = None,
             compounds: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompoundResult']] = None,
             contrasts: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationContrastResult']] = None,
             crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCropResult']] = None,
             face_crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationFaceCropResult']] = None,
             feature_crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationFeatureCropResult']] = None,
             fit_and_fills: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationFitAndFillResult']] = None,
             goops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationGoopResult']] = None,
             grayscales: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationGrayscaleResult']] = None,
             hsls: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationHslResult']] = None,
             hsvs: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationHsvResult']] = None,
             if_dimensions: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationIfDimensionResult']] = None,
             if_orientations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationIfOrientationResult']] = None,
             im_queries: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationImQueryResult']] = None,
             max_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationMaxColorResult']] = None,
             mirrors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationMirrorResult']] = None,
             mono_hues: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationMonoHueResult']] = None,
             opacities: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationOpacityResult']] = None,
             region_of_interest_crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropResult']] = None,
             relative_crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRelativeCropResult']] = None,
             remove_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRemoveColorResult']] = None,
             resizes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationResizeResult']] = None,
             rotates: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRotateResult']] = None,
             scales: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationScaleResult']] = None,
             shears: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationShearsResult']] = None,
             trims: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationTrimResult']] = None,
             unsharp_masks: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationUnsharpMaskResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aspectCrops' in kwargs:
            aspect_crops = kwargs['aspectCrops']
        if 'backgroundColors' in kwargs:
            background_colors = kwargs['backgroundColors']
        if 'chromaKeys' in kwargs:
            chroma_keys = kwargs['chromaKeys']
        if 'faceCrops' in kwargs:
            face_crops = kwargs['faceCrops']
        if 'featureCrops' in kwargs:
            feature_crops = kwargs['featureCrops']
        if 'fitAndFills' in kwargs:
            fit_and_fills = kwargs['fitAndFills']
        if 'ifDimensions' in kwargs:
            if_dimensions = kwargs['ifDimensions']
        if 'ifOrientations' in kwargs:
            if_orientations = kwargs['ifOrientations']
        if 'imQueries' in kwargs:
            im_queries = kwargs['imQueries']
        if 'maxColors' in kwargs:
            max_colors = kwargs['maxColors']
        if 'monoHues' in kwargs:
            mono_hues = kwargs['monoHues']
        if 'regionOfInterestCrops' in kwargs:
            region_of_interest_crops = kwargs['regionOfInterestCrops']
        if 'relativeCrops' in kwargs:
            relative_crops = kwargs['relativeCrops']
        if 'removeColors' in kwargs:
            remove_colors = kwargs['removeColors']
        if 'unsharpMasks' in kwargs:
            unsharp_masks = kwargs['unsharpMasks']

        if appends is not None:
            _setter("appends", appends)
        if aspect_crops is not None:
            _setter("aspect_crops", aspect_crops)
        if background_colors is not None:
            _setter("background_colors", background_colors)
        if blurs is not None:
            _setter("blurs", blurs)
        if chroma_keys is not None:
            _setter("chroma_keys", chroma_keys)
        if composites is not None:
            _setter("composites", composites)
        if compounds is not None:
            _setter("compounds", compounds)
        if contrasts is not None:
            _setter("contrasts", contrasts)
        if crops is not None:
            _setter("crops", crops)
        if face_crops is not None:
            _setter("face_crops", face_crops)
        if feature_crops is not None:
            _setter("feature_crops", feature_crops)
        if fit_and_fills is not None:
            _setter("fit_and_fills", fit_and_fills)
        if goops is not None:
            _setter("goops", goops)
        if grayscales is not None:
            _setter("grayscales", grayscales)
        if hsls is not None:
            _setter("hsls", hsls)
        if hsvs is not None:
            _setter("hsvs", hsvs)
        if if_dimensions is not None:
            _setter("if_dimensions", if_dimensions)
        if if_orientations is not None:
            _setter("if_orientations", if_orientations)
        if im_queries is not None:
            _setter("im_queries", im_queries)
        if max_colors is not None:
            _setter("max_colors", max_colors)
        if mirrors is not None:
            _setter("mirrors", mirrors)
        if mono_hues is not None:
            _setter("mono_hues", mono_hues)
        if opacities is not None:
            _setter("opacities", opacities)
        if region_of_interest_crops is not None:
            _setter("region_of_interest_crops", region_of_interest_crops)
        if relative_crops is not None:
            _setter("relative_crops", relative_crops)
        if remove_colors is not None:
            _setter("remove_colors", remove_colors)
        if resizes is not None:
            _setter("resizes", resizes)
        if rotates is not None:
            _setter("rotates", rotates)
        if scales is not None:
            _setter("scales", scales)
        if shears is not None:
            _setter("shears", shears)
        if trims is not None:
            _setter("trims", trims)
        if unsharp_masks is not None:
            _setter("unsharp_masks", unsharp_masks)

    @property
    @pulumi.getter
    def appends(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendResult']]:
        return pulumi.get(self, "appends")

    @property
    @pulumi.getter(name="aspectCrops")
    def aspect_crops(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAspectCropResult']]:
        return pulumi.get(self, "aspect_crops")

    @property
    @pulumi.getter(name="backgroundColors")
    def background_colors(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationBackgroundColorResult']]:
        return pulumi.get(self, "background_colors")

    @property
    @pulumi.getter
    def blurs(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationBlurResult']]:
        return pulumi.get(self, "blurs")

    @property
    @pulumi.getter(name="chromaKeys")
    def chroma_keys(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationChromaKeyResult']]:
        return pulumi.get(self, "chroma_keys")

    @property
    @pulumi.getter
    def composites(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeResult']]:
        return pulumi.get(self, "composites")

    @property
    @pulumi.getter
    def compounds(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompoundResult']]:
        return pulumi.get(self, "compounds")

    @property
    @pulumi.getter
    def contrasts(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationContrastResult']]:
        return pulumi.get(self, "contrasts")

    @property
    @pulumi.getter
    def crops(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCropResult']]:
        return pulumi.get(self, "crops")

    @property
    @pulumi.getter(name="faceCrops")
    def face_crops(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationFaceCropResult']]:
        return pulumi.get(self, "face_crops")

    @property
    @pulumi.getter(name="featureCrops")
    def feature_crops(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationFeatureCropResult']]:
        return pulumi.get(self, "feature_crops")

    @property
    @pulumi.getter(name="fitAndFills")
    def fit_and_fills(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationFitAndFillResult']]:
        return pulumi.get(self, "fit_and_fills")

    @property
    @pulumi.getter
    def goops(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationGoopResult']]:
        return pulumi.get(self, "goops")

    @property
    @pulumi.getter
    def grayscales(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationGrayscaleResult']]:
        return pulumi.get(self, "grayscales")

    @property
    @pulumi.getter
    def hsls(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationHslResult']]:
        return pulumi.get(self, "hsls")

    @property
    @pulumi.getter
    def hsvs(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationHsvResult']]:
        return pulumi.get(self, "hsvs")

    @property
    @pulumi.getter(name="ifDimensions")
    def if_dimensions(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationIfDimensionResult']]:
        return pulumi.get(self, "if_dimensions")

    @property
    @pulumi.getter(name="ifOrientations")
    def if_orientations(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationIfOrientationResult']]:
        return pulumi.get(self, "if_orientations")

    @property
    @pulumi.getter(name="imQueries")
    def im_queries(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationImQueryResult']]:
        return pulumi.get(self, "im_queries")

    @property
    @pulumi.getter(name="maxColors")
    def max_colors(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationMaxColorResult']]:
        return pulumi.get(self, "max_colors")

    @property
    @pulumi.getter
    def mirrors(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationMirrorResult']]:
        return pulumi.get(self, "mirrors")

    @property
    @pulumi.getter(name="monoHues")
    def mono_hues(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationMonoHueResult']]:
        return pulumi.get(self, "mono_hues")

    @property
    @pulumi.getter
    def opacities(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationOpacityResult']]:
        return pulumi.get(self, "opacities")

    @property
    @pulumi.getter(name="regionOfInterestCrops")
    def region_of_interest_crops(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropResult']]:
        return pulumi.get(self, "region_of_interest_crops")

    @property
    @pulumi.getter(name="relativeCrops")
    def relative_crops(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRelativeCropResult']]:
        return pulumi.get(self, "relative_crops")

    @property
    @pulumi.getter(name="removeColors")
    def remove_colors(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRemoveColorResult']]:
        return pulumi.get(self, "remove_colors")

    @property
    @pulumi.getter
    def resizes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationResizeResult']]:
        return pulumi.get(self, "resizes")

    @property
    @pulumi.getter
    def rotates(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRotateResult']]:
        return pulumi.get(self, "rotates")

    @property
    @pulumi.getter
    def scales(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationScaleResult']]:
        return pulumi.get(self, "scales")

    @property
    @pulumi.getter
    def shears(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationShearsResult']]:
        return pulumi.get(self, "shears")

    @property
    @pulumi.getter
    def trims(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationTrimResult']]:
        return pulumi.get(self, "trims")

    @property
    @pulumi.getter(name="unsharpMasks")
    def unsharp_masks(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationUnsharpMaskResult']]:
        return pulumi.get(self, "unsharp_masks")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationAppendResult(dict):
    def __init__(__self__, *,
                 image: 'outputs.GetImagingPolicyImagePolicyTransformationAppendImageResult',
                 gravity: Optional[str] = None,
                 gravity_priority: Optional[str] = None,
                 gravity_priority_var: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 preserve_minor_dimension: Optional[str] = None,
                 preserve_minor_dimension_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationAppendResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            image=image,
            gravity=gravity,
            gravity_priority=gravity_priority,
            gravity_priority_var=gravity_priority_var,
            gravity_var=gravity_var,
            preserve_minor_dimension=preserve_minor_dimension,
            preserve_minor_dimension_var=preserve_minor_dimension_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             image: 'outputs.GetImagingPolicyImagePolicyTransformationAppendImageResult',
             gravity: Optional[str] = None,
             gravity_priority: Optional[str] = None,
             gravity_priority_var: Optional[str] = None,
             gravity_var: Optional[str] = None,
             preserve_minor_dimension: Optional[str] = None,
             preserve_minor_dimension_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'gravityPriority' in kwargs:
            gravity_priority = kwargs['gravityPriority']
        if 'gravityPriorityVar' in kwargs:
            gravity_priority_var = kwargs['gravityPriorityVar']
        if 'gravityVar' in kwargs:
            gravity_var = kwargs['gravityVar']
        if 'preserveMinorDimension' in kwargs:
            preserve_minor_dimension = kwargs['preserveMinorDimension']
        if 'preserveMinorDimensionVar' in kwargs:
            preserve_minor_dimension_var = kwargs['preserveMinorDimensionVar']

        _setter("image", image)
        if gravity is not None:
            _setter("gravity", gravity)
        if gravity_priority is not None:
            _setter("gravity_priority", gravity_priority)
        if gravity_priority_var is not None:
            _setter("gravity_priority_var", gravity_priority_var)
        if gravity_var is not None:
            _setter("gravity_var", gravity_var)
        if preserve_minor_dimension is not None:
            _setter("preserve_minor_dimension", preserve_minor_dimension)
        if preserve_minor_dimension_var is not None:
            _setter("preserve_minor_dimension_var", preserve_minor_dimension_var)

    @property
    @pulumi.getter
    def image(self) -> 'outputs.GetImagingPolicyImagePolicyTransformationAppendImageResult':
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @property
    @pulumi.getter(name="gravityPriority")
    def gravity_priority(self) -> Optional[str]:
        return pulumi.get(self, "gravity_priority")

    @property
    @pulumi.getter(name="gravityPriorityVar")
    def gravity_priority_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_priority_var")

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @property
    @pulumi.getter(name="preserveMinorDimension")
    def preserve_minor_dimension(self) -> Optional[str]:
        return pulumi.get(self, "preserve_minor_dimension")

    @property
    @pulumi.getter(name="preserveMinorDimensionVar")
    def preserve_minor_dimension_var(self) -> Optional[str]:
        return pulumi.get(self, "preserve_minor_dimension_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationAppendImageResult(dict):
    def __init__(__self__, *,
                 box_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageResult']] = None,
                 circle_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageResult']] = None,
                 text_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageResult']] = None,
                 url_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageResult']] = None):
        GetImagingPolicyImagePolicyTransformationAppendImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            box_images=box_images,
            circle_images=circle_images,
            text_images=text_images,
            url_images=url_images,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             box_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageResult']] = None,
             circle_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageResult']] = None,
             text_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageResult']] = None,
             url_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'boxImages' in kwargs:
            box_images = kwargs['boxImages']
        if 'circleImages' in kwargs:
            circle_images = kwargs['circleImages']
        if 'textImages' in kwargs:
            text_images = kwargs['textImages']
        if 'urlImages' in kwargs:
            url_images = kwargs['urlImages']

        if box_images is not None:
            _setter("box_images", box_images)
        if circle_images is not None:
            _setter("circle_images", circle_images)
        if text_images is not None:
            _setter("text_images", text_images)
        if url_images is not None:
            _setter("url_images", url_images)

    @property
    @pulumi.getter(name="boxImages")
    def box_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageResult']]:
        return pulumi.get(self, "box_images")

    @property
    @pulumi.getter(name="circleImages")
    def circle_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageResult']]:
        return pulumi.get(self, "circle_images")

    @property
    @pulumi.getter(name="textImages")
    def text_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageResult']]:
        return pulumi.get(self, "text_images")

    @property
    @pulumi.getter(name="urlImages")
    def url_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageResult']]:
        return pulumi.get(self, "url_images")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationAppendImageBoxImageResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationAppendImageBoxImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            color_var=color_var,
            height=height,
            height_var=height_var,
            transformation=transformation,
            width=width,
            width_var=width_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[str] = None,
             color_var: Optional[str] = None,
             height: Optional[str] = None,
             height_var: Optional[str] = None,
             transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
             width: Optional[str] = None,
             width_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'colorVar' in kwargs:
            color_var = kwargs['colorVar']
        if 'heightVar' in kwargs:
            height_var = kwargs['heightVar']
        if 'widthVar' in kwargs:
            width_var = kwargs['widthVar']

        if color is not None:
            _setter("color", color)
        if color_var is not None:
            _setter("color_var", color_var)
        if height is not None:
            _setter("height", height)
        if height_var is not None:
            _setter("height_var", height_var)
        if transformation is not None:
            _setter("transformation", transformation)
        if width is not None:
            _setter("width", width)
        if width_var is not None:
            _setter("width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationAppendImageCircleImageResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 diameter: Optional[str] = None,
                 diameter_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationAppendImageCircleImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            color_var=color_var,
            diameter=diameter,
            diameter_var=diameter_var,
            transformation=transformation,
            width=width,
            width_var=width_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[str] = None,
             color_var: Optional[str] = None,
             diameter: Optional[str] = None,
             diameter_var: Optional[str] = None,
             transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
             width: Optional[str] = None,
             width_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'colorVar' in kwargs:
            color_var = kwargs['colorVar']
        if 'diameterVar' in kwargs:
            diameter_var = kwargs['diameterVar']
        if 'widthVar' in kwargs:
            width_var = kwargs['widthVar']

        if color is not None:
            _setter("color", color)
        if color_var is not None:
            _setter("color_var", color_var)
        if diameter is not None:
            _setter("diameter", diameter)
        if diameter_var is not None:
            _setter("diameter_var", diameter_var)
        if transformation is not None:
            _setter("transformation", transformation)
        if width is not None:
            _setter("width", width)
        if width_var is not None:
            _setter("width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @property
    @pulumi.getter
    def diameter(self) -> Optional[str]:
        return pulumi.get(self, "diameter")

    @property
    @pulumi.getter(name="diameterVar")
    def diameter_var(self) -> Optional[str]:
        return pulumi.get(self, "diameter_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationAppendImageTextImageResult(dict):
    def __init__(__self__, *,
                 fill: Optional[str] = None,
                 fill_var: Optional[str] = None,
                 size: Optional[str] = None,
                 size_var: Optional[str] = None,
                 stroke: Optional[str] = None,
                 stroke_size: Optional[str] = None,
                 stroke_size_var: Optional[str] = None,
                 stroke_var: Optional[str] = None,
                 text: Optional[str] = None,
                 text_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 typeface: Optional[str] = None,
                 typeface_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationAppendImageTextImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fill=fill,
            fill_var=fill_var,
            size=size,
            size_var=size_var,
            stroke=stroke,
            stroke_size=stroke_size,
            stroke_size_var=stroke_size_var,
            stroke_var=stroke_var,
            text=text,
            text_var=text_var,
            transformation=transformation,
            typeface=typeface,
            typeface_var=typeface_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fill: Optional[str] = None,
             fill_var: Optional[str] = None,
             size: Optional[str] = None,
             size_var: Optional[str] = None,
             stroke: Optional[str] = None,
             stroke_size: Optional[str] = None,
             stroke_size_var: Optional[str] = None,
             stroke_var: Optional[str] = None,
             text: Optional[str] = None,
             text_var: Optional[str] = None,
             transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
             typeface: Optional[str] = None,
             typeface_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fillVar' in kwargs:
            fill_var = kwargs['fillVar']
        if 'sizeVar' in kwargs:
            size_var = kwargs['sizeVar']
        if 'strokeSize' in kwargs:
            stroke_size = kwargs['strokeSize']
        if 'strokeSizeVar' in kwargs:
            stroke_size_var = kwargs['strokeSizeVar']
        if 'strokeVar' in kwargs:
            stroke_var = kwargs['strokeVar']
        if 'textVar' in kwargs:
            text_var = kwargs['textVar']
        if 'typefaceVar' in kwargs:
            typeface_var = kwargs['typefaceVar']

        if fill is not None:
            _setter("fill", fill)
        if fill_var is not None:
            _setter("fill_var", fill_var)
        if size is not None:
            _setter("size", size)
        if size_var is not None:
            _setter("size_var", size_var)
        if stroke is not None:
            _setter("stroke", stroke)
        if stroke_size is not None:
            _setter("stroke_size", stroke_size)
        if stroke_size_var is not None:
            _setter("stroke_size_var", stroke_size_var)
        if stroke_var is not None:
            _setter("stroke_var", stroke_var)
        if text is not None:
            _setter("text", text)
        if text_var is not None:
            _setter("text_var", text_var)
        if transformation is not None:
            _setter("transformation", transformation)
        if typeface is not None:
            _setter("typeface", typeface)
        if typeface_var is not None:
            _setter("typeface_var", typeface_var)

    @property
    @pulumi.getter
    def fill(self) -> Optional[str]:
        return pulumi.get(self, "fill")

    @property
    @pulumi.getter(name="fillVar")
    def fill_var(self) -> Optional[str]:
        return pulumi.get(self, "fill_var")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeVar")
    def size_var(self) -> Optional[str]:
        return pulumi.get(self, "size_var")

    @property
    @pulumi.getter
    def stroke(self) -> Optional[str]:
        return pulumi.get(self, "stroke")

    @property
    @pulumi.getter(name="strokeSize")
    def stroke_size(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size")

    @property
    @pulumi.getter(name="strokeSizeVar")
    def stroke_size_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size_var")

    @property
    @pulumi.getter(name="strokeVar")
    def stroke_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_var")

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter(name="textVar")
    def text_var(self) -> Optional[str]:
        return pulumi.get(self, "text_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def typeface(self) -> Optional[str]:
        return pulumi.get(self, "typeface")

    @property
    @pulumi.getter(name="typefaceVar")
    def typeface_var(self) -> Optional[str]:
        return pulumi.get(self, "typeface_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationAppendImageUrlImageResult(dict):
    def __init__(__self__, *,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 url: Optional[str] = None,
                 url_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationAppendImageUrlImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            transformation=transformation,
            url=url,
            url_var=url_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
             url: Optional[str] = None,
             url_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'urlVar' in kwargs:
            url_var = kwargs['urlVar']

        if transformation is not None:
            _setter("transformation", transformation)
        if url is not None:
            _setter("url", url)
        if url_var is not None:
            _setter("url_var", url_var)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="urlVar")
    def url_var(self) -> Optional[str]:
        return pulumi.get(self, "url_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationAspectCropResult(dict):
    def __init__(__self__, *,
                 allow_expansion: Optional[str] = None,
                 allow_expansion_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None,
                 x_position: Optional[str] = None,
                 x_position_var: Optional[str] = None,
                 y_position: Optional[str] = None,
                 y_position_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationAspectCropResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_expansion=allow_expansion,
            allow_expansion_var=allow_expansion_var,
            height=height,
            height_var=height_var,
            width=width,
            width_var=width_var,
            x_position=x_position,
            x_position_var=x_position_var,
            y_position=y_position,
            y_position_var=y_position_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_expansion: Optional[str] = None,
             allow_expansion_var: Optional[str] = None,
             height: Optional[str] = None,
             height_var: Optional[str] = None,
             width: Optional[str] = None,
             width_var: Optional[str] = None,
             x_position: Optional[str] = None,
             x_position_var: Optional[str] = None,
             y_position: Optional[str] = None,
             y_position_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowExpansion' in kwargs:
            allow_expansion = kwargs['allowExpansion']
        if 'allowExpansionVar' in kwargs:
            allow_expansion_var = kwargs['allowExpansionVar']
        if 'heightVar' in kwargs:
            height_var = kwargs['heightVar']
        if 'widthVar' in kwargs:
            width_var = kwargs['widthVar']
        if 'xPosition' in kwargs:
            x_position = kwargs['xPosition']
        if 'xPositionVar' in kwargs:
            x_position_var = kwargs['xPositionVar']
        if 'yPosition' in kwargs:
            y_position = kwargs['yPosition']
        if 'yPositionVar' in kwargs:
            y_position_var = kwargs['yPositionVar']

        if allow_expansion is not None:
            _setter("allow_expansion", allow_expansion)
        if allow_expansion_var is not None:
            _setter("allow_expansion_var", allow_expansion_var)
        if height is not None:
            _setter("height", height)
        if height_var is not None:
            _setter("height_var", height_var)
        if width is not None:
            _setter("width", width)
        if width_var is not None:
            _setter("width_var", width_var)
        if x_position is not None:
            _setter("x_position", x_position)
        if x_position_var is not None:
            _setter("x_position_var", x_position_var)
        if y_position is not None:
            _setter("y_position", y_position)
        if y_position_var is not None:
            _setter("y_position_var", y_position_var)

    @property
    @pulumi.getter(name="allowExpansion")
    def allow_expansion(self) -> Optional[str]:
        return pulumi.get(self, "allow_expansion")

    @property
    @pulumi.getter(name="allowExpansionVar")
    def allow_expansion_var(self) -> Optional[str]:
        return pulumi.get(self, "allow_expansion_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @property
    @pulumi.getter(name="xPosition")
    def x_position(self) -> Optional[str]:
        return pulumi.get(self, "x_position")

    @property
    @pulumi.getter(name="xPositionVar")
    def x_position_var(self) -> Optional[str]:
        return pulumi.get(self, "x_position_var")

    @property
    @pulumi.getter(name="yPosition")
    def y_position(self) -> Optional[str]:
        return pulumi.get(self, "y_position")

    @property
    @pulumi.getter(name="yPositionVar")
    def y_position_var(self) -> Optional[str]:
        return pulumi.get(self, "y_position_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationBackgroundColorResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationBackgroundColorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            color_var=color_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[str] = None,
             color_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'colorVar' in kwargs:
            color_var = kwargs['colorVar']

        if color is not None:
            _setter("color", color)
        if color_var is not None:
            _setter("color_var", color_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationBlurResult(dict):
    def __init__(__self__, *,
                 sigma: Optional[str] = None,
                 sigma_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationBlurResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sigma=sigma,
            sigma_var=sigma_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sigma: Optional[str] = None,
             sigma_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sigmaVar' in kwargs:
            sigma_var = kwargs['sigmaVar']

        if sigma is not None:
            _setter("sigma", sigma)
        if sigma_var is not None:
            _setter("sigma_var", sigma_var)

    @property
    @pulumi.getter
    def sigma(self) -> Optional[str]:
        return pulumi.get(self, "sigma")

    @property
    @pulumi.getter(name="sigmaVar")
    def sigma_var(self) -> Optional[str]:
        return pulumi.get(self, "sigma_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationChromaKeyResult(dict):
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_feather: Optional[str] = None,
                 hue_feather_var: Optional[str] = None,
                 hue_tolerance: Optional[str] = None,
                 hue_tolerance_var: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 lightness_feather: Optional[str] = None,
                 lightness_feather_var: Optional[str] = None,
                 lightness_tolerance: Optional[str] = None,
                 lightness_tolerance_var: Optional[str] = None,
                 saturation_feather: Optional[str] = None,
                 saturation_feather_var: Optional[str] = None,
                 saturation_tolerance: Optional[str] = None,
                 saturation_tolerance_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationChromaKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hue=hue,
            hue_feather=hue_feather,
            hue_feather_var=hue_feather_var,
            hue_tolerance=hue_tolerance,
            hue_tolerance_var=hue_tolerance_var,
            hue_var=hue_var,
            lightness_feather=lightness_feather,
            lightness_feather_var=lightness_feather_var,
            lightness_tolerance=lightness_tolerance,
            lightness_tolerance_var=lightness_tolerance_var,
            saturation_feather=saturation_feather,
            saturation_feather_var=saturation_feather_var,
            saturation_tolerance=saturation_tolerance,
            saturation_tolerance_var=saturation_tolerance_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hue: Optional[str] = None,
             hue_feather: Optional[str] = None,
             hue_feather_var: Optional[str] = None,
             hue_tolerance: Optional[str] = None,
             hue_tolerance_var: Optional[str] = None,
             hue_var: Optional[str] = None,
             lightness_feather: Optional[str] = None,
             lightness_feather_var: Optional[str] = None,
             lightness_tolerance: Optional[str] = None,
             lightness_tolerance_var: Optional[str] = None,
             saturation_feather: Optional[str] = None,
             saturation_feather_var: Optional[str] = None,
             saturation_tolerance: Optional[str] = None,
             saturation_tolerance_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hueFeather' in kwargs:
            hue_feather = kwargs['hueFeather']
        if 'hueFeatherVar' in kwargs:
            hue_feather_var = kwargs['hueFeatherVar']
        if 'hueTolerance' in kwargs:
            hue_tolerance = kwargs['hueTolerance']
        if 'hueToleranceVar' in kwargs:
            hue_tolerance_var = kwargs['hueToleranceVar']
        if 'hueVar' in kwargs:
            hue_var = kwargs['hueVar']
        if 'lightnessFeather' in kwargs:
            lightness_feather = kwargs['lightnessFeather']
        if 'lightnessFeatherVar' in kwargs:
            lightness_feather_var = kwargs['lightnessFeatherVar']
        if 'lightnessTolerance' in kwargs:
            lightness_tolerance = kwargs['lightnessTolerance']
        if 'lightnessToleranceVar' in kwargs:
            lightness_tolerance_var = kwargs['lightnessToleranceVar']
        if 'saturationFeather' in kwargs:
            saturation_feather = kwargs['saturationFeather']
        if 'saturationFeatherVar' in kwargs:
            saturation_feather_var = kwargs['saturationFeatherVar']
        if 'saturationTolerance' in kwargs:
            saturation_tolerance = kwargs['saturationTolerance']
        if 'saturationToleranceVar' in kwargs:
            saturation_tolerance_var = kwargs['saturationToleranceVar']

        if hue is not None:
            _setter("hue", hue)
        if hue_feather is not None:
            _setter("hue_feather", hue_feather)
        if hue_feather_var is not None:
            _setter("hue_feather_var", hue_feather_var)
        if hue_tolerance is not None:
            _setter("hue_tolerance", hue_tolerance)
        if hue_tolerance_var is not None:
            _setter("hue_tolerance_var", hue_tolerance_var)
        if hue_var is not None:
            _setter("hue_var", hue_var)
        if lightness_feather is not None:
            _setter("lightness_feather", lightness_feather)
        if lightness_feather_var is not None:
            _setter("lightness_feather_var", lightness_feather_var)
        if lightness_tolerance is not None:
            _setter("lightness_tolerance", lightness_tolerance)
        if lightness_tolerance_var is not None:
            _setter("lightness_tolerance_var", lightness_tolerance_var)
        if saturation_feather is not None:
            _setter("saturation_feather", saturation_feather)
        if saturation_feather_var is not None:
            _setter("saturation_feather_var", saturation_feather_var)
        if saturation_tolerance is not None:
            _setter("saturation_tolerance", saturation_tolerance)
        if saturation_tolerance_var is not None:
            _setter("saturation_tolerance_var", saturation_tolerance_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @property
    @pulumi.getter(name="hueFeather")
    def hue_feather(self) -> Optional[str]:
        return pulumi.get(self, "hue_feather")

    @property
    @pulumi.getter(name="hueFeatherVar")
    def hue_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_feather_var")

    @property
    @pulumi.getter(name="hueTolerance")
    def hue_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "hue_tolerance")

    @property
    @pulumi.getter(name="hueToleranceVar")
    def hue_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_tolerance_var")

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @property
    @pulumi.getter(name="lightnessFeather")
    def lightness_feather(self) -> Optional[str]:
        return pulumi.get(self, "lightness_feather")

    @property
    @pulumi.getter(name="lightnessFeatherVar")
    def lightness_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_feather_var")

    @property
    @pulumi.getter(name="lightnessTolerance")
    def lightness_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "lightness_tolerance")

    @property
    @pulumi.getter(name="lightnessToleranceVar")
    def lightness_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_tolerance_var")

    @property
    @pulumi.getter(name="saturationFeather")
    def saturation_feather(self) -> Optional[str]:
        return pulumi.get(self, "saturation_feather")

    @property
    @pulumi.getter(name="saturationFeatherVar")
    def saturation_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_feather_var")

    @property
    @pulumi.getter(name="saturationTolerance")
    def saturation_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "saturation_tolerance")

    @property
    @pulumi.getter(name="saturationToleranceVar")
    def saturation_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_tolerance_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationCompositeResult(dict):
    def __init__(__self__, *,
                 image: 'outputs.GetImagingPolicyImagePolicyTransformationCompositeImageResult',
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 placement: Optional[str] = None,
                 placement_var: Optional[str] = None,
                 scale: Optional[str] = None,
                 scale_dimension: Optional[str] = None,
                 scale_dimension_var: Optional[str] = None,
                 scale_var: Optional[str] = None,
                 x_position: Optional[str] = None,
                 x_position_var: Optional[str] = None,
                 y_position: Optional[str] = None,
                 y_position_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationCompositeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            image=image,
            gravity=gravity,
            gravity_var=gravity_var,
            placement=placement,
            placement_var=placement_var,
            scale=scale,
            scale_dimension=scale_dimension,
            scale_dimension_var=scale_dimension_var,
            scale_var=scale_var,
            x_position=x_position,
            x_position_var=x_position_var,
            y_position=y_position,
            y_position_var=y_position_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             image: 'outputs.GetImagingPolicyImagePolicyTransformationCompositeImageResult',
             gravity: Optional[str] = None,
             gravity_var: Optional[str] = None,
             placement: Optional[str] = None,
             placement_var: Optional[str] = None,
             scale: Optional[str] = None,
             scale_dimension: Optional[str] = None,
             scale_dimension_var: Optional[str] = None,
             scale_var: Optional[str] = None,
             x_position: Optional[str] = None,
             x_position_var: Optional[str] = None,
             y_position: Optional[str] = None,
             y_position_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'gravityVar' in kwargs:
            gravity_var = kwargs['gravityVar']
        if 'placementVar' in kwargs:
            placement_var = kwargs['placementVar']
        if 'scaleDimension' in kwargs:
            scale_dimension = kwargs['scaleDimension']
        if 'scaleDimensionVar' in kwargs:
            scale_dimension_var = kwargs['scaleDimensionVar']
        if 'scaleVar' in kwargs:
            scale_var = kwargs['scaleVar']
        if 'xPosition' in kwargs:
            x_position = kwargs['xPosition']
        if 'xPositionVar' in kwargs:
            x_position_var = kwargs['xPositionVar']
        if 'yPosition' in kwargs:
            y_position = kwargs['yPosition']
        if 'yPositionVar' in kwargs:
            y_position_var = kwargs['yPositionVar']

        _setter("image", image)
        if gravity is not None:
            _setter("gravity", gravity)
        if gravity_var is not None:
            _setter("gravity_var", gravity_var)
        if placement is not None:
            _setter("placement", placement)
        if placement_var is not None:
            _setter("placement_var", placement_var)
        if scale is not None:
            _setter("scale", scale)
        if scale_dimension is not None:
            _setter("scale_dimension", scale_dimension)
        if scale_dimension_var is not None:
            _setter("scale_dimension_var", scale_dimension_var)
        if scale_var is not None:
            _setter("scale_var", scale_var)
        if x_position is not None:
            _setter("x_position", x_position)
        if x_position_var is not None:
            _setter("x_position_var", x_position_var)
        if y_position is not None:
            _setter("y_position", y_position)
        if y_position_var is not None:
            _setter("y_position_var", y_position_var)

    @property
    @pulumi.getter
    def image(self) -> 'outputs.GetImagingPolicyImagePolicyTransformationCompositeImageResult':
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @property
    @pulumi.getter
    def placement(self) -> Optional[str]:
        return pulumi.get(self, "placement")

    @property
    @pulumi.getter(name="placementVar")
    def placement_var(self) -> Optional[str]:
        return pulumi.get(self, "placement_var")

    @property
    @pulumi.getter
    def scale(self) -> Optional[str]:
        return pulumi.get(self, "scale")

    @property
    @pulumi.getter(name="scaleDimension")
    def scale_dimension(self) -> Optional[str]:
        return pulumi.get(self, "scale_dimension")

    @property
    @pulumi.getter(name="scaleDimensionVar")
    def scale_dimension_var(self) -> Optional[str]:
        return pulumi.get(self, "scale_dimension_var")

    @property
    @pulumi.getter(name="scaleVar")
    def scale_var(self) -> Optional[str]:
        return pulumi.get(self, "scale_var")

    @property
    @pulumi.getter(name="xPosition")
    def x_position(self) -> Optional[str]:
        return pulumi.get(self, "x_position")

    @property
    @pulumi.getter(name="xPositionVar")
    def x_position_var(self) -> Optional[str]:
        return pulumi.get(self, "x_position_var")

    @property
    @pulumi.getter(name="yPosition")
    def y_position(self) -> Optional[str]:
        return pulumi.get(self, "y_position")

    @property
    @pulumi.getter(name="yPositionVar")
    def y_position_var(self) -> Optional[str]:
        return pulumi.get(self, "y_position_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationCompositeImageResult(dict):
    def __init__(__self__, *,
                 box_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageResult']] = None,
                 circle_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageResult']] = None,
                 text_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageResult']] = None,
                 url_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageResult']] = None):
        GetImagingPolicyImagePolicyTransformationCompositeImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            box_images=box_images,
            circle_images=circle_images,
            text_images=text_images,
            url_images=url_images,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             box_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageResult']] = None,
             circle_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageResult']] = None,
             text_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageResult']] = None,
             url_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'boxImages' in kwargs:
            box_images = kwargs['boxImages']
        if 'circleImages' in kwargs:
            circle_images = kwargs['circleImages']
        if 'textImages' in kwargs:
            text_images = kwargs['textImages']
        if 'urlImages' in kwargs:
            url_images = kwargs['urlImages']

        if box_images is not None:
            _setter("box_images", box_images)
        if circle_images is not None:
            _setter("circle_images", circle_images)
        if text_images is not None:
            _setter("text_images", text_images)
        if url_images is not None:
            _setter("url_images", url_images)

    @property
    @pulumi.getter(name="boxImages")
    def box_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageResult']]:
        return pulumi.get(self, "box_images")

    @property
    @pulumi.getter(name="circleImages")
    def circle_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageResult']]:
        return pulumi.get(self, "circle_images")

    @property
    @pulumi.getter(name="textImages")
    def text_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageResult']]:
        return pulumi.get(self, "text_images")

    @property
    @pulumi.getter(name="urlImages")
    def url_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageResult']]:
        return pulumi.get(self, "url_images")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            color_var=color_var,
            height=height,
            height_var=height_var,
            transformation=transformation,
            width=width,
            width_var=width_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[str] = None,
             color_var: Optional[str] = None,
             height: Optional[str] = None,
             height_var: Optional[str] = None,
             transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
             width: Optional[str] = None,
             width_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'colorVar' in kwargs:
            color_var = kwargs['colorVar']
        if 'heightVar' in kwargs:
            height_var = kwargs['heightVar']
        if 'widthVar' in kwargs:
            width_var = kwargs['widthVar']

        if color is not None:
            _setter("color", color)
        if color_var is not None:
            _setter("color_var", color_var)
        if height is not None:
            _setter("height", height)
        if height_var is not None:
            _setter("height_var", height_var)
        if transformation is not None:
            _setter("transformation", transformation)
        if width is not None:
            _setter("width", width)
        if width_var is not None:
            _setter("width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 diameter: Optional[str] = None,
                 diameter_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            color_var=color_var,
            diameter=diameter,
            diameter_var=diameter_var,
            transformation=transformation,
            width=width,
            width_var=width_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[str] = None,
             color_var: Optional[str] = None,
             diameter: Optional[str] = None,
             diameter_var: Optional[str] = None,
             transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
             width: Optional[str] = None,
             width_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'colorVar' in kwargs:
            color_var = kwargs['colorVar']
        if 'diameterVar' in kwargs:
            diameter_var = kwargs['diameterVar']
        if 'widthVar' in kwargs:
            width_var = kwargs['widthVar']

        if color is not None:
            _setter("color", color)
        if color_var is not None:
            _setter("color_var", color_var)
        if diameter is not None:
            _setter("diameter", diameter)
        if diameter_var is not None:
            _setter("diameter_var", diameter_var)
        if transformation is not None:
            _setter("transformation", transformation)
        if width is not None:
            _setter("width", width)
        if width_var is not None:
            _setter("width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @property
    @pulumi.getter
    def diameter(self) -> Optional[str]:
        return pulumi.get(self, "diameter")

    @property
    @pulumi.getter(name="diameterVar")
    def diameter_var(self) -> Optional[str]:
        return pulumi.get(self, "diameter_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationCompositeImageTextImageResult(dict):
    def __init__(__self__, *,
                 fill: Optional[str] = None,
                 fill_var: Optional[str] = None,
                 size: Optional[str] = None,
                 size_var: Optional[str] = None,
                 stroke: Optional[str] = None,
                 stroke_size: Optional[str] = None,
                 stroke_size_var: Optional[str] = None,
                 stroke_var: Optional[str] = None,
                 text: Optional[str] = None,
                 text_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 typeface: Optional[str] = None,
                 typeface_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationCompositeImageTextImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fill=fill,
            fill_var=fill_var,
            size=size,
            size_var=size_var,
            stroke=stroke,
            stroke_size=stroke_size,
            stroke_size_var=stroke_size_var,
            stroke_var=stroke_var,
            text=text,
            text_var=text_var,
            transformation=transformation,
            typeface=typeface,
            typeface_var=typeface_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fill: Optional[str] = None,
             fill_var: Optional[str] = None,
             size: Optional[str] = None,
             size_var: Optional[str] = None,
             stroke: Optional[str] = None,
             stroke_size: Optional[str] = None,
             stroke_size_var: Optional[str] = None,
             stroke_var: Optional[str] = None,
             text: Optional[str] = None,
             text_var: Optional[str] = None,
             transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
             typeface: Optional[str] = None,
             typeface_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fillVar' in kwargs:
            fill_var = kwargs['fillVar']
        if 'sizeVar' in kwargs:
            size_var = kwargs['sizeVar']
        if 'strokeSize' in kwargs:
            stroke_size = kwargs['strokeSize']
        if 'strokeSizeVar' in kwargs:
            stroke_size_var = kwargs['strokeSizeVar']
        if 'strokeVar' in kwargs:
            stroke_var = kwargs['strokeVar']
        if 'textVar' in kwargs:
            text_var = kwargs['textVar']
        if 'typefaceVar' in kwargs:
            typeface_var = kwargs['typefaceVar']

        if fill is not None:
            _setter("fill", fill)
        if fill_var is not None:
            _setter("fill_var", fill_var)
        if size is not None:
            _setter("size", size)
        if size_var is not None:
            _setter("size_var", size_var)
        if stroke is not None:
            _setter("stroke", stroke)
        if stroke_size is not None:
            _setter("stroke_size", stroke_size)
        if stroke_size_var is not None:
            _setter("stroke_size_var", stroke_size_var)
        if stroke_var is not None:
            _setter("stroke_var", stroke_var)
        if text is not None:
            _setter("text", text)
        if text_var is not None:
            _setter("text_var", text_var)
        if transformation is not None:
            _setter("transformation", transformation)
        if typeface is not None:
            _setter("typeface", typeface)
        if typeface_var is not None:
            _setter("typeface_var", typeface_var)

    @property
    @pulumi.getter
    def fill(self) -> Optional[str]:
        return pulumi.get(self, "fill")

    @property
    @pulumi.getter(name="fillVar")
    def fill_var(self) -> Optional[str]:
        return pulumi.get(self, "fill_var")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeVar")
    def size_var(self) -> Optional[str]:
        return pulumi.get(self, "size_var")

    @property
    @pulumi.getter
    def stroke(self) -> Optional[str]:
        return pulumi.get(self, "stroke")

    @property
    @pulumi.getter(name="strokeSize")
    def stroke_size(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size")

    @property
    @pulumi.getter(name="strokeSizeVar")
    def stroke_size_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size_var")

    @property
    @pulumi.getter(name="strokeVar")
    def stroke_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_var")

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter(name="textVar")
    def text_var(self) -> Optional[str]:
        return pulumi.get(self, "text_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def typeface(self) -> Optional[str]:
        return pulumi.get(self, "typeface")

    @property
    @pulumi.getter(name="typefaceVar")
    def typeface_var(self) -> Optional[str]:
        return pulumi.get(self, "typeface_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageResult(dict):
    def __init__(__self__, *,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 url: Optional[str] = None,
                 url_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            transformation=transformation,
            url=url,
            url_var=url_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
             url: Optional[str] = None,
             url_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'urlVar' in kwargs:
            url_var = kwargs['urlVar']

        if transformation is not None:
            _setter("transformation", transformation)
        if url is not None:
            _setter("url", url)
        if url_var is not None:
            _setter("url_var", url_var)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="urlVar")
    def url_var(self) -> Optional[str]:
        return pulumi.get(self, "url_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationCompoundResult(dict):
    def __init__(__self__, *,
                 transformations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationResult']] = None):
        GetImagingPolicyImagePolicyTransformationCompoundResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            transformations=transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             transformations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if transformations is not None:
            _setter("transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationResult']]:
        return pulumi.get(self, "transformations")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationContrastResult(dict):
    def __init__(__self__, *,
                 brightness: Optional[str] = None,
                 brightness_var: Optional[str] = None,
                 contrast: Optional[str] = None,
                 contrast_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationContrastResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            brightness=brightness,
            brightness_var=brightness_var,
            contrast=contrast,
            contrast_var=contrast_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             brightness: Optional[str] = None,
             brightness_var: Optional[str] = None,
             contrast: Optional[str] = None,
             contrast_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'brightnessVar' in kwargs:
            brightness_var = kwargs['brightnessVar']
        if 'contrastVar' in kwargs:
            contrast_var = kwargs['contrastVar']

        if brightness is not None:
            _setter("brightness", brightness)
        if brightness_var is not None:
            _setter("brightness_var", brightness_var)
        if contrast is not None:
            _setter("contrast", contrast)
        if contrast_var is not None:
            _setter("contrast_var", contrast_var)

    @property
    @pulumi.getter
    def brightness(self) -> Optional[str]:
        return pulumi.get(self, "brightness")

    @property
    @pulumi.getter(name="brightnessVar")
    def brightness_var(self) -> Optional[str]:
        return pulumi.get(self, "brightness_var")

    @property
    @pulumi.getter
    def contrast(self) -> Optional[str]:
        return pulumi.get(self, "contrast")

    @property
    @pulumi.getter(name="contrastVar")
    def contrast_var(self) -> Optional[str]:
        return pulumi.get(self, "contrast_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationCropResult(dict):
    def __init__(__self__, *,
                 allow_expansion: Optional[str] = None,
                 allow_expansion_var: Optional[str] = None,
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None,
                 x_position: Optional[str] = None,
                 x_position_var: Optional[str] = None,
                 y_position: Optional[str] = None,
                 y_position_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationCropResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_expansion=allow_expansion,
            allow_expansion_var=allow_expansion_var,
            gravity=gravity,
            gravity_var=gravity_var,
            height=height,
            height_var=height_var,
            width=width,
            width_var=width_var,
            x_position=x_position,
            x_position_var=x_position_var,
            y_position=y_position,
            y_position_var=y_position_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_expansion: Optional[str] = None,
             allow_expansion_var: Optional[str] = None,
             gravity: Optional[str] = None,
             gravity_var: Optional[str] = None,
             height: Optional[str] = None,
             height_var: Optional[str] = None,
             width: Optional[str] = None,
             width_var: Optional[str] = None,
             x_position: Optional[str] = None,
             x_position_var: Optional[str] = None,
             y_position: Optional[str] = None,
             y_position_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowExpansion' in kwargs:
            allow_expansion = kwargs['allowExpansion']
        if 'allowExpansionVar' in kwargs:
            allow_expansion_var = kwargs['allowExpansionVar']
        if 'gravityVar' in kwargs:
            gravity_var = kwargs['gravityVar']
        if 'heightVar' in kwargs:
            height_var = kwargs['heightVar']
        if 'widthVar' in kwargs:
            width_var = kwargs['widthVar']
        if 'xPosition' in kwargs:
            x_position = kwargs['xPosition']
        if 'xPositionVar' in kwargs:
            x_position_var = kwargs['xPositionVar']
        if 'yPosition' in kwargs:
            y_position = kwargs['yPosition']
        if 'yPositionVar' in kwargs:
            y_position_var = kwargs['yPositionVar']

        if allow_expansion is not None:
            _setter("allow_expansion", allow_expansion)
        if allow_expansion_var is not None:
            _setter("allow_expansion_var", allow_expansion_var)
        if gravity is not None:
            _setter("gravity", gravity)
        if gravity_var is not None:
            _setter("gravity_var", gravity_var)
        if height is not None:
            _setter("height", height)
        if height_var is not None:
            _setter("height_var", height_var)
        if width is not None:
            _setter("width", width)
        if width_var is not None:
            _setter("width_var", width_var)
        if x_position is not None:
            _setter("x_position", x_position)
        if x_position_var is not None:
            _setter("x_position_var", x_position_var)
        if y_position is not None:
            _setter("y_position", y_position)
        if y_position_var is not None:
            _setter("y_position_var", y_position_var)

    @property
    @pulumi.getter(name="allowExpansion")
    def allow_expansion(self) -> Optional[str]:
        return pulumi.get(self, "allow_expansion")

    @property
    @pulumi.getter(name="allowExpansionVar")
    def allow_expansion_var(self) -> Optional[str]:
        return pulumi.get(self, "allow_expansion_var")

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @property
    @pulumi.getter(name="xPosition")
    def x_position(self) -> Optional[str]:
        return pulumi.get(self, "x_position")

    @property
    @pulumi.getter(name="xPositionVar")
    def x_position_var(self) -> Optional[str]:
        return pulumi.get(self, "x_position_var")

    @property
    @pulumi.getter(name="yPosition")
    def y_position(self) -> Optional[str]:
        return pulumi.get(self, "y_position")

    @property
    @pulumi.getter(name="yPositionVar")
    def y_position_var(self) -> Optional[str]:
        return pulumi.get(self, "y_position_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationFaceCropResult(dict):
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 algorithm_var: Optional[str] = None,
                 confidence: Optional[str] = None,
                 confidence_var: Optional[str] = None,
                 fail_gravity: Optional[str] = None,
                 fail_gravity_var: Optional[str] = None,
                 focus: Optional[str] = None,
                 focus_var: Optional[str] = None,
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 padding: Optional[str] = None,
                 padding_var: Optional[str] = None,
                 style: Optional[str] = None,
                 style_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationFaceCropResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            algorithm=algorithm,
            algorithm_var=algorithm_var,
            confidence=confidence,
            confidence_var=confidence_var,
            fail_gravity=fail_gravity,
            fail_gravity_var=fail_gravity_var,
            focus=focus,
            focus_var=focus_var,
            gravity=gravity,
            gravity_var=gravity_var,
            height=height,
            height_var=height_var,
            padding=padding,
            padding_var=padding_var,
            style=style,
            style_var=style_var,
            width=width,
            width_var=width_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             algorithm: Optional[str] = None,
             algorithm_var: Optional[str] = None,
             confidence: Optional[str] = None,
             confidence_var: Optional[str] = None,
             fail_gravity: Optional[str] = None,
             fail_gravity_var: Optional[str] = None,
             focus: Optional[str] = None,
             focus_var: Optional[str] = None,
             gravity: Optional[str] = None,
             gravity_var: Optional[str] = None,
             height: Optional[str] = None,
             height_var: Optional[str] = None,
             padding: Optional[str] = None,
             padding_var: Optional[str] = None,
             style: Optional[str] = None,
             style_var: Optional[str] = None,
             width: Optional[str] = None,
             width_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'algorithmVar' in kwargs:
            algorithm_var = kwargs['algorithmVar']
        if 'confidenceVar' in kwargs:
            confidence_var = kwargs['confidenceVar']
        if 'failGravity' in kwargs:
            fail_gravity = kwargs['failGravity']
        if 'failGravityVar' in kwargs:
            fail_gravity_var = kwargs['failGravityVar']
        if 'focusVar' in kwargs:
            focus_var = kwargs['focusVar']
        if 'gravityVar' in kwargs:
            gravity_var = kwargs['gravityVar']
        if 'heightVar' in kwargs:
            height_var = kwargs['heightVar']
        if 'paddingVar' in kwargs:
            padding_var = kwargs['paddingVar']
        if 'styleVar' in kwargs:
            style_var = kwargs['styleVar']
        if 'widthVar' in kwargs:
            width_var = kwargs['widthVar']

        if algorithm is not None:
            _setter("algorithm", algorithm)
        if algorithm_var is not None:
            _setter("algorithm_var", algorithm_var)
        if confidence is not None:
            _setter("confidence", confidence)
        if confidence_var is not None:
            _setter("confidence_var", confidence_var)
        if fail_gravity is not None:
            _setter("fail_gravity", fail_gravity)
        if fail_gravity_var is not None:
            _setter("fail_gravity_var", fail_gravity_var)
        if focus is not None:
            _setter("focus", focus)
        if focus_var is not None:
            _setter("focus_var", focus_var)
        if gravity is not None:
            _setter("gravity", gravity)
        if gravity_var is not None:
            _setter("gravity_var", gravity_var)
        if height is not None:
            _setter("height", height)
        if height_var is not None:
            _setter("height_var", height_var)
        if padding is not None:
            _setter("padding", padding)
        if padding_var is not None:
            _setter("padding_var", padding_var)
        if style is not None:
            _setter("style", style)
        if style_var is not None:
            _setter("style_var", style_var)
        if width is not None:
            _setter("width", width)
        if width_var is not None:
            _setter("width_var", width_var)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="algorithmVar")
    def algorithm_var(self) -> Optional[str]:
        return pulumi.get(self, "algorithm_var")

    @property
    @pulumi.getter
    def confidence(self) -> Optional[str]:
        return pulumi.get(self, "confidence")

    @property
    @pulumi.getter(name="confidenceVar")
    def confidence_var(self) -> Optional[str]:
        return pulumi.get(self, "confidence_var")

    @property
    @pulumi.getter(name="failGravity")
    def fail_gravity(self) -> Optional[str]:
        return pulumi.get(self, "fail_gravity")

    @property
    @pulumi.getter(name="failGravityVar")
    def fail_gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "fail_gravity_var")

    @property
    @pulumi.getter
    def focus(self) -> Optional[str]:
        return pulumi.get(self, "focus")

    @property
    @pulumi.getter(name="focusVar")
    def focus_var(self) -> Optional[str]:
        return pulumi.get(self, "focus_var")

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def padding(self) -> Optional[str]:
        return pulumi.get(self, "padding")

    @property
    @pulumi.getter(name="paddingVar")
    def padding_var(self) -> Optional[str]:
        return pulumi.get(self, "padding_var")

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        return pulumi.get(self, "style")

    @property
    @pulumi.getter(name="styleVar")
    def style_var(self) -> Optional[str]:
        return pulumi.get(self, "style_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationFeatureCropResult(dict):
    def __init__(__self__, *,
                 fail_gravity: Optional[str] = None,
                 fail_gravity_var: Optional[str] = None,
                 feature_radius: Optional[str] = None,
                 feature_radius_var: Optional[str] = None,
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 max_features: Optional[str] = None,
                 max_features_var: Optional[str] = None,
                 min_feature_quality: Optional[str] = None,
                 min_feature_quality_var: Optional[str] = None,
                 padding: Optional[str] = None,
                 padding_var: Optional[str] = None,
                 style: Optional[str] = None,
                 style_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationFeatureCropResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fail_gravity=fail_gravity,
            fail_gravity_var=fail_gravity_var,
            feature_radius=feature_radius,
            feature_radius_var=feature_radius_var,
            gravity=gravity,
            gravity_var=gravity_var,
            height=height,
            height_var=height_var,
            max_features=max_features,
            max_features_var=max_features_var,
            min_feature_quality=min_feature_quality,
            min_feature_quality_var=min_feature_quality_var,
            padding=padding,
            padding_var=padding_var,
            style=style,
            style_var=style_var,
            width=width,
            width_var=width_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fail_gravity: Optional[str] = None,
             fail_gravity_var: Optional[str] = None,
             feature_radius: Optional[str] = None,
             feature_radius_var: Optional[str] = None,
             gravity: Optional[str] = None,
             gravity_var: Optional[str] = None,
             height: Optional[str] = None,
             height_var: Optional[str] = None,
             max_features: Optional[str] = None,
             max_features_var: Optional[str] = None,
             min_feature_quality: Optional[str] = None,
             min_feature_quality_var: Optional[str] = None,
             padding: Optional[str] = None,
             padding_var: Optional[str] = None,
             style: Optional[str] = None,
             style_var: Optional[str] = None,
             width: Optional[str] = None,
             width_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'failGravity' in kwargs:
            fail_gravity = kwargs['failGravity']
        if 'failGravityVar' in kwargs:
            fail_gravity_var = kwargs['failGravityVar']
        if 'featureRadius' in kwargs:
            feature_radius = kwargs['featureRadius']
        if 'featureRadiusVar' in kwargs:
            feature_radius_var = kwargs['featureRadiusVar']
        if 'gravityVar' in kwargs:
            gravity_var = kwargs['gravityVar']
        if 'heightVar' in kwargs:
            height_var = kwargs['heightVar']
        if 'maxFeatures' in kwargs:
            max_features = kwargs['maxFeatures']
        if 'maxFeaturesVar' in kwargs:
            max_features_var = kwargs['maxFeaturesVar']
        if 'minFeatureQuality' in kwargs:
            min_feature_quality = kwargs['minFeatureQuality']
        if 'minFeatureQualityVar' in kwargs:
            min_feature_quality_var = kwargs['minFeatureQualityVar']
        if 'paddingVar' in kwargs:
            padding_var = kwargs['paddingVar']
        if 'styleVar' in kwargs:
            style_var = kwargs['styleVar']
        if 'widthVar' in kwargs:
            width_var = kwargs['widthVar']

        if fail_gravity is not None:
            _setter("fail_gravity", fail_gravity)
        if fail_gravity_var is not None:
            _setter("fail_gravity_var", fail_gravity_var)
        if feature_radius is not None:
            _setter("feature_radius", feature_radius)
        if feature_radius_var is not None:
            _setter("feature_radius_var", feature_radius_var)
        if gravity is not None:
            _setter("gravity", gravity)
        if gravity_var is not None:
            _setter("gravity_var", gravity_var)
        if height is not None:
            _setter("height", height)
        if height_var is not None:
            _setter("height_var", height_var)
        if max_features is not None:
            _setter("max_features", max_features)
        if max_features_var is not None:
            _setter("max_features_var", max_features_var)
        if min_feature_quality is not None:
            _setter("min_feature_quality", min_feature_quality)
        if min_feature_quality_var is not None:
            _setter("min_feature_quality_var", min_feature_quality_var)
        if padding is not None:
            _setter("padding", padding)
        if padding_var is not None:
            _setter("padding_var", padding_var)
        if style is not None:
            _setter("style", style)
        if style_var is not None:
            _setter("style_var", style_var)
        if width is not None:
            _setter("width", width)
        if width_var is not None:
            _setter("width_var", width_var)

    @property
    @pulumi.getter(name="failGravity")
    def fail_gravity(self) -> Optional[str]:
        return pulumi.get(self, "fail_gravity")

    @property
    @pulumi.getter(name="failGravityVar")
    def fail_gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "fail_gravity_var")

    @property
    @pulumi.getter(name="featureRadius")
    def feature_radius(self) -> Optional[str]:
        return pulumi.get(self, "feature_radius")

    @property
    @pulumi.getter(name="featureRadiusVar")
    def feature_radius_var(self) -> Optional[str]:
        return pulumi.get(self, "feature_radius_var")

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter(name="maxFeatures")
    def max_features(self) -> Optional[str]:
        return pulumi.get(self, "max_features")

    @property
    @pulumi.getter(name="maxFeaturesVar")
    def max_features_var(self) -> Optional[str]:
        return pulumi.get(self, "max_features_var")

    @property
    @pulumi.getter(name="minFeatureQuality")
    def min_feature_quality(self) -> Optional[str]:
        return pulumi.get(self, "min_feature_quality")

    @property
    @pulumi.getter(name="minFeatureQualityVar")
    def min_feature_quality_var(self) -> Optional[str]:
        return pulumi.get(self, "min_feature_quality_var")

    @property
    @pulumi.getter
    def padding(self) -> Optional[str]:
        return pulumi.get(self, "padding")

    @property
    @pulumi.getter(name="paddingVar")
    def padding_var(self) -> Optional[str]:
        return pulumi.get(self, "padding_var")

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        return pulumi.get(self, "style")

    @property
    @pulumi.getter(name="styleVar")
    def style_var(self) -> Optional[str]:
        return pulumi.get(self, "style_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationFitAndFillResult(dict):
    def __init__(__self__, *,
                 fill_transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationFitAndFillResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fill_transformation=fill_transformation,
            height=height,
            height_var=height_var,
            width=width,
            width_var=width_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fill_transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
             height: Optional[str] = None,
             height_var: Optional[str] = None,
             width: Optional[str] = None,
             width_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fillTransformation' in kwargs:
            fill_transformation = kwargs['fillTransformation']
        if 'heightVar' in kwargs:
            height_var = kwargs['heightVar']
        if 'widthVar' in kwargs:
            width_var = kwargs['widthVar']

        if fill_transformation is not None:
            _setter("fill_transformation", fill_transformation)
        if height is not None:
            _setter("height", height)
        if height_var is not None:
            _setter("height_var", height_var)
        if width is not None:
            _setter("width", width)
        if width_var is not None:
            _setter("width_var", width_var)

    @property
    @pulumi.getter(name="fillTransformation")
    def fill_transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "fill_transformation")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationGoopResult(dict):
    def __init__(__self__, *,
                 chaos: Optional[str] = None,
                 chaos_var: Optional[str] = None,
                 density: Optional[str] = None,
                 density_var: Optional[str] = None,
                 power: Optional[str] = None,
                 power_var: Optional[str] = None,
                 seed: Optional[str] = None,
                 seed_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationGoopResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            chaos=chaos,
            chaos_var=chaos_var,
            density=density,
            density_var=density_var,
            power=power,
            power_var=power_var,
            seed=seed,
            seed_var=seed_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             chaos: Optional[str] = None,
             chaos_var: Optional[str] = None,
             density: Optional[str] = None,
             density_var: Optional[str] = None,
             power: Optional[str] = None,
             power_var: Optional[str] = None,
             seed: Optional[str] = None,
             seed_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'chaosVar' in kwargs:
            chaos_var = kwargs['chaosVar']
        if 'densityVar' in kwargs:
            density_var = kwargs['densityVar']
        if 'powerVar' in kwargs:
            power_var = kwargs['powerVar']
        if 'seedVar' in kwargs:
            seed_var = kwargs['seedVar']

        if chaos is not None:
            _setter("chaos", chaos)
        if chaos_var is not None:
            _setter("chaos_var", chaos_var)
        if density is not None:
            _setter("density", density)
        if density_var is not None:
            _setter("density_var", density_var)
        if power is not None:
            _setter("power", power)
        if power_var is not None:
            _setter("power_var", power_var)
        if seed is not None:
            _setter("seed", seed)
        if seed_var is not None:
            _setter("seed_var", seed_var)

    @property
    @pulumi.getter
    def chaos(self) -> Optional[str]:
        return pulumi.get(self, "chaos")

    @property
    @pulumi.getter(name="chaosVar")
    def chaos_var(self) -> Optional[str]:
        return pulumi.get(self, "chaos_var")

    @property
    @pulumi.getter
    def density(self) -> Optional[str]:
        return pulumi.get(self, "density")

    @property
    @pulumi.getter(name="densityVar")
    def density_var(self) -> Optional[str]:
        return pulumi.get(self, "density_var")

    @property
    @pulumi.getter
    def power(self) -> Optional[str]:
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerVar")
    def power_var(self) -> Optional[str]:
        return pulumi.get(self, "power_var")

    @property
    @pulumi.getter
    def seed(self) -> Optional[str]:
        return pulumi.get(self, "seed")

    @property
    @pulumi.getter(name="seedVar")
    def seed_var(self) -> Optional[str]:
        return pulumi.get(self, "seed_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationGrayscaleResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 type_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationGrayscaleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            type_var=type_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             type_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'typeVar' in kwargs:
            type_var = kwargs['typeVar']

        if type is not None:
            _setter("type", type)
        if type_var is not None:
            _setter("type_var", type_var)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="typeVar")
    def type_var(self) -> Optional[str]:
        return pulumi.get(self, "type_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationHslResult(dict):
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 lightness: Optional[str] = None,
                 lightness_var: Optional[str] = None,
                 saturation: Optional[str] = None,
                 saturation_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationHslResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hue=hue,
            hue_var=hue_var,
            lightness=lightness,
            lightness_var=lightness_var,
            saturation=saturation,
            saturation_var=saturation_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hue: Optional[str] = None,
             hue_var: Optional[str] = None,
             lightness: Optional[str] = None,
             lightness_var: Optional[str] = None,
             saturation: Optional[str] = None,
             saturation_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hueVar' in kwargs:
            hue_var = kwargs['hueVar']
        if 'lightnessVar' in kwargs:
            lightness_var = kwargs['lightnessVar']
        if 'saturationVar' in kwargs:
            saturation_var = kwargs['saturationVar']

        if hue is not None:
            _setter("hue", hue)
        if hue_var is not None:
            _setter("hue_var", hue_var)
        if lightness is not None:
            _setter("lightness", lightness)
        if lightness_var is not None:
            _setter("lightness_var", lightness_var)
        if saturation is not None:
            _setter("saturation", saturation)
        if saturation_var is not None:
            _setter("saturation_var", saturation_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @property
    @pulumi.getter
    def lightness(self) -> Optional[str]:
        return pulumi.get(self, "lightness")

    @property
    @pulumi.getter(name="lightnessVar")
    def lightness_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_var")

    @property
    @pulumi.getter
    def saturation(self) -> Optional[str]:
        return pulumi.get(self, "saturation")

    @property
    @pulumi.getter(name="saturationVar")
    def saturation_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationHsvResult(dict):
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 saturation: Optional[str] = None,
                 saturation_var: Optional[str] = None,
                 value: Optional[str] = None,
                 value_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationHsvResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hue=hue,
            hue_var=hue_var,
            saturation=saturation,
            saturation_var=saturation_var,
            value=value,
            value_var=value_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hue: Optional[str] = None,
             hue_var: Optional[str] = None,
             saturation: Optional[str] = None,
             saturation_var: Optional[str] = None,
             value: Optional[str] = None,
             value_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hueVar' in kwargs:
            hue_var = kwargs['hueVar']
        if 'saturationVar' in kwargs:
            saturation_var = kwargs['saturationVar']
        if 'valueVar' in kwargs:
            value_var = kwargs['valueVar']

        if hue is not None:
            _setter("hue", hue)
        if hue_var is not None:
            _setter("hue_var", hue_var)
        if saturation is not None:
            _setter("saturation", saturation)
        if saturation_var is not None:
            _setter("saturation_var", saturation_var)
        if value is not None:
            _setter("value", value)
        if value_var is not None:
            _setter("value_var", value_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @property
    @pulumi.getter
    def saturation(self) -> Optional[str]:
        return pulumi.get(self, "saturation")

    @property
    @pulumi.getter(name="saturationVar")
    def saturation_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_var")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueVar")
    def value_var(self) -> Optional[str]:
        return pulumi.get(self, "value_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationIfDimensionResult(dict):
    def __init__(__self__, *,
                 default: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 dimension: Optional[str] = None,
                 dimension_var: Optional[str] = None,
                 equal: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 greater_than: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 less_than: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 value: Optional[str] = None,
                 value_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationIfDimensionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            dimension=dimension,
            dimension_var=dimension_var,
            equal=equal,
            greater_than=greater_than,
            less_than=less_than,
            value=value,
            value_var=value_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
             dimension: Optional[str] = None,
             dimension_var: Optional[str] = None,
             equal: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
             greater_than: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
             less_than: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
             value: Optional[str] = None,
             value_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dimensionVar' in kwargs:
            dimension_var = kwargs['dimensionVar']
        if 'greaterThan' in kwargs:
            greater_than = kwargs['greaterThan']
        if 'lessThan' in kwargs:
            less_than = kwargs['lessThan']
        if 'valueVar' in kwargs:
            value_var = kwargs['valueVar']

        if default is not None:
            _setter("default", default)
        if dimension is not None:
            _setter("dimension", dimension)
        if dimension_var is not None:
            _setter("dimension_var", dimension_var)
        if equal is not None:
            _setter("equal", equal)
        if greater_than is not None:
            _setter("greater_than", greater_than)
        if less_than is not None:
            _setter("less_than", less_than)
        if value is not None:
            _setter("value", value)
        if value_var is not None:
            _setter("value_var", value_var)

    @property
    @pulumi.getter
    def default(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def dimension(self) -> Optional[str]:
        return pulumi.get(self, "dimension")

    @property
    @pulumi.getter(name="dimensionVar")
    def dimension_var(self) -> Optional[str]:
        return pulumi.get(self, "dimension_var")

    @property
    @pulumi.getter
    def equal(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "equal")

    @property
    @pulumi.getter(name="greaterThan")
    def greater_than(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "greater_than")

    @property
    @pulumi.getter(name="lessThan")
    def less_than(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "less_than")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueVar")
    def value_var(self) -> Optional[str]:
        return pulumi.get(self, "value_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationIfOrientationResult(dict):
    def __init__(__self__, *,
                 default: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 landscape: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 portrait: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 square: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None):
        GetImagingPolicyImagePolicyTransformationIfOrientationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            landscape=landscape,
            portrait=portrait,
            square=square,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
             landscape: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
             portrait: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
             square: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if default is not None:
            _setter("default", default)
        if landscape is not None:
            _setter("landscape", landscape)
        if portrait is not None:
            _setter("portrait", portrait)
        if square is not None:
            _setter("square", square)

    @property
    @pulumi.getter
    def default(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def landscape(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "landscape")

    @property
    @pulumi.getter
    def portrait(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "portrait")

    @property
    @pulumi.getter
    def square(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "square")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationImQueryResult(dict):
    def __init__(__self__, *,
                 allowed_transformations: Sequence[str],
                 query_var: str):
        GetImagingPolicyImagePolicyTransformationImQueryResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_transformations=allowed_transformations,
            query_var=query_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_transformations: Sequence[str],
             query_var: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowedTransformations' in kwargs:
            allowed_transformations = kwargs['allowedTransformations']
        if 'queryVar' in kwargs:
            query_var = kwargs['queryVar']

        _setter("allowed_transformations", allowed_transformations)
        _setter("query_var", query_var)

    @property
    @pulumi.getter(name="allowedTransformations")
    def allowed_transformations(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_transformations")

    @property
    @pulumi.getter(name="queryVar")
    def query_var(self) -> str:
        return pulumi.get(self, "query_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationMaxColorResult(dict):
    def __init__(__self__, *,
                 colors: Optional[str] = None,
                 colors_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationMaxColorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            colors=colors,
            colors_var=colors_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             colors: Optional[str] = None,
             colors_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'colorsVar' in kwargs:
            colors_var = kwargs['colorsVar']

        if colors is not None:
            _setter("colors", colors)
        if colors_var is not None:
            _setter("colors_var", colors_var)

    @property
    @pulumi.getter
    def colors(self) -> Optional[str]:
        return pulumi.get(self, "colors")

    @property
    @pulumi.getter(name="colorsVar")
    def colors_var(self) -> Optional[str]:
        return pulumi.get(self, "colors_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationMirrorResult(dict):
    def __init__(__self__, *,
                 horizontal: Optional[str] = None,
                 horizontal_var: Optional[str] = None,
                 vertical: Optional[str] = None,
                 vertical_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationMirrorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            horizontal=horizontal,
            horizontal_var=horizontal_var,
            vertical=vertical,
            vertical_var=vertical_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             horizontal: Optional[str] = None,
             horizontal_var: Optional[str] = None,
             vertical: Optional[str] = None,
             vertical_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'horizontalVar' in kwargs:
            horizontal_var = kwargs['horizontalVar']
        if 'verticalVar' in kwargs:
            vertical_var = kwargs['verticalVar']

        if horizontal is not None:
            _setter("horizontal", horizontal)
        if horizontal_var is not None:
            _setter("horizontal_var", horizontal_var)
        if vertical is not None:
            _setter("vertical", vertical)
        if vertical_var is not None:
            _setter("vertical_var", vertical_var)

    @property
    @pulumi.getter
    def horizontal(self) -> Optional[str]:
        return pulumi.get(self, "horizontal")

    @property
    @pulumi.getter(name="horizontalVar")
    def horizontal_var(self) -> Optional[str]:
        return pulumi.get(self, "horizontal_var")

    @property
    @pulumi.getter
    def vertical(self) -> Optional[str]:
        return pulumi.get(self, "vertical")

    @property
    @pulumi.getter(name="verticalVar")
    def vertical_var(self) -> Optional[str]:
        return pulumi.get(self, "vertical_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationMonoHueResult(dict):
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationMonoHueResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hue=hue,
            hue_var=hue_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hue: Optional[str] = None,
             hue_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hueVar' in kwargs:
            hue_var = kwargs['hueVar']

        if hue is not None:
            _setter("hue", hue)
        if hue_var is not None:
            _setter("hue_var", hue_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationOpacityResult(dict):
    def __init__(__self__, *,
                 opacity: Optional[str] = None,
                 opacity_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationOpacityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            opacity=opacity,
            opacity_var=opacity_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opacity: Optional[str] = None,
             opacity_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'opacityVar' in kwargs:
            opacity_var = kwargs['opacityVar']

        if opacity is not None:
            _setter("opacity", opacity)
        if opacity_var is not None:
            _setter("opacity_var", opacity_var)

    @property
    @pulumi.getter
    def opacity(self) -> Optional[str]:
        return pulumi.get(self, "opacity")

    @property
    @pulumi.getter(name="opacityVar")
    def opacity_var(self) -> Optional[str]:
        return pulumi.get(self, "opacity_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropResult(dict):
    def __init__(__self__, *,
                 region_of_interest: 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestResult',
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 style: Optional[str] = None,
                 style_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            region_of_interest=region_of_interest,
            gravity=gravity,
            gravity_var=gravity_var,
            height=height,
            height_var=height_var,
            style=style,
            style_var=style_var,
            width=width,
            width_var=width_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             region_of_interest: 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestResult',
             gravity: Optional[str] = None,
             gravity_var: Optional[str] = None,
             height: Optional[str] = None,
             height_var: Optional[str] = None,
             style: Optional[str] = None,
             style_var: Optional[str] = None,
             width: Optional[str] = None,
             width_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'regionOfInterest' in kwargs:
            region_of_interest = kwargs['regionOfInterest']
        if 'gravityVar' in kwargs:
            gravity_var = kwargs['gravityVar']
        if 'heightVar' in kwargs:
            height_var = kwargs['heightVar']
        if 'styleVar' in kwargs:
            style_var = kwargs['styleVar']
        if 'widthVar' in kwargs:
            width_var = kwargs['widthVar']

        _setter("region_of_interest", region_of_interest)
        if gravity is not None:
            _setter("gravity", gravity)
        if gravity_var is not None:
            _setter("gravity_var", gravity_var)
        if height is not None:
            _setter("height", height)
        if height_var is not None:
            _setter("height_var", height_var)
        if style is not None:
            _setter("style", style)
        if style_var is not None:
            _setter("style_var", style_var)
        if width is not None:
            _setter("width", width)
        if width_var is not None:
            _setter("width_var", width_var)

    @property
    @pulumi.getter(name="regionOfInterest")
    def region_of_interest(self) -> 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestResult':
        return pulumi.get(self, "region_of_interest")

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        return pulumi.get(self, "style")

    @property
    @pulumi.getter(name="styleVar")
    def style_var(self) -> Optional[str]:
        return pulumi.get(self, "style_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestResult(dict):
    def __init__(__self__, *,
                 circle_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeResult']] = None,
                 point_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeResult']] = None,
                 polygon_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeResult']] = None,
                 rectangle_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeResult']] = None,
                 union_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeResult']] = None):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            circle_shapes=circle_shapes,
            point_shapes=point_shapes,
            polygon_shapes=polygon_shapes,
            rectangle_shapes=rectangle_shapes,
            union_shapes=union_shapes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             circle_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeResult']] = None,
             point_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeResult']] = None,
             polygon_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeResult']] = None,
             rectangle_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeResult']] = None,
             union_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'circleShapes' in kwargs:
            circle_shapes = kwargs['circleShapes']
        if 'pointShapes' in kwargs:
            point_shapes = kwargs['pointShapes']
        if 'polygonShapes' in kwargs:
            polygon_shapes = kwargs['polygonShapes']
        if 'rectangleShapes' in kwargs:
            rectangle_shapes = kwargs['rectangleShapes']
        if 'unionShapes' in kwargs:
            union_shapes = kwargs['unionShapes']

        if circle_shapes is not None:
            _setter("circle_shapes", circle_shapes)
        if point_shapes is not None:
            _setter("point_shapes", point_shapes)
        if polygon_shapes is not None:
            _setter("polygon_shapes", polygon_shapes)
        if rectangle_shapes is not None:
            _setter("rectangle_shapes", rectangle_shapes)
        if union_shapes is not None:
            _setter("union_shapes", union_shapes)

    @property
    @pulumi.getter(name="circleShapes")
    def circle_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeResult']]:
        return pulumi.get(self, "circle_shapes")

    @property
    @pulumi.getter(name="pointShapes")
    def point_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeResult']]:
        return pulumi.get(self, "point_shapes")

    @property
    @pulumi.getter(name="polygonShapes")
    def polygon_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeResult']]:
        return pulumi.get(self, "polygon_shapes")

    @property
    @pulumi.getter(name="rectangleShapes")
    def rectangle_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeResult']]:
        return pulumi.get(self, "rectangle_shapes")

    @property
    @pulumi.getter(name="unionShapes")
    def union_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeResult']]:
        return pulumi.get(self, "union_shapes")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeResult(dict):
    def __init__(__self__, *,
                 center: 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterResult',
                 radius: Optional[str] = None,
                 radius_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            center=center,
            radius=radius,
            radius_var=radius_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             center: 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterResult',
             radius: Optional[str] = None,
             radius_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'radiusVar' in kwargs:
            radius_var = kwargs['radiusVar']

        _setter("center", center)
        if radius is not None:
            _setter("radius", radius)
        if radius_var is not None:
            _setter("radius_var", radius_var)

    @property
    @pulumi.getter
    def center(self) -> 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterResult':
        return pulumi.get(self, "center")

    @property
    @pulumi.getter
    def radius(self) -> Optional[str]:
        return pulumi.get(self, "radius")

    @property
    @pulumi.getter(name="radiusVar")
    def radius_var(self) -> Optional[str]:
        return pulumi.get(self, "radius_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterResult(dict):
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            x=x,
            x_var=x_var,
            y=y,
            y_var=y_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             x: Optional[str] = None,
             x_var: Optional[str] = None,
             y: Optional[str] = None,
             y_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'xVar' in kwargs:
            x_var = kwargs['xVar']
        if 'yVar' in kwargs:
            y_var = kwargs['yVar']

        if x is not None:
            _setter("x", x)
        if x_var is not None:
            _setter("x_var", x_var)
        if y is not None:
            _setter("y", y)
        if y_var is not None:
            _setter("y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeResult(dict):
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            x=x,
            x_var=x_var,
            y=y,
            y_var=y_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             x: Optional[str] = None,
             x_var: Optional[str] = None,
             y: Optional[str] = None,
             y_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'xVar' in kwargs:
            x_var = kwargs['xVar']
        if 'yVar' in kwargs:
            y_var = kwargs['yVar']

        if x is not None:
            _setter("x", x)
        if x_var is not None:
            _setter("x_var", x_var)
        if y is not None:
            _setter("y", y)
        if y_var is not None:
            _setter("y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeResult(dict):
    def __init__(__self__, *,
                 points: Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointResult']):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            points=points,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             points: Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("points", points)

    @property
    @pulumi.getter
    def points(self) -> Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointResult']:
        return pulumi.get(self, "points")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointResult(dict):
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            x=x,
            x_var=x_var,
            y=y,
            y_var=y_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             x: Optional[str] = None,
             x_var: Optional[str] = None,
             y: Optional[str] = None,
             y_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'xVar' in kwargs:
            x_var = kwargs['xVar']
        if 'yVar' in kwargs:
            y_var = kwargs['yVar']

        if x is not None:
            _setter("x", x)
        if x_var is not None:
            _setter("x_var", x_var)
        if y is not None:
            _setter("y", y)
        if y_var is not None:
            _setter("y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeResult(dict):
    def __init__(__self__, *,
                 anchor: 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorResult',
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            anchor=anchor,
            height=height,
            height_var=height_var,
            width=width,
            width_var=width_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             anchor: 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorResult',
             height: Optional[str] = None,
             height_var: Optional[str] = None,
             width: Optional[str] = None,
             width_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'heightVar' in kwargs:
            height_var = kwargs['heightVar']
        if 'widthVar' in kwargs:
            width_var = kwargs['widthVar']

        _setter("anchor", anchor)
        if height is not None:
            _setter("height", height)
        if height_var is not None:
            _setter("height_var", height_var)
        if width is not None:
            _setter("width", width)
        if width_var is not None:
            _setter("width_var", width_var)

    @property
    @pulumi.getter
    def anchor(self) -> 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorResult':
        return pulumi.get(self, "anchor")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorResult(dict):
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            x=x,
            x_var=x_var,
            y=y,
            y_var=y_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             x: Optional[str] = None,
             x_var: Optional[str] = None,
             y: Optional[str] = None,
             y_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'xVar' in kwargs:
            x_var = kwargs['xVar']
        if 'yVar' in kwargs:
            y_var = kwargs['yVar']

        if x is not None:
            _setter("x", x)
        if x_var is not None:
            _setter("x_var", x_var)
        if y is not None:
            _setter("y", y)
        if y_var is not None:
            _setter("y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeResult(dict):
    def __init__(__self__, *,
                 shapes: Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeResult']):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            shapes=shapes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             shapes: Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("shapes", shapes)

    @property
    @pulumi.getter
    def shapes(self) -> Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeResult']:
        return pulumi.get(self, "shapes")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeResult(dict):
    def __init__(__self__, *,
                 circle_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeResult']] = None,
                 point_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeResult']] = None,
                 polygon_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeResult']] = None,
                 rectangle_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeResult']] = None,
                 union_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeResult']] = None):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            circle_shapes=circle_shapes,
            point_shapes=point_shapes,
            polygon_shapes=polygon_shapes,
            rectangle_shapes=rectangle_shapes,
            union_shapes=union_shapes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             circle_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeResult']] = None,
             point_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeResult']] = None,
             polygon_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeResult']] = None,
             rectangle_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeResult']] = None,
             union_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'circleShapes' in kwargs:
            circle_shapes = kwargs['circleShapes']
        if 'pointShapes' in kwargs:
            point_shapes = kwargs['pointShapes']
        if 'polygonShapes' in kwargs:
            polygon_shapes = kwargs['polygonShapes']
        if 'rectangleShapes' in kwargs:
            rectangle_shapes = kwargs['rectangleShapes']
        if 'unionShapes' in kwargs:
            union_shapes = kwargs['unionShapes']

        if circle_shapes is not None:
            _setter("circle_shapes", circle_shapes)
        if point_shapes is not None:
            _setter("point_shapes", point_shapes)
        if polygon_shapes is not None:
            _setter("polygon_shapes", polygon_shapes)
        if rectangle_shapes is not None:
            _setter("rectangle_shapes", rectangle_shapes)
        if union_shapes is not None:
            _setter("union_shapes", union_shapes)

    @property
    @pulumi.getter(name="circleShapes")
    def circle_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeResult']]:
        return pulumi.get(self, "circle_shapes")

    @property
    @pulumi.getter(name="pointShapes")
    def point_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeResult']]:
        return pulumi.get(self, "point_shapes")

    @property
    @pulumi.getter(name="polygonShapes")
    def polygon_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeResult']]:
        return pulumi.get(self, "polygon_shapes")

    @property
    @pulumi.getter(name="rectangleShapes")
    def rectangle_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeResult']]:
        return pulumi.get(self, "rectangle_shapes")

    @property
    @pulumi.getter(name="unionShapes")
    def union_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeResult']]:
        return pulumi.get(self, "union_shapes")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeResult(dict):
    def __init__(__self__, *,
                 center: 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterResult',
                 radius: Optional[str] = None,
                 radius_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            center=center,
            radius=radius,
            radius_var=radius_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             center: 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterResult',
             radius: Optional[str] = None,
             radius_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'radiusVar' in kwargs:
            radius_var = kwargs['radiusVar']

        _setter("center", center)
        if radius is not None:
            _setter("radius", radius)
        if radius_var is not None:
            _setter("radius_var", radius_var)

    @property
    @pulumi.getter
    def center(self) -> 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterResult':
        return pulumi.get(self, "center")

    @property
    @pulumi.getter
    def radius(self) -> Optional[str]:
        return pulumi.get(self, "radius")

    @property
    @pulumi.getter(name="radiusVar")
    def radius_var(self) -> Optional[str]:
        return pulumi.get(self, "radius_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterResult(dict):
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            x=x,
            x_var=x_var,
            y=y,
            y_var=y_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             x: Optional[str] = None,
             x_var: Optional[str] = None,
             y: Optional[str] = None,
             y_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'xVar' in kwargs:
            x_var = kwargs['xVar']
        if 'yVar' in kwargs:
            y_var = kwargs['yVar']

        if x is not None:
            _setter("x", x)
        if x_var is not None:
            _setter("x_var", x_var)
        if y is not None:
            _setter("y", y)
        if y_var is not None:
            _setter("y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeResult(dict):
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            x=x,
            x_var=x_var,
            y=y,
            y_var=y_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             x: Optional[str] = None,
             x_var: Optional[str] = None,
             y: Optional[str] = None,
             y_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'xVar' in kwargs:
            x_var = kwargs['xVar']
        if 'yVar' in kwargs:
            y_var = kwargs['yVar']

        if x is not None:
            _setter("x", x)
        if x_var is not None:
            _setter("x_var", x_var)
        if y is not None:
            _setter("y", y)
        if y_var is not None:
            _setter("y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeResult(dict):
    def __init__(__self__, *,
                 points: Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointResult']):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            points=points,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             points: Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("points", points)

    @property
    @pulumi.getter
    def points(self) -> Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointResult']:
        return pulumi.get(self, "points")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointResult(dict):
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            x=x,
            x_var=x_var,
            y=y,
            y_var=y_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             x: Optional[str] = None,
             x_var: Optional[str] = None,
             y: Optional[str] = None,
             y_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'xVar' in kwargs:
            x_var = kwargs['xVar']
        if 'yVar' in kwargs:
            y_var = kwargs['yVar']

        if x is not None:
            _setter("x", x)
        if x_var is not None:
            _setter("x_var", x_var)
        if y is not None:
            _setter("y", y)
        if y_var is not None:
            _setter("y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeResult(dict):
    def __init__(__self__, *,
                 anchor: 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorResult',
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            anchor=anchor,
            height=height,
            height_var=height_var,
            width=width,
            width_var=width_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             anchor: 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorResult',
             height: Optional[str] = None,
             height_var: Optional[str] = None,
             width: Optional[str] = None,
             width_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'heightVar' in kwargs:
            height_var = kwargs['heightVar']
        if 'widthVar' in kwargs:
            width_var = kwargs['widthVar']

        _setter("anchor", anchor)
        if height is not None:
            _setter("height", height)
        if height_var is not None:
            _setter("height_var", height_var)
        if width is not None:
            _setter("width", width)
        if width_var is not None:
            _setter("width_var", width_var)

    @property
    @pulumi.getter
    def anchor(self) -> 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorResult':
        return pulumi.get(self, "anchor")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorResult(dict):
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            x=x,
            x_var=x_var,
            y=y,
            y_var=y_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             x: Optional[str] = None,
             x_var: Optional[str] = None,
             y: Optional[str] = None,
             y_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'xVar' in kwargs:
            x_var = kwargs['xVar']
        if 'yVar' in kwargs:
            y_var = kwargs['yVar']

        if x is not None:
            _setter("x", x)
        if x_var is not None:
            _setter("x_var", x_var)
        if y is not None:
            _setter("y", y)
        if y_var is not None:
            _setter("y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeResult(dict):
    def __init__(__self__, *,
                 shapes: Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeResult']):
        GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            shapes=shapes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             shapes: Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("shapes", shapes)

    @property
    @pulumi.getter
    def shapes(self) -> Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeResult']:
        return pulumi.get(self, "shapes")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeResult(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        pass



@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRelativeCropResult(dict):
    def __init__(__self__, *,
                 east: Optional[str] = None,
                 east_var: Optional[str] = None,
                 north: Optional[str] = None,
                 north_var: Optional[str] = None,
                 south: Optional[str] = None,
                 south_var: Optional[str] = None,
                 west: Optional[str] = None,
                 west_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationRelativeCropResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            east=east,
            east_var=east_var,
            north=north,
            north_var=north_var,
            south=south,
            south_var=south_var,
            west=west,
            west_var=west_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             east: Optional[str] = None,
             east_var: Optional[str] = None,
             north: Optional[str] = None,
             north_var: Optional[str] = None,
             south: Optional[str] = None,
             south_var: Optional[str] = None,
             west: Optional[str] = None,
             west_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'eastVar' in kwargs:
            east_var = kwargs['eastVar']
        if 'northVar' in kwargs:
            north_var = kwargs['northVar']
        if 'southVar' in kwargs:
            south_var = kwargs['southVar']
        if 'westVar' in kwargs:
            west_var = kwargs['westVar']

        if east is not None:
            _setter("east", east)
        if east_var is not None:
            _setter("east_var", east_var)
        if north is not None:
            _setter("north", north)
        if north_var is not None:
            _setter("north_var", north_var)
        if south is not None:
            _setter("south", south)
        if south_var is not None:
            _setter("south_var", south_var)
        if west is not None:
            _setter("west", west)
        if west_var is not None:
            _setter("west_var", west_var)

    @property
    @pulumi.getter
    def east(self) -> Optional[str]:
        return pulumi.get(self, "east")

    @property
    @pulumi.getter(name="eastVar")
    def east_var(self) -> Optional[str]:
        return pulumi.get(self, "east_var")

    @property
    @pulumi.getter
    def north(self) -> Optional[str]:
        return pulumi.get(self, "north")

    @property
    @pulumi.getter(name="northVar")
    def north_var(self) -> Optional[str]:
        return pulumi.get(self, "north_var")

    @property
    @pulumi.getter
    def south(self) -> Optional[str]:
        return pulumi.get(self, "south")

    @property
    @pulumi.getter(name="southVar")
    def south_var(self) -> Optional[str]:
        return pulumi.get(self, "south_var")

    @property
    @pulumi.getter
    def west(self) -> Optional[str]:
        return pulumi.get(self, "west")

    @property
    @pulumi.getter(name="westVar")
    def west_var(self) -> Optional[str]:
        return pulumi.get(self, "west_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRemoveColorResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 feather: Optional[str] = None,
                 feather_var: Optional[str] = None,
                 tolerance: Optional[str] = None,
                 tolerance_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationRemoveColorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            color_var=color_var,
            feather=feather,
            feather_var=feather_var,
            tolerance=tolerance,
            tolerance_var=tolerance_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[str] = None,
             color_var: Optional[str] = None,
             feather: Optional[str] = None,
             feather_var: Optional[str] = None,
             tolerance: Optional[str] = None,
             tolerance_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'colorVar' in kwargs:
            color_var = kwargs['colorVar']
        if 'featherVar' in kwargs:
            feather_var = kwargs['featherVar']
        if 'toleranceVar' in kwargs:
            tolerance_var = kwargs['toleranceVar']

        if color is not None:
            _setter("color", color)
        if color_var is not None:
            _setter("color_var", color_var)
        if feather is not None:
            _setter("feather", feather)
        if feather_var is not None:
            _setter("feather_var", feather_var)
        if tolerance is not None:
            _setter("tolerance", tolerance)
        if tolerance_var is not None:
            _setter("tolerance_var", tolerance_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @property
    @pulumi.getter
    def feather(self) -> Optional[str]:
        return pulumi.get(self, "feather")

    @property
    @pulumi.getter(name="featherVar")
    def feather_var(self) -> Optional[str]:
        return pulumi.get(self, "feather_var")

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[str]:
        return pulumi.get(self, "tolerance")

    @property
    @pulumi.getter(name="toleranceVar")
    def tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "tolerance_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationResizeResult(dict):
    def __init__(__self__, *,
                 aspect: Optional[str] = None,
                 aspect_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 type: Optional[str] = None,
                 type_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationResizeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aspect=aspect,
            aspect_var=aspect_var,
            height=height,
            height_var=height_var,
            type=type,
            type_var=type_var,
            width=width,
            width_var=width_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aspect: Optional[str] = None,
             aspect_var: Optional[str] = None,
             height: Optional[str] = None,
             height_var: Optional[str] = None,
             type: Optional[str] = None,
             type_var: Optional[str] = None,
             width: Optional[str] = None,
             width_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aspectVar' in kwargs:
            aspect_var = kwargs['aspectVar']
        if 'heightVar' in kwargs:
            height_var = kwargs['heightVar']
        if 'typeVar' in kwargs:
            type_var = kwargs['typeVar']
        if 'widthVar' in kwargs:
            width_var = kwargs['widthVar']

        if aspect is not None:
            _setter("aspect", aspect)
        if aspect_var is not None:
            _setter("aspect_var", aspect_var)
        if height is not None:
            _setter("height", height)
        if height_var is not None:
            _setter("height_var", height_var)
        if type is not None:
            _setter("type", type)
        if type_var is not None:
            _setter("type_var", type_var)
        if width is not None:
            _setter("width", width)
        if width_var is not None:
            _setter("width_var", width_var)

    @property
    @pulumi.getter
    def aspect(self) -> Optional[str]:
        return pulumi.get(self, "aspect")

    @property
    @pulumi.getter(name="aspectVar")
    def aspect_var(self) -> Optional[str]:
        return pulumi.get(self, "aspect_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="typeVar")
    def type_var(self) -> Optional[str]:
        return pulumi.get(self, "type_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRotateResult(dict):
    def __init__(__self__, *,
                 degrees: Optional[str] = None,
                 degrees_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationRotateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            degrees=degrees,
            degrees_var=degrees_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             degrees: Optional[str] = None,
             degrees_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'degreesVar' in kwargs:
            degrees_var = kwargs['degreesVar']

        if degrees is not None:
            _setter("degrees", degrees)
        if degrees_var is not None:
            _setter("degrees_var", degrees_var)

    @property
    @pulumi.getter
    def degrees(self) -> Optional[str]:
        return pulumi.get(self, "degrees")

    @property
    @pulumi.getter(name="degreesVar")
    def degrees_var(self) -> Optional[str]:
        return pulumi.get(self, "degrees_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationScaleResult(dict):
    def __init__(__self__, *,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationScaleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            height=height,
            height_var=height_var,
            width=width,
            width_var=width_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             height: Optional[str] = None,
             height_var: Optional[str] = None,
             width: Optional[str] = None,
             width_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'heightVar' in kwargs:
            height_var = kwargs['heightVar']
        if 'widthVar' in kwargs:
            width_var = kwargs['widthVar']

        if height is not None:
            _setter("height", height)
        if height_var is not None:
            _setter("height_var", height_var)
        if width is not None:
            _setter("width", width)
        if width_var is not None:
            _setter("width_var", width_var)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationShearsResult(dict):
    def __init__(__self__, *,
                 x_shear: Optional[str] = None,
                 x_shear_var: Optional[str] = None,
                 y_shear: Optional[str] = None,
                 y_shear_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationShearsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            x_shear=x_shear,
            x_shear_var=x_shear_var,
            y_shear=y_shear,
            y_shear_var=y_shear_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             x_shear: Optional[str] = None,
             x_shear_var: Optional[str] = None,
             y_shear: Optional[str] = None,
             y_shear_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'xShear' in kwargs:
            x_shear = kwargs['xShear']
        if 'xShearVar' in kwargs:
            x_shear_var = kwargs['xShearVar']
        if 'yShear' in kwargs:
            y_shear = kwargs['yShear']
        if 'yShearVar' in kwargs:
            y_shear_var = kwargs['yShearVar']

        if x_shear is not None:
            _setter("x_shear", x_shear)
        if x_shear_var is not None:
            _setter("x_shear_var", x_shear_var)
        if y_shear is not None:
            _setter("y_shear", y_shear)
        if y_shear_var is not None:
            _setter("y_shear_var", y_shear_var)

    @property
    @pulumi.getter(name="xShear")
    def x_shear(self) -> Optional[str]:
        return pulumi.get(self, "x_shear")

    @property
    @pulumi.getter(name="xShearVar")
    def x_shear_var(self) -> Optional[str]:
        return pulumi.get(self, "x_shear_var")

    @property
    @pulumi.getter(name="yShear")
    def y_shear(self) -> Optional[str]:
        return pulumi.get(self, "y_shear")

    @property
    @pulumi.getter(name="yShearVar")
    def y_shear_var(self) -> Optional[str]:
        return pulumi.get(self, "y_shear_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationTrimResult(dict):
    def __init__(__self__, *,
                 fuzz: Optional[str] = None,
                 fuzz_var: Optional[str] = None,
                 padding: Optional[str] = None,
                 padding_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationTrimResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fuzz=fuzz,
            fuzz_var=fuzz_var,
            padding=padding,
            padding_var=padding_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fuzz: Optional[str] = None,
             fuzz_var: Optional[str] = None,
             padding: Optional[str] = None,
             padding_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fuzzVar' in kwargs:
            fuzz_var = kwargs['fuzzVar']
        if 'paddingVar' in kwargs:
            padding_var = kwargs['paddingVar']

        if fuzz is not None:
            _setter("fuzz", fuzz)
        if fuzz_var is not None:
            _setter("fuzz_var", fuzz_var)
        if padding is not None:
            _setter("padding", padding)
        if padding_var is not None:
            _setter("padding_var", padding_var)

    @property
    @pulumi.getter
    def fuzz(self) -> Optional[str]:
        return pulumi.get(self, "fuzz")

    @property
    @pulumi.getter(name="fuzzVar")
    def fuzz_var(self) -> Optional[str]:
        return pulumi.get(self, "fuzz_var")

    @property
    @pulumi.getter
    def padding(self) -> Optional[str]:
        return pulumi.get(self, "padding")

    @property
    @pulumi.getter(name="paddingVar")
    def padding_var(self) -> Optional[str]:
        return pulumi.get(self, "padding_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationUnsharpMaskResult(dict):
    def __init__(__self__, *,
                 gain: Optional[str] = None,
                 gain_var: Optional[str] = None,
                 sigma: Optional[str] = None,
                 sigma_var: Optional[str] = None,
                 threshold: Optional[str] = None,
                 threshold_var: Optional[str] = None):
        GetImagingPolicyImagePolicyTransformationUnsharpMaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            gain=gain,
            gain_var=gain_var,
            sigma=sigma,
            sigma_var=sigma_var,
            threshold=threshold,
            threshold_var=threshold_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             gain: Optional[str] = None,
             gain_var: Optional[str] = None,
             sigma: Optional[str] = None,
             sigma_var: Optional[str] = None,
             threshold: Optional[str] = None,
             threshold_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'gainVar' in kwargs:
            gain_var = kwargs['gainVar']
        if 'sigmaVar' in kwargs:
            sigma_var = kwargs['sigmaVar']
        if 'thresholdVar' in kwargs:
            threshold_var = kwargs['thresholdVar']

        if gain is not None:
            _setter("gain", gain)
        if gain_var is not None:
            _setter("gain_var", gain_var)
        if sigma is not None:
            _setter("sigma", sigma)
        if sigma_var is not None:
            _setter("sigma_var", sigma_var)
        if threshold is not None:
            _setter("threshold", threshold)
        if threshold_var is not None:
            _setter("threshold_var", threshold_var)

    @property
    @pulumi.getter
    def gain(self) -> Optional[str]:
        return pulumi.get(self, "gain")

    @property
    @pulumi.getter(name="gainVar")
    def gain_var(self) -> Optional[str]:
        return pulumi.get(self, "gain_var")

    @property
    @pulumi.getter
    def sigma(self) -> Optional[str]:
        return pulumi.get(self, "sigma")

    @property
    @pulumi.getter(name="sigmaVar")
    def sigma_var(self) -> Optional[str]:
        return pulumi.get(self, "sigma_var")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[str]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="thresholdVar")
    def threshold_var(self) -> Optional[str]:
        return pulumi.get(self, "threshold_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyVariableResult(dict):
    def __init__(__self__, *,
                 default_value: str,
                 name: str,
                 type: str,
                 enum_options: Optional[Sequence['outputs.GetImagingPolicyImagePolicyVariableEnumOptionResult']] = None,
                 postfix: Optional[str] = None,
                 prefix: Optional[str] = None):
        GetImagingPolicyImagePolicyVariableResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_value=default_value,
            name=name,
            type=type,
            enum_options=enum_options,
            postfix=postfix,
            prefix=prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_value: str,
             name: str,
             type: str,
             enum_options: Optional[Sequence['outputs.GetImagingPolicyImagePolicyVariableEnumOptionResult']] = None,
             postfix: Optional[str] = None,
             prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultValue' in kwargs:
            default_value = kwargs['defaultValue']
        if 'enumOptions' in kwargs:
            enum_options = kwargs['enumOptions']

        _setter("default_value", default_value)
        _setter("name", name)
        _setter("type", type)
        if enum_options is not None:
            _setter("enum_options", enum_options)
        if postfix is not None:
            _setter("postfix", postfix)
        if prefix is not None:
            _setter("prefix", prefix)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="enumOptions")
    def enum_options(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyVariableEnumOptionResult']]:
        return pulumi.get(self, "enum_options")

    @property
    @pulumi.getter
    def postfix(self) -> Optional[str]:
        return pulumi.get(self, "postfix")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetImagingPolicyImagePolicyVariableEnumOptionResult(dict):
    def __init__(__self__, *,
                 id: str,
                 value: str):
        GetImagingPolicyImagePolicyVariableEnumOptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("id", id)
        _setter("value", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImagingPolicyVideoPolicyResult(dict):
    def __init__(__self__, *,
                 breakpoints: Optional['outputs.GetImagingPolicyVideoPolicyBreakpointsResult'] = None,
                 hosts: Optional[Sequence[str]] = None,
                 output: Optional['outputs.GetImagingPolicyVideoPolicyOutputResult'] = None,
                 rollout_duration: Optional[str] = None,
                 variables: Optional[Sequence['outputs.GetImagingPolicyVideoPolicyVariableResult']] = None):
        GetImagingPolicyVideoPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            breakpoints=breakpoints,
            hosts=hosts,
            output=output,
            rollout_duration=rollout_duration,
            variables=variables,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             breakpoints: Optional['outputs.GetImagingPolicyVideoPolicyBreakpointsResult'] = None,
             hosts: Optional[Sequence[str]] = None,
             output: Optional['outputs.GetImagingPolicyVideoPolicyOutputResult'] = None,
             rollout_duration: Optional[str] = None,
             variables: Optional[Sequence['outputs.GetImagingPolicyVideoPolicyVariableResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rolloutDuration' in kwargs:
            rollout_duration = kwargs['rolloutDuration']

        if breakpoints is not None:
            _setter("breakpoints", breakpoints)
        if hosts is not None:
            _setter("hosts", hosts)
        if output is not None:
            _setter("output", output)
        if rollout_duration is not None:
            _setter("rollout_duration", rollout_duration)
        if variables is not None:
            _setter("variables", variables)

    @property
    @pulumi.getter
    def breakpoints(self) -> Optional['outputs.GetImagingPolicyVideoPolicyBreakpointsResult']:
        return pulumi.get(self, "breakpoints")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def output(self) -> Optional['outputs.GetImagingPolicyVideoPolicyOutputResult']:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="rolloutDuration")
    def rollout_duration(self) -> Optional[str]:
        return pulumi.get(self, "rollout_duration")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetImagingPolicyVideoPolicyVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetImagingPolicyVideoPolicyBreakpointsResult(dict):
    def __init__(__self__, *,
                 widths: Optional[Sequence[int]] = None):
        GetImagingPolicyVideoPolicyBreakpointsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            widths=widths,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             widths: Optional[Sequence[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if widths is not None:
            _setter("widths", widths)

    @property
    @pulumi.getter
    def widths(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "widths")


@pulumi.output_type
class GetImagingPolicyVideoPolicyOutputResult(dict):
    def __init__(__self__, *,
                 perceptual_quality: Optional[str] = None,
                 perceptual_quality_var: Optional[str] = None,
                 placeholder_video_url: Optional[str] = None,
                 placeholder_video_url_var: Optional[str] = None,
                 video_adaptive_quality: Optional[str] = None,
                 video_adaptive_quality_var: Optional[str] = None):
        GetImagingPolicyVideoPolicyOutputResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            perceptual_quality=perceptual_quality,
            perceptual_quality_var=perceptual_quality_var,
            placeholder_video_url=placeholder_video_url,
            placeholder_video_url_var=placeholder_video_url_var,
            video_adaptive_quality=video_adaptive_quality,
            video_adaptive_quality_var=video_adaptive_quality_var,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             perceptual_quality: Optional[str] = None,
             perceptual_quality_var: Optional[str] = None,
             placeholder_video_url: Optional[str] = None,
             placeholder_video_url_var: Optional[str] = None,
             video_adaptive_quality: Optional[str] = None,
             video_adaptive_quality_var: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'perceptualQuality' in kwargs:
            perceptual_quality = kwargs['perceptualQuality']
        if 'perceptualQualityVar' in kwargs:
            perceptual_quality_var = kwargs['perceptualQualityVar']
        if 'placeholderVideoUrl' in kwargs:
            placeholder_video_url = kwargs['placeholderVideoUrl']
        if 'placeholderVideoUrlVar' in kwargs:
            placeholder_video_url_var = kwargs['placeholderVideoUrlVar']
        if 'videoAdaptiveQuality' in kwargs:
            video_adaptive_quality = kwargs['videoAdaptiveQuality']
        if 'videoAdaptiveQualityVar' in kwargs:
            video_adaptive_quality_var = kwargs['videoAdaptiveQualityVar']

        if perceptual_quality is not None:
            _setter("perceptual_quality", perceptual_quality)
        if perceptual_quality_var is not None:
            _setter("perceptual_quality_var", perceptual_quality_var)
        if placeholder_video_url is not None:
            _setter("placeholder_video_url", placeholder_video_url)
        if placeholder_video_url_var is not None:
            _setter("placeholder_video_url_var", placeholder_video_url_var)
        if video_adaptive_quality is not None:
            _setter("video_adaptive_quality", video_adaptive_quality)
        if video_adaptive_quality_var is not None:
            _setter("video_adaptive_quality_var", video_adaptive_quality_var)

    @property
    @pulumi.getter(name="perceptualQuality")
    def perceptual_quality(self) -> Optional[str]:
        return pulumi.get(self, "perceptual_quality")

    @property
    @pulumi.getter(name="perceptualQualityVar")
    def perceptual_quality_var(self) -> Optional[str]:
        return pulumi.get(self, "perceptual_quality_var")

    @property
    @pulumi.getter(name="placeholderVideoUrl")
    def placeholder_video_url(self) -> Optional[str]:
        return pulumi.get(self, "placeholder_video_url")

    @property
    @pulumi.getter(name="placeholderVideoUrlVar")
    def placeholder_video_url_var(self) -> Optional[str]:
        return pulumi.get(self, "placeholder_video_url_var")

    @property
    @pulumi.getter(name="videoAdaptiveQuality")
    def video_adaptive_quality(self) -> Optional[str]:
        return pulumi.get(self, "video_adaptive_quality")

    @property
    @pulumi.getter(name="videoAdaptiveQualityVar")
    def video_adaptive_quality_var(self) -> Optional[str]:
        return pulumi.get(self, "video_adaptive_quality_var")


@pulumi.output_type
class GetImagingPolicyVideoPolicyVariableResult(dict):
    def __init__(__self__, *,
                 default_value: str,
                 name: str,
                 type: str,
                 enum_options: Optional[Sequence['outputs.GetImagingPolicyVideoPolicyVariableEnumOptionResult']] = None,
                 postfix: Optional[str] = None,
                 prefix: Optional[str] = None):
        GetImagingPolicyVideoPolicyVariableResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_value=default_value,
            name=name,
            type=type,
            enum_options=enum_options,
            postfix=postfix,
            prefix=prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_value: str,
             name: str,
             type: str,
             enum_options: Optional[Sequence['outputs.GetImagingPolicyVideoPolicyVariableEnumOptionResult']] = None,
             postfix: Optional[str] = None,
             prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultValue' in kwargs:
            default_value = kwargs['defaultValue']
        if 'enumOptions' in kwargs:
            enum_options = kwargs['enumOptions']

        _setter("default_value", default_value)
        _setter("name", name)
        _setter("type", type)
        if enum_options is not None:
            _setter("enum_options", enum_options)
        if postfix is not None:
            _setter("postfix", postfix)
        if prefix is not None:
            _setter("prefix", prefix)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="enumOptions")
    def enum_options(self) -> Optional[Sequence['outputs.GetImagingPolicyVideoPolicyVariableEnumOptionResult']]:
        return pulumi.get(self, "enum_options")

    @property
    @pulumi.getter
    def postfix(self) -> Optional[str]:
        return pulumi.get(self, "postfix")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetImagingPolicyVideoPolicyVariableEnumOptionResult(dict):
    def __init__(__self__, *,
                 id: str,
                 value: str):
        GetImagingPolicyVideoPolicyVariableEnumOptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("id", id)
        _setter("value", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertiesPropertyResult(dict):
    def __init__(__self__, *,
                 contract_id: str,
                 group_id: str,
                 latest_version: int,
                 note: str,
                 product_id: str,
                 production_version: int,
                 property_id: str,
                 property_name: str,
                 rule_format: str,
                 staging_version: int):
        GetPropertiesPropertyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contract_id=contract_id,
            group_id=group_id,
            latest_version=latest_version,
            note=note,
            product_id=product_id,
            production_version=production_version,
            property_id=property_id,
            property_name=property_name,
            rule_format=rule_format,
            staging_version=staging_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contract_id: str,
             group_id: str,
             latest_version: int,
             note: str,
             product_id: str,
             production_version: int,
             property_id: str,
             property_name: str,
             rule_format: str,
             staging_version: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'contractId' in kwargs:
            contract_id = kwargs['contractId']
        if 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if 'latestVersion' in kwargs:
            latest_version = kwargs['latestVersion']
        if 'productId' in kwargs:
            product_id = kwargs['productId']
        if 'productionVersion' in kwargs:
            production_version = kwargs['productionVersion']
        if 'propertyId' in kwargs:
            property_id = kwargs['propertyId']
        if 'propertyName' in kwargs:
            property_name = kwargs['propertyName']
        if 'ruleFormat' in kwargs:
            rule_format = kwargs['ruleFormat']
        if 'stagingVersion' in kwargs:
            staging_version = kwargs['stagingVersion']

        _setter("contract_id", contract_id)
        _setter("group_id", group_id)
        _setter("latest_version", latest_version)
        _setter("note", note)
        _setter("product_id", product_id)
        _setter("production_version", production_version)
        _setter("property_id", property_id)
        _setter("property_name", property_name)
        _setter("rule_format", rule_format)
        _setter("staging_version", staging_version)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> int:
        return pulumi.get(self, "latest_version")

    @property
    @pulumi.getter
    def note(self) -> str:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="productionVersion")
    def production_version(self) -> int:
        return pulumi.get(self, "production_version")

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> str:
        return pulumi.get(self, "property_id")

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> str:
        return pulumi.get(self, "property_name")

    @property
    @pulumi.getter(name="ruleFormat")
    def rule_format(self) -> str:
        return pulumi.get(self, "rule_format")

    @property
    @pulumi.getter(name="stagingVersion")
    def staging_version(self) -> int:
        return pulumi.get(self, "staging_version")


@pulumi.output_type
class GetPropertiesSearchPropertyResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 asset_id: str,
                 contract_id: str,
                 edge_hostname: str,
                 group_id: str,
                 hostname: str,
                 production_status: str,
                 property_id: str,
                 property_name: str,
                 property_version: int,
                 staging_status: str,
                 updated_by_user: str,
                 updated_date: str):
        GetPropertiesSearchPropertyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_id=account_id,
            asset_id=asset_id,
            contract_id=contract_id,
            edge_hostname=edge_hostname,
            group_id=group_id,
            hostname=hostname,
            production_status=production_status,
            property_id=property_id,
            property_name=property_name,
            property_version=property_version,
            staging_status=staging_status,
            updated_by_user=updated_by_user,
            updated_date=updated_date,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_id: str,
             asset_id: str,
             contract_id: str,
             edge_hostname: str,
             group_id: str,
             hostname: str,
             production_status: str,
             property_id: str,
             property_name: str,
             property_version: int,
             staging_status: str,
             updated_by_user: str,
             updated_date: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accountId' in kwargs:
            account_id = kwargs['accountId']
        if 'assetId' in kwargs:
            asset_id = kwargs['assetId']
        if 'contractId' in kwargs:
            contract_id = kwargs['contractId']
        if 'edgeHostname' in kwargs:
            edge_hostname = kwargs['edgeHostname']
        if 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if 'productionStatus' in kwargs:
            production_status = kwargs['productionStatus']
        if 'propertyId' in kwargs:
            property_id = kwargs['propertyId']
        if 'propertyName' in kwargs:
            property_name = kwargs['propertyName']
        if 'propertyVersion' in kwargs:
            property_version = kwargs['propertyVersion']
        if 'stagingStatus' in kwargs:
            staging_status = kwargs['stagingStatus']
        if 'updatedByUser' in kwargs:
            updated_by_user = kwargs['updatedByUser']
        if 'updatedDate' in kwargs:
            updated_date = kwargs['updatedDate']

        _setter("account_id", account_id)
        _setter("asset_id", asset_id)
        _setter("contract_id", contract_id)
        _setter("edge_hostname", edge_hostname)
        _setter("group_id", group_id)
        _setter("hostname", hostname)
        _setter("production_status", production_status)
        _setter("property_id", property_id)
        _setter("property_name", property_name)
        _setter("property_version", property_version)
        _setter("staging_status", staging_status)
        _setter("updated_by_user", updated_by_user)
        _setter("updated_date", updated_date)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="assetId")
    def asset_id(self) -> str:
        return pulumi.get(self, "asset_id")

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="edgeHostname")
    def edge_hostname(self) -> str:
        return pulumi.get(self, "edge_hostname")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="productionStatus")
    def production_status(self) -> str:
        return pulumi.get(self, "production_status")

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> str:
        return pulumi.get(self, "property_id")

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> str:
        return pulumi.get(self, "property_name")

    @property
    @pulumi.getter(name="propertyVersion")
    def property_version(self) -> int:
        return pulumi.get(self, "property_version")

    @property
    @pulumi.getter(name="stagingStatus")
    def staging_status(self) -> str:
        return pulumi.get(self, "staging_status")

    @property
    @pulumi.getter(name="updatedByUser")
    def updated_by_user(self) -> str:
        return pulumi.get(self, "updated_by_user")

    @property
    @pulumi.getter(name="updatedDate")
    def updated_date(self) -> str:
        return pulumi.get(self, "updated_date")


@pulumi.output_type
class GetPropertyHostnamesHostnameResult(dict):
    def __init__(__self__, *,
                 cert_provisioning_type: str,
                 cert_statuses: Sequence['outputs.GetPropertyHostnamesHostnameCertStatusResult'],
                 cname_from: str,
                 cname_to: str,
                 cname_type: str,
                 edge_hostname_id: str):
        GetPropertyHostnamesHostnameResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cert_provisioning_type=cert_provisioning_type,
            cert_statuses=cert_statuses,
            cname_from=cname_from,
            cname_to=cname_to,
            cname_type=cname_type,
            edge_hostname_id=edge_hostname_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cert_provisioning_type: str,
             cert_statuses: Sequence['outputs.GetPropertyHostnamesHostnameCertStatusResult'],
             cname_from: str,
             cname_to: str,
             cname_type: str,
             edge_hostname_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'certProvisioningType' in kwargs:
            cert_provisioning_type = kwargs['certProvisioningType']
        if 'certStatuses' in kwargs:
            cert_statuses = kwargs['certStatuses']
        if 'cnameFrom' in kwargs:
            cname_from = kwargs['cnameFrom']
        if 'cnameTo' in kwargs:
            cname_to = kwargs['cnameTo']
        if 'cnameType' in kwargs:
            cname_type = kwargs['cnameType']
        if 'edgeHostnameId' in kwargs:
            edge_hostname_id = kwargs['edgeHostnameId']

        _setter("cert_provisioning_type", cert_provisioning_type)
        _setter("cert_statuses", cert_statuses)
        _setter("cname_from", cname_from)
        _setter("cname_to", cname_to)
        _setter("cname_type", cname_type)
        _setter("edge_hostname_id", edge_hostname_id)

    @property
    @pulumi.getter(name="certProvisioningType")
    def cert_provisioning_type(self) -> str:
        return pulumi.get(self, "cert_provisioning_type")

    @property
    @pulumi.getter(name="certStatuses")
    def cert_statuses(self) -> Sequence['outputs.GetPropertyHostnamesHostnameCertStatusResult']:
        return pulumi.get(self, "cert_statuses")

    @property
    @pulumi.getter(name="cnameFrom")
    def cname_from(self) -> str:
        return pulumi.get(self, "cname_from")

    @property
    @pulumi.getter(name="cnameTo")
    def cname_to(self) -> str:
        return pulumi.get(self, "cname_to")

    @property
    @pulumi.getter(name="cnameType")
    def cname_type(self) -> str:
        return pulumi.get(self, "cname_type")

    @property
    @pulumi.getter(name="edgeHostnameId")
    def edge_hostname_id(self) -> str:
        return pulumi.get(self, "edge_hostname_id")


@pulumi.output_type
class GetPropertyHostnamesHostnameCertStatusResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 production_status: str,
                 staging_status: str,
                 target: str):
        GetPropertyHostnamesHostnameCertStatusResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hostname=hostname,
            production_status=production_status,
            staging_status=staging_status,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hostname: str,
             production_status: str,
             staging_status: str,
             target: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'productionStatus' in kwargs:
            production_status = kwargs['productionStatus']
        if 'stagingStatus' in kwargs:
            staging_status = kwargs['stagingStatus']

        _setter("hostname", hostname)
        _setter("production_status", production_status)
        _setter("staging_status", staging_status)
        _setter("target", target)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="productionStatus")
    def production_status(self) -> str:
        return pulumi.get(self, "production_status")

    @property
    @pulumi.getter(name="stagingStatus")
    def staging_status(self) -> str:
        return pulumi.get(self, "staging_status")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")


@pulumi.output_type
class GetPropertyIncludeParentsParentResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_include_used_in_production_version: bool,
                 is_include_used_in_staging_version: bool,
                 name: str,
                 production_version: str,
                 staging_version: str):
        GetPropertyIncludeParentsParentResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            is_include_used_in_production_version=is_include_used_in_production_version,
            is_include_used_in_staging_version=is_include_used_in_staging_version,
            name=name,
            production_version=production_version,
            staging_version=staging_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             is_include_used_in_production_version: bool,
             is_include_used_in_staging_version: bool,
             name: str,
             production_version: str,
             staging_version: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isIncludeUsedInProductionVersion' in kwargs:
            is_include_used_in_production_version = kwargs['isIncludeUsedInProductionVersion']
        if 'isIncludeUsedInStagingVersion' in kwargs:
            is_include_used_in_staging_version = kwargs['isIncludeUsedInStagingVersion']
        if 'productionVersion' in kwargs:
            production_version = kwargs['productionVersion']
        if 'stagingVersion' in kwargs:
            staging_version = kwargs['stagingVersion']

        _setter("id", id)
        _setter("is_include_used_in_production_version", is_include_used_in_production_version)
        _setter("is_include_used_in_staging_version", is_include_used_in_staging_version)
        _setter("name", name)
        _setter("production_version", production_version)
        _setter("staging_version", staging_version)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIncludeUsedInProductionVersion")
    def is_include_used_in_production_version(self) -> bool:
        return pulumi.get(self, "is_include_used_in_production_version")

    @property
    @pulumi.getter(name="isIncludeUsedInStagingVersion")
    def is_include_used_in_staging_version(self) -> bool:
        return pulumi.get(self, "is_include_used_in_staging_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productionVersion")
    def production_version(self) -> str:
        return pulumi.get(self, "production_version")

    @property
    @pulumi.getter(name="stagingVersion")
    def staging_version(self) -> str:
        return pulumi.get(self, "staging_version")


@pulumi.output_type
class GetPropertyIncludesIncludeResult(dict):
    def __init__(__self__, *,
                 id: str,
                 latest_version: int,
                 name: str,
                 production_version: str,
                 staging_version: str,
                 type: str):
        GetPropertyIncludesIncludeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            latest_version=latest_version,
            name=name,
            production_version=production_version,
            staging_version=staging_version,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             latest_version: int,
             name: str,
             production_version: str,
             staging_version: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'latestVersion' in kwargs:
            latest_version = kwargs['latestVersion']
        if 'productionVersion' in kwargs:
            production_version = kwargs['productionVersion']
        if 'stagingVersion' in kwargs:
            staging_version = kwargs['stagingVersion']

        _setter("id", id)
        _setter("latest_version", latest_version)
        _setter("name", name)
        _setter("production_version", production_version)
        _setter("staging_version", staging_version)
        _setter("type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> int:
        return pulumi.get(self, "latest_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productionVersion")
    def production_version(self) -> str:
        return pulumi.get(self, "production_version")

    @property
    @pulumi.getter(name="stagingVersion")
    def staging_version(self) -> str:
        return pulumi.get(self, "staging_version")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPropertyIncludesParentPropertyResult(dict):
    def __init__(__self__, *,
                 id: str,
                 version: int):
        GetPropertyIncludesParentPropertyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             version: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("id", id)
        _setter("version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPropertyProductsProductResult(dict):
    def __init__(__self__, *,
                 product_id: str,
                 product_name: str):
        GetPropertyProductsProductResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            product_id=product_id,
            product_name=product_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             product_id: str,
             product_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'productId' in kwargs:
            product_id = kwargs['productId']
        if 'productName' in kwargs:
            product_name = kwargs['productName']

        _setter("product_id", product_id)
        _setter("product_name", product_name)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        return pulumi.get(self, "product_name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105Result(dict):
    def __init__(__self__, *,
                 name: str,
                 advanced_override: Optional[str] = None,
                 behaviors: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResult']] = None,
                 childrens: Optional[Sequence[str]] = None,
                 comments: Optional[str] = None,
                 criteria_locked: Optional[bool] = None,
                 criteria_must_satisfy: Optional[str] = None,
                 criterions: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105CriterionResult']] = None,
                 custom_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CustomOverrideResult'] = None,
                 is_secure: Optional[bool] = None,
                 template_link: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105VariableResult']] = None):
        GetPropertyRulesBuilderRulesV20230105Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            advanced_override=advanced_override,
            behaviors=behaviors,
            childrens=childrens,
            comments=comments,
            criteria_locked=criteria_locked,
            criteria_must_satisfy=criteria_must_satisfy,
            criterions=criterions,
            custom_override=custom_override,
            is_secure=is_secure,
            template_link=template_link,
            template_uuid=template_uuid,
            uuid=uuid,
            variables=variables,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             advanced_override: Optional[str] = None,
             behaviors: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResult']] = None,
             childrens: Optional[Sequence[str]] = None,
             comments: Optional[str] = None,
             criteria_locked: Optional[bool] = None,
             criteria_must_satisfy: Optional[str] = None,
             criterions: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105CriterionResult']] = None,
             custom_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CustomOverrideResult'] = None,
             is_secure: Optional[bool] = None,
             template_link: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             variables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105VariableResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'advancedOverride' in kwargs:
            advanced_override = kwargs['advancedOverride']
        if 'criteriaLocked' in kwargs:
            criteria_locked = kwargs['criteriaLocked']
        if 'criteriaMustSatisfy' in kwargs:
            criteria_must_satisfy = kwargs['criteriaMustSatisfy']
        if 'customOverride' in kwargs:
            custom_override = kwargs['customOverride']
        if 'isSecure' in kwargs:
            is_secure = kwargs['isSecure']
        if 'templateLink' in kwargs:
            template_link = kwargs['templateLink']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        _setter("name", name)
        if advanced_override is not None:
            _setter("advanced_override", advanced_override)
        if behaviors is not None:
            _setter("behaviors", behaviors)
        if childrens is not None:
            _setter("childrens", childrens)
        if comments is not None:
            _setter("comments", comments)
        if criteria_locked is not None:
            _setter("criteria_locked", criteria_locked)
        if criteria_must_satisfy is not None:
            _setter("criteria_must_satisfy", criteria_must_satisfy)
        if criterions is not None:
            _setter("criterions", criterions)
        if custom_override is not None:
            _setter("custom_override", custom_override)
        if is_secure is not None:
            _setter("is_secure", is_secure)
        if template_link is not None:
            _setter("template_link", template_link)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if variables is not None:
            _setter("variables", variables)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="advancedOverride")
    def advanced_override(self) -> Optional[str]:
        return pulumi.get(self, "advanced_override")

    @property
    @pulumi.getter
    def behaviors(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResult']]:
        return pulumi.get(self, "behaviors")

    @property
    @pulumi.getter
    def childrens(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "childrens")

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="criteriaLocked")
    def criteria_locked(self) -> Optional[bool]:
        return pulumi.get(self, "criteria_locked")

    @property
    @pulumi.getter(name="criteriaMustSatisfy")
    def criteria_must_satisfy(self) -> Optional[str]:
        return pulumi.get(self, "criteria_must_satisfy")

    @property
    @pulumi.getter
    def criterions(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105CriterionResult']]:
        return pulumi.get(self, "criterions")

    @property
    @pulumi.getter(name="customOverride")
    def custom_override(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CustomOverrideResult']:
        return pulumi.get(self, "custom_override")

    @property
    @pulumi.getter(name="isSecure")
    def is_secure(self) -> Optional[bool]:
        return pulumi.get(self, "is_secure")

    @property
    @pulumi.getter(name="templateLink")
    def template_link(self) -> Optional[str]:
        return pulumi.get(self, "template_link")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105VariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorResult(dict):
    def __init__(__self__, *,
                 ad_scaler_circuit_breaker: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdScalerCircuitBreakerResult'] = None,
                 adaptive_acceleration: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveAccelerationResult'] = None,
                 adaptive_image_compression: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveImageCompressionResult'] = None,
                 advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdvancedResult'] = None,
                 aggregated_reporting: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAggregatedReportingResult'] = None,
                 akamaizer: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerResult'] = None,
                 akamaizer_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagResult'] = None,
                 all_http_in_cache_hierarchy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllHttpInCacheHierarchyResult'] = None,
                 allow_cloudlets_origins: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowCloudletsOriginsResult'] = None,
                 allow_delete: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowDeleteResult'] = None,
                 allow_https_cache_key_sharing: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsCacheKeySharingResult'] = None,
                 allow_https_downgrade: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsDowngradeResult'] = None,
                 allow_options: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowOptionsResult'] = None,
                 allow_patch: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPatchResult'] = None,
                 allow_post: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPostResult'] = None,
                 allow_put: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPutResult'] = None,
                 allow_transfer_encoding: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowTransferEncodingResult'] = None,
                 alt_svc_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAltSvcHeaderResult'] = None,
                 api_prioritization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationResult'] = None,
                 application_load_balancer: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerResult'] = None,
                 audience_segmentation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationResult'] = None,
                 auto_domain_validation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAutoDomainValidationResult'] = None,
                 base_directory: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBaseDirectoryResult'] = None,
                 boss_beaconing: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBossBeaconingResult'] = None,
                 breadcrumbs: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBreadcrumbsResult'] = None,
                 break_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBreakConnectionResult'] = None,
                 brotli: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBrotliResult'] = None,
                 cache_error: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheErrorResult'] = None,
                 cache_id: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheIdResult'] = None,
                 cache_key_ignore_case: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyIgnoreCaseResult'] = None,
                 cache_key_query_params: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyQueryParamsResult'] = None,
                 cache_key_rewrite: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyRewriteResult'] = None,
                 cache_post: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCachePostResult'] = None,
                 cache_redirect: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheRedirectResult'] = None,
                 cache_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagResult'] = None,
                 cache_tag_visible: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagVisibleResult'] = None,
                 caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCachingResult'] = None,
                 central_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCentralAuthorizationResult'] = None,
                 chase_redirects: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorChaseRedirectsResult'] = None,
                 client_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorClientCharacteristicsResult'] = None,
                 cloud_interconnects: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudInterconnectsResult'] = None,
                 cloud_wrapper: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperResult'] = None,
                 cloud_wrapper_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperAdvancedResult'] = None,
                 conditional_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorConditionalOriginResult'] = None,
                 construct_response: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorConstructResponseResult'] = None,
                 content_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsResult'] = None,
                 content_characteristics_amd: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsAmdResult'] = None,
                 content_characteristics_dd: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsDdResult'] = None,
                 content_characteristics_wsd_large_file: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLargeFileResult'] = None,
                 content_characteristics_wsd_live: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLiveResult'] = None,
                 content_characteristics_wsd_vod: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdVodResult'] = None,
                 content_pre_position: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentPrePositionResult'] = None,
                 content_targeting_protection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentTargetingProtectionResult'] = None,
                 cors_support: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCorsSupportResult'] = None,
                 cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeResult'] = None,
                 custom_behavior: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCustomBehaviorResult'] = None,
                 datastream: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDatastreamResult'] = None,
                 dcp: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpResult'] = None,
                 dcp_auth_hmac_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthHmacTransformationResult'] = None,
                 dcp_auth_regex_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthRegexTransformationResult'] = None,
                 dcp_auth_substring_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthSubstringTransformationResult'] = None,
                 dcp_auth_variable_extractor: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthVariableExtractorResult'] = None,
                 dcp_default_authz_groups: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpDefaultAuthzGroupsResult'] = None,
                 dcp_dev_relations: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpDevRelationsResult'] = None,
                 dcp_real_time_auth: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpRealTimeAuthResult'] = None,
                 delivery_receipt: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeliveryReceiptResult'] = None,
                 deny_access: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDenyAccessResult'] = None,
                 deny_direct_failover_access: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDenyDirectFailoverAccessResult'] = None,
                 device_characteristic_cache_id: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicCacheIdResult'] = None,
                 device_characteristic_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicHeaderResult'] = None,
                 dns_async_refresh: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDnsAsyncRefreshResult'] = None,
                 dns_prefresh: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDnsPrefreshResult'] = None,
                 downgrade_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDowngradeProtocolResult'] = None,
                 download_complete_marker: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownloadCompleteMarkerResult'] = None,
                 download_notification: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownloadNotificationResult'] = None,
                 downstream_cache: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownstreamCacheResult'] = None,
                 dynamic_throughtput_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationResult'] = None,
                 dynamic_throughtput_optimization_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationOverrideResult'] = None,
                 dynamic_web_content: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicWebContentResult'] = None,
                 ecms_bulk_upload: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsBulkUploadResult'] = None,
                 ecms_database: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatabaseResult'] = None,
                 ecms_dataset: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatasetResult'] = None,
                 ecms_object_key: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsObjectKeyResult'] = None,
                 edge_connect: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeConnectResult'] = None,
                 edge_load_balancing_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingAdvancedResult'] = None,
                 edge_load_balancing_data_center: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterResult'] = None,
                 edge_load_balancing_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingOriginResult'] = None,
                 edge_origin_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeOriginAuthorizationResult'] = None,
                 edge_redirector: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorResult'] = None,
                 edge_scape: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeScapeResult'] = None,
                 edge_side_includes: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeSideIncludesResult'] = None,
                 edge_worker: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeWorkerResult'] = None,
                 enhanced_akamai_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedAkamaiProtocolResult'] = None,
                 enhanced_proxy_detection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedProxyDetectionResult'] = None,
                 epd_forward_header_enrichment: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEpdForwardHeaderEnrichmentResult'] = None,
                 fail_action: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionResult'] = None,
                 failover_bot_manager_feature_compatibility: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailoverBotManagerFeatureCompatibilityResult'] = None,
                 fast_invalidate: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFastInvalidateResult'] = None,
                 first_party_marketing: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingResult'] = None,
                 first_party_marketing_plus: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusResult'] = None,
                 forward_rewrite: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteResult'] = None,
                 front_end_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFrontEndOptimizationResult'] = None,
                 g2oheader: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorG2oheaderResult'] = None,
                 global_request_number: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGlobalRequestNumberResult'] = None,
                 graphql_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGraphqlCachingResult'] = None,
                 gzip_response: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGzipResponseResult'] = None,
                 hd_data_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHdDataAdvancedResult'] = None,
                 health_detection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHealthDetectionResult'] = None,
                 hsaf_eip_binding: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHsafEipBindingResult'] = None,
                 http2: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttp2Result'] = None,
                 http3: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttp3Result'] = None,
                 http_strict_transport_security: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttpStrictTransportSecurityResult'] = None,
                 http_to_https_upgrade: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttpToHttpsUpgradeResult'] = None,
                 im_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImOverrideResult'] = None,
                 image_and_video_manager: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerResult'] = None,
                 image_manager: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerResult'] = None,
                 image_manager_video: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoResult'] = None,
                 include: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorIncludeResult'] = None,
                 input_validation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationResult'] = None,
                 instant: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInstantResult'] = None,
                 instant_config: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInstantConfigResult'] = None,
                 large_file_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationResult'] = None,
                 large_file_optimization_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationAdvancedResult'] = None,
                 limit_bit_rate: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateResult'] = None,
                 log_custom: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLogCustomResult'] = None,
                 m_pulse: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMPulseResult'] = None,
                 manifest_personalization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManifestPersonalizationResult'] = None,
                 manifest_rerouting: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManifestReroutingResult'] = None,
                 manual_server_push: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManualServerPushResult'] = None,
                 media_acceleration: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationResult'] = None,
                 media_acceleration_quic_optout: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationQuicOptoutResult'] = None,
                 media_client: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaClientResult'] = None,
                 media_file_retrieval_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaFileRetrievalOptimizationResult'] = None,
                 media_origin_failover: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaOriginFailoverResult'] = None,
                 metadata_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMetadataCachingResult'] = None,
                 mobile_sdk_performance: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMobileSdkPerformanceResult'] = None,
                 modify_incoming_request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingRequestHeaderResult'] = None,
                 modify_incoming_response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingResponseHeaderResult'] = None,
                 modify_outgoing_request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingRequestHeaderResult'] = None,
                 modify_outgoing_response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingResponseHeaderResult'] = None,
                 modify_via_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyViaHeaderResult'] = None,
                 origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginResult'] = None,
                 origin_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsResult'] = None,
                 origin_characteristics_wsd: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsWsdResult'] = None,
                 origin_failure_recovery_method: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryMethodResult'] = None,
                 origin_failure_recovery_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryPolicyResult'] = None,
                 origin_ip_acl: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginIpAclResult'] = None,
                 persistent_client_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersistentClientConnectionResult'] = None,
                 persistent_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersistentConnectionResult'] = None,
                 personally_identifiable_information: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersonallyIdentifiableInformationResult'] = None,
                 phased_release: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseResult'] = None,
                 preconnect: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPreconnectResult'] = None,
                 predictive_content_delivery: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPredictiveContentDeliveryResult'] = None,
                 predictive_prefetching: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPredictivePrefetchingResult'] = None,
                 prefetch: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchResult'] = None,
                 prefetchable: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchableResult'] = None,
                 prefresh_cache: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefreshCacheResult'] = None,
                 quality: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorQualityResult'] = None,
                 quic_beta: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorQuicBetaResult'] = None,
                 random_seek: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRandomSeekResult'] = None,
                 rapid: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRapidResult'] = None,
                 read_timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReadTimeoutResult'] = None,
                 real_time_reporting: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRealTimeReportingResult'] = None,
                 real_user_monitoring: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRealUserMonitoringResult'] = None,
                 redirect: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRedirectResult'] = None,
                 redirectplus: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRedirectplusResult'] = None,
                 referer_checking: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRefererCheckingResult'] = None,
                 remove_query_parameter: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRemoveQueryParameterResult'] = None,
                 remove_vary: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRemoveVaryResult'] = None,
                 report: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReportResult'] = None,
                 request_control: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlResult'] = None,
                 request_type_marker: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestTypeMarkerResult'] = None,
                 resource_optimizer: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerResult'] = None,
                 resource_optimizer_extended_compatibility: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerExtendedCompatibilityResult'] = None,
                 response_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResponseCodeResult'] = None,
                 response_cookie: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResponseCookieResult'] = None,
                 restrict_object_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRestrictObjectCachingResult'] = None,
                 return_cache_status: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReturnCacheStatusResult'] = None,
                 rewrite_url: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRewriteUrlResult'] = None,
                 rum_custom: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRumCustomResult'] = None,
                 saas_definitions: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSaasDefinitionsResult'] = None,
                 sales_force_commerce_cloud_client: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudClientResult'] = None,
                 sales_force_commerce_cloud_provider: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderResult'] = None,
                 sales_force_commerce_cloud_provider_host_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderHostHeaderResult'] = None,
                 save_post_dca_processing: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSavePostDcaProcessingResult'] = None,
                 schedule_invalidation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorScheduleInvalidationResult'] = None,
                 script_management: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorScriptManagementResult'] = None,
                 segmented_content_protection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedContentProtectionResult'] = None,
                 segmented_media_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaOptimizationResult'] = None,
                 segmented_media_streaming_prefetch: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaStreamingPrefetchResult'] = None,
                 set_variable: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSetVariableResult'] = None,
                 shutr: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorShutrResult'] = None,
                 simulate_error_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSimulateErrorCodeResult'] = None,
                 site_shield: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldResult'] = None,
                 standard_tls_migration: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationResult'] = None,
                 standard_tls_migration_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationOverrideResult'] = None,
                 strict_header_parsing: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStrictHeaderParsingResult'] = None,
                 sub_customer: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSubCustomerResult'] = None,
                 sure_route: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSureRouteResult'] = None,
                 tcp_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTcpOptimizationResult'] = None,
                 tea_leaf: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTeaLeafResult'] = None,
                 tiered_distribution: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionResult'] = None,
                 tiered_distribution_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionAdvancedResult'] = None,
                 tiered_distribution_customization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionCustomizationResult'] = None,
                 timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTimeoutResult'] = None,
                 uid_configuration: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorUidConfigurationResult'] = None,
                 validate_entity_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorValidateEntityTagResult'] = None,
                 verify_json_web_token: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenResult'] = None,
                 verify_json_web_token_for_dcp: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenForDcpResult'] = None,
                 verify_token_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationResult'] = None,
                 virtual_waiting_room: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomResult'] = None,
                 virtual_waiting_room_with_edge_workers: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomWithEdgeWorkersResult'] = None,
                 visitor_prioritization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationResult'] = None,
                 visitor_prioritization_fifo: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoResult'] = None,
                 visitor_prioritization_fifo_standalone: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoStandaloneResult'] = None,
                 watermarking: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWatermarkingResult'] = None,
                 web_application_firewall: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallResult'] = None,
                 web_sockets: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebSocketsResult'] = None,
                 webdav: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebdavResult'] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ad_scaler_circuit_breaker=ad_scaler_circuit_breaker,
            adaptive_acceleration=adaptive_acceleration,
            adaptive_image_compression=adaptive_image_compression,
            advanced=advanced,
            aggregated_reporting=aggregated_reporting,
            akamaizer=akamaizer,
            akamaizer_tag=akamaizer_tag,
            all_http_in_cache_hierarchy=all_http_in_cache_hierarchy,
            allow_cloudlets_origins=allow_cloudlets_origins,
            allow_delete=allow_delete,
            allow_https_cache_key_sharing=allow_https_cache_key_sharing,
            allow_https_downgrade=allow_https_downgrade,
            allow_options=allow_options,
            allow_patch=allow_patch,
            allow_post=allow_post,
            allow_put=allow_put,
            allow_transfer_encoding=allow_transfer_encoding,
            alt_svc_header=alt_svc_header,
            api_prioritization=api_prioritization,
            application_load_balancer=application_load_balancer,
            audience_segmentation=audience_segmentation,
            auto_domain_validation=auto_domain_validation,
            base_directory=base_directory,
            boss_beaconing=boss_beaconing,
            breadcrumbs=breadcrumbs,
            break_connection=break_connection,
            brotli=brotli,
            cache_error=cache_error,
            cache_id=cache_id,
            cache_key_ignore_case=cache_key_ignore_case,
            cache_key_query_params=cache_key_query_params,
            cache_key_rewrite=cache_key_rewrite,
            cache_post=cache_post,
            cache_redirect=cache_redirect,
            cache_tag=cache_tag,
            cache_tag_visible=cache_tag_visible,
            caching=caching,
            central_authorization=central_authorization,
            chase_redirects=chase_redirects,
            client_characteristics=client_characteristics,
            cloud_interconnects=cloud_interconnects,
            cloud_wrapper=cloud_wrapper,
            cloud_wrapper_advanced=cloud_wrapper_advanced,
            conditional_origin=conditional_origin,
            construct_response=construct_response,
            content_characteristics=content_characteristics,
            content_characteristics_amd=content_characteristics_amd,
            content_characteristics_dd=content_characteristics_dd,
            content_characteristics_wsd_large_file=content_characteristics_wsd_large_file,
            content_characteristics_wsd_live=content_characteristics_wsd_live,
            content_characteristics_wsd_vod=content_characteristics_wsd_vod,
            content_pre_position=content_pre_position,
            content_targeting_protection=content_targeting_protection,
            cors_support=cors_support,
            cp_code=cp_code,
            custom_behavior=custom_behavior,
            datastream=datastream,
            dcp=dcp,
            dcp_auth_hmac_transformation=dcp_auth_hmac_transformation,
            dcp_auth_regex_transformation=dcp_auth_regex_transformation,
            dcp_auth_substring_transformation=dcp_auth_substring_transformation,
            dcp_auth_variable_extractor=dcp_auth_variable_extractor,
            dcp_default_authz_groups=dcp_default_authz_groups,
            dcp_dev_relations=dcp_dev_relations,
            dcp_real_time_auth=dcp_real_time_auth,
            delivery_receipt=delivery_receipt,
            deny_access=deny_access,
            deny_direct_failover_access=deny_direct_failover_access,
            device_characteristic_cache_id=device_characteristic_cache_id,
            device_characteristic_header=device_characteristic_header,
            dns_async_refresh=dns_async_refresh,
            dns_prefresh=dns_prefresh,
            downgrade_protocol=downgrade_protocol,
            download_complete_marker=download_complete_marker,
            download_notification=download_notification,
            downstream_cache=downstream_cache,
            dynamic_throughtput_optimization=dynamic_throughtput_optimization,
            dynamic_throughtput_optimization_override=dynamic_throughtput_optimization_override,
            dynamic_web_content=dynamic_web_content,
            ecms_bulk_upload=ecms_bulk_upload,
            ecms_database=ecms_database,
            ecms_dataset=ecms_dataset,
            ecms_object_key=ecms_object_key,
            edge_connect=edge_connect,
            edge_load_balancing_advanced=edge_load_balancing_advanced,
            edge_load_balancing_data_center=edge_load_balancing_data_center,
            edge_load_balancing_origin=edge_load_balancing_origin,
            edge_origin_authorization=edge_origin_authorization,
            edge_redirector=edge_redirector,
            edge_scape=edge_scape,
            edge_side_includes=edge_side_includes,
            edge_worker=edge_worker,
            enhanced_akamai_protocol=enhanced_akamai_protocol,
            enhanced_proxy_detection=enhanced_proxy_detection,
            epd_forward_header_enrichment=epd_forward_header_enrichment,
            fail_action=fail_action,
            failover_bot_manager_feature_compatibility=failover_bot_manager_feature_compatibility,
            fast_invalidate=fast_invalidate,
            first_party_marketing=first_party_marketing,
            first_party_marketing_plus=first_party_marketing_plus,
            forward_rewrite=forward_rewrite,
            front_end_optimization=front_end_optimization,
            g2oheader=g2oheader,
            global_request_number=global_request_number,
            graphql_caching=graphql_caching,
            gzip_response=gzip_response,
            hd_data_advanced=hd_data_advanced,
            health_detection=health_detection,
            hsaf_eip_binding=hsaf_eip_binding,
            http2=http2,
            http3=http3,
            http_strict_transport_security=http_strict_transport_security,
            http_to_https_upgrade=http_to_https_upgrade,
            im_override=im_override,
            image_and_video_manager=image_and_video_manager,
            image_manager=image_manager,
            image_manager_video=image_manager_video,
            include=include,
            input_validation=input_validation,
            instant=instant,
            instant_config=instant_config,
            large_file_optimization=large_file_optimization,
            large_file_optimization_advanced=large_file_optimization_advanced,
            limit_bit_rate=limit_bit_rate,
            log_custom=log_custom,
            m_pulse=m_pulse,
            manifest_personalization=manifest_personalization,
            manifest_rerouting=manifest_rerouting,
            manual_server_push=manual_server_push,
            media_acceleration=media_acceleration,
            media_acceleration_quic_optout=media_acceleration_quic_optout,
            media_client=media_client,
            media_file_retrieval_optimization=media_file_retrieval_optimization,
            media_origin_failover=media_origin_failover,
            metadata_caching=metadata_caching,
            mobile_sdk_performance=mobile_sdk_performance,
            modify_incoming_request_header=modify_incoming_request_header,
            modify_incoming_response_header=modify_incoming_response_header,
            modify_outgoing_request_header=modify_outgoing_request_header,
            modify_outgoing_response_header=modify_outgoing_response_header,
            modify_via_header=modify_via_header,
            origin=origin,
            origin_characteristics=origin_characteristics,
            origin_characteristics_wsd=origin_characteristics_wsd,
            origin_failure_recovery_method=origin_failure_recovery_method,
            origin_failure_recovery_policy=origin_failure_recovery_policy,
            origin_ip_acl=origin_ip_acl,
            persistent_client_connection=persistent_client_connection,
            persistent_connection=persistent_connection,
            personally_identifiable_information=personally_identifiable_information,
            phased_release=phased_release,
            preconnect=preconnect,
            predictive_content_delivery=predictive_content_delivery,
            predictive_prefetching=predictive_prefetching,
            prefetch=prefetch,
            prefetchable=prefetchable,
            prefresh_cache=prefresh_cache,
            quality=quality,
            quic_beta=quic_beta,
            random_seek=random_seek,
            rapid=rapid,
            read_timeout=read_timeout,
            real_time_reporting=real_time_reporting,
            real_user_monitoring=real_user_monitoring,
            redirect=redirect,
            redirectplus=redirectplus,
            referer_checking=referer_checking,
            remove_query_parameter=remove_query_parameter,
            remove_vary=remove_vary,
            report=report,
            request_control=request_control,
            request_type_marker=request_type_marker,
            resource_optimizer=resource_optimizer,
            resource_optimizer_extended_compatibility=resource_optimizer_extended_compatibility,
            response_code=response_code,
            response_cookie=response_cookie,
            restrict_object_caching=restrict_object_caching,
            return_cache_status=return_cache_status,
            rewrite_url=rewrite_url,
            rum_custom=rum_custom,
            saas_definitions=saas_definitions,
            sales_force_commerce_cloud_client=sales_force_commerce_cloud_client,
            sales_force_commerce_cloud_provider=sales_force_commerce_cloud_provider,
            sales_force_commerce_cloud_provider_host_header=sales_force_commerce_cloud_provider_host_header,
            save_post_dca_processing=save_post_dca_processing,
            schedule_invalidation=schedule_invalidation,
            script_management=script_management,
            segmented_content_protection=segmented_content_protection,
            segmented_media_optimization=segmented_media_optimization,
            segmented_media_streaming_prefetch=segmented_media_streaming_prefetch,
            set_variable=set_variable,
            shutr=shutr,
            simulate_error_code=simulate_error_code,
            site_shield=site_shield,
            standard_tls_migration=standard_tls_migration,
            standard_tls_migration_override=standard_tls_migration_override,
            strict_header_parsing=strict_header_parsing,
            sub_customer=sub_customer,
            sure_route=sure_route,
            tcp_optimization=tcp_optimization,
            tea_leaf=tea_leaf,
            tiered_distribution=tiered_distribution,
            tiered_distribution_advanced=tiered_distribution_advanced,
            tiered_distribution_customization=tiered_distribution_customization,
            timeout=timeout,
            uid_configuration=uid_configuration,
            validate_entity_tag=validate_entity_tag,
            verify_json_web_token=verify_json_web_token,
            verify_json_web_token_for_dcp=verify_json_web_token_for_dcp,
            verify_token_authorization=verify_token_authorization,
            virtual_waiting_room=virtual_waiting_room,
            virtual_waiting_room_with_edge_workers=virtual_waiting_room_with_edge_workers,
            visitor_prioritization=visitor_prioritization,
            visitor_prioritization_fifo=visitor_prioritization_fifo,
            visitor_prioritization_fifo_standalone=visitor_prioritization_fifo_standalone,
            watermarking=watermarking,
            web_application_firewall=web_application_firewall,
            web_sockets=web_sockets,
            webdav=webdav,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ad_scaler_circuit_breaker: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdScalerCircuitBreakerResult'] = None,
             adaptive_acceleration: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveAccelerationResult'] = None,
             adaptive_image_compression: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveImageCompressionResult'] = None,
             advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdvancedResult'] = None,
             aggregated_reporting: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAggregatedReportingResult'] = None,
             akamaizer: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerResult'] = None,
             akamaizer_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagResult'] = None,
             all_http_in_cache_hierarchy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllHttpInCacheHierarchyResult'] = None,
             allow_cloudlets_origins: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowCloudletsOriginsResult'] = None,
             allow_delete: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowDeleteResult'] = None,
             allow_https_cache_key_sharing: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsCacheKeySharingResult'] = None,
             allow_https_downgrade: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsDowngradeResult'] = None,
             allow_options: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowOptionsResult'] = None,
             allow_patch: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPatchResult'] = None,
             allow_post: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPostResult'] = None,
             allow_put: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPutResult'] = None,
             allow_transfer_encoding: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowTransferEncodingResult'] = None,
             alt_svc_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAltSvcHeaderResult'] = None,
             api_prioritization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationResult'] = None,
             application_load_balancer: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerResult'] = None,
             audience_segmentation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationResult'] = None,
             auto_domain_validation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAutoDomainValidationResult'] = None,
             base_directory: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBaseDirectoryResult'] = None,
             boss_beaconing: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBossBeaconingResult'] = None,
             breadcrumbs: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBreadcrumbsResult'] = None,
             break_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBreakConnectionResult'] = None,
             brotli: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBrotliResult'] = None,
             cache_error: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheErrorResult'] = None,
             cache_id: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheIdResult'] = None,
             cache_key_ignore_case: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyIgnoreCaseResult'] = None,
             cache_key_query_params: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyQueryParamsResult'] = None,
             cache_key_rewrite: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyRewriteResult'] = None,
             cache_post: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCachePostResult'] = None,
             cache_redirect: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheRedirectResult'] = None,
             cache_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagResult'] = None,
             cache_tag_visible: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagVisibleResult'] = None,
             caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCachingResult'] = None,
             central_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCentralAuthorizationResult'] = None,
             chase_redirects: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorChaseRedirectsResult'] = None,
             client_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorClientCharacteristicsResult'] = None,
             cloud_interconnects: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudInterconnectsResult'] = None,
             cloud_wrapper: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperResult'] = None,
             cloud_wrapper_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperAdvancedResult'] = None,
             conditional_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorConditionalOriginResult'] = None,
             construct_response: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorConstructResponseResult'] = None,
             content_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsResult'] = None,
             content_characteristics_amd: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsAmdResult'] = None,
             content_characteristics_dd: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsDdResult'] = None,
             content_characteristics_wsd_large_file: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLargeFileResult'] = None,
             content_characteristics_wsd_live: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLiveResult'] = None,
             content_characteristics_wsd_vod: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdVodResult'] = None,
             content_pre_position: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentPrePositionResult'] = None,
             content_targeting_protection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentTargetingProtectionResult'] = None,
             cors_support: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCorsSupportResult'] = None,
             cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeResult'] = None,
             custom_behavior: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCustomBehaviorResult'] = None,
             datastream: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDatastreamResult'] = None,
             dcp: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpResult'] = None,
             dcp_auth_hmac_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthHmacTransformationResult'] = None,
             dcp_auth_regex_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthRegexTransformationResult'] = None,
             dcp_auth_substring_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthSubstringTransformationResult'] = None,
             dcp_auth_variable_extractor: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthVariableExtractorResult'] = None,
             dcp_default_authz_groups: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpDefaultAuthzGroupsResult'] = None,
             dcp_dev_relations: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpDevRelationsResult'] = None,
             dcp_real_time_auth: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpRealTimeAuthResult'] = None,
             delivery_receipt: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeliveryReceiptResult'] = None,
             deny_access: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDenyAccessResult'] = None,
             deny_direct_failover_access: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDenyDirectFailoverAccessResult'] = None,
             device_characteristic_cache_id: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicCacheIdResult'] = None,
             device_characteristic_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicHeaderResult'] = None,
             dns_async_refresh: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDnsAsyncRefreshResult'] = None,
             dns_prefresh: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDnsPrefreshResult'] = None,
             downgrade_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDowngradeProtocolResult'] = None,
             download_complete_marker: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownloadCompleteMarkerResult'] = None,
             download_notification: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownloadNotificationResult'] = None,
             downstream_cache: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownstreamCacheResult'] = None,
             dynamic_throughtput_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationResult'] = None,
             dynamic_throughtput_optimization_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationOverrideResult'] = None,
             dynamic_web_content: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicWebContentResult'] = None,
             ecms_bulk_upload: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsBulkUploadResult'] = None,
             ecms_database: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatabaseResult'] = None,
             ecms_dataset: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatasetResult'] = None,
             ecms_object_key: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsObjectKeyResult'] = None,
             edge_connect: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeConnectResult'] = None,
             edge_load_balancing_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingAdvancedResult'] = None,
             edge_load_balancing_data_center: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterResult'] = None,
             edge_load_balancing_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingOriginResult'] = None,
             edge_origin_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeOriginAuthorizationResult'] = None,
             edge_redirector: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorResult'] = None,
             edge_scape: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeScapeResult'] = None,
             edge_side_includes: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeSideIncludesResult'] = None,
             edge_worker: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeWorkerResult'] = None,
             enhanced_akamai_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedAkamaiProtocolResult'] = None,
             enhanced_proxy_detection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedProxyDetectionResult'] = None,
             epd_forward_header_enrichment: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEpdForwardHeaderEnrichmentResult'] = None,
             fail_action: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionResult'] = None,
             failover_bot_manager_feature_compatibility: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailoverBotManagerFeatureCompatibilityResult'] = None,
             fast_invalidate: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFastInvalidateResult'] = None,
             first_party_marketing: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingResult'] = None,
             first_party_marketing_plus: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusResult'] = None,
             forward_rewrite: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteResult'] = None,
             front_end_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFrontEndOptimizationResult'] = None,
             g2oheader: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorG2oheaderResult'] = None,
             global_request_number: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGlobalRequestNumberResult'] = None,
             graphql_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGraphqlCachingResult'] = None,
             gzip_response: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGzipResponseResult'] = None,
             hd_data_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHdDataAdvancedResult'] = None,
             health_detection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHealthDetectionResult'] = None,
             hsaf_eip_binding: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHsafEipBindingResult'] = None,
             http2: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttp2Result'] = None,
             http3: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttp3Result'] = None,
             http_strict_transport_security: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttpStrictTransportSecurityResult'] = None,
             http_to_https_upgrade: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttpToHttpsUpgradeResult'] = None,
             im_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImOverrideResult'] = None,
             image_and_video_manager: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerResult'] = None,
             image_manager: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerResult'] = None,
             image_manager_video: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoResult'] = None,
             include: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorIncludeResult'] = None,
             input_validation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationResult'] = None,
             instant: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInstantResult'] = None,
             instant_config: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInstantConfigResult'] = None,
             large_file_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationResult'] = None,
             large_file_optimization_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationAdvancedResult'] = None,
             limit_bit_rate: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateResult'] = None,
             log_custom: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLogCustomResult'] = None,
             m_pulse: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMPulseResult'] = None,
             manifest_personalization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManifestPersonalizationResult'] = None,
             manifest_rerouting: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManifestReroutingResult'] = None,
             manual_server_push: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManualServerPushResult'] = None,
             media_acceleration: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationResult'] = None,
             media_acceleration_quic_optout: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationQuicOptoutResult'] = None,
             media_client: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaClientResult'] = None,
             media_file_retrieval_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaFileRetrievalOptimizationResult'] = None,
             media_origin_failover: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaOriginFailoverResult'] = None,
             metadata_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMetadataCachingResult'] = None,
             mobile_sdk_performance: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMobileSdkPerformanceResult'] = None,
             modify_incoming_request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingRequestHeaderResult'] = None,
             modify_incoming_response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingResponseHeaderResult'] = None,
             modify_outgoing_request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingRequestHeaderResult'] = None,
             modify_outgoing_response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingResponseHeaderResult'] = None,
             modify_via_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyViaHeaderResult'] = None,
             origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginResult'] = None,
             origin_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsResult'] = None,
             origin_characteristics_wsd: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsWsdResult'] = None,
             origin_failure_recovery_method: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryMethodResult'] = None,
             origin_failure_recovery_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryPolicyResult'] = None,
             origin_ip_acl: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginIpAclResult'] = None,
             persistent_client_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersistentClientConnectionResult'] = None,
             persistent_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersistentConnectionResult'] = None,
             personally_identifiable_information: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersonallyIdentifiableInformationResult'] = None,
             phased_release: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseResult'] = None,
             preconnect: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPreconnectResult'] = None,
             predictive_content_delivery: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPredictiveContentDeliveryResult'] = None,
             predictive_prefetching: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPredictivePrefetchingResult'] = None,
             prefetch: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchResult'] = None,
             prefetchable: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchableResult'] = None,
             prefresh_cache: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefreshCacheResult'] = None,
             quality: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorQualityResult'] = None,
             quic_beta: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorQuicBetaResult'] = None,
             random_seek: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRandomSeekResult'] = None,
             rapid: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRapidResult'] = None,
             read_timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReadTimeoutResult'] = None,
             real_time_reporting: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRealTimeReportingResult'] = None,
             real_user_monitoring: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRealUserMonitoringResult'] = None,
             redirect: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRedirectResult'] = None,
             redirectplus: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRedirectplusResult'] = None,
             referer_checking: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRefererCheckingResult'] = None,
             remove_query_parameter: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRemoveQueryParameterResult'] = None,
             remove_vary: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRemoveVaryResult'] = None,
             report: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReportResult'] = None,
             request_control: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlResult'] = None,
             request_type_marker: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestTypeMarkerResult'] = None,
             resource_optimizer: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerResult'] = None,
             resource_optimizer_extended_compatibility: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerExtendedCompatibilityResult'] = None,
             response_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResponseCodeResult'] = None,
             response_cookie: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResponseCookieResult'] = None,
             restrict_object_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRestrictObjectCachingResult'] = None,
             return_cache_status: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReturnCacheStatusResult'] = None,
             rewrite_url: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRewriteUrlResult'] = None,
             rum_custom: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRumCustomResult'] = None,
             saas_definitions: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSaasDefinitionsResult'] = None,
             sales_force_commerce_cloud_client: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudClientResult'] = None,
             sales_force_commerce_cloud_provider: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderResult'] = None,
             sales_force_commerce_cloud_provider_host_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderHostHeaderResult'] = None,
             save_post_dca_processing: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSavePostDcaProcessingResult'] = None,
             schedule_invalidation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorScheduleInvalidationResult'] = None,
             script_management: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorScriptManagementResult'] = None,
             segmented_content_protection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedContentProtectionResult'] = None,
             segmented_media_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaOptimizationResult'] = None,
             segmented_media_streaming_prefetch: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaStreamingPrefetchResult'] = None,
             set_variable: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSetVariableResult'] = None,
             shutr: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorShutrResult'] = None,
             simulate_error_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSimulateErrorCodeResult'] = None,
             site_shield: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldResult'] = None,
             standard_tls_migration: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationResult'] = None,
             standard_tls_migration_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationOverrideResult'] = None,
             strict_header_parsing: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStrictHeaderParsingResult'] = None,
             sub_customer: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSubCustomerResult'] = None,
             sure_route: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSureRouteResult'] = None,
             tcp_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTcpOptimizationResult'] = None,
             tea_leaf: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTeaLeafResult'] = None,
             tiered_distribution: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionResult'] = None,
             tiered_distribution_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionAdvancedResult'] = None,
             tiered_distribution_customization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionCustomizationResult'] = None,
             timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTimeoutResult'] = None,
             uid_configuration: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorUidConfigurationResult'] = None,
             validate_entity_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorValidateEntityTagResult'] = None,
             verify_json_web_token: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenResult'] = None,
             verify_json_web_token_for_dcp: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenForDcpResult'] = None,
             verify_token_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationResult'] = None,
             virtual_waiting_room: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomResult'] = None,
             virtual_waiting_room_with_edge_workers: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomWithEdgeWorkersResult'] = None,
             visitor_prioritization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationResult'] = None,
             visitor_prioritization_fifo: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoResult'] = None,
             visitor_prioritization_fifo_standalone: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoStandaloneResult'] = None,
             watermarking: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWatermarkingResult'] = None,
             web_application_firewall: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallResult'] = None,
             web_sockets: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebSocketsResult'] = None,
             webdav: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebdavResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'adScalerCircuitBreaker' in kwargs:
            ad_scaler_circuit_breaker = kwargs['adScalerCircuitBreaker']
        if 'adaptiveAcceleration' in kwargs:
            adaptive_acceleration = kwargs['adaptiveAcceleration']
        if 'adaptiveImageCompression' in kwargs:
            adaptive_image_compression = kwargs['adaptiveImageCompression']
        if 'aggregatedReporting' in kwargs:
            aggregated_reporting = kwargs['aggregatedReporting']
        if 'akamaizerTag' in kwargs:
            akamaizer_tag = kwargs['akamaizerTag']
        if 'allHttpInCacheHierarchy' in kwargs:
            all_http_in_cache_hierarchy = kwargs['allHttpInCacheHierarchy']
        if 'allowCloudletsOrigins' in kwargs:
            allow_cloudlets_origins = kwargs['allowCloudletsOrigins']
        if 'allowDelete' in kwargs:
            allow_delete = kwargs['allowDelete']
        if 'allowHttpsCacheKeySharing' in kwargs:
            allow_https_cache_key_sharing = kwargs['allowHttpsCacheKeySharing']
        if 'allowHttpsDowngrade' in kwargs:
            allow_https_downgrade = kwargs['allowHttpsDowngrade']
        if 'allowOptions' in kwargs:
            allow_options = kwargs['allowOptions']
        if 'allowPatch' in kwargs:
            allow_patch = kwargs['allowPatch']
        if 'allowPost' in kwargs:
            allow_post = kwargs['allowPost']
        if 'allowPut' in kwargs:
            allow_put = kwargs['allowPut']
        if 'allowTransferEncoding' in kwargs:
            allow_transfer_encoding = kwargs['allowTransferEncoding']
        if 'altSvcHeader' in kwargs:
            alt_svc_header = kwargs['altSvcHeader']
        if 'apiPrioritization' in kwargs:
            api_prioritization = kwargs['apiPrioritization']
        if 'applicationLoadBalancer' in kwargs:
            application_load_balancer = kwargs['applicationLoadBalancer']
        if 'audienceSegmentation' in kwargs:
            audience_segmentation = kwargs['audienceSegmentation']
        if 'autoDomainValidation' in kwargs:
            auto_domain_validation = kwargs['autoDomainValidation']
        if 'baseDirectory' in kwargs:
            base_directory = kwargs['baseDirectory']
        if 'bossBeaconing' in kwargs:
            boss_beaconing = kwargs['bossBeaconing']
        if 'breakConnection' in kwargs:
            break_connection = kwargs['breakConnection']
        if 'cacheError' in kwargs:
            cache_error = kwargs['cacheError']
        if 'cacheId' in kwargs:
            cache_id = kwargs['cacheId']
        if 'cacheKeyIgnoreCase' in kwargs:
            cache_key_ignore_case = kwargs['cacheKeyIgnoreCase']
        if 'cacheKeyQueryParams' in kwargs:
            cache_key_query_params = kwargs['cacheKeyQueryParams']
        if 'cacheKeyRewrite' in kwargs:
            cache_key_rewrite = kwargs['cacheKeyRewrite']
        if 'cachePost' in kwargs:
            cache_post = kwargs['cachePost']
        if 'cacheRedirect' in kwargs:
            cache_redirect = kwargs['cacheRedirect']
        if 'cacheTag' in kwargs:
            cache_tag = kwargs['cacheTag']
        if 'cacheTagVisible' in kwargs:
            cache_tag_visible = kwargs['cacheTagVisible']
        if 'centralAuthorization' in kwargs:
            central_authorization = kwargs['centralAuthorization']
        if 'chaseRedirects' in kwargs:
            chase_redirects = kwargs['chaseRedirects']
        if 'clientCharacteristics' in kwargs:
            client_characteristics = kwargs['clientCharacteristics']
        if 'cloudInterconnects' in kwargs:
            cloud_interconnects = kwargs['cloudInterconnects']
        if 'cloudWrapper' in kwargs:
            cloud_wrapper = kwargs['cloudWrapper']
        if 'cloudWrapperAdvanced' in kwargs:
            cloud_wrapper_advanced = kwargs['cloudWrapperAdvanced']
        if 'conditionalOrigin' in kwargs:
            conditional_origin = kwargs['conditionalOrigin']
        if 'constructResponse' in kwargs:
            construct_response = kwargs['constructResponse']
        if 'contentCharacteristics' in kwargs:
            content_characteristics = kwargs['contentCharacteristics']
        if 'contentCharacteristicsAmd' in kwargs:
            content_characteristics_amd = kwargs['contentCharacteristicsAmd']
        if 'contentCharacteristicsDd' in kwargs:
            content_characteristics_dd = kwargs['contentCharacteristicsDd']
        if 'contentCharacteristicsWsdLargeFile' in kwargs:
            content_characteristics_wsd_large_file = kwargs['contentCharacteristicsWsdLargeFile']
        if 'contentCharacteristicsWsdLive' in kwargs:
            content_characteristics_wsd_live = kwargs['contentCharacteristicsWsdLive']
        if 'contentCharacteristicsWsdVod' in kwargs:
            content_characteristics_wsd_vod = kwargs['contentCharacteristicsWsdVod']
        if 'contentPrePosition' in kwargs:
            content_pre_position = kwargs['contentPrePosition']
        if 'contentTargetingProtection' in kwargs:
            content_targeting_protection = kwargs['contentTargetingProtection']
        if 'corsSupport' in kwargs:
            cors_support = kwargs['corsSupport']
        if 'cpCode' in kwargs:
            cp_code = kwargs['cpCode']
        if 'customBehavior' in kwargs:
            custom_behavior = kwargs['customBehavior']
        if 'dcpAuthHmacTransformation' in kwargs:
            dcp_auth_hmac_transformation = kwargs['dcpAuthHmacTransformation']
        if 'dcpAuthRegexTransformation' in kwargs:
            dcp_auth_regex_transformation = kwargs['dcpAuthRegexTransformation']
        if 'dcpAuthSubstringTransformation' in kwargs:
            dcp_auth_substring_transformation = kwargs['dcpAuthSubstringTransformation']
        if 'dcpAuthVariableExtractor' in kwargs:
            dcp_auth_variable_extractor = kwargs['dcpAuthVariableExtractor']
        if 'dcpDefaultAuthzGroups' in kwargs:
            dcp_default_authz_groups = kwargs['dcpDefaultAuthzGroups']
        if 'dcpDevRelations' in kwargs:
            dcp_dev_relations = kwargs['dcpDevRelations']
        if 'dcpRealTimeAuth' in kwargs:
            dcp_real_time_auth = kwargs['dcpRealTimeAuth']
        if 'deliveryReceipt' in kwargs:
            delivery_receipt = kwargs['deliveryReceipt']
        if 'denyAccess' in kwargs:
            deny_access = kwargs['denyAccess']
        if 'denyDirectFailoverAccess' in kwargs:
            deny_direct_failover_access = kwargs['denyDirectFailoverAccess']
        if 'deviceCharacteristicCacheId' in kwargs:
            device_characteristic_cache_id = kwargs['deviceCharacteristicCacheId']
        if 'deviceCharacteristicHeader' in kwargs:
            device_characteristic_header = kwargs['deviceCharacteristicHeader']
        if 'dnsAsyncRefresh' in kwargs:
            dns_async_refresh = kwargs['dnsAsyncRefresh']
        if 'dnsPrefresh' in kwargs:
            dns_prefresh = kwargs['dnsPrefresh']
        if 'downgradeProtocol' in kwargs:
            downgrade_protocol = kwargs['downgradeProtocol']
        if 'downloadCompleteMarker' in kwargs:
            download_complete_marker = kwargs['downloadCompleteMarker']
        if 'downloadNotification' in kwargs:
            download_notification = kwargs['downloadNotification']
        if 'downstreamCache' in kwargs:
            downstream_cache = kwargs['downstreamCache']
        if 'dynamicThroughtputOptimization' in kwargs:
            dynamic_throughtput_optimization = kwargs['dynamicThroughtputOptimization']
        if 'dynamicThroughtputOptimizationOverride' in kwargs:
            dynamic_throughtput_optimization_override = kwargs['dynamicThroughtputOptimizationOverride']
        if 'dynamicWebContent' in kwargs:
            dynamic_web_content = kwargs['dynamicWebContent']
        if 'ecmsBulkUpload' in kwargs:
            ecms_bulk_upload = kwargs['ecmsBulkUpload']
        if 'ecmsDatabase' in kwargs:
            ecms_database = kwargs['ecmsDatabase']
        if 'ecmsDataset' in kwargs:
            ecms_dataset = kwargs['ecmsDataset']
        if 'ecmsObjectKey' in kwargs:
            ecms_object_key = kwargs['ecmsObjectKey']
        if 'edgeConnect' in kwargs:
            edge_connect = kwargs['edgeConnect']
        if 'edgeLoadBalancingAdvanced' in kwargs:
            edge_load_balancing_advanced = kwargs['edgeLoadBalancingAdvanced']
        if 'edgeLoadBalancingDataCenter' in kwargs:
            edge_load_balancing_data_center = kwargs['edgeLoadBalancingDataCenter']
        if 'edgeLoadBalancingOrigin' in kwargs:
            edge_load_balancing_origin = kwargs['edgeLoadBalancingOrigin']
        if 'edgeOriginAuthorization' in kwargs:
            edge_origin_authorization = kwargs['edgeOriginAuthorization']
        if 'edgeRedirector' in kwargs:
            edge_redirector = kwargs['edgeRedirector']
        if 'edgeScape' in kwargs:
            edge_scape = kwargs['edgeScape']
        if 'edgeSideIncludes' in kwargs:
            edge_side_includes = kwargs['edgeSideIncludes']
        if 'edgeWorker' in kwargs:
            edge_worker = kwargs['edgeWorker']
        if 'enhancedAkamaiProtocol' in kwargs:
            enhanced_akamai_protocol = kwargs['enhancedAkamaiProtocol']
        if 'enhancedProxyDetection' in kwargs:
            enhanced_proxy_detection = kwargs['enhancedProxyDetection']
        if 'epdForwardHeaderEnrichment' in kwargs:
            epd_forward_header_enrichment = kwargs['epdForwardHeaderEnrichment']
        if 'failAction' in kwargs:
            fail_action = kwargs['failAction']
        if 'failoverBotManagerFeatureCompatibility' in kwargs:
            failover_bot_manager_feature_compatibility = kwargs['failoverBotManagerFeatureCompatibility']
        if 'fastInvalidate' in kwargs:
            fast_invalidate = kwargs['fastInvalidate']
        if 'firstPartyMarketing' in kwargs:
            first_party_marketing = kwargs['firstPartyMarketing']
        if 'firstPartyMarketingPlus' in kwargs:
            first_party_marketing_plus = kwargs['firstPartyMarketingPlus']
        if 'forwardRewrite' in kwargs:
            forward_rewrite = kwargs['forwardRewrite']
        if 'frontEndOptimization' in kwargs:
            front_end_optimization = kwargs['frontEndOptimization']
        if 'globalRequestNumber' in kwargs:
            global_request_number = kwargs['globalRequestNumber']
        if 'graphqlCaching' in kwargs:
            graphql_caching = kwargs['graphqlCaching']
        if 'gzipResponse' in kwargs:
            gzip_response = kwargs['gzipResponse']
        if 'hdDataAdvanced' in kwargs:
            hd_data_advanced = kwargs['hdDataAdvanced']
        if 'healthDetection' in kwargs:
            health_detection = kwargs['healthDetection']
        if 'hsafEipBinding' in kwargs:
            hsaf_eip_binding = kwargs['hsafEipBinding']
        if 'httpStrictTransportSecurity' in kwargs:
            http_strict_transport_security = kwargs['httpStrictTransportSecurity']
        if 'httpToHttpsUpgrade' in kwargs:
            http_to_https_upgrade = kwargs['httpToHttpsUpgrade']
        if 'imOverride' in kwargs:
            im_override = kwargs['imOverride']
        if 'imageAndVideoManager' in kwargs:
            image_and_video_manager = kwargs['imageAndVideoManager']
        if 'imageManager' in kwargs:
            image_manager = kwargs['imageManager']
        if 'imageManagerVideo' in kwargs:
            image_manager_video = kwargs['imageManagerVideo']
        if 'inputValidation' in kwargs:
            input_validation = kwargs['inputValidation']
        if 'instantConfig' in kwargs:
            instant_config = kwargs['instantConfig']
        if 'largeFileOptimization' in kwargs:
            large_file_optimization = kwargs['largeFileOptimization']
        if 'largeFileOptimizationAdvanced' in kwargs:
            large_file_optimization_advanced = kwargs['largeFileOptimizationAdvanced']
        if 'limitBitRate' in kwargs:
            limit_bit_rate = kwargs['limitBitRate']
        if 'logCustom' in kwargs:
            log_custom = kwargs['logCustom']
        if 'mPulse' in kwargs:
            m_pulse = kwargs['mPulse']
        if 'manifestPersonalization' in kwargs:
            manifest_personalization = kwargs['manifestPersonalization']
        if 'manifestRerouting' in kwargs:
            manifest_rerouting = kwargs['manifestRerouting']
        if 'manualServerPush' in kwargs:
            manual_server_push = kwargs['manualServerPush']
        if 'mediaAcceleration' in kwargs:
            media_acceleration = kwargs['mediaAcceleration']
        if 'mediaAccelerationQuicOptout' in kwargs:
            media_acceleration_quic_optout = kwargs['mediaAccelerationQuicOptout']
        if 'mediaClient' in kwargs:
            media_client = kwargs['mediaClient']
        if 'mediaFileRetrievalOptimization' in kwargs:
            media_file_retrieval_optimization = kwargs['mediaFileRetrievalOptimization']
        if 'mediaOriginFailover' in kwargs:
            media_origin_failover = kwargs['mediaOriginFailover']
        if 'metadataCaching' in kwargs:
            metadata_caching = kwargs['metadataCaching']
        if 'mobileSdkPerformance' in kwargs:
            mobile_sdk_performance = kwargs['mobileSdkPerformance']
        if 'modifyIncomingRequestHeader' in kwargs:
            modify_incoming_request_header = kwargs['modifyIncomingRequestHeader']
        if 'modifyIncomingResponseHeader' in kwargs:
            modify_incoming_response_header = kwargs['modifyIncomingResponseHeader']
        if 'modifyOutgoingRequestHeader' in kwargs:
            modify_outgoing_request_header = kwargs['modifyOutgoingRequestHeader']
        if 'modifyOutgoingResponseHeader' in kwargs:
            modify_outgoing_response_header = kwargs['modifyOutgoingResponseHeader']
        if 'modifyViaHeader' in kwargs:
            modify_via_header = kwargs['modifyViaHeader']
        if 'originCharacteristics' in kwargs:
            origin_characteristics = kwargs['originCharacteristics']
        if 'originCharacteristicsWsd' in kwargs:
            origin_characteristics_wsd = kwargs['originCharacteristicsWsd']
        if 'originFailureRecoveryMethod' in kwargs:
            origin_failure_recovery_method = kwargs['originFailureRecoveryMethod']
        if 'originFailureRecoveryPolicy' in kwargs:
            origin_failure_recovery_policy = kwargs['originFailureRecoveryPolicy']
        if 'originIpAcl' in kwargs:
            origin_ip_acl = kwargs['originIpAcl']
        if 'persistentClientConnection' in kwargs:
            persistent_client_connection = kwargs['persistentClientConnection']
        if 'persistentConnection' in kwargs:
            persistent_connection = kwargs['persistentConnection']
        if 'personallyIdentifiableInformation' in kwargs:
            personally_identifiable_information = kwargs['personallyIdentifiableInformation']
        if 'phasedRelease' in kwargs:
            phased_release = kwargs['phasedRelease']
        if 'predictiveContentDelivery' in kwargs:
            predictive_content_delivery = kwargs['predictiveContentDelivery']
        if 'predictivePrefetching' in kwargs:
            predictive_prefetching = kwargs['predictivePrefetching']
        if 'prefreshCache' in kwargs:
            prefresh_cache = kwargs['prefreshCache']
        if 'quicBeta' in kwargs:
            quic_beta = kwargs['quicBeta']
        if 'randomSeek' in kwargs:
            random_seek = kwargs['randomSeek']
        if 'readTimeout' in kwargs:
            read_timeout = kwargs['readTimeout']
        if 'realTimeReporting' in kwargs:
            real_time_reporting = kwargs['realTimeReporting']
        if 'realUserMonitoring' in kwargs:
            real_user_monitoring = kwargs['realUserMonitoring']
        if 'refererChecking' in kwargs:
            referer_checking = kwargs['refererChecking']
        if 'removeQueryParameter' in kwargs:
            remove_query_parameter = kwargs['removeQueryParameter']
        if 'removeVary' in kwargs:
            remove_vary = kwargs['removeVary']
        if 'requestControl' in kwargs:
            request_control = kwargs['requestControl']
        if 'requestTypeMarker' in kwargs:
            request_type_marker = kwargs['requestTypeMarker']
        if 'resourceOptimizer' in kwargs:
            resource_optimizer = kwargs['resourceOptimizer']
        if 'resourceOptimizerExtendedCompatibility' in kwargs:
            resource_optimizer_extended_compatibility = kwargs['resourceOptimizerExtendedCompatibility']
        if 'responseCode' in kwargs:
            response_code = kwargs['responseCode']
        if 'responseCookie' in kwargs:
            response_cookie = kwargs['responseCookie']
        if 'restrictObjectCaching' in kwargs:
            restrict_object_caching = kwargs['restrictObjectCaching']
        if 'returnCacheStatus' in kwargs:
            return_cache_status = kwargs['returnCacheStatus']
        if 'rewriteUrl' in kwargs:
            rewrite_url = kwargs['rewriteUrl']
        if 'rumCustom' in kwargs:
            rum_custom = kwargs['rumCustom']
        if 'saasDefinitions' in kwargs:
            saas_definitions = kwargs['saasDefinitions']
        if 'salesForceCommerceCloudClient' in kwargs:
            sales_force_commerce_cloud_client = kwargs['salesForceCommerceCloudClient']
        if 'salesForceCommerceCloudProvider' in kwargs:
            sales_force_commerce_cloud_provider = kwargs['salesForceCommerceCloudProvider']
        if 'salesForceCommerceCloudProviderHostHeader' in kwargs:
            sales_force_commerce_cloud_provider_host_header = kwargs['salesForceCommerceCloudProviderHostHeader']
        if 'savePostDcaProcessing' in kwargs:
            save_post_dca_processing = kwargs['savePostDcaProcessing']
        if 'scheduleInvalidation' in kwargs:
            schedule_invalidation = kwargs['scheduleInvalidation']
        if 'scriptManagement' in kwargs:
            script_management = kwargs['scriptManagement']
        if 'segmentedContentProtection' in kwargs:
            segmented_content_protection = kwargs['segmentedContentProtection']
        if 'segmentedMediaOptimization' in kwargs:
            segmented_media_optimization = kwargs['segmentedMediaOptimization']
        if 'segmentedMediaStreamingPrefetch' in kwargs:
            segmented_media_streaming_prefetch = kwargs['segmentedMediaStreamingPrefetch']
        if 'setVariable' in kwargs:
            set_variable = kwargs['setVariable']
        if 'simulateErrorCode' in kwargs:
            simulate_error_code = kwargs['simulateErrorCode']
        if 'siteShield' in kwargs:
            site_shield = kwargs['siteShield']
        if 'standardTlsMigration' in kwargs:
            standard_tls_migration = kwargs['standardTlsMigration']
        if 'standardTlsMigrationOverride' in kwargs:
            standard_tls_migration_override = kwargs['standardTlsMigrationOverride']
        if 'strictHeaderParsing' in kwargs:
            strict_header_parsing = kwargs['strictHeaderParsing']
        if 'subCustomer' in kwargs:
            sub_customer = kwargs['subCustomer']
        if 'sureRoute' in kwargs:
            sure_route = kwargs['sureRoute']
        if 'tcpOptimization' in kwargs:
            tcp_optimization = kwargs['tcpOptimization']
        if 'teaLeaf' in kwargs:
            tea_leaf = kwargs['teaLeaf']
        if 'tieredDistribution' in kwargs:
            tiered_distribution = kwargs['tieredDistribution']
        if 'tieredDistributionAdvanced' in kwargs:
            tiered_distribution_advanced = kwargs['tieredDistributionAdvanced']
        if 'tieredDistributionCustomization' in kwargs:
            tiered_distribution_customization = kwargs['tieredDistributionCustomization']
        if 'uidConfiguration' in kwargs:
            uid_configuration = kwargs['uidConfiguration']
        if 'validateEntityTag' in kwargs:
            validate_entity_tag = kwargs['validateEntityTag']
        if 'verifyJsonWebToken' in kwargs:
            verify_json_web_token = kwargs['verifyJsonWebToken']
        if 'verifyJsonWebTokenForDcp' in kwargs:
            verify_json_web_token_for_dcp = kwargs['verifyJsonWebTokenForDcp']
        if 'verifyTokenAuthorization' in kwargs:
            verify_token_authorization = kwargs['verifyTokenAuthorization']
        if 'virtualWaitingRoom' in kwargs:
            virtual_waiting_room = kwargs['virtualWaitingRoom']
        if 'virtualWaitingRoomWithEdgeWorkers' in kwargs:
            virtual_waiting_room_with_edge_workers = kwargs['virtualWaitingRoomWithEdgeWorkers']
        if 'visitorPrioritization' in kwargs:
            visitor_prioritization = kwargs['visitorPrioritization']
        if 'visitorPrioritizationFifo' in kwargs:
            visitor_prioritization_fifo = kwargs['visitorPrioritizationFifo']
        if 'visitorPrioritizationFifoStandalone' in kwargs:
            visitor_prioritization_fifo_standalone = kwargs['visitorPrioritizationFifoStandalone']
        if 'webApplicationFirewall' in kwargs:
            web_application_firewall = kwargs['webApplicationFirewall']
        if 'webSockets' in kwargs:
            web_sockets = kwargs['webSockets']

        if ad_scaler_circuit_breaker is not None:
            _setter("ad_scaler_circuit_breaker", ad_scaler_circuit_breaker)
        if adaptive_acceleration is not None:
            _setter("adaptive_acceleration", adaptive_acceleration)
        if adaptive_image_compression is not None:
            _setter("adaptive_image_compression", adaptive_image_compression)
        if advanced is not None:
            _setter("advanced", advanced)
        if aggregated_reporting is not None:
            _setter("aggregated_reporting", aggregated_reporting)
        if akamaizer is not None:
            _setter("akamaizer", akamaizer)
        if akamaizer_tag is not None:
            _setter("akamaizer_tag", akamaizer_tag)
        if all_http_in_cache_hierarchy is not None:
            _setter("all_http_in_cache_hierarchy", all_http_in_cache_hierarchy)
        if allow_cloudlets_origins is not None:
            _setter("allow_cloudlets_origins", allow_cloudlets_origins)
        if allow_delete is not None:
            _setter("allow_delete", allow_delete)
        if allow_https_cache_key_sharing is not None:
            _setter("allow_https_cache_key_sharing", allow_https_cache_key_sharing)
        if allow_https_downgrade is not None:
            _setter("allow_https_downgrade", allow_https_downgrade)
        if allow_options is not None:
            _setter("allow_options", allow_options)
        if allow_patch is not None:
            _setter("allow_patch", allow_patch)
        if allow_post is not None:
            _setter("allow_post", allow_post)
        if allow_put is not None:
            _setter("allow_put", allow_put)
        if allow_transfer_encoding is not None:
            _setter("allow_transfer_encoding", allow_transfer_encoding)
        if alt_svc_header is not None:
            _setter("alt_svc_header", alt_svc_header)
        if api_prioritization is not None:
            _setter("api_prioritization", api_prioritization)
        if application_load_balancer is not None:
            _setter("application_load_balancer", application_load_balancer)
        if audience_segmentation is not None:
            _setter("audience_segmentation", audience_segmentation)
        if auto_domain_validation is not None:
            _setter("auto_domain_validation", auto_domain_validation)
        if base_directory is not None:
            _setter("base_directory", base_directory)
        if boss_beaconing is not None:
            _setter("boss_beaconing", boss_beaconing)
        if breadcrumbs is not None:
            _setter("breadcrumbs", breadcrumbs)
        if break_connection is not None:
            _setter("break_connection", break_connection)
        if brotli is not None:
            _setter("brotli", brotli)
        if cache_error is not None:
            _setter("cache_error", cache_error)
        if cache_id is not None:
            _setter("cache_id", cache_id)
        if cache_key_ignore_case is not None:
            _setter("cache_key_ignore_case", cache_key_ignore_case)
        if cache_key_query_params is not None:
            _setter("cache_key_query_params", cache_key_query_params)
        if cache_key_rewrite is not None:
            _setter("cache_key_rewrite", cache_key_rewrite)
        if cache_post is not None:
            _setter("cache_post", cache_post)
        if cache_redirect is not None:
            _setter("cache_redirect", cache_redirect)
        if cache_tag is not None:
            _setter("cache_tag", cache_tag)
        if cache_tag_visible is not None:
            _setter("cache_tag_visible", cache_tag_visible)
        if caching is not None:
            _setter("caching", caching)
        if central_authorization is not None:
            _setter("central_authorization", central_authorization)
        if chase_redirects is not None:
            _setter("chase_redirects", chase_redirects)
        if client_characteristics is not None:
            _setter("client_characteristics", client_characteristics)
        if cloud_interconnects is not None:
            _setter("cloud_interconnects", cloud_interconnects)
        if cloud_wrapper is not None:
            _setter("cloud_wrapper", cloud_wrapper)
        if cloud_wrapper_advanced is not None:
            _setter("cloud_wrapper_advanced", cloud_wrapper_advanced)
        if conditional_origin is not None:
            _setter("conditional_origin", conditional_origin)
        if construct_response is not None:
            _setter("construct_response", construct_response)
        if content_characteristics is not None:
            _setter("content_characteristics", content_characteristics)
        if content_characteristics_amd is not None:
            _setter("content_characteristics_amd", content_characteristics_amd)
        if content_characteristics_dd is not None:
            _setter("content_characteristics_dd", content_characteristics_dd)
        if content_characteristics_wsd_large_file is not None:
            _setter("content_characteristics_wsd_large_file", content_characteristics_wsd_large_file)
        if content_characteristics_wsd_live is not None:
            _setter("content_characteristics_wsd_live", content_characteristics_wsd_live)
        if content_characteristics_wsd_vod is not None:
            _setter("content_characteristics_wsd_vod", content_characteristics_wsd_vod)
        if content_pre_position is not None:
            _setter("content_pre_position", content_pre_position)
        if content_targeting_protection is not None:
            _setter("content_targeting_protection", content_targeting_protection)
        if cors_support is not None:
            _setter("cors_support", cors_support)
        if cp_code is not None:
            _setter("cp_code", cp_code)
        if custom_behavior is not None:
            _setter("custom_behavior", custom_behavior)
        if datastream is not None:
            _setter("datastream", datastream)
        if dcp is not None:
            _setter("dcp", dcp)
        if dcp_auth_hmac_transformation is not None:
            _setter("dcp_auth_hmac_transformation", dcp_auth_hmac_transformation)
        if dcp_auth_regex_transformation is not None:
            _setter("dcp_auth_regex_transformation", dcp_auth_regex_transformation)
        if dcp_auth_substring_transformation is not None:
            _setter("dcp_auth_substring_transformation", dcp_auth_substring_transformation)
        if dcp_auth_variable_extractor is not None:
            _setter("dcp_auth_variable_extractor", dcp_auth_variable_extractor)
        if dcp_default_authz_groups is not None:
            _setter("dcp_default_authz_groups", dcp_default_authz_groups)
        if dcp_dev_relations is not None:
            _setter("dcp_dev_relations", dcp_dev_relations)
        if dcp_real_time_auth is not None:
            _setter("dcp_real_time_auth", dcp_real_time_auth)
        if delivery_receipt is not None:
            _setter("delivery_receipt", delivery_receipt)
        if deny_access is not None:
            _setter("deny_access", deny_access)
        if deny_direct_failover_access is not None:
            _setter("deny_direct_failover_access", deny_direct_failover_access)
        if device_characteristic_cache_id is not None:
            _setter("device_characteristic_cache_id", device_characteristic_cache_id)
        if device_characteristic_header is not None:
            _setter("device_characteristic_header", device_characteristic_header)
        if dns_async_refresh is not None:
            _setter("dns_async_refresh", dns_async_refresh)
        if dns_prefresh is not None:
            _setter("dns_prefresh", dns_prefresh)
        if downgrade_protocol is not None:
            _setter("downgrade_protocol", downgrade_protocol)
        if download_complete_marker is not None:
            _setter("download_complete_marker", download_complete_marker)
        if download_notification is not None:
            _setter("download_notification", download_notification)
        if downstream_cache is not None:
            _setter("downstream_cache", downstream_cache)
        if dynamic_throughtput_optimization is not None:
            _setter("dynamic_throughtput_optimization", dynamic_throughtput_optimization)
        if dynamic_throughtput_optimization_override is not None:
            _setter("dynamic_throughtput_optimization_override", dynamic_throughtput_optimization_override)
        if dynamic_web_content is not None:
            _setter("dynamic_web_content", dynamic_web_content)
        if ecms_bulk_upload is not None:
            _setter("ecms_bulk_upload", ecms_bulk_upload)
        if ecms_database is not None:
            _setter("ecms_database", ecms_database)
        if ecms_dataset is not None:
            _setter("ecms_dataset", ecms_dataset)
        if ecms_object_key is not None:
            _setter("ecms_object_key", ecms_object_key)
        if edge_connect is not None:
            _setter("edge_connect", edge_connect)
        if edge_load_balancing_advanced is not None:
            _setter("edge_load_balancing_advanced", edge_load_balancing_advanced)
        if edge_load_balancing_data_center is not None:
            _setter("edge_load_balancing_data_center", edge_load_balancing_data_center)
        if edge_load_balancing_origin is not None:
            _setter("edge_load_balancing_origin", edge_load_balancing_origin)
        if edge_origin_authorization is not None:
            _setter("edge_origin_authorization", edge_origin_authorization)
        if edge_redirector is not None:
            _setter("edge_redirector", edge_redirector)
        if edge_scape is not None:
            _setter("edge_scape", edge_scape)
        if edge_side_includes is not None:
            _setter("edge_side_includes", edge_side_includes)
        if edge_worker is not None:
            _setter("edge_worker", edge_worker)
        if enhanced_akamai_protocol is not None:
            _setter("enhanced_akamai_protocol", enhanced_akamai_protocol)
        if enhanced_proxy_detection is not None:
            _setter("enhanced_proxy_detection", enhanced_proxy_detection)
        if epd_forward_header_enrichment is not None:
            _setter("epd_forward_header_enrichment", epd_forward_header_enrichment)
        if fail_action is not None:
            _setter("fail_action", fail_action)
        if failover_bot_manager_feature_compatibility is not None:
            _setter("failover_bot_manager_feature_compatibility", failover_bot_manager_feature_compatibility)
        if fast_invalidate is not None:
            _setter("fast_invalidate", fast_invalidate)
        if first_party_marketing is not None:
            _setter("first_party_marketing", first_party_marketing)
        if first_party_marketing_plus is not None:
            _setter("first_party_marketing_plus", first_party_marketing_plus)
        if forward_rewrite is not None:
            _setter("forward_rewrite", forward_rewrite)
        if front_end_optimization is not None:
            _setter("front_end_optimization", front_end_optimization)
        if g2oheader is not None:
            _setter("g2oheader", g2oheader)
        if global_request_number is not None:
            _setter("global_request_number", global_request_number)
        if graphql_caching is not None:
            _setter("graphql_caching", graphql_caching)
        if gzip_response is not None:
            _setter("gzip_response", gzip_response)
        if hd_data_advanced is not None:
            _setter("hd_data_advanced", hd_data_advanced)
        if health_detection is not None:
            _setter("health_detection", health_detection)
        if hsaf_eip_binding is not None:
            _setter("hsaf_eip_binding", hsaf_eip_binding)
        if http2 is not None:
            _setter("http2", http2)
        if http3 is not None:
            _setter("http3", http3)
        if http_strict_transport_security is not None:
            _setter("http_strict_transport_security", http_strict_transport_security)
        if http_to_https_upgrade is not None:
            _setter("http_to_https_upgrade", http_to_https_upgrade)
        if im_override is not None:
            _setter("im_override", im_override)
        if image_and_video_manager is not None:
            _setter("image_and_video_manager", image_and_video_manager)
        if image_manager is not None:
            _setter("image_manager", image_manager)
        if image_manager_video is not None:
            _setter("image_manager_video", image_manager_video)
        if include is not None:
            _setter("include", include)
        if input_validation is not None:
            _setter("input_validation", input_validation)
        if instant is not None:
            _setter("instant", instant)
        if instant_config is not None:
            _setter("instant_config", instant_config)
        if large_file_optimization is not None:
            _setter("large_file_optimization", large_file_optimization)
        if large_file_optimization_advanced is not None:
            _setter("large_file_optimization_advanced", large_file_optimization_advanced)
        if limit_bit_rate is not None:
            _setter("limit_bit_rate", limit_bit_rate)
        if log_custom is not None:
            _setter("log_custom", log_custom)
        if m_pulse is not None:
            _setter("m_pulse", m_pulse)
        if manifest_personalization is not None:
            _setter("manifest_personalization", manifest_personalization)
        if manifest_rerouting is not None:
            _setter("manifest_rerouting", manifest_rerouting)
        if manual_server_push is not None:
            _setter("manual_server_push", manual_server_push)
        if media_acceleration is not None:
            _setter("media_acceleration", media_acceleration)
        if media_acceleration_quic_optout is not None:
            _setter("media_acceleration_quic_optout", media_acceleration_quic_optout)
        if media_client is not None:
            _setter("media_client", media_client)
        if media_file_retrieval_optimization is not None:
            _setter("media_file_retrieval_optimization", media_file_retrieval_optimization)
        if media_origin_failover is not None:
            _setter("media_origin_failover", media_origin_failover)
        if metadata_caching is not None:
            _setter("metadata_caching", metadata_caching)
        if mobile_sdk_performance is not None:
            _setter("mobile_sdk_performance", mobile_sdk_performance)
        if modify_incoming_request_header is not None:
            _setter("modify_incoming_request_header", modify_incoming_request_header)
        if modify_incoming_response_header is not None:
            _setter("modify_incoming_response_header", modify_incoming_response_header)
        if modify_outgoing_request_header is not None:
            _setter("modify_outgoing_request_header", modify_outgoing_request_header)
        if modify_outgoing_response_header is not None:
            _setter("modify_outgoing_response_header", modify_outgoing_response_header)
        if modify_via_header is not None:
            _setter("modify_via_header", modify_via_header)
        if origin is not None:
            _setter("origin", origin)
        if origin_characteristics is not None:
            _setter("origin_characteristics", origin_characteristics)
        if origin_characteristics_wsd is not None:
            _setter("origin_characteristics_wsd", origin_characteristics_wsd)
        if origin_failure_recovery_method is not None:
            _setter("origin_failure_recovery_method", origin_failure_recovery_method)
        if origin_failure_recovery_policy is not None:
            _setter("origin_failure_recovery_policy", origin_failure_recovery_policy)
        if origin_ip_acl is not None:
            _setter("origin_ip_acl", origin_ip_acl)
        if persistent_client_connection is not None:
            _setter("persistent_client_connection", persistent_client_connection)
        if persistent_connection is not None:
            _setter("persistent_connection", persistent_connection)
        if personally_identifiable_information is not None:
            _setter("personally_identifiable_information", personally_identifiable_information)
        if phased_release is not None:
            _setter("phased_release", phased_release)
        if preconnect is not None:
            _setter("preconnect", preconnect)
        if predictive_content_delivery is not None:
            _setter("predictive_content_delivery", predictive_content_delivery)
        if predictive_prefetching is not None:
            _setter("predictive_prefetching", predictive_prefetching)
        if prefetch is not None:
            _setter("prefetch", prefetch)
        if prefetchable is not None:
            _setter("prefetchable", prefetchable)
        if prefresh_cache is not None:
            _setter("prefresh_cache", prefresh_cache)
        if quality is not None:
            _setter("quality", quality)
        if quic_beta is not None:
            _setter("quic_beta", quic_beta)
        if random_seek is not None:
            _setter("random_seek", random_seek)
        if rapid is not None:
            _setter("rapid", rapid)
        if read_timeout is not None:
            _setter("read_timeout", read_timeout)
        if real_time_reporting is not None:
            _setter("real_time_reporting", real_time_reporting)
        if real_user_monitoring is not None:
            _setter("real_user_monitoring", real_user_monitoring)
        if redirect is not None:
            _setter("redirect", redirect)
        if redirectplus is not None:
            _setter("redirectplus", redirectplus)
        if referer_checking is not None:
            _setter("referer_checking", referer_checking)
        if remove_query_parameter is not None:
            _setter("remove_query_parameter", remove_query_parameter)
        if remove_vary is not None:
            _setter("remove_vary", remove_vary)
        if report is not None:
            _setter("report", report)
        if request_control is not None:
            _setter("request_control", request_control)
        if request_type_marker is not None:
            _setter("request_type_marker", request_type_marker)
        if resource_optimizer is not None:
            _setter("resource_optimizer", resource_optimizer)
        if resource_optimizer_extended_compatibility is not None:
            _setter("resource_optimizer_extended_compatibility", resource_optimizer_extended_compatibility)
        if response_code is not None:
            _setter("response_code", response_code)
        if response_cookie is not None:
            _setter("response_cookie", response_cookie)
        if restrict_object_caching is not None:
            _setter("restrict_object_caching", restrict_object_caching)
        if return_cache_status is not None:
            _setter("return_cache_status", return_cache_status)
        if rewrite_url is not None:
            _setter("rewrite_url", rewrite_url)
        if rum_custom is not None:
            _setter("rum_custom", rum_custom)
        if saas_definitions is not None:
            _setter("saas_definitions", saas_definitions)
        if sales_force_commerce_cloud_client is not None:
            _setter("sales_force_commerce_cloud_client", sales_force_commerce_cloud_client)
        if sales_force_commerce_cloud_provider is not None:
            _setter("sales_force_commerce_cloud_provider", sales_force_commerce_cloud_provider)
        if sales_force_commerce_cloud_provider_host_header is not None:
            _setter("sales_force_commerce_cloud_provider_host_header", sales_force_commerce_cloud_provider_host_header)
        if save_post_dca_processing is not None:
            _setter("save_post_dca_processing", save_post_dca_processing)
        if schedule_invalidation is not None:
            _setter("schedule_invalidation", schedule_invalidation)
        if script_management is not None:
            _setter("script_management", script_management)
        if segmented_content_protection is not None:
            _setter("segmented_content_protection", segmented_content_protection)
        if segmented_media_optimization is not None:
            _setter("segmented_media_optimization", segmented_media_optimization)
        if segmented_media_streaming_prefetch is not None:
            _setter("segmented_media_streaming_prefetch", segmented_media_streaming_prefetch)
        if set_variable is not None:
            _setter("set_variable", set_variable)
        if shutr is not None:
            _setter("shutr", shutr)
        if simulate_error_code is not None:
            _setter("simulate_error_code", simulate_error_code)
        if site_shield is not None:
            _setter("site_shield", site_shield)
        if standard_tls_migration is not None:
            _setter("standard_tls_migration", standard_tls_migration)
        if standard_tls_migration_override is not None:
            _setter("standard_tls_migration_override", standard_tls_migration_override)
        if strict_header_parsing is not None:
            _setter("strict_header_parsing", strict_header_parsing)
        if sub_customer is not None:
            _setter("sub_customer", sub_customer)
        if sure_route is not None:
            _setter("sure_route", sure_route)
        if tcp_optimization is not None:
            _setter("tcp_optimization", tcp_optimization)
        if tea_leaf is not None:
            _setter("tea_leaf", tea_leaf)
        if tiered_distribution is not None:
            _setter("tiered_distribution", tiered_distribution)
        if tiered_distribution_advanced is not None:
            _setter("tiered_distribution_advanced", tiered_distribution_advanced)
        if tiered_distribution_customization is not None:
            _setter("tiered_distribution_customization", tiered_distribution_customization)
        if timeout is not None:
            _setter("timeout", timeout)
        if uid_configuration is not None:
            _setter("uid_configuration", uid_configuration)
        if validate_entity_tag is not None:
            _setter("validate_entity_tag", validate_entity_tag)
        if verify_json_web_token is not None:
            _setter("verify_json_web_token", verify_json_web_token)
        if verify_json_web_token_for_dcp is not None:
            _setter("verify_json_web_token_for_dcp", verify_json_web_token_for_dcp)
        if verify_token_authorization is not None:
            _setter("verify_token_authorization", verify_token_authorization)
        if virtual_waiting_room is not None:
            _setter("virtual_waiting_room", virtual_waiting_room)
        if virtual_waiting_room_with_edge_workers is not None:
            _setter("virtual_waiting_room_with_edge_workers", virtual_waiting_room_with_edge_workers)
        if visitor_prioritization is not None:
            _setter("visitor_prioritization", visitor_prioritization)
        if visitor_prioritization_fifo is not None:
            _setter("visitor_prioritization_fifo", visitor_prioritization_fifo)
        if visitor_prioritization_fifo_standalone is not None:
            _setter("visitor_prioritization_fifo_standalone", visitor_prioritization_fifo_standalone)
        if watermarking is not None:
            _setter("watermarking", watermarking)
        if web_application_firewall is not None:
            _setter("web_application_firewall", web_application_firewall)
        if web_sockets is not None:
            _setter("web_sockets", web_sockets)
        if webdav is not None:
            _setter("webdav", webdav)

    @property
    @pulumi.getter(name="adScalerCircuitBreaker")
    def ad_scaler_circuit_breaker(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdScalerCircuitBreakerResult']:
        return pulumi.get(self, "ad_scaler_circuit_breaker")

    @property
    @pulumi.getter(name="adaptiveAcceleration")
    def adaptive_acceleration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveAccelerationResult']:
        return pulumi.get(self, "adaptive_acceleration")

    @property
    @pulumi.getter(name="adaptiveImageCompression")
    def adaptive_image_compression(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveImageCompressionResult']:
        return pulumi.get(self, "adaptive_image_compression")

    @property
    @pulumi.getter
    def advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdvancedResult']:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="aggregatedReporting")
    def aggregated_reporting(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAggregatedReportingResult']:
        return pulumi.get(self, "aggregated_reporting")

    @property
    @pulumi.getter
    def akamaizer(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerResult']:
        return pulumi.get(self, "akamaizer")

    @property
    @pulumi.getter(name="akamaizerTag")
    def akamaizer_tag(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagResult']:
        return pulumi.get(self, "akamaizer_tag")

    @property
    @pulumi.getter(name="allHttpInCacheHierarchy")
    def all_http_in_cache_hierarchy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllHttpInCacheHierarchyResult']:
        return pulumi.get(self, "all_http_in_cache_hierarchy")

    @property
    @pulumi.getter(name="allowCloudletsOrigins")
    def allow_cloudlets_origins(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowCloudletsOriginsResult']:
        return pulumi.get(self, "allow_cloudlets_origins")

    @property
    @pulumi.getter(name="allowDelete")
    def allow_delete(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowDeleteResult']:
        return pulumi.get(self, "allow_delete")

    @property
    @pulumi.getter(name="allowHttpsCacheKeySharing")
    def allow_https_cache_key_sharing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsCacheKeySharingResult']:
        return pulumi.get(self, "allow_https_cache_key_sharing")

    @property
    @pulumi.getter(name="allowHttpsDowngrade")
    def allow_https_downgrade(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsDowngradeResult']:
        return pulumi.get(self, "allow_https_downgrade")

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowOptionsResult']:
        return pulumi.get(self, "allow_options")

    @property
    @pulumi.getter(name="allowPatch")
    def allow_patch(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPatchResult']:
        return pulumi.get(self, "allow_patch")

    @property
    @pulumi.getter(name="allowPost")
    def allow_post(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPostResult']:
        return pulumi.get(self, "allow_post")

    @property
    @pulumi.getter(name="allowPut")
    def allow_put(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPutResult']:
        return pulumi.get(self, "allow_put")

    @property
    @pulumi.getter(name="allowTransferEncoding")
    def allow_transfer_encoding(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowTransferEncodingResult']:
        return pulumi.get(self, "allow_transfer_encoding")

    @property
    @pulumi.getter(name="altSvcHeader")
    def alt_svc_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAltSvcHeaderResult']:
        return pulumi.get(self, "alt_svc_header")

    @property
    @pulumi.getter(name="apiPrioritization")
    def api_prioritization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationResult']:
        return pulumi.get(self, "api_prioritization")

    @property
    @pulumi.getter(name="applicationLoadBalancer")
    def application_load_balancer(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerResult']:
        return pulumi.get(self, "application_load_balancer")

    @property
    @pulumi.getter(name="audienceSegmentation")
    def audience_segmentation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationResult']:
        return pulumi.get(self, "audience_segmentation")

    @property
    @pulumi.getter(name="autoDomainValidation")
    def auto_domain_validation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAutoDomainValidationResult']:
        return pulumi.get(self, "auto_domain_validation")

    @property
    @pulumi.getter(name="baseDirectory")
    def base_directory(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBaseDirectoryResult']:
        return pulumi.get(self, "base_directory")

    @property
    @pulumi.getter(name="bossBeaconing")
    def boss_beaconing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBossBeaconingResult']:
        return pulumi.get(self, "boss_beaconing")

    @property
    @pulumi.getter
    def breadcrumbs(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBreadcrumbsResult']:
        return pulumi.get(self, "breadcrumbs")

    @property
    @pulumi.getter(name="breakConnection")
    def break_connection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBreakConnectionResult']:
        return pulumi.get(self, "break_connection")

    @property
    @pulumi.getter
    def brotli(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBrotliResult']:
        return pulumi.get(self, "brotli")

    @property
    @pulumi.getter(name="cacheError")
    def cache_error(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheErrorResult']:
        return pulumi.get(self, "cache_error")

    @property
    @pulumi.getter(name="cacheId")
    def cache_id(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheIdResult']:
        return pulumi.get(self, "cache_id")

    @property
    @pulumi.getter(name="cacheKeyIgnoreCase")
    def cache_key_ignore_case(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyIgnoreCaseResult']:
        return pulumi.get(self, "cache_key_ignore_case")

    @property
    @pulumi.getter(name="cacheKeyQueryParams")
    def cache_key_query_params(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyQueryParamsResult']:
        return pulumi.get(self, "cache_key_query_params")

    @property
    @pulumi.getter(name="cacheKeyRewrite")
    def cache_key_rewrite(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyRewriteResult']:
        return pulumi.get(self, "cache_key_rewrite")

    @property
    @pulumi.getter(name="cachePost")
    def cache_post(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCachePostResult']:
        return pulumi.get(self, "cache_post")

    @property
    @pulumi.getter(name="cacheRedirect")
    def cache_redirect(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheRedirectResult']:
        return pulumi.get(self, "cache_redirect")

    @property
    @pulumi.getter(name="cacheTag")
    def cache_tag(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagResult']:
        return pulumi.get(self, "cache_tag")

    @property
    @pulumi.getter(name="cacheTagVisible")
    def cache_tag_visible(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagVisibleResult']:
        return pulumi.get(self, "cache_tag_visible")

    @property
    @pulumi.getter
    def caching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCachingResult']:
        return pulumi.get(self, "caching")

    @property
    @pulumi.getter(name="centralAuthorization")
    def central_authorization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCentralAuthorizationResult']:
        return pulumi.get(self, "central_authorization")

    @property
    @pulumi.getter(name="chaseRedirects")
    def chase_redirects(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorChaseRedirectsResult']:
        return pulumi.get(self, "chase_redirects")

    @property
    @pulumi.getter(name="clientCharacteristics")
    def client_characteristics(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorClientCharacteristicsResult']:
        return pulumi.get(self, "client_characteristics")

    @property
    @pulumi.getter(name="cloudInterconnects")
    def cloud_interconnects(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudInterconnectsResult']:
        return pulumi.get(self, "cloud_interconnects")

    @property
    @pulumi.getter(name="cloudWrapper")
    def cloud_wrapper(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperResult']:
        return pulumi.get(self, "cloud_wrapper")

    @property
    @pulumi.getter(name="cloudWrapperAdvanced")
    def cloud_wrapper_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperAdvancedResult']:
        return pulumi.get(self, "cloud_wrapper_advanced")

    @property
    @pulumi.getter(name="conditionalOrigin")
    def conditional_origin(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorConditionalOriginResult']:
        return pulumi.get(self, "conditional_origin")

    @property
    @pulumi.getter(name="constructResponse")
    def construct_response(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorConstructResponseResult']:
        return pulumi.get(self, "construct_response")

    @property
    @pulumi.getter(name="contentCharacteristics")
    def content_characteristics(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsResult']:
        return pulumi.get(self, "content_characteristics")

    @property
    @pulumi.getter(name="contentCharacteristicsAmd")
    def content_characteristics_amd(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsAmdResult']:
        return pulumi.get(self, "content_characteristics_amd")

    @property
    @pulumi.getter(name="contentCharacteristicsDd")
    def content_characteristics_dd(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsDdResult']:
        return pulumi.get(self, "content_characteristics_dd")

    @property
    @pulumi.getter(name="contentCharacteristicsWsdLargeFile")
    def content_characteristics_wsd_large_file(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLargeFileResult']:
        return pulumi.get(self, "content_characteristics_wsd_large_file")

    @property
    @pulumi.getter(name="contentCharacteristicsWsdLive")
    def content_characteristics_wsd_live(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLiveResult']:
        return pulumi.get(self, "content_characteristics_wsd_live")

    @property
    @pulumi.getter(name="contentCharacteristicsWsdVod")
    def content_characteristics_wsd_vod(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdVodResult']:
        return pulumi.get(self, "content_characteristics_wsd_vod")

    @property
    @pulumi.getter(name="contentPrePosition")
    def content_pre_position(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentPrePositionResult']:
        return pulumi.get(self, "content_pre_position")

    @property
    @pulumi.getter(name="contentTargetingProtection")
    def content_targeting_protection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentTargetingProtectionResult']:
        return pulumi.get(self, "content_targeting_protection")

    @property
    @pulumi.getter(name="corsSupport")
    def cors_support(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCorsSupportResult']:
        return pulumi.get(self, "cors_support")

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeResult']:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="customBehavior")
    def custom_behavior(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCustomBehaviorResult']:
        return pulumi.get(self, "custom_behavior")

    @property
    @pulumi.getter
    def datastream(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDatastreamResult']:
        return pulumi.get(self, "datastream")

    @property
    @pulumi.getter
    def dcp(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpResult']:
        return pulumi.get(self, "dcp")

    @property
    @pulumi.getter(name="dcpAuthHmacTransformation")
    def dcp_auth_hmac_transformation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthHmacTransformationResult']:
        return pulumi.get(self, "dcp_auth_hmac_transformation")

    @property
    @pulumi.getter(name="dcpAuthRegexTransformation")
    def dcp_auth_regex_transformation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthRegexTransformationResult']:
        return pulumi.get(self, "dcp_auth_regex_transformation")

    @property
    @pulumi.getter(name="dcpAuthSubstringTransformation")
    def dcp_auth_substring_transformation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthSubstringTransformationResult']:
        return pulumi.get(self, "dcp_auth_substring_transformation")

    @property
    @pulumi.getter(name="dcpAuthVariableExtractor")
    def dcp_auth_variable_extractor(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthVariableExtractorResult']:
        return pulumi.get(self, "dcp_auth_variable_extractor")

    @property
    @pulumi.getter(name="dcpDefaultAuthzGroups")
    def dcp_default_authz_groups(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpDefaultAuthzGroupsResult']:
        return pulumi.get(self, "dcp_default_authz_groups")

    @property
    @pulumi.getter(name="dcpDevRelations")
    def dcp_dev_relations(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpDevRelationsResult']:
        return pulumi.get(self, "dcp_dev_relations")

    @property
    @pulumi.getter(name="dcpRealTimeAuth")
    def dcp_real_time_auth(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpRealTimeAuthResult']:
        return pulumi.get(self, "dcp_real_time_auth")

    @property
    @pulumi.getter(name="deliveryReceipt")
    def delivery_receipt(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeliveryReceiptResult']:
        return pulumi.get(self, "delivery_receipt")

    @property
    @pulumi.getter(name="denyAccess")
    def deny_access(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDenyAccessResult']:
        return pulumi.get(self, "deny_access")

    @property
    @pulumi.getter(name="denyDirectFailoverAccess")
    def deny_direct_failover_access(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDenyDirectFailoverAccessResult']:
        return pulumi.get(self, "deny_direct_failover_access")

    @property
    @pulumi.getter(name="deviceCharacteristicCacheId")
    def device_characteristic_cache_id(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicCacheIdResult']:
        return pulumi.get(self, "device_characteristic_cache_id")

    @property
    @pulumi.getter(name="deviceCharacteristicHeader")
    def device_characteristic_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicHeaderResult']:
        return pulumi.get(self, "device_characteristic_header")

    @property
    @pulumi.getter(name="dnsAsyncRefresh")
    def dns_async_refresh(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDnsAsyncRefreshResult']:
        return pulumi.get(self, "dns_async_refresh")

    @property
    @pulumi.getter(name="dnsPrefresh")
    def dns_prefresh(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDnsPrefreshResult']:
        return pulumi.get(self, "dns_prefresh")

    @property
    @pulumi.getter(name="downgradeProtocol")
    def downgrade_protocol(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDowngradeProtocolResult']:
        return pulumi.get(self, "downgrade_protocol")

    @property
    @pulumi.getter(name="downloadCompleteMarker")
    def download_complete_marker(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownloadCompleteMarkerResult']:
        return pulumi.get(self, "download_complete_marker")

    @property
    @pulumi.getter(name="downloadNotification")
    def download_notification(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownloadNotificationResult']:
        return pulumi.get(self, "download_notification")

    @property
    @pulumi.getter(name="downstreamCache")
    def downstream_cache(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownstreamCacheResult']:
        return pulumi.get(self, "downstream_cache")

    @property
    @pulumi.getter(name="dynamicThroughtputOptimization")
    def dynamic_throughtput_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationResult']:
        return pulumi.get(self, "dynamic_throughtput_optimization")

    @property
    @pulumi.getter(name="dynamicThroughtputOptimizationOverride")
    def dynamic_throughtput_optimization_override(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationOverrideResult']:
        return pulumi.get(self, "dynamic_throughtput_optimization_override")

    @property
    @pulumi.getter(name="dynamicWebContent")
    def dynamic_web_content(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicWebContentResult']:
        return pulumi.get(self, "dynamic_web_content")

    @property
    @pulumi.getter(name="ecmsBulkUpload")
    def ecms_bulk_upload(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsBulkUploadResult']:
        return pulumi.get(self, "ecms_bulk_upload")

    @property
    @pulumi.getter(name="ecmsDatabase")
    def ecms_database(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatabaseResult']:
        return pulumi.get(self, "ecms_database")

    @property
    @pulumi.getter(name="ecmsDataset")
    def ecms_dataset(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatasetResult']:
        return pulumi.get(self, "ecms_dataset")

    @property
    @pulumi.getter(name="ecmsObjectKey")
    def ecms_object_key(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsObjectKeyResult']:
        return pulumi.get(self, "ecms_object_key")

    @property
    @pulumi.getter(name="edgeConnect")
    def edge_connect(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeConnectResult']:
        return pulumi.get(self, "edge_connect")

    @property
    @pulumi.getter(name="edgeLoadBalancingAdvanced")
    def edge_load_balancing_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingAdvancedResult']:
        return pulumi.get(self, "edge_load_balancing_advanced")

    @property
    @pulumi.getter(name="edgeLoadBalancingDataCenter")
    def edge_load_balancing_data_center(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterResult']:
        return pulumi.get(self, "edge_load_balancing_data_center")

    @property
    @pulumi.getter(name="edgeLoadBalancingOrigin")
    def edge_load_balancing_origin(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingOriginResult']:
        return pulumi.get(self, "edge_load_balancing_origin")

    @property
    @pulumi.getter(name="edgeOriginAuthorization")
    def edge_origin_authorization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeOriginAuthorizationResult']:
        return pulumi.get(self, "edge_origin_authorization")

    @property
    @pulumi.getter(name="edgeRedirector")
    def edge_redirector(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorResult']:
        return pulumi.get(self, "edge_redirector")

    @property
    @pulumi.getter(name="edgeScape")
    def edge_scape(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeScapeResult']:
        return pulumi.get(self, "edge_scape")

    @property
    @pulumi.getter(name="edgeSideIncludes")
    def edge_side_includes(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeSideIncludesResult']:
        return pulumi.get(self, "edge_side_includes")

    @property
    @pulumi.getter(name="edgeWorker")
    def edge_worker(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeWorkerResult']:
        return pulumi.get(self, "edge_worker")

    @property
    @pulumi.getter(name="enhancedAkamaiProtocol")
    def enhanced_akamai_protocol(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedAkamaiProtocolResult']:
        return pulumi.get(self, "enhanced_akamai_protocol")

    @property
    @pulumi.getter(name="enhancedProxyDetection")
    def enhanced_proxy_detection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedProxyDetectionResult']:
        return pulumi.get(self, "enhanced_proxy_detection")

    @property
    @pulumi.getter(name="epdForwardHeaderEnrichment")
    def epd_forward_header_enrichment(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEpdForwardHeaderEnrichmentResult']:
        return pulumi.get(self, "epd_forward_header_enrichment")

    @property
    @pulumi.getter(name="failAction")
    def fail_action(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionResult']:
        return pulumi.get(self, "fail_action")

    @property
    @pulumi.getter(name="failoverBotManagerFeatureCompatibility")
    def failover_bot_manager_feature_compatibility(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailoverBotManagerFeatureCompatibilityResult']:
        return pulumi.get(self, "failover_bot_manager_feature_compatibility")

    @property
    @pulumi.getter(name="fastInvalidate")
    def fast_invalidate(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFastInvalidateResult']:
        return pulumi.get(self, "fast_invalidate")

    @property
    @pulumi.getter(name="firstPartyMarketing")
    def first_party_marketing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingResult']:
        return pulumi.get(self, "first_party_marketing")

    @property
    @pulumi.getter(name="firstPartyMarketingPlus")
    def first_party_marketing_plus(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusResult']:
        return pulumi.get(self, "first_party_marketing_plus")

    @property
    @pulumi.getter(name="forwardRewrite")
    def forward_rewrite(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteResult']:
        return pulumi.get(self, "forward_rewrite")

    @property
    @pulumi.getter(name="frontEndOptimization")
    def front_end_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFrontEndOptimizationResult']:
        return pulumi.get(self, "front_end_optimization")

    @property
    @pulumi.getter
    def g2oheader(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorG2oheaderResult']:
        return pulumi.get(self, "g2oheader")

    @property
    @pulumi.getter(name="globalRequestNumber")
    def global_request_number(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGlobalRequestNumberResult']:
        return pulumi.get(self, "global_request_number")

    @property
    @pulumi.getter(name="graphqlCaching")
    def graphql_caching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGraphqlCachingResult']:
        return pulumi.get(self, "graphql_caching")

    @property
    @pulumi.getter(name="gzipResponse")
    def gzip_response(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGzipResponseResult']:
        return pulumi.get(self, "gzip_response")

    @property
    @pulumi.getter(name="hdDataAdvanced")
    def hd_data_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHdDataAdvancedResult']:
        return pulumi.get(self, "hd_data_advanced")

    @property
    @pulumi.getter(name="healthDetection")
    def health_detection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHealthDetectionResult']:
        return pulumi.get(self, "health_detection")

    @property
    @pulumi.getter(name="hsafEipBinding")
    def hsaf_eip_binding(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHsafEipBindingResult']:
        return pulumi.get(self, "hsaf_eip_binding")

    @property
    @pulumi.getter
    def http2(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttp2Result']:
        return pulumi.get(self, "http2")

    @property
    @pulumi.getter
    def http3(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttp3Result']:
        return pulumi.get(self, "http3")

    @property
    @pulumi.getter(name="httpStrictTransportSecurity")
    def http_strict_transport_security(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttpStrictTransportSecurityResult']:
        return pulumi.get(self, "http_strict_transport_security")

    @property
    @pulumi.getter(name="httpToHttpsUpgrade")
    def http_to_https_upgrade(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttpToHttpsUpgradeResult']:
        return pulumi.get(self, "http_to_https_upgrade")

    @property
    @pulumi.getter(name="imOverride")
    def im_override(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImOverrideResult']:
        return pulumi.get(self, "im_override")

    @property
    @pulumi.getter(name="imageAndVideoManager")
    def image_and_video_manager(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerResult']:
        return pulumi.get(self, "image_and_video_manager")

    @property
    @pulumi.getter(name="imageManager")
    def image_manager(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerResult']:
        return pulumi.get(self, "image_manager")

    @property
    @pulumi.getter(name="imageManagerVideo")
    def image_manager_video(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoResult']:
        return pulumi.get(self, "image_manager_video")

    @property
    @pulumi.getter
    def include(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorIncludeResult']:
        return pulumi.get(self, "include")

    @property
    @pulumi.getter(name="inputValidation")
    def input_validation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationResult']:
        return pulumi.get(self, "input_validation")

    @property
    @pulumi.getter
    def instant(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInstantResult']:
        return pulumi.get(self, "instant")

    @property
    @pulumi.getter(name="instantConfig")
    def instant_config(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInstantConfigResult']:
        return pulumi.get(self, "instant_config")

    @property
    @pulumi.getter(name="largeFileOptimization")
    def large_file_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationResult']:
        return pulumi.get(self, "large_file_optimization")

    @property
    @pulumi.getter(name="largeFileOptimizationAdvanced")
    def large_file_optimization_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationAdvancedResult']:
        return pulumi.get(self, "large_file_optimization_advanced")

    @property
    @pulumi.getter(name="limitBitRate")
    def limit_bit_rate(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateResult']:
        return pulumi.get(self, "limit_bit_rate")

    @property
    @pulumi.getter(name="logCustom")
    def log_custom(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLogCustomResult']:
        return pulumi.get(self, "log_custom")

    @property
    @pulumi.getter(name="mPulse")
    def m_pulse(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMPulseResult']:
        return pulumi.get(self, "m_pulse")

    @property
    @pulumi.getter(name="manifestPersonalization")
    def manifest_personalization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManifestPersonalizationResult']:
        return pulumi.get(self, "manifest_personalization")

    @property
    @pulumi.getter(name="manifestRerouting")
    def manifest_rerouting(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManifestReroutingResult']:
        return pulumi.get(self, "manifest_rerouting")

    @property
    @pulumi.getter(name="manualServerPush")
    def manual_server_push(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManualServerPushResult']:
        return pulumi.get(self, "manual_server_push")

    @property
    @pulumi.getter(name="mediaAcceleration")
    def media_acceleration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationResult']:
        return pulumi.get(self, "media_acceleration")

    @property
    @pulumi.getter(name="mediaAccelerationQuicOptout")
    def media_acceleration_quic_optout(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationQuicOptoutResult']:
        return pulumi.get(self, "media_acceleration_quic_optout")

    @property
    @pulumi.getter(name="mediaClient")
    def media_client(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaClientResult']:
        return pulumi.get(self, "media_client")

    @property
    @pulumi.getter(name="mediaFileRetrievalOptimization")
    def media_file_retrieval_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaFileRetrievalOptimizationResult']:
        return pulumi.get(self, "media_file_retrieval_optimization")

    @property
    @pulumi.getter(name="mediaOriginFailover")
    def media_origin_failover(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaOriginFailoverResult']:
        return pulumi.get(self, "media_origin_failover")

    @property
    @pulumi.getter(name="metadataCaching")
    def metadata_caching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMetadataCachingResult']:
        return pulumi.get(self, "metadata_caching")

    @property
    @pulumi.getter(name="mobileSdkPerformance")
    def mobile_sdk_performance(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMobileSdkPerformanceResult']:
        return pulumi.get(self, "mobile_sdk_performance")

    @property
    @pulumi.getter(name="modifyIncomingRequestHeader")
    def modify_incoming_request_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingRequestHeaderResult']:
        return pulumi.get(self, "modify_incoming_request_header")

    @property
    @pulumi.getter(name="modifyIncomingResponseHeader")
    def modify_incoming_response_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingResponseHeaderResult']:
        return pulumi.get(self, "modify_incoming_response_header")

    @property
    @pulumi.getter(name="modifyOutgoingRequestHeader")
    def modify_outgoing_request_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingRequestHeaderResult']:
        return pulumi.get(self, "modify_outgoing_request_header")

    @property
    @pulumi.getter(name="modifyOutgoingResponseHeader")
    def modify_outgoing_response_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingResponseHeaderResult']:
        return pulumi.get(self, "modify_outgoing_response_header")

    @property
    @pulumi.getter(name="modifyViaHeader")
    def modify_via_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyViaHeaderResult']:
        return pulumi.get(self, "modify_via_header")

    @property
    @pulumi.getter
    def origin(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginResult']:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="originCharacteristics")
    def origin_characteristics(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsResult']:
        return pulumi.get(self, "origin_characteristics")

    @property
    @pulumi.getter(name="originCharacteristicsWsd")
    def origin_characteristics_wsd(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsWsdResult']:
        return pulumi.get(self, "origin_characteristics_wsd")

    @property
    @pulumi.getter(name="originFailureRecoveryMethod")
    def origin_failure_recovery_method(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryMethodResult']:
        return pulumi.get(self, "origin_failure_recovery_method")

    @property
    @pulumi.getter(name="originFailureRecoveryPolicy")
    def origin_failure_recovery_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryPolicyResult']:
        return pulumi.get(self, "origin_failure_recovery_policy")

    @property
    @pulumi.getter(name="originIpAcl")
    def origin_ip_acl(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginIpAclResult']:
        return pulumi.get(self, "origin_ip_acl")

    @property
    @pulumi.getter(name="persistentClientConnection")
    def persistent_client_connection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersistentClientConnectionResult']:
        return pulumi.get(self, "persistent_client_connection")

    @property
    @pulumi.getter(name="persistentConnection")
    def persistent_connection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersistentConnectionResult']:
        return pulumi.get(self, "persistent_connection")

    @property
    @pulumi.getter(name="personallyIdentifiableInformation")
    def personally_identifiable_information(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersonallyIdentifiableInformationResult']:
        return pulumi.get(self, "personally_identifiable_information")

    @property
    @pulumi.getter(name="phasedRelease")
    def phased_release(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseResult']:
        return pulumi.get(self, "phased_release")

    @property
    @pulumi.getter
    def preconnect(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPreconnectResult']:
        return pulumi.get(self, "preconnect")

    @property
    @pulumi.getter(name="predictiveContentDelivery")
    def predictive_content_delivery(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPredictiveContentDeliveryResult']:
        return pulumi.get(self, "predictive_content_delivery")

    @property
    @pulumi.getter(name="predictivePrefetching")
    def predictive_prefetching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPredictivePrefetchingResult']:
        return pulumi.get(self, "predictive_prefetching")

    @property
    @pulumi.getter
    def prefetch(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchResult']:
        return pulumi.get(self, "prefetch")

    @property
    @pulumi.getter
    def prefetchable(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchableResult']:
        return pulumi.get(self, "prefetchable")

    @property
    @pulumi.getter(name="prefreshCache")
    def prefresh_cache(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefreshCacheResult']:
        return pulumi.get(self, "prefresh_cache")

    @property
    @pulumi.getter
    def quality(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorQualityResult']:
        return pulumi.get(self, "quality")

    @property
    @pulumi.getter(name="quicBeta")
    def quic_beta(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorQuicBetaResult']:
        return pulumi.get(self, "quic_beta")

    @property
    @pulumi.getter(name="randomSeek")
    def random_seek(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRandomSeekResult']:
        return pulumi.get(self, "random_seek")

    @property
    @pulumi.getter
    def rapid(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRapidResult']:
        return pulumi.get(self, "rapid")

    @property
    @pulumi.getter(name="readTimeout")
    def read_timeout(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReadTimeoutResult']:
        return pulumi.get(self, "read_timeout")

    @property
    @pulumi.getter(name="realTimeReporting")
    def real_time_reporting(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRealTimeReportingResult']:
        return pulumi.get(self, "real_time_reporting")

    @property
    @pulumi.getter(name="realUserMonitoring")
    def real_user_monitoring(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRealUserMonitoringResult']:
        return pulumi.get(self, "real_user_monitoring")

    @property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRedirectResult']:
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter
    def redirectplus(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRedirectplusResult']:
        return pulumi.get(self, "redirectplus")

    @property
    @pulumi.getter(name="refererChecking")
    def referer_checking(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRefererCheckingResult']:
        return pulumi.get(self, "referer_checking")

    @property
    @pulumi.getter(name="removeQueryParameter")
    def remove_query_parameter(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRemoveQueryParameterResult']:
        return pulumi.get(self, "remove_query_parameter")

    @property
    @pulumi.getter(name="removeVary")
    def remove_vary(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRemoveVaryResult']:
        return pulumi.get(self, "remove_vary")

    @property
    @pulumi.getter
    def report(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReportResult']:
        return pulumi.get(self, "report")

    @property
    @pulumi.getter(name="requestControl")
    def request_control(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlResult']:
        return pulumi.get(self, "request_control")

    @property
    @pulumi.getter(name="requestTypeMarker")
    def request_type_marker(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestTypeMarkerResult']:
        return pulumi.get(self, "request_type_marker")

    @property
    @pulumi.getter(name="resourceOptimizer")
    def resource_optimizer(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerResult']:
        return pulumi.get(self, "resource_optimizer")

    @property
    @pulumi.getter(name="resourceOptimizerExtendedCompatibility")
    def resource_optimizer_extended_compatibility(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerExtendedCompatibilityResult']:
        return pulumi.get(self, "resource_optimizer_extended_compatibility")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResponseCodeResult']:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="responseCookie")
    def response_cookie(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResponseCookieResult']:
        return pulumi.get(self, "response_cookie")

    @property
    @pulumi.getter(name="restrictObjectCaching")
    def restrict_object_caching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRestrictObjectCachingResult']:
        return pulumi.get(self, "restrict_object_caching")

    @property
    @pulumi.getter(name="returnCacheStatus")
    def return_cache_status(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReturnCacheStatusResult']:
        return pulumi.get(self, "return_cache_status")

    @property
    @pulumi.getter(name="rewriteUrl")
    def rewrite_url(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRewriteUrlResult']:
        return pulumi.get(self, "rewrite_url")

    @property
    @pulumi.getter(name="rumCustom")
    def rum_custom(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRumCustomResult']:
        return pulumi.get(self, "rum_custom")

    @property
    @pulumi.getter(name="saasDefinitions")
    def saas_definitions(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSaasDefinitionsResult']:
        return pulumi.get(self, "saas_definitions")

    @property
    @pulumi.getter(name="salesForceCommerceCloudClient")
    def sales_force_commerce_cloud_client(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudClientResult']:
        return pulumi.get(self, "sales_force_commerce_cloud_client")

    @property
    @pulumi.getter(name="salesForceCommerceCloudProvider")
    def sales_force_commerce_cloud_provider(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderResult']:
        return pulumi.get(self, "sales_force_commerce_cloud_provider")

    @property
    @pulumi.getter(name="salesForceCommerceCloudProviderHostHeader")
    def sales_force_commerce_cloud_provider_host_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderHostHeaderResult']:
        return pulumi.get(self, "sales_force_commerce_cloud_provider_host_header")

    @property
    @pulumi.getter(name="savePostDcaProcessing")
    def save_post_dca_processing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSavePostDcaProcessingResult']:
        return pulumi.get(self, "save_post_dca_processing")

    @property
    @pulumi.getter(name="scheduleInvalidation")
    def schedule_invalidation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorScheduleInvalidationResult']:
        return pulumi.get(self, "schedule_invalidation")

    @property
    @pulumi.getter(name="scriptManagement")
    def script_management(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorScriptManagementResult']:
        return pulumi.get(self, "script_management")

    @property
    @pulumi.getter(name="segmentedContentProtection")
    def segmented_content_protection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedContentProtectionResult']:
        return pulumi.get(self, "segmented_content_protection")

    @property
    @pulumi.getter(name="segmentedMediaOptimization")
    def segmented_media_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaOptimizationResult']:
        return pulumi.get(self, "segmented_media_optimization")

    @property
    @pulumi.getter(name="segmentedMediaStreamingPrefetch")
    def segmented_media_streaming_prefetch(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaStreamingPrefetchResult']:
        return pulumi.get(self, "segmented_media_streaming_prefetch")

    @property
    @pulumi.getter(name="setVariable")
    def set_variable(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSetVariableResult']:
        return pulumi.get(self, "set_variable")

    @property
    @pulumi.getter
    def shutr(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorShutrResult']:
        return pulumi.get(self, "shutr")

    @property
    @pulumi.getter(name="simulateErrorCode")
    def simulate_error_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSimulateErrorCodeResult']:
        return pulumi.get(self, "simulate_error_code")

    @property
    @pulumi.getter(name="siteShield")
    def site_shield(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldResult']:
        return pulumi.get(self, "site_shield")

    @property
    @pulumi.getter(name="standardTlsMigration")
    def standard_tls_migration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationResult']:
        return pulumi.get(self, "standard_tls_migration")

    @property
    @pulumi.getter(name="standardTlsMigrationOverride")
    def standard_tls_migration_override(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationOverrideResult']:
        return pulumi.get(self, "standard_tls_migration_override")

    @property
    @pulumi.getter(name="strictHeaderParsing")
    def strict_header_parsing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStrictHeaderParsingResult']:
        return pulumi.get(self, "strict_header_parsing")

    @property
    @pulumi.getter(name="subCustomer")
    def sub_customer(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSubCustomerResult']:
        return pulumi.get(self, "sub_customer")

    @property
    @pulumi.getter(name="sureRoute")
    def sure_route(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSureRouteResult']:
        return pulumi.get(self, "sure_route")

    @property
    @pulumi.getter(name="tcpOptimization")
    def tcp_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTcpOptimizationResult']:
        return pulumi.get(self, "tcp_optimization")

    @property
    @pulumi.getter(name="teaLeaf")
    def tea_leaf(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTeaLeafResult']:
        return pulumi.get(self, "tea_leaf")

    @property
    @pulumi.getter(name="tieredDistribution")
    def tiered_distribution(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionResult']:
        return pulumi.get(self, "tiered_distribution")

    @property
    @pulumi.getter(name="tieredDistributionAdvanced")
    def tiered_distribution_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionAdvancedResult']:
        return pulumi.get(self, "tiered_distribution_advanced")

    @property
    @pulumi.getter(name="tieredDistributionCustomization")
    def tiered_distribution_customization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionCustomizationResult']:
        return pulumi.get(self, "tiered_distribution_customization")

    @property
    @pulumi.getter
    def timeout(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTimeoutResult']:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="uidConfiguration")
    def uid_configuration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorUidConfigurationResult']:
        return pulumi.get(self, "uid_configuration")

    @property
    @pulumi.getter(name="validateEntityTag")
    def validate_entity_tag(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorValidateEntityTagResult']:
        return pulumi.get(self, "validate_entity_tag")

    @property
    @pulumi.getter(name="verifyJsonWebToken")
    def verify_json_web_token(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenResult']:
        return pulumi.get(self, "verify_json_web_token")

    @property
    @pulumi.getter(name="verifyJsonWebTokenForDcp")
    def verify_json_web_token_for_dcp(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenForDcpResult']:
        return pulumi.get(self, "verify_json_web_token_for_dcp")

    @property
    @pulumi.getter(name="verifyTokenAuthorization")
    def verify_token_authorization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationResult']:
        return pulumi.get(self, "verify_token_authorization")

    @property
    @pulumi.getter(name="virtualWaitingRoom")
    def virtual_waiting_room(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomResult']:
        return pulumi.get(self, "virtual_waiting_room")

    @property
    @pulumi.getter(name="virtualWaitingRoomWithEdgeWorkers")
    def virtual_waiting_room_with_edge_workers(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomWithEdgeWorkersResult']:
        return pulumi.get(self, "virtual_waiting_room_with_edge_workers")

    @property
    @pulumi.getter(name="visitorPrioritization")
    def visitor_prioritization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationResult']:
        return pulumi.get(self, "visitor_prioritization")

    @property
    @pulumi.getter(name="visitorPrioritizationFifo")
    def visitor_prioritization_fifo(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoResult']:
        return pulumi.get(self, "visitor_prioritization_fifo")

    @property
    @pulumi.getter(name="visitorPrioritizationFifoStandalone")
    def visitor_prioritization_fifo_standalone(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoStandaloneResult']:
        return pulumi.get(self, "visitor_prioritization_fifo_standalone")

    @property
    @pulumi.getter
    def watermarking(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWatermarkingResult']:
        return pulumi.get(self, "watermarking")

    @property
    @pulumi.getter(name="webApplicationFirewall")
    def web_application_firewall(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallResult']:
        return pulumi.get(self, "web_application_firewall")

    @property
    @pulumi.getter(name="webSockets")
    def web_sockets(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebSocketsResult']:
        return pulumi.get(self, "web_sockets")

    @property
    @pulumi.getter
    def webdav(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebdavResult']:
        return pulumi.get(self, "webdav")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAdScalerCircuitBreakerResult(dict):
    def __init__(__self__, *,
                 fallback_action_response_code_based: Optional[str] = None,
                 locked: Optional[bool] = None,
                 response_code_based: Optional[bool] = None,
                 response_codes: Optional[str] = None,
                 response_delay_based: Optional[bool] = None,
                 response_delay_threshold: Optional[str] = None,
                 return_error_response_code_based: Optional[str] = None,
                 specify_your_own_response_code_based: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAdScalerCircuitBreakerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fallback_action_response_code_based=fallback_action_response_code_based,
            locked=locked,
            response_code_based=response_code_based,
            response_codes=response_codes,
            response_delay_based=response_delay_based,
            response_delay_threshold=response_delay_threshold,
            return_error_response_code_based=return_error_response_code_based,
            specify_your_own_response_code_based=specify_your_own_response_code_based,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fallback_action_response_code_based: Optional[str] = None,
             locked: Optional[bool] = None,
             response_code_based: Optional[bool] = None,
             response_codes: Optional[str] = None,
             response_delay_based: Optional[bool] = None,
             response_delay_threshold: Optional[str] = None,
             return_error_response_code_based: Optional[str] = None,
             specify_your_own_response_code_based: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fallbackActionResponseCodeBased' in kwargs:
            fallback_action_response_code_based = kwargs['fallbackActionResponseCodeBased']
        if 'responseCodeBased' in kwargs:
            response_code_based = kwargs['responseCodeBased']
        if 'responseCodes' in kwargs:
            response_codes = kwargs['responseCodes']
        if 'responseDelayBased' in kwargs:
            response_delay_based = kwargs['responseDelayBased']
        if 'responseDelayThreshold' in kwargs:
            response_delay_threshold = kwargs['responseDelayThreshold']
        if 'returnErrorResponseCodeBased' in kwargs:
            return_error_response_code_based = kwargs['returnErrorResponseCodeBased']
        if 'specifyYourOwnResponseCodeBased' in kwargs:
            specify_your_own_response_code_based = kwargs['specifyYourOwnResponseCodeBased']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if fallback_action_response_code_based is not None:
            _setter("fallback_action_response_code_based", fallback_action_response_code_based)
        if locked is not None:
            _setter("locked", locked)
        if response_code_based is not None:
            _setter("response_code_based", response_code_based)
        if response_codes is not None:
            _setter("response_codes", response_codes)
        if response_delay_based is not None:
            _setter("response_delay_based", response_delay_based)
        if response_delay_threshold is not None:
            _setter("response_delay_threshold", response_delay_threshold)
        if return_error_response_code_based is not None:
            _setter("return_error_response_code_based", return_error_response_code_based)
        if specify_your_own_response_code_based is not None:
            _setter("specify_your_own_response_code_based", specify_your_own_response_code_based)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="fallbackActionResponseCodeBased")
    def fallback_action_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "fallback_action_response_code_based")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="responseCodeBased")
    def response_code_based(self) -> Optional[bool]:
        return pulumi.get(self, "response_code_based")

    @property
    @pulumi.getter(name="responseCodes")
    def response_codes(self) -> Optional[str]:
        return pulumi.get(self, "response_codes")

    @property
    @pulumi.getter(name="responseDelayBased")
    def response_delay_based(self) -> Optional[bool]:
        return pulumi.get(self, "response_delay_based")

    @property
    @pulumi.getter(name="responseDelayThreshold")
    def response_delay_threshold(self) -> Optional[str]:
        return pulumi.get(self, "response_delay_threshold")

    @property
    @pulumi.getter(name="returnErrorResponseCodeBased")
    def return_error_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "return_error_response_code_based")

    @property
    @pulumi.getter(name="specifyYourOwnResponseCodeBased")
    def specify_your_own_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "specify_your_own_response_code_based")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveAccelerationResult(dict):
    def __init__(__self__, *,
                 ab_logic: Optional[str] = None,
                 ab_testing: Optional[str] = None,
                 compression: Optional[str] = None,
                 cookie_name: Optional[str] = None,
                 enable_brotli_compression: Optional[bool] = None,
                 enable_for_noncacheable: Optional[bool] = None,
                 enable_preconnect: Optional[bool] = None,
                 enable_push: Optional[bool] = None,
                 enable_ro: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 preload_enable: Optional[bool] = None,
                 source: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 title_brotli: Optional[str] = None,
                 title_http2_server_push: Optional[str] = None,
                 title_preconnect: Optional[str] = None,
                 title_preload: Optional[str] = None,
                 title_ro: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveAccelerationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ab_logic=ab_logic,
            ab_testing=ab_testing,
            compression=compression,
            cookie_name=cookie_name,
            enable_brotli_compression=enable_brotli_compression,
            enable_for_noncacheable=enable_for_noncacheable,
            enable_preconnect=enable_preconnect,
            enable_push=enable_push,
            enable_ro=enable_ro,
            locked=locked,
            preload_enable=preload_enable,
            source=source,
            template_uuid=template_uuid,
            title_brotli=title_brotli,
            title_http2_server_push=title_http2_server_push,
            title_preconnect=title_preconnect,
            title_preload=title_preload,
            title_ro=title_ro,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ab_logic: Optional[str] = None,
             ab_testing: Optional[str] = None,
             compression: Optional[str] = None,
             cookie_name: Optional[str] = None,
             enable_brotli_compression: Optional[bool] = None,
             enable_for_noncacheable: Optional[bool] = None,
             enable_preconnect: Optional[bool] = None,
             enable_push: Optional[bool] = None,
             enable_ro: Optional[bool] = None,
             locked: Optional[bool] = None,
             preload_enable: Optional[bool] = None,
             source: Optional[str] = None,
             template_uuid: Optional[str] = None,
             title_brotli: Optional[str] = None,
             title_http2_server_push: Optional[str] = None,
             title_preconnect: Optional[str] = None,
             title_preload: Optional[str] = None,
             title_ro: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'abLogic' in kwargs:
            ab_logic = kwargs['abLogic']
        if 'abTesting' in kwargs:
            ab_testing = kwargs['abTesting']
        if 'cookieName' in kwargs:
            cookie_name = kwargs['cookieName']
        if 'enableBrotliCompression' in kwargs:
            enable_brotli_compression = kwargs['enableBrotliCompression']
        if 'enableForNoncacheable' in kwargs:
            enable_for_noncacheable = kwargs['enableForNoncacheable']
        if 'enablePreconnect' in kwargs:
            enable_preconnect = kwargs['enablePreconnect']
        if 'enablePush' in kwargs:
            enable_push = kwargs['enablePush']
        if 'enableRo' in kwargs:
            enable_ro = kwargs['enableRo']
        if 'preloadEnable' in kwargs:
            preload_enable = kwargs['preloadEnable']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'titleBrotli' in kwargs:
            title_brotli = kwargs['titleBrotli']
        if 'titleHttp2ServerPush' in kwargs:
            title_http2_server_push = kwargs['titleHttp2ServerPush']
        if 'titlePreconnect' in kwargs:
            title_preconnect = kwargs['titlePreconnect']
        if 'titlePreload' in kwargs:
            title_preload = kwargs['titlePreload']
        if 'titleRo' in kwargs:
            title_ro = kwargs['titleRo']

        if ab_logic is not None:
            _setter("ab_logic", ab_logic)
        if ab_testing is not None:
            _setter("ab_testing", ab_testing)
        if compression is not None:
            _setter("compression", compression)
        if cookie_name is not None:
            _setter("cookie_name", cookie_name)
        if enable_brotli_compression is not None:
            _setter("enable_brotli_compression", enable_brotli_compression)
        if enable_for_noncacheable is not None:
            _setter("enable_for_noncacheable", enable_for_noncacheable)
        if enable_preconnect is not None:
            _setter("enable_preconnect", enable_preconnect)
        if enable_push is not None:
            _setter("enable_push", enable_push)
        if enable_ro is not None:
            _setter("enable_ro", enable_ro)
        if locked is not None:
            _setter("locked", locked)
        if preload_enable is not None:
            _setter("preload_enable", preload_enable)
        if source is not None:
            _setter("source", source)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if title_brotli is not None:
            _setter("title_brotli", title_brotli)
        if title_http2_server_push is not None:
            _setter("title_http2_server_push", title_http2_server_push)
        if title_preconnect is not None:
            _setter("title_preconnect", title_preconnect)
        if title_preload is not None:
            _setter("title_preload", title_preload)
        if title_ro is not None:
            _setter("title_ro", title_ro)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="abLogic")
    def ab_logic(self) -> Optional[str]:
        return pulumi.get(self, "ab_logic")

    @property
    @pulumi.getter(name="abTesting")
    def ab_testing(self) -> Optional[str]:
        return pulumi.get(self, "ab_testing")

    @property
    @pulumi.getter
    def compression(self) -> Optional[str]:
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="enableBrotliCompression")
    def enable_brotli_compression(self) -> Optional[bool]:
        return pulumi.get(self, "enable_brotli_compression")

    @property
    @pulumi.getter(name="enableForNoncacheable")
    def enable_for_noncacheable(self) -> Optional[bool]:
        return pulumi.get(self, "enable_for_noncacheable")

    @property
    @pulumi.getter(name="enablePreconnect")
    def enable_preconnect(self) -> Optional[bool]:
        return pulumi.get(self, "enable_preconnect")

    @property
    @pulumi.getter(name="enablePush")
    def enable_push(self) -> Optional[bool]:
        return pulumi.get(self, "enable_push")

    @property
    @pulumi.getter(name="enableRo")
    def enable_ro(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ro")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="preloadEnable")
    def preload_enable(self) -> Optional[bool]:
        return pulumi.get(self, "preload_enable")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="titleBrotli")
    def title_brotli(self) -> Optional[str]:
        return pulumi.get(self, "title_brotli")

    @property
    @pulumi.getter(name="titleHttp2ServerPush")
    def title_http2_server_push(self) -> Optional[str]:
        return pulumi.get(self, "title_http2_server_push")

    @property
    @pulumi.getter(name="titlePreconnect")
    def title_preconnect(self) -> Optional[str]:
        return pulumi.get(self, "title_preconnect")

    @property
    @pulumi.getter(name="titlePreload")
    def title_preload(self) -> Optional[str]:
        return pulumi.get(self, "title_preload")

    @property
    @pulumi.getter(name="titleRo")
    def title_ro(self) -> Optional[str]:
        return pulumi.get(self, "title_ro")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveImageCompressionResult(dict):
    def __init__(__self__, *,
                 compress_mobile: Optional[bool] = None,
                 compress_standard: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tier1_mobile_compression_method: Optional[str] = None,
                 tier1_mobile_compression_value: Optional[int] = None,
                 tier1_standard_compression_method: Optional[str] = None,
                 tier1_standard_compression_value: Optional[int] = None,
                 tier2_mobile_compression_method: Optional[str] = None,
                 tier2_mobile_compression_value: Optional[int] = None,
                 tier2_standard_compression_method: Optional[str] = None,
                 tier2_standard_compression_value: Optional[int] = None,
                 tier3_mobile_compression_method: Optional[str] = None,
                 tier3_mobile_compression_value: Optional[int] = None,
                 tier3_standard_compression_method: Optional[str] = None,
                 tier3_standard_compression_value: Optional[int] = None,
                 title_aic_mobile: Optional[str] = None,
                 title_aic_nonmobile: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveImageCompressionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compress_mobile=compress_mobile,
            compress_standard=compress_standard,
            locked=locked,
            template_uuid=template_uuid,
            tier1_mobile_compression_method=tier1_mobile_compression_method,
            tier1_mobile_compression_value=tier1_mobile_compression_value,
            tier1_standard_compression_method=tier1_standard_compression_method,
            tier1_standard_compression_value=tier1_standard_compression_value,
            tier2_mobile_compression_method=tier2_mobile_compression_method,
            tier2_mobile_compression_value=tier2_mobile_compression_value,
            tier2_standard_compression_method=tier2_standard_compression_method,
            tier2_standard_compression_value=tier2_standard_compression_value,
            tier3_mobile_compression_method=tier3_mobile_compression_method,
            tier3_mobile_compression_value=tier3_mobile_compression_value,
            tier3_standard_compression_method=tier3_standard_compression_method,
            tier3_standard_compression_value=tier3_standard_compression_value,
            title_aic_mobile=title_aic_mobile,
            title_aic_nonmobile=title_aic_nonmobile,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compress_mobile: Optional[bool] = None,
             compress_standard: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             tier1_mobile_compression_method: Optional[str] = None,
             tier1_mobile_compression_value: Optional[int] = None,
             tier1_standard_compression_method: Optional[str] = None,
             tier1_standard_compression_value: Optional[int] = None,
             tier2_mobile_compression_method: Optional[str] = None,
             tier2_mobile_compression_value: Optional[int] = None,
             tier2_standard_compression_method: Optional[str] = None,
             tier2_standard_compression_value: Optional[int] = None,
             tier3_mobile_compression_method: Optional[str] = None,
             tier3_mobile_compression_value: Optional[int] = None,
             tier3_standard_compression_method: Optional[str] = None,
             tier3_standard_compression_value: Optional[int] = None,
             title_aic_mobile: Optional[str] = None,
             title_aic_nonmobile: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compressMobile' in kwargs:
            compress_mobile = kwargs['compressMobile']
        if 'compressStandard' in kwargs:
            compress_standard = kwargs['compressStandard']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'tier1MobileCompressionMethod' in kwargs:
            tier1_mobile_compression_method = kwargs['tier1MobileCompressionMethod']
        if 'tier1MobileCompressionValue' in kwargs:
            tier1_mobile_compression_value = kwargs['tier1MobileCompressionValue']
        if 'tier1StandardCompressionMethod' in kwargs:
            tier1_standard_compression_method = kwargs['tier1StandardCompressionMethod']
        if 'tier1StandardCompressionValue' in kwargs:
            tier1_standard_compression_value = kwargs['tier1StandardCompressionValue']
        if 'tier2MobileCompressionMethod' in kwargs:
            tier2_mobile_compression_method = kwargs['tier2MobileCompressionMethod']
        if 'tier2MobileCompressionValue' in kwargs:
            tier2_mobile_compression_value = kwargs['tier2MobileCompressionValue']
        if 'tier2StandardCompressionMethod' in kwargs:
            tier2_standard_compression_method = kwargs['tier2StandardCompressionMethod']
        if 'tier2StandardCompressionValue' in kwargs:
            tier2_standard_compression_value = kwargs['tier2StandardCompressionValue']
        if 'tier3MobileCompressionMethod' in kwargs:
            tier3_mobile_compression_method = kwargs['tier3MobileCompressionMethod']
        if 'tier3MobileCompressionValue' in kwargs:
            tier3_mobile_compression_value = kwargs['tier3MobileCompressionValue']
        if 'tier3StandardCompressionMethod' in kwargs:
            tier3_standard_compression_method = kwargs['tier3StandardCompressionMethod']
        if 'tier3StandardCompressionValue' in kwargs:
            tier3_standard_compression_value = kwargs['tier3StandardCompressionValue']
        if 'titleAicMobile' in kwargs:
            title_aic_mobile = kwargs['titleAicMobile']
        if 'titleAicNonmobile' in kwargs:
            title_aic_nonmobile = kwargs['titleAicNonmobile']

        if compress_mobile is not None:
            _setter("compress_mobile", compress_mobile)
        if compress_standard is not None:
            _setter("compress_standard", compress_standard)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if tier1_mobile_compression_method is not None:
            _setter("tier1_mobile_compression_method", tier1_mobile_compression_method)
        if tier1_mobile_compression_value is not None:
            _setter("tier1_mobile_compression_value", tier1_mobile_compression_value)
        if tier1_standard_compression_method is not None:
            _setter("tier1_standard_compression_method", tier1_standard_compression_method)
        if tier1_standard_compression_value is not None:
            _setter("tier1_standard_compression_value", tier1_standard_compression_value)
        if tier2_mobile_compression_method is not None:
            _setter("tier2_mobile_compression_method", tier2_mobile_compression_method)
        if tier2_mobile_compression_value is not None:
            _setter("tier2_mobile_compression_value", tier2_mobile_compression_value)
        if tier2_standard_compression_method is not None:
            _setter("tier2_standard_compression_method", tier2_standard_compression_method)
        if tier2_standard_compression_value is not None:
            _setter("tier2_standard_compression_value", tier2_standard_compression_value)
        if tier3_mobile_compression_method is not None:
            _setter("tier3_mobile_compression_method", tier3_mobile_compression_method)
        if tier3_mobile_compression_value is not None:
            _setter("tier3_mobile_compression_value", tier3_mobile_compression_value)
        if tier3_standard_compression_method is not None:
            _setter("tier3_standard_compression_method", tier3_standard_compression_method)
        if tier3_standard_compression_value is not None:
            _setter("tier3_standard_compression_value", tier3_standard_compression_value)
        if title_aic_mobile is not None:
            _setter("title_aic_mobile", title_aic_mobile)
        if title_aic_nonmobile is not None:
            _setter("title_aic_nonmobile", title_aic_nonmobile)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="compressMobile")
    def compress_mobile(self) -> Optional[bool]:
        return pulumi.get(self, "compress_mobile")

    @property
    @pulumi.getter(name="compressStandard")
    def compress_standard(self) -> Optional[bool]:
        return pulumi.get(self, "compress_standard")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tier1MobileCompressionMethod")
    def tier1_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier1_mobile_compression_method")

    @property
    @pulumi.getter(name="tier1MobileCompressionValue")
    def tier1_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier1_mobile_compression_value")

    @property
    @pulumi.getter(name="tier1StandardCompressionMethod")
    def tier1_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier1_standard_compression_method")

    @property
    @pulumi.getter(name="tier1StandardCompressionValue")
    def tier1_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier1_standard_compression_value")

    @property
    @pulumi.getter(name="tier2MobileCompressionMethod")
    def tier2_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier2_mobile_compression_method")

    @property
    @pulumi.getter(name="tier2MobileCompressionValue")
    def tier2_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier2_mobile_compression_value")

    @property
    @pulumi.getter(name="tier2StandardCompressionMethod")
    def tier2_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier2_standard_compression_method")

    @property
    @pulumi.getter(name="tier2StandardCompressionValue")
    def tier2_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier2_standard_compression_value")

    @property
    @pulumi.getter(name="tier3MobileCompressionMethod")
    def tier3_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier3_mobile_compression_method")

    @property
    @pulumi.getter(name="tier3MobileCompressionValue")
    def tier3_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier3_mobile_compression_value")

    @property
    @pulumi.getter(name="tier3StandardCompressionMethod")
    def tier3_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier3_standard_compression_method")

    @property
    @pulumi.getter(name="tier3StandardCompressionValue")
    def tier3_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier3_standard_compression_value")

    @property
    @pulumi.getter(name="titleAicMobile")
    def title_aic_mobile(self) -> Optional[str]:
        return pulumi.get(self, "title_aic_mobile")

    @property
    @pulumi.getter(name="titleAicNonmobile")
    def title_aic_nonmobile(self) -> Optional[str]:
        return pulumi.get(self, "title_aic_nonmobile")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAdvancedResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAdvancedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            xml=xml,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             xml: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if description is not None:
            _setter("description", description)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if xml is not None:
            _setter("xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAggregatedReportingResult(dict):
    def __init__(__self__, *,
                 attribute1: Optional[str] = None,
                 attribute2: Optional[str] = None,
                 attribute3: Optional[str] = None,
                 attribute4: Optional[str] = None,
                 attributes_count: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 report_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAggregatedReportingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute1=attribute1,
            attribute2=attribute2,
            attribute3=attribute3,
            attribute4=attribute4,
            attributes_count=attributes_count,
            enabled=enabled,
            locked=locked,
            report_name=report_name,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute1: Optional[str] = None,
             attribute2: Optional[str] = None,
             attribute3: Optional[str] = None,
             attribute4: Optional[str] = None,
             attributes_count: Optional[int] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             report_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'attributesCount' in kwargs:
            attributes_count = kwargs['attributesCount']
        if 'reportName' in kwargs:
            report_name = kwargs['reportName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if attribute1 is not None:
            _setter("attribute1", attribute1)
        if attribute2 is not None:
            _setter("attribute2", attribute2)
        if attribute3 is not None:
            _setter("attribute3", attribute3)
        if attribute4 is not None:
            _setter("attribute4", attribute4)
        if attributes_count is not None:
            _setter("attributes_count", attributes_count)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if report_name is not None:
            _setter("report_name", report_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def attribute1(self) -> Optional[str]:
        return pulumi.get(self, "attribute1")

    @property
    @pulumi.getter
    def attribute2(self) -> Optional[str]:
        return pulumi.get(self, "attribute2")

    @property
    @pulumi.getter
    def attribute3(self) -> Optional[str]:
        return pulumi.get(self, "attribute3")

    @property
    @pulumi.getter
    def attribute4(self) -> Optional[str]:
        return pulumi.get(self, "attribute4")

    @property
    @pulumi.getter(name="attributesCount")
    def attributes_count(self) -> Optional[int]:
        return pulumi.get(self, "attributes_count")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="reportName")
    def report_name(self) -> Optional[str]:
        return pulumi.get(self, "report_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagResult(dict):
    def __init__(__self__, *,
                 include_tags_attribute: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match_hostname: Optional[str] = None,
                 replace_all: Optional[bool] = None,
                 replacement_hostname: Optional[str] = None,
                 scope: Optional[str] = None,
                 tags_attribute: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            include_tags_attribute=include_tags_attribute,
            locked=locked,
            match_hostname=match_hostname,
            replace_all=replace_all,
            replacement_hostname=replacement_hostname,
            scope=scope,
            tags_attribute=tags_attribute,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             include_tags_attribute: Optional[bool] = None,
             locked: Optional[bool] = None,
             match_hostname: Optional[str] = None,
             replace_all: Optional[bool] = None,
             replacement_hostname: Optional[str] = None,
             scope: Optional[str] = None,
             tags_attribute: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'includeTagsAttribute' in kwargs:
            include_tags_attribute = kwargs['includeTagsAttribute']
        if 'matchHostname' in kwargs:
            match_hostname = kwargs['matchHostname']
        if 'replaceAll' in kwargs:
            replace_all = kwargs['replaceAll']
        if 'replacementHostname' in kwargs:
            replacement_hostname = kwargs['replacementHostname']
        if 'tagsAttribute' in kwargs:
            tags_attribute = kwargs['tagsAttribute']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if include_tags_attribute is not None:
            _setter("include_tags_attribute", include_tags_attribute)
        if locked is not None:
            _setter("locked", locked)
        if match_hostname is not None:
            _setter("match_hostname", match_hostname)
        if replace_all is not None:
            _setter("replace_all", replace_all)
        if replacement_hostname is not None:
            _setter("replacement_hostname", replacement_hostname)
        if scope is not None:
            _setter("scope", scope)
        if tags_attribute is not None:
            _setter("tags_attribute", tags_attribute)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="includeTagsAttribute")
    def include_tags_attribute(self) -> Optional[bool]:
        return pulumi.get(self, "include_tags_attribute")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchHostname")
    def match_hostname(self) -> Optional[str]:
        return pulumi.get(self, "match_hostname")

    @property
    @pulumi.getter(name="replaceAll")
    def replace_all(self) -> Optional[bool]:
        return pulumi.get(self, "replace_all")

    @property
    @pulumi.getter(name="replacementHostname")
    def replacement_hostname(self) -> Optional[str]:
        return pulumi.get(self, "replacement_hostname")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="tagsAttribute")
    def tags_attribute(self) -> Optional[str]:
        return pulumi.get(self, "tags_attribute")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllHttpInCacheHierarchyResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAllHttpInCacheHierarchyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowCloudletsOriginsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 honor_base_directory: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 purge_origin_query_parameter: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAllowCloudletsOriginsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            honor_base_directory=honor_base_directory,
            locked=locked,
            purge_origin_query_parameter=purge_origin_query_parameter,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             honor_base_directory: Optional[bool] = None,
             locked: Optional[bool] = None,
             purge_origin_query_parameter: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'honorBaseDirectory' in kwargs:
            honor_base_directory = kwargs['honorBaseDirectory']
        if 'purgeOriginQueryParameter' in kwargs:
            purge_origin_query_parameter = kwargs['purgeOriginQueryParameter']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if honor_base_directory is not None:
            _setter("honor_base_directory", honor_base_directory)
        if locked is not None:
            _setter("locked", locked)
        if purge_origin_query_parameter is not None:
            _setter("purge_origin_query_parameter", purge_origin_query_parameter)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="honorBaseDirectory")
    def honor_base_directory(self) -> Optional[bool]:
        return pulumi.get(self, "honor_base_directory")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="purgeOriginQueryParameter")
    def purge_origin_query_parameter(self) -> Optional[str]:
        return pulumi.get(self, "purge_origin_query_parameter")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowDeleteResult(dict):
    def __init__(__self__, *,
                 allow_body: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAllowDeleteResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_body=allow_body,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_body: Optional[bool] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowBody' in kwargs:
            allow_body = kwargs['allowBody']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if allow_body is not None:
            _setter("allow_body", allow_body)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowBody")
    def allow_body(self) -> Optional[bool]:
        return pulumi.get(self, "allow_body")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsCacheKeySharingResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsCacheKeySharingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsDowngradeResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsDowngradeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowOptionsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAllowOptionsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowPatchResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAllowPatchResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowPostResult(dict):
    def __init__(__self__, *,
                 allow_without_content_length: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAllowPostResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_without_content_length=allow_without_content_length,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_without_content_length: Optional[bool] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowWithoutContentLength' in kwargs:
            allow_without_content_length = kwargs['allowWithoutContentLength']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if allow_without_content_length is not None:
            _setter("allow_without_content_length", allow_without_content_length)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowWithoutContentLength")
    def allow_without_content_length(self) -> Optional[bool]:
        return pulumi.get(self, "allow_without_content_length")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowPutResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAllowPutResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowTransferEncodingResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAllowTransferEncodingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAltSvcHeaderResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 max_age: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAltSvcHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            max_age=max_age,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             max_age: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxAge' in kwargs:
            max_age = kwargs['maxAge']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if max_age is not None:
            _setter("max_age", max_age)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[int]:
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationResult(dict):
    def __init__(__self__, *,
                 alternate_response_cache_ttl: Optional[int] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationNetStorageResult'] = None,
                 net_storage_path: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 throttled_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeResult'] = None,
                 throttled_status_code: Optional[int] = None,
                 use_throttled_cp_code: Optional[bool] = None,
                 use_throttled_status_code: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alternate_response_cache_ttl=alternate_response_cache_ttl,
            cloudlet_policy=cloudlet_policy,
            enabled=enabled,
            label=label,
            locked=locked,
            net_storage=net_storage,
            net_storage_path=net_storage_path,
            template_uuid=template_uuid,
            throttled_cp_code=throttled_cp_code,
            throttled_status_code=throttled_status_code,
            use_throttled_cp_code=use_throttled_cp_code,
            use_throttled_status_code=use_throttled_status_code,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alternate_response_cache_ttl: Optional[int] = None,
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationCloudletPolicyResult'] = None,
             enabled: Optional[bool] = None,
             label: Optional[str] = None,
             locked: Optional[bool] = None,
             net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationNetStorageResult'] = None,
             net_storage_path: Optional[str] = None,
             template_uuid: Optional[str] = None,
             throttled_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeResult'] = None,
             throttled_status_code: Optional[int] = None,
             use_throttled_cp_code: Optional[bool] = None,
             use_throttled_status_code: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'alternateResponseCacheTtl' in kwargs:
            alternate_response_cache_ttl = kwargs['alternateResponseCacheTtl']
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'netStorage' in kwargs:
            net_storage = kwargs['netStorage']
        if 'netStoragePath' in kwargs:
            net_storage_path = kwargs['netStoragePath']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'throttledCpCode' in kwargs:
            throttled_cp_code = kwargs['throttledCpCode']
        if 'throttledStatusCode' in kwargs:
            throttled_status_code = kwargs['throttledStatusCode']
        if 'useThrottledCpCode' in kwargs:
            use_throttled_cp_code = kwargs['useThrottledCpCode']
        if 'useThrottledStatusCode' in kwargs:
            use_throttled_status_code = kwargs['useThrottledStatusCode']

        if alternate_response_cache_ttl is not None:
            _setter("alternate_response_cache_ttl", alternate_response_cache_ttl)
        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if label is not None:
            _setter("label", label)
        if locked is not None:
            _setter("locked", locked)
        if net_storage is not None:
            _setter("net_storage", net_storage)
        if net_storage_path is not None:
            _setter("net_storage_path", net_storage_path)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if throttled_cp_code is not None:
            _setter("throttled_cp_code", throttled_cp_code)
        if throttled_status_code is not None:
            _setter("throttled_status_code", throttled_status_code)
        if use_throttled_cp_code is not None:
            _setter("use_throttled_cp_code", use_throttled_cp_code)
        if use_throttled_status_code is not None:
            _setter("use_throttled_status_code", use_throttled_status_code)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="alternateResponseCacheTtl")
    def alternate_response_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "alternate_response_cache_ttl")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationNetStorageResult']:
        return pulumi.get(self, "net_storage")

    @property
    @pulumi.getter(name="netStoragePath")
    def net_storage_path(self) -> Optional[str]:
        return pulumi.get(self, "net_storage_path")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="throttledCpCode")
    def throttled_cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeResult']:
        return pulumi.get(self, "throttled_cp_code")

    @property
    @pulumi.getter(name="throttledStatusCode")
    def throttled_status_code(self) -> Optional[int]:
        return pulumi.get(self, "throttled_status_code")

    @property
    @pulumi.getter(name="useThrottledCpCode")
    def use_throttled_cp_code(self) -> Optional[bool]:
        return pulumi.get(self, "use_throttled_cp_code")

    @property
    @pulumi.getter(name="useThrottledStatusCode")
    def use_throttled_status_code(self) -> Optional[bool]:
        return pulumi.get(self, "use_throttled_status_code")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationNetStorageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code=cp_code,
            download_domain_name=download_domain_name,
            g2o_token=g2o_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code: Optional[int] = None,
             download_domain_name: Optional[str] = None,
             g2o_token: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCode' in kwargs:
            cp_code = kwargs['cpCode']
        if 'downloadDomainName' in kwargs:
            download_domain_name = kwargs['downloadDomainName']
        if 'g2oToken' in kwargs:
            g2o_token = kwargs['g2oToken']

        if cp_code is not None:
            _setter("cp_code", cp_code)
        if download_domain_name is not None:
            _setter("download_domain_name", download_domain_name)
        if g2o_token is not None:
            _setter("g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerResult(dict):
    def __init__(__self__, *,
                 all_down_net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerAllDownNetStorageResult'] = None,
                 all_down_net_storage_file: Optional[str] = None,
                 all_down_status_code: Optional[str] = None,
                 all_down_title: Optional[str] = None,
                 allow_cache_prefresh: Optional[bool] = None,
                 cached_content_title: Optional[str] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 failover_attempts_threshold: Optional[int] = None,
                 failover_mode: Optional[str] = None,
                 failover_origin_maps: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerFailoverOriginMapResult']] = None,
                 failover_status_codes: Optional[Sequence[str]] = None,
                 failover_title: Optional[str] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 origin_cookie_name: Optional[str] = None,
                 specify_stickiness_cookie_domain: Optional[bool] = None,
                 stickiness_cookie_automatic_salt: Optional[bool] = None,
                 stickiness_cookie_domain: Optional[str] = None,
                 stickiness_cookie_salt: Optional[str] = None,
                 stickiness_cookie_set_http_only_flag: Optional[bool] = None,
                 stickiness_cookie_type: Optional[str] = None,
                 stickiness_duration: Optional[str] = None,
                 stickiness_expiration_date: Optional[str] = None,
                 stickiness_refresh: Optional[bool] = None,
                 stickiness_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all_down_net_storage=all_down_net_storage,
            all_down_net_storage_file=all_down_net_storage_file,
            all_down_status_code=all_down_status_code,
            all_down_title=all_down_title,
            allow_cache_prefresh=allow_cache_prefresh,
            cached_content_title=cached_content_title,
            cloudlet_policy=cloudlet_policy,
            enabled=enabled,
            failover_attempts_threshold=failover_attempts_threshold,
            failover_mode=failover_mode,
            failover_origin_maps=failover_origin_maps,
            failover_status_codes=failover_status_codes,
            failover_title=failover_title,
            label=label,
            locked=locked,
            origin_cookie_name=origin_cookie_name,
            specify_stickiness_cookie_domain=specify_stickiness_cookie_domain,
            stickiness_cookie_automatic_salt=stickiness_cookie_automatic_salt,
            stickiness_cookie_domain=stickiness_cookie_domain,
            stickiness_cookie_salt=stickiness_cookie_salt,
            stickiness_cookie_set_http_only_flag=stickiness_cookie_set_http_only_flag,
            stickiness_cookie_type=stickiness_cookie_type,
            stickiness_duration=stickiness_duration,
            stickiness_expiration_date=stickiness_expiration_date,
            stickiness_refresh=stickiness_refresh,
            stickiness_title=stickiness_title,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all_down_net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerAllDownNetStorageResult'] = None,
             all_down_net_storage_file: Optional[str] = None,
             all_down_status_code: Optional[str] = None,
             all_down_title: Optional[str] = None,
             allow_cache_prefresh: Optional[bool] = None,
             cached_content_title: Optional[str] = None,
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerCloudletPolicyResult'] = None,
             enabled: Optional[bool] = None,
             failover_attempts_threshold: Optional[int] = None,
             failover_mode: Optional[str] = None,
             failover_origin_maps: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerFailoverOriginMapResult']] = None,
             failover_status_codes: Optional[Sequence[str]] = None,
             failover_title: Optional[str] = None,
             label: Optional[str] = None,
             locked: Optional[bool] = None,
             origin_cookie_name: Optional[str] = None,
             specify_stickiness_cookie_domain: Optional[bool] = None,
             stickiness_cookie_automatic_salt: Optional[bool] = None,
             stickiness_cookie_domain: Optional[str] = None,
             stickiness_cookie_salt: Optional[str] = None,
             stickiness_cookie_set_http_only_flag: Optional[bool] = None,
             stickiness_cookie_type: Optional[str] = None,
             stickiness_duration: Optional[str] = None,
             stickiness_expiration_date: Optional[str] = None,
             stickiness_refresh: Optional[bool] = None,
             stickiness_title: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allDownNetStorage' in kwargs:
            all_down_net_storage = kwargs['allDownNetStorage']
        if 'allDownNetStorageFile' in kwargs:
            all_down_net_storage_file = kwargs['allDownNetStorageFile']
        if 'allDownStatusCode' in kwargs:
            all_down_status_code = kwargs['allDownStatusCode']
        if 'allDownTitle' in kwargs:
            all_down_title = kwargs['allDownTitle']
        if 'allowCachePrefresh' in kwargs:
            allow_cache_prefresh = kwargs['allowCachePrefresh']
        if 'cachedContentTitle' in kwargs:
            cached_content_title = kwargs['cachedContentTitle']
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'failoverAttemptsThreshold' in kwargs:
            failover_attempts_threshold = kwargs['failoverAttemptsThreshold']
        if 'failoverMode' in kwargs:
            failover_mode = kwargs['failoverMode']
        if 'failoverOriginMaps' in kwargs:
            failover_origin_maps = kwargs['failoverOriginMaps']
        if 'failoverStatusCodes' in kwargs:
            failover_status_codes = kwargs['failoverStatusCodes']
        if 'failoverTitle' in kwargs:
            failover_title = kwargs['failoverTitle']
        if 'originCookieName' in kwargs:
            origin_cookie_name = kwargs['originCookieName']
        if 'specifyStickinessCookieDomain' in kwargs:
            specify_stickiness_cookie_domain = kwargs['specifyStickinessCookieDomain']
        if 'stickinessCookieAutomaticSalt' in kwargs:
            stickiness_cookie_automatic_salt = kwargs['stickinessCookieAutomaticSalt']
        if 'stickinessCookieDomain' in kwargs:
            stickiness_cookie_domain = kwargs['stickinessCookieDomain']
        if 'stickinessCookieSalt' in kwargs:
            stickiness_cookie_salt = kwargs['stickinessCookieSalt']
        if 'stickinessCookieSetHttpOnlyFlag' in kwargs:
            stickiness_cookie_set_http_only_flag = kwargs['stickinessCookieSetHttpOnlyFlag']
        if 'stickinessCookieType' in kwargs:
            stickiness_cookie_type = kwargs['stickinessCookieType']
        if 'stickinessDuration' in kwargs:
            stickiness_duration = kwargs['stickinessDuration']
        if 'stickinessExpirationDate' in kwargs:
            stickiness_expiration_date = kwargs['stickinessExpirationDate']
        if 'stickinessRefresh' in kwargs:
            stickiness_refresh = kwargs['stickinessRefresh']
        if 'stickinessTitle' in kwargs:
            stickiness_title = kwargs['stickinessTitle']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if all_down_net_storage is not None:
            _setter("all_down_net_storage", all_down_net_storage)
        if all_down_net_storage_file is not None:
            _setter("all_down_net_storage_file", all_down_net_storage_file)
        if all_down_status_code is not None:
            _setter("all_down_status_code", all_down_status_code)
        if all_down_title is not None:
            _setter("all_down_title", all_down_title)
        if allow_cache_prefresh is not None:
            _setter("allow_cache_prefresh", allow_cache_prefresh)
        if cached_content_title is not None:
            _setter("cached_content_title", cached_content_title)
        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if failover_attempts_threshold is not None:
            _setter("failover_attempts_threshold", failover_attempts_threshold)
        if failover_mode is not None:
            _setter("failover_mode", failover_mode)
        if failover_origin_maps is not None:
            _setter("failover_origin_maps", failover_origin_maps)
        if failover_status_codes is not None:
            _setter("failover_status_codes", failover_status_codes)
        if failover_title is not None:
            _setter("failover_title", failover_title)
        if label is not None:
            _setter("label", label)
        if locked is not None:
            _setter("locked", locked)
        if origin_cookie_name is not None:
            _setter("origin_cookie_name", origin_cookie_name)
        if specify_stickiness_cookie_domain is not None:
            _setter("specify_stickiness_cookie_domain", specify_stickiness_cookie_domain)
        if stickiness_cookie_automatic_salt is not None:
            _setter("stickiness_cookie_automatic_salt", stickiness_cookie_automatic_salt)
        if stickiness_cookie_domain is not None:
            _setter("stickiness_cookie_domain", stickiness_cookie_domain)
        if stickiness_cookie_salt is not None:
            _setter("stickiness_cookie_salt", stickiness_cookie_salt)
        if stickiness_cookie_set_http_only_flag is not None:
            _setter("stickiness_cookie_set_http_only_flag", stickiness_cookie_set_http_only_flag)
        if stickiness_cookie_type is not None:
            _setter("stickiness_cookie_type", stickiness_cookie_type)
        if stickiness_duration is not None:
            _setter("stickiness_duration", stickiness_duration)
        if stickiness_expiration_date is not None:
            _setter("stickiness_expiration_date", stickiness_expiration_date)
        if stickiness_refresh is not None:
            _setter("stickiness_refresh", stickiness_refresh)
        if stickiness_title is not None:
            _setter("stickiness_title", stickiness_title)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allDownNetStorage")
    def all_down_net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerAllDownNetStorageResult']:
        return pulumi.get(self, "all_down_net_storage")

    @property
    @pulumi.getter(name="allDownNetStorageFile")
    def all_down_net_storage_file(self) -> Optional[str]:
        return pulumi.get(self, "all_down_net_storage_file")

    @property
    @pulumi.getter(name="allDownStatusCode")
    def all_down_status_code(self) -> Optional[str]:
        return pulumi.get(self, "all_down_status_code")

    @property
    @pulumi.getter(name="allDownTitle")
    def all_down_title(self) -> Optional[str]:
        return pulumi.get(self, "all_down_title")

    @property
    @pulumi.getter(name="allowCachePrefresh")
    def allow_cache_prefresh(self) -> Optional[bool]:
        return pulumi.get(self, "allow_cache_prefresh")

    @property
    @pulumi.getter(name="cachedContentTitle")
    def cached_content_title(self) -> Optional[str]:
        return pulumi.get(self, "cached_content_title")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failoverAttemptsThreshold")
    def failover_attempts_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failover_attempts_threshold")

    @property
    @pulumi.getter(name="failoverMode")
    def failover_mode(self) -> Optional[str]:
        return pulumi.get(self, "failover_mode")

    @property
    @pulumi.getter(name="failoverOriginMaps")
    def failover_origin_maps(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerFailoverOriginMapResult']]:
        return pulumi.get(self, "failover_origin_maps")

    @property
    @pulumi.getter(name="failoverStatusCodes")
    def failover_status_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "failover_status_codes")

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originCookieName")
    def origin_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "origin_cookie_name")

    @property
    @pulumi.getter(name="specifyStickinessCookieDomain")
    def specify_stickiness_cookie_domain(self) -> Optional[bool]:
        return pulumi.get(self, "specify_stickiness_cookie_domain")

    @property
    @pulumi.getter(name="stickinessCookieAutomaticSalt")
    def stickiness_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_cookie_automatic_salt")

    @property
    @pulumi.getter(name="stickinessCookieDomain")
    def stickiness_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_domain")

    @property
    @pulumi.getter(name="stickinessCookieSalt")
    def stickiness_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_salt")

    @property
    @pulumi.getter(name="stickinessCookieSetHttpOnlyFlag")
    def stickiness_cookie_set_http_only_flag(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_cookie_set_http_only_flag")

    @property
    @pulumi.getter(name="stickinessCookieType")
    def stickiness_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_type")

    @property
    @pulumi.getter(name="stickinessDuration")
    def stickiness_duration(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_duration")

    @property
    @pulumi.getter(name="stickinessExpirationDate")
    def stickiness_expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_expiration_date")

    @property
    @pulumi.getter(name="stickinessRefresh")
    def stickiness_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_refresh")

    @property
    @pulumi.getter(name="stickinessTitle")
    def stickiness_title(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_title")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerAllDownNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerAllDownNetStorageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code=cp_code,
            download_domain_name=download_domain_name,
            g2o_token=g2o_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code: Optional[int] = None,
             download_domain_name: Optional[str] = None,
             g2o_token: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCode' in kwargs:
            cp_code = kwargs['cpCode']
        if 'downloadDomainName' in kwargs:
            download_domain_name = kwargs['downloadDomainName']
        if 'g2oToken' in kwargs:
            g2o_token = kwargs['g2oToken']

        if cp_code is not None:
            _setter("cp_code", cp_code)
        if download_domain_name is not None:
            _setter("download_domain_name", download_domain_name)
        if g2o_token is not None:
            _setter("g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerFailoverOriginMapResult(dict):
    def __init__(__self__, *,
                 from_origin_id: Optional[str] = None,
                 to_origin_ids: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerFailoverOriginMapResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_origin_id=from_origin_id,
            to_origin_ids=to_origin_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_origin_id: Optional[str] = None,
             to_origin_ids: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fromOriginId' in kwargs:
            from_origin_id = kwargs['fromOriginId']
        if 'toOriginIds' in kwargs:
            to_origin_ids = kwargs['toOriginIds']

        if from_origin_id is not None:
            _setter("from_origin_id", from_origin_id)
        if to_origin_ids is not None:
            _setter("to_origin_ids", to_origin_ids)

    @property
    @pulumi.getter(name="fromOriginId")
    def from_origin_id(self) -> Optional[str]:
        return pulumi.get(self, "from_origin_id")

    @property
    @pulumi.getter(name="toOriginIds")
    def to_origin_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "to_origin_ids")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 population_cookie_automatic_salt: Optional[bool] = None,
                 population_cookie_domain: Optional[str] = None,
                 population_cookie_include_rule_name: Optional[bool] = None,
                 population_cookie_salt: Optional[str] = None,
                 population_cookie_type: Optional[str] = None,
                 population_duration: Optional[str] = None,
                 population_refresh: Optional[bool] = None,
                 population_title: Optional[str] = None,
                 segment_tracking_cookie_name: Optional[str] = None,
                 segment_tracking_custom_header: Optional[str] = None,
                 segment_tracking_method: Optional[str] = None,
                 segment_tracking_query_param: Optional[str] = None,
                 segment_tracking_title: Optional[str] = None,
                 specify_population_cookie_domain: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloudlet_policy=cloudlet_policy,
            cloudlet_shared_policy=cloudlet_shared_policy,
            enabled=enabled,
            is_shared_policy=is_shared_policy,
            label=label,
            locked=locked,
            population_cookie_automatic_salt=population_cookie_automatic_salt,
            population_cookie_domain=population_cookie_domain,
            population_cookie_include_rule_name=population_cookie_include_rule_name,
            population_cookie_salt=population_cookie_salt,
            population_cookie_type=population_cookie_type,
            population_duration=population_duration,
            population_refresh=population_refresh,
            population_title=population_title,
            segment_tracking_cookie_name=segment_tracking_cookie_name,
            segment_tracking_custom_header=segment_tracking_custom_header,
            segment_tracking_method=segment_tracking_method,
            segment_tracking_query_param=segment_tracking_query_param,
            segment_tracking_title=segment_tracking_title,
            specify_population_cookie_domain=specify_population_cookie_domain,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationCloudletPolicyResult'] = None,
             cloudlet_shared_policy: Optional[int] = None,
             enabled: Optional[bool] = None,
             is_shared_policy: Optional[bool] = None,
             label: Optional[str] = None,
             locked: Optional[bool] = None,
             population_cookie_automatic_salt: Optional[bool] = None,
             population_cookie_domain: Optional[str] = None,
             population_cookie_include_rule_name: Optional[bool] = None,
             population_cookie_salt: Optional[str] = None,
             population_cookie_type: Optional[str] = None,
             population_duration: Optional[str] = None,
             population_refresh: Optional[bool] = None,
             population_title: Optional[str] = None,
             segment_tracking_cookie_name: Optional[str] = None,
             segment_tracking_custom_header: Optional[str] = None,
             segment_tracking_method: Optional[str] = None,
             segment_tracking_query_param: Optional[str] = None,
             segment_tracking_title: Optional[str] = None,
             specify_population_cookie_domain: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'cloudletSharedPolicy' in kwargs:
            cloudlet_shared_policy = kwargs['cloudletSharedPolicy']
        if 'isSharedPolicy' in kwargs:
            is_shared_policy = kwargs['isSharedPolicy']
        if 'populationCookieAutomaticSalt' in kwargs:
            population_cookie_automatic_salt = kwargs['populationCookieAutomaticSalt']
        if 'populationCookieDomain' in kwargs:
            population_cookie_domain = kwargs['populationCookieDomain']
        if 'populationCookieIncludeRuleName' in kwargs:
            population_cookie_include_rule_name = kwargs['populationCookieIncludeRuleName']
        if 'populationCookieSalt' in kwargs:
            population_cookie_salt = kwargs['populationCookieSalt']
        if 'populationCookieType' in kwargs:
            population_cookie_type = kwargs['populationCookieType']
        if 'populationDuration' in kwargs:
            population_duration = kwargs['populationDuration']
        if 'populationRefresh' in kwargs:
            population_refresh = kwargs['populationRefresh']
        if 'populationTitle' in kwargs:
            population_title = kwargs['populationTitle']
        if 'segmentTrackingCookieName' in kwargs:
            segment_tracking_cookie_name = kwargs['segmentTrackingCookieName']
        if 'segmentTrackingCustomHeader' in kwargs:
            segment_tracking_custom_header = kwargs['segmentTrackingCustomHeader']
        if 'segmentTrackingMethod' in kwargs:
            segment_tracking_method = kwargs['segmentTrackingMethod']
        if 'segmentTrackingQueryParam' in kwargs:
            segment_tracking_query_param = kwargs['segmentTrackingQueryParam']
        if 'segmentTrackingTitle' in kwargs:
            segment_tracking_title = kwargs['segmentTrackingTitle']
        if 'specifyPopulationCookieDomain' in kwargs:
            specify_population_cookie_domain = kwargs['specifyPopulationCookieDomain']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            _setter("cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if is_shared_policy is not None:
            _setter("is_shared_policy", is_shared_policy)
        if label is not None:
            _setter("label", label)
        if locked is not None:
            _setter("locked", locked)
        if population_cookie_automatic_salt is not None:
            _setter("population_cookie_automatic_salt", population_cookie_automatic_salt)
        if population_cookie_domain is not None:
            _setter("population_cookie_domain", population_cookie_domain)
        if population_cookie_include_rule_name is not None:
            _setter("population_cookie_include_rule_name", population_cookie_include_rule_name)
        if population_cookie_salt is not None:
            _setter("population_cookie_salt", population_cookie_salt)
        if population_cookie_type is not None:
            _setter("population_cookie_type", population_cookie_type)
        if population_duration is not None:
            _setter("population_duration", population_duration)
        if population_refresh is not None:
            _setter("population_refresh", population_refresh)
        if population_title is not None:
            _setter("population_title", population_title)
        if segment_tracking_cookie_name is not None:
            _setter("segment_tracking_cookie_name", segment_tracking_cookie_name)
        if segment_tracking_custom_header is not None:
            _setter("segment_tracking_custom_header", segment_tracking_custom_header)
        if segment_tracking_method is not None:
            _setter("segment_tracking_method", segment_tracking_method)
        if segment_tracking_query_param is not None:
            _setter("segment_tracking_query_param", segment_tracking_query_param)
        if segment_tracking_title is not None:
            _setter("segment_tracking_title", segment_tracking_title)
        if specify_population_cookie_domain is not None:
            _setter("specify_population_cookie_domain", specify_population_cookie_domain)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="populationCookieAutomaticSalt")
    def population_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "population_cookie_automatic_salt")

    @property
    @pulumi.getter(name="populationCookieDomain")
    def population_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_domain")

    @property
    @pulumi.getter(name="populationCookieIncludeRuleName")
    def population_cookie_include_rule_name(self) -> Optional[bool]:
        return pulumi.get(self, "population_cookie_include_rule_name")

    @property
    @pulumi.getter(name="populationCookieSalt")
    def population_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_salt")

    @property
    @pulumi.getter(name="populationCookieType")
    def population_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_type")

    @property
    @pulumi.getter(name="populationDuration")
    def population_duration(self) -> Optional[str]:
        return pulumi.get(self, "population_duration")

    @property
    @pulumi.getter(name="populationRefresh")
    def population_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "population_refresh")

    @property
    @pulumi.getter(name="populationTitle")
    def population_title(self) -> Optional[str]:
        return pulumi.get(self, "population_title")

    @property
    @pulumi.getter(name="segmentTrackingCookieName")
    def segment_tracking_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_cookie_name")

    @property
    @pulumi.getter(name="segmentTrackingCustomHeader")
    def segment_tracking_custom_header(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_custom_header")

    @property
    @pulumi.getter(name="segmentTrackingMethod")
    def segment_tracking_method(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_method")

    @property
    @pulumi.getter(name="segmentTrackingQueryParam")
    def segment_tracking_query_param(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_query_param")

    @property
    @pulumi.getter(name="segmentTrackingTitle")
    def segment_tracking_title(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_title")

    @property
    @pulumi.getter(name="specifyPopulationCookieDomain")
    def specify_population_cookie_domain(self) -> Optional[bool]:
        return pulumi.get(self, "specify_population_cookie_domain")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAutoDomainValidationResult(dict):
    def __init__(__self__, *,
                 autodv: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorAutoDomainValidationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            autodv=autodv,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             autodv: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if autodv is not None:
            _setter("autodv", autodv)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def autodv(self) -> Optional[str]:
        return pulumi.get(self, "autodv")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorBaseDirectoryResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorBaseDirectoryResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorBossBeaconingResult(dict):
    def __init__(__self__, *,
                 conditional_error_pattern: Optional[str] = None,
                 conditional_http_statuses: Optional[Sequence[str]] = None,
                 conditional_sampling_frequency: Optional[str] = None,
                 cpcodes: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 forward_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 request_type: Optional[str] = None,
                 sampling_frequency: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorBossBeaconingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_error_pattern=conditional_error_pattern,
            conditional_http_statuses=conditional_http_statuses,
            conditional_sampling_frequency=conditional_sampling_frequency,
            cpcodes=cpcodes,
            enabled=enabled,
            forward_type=forward_type,
            locked=locked,
            request_type=request_type,
            sampling_frequency=sampling_frequency,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_error_pattern: Optional[str] = None,
             conditional_http_statuses: Optional[Sequence[str]] = None,
             conditional_sampling_frequency: Optional[str] = None,
             cpcodes: Optional[str] = None,
             enabled: Optional[bool] = None,
             forward_type: Optional[str] = None,
             locked: Optional[bool] = None,
             request_type: Optional[str] = None,
             sampling_frequency: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'conditionalErrorPattern' in kwargs:
            conditional_error_pattern = kwargs['conditionalErrorPattern']
        if 'conditionalHttpStatuses' in kwargs:
            conditional_http_statuses = kwargs['conditionalHttpStatuses']
        if 'conditionalSamplingFrequency' in kwargs:
            conditional_sampling_frequency = kwargs['conditionalSamplingFrequency']
        if 'forwardType' in kwargs:
            forward_type = kwargs['forwardType']
        if 'requestType' in kwargs:
            request_type = kwargs['requestType']
        if 'samplingFrequency' in kwargs:
            sampling_frequency = kwargs['samplingFrequency']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if conditional_error_pattern is not None:
            _setter("conditional_error_pattern", conditional_error_pattern)
        if conditional_http_statuses is not None:
            _setter("conditional_http_statuses", conditional_http_statuses)
        if conditional_sampling_frequency is not None:
            _setter("conditional_sampling_frequency", conditional_sampling_frequency)
        if cpcodes is not None:
            _setter("cpcodes", cpcodes)
        if enabled is not None:
            _setter("enabled", enabled)
        if forward_type is not None:
            _setter("forward_type", forward_type)
        if locked is not None:
            _setter("locked", locked)
        if request_type is not None:
            _setter("request_type", request_type)
        if sampling_frequency is not None:
            _setter("sampling_frequency", sampling_frequency)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="conditionalErrorPattern")
    def conditional_error_pattern(self) -> Optional[str]:
        return pulumi.get(self, "conditional_error_pattern")

    @property
    @pulumi.getter(name="conditionalHttpStatuses")
    def conditional_http_statuses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "conditional_http_statuses")

    @property
    @pulumi.getter(name="conditionalSamplingFrequency")
    def conditional_sampling_frequency(self) -> Optional[str]:
        return pulumi.get(self, "conditional_sampling_frequency")

    @property
    @pulumi.getter
    def cpcodes(self) -> Optional[str]:
        return pulumi.get(self, "cpcodes")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forwardType")
    def forward_type(self) -> Optional[str]:
        return pulumi.get(self, "forward_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[str]:
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter(name="samplingFrequency")
    def sampling_frequency(self) -> Optional[str]:
        return pulumi.get(self, "sampling_frequency")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorBreadcrumbsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 logging_enabled: Optional[bool] = None,
                 opt_mode: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorBreadcrumbsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            logging_enabled=logging_enabled,
            opt_mode=opt_mode,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             logging_enabled: Optional[bool] = None,
             opt_mode: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'loggingEnabled' in kwargs:
            logging_enabled = kwargs['loggingEnabled']
        if 'optMode' in kwargs:
            opt_mode = kwargs['optMode']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if logging_enabled is not None:
            _setter("logging_enabled", logging_enabled)
        if opt_mode is not None:
            _setter("opt_mode", opt_mode)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="loggingEnabled")
    def logging_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "logging_enabled")

    @property
    @pulumi.getter(name="optMode")
    def opt_mode(self) -> Optional[bool]:
        return pulumi.get(self, "opt_mode")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorBreakConnectionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorBreakConnectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorBrotliResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorBrotliResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheErrorResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 preserve_stale: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCacheErrorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            preserve_stale=preserve_stale,
            template_uuid=template_uuid,
            ttl=ttl,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             preserve_stale: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             ttl: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'preserveStale' in kwargs:
            preserve_stale = kwargs['preserveStale']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if preserve_stale is not None:
            _setter("preserve_stale", preserve_stale)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if ttl is not None:
            _setter("ttl", ttl)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="preserveStale")
    def preserve_stale(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_stale")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheIdResult(dict):
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 include_value: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 optional: Optional[bool] = None,
                 rule: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCacheIdResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            elements=elements,
            include_value=include_value,
            locked=locked,
            optional=optional,
            rule=rule,
            template_uuid=template_uuid,
            uuid=uuid,
            variable_name=variable_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             elements: Optional[Sequence[str]] = None,
             include_value: Optional[bool] = None,
             locked: Optional[bool] = None,
             optional: Optional[bool] = None,
             rule: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             variable_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'includeValue' in kwargs:
            include_value = kwargs['includeValue']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'variableName' in kwargs:
            variable_name = kwargs['variableName']

        if elements is not None:
            _setter("elements", elements)
        if include_value is not None:
            _setter("include_value", include_value)
        if locked is not None:
            _setter("locked", locked)
        if optional is not None:
            _setter("optional", optional)
        if rule is not None:
            _setter("rule", rule)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if variable_name is not None:
            _setter("variable_name", variable_name)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter(name="includeValue")
    def include_value(self) -> Optional[bool]:
        return pulumi.get(self, "include_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter
    def rule(self) -> Optional[str]:
        return pulumi.get(self, "rule")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyIgnoreCaseResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyIgnoreCaseResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyQueryParamsResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 exact_match: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 parameters: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyQueryParamsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior=behavior,
            exact_match=exact_match,
            locked=locked,
            parameters=parameters,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior: Optional[str] = None,
             exact_match: Optional[bool] = None,
             locked: Optional[bool] = None,
             parameters: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'exactMatch' in kwargs:
            exact_match = kwargs['exactMatch']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if behavior is not None:
            _setter("behavior", behavior)
        if exact_match is not None:
            _setter("exact_match", exact_match)
        if locked is not None:
            _setter("locked", locked)
        if parameters is not None:
            _setter("parameters", parameters)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[bool]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyRewriteResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 purge_key: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyRewriteResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            purge_key=purge_key,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             purge_key: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'purgeKey' in kwargs:
            purge_key = kwargs['purgeKey']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if purge_key is not None:
            _setter("purge_key", purge_key)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="purgeKey")
    def purge_key(self) -> Optional[str]:
        return pulumi.get(self, "purge_key")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCachePostResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_body: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCachePostResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            use_body=use_body,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             use_body: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useBody' in kwargs:
            use_body = kwargs['useBody']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_body is not None:
            _setter("use_body", use_body)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useBody")
    def use_body(self) -> Optional[str]:
        return pulumi.get(self, "use_body")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheRedirectResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCacheRedirectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 tag: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            tag=tag,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             tag: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if tag is not None:
            _setter("tag", tag)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagVisibleResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagVisibleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior=behavior,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if behavior is not None:
            _setter("behavior", behavior)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCachingResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 cache_control_directives: Optional[str] = None,
                 cacheability_settings: Optional[str] = None,
                 default_ttl: Optional[str] = None,
                 enhanced_rfc_support: Optional[bool] = None,
                 expiration_settings: Optional[str] = None,
                 honor_max_age: Optional[bool] = None,
                 honor_must_revalidate: Optional[bool] = None,
                 honor_no_cache: Optional[bool] = None,
                 honor_no_store: Optional[bool] = None,
                 honor_private: Optional[bool] = None,
                 honor_proxy_revalidate: Optional[bool] = None,
                 honor_s_maxage: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 must_revalidate: Optional[bool] = None,
                 revalidation_settings: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCachingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior=behavior,
            cache_control_directives=cache_control_directives,
            cacheability_settings=cacheability_settings,
            default_ttl=default_ttl,
            enhanced_rfc_support=enhanced_rfc_support,
            expiration_settings=expiration_settings,
            honor_max_age=honor_max_age,
            honor_must_revalidate=honor_must_revalidate,
            honor_no_cache=honor_no_cache,
            honor_no_store=honor_no_store,
            honor_private=honor_private,
            honor_proxy_revalidate=honor_proxy_revalidate,
            honor_s_maxage=honor_s_maxage,
            locked=locked,
            must_revalidate=must_revalidate,
            revalidation_settings=revalidation_settings,
            template_uuid=template_uuid,
            ttl=ttl,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior: Optional[str] = None,
             cache_control_directives: Optional[str] = None,
             cacheability_settings: Optional[str] = None,
             default_ttl: Optional[str] = None,
             enhanced_rfc_support: Optional[bool] = None,
             expiration_settings: Optional[str] = None,
             honor_max_age: Optional[bool] = None,
             honor_must_revalidate: Optional[bool] = None,
             honor_no_cache: Optional[bool] = None,
             honor_no_store: Optional[bool] = None,
             honor_private: Optional[bool] = None,
             honor_proxy_revalidate: Optional[bool] = None,
             honor_s_maxage: Optional[bool] = None,
             locked: Optional[bool] = None,
             must_revalidate: Optional[bool] = None,
             revalidation_settings: Optional[str] = None,
             template_uuid: Optional[str] = None,
             ttl: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cacheControlDirectives' in kwargs:
            cache_control_directives = kwargs['cacheControlDirectives']
        if 'cacheabilitySettings' in kwargs:
            cacheability_settings = kwargs['cacheabilitySettings']
        if 'defaultTtl' in kwargs:
            default_ttl = kwargs['defaultTtl']
        if 'enhancedRfcSupport' in kwargs:
            enhanced_rfc_support = kwargs['enhancedRfcSupport']
        if 'expirationSettings' in kwargs:
            expiration_settings = kwargs['expirationSettings']
        if 'honorMaxAge' in kwargs:
            honor_max_age = kwargs['honorMaxAge']
        if 'honorMustRevalidate' in kwargs:
            honor_must_revalidate = kwargs['honorMustRevalidate']
        if 'honorNoCache' in kwargs:
            honor_no_cache = kwargs['honorNoCache']
        if 'honorNoStore' in kwargs:
            honor_no_store = kwargs['honorNoStore']
        if 'honorPrivate' in kwargs:
            honor_private = kwargs['honorPrivate']
        if 'honorProxyRevalidate' in kwargs:
            honor_proxy_revalidate = kwargs['honorProxyRevalidate']
        if 'honorSMaxage' in kwargs:
            honor_s_maxage = kwargs['honorSMaxage']
        if 'mustRevalidate' in kwargs:
            must_revalidate = kwargs['mustRevalidate']
        if 'revalidationSettings' in kwargs:
            revalidation_settings = kwargs['revalidationSettings']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if behavior is not None:
            _setter("behavior", behavior)
        if cache_control_directives is not None:
            _setter("cache_control_directives", cache_control_directives)
        if cacheability_settings is not None:
            _setter("cacheability_settings", cacheability_settings)
        if default_ttl is not None:
            _setter("default_ttl", default_ttl)
        if enhanced_rfc_support is not None:
            _setter("enhanced_rfc_support", enhanced_rfc_support)
        if expiration_settings is not None:
            _setter("expiration_settings", expiration_settings)
        if honor_max_age is not None:
            _setter("honor_max_age", honor_max_age)
        if honor_must_revalidate is not None:
            _setter("honor_must_revalidate", honor_must_revalidate)
        if honor_no_cache is not None:
            _setter("honor_no_cache", honor_no_cache)
        if honor_no_store is not None:
            _setter("honor_no_store", honor_no_store)
        if honor_private is not None:
            _setter("honor_private", honor_private)
        if honor_proxy_revalidate is not None:
            _setter("honor_proxy_revalidate", honor_proxy_revalidate)
        if honor_s_maxage is not None:
            _setter("honor_s_maxage", honor_s_maxage)
        if locked is not None:
            _setter("locked", locked)
        if must_revalidate is not None:
            _setter("must_revalidate", must_revalidate)
        if revalidation_settings is not None:
            _setter("revalidation_settings", revalidation_settings)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if ttl is not None:
            _setter("ttl", ttl)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter(name="cacheControlDirectives")
    def cache_control_directives(self) -> Optional[str]:
        return pulumi.get(self, "cache_control_directives")

    @property
    @pulumi.getter(name="cacheabilitySettings")
    def cacheability_settings(self) -> Optional[str]:
        return pulumi.get(self, "cacheability_settings")

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[str]:
        return pulumi.get(self, "default_ttl")

    @property
    @pulumi.getter(name="enhancedRfcSupport")
    def enhanced_rfc_support(self) -> Optional[bool]:
        return pulumi.get(self, "enhanced_rfc_support")

    @property
    @pulumi.getter(name="expirationSettings")
    def expiration_settings(self) -> Optional[str]:
        return pulumi.get(self, "expiration_settings")

    @property
    @pulumi.getter(name="honorMaxAge")
    def honor_max_age(self) -> Optional[bool]:
        return pulumi.get(self, "honor_max_age")

    @property
    @pulumi.getter(name="honorMustRevalidate")
    def honor_must_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "honor_must_revalidate")

    @property
    @pulumi.getter(name="honorNoCache")
    def honor_no_cache(self) -> Optional[bool]:
        return pulumi.get(self, "honor_no_cache")

    @property
    @pulumi.getter(name="honorNoStore")
    def honor_no_store(self) -> Optional[bool]:
        return pulumi.get(self, "honor_no_store")

    @property
    @pulumi.getter(name="honorPrivate")
    def honor_private(self) -> Optional[bool]:
        return pulumi.get(self, "honor_private")

    @property
    @pulumi.getter(name="honorProxyRevalidate")
    def honor_proxy_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "honor_proxy_revalidate")

    @property
    @pulumi.getter(name="honorSMaxage")
    def honor_s_maxage(self) -> Optional[bool]:
        return pulumi.get(self, "honor_s_maxage")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mustRevalidate")
    def must_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "must_revalidate")

    @property
    @pulumi.getter(name="revalidationSettings")
    def revalidation_settings(self) -> Optional[str]:
        return pulumi.get(self, "revalidation_settings")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCentralAuthorizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCentralAuthorizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorChaseRedirectsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 limit: Optional[str] = None,
                 locked: Optional[bool] = None,
                 serve404: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorChaseRedirectsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            limit=limit,
            locked=locked,
            serve404=serve404,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             limit: Optional[str] = None,
             locked: Optional[bool] = None,
             serve404: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if limit is not None:
            _setter("limit", limit)
        if locked is not None:
            _setter("locked", locked)
        if serve404 is not None:
            _setter("serve404", serve404)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def serve404(self) -> Optional[bool]:
        return pulumi.get(self, "serve404")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorClientCharacteristicsResult(dict):
    def __init__(__self__, *,
                 country: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorClientCharacteristicsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            country=country,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             country: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if country is not None:
            _setter("country", country)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCloudInterconnectsResult(dict):
    def __init__(__self__, *,
                 cloud_locations: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCloudInterconnectsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_locations=cloud_locations,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_locations: Optional[Sequence[str]] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudLocations' in kwargs:
            cloud_locations = kwargs['cloudLocations']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cloud_locations is not None:
            _setter("cloud_locations", cloud_locations)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cloudLocations")
    def cloud_locations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cloud_locations")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            location=location,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             location: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if location is not None:
            _setter("location", location)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperAdvancedResult(dict):
    def __init__(__self__, *,
                 custom_failover_map: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 failover_map: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperAdvancedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_failover_map=custom_failover_map,
            enabled=enabled,
            failover_map=failover_map,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_failover_map: Optional[str] = None,
             enabled: Optional[bool] = None,
             failover_map: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customFailoverMap' in kwargs:
            custom_failover_map = kwargs['customFailoverMap']
        if 'failoverMap' in kwargs:
            failover_map = kwargs['failoverMap']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if custom_failover_map is not None:
            _setter("custom_failover_map", custom_failover_map)
        if enabled is not None:
            _setter("enabled", enabled)
        if failover_map is not None:
            _setter("failover_map", failover_map)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="customFailoverMap")
    def custom_failover_map(self) -> Optional[str]:
        return pulumi.get(self, "custom_failover_map")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failoverMap")
    def failover_map(self) -> Optional[str]:
        return pulumi.get(self, "failover_map")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorConditionalOriginResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorConditionalOriginResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            origin_id=origin_id,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             origin_id: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'originId' in kwargs:
            origin_id = kwargs['originId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if origin_id is not None:
            _setter("origin_id", origin_id)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorConstructResponseResult(dict):
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 force_eviction: Optional[bool] = None,
                 ignore_purge: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorConstructResponseResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            body=body,
            enabled=enabled,
            force_eviction=force_eviction,
            ignore_purge=ignore_purge,
            locked=locked,
            response_code=response_code,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             body: Optional[str] = None,
             enabled: Optional[bool] = None,
             force_eviction: Optional[bool] = None,
             ignore_purge: Optional[bool] = None,
             locked: Optional[bool] = None,
             response_code: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'forceEviction' in kwargs:
            force_eviction = kwargs['forceEviction']
        if 'ignorePurge' in kwargs:
            ignore_purge = kwargs['ignorePurge']
        if 'responseCode' in kwargs:
            response_code = kwargs['responseCode']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if body is not None:
            _setter("body", body)
        if enabled is not None:
            _setter("enabled", enabled)
        if force_eviction is not None:
            _setter("force_eviction", force_eviction)
        if ignore_purge is not None:
            _setter("ignore_purge", ignore_purge)
        if locked is not None:
            _setter("locked", locked)
        if response_code is not None:
            _setter("response_code", response_code)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forceEviction")
    def force_eviction(self) -> Optional[bool]:
        return pulumi.get(self, "force_eviction")

    @property
    @pulumi.getter(name="ignorePurge")
    def ignore_purge(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_purge")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_size=catalog_size,
            content_type=content_type,
            locked=locked,
            object_size=object_size,
            popularity_distribution=popularity_distribution,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_size: Optional[str] = None,
             content_type: Optional[str] = None,
             locked: Optional[bool] = None,
             object_size: Optional[str] = None,
             popularity_distribution: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'catalogSize' in kwargs:
            catalog_size = kwargs['catalogSize']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'objectSize' in kwargs:
            object_size = kwargs['objectSize']
        if 'popularityDistribution' in kwargs:
            popularity_distribution = kwargs['popularityDistribution']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if catalog_size is not None:
            _setter("catalog_size", catalog_size)
        if content_type is not None:
            _setter("content_type", content_type)
        if locked is not None:
            _setter("locked", locked)
        if object_size is not None:
            _setter("object_size", object_size)
        if popularity_distribution is not None:
            _setter("popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsAmdResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_dash_custom: Optional[int] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hds_custom: Optional[int] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_hls_custom: Optional[float] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_duration_smooth_custom: Optional[float] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsAmdResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_size=catalog_size,
            content_type=content_type,
            dash=dash,
            hds=hds,
            hls=hls,
            locked=locked,
            popularity_distribution=popularity_distribution,
            segment_duration_dash=segment_duration_dash,
            segment_duration_dash_custom=segment_duration_dash_custom,
            segment_duration_hds=segment_duration_hds,
            segment_duration_hds_custom=segment_duration_hds_custom,
            segment_duration_hls=segment_duration_hls,
            segment_duration_hls_custom=segment_duration_hls_custom,
            segment_duration_smooth=segment_duration_smooth,
            segment_duration_smooth_custom=segment_duration_smooth_custom,
            segment_size_dash=segment_size_dash,
            segment_size_hds=segment_size_hds,
            segment_size_hls=segment_size_hls,
            segment_size_smooth=segment_size_smooth,
            smooth=smooth,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_size: Optional[str] = None,
             content_type: Optional[str] = None,
             dash: Optional[bool] = None,
             hds: Optional[bool] = None,
             hls: Optional[bool] = None,
             locked: Optional[bool] = None,
             popularity_distribution: Optional[str] = None,
             segment_duration_dash: Optional[str] = None,
             segment_duration_dash_custom: Optional[int] = None,
             segment_duration_hds: Optional[str] = None,
             segment_duration_hds_custom: Optional[int] = None,
             segment_duration_hls: Optional[str] = None,
             segment_duration_hls_custom: Optional[float] = None,
             segment_duration_smooth: Optional[str] = None,
             segment_duration_smooth_custom: Optional[float] = None,
             segment_size_dash: Optional[str] = None,
             segment_size_hds: Optional[str] = None,
             segment_size_hls: Optional[str] = None,
             segment_size_smooth: Optional[str] = None,
             smooth: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'catalogSize' in kwargs:
            catalog_size = kwargs['catalogSize']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'popularityDistribution' in kwargs:
            popularity_distribution = kwargs['popularityDistribution']
        if 'segmentDurationDash' in kwargs:
            segment_duration_dash = kwargs['segmentDurationDash']
        if 'segmentDurationDashCustom' in kwargs:
            segment_duration_dash_custom = kwargs['segmentDurationDashCustom']
        if 'segmentDurationHds' in kwargs:
            segment_duration_hds = kwargs['segmentDurationHds']
        if 'segmentDurationHdsCustom' in kwargs:
            segment_duration_hds_custom = kwargs['segmentDurationHdsCustom']
        if 'segmentDurationHls' in kwargs:
            segment_duration_hls = kwargs['segmentDurationHls']
        if 'segmentDurationHlsCustom' in kwargs:
            segment_duration_hls_custom = kwargs['segmentDurationHlsCustom']
        if 'segmentDurationSmooth' in kwargs:
            segment_duration_smooth = kwargs['segmentDurationSmooth']
        if 'segmentDurationSmoothCustom' in kwargs:
            segment_duration_smooth_custom = kwargs['segmentDurationSmoothCustom']
        if 'segmentSizeDash' in kwargs:
            segment_size_dash = kwargs['segmentSizeDash']
        if 'segmentSizeHds' in kwargs:
            segment_size_hds = kwargs['segmentSizeHds']
        if 'segmentSizeHls' in kwargs:
            segment_size_hls = kwargs['segmentSizeHls']
        if 'segmentSizeSmooth' in kwargs:
            segment_size_smooth = kwargs['segmentSizeSmooth']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if catalog_size is not None:
            _setter("catalog_size", catalog_size)
        if content_type is not None:
            _setter("content_type", content_type)
        if dash is not None:
            _setter("dash", dash)
        if hds is not None:
            _setter("hds", hds)
        if hls is not None:
            _setter("hls", hls)
        if locked is not None:
            _setter("locked", locked)
        if popularity_distribution is not None:
            _setter("popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            _setter("segment_duration_dash", segment_duration_dash)
        if segment_duration_dash_custom is not None:
            _setter("segment_duration_dash_custom", segment_duration_dash_custom)
        if segment_duration_hds is not None:
            _setter("segment_duration_hds", segment_duration_hds)
        if segment_duration_hds_custom is not None:
            _setter("segment_duration_hds_custom", segment_duration_hds_custom)
        if segment_duration_hls is not None:
            _setter("segment_duration_hls", segment_duration_hls)
        if segment_duration_hls_custom is not None:
            _setter("segment_duration_hls_custom", segment_duration_hls_custom)
        if segment_duration_smooth is not None:
            _setter("segment_duration_smooth", segment_duration_smooth)
        if segment_duration_smooth_custom is not None:
            _setter("segment_duration_smooth_custom", segment_duration_smooth_custom)
        if segment_size_dash is not None:
            _setter("segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            _setter("segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            _setter("segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            _setter("segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            _setter("smooth", smooth)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @property
    @pulumi.getter(name="segmentDurationDashCustom")
    def segment_duration_dash_custom(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration_dash_custom")

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @property
    @pulumi.getter(name="segmentDurationHdsCustom")
    def segment_duration_hds_custom(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration_hds_custom")

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @property
    @pulumi.getter(name="segmentDurationHlsCustom")
    def segment_duration_hls_custom(self) -> Optional[float]:
        return pulumi.get(self, "segment_duration_hls_custom")

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @property
    @pulumi.getter(name="segmentDurationSmoothCustom")
    def segment_duration_smooth_custom(self) -> Optional[float]:
        return pulumi.get(self, "segment_duration_smooth_custom")

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsDdResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 optimize_option: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsDdResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_size=catalog_size,
            content_type=content_type,
            locked=locked,
            object_size=object_size,
            optimize_option=optimize_option,
            popularity_distribution=popularity_distribution,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_size: Optional[str] = None,
             content_type: Optional[str] = None,
             locked: Optional[bool] = None,
             object_size: Optional[str] = None,
             optimize_option: Optional[bool] = None,
             popularity_distribution: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'catalogSize' in kwargs:
            catalog_size = kwargs['catalogSize']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'objectSize' in kwargs:
            object_size = kwargs['objectSize']
        if 'optimizeOption' in kwargs:
            optimize_option = kwargs['optimizeOption']
        if 'popularityDistribution' in kwargs:
            popularity_distribution = kwargs['popularityDistribution']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if catalog_size is not None:
            _setter("catalog_size", catalog_size)
        if content_type is not None:
            _setter("content_type", content_type)
        if locked is not None:
            _setter("locked", locked)
        if object_size is not None:
            _setter("object_size", object_size)
        if optimize_option is not None:
            _setter("optimize_option", optimize_option)
        if popularity_distribution is not None:
            _setter("popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="optimizeOption")
    def optimize_option(self) -> Optional[bool]:
        return pulumi.get(self, "optimize_option")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLargeFileResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLargeFileResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_size=catalog_size,
            content_type=content_type,
            locked=locked,
            object_size=object_size,
            popularity_distribution=popularity_distribution,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_size: Optional[str] = None,
             content_type: Optional[str] = None,
             locked: Optional[bool] = None,
             object_size: Optional[str] = None,
             popularity_distribution: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'catalogSize' in kwargs:
            catalog_size = kwargs['catalogSize']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'objectSize' in kwargs:
            object_size = kwargs['objectSize']
        if 'popularityDistribution' in kwargs:
            popularity_distribution = kwargs['popularityDistribution']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if catalog_size is not None:
            _setter("catalog_size", catalog_size)
        if content_type is not None:
            _setter("content_type", content_type)
        if locked is not None:
            _setter("locked", locked)
        if object_size is not None:
            _setter("object_size", object_size)
        if popularity_distribution is not None:
            _setter("popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLiveResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLiveResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_size=catalog_size,
            content_type=content_type,
            dash=dash,
            hds=hds,
            hls=hls,
            locked=locked,
            popularity_distribution=popularity_distribution,
            segment_duration_dash=segment_duration_dash,
            segment_duration_hds=segment_duration_hds,
            segment_duration_hls=segment_duration_hls,
            segment_duration_smooth=segment_duration_smooth,
            segment_size_dash=segment_size_dash,
            segment_size_hds=segment_size_hds,
            segment_size_hls=segment_size_hls,
            segment_size_smooth=segment_size_smooth,
            smooth=smooth,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_size: Optional[str] = None,
             content_type: Optional[str] = None,
             dash: Optional[bool] = None,
             hds: Optional[bool] = None,
             hls: Optional[bool] = None,
             locked: Optional[bool] = None,
             popularity_distribution: Optional[str] = None,
             segment_duration_dash: Optional[str] = None,
             segment_duration_hds: Optional[str] = None,
             segment_duration_hls: Optional[str] = None,
             segment_duration_smooth: Optional[str] = None,
             segment_size_dash: Optional[str] = None,
             segment_size_hds: Optional[str] = None,
             segment_size_hls: Optional[str] = None,
             segment_size_smooth: Optional[str] = None,
             smooth: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'catalogSize' in kwargs:
            catalog_size = kwargs['catalogSize']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'popularityDistribution' in kwargs:
            popularity_distribution = kwargs['popularityDistribution']
        if 'segmentDurationDash' in kwargs:
            segment_duration_dash = kwargs['segmentDurationDash']
        if 'segmentDurationHds' in kwargs:
            segment_duration_hds = kwargs['segmentDurationHds']
        if 'segmentDurationHls' in kwargs:
            segment_duration_hls = kwargs['segmentDurationHls']
        if 'segmentDurationSmooth' in kwargs:
            segment_duration_smooth = kwargs['segmentDurationSmooth']
        if 'segmentSizeDash' in kwargs:
            segment_size_dash = kwargs['segmentSizeDash']
        if 'segmentSizeHds' in kwargs:
            segment_size_hds = kwargs['segmentSizeHds']
        if 'segmentSizeHls' in kwargs:
            segment_size_hls = kwargs['segmentSizeHls']
        if 'segmentSizeSmooth' in kwargs:
            segment_size_smooth = kwargs['segmentSizeSmooth']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if catalog_size is not None:
            _setter("catalog_size", catalog_size)
        if content_type is not None:
            _setter("content_type", content_type)
        if dash is not None:
            _setter("dash", dash)
        if hds is not None:
            _setter("hds", hds)
        if hls is not None:
            _setter("hls", hls)
        if locked is not None:
            _setter("locked", locked)
        if popularity_distribution is not None:
            _setter("popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            _setter("segment_duration_dash", segment_duration_dash)
        if segment_duration_hds is not None:
            _setter("segment_duration_hds", segment_duration_hds)
        if segment_duration_hls is not None:
            _setter("segment_duration_hls", segment_duration_hls)
        if segment_duration_smooth is not None:
            _setter("segment_duration_smooth", segment_duration_smooth)
        if segment_size_dash is not None:
            _setter("segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            _setter("segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            _setter("segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            _setter("segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            _setter("smooth", smooth)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdVodResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdVodResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_size=catalog_size,
            content_type=content_type,
            dash=dash,
            hds=hds,
            hls=hls,
            locked=locked,
            popularity_distribution=popularity_distribution,
            segment_duration_dash=segment_duration_dash,
            segment_duration_hds=segment_duration_hds,
            segment_duration_hls=segment_duration_hls,
            segment_duration_smooth=segment_duration_smooth,
            segment_size_dash=segment_size_dash,
            segment_size_hds=segment_size_hds,
            segment_size_hls=segment_size_hls,
            segment_size_smooth=segment_size_smooth,
            smooth=smooth,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_size: Optional[str] = None,
             content_type: Optional[str] = None,
             dash: Optional[bool] = None,
             hds: Optional[bool] = None,
             hls: Optional[bool] = None,
             locked: Optional[bool] = None,
             popularity_distribution: Optional[str] = None,
             segment_duration_dash: Optional[str] = None,
             segment_duration_hds: Optional[str] = None,
             segment_duration_hls: Optional[str] = None,
             segment_duration_smooth: Optional[str] = None,
             segment_size_dash: Optional[str] = None,
             segment_size_hds: Optional[str] = None,
             segment_size_hls: Optional[str] = None,
             segment_size_smooth: Optional[str] = None,
             smooth: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'catalogSize' in kwargs:
            catalog_size = kwargs['catalogSize']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'popularityDistribution' in kwargs:
            popularity_distribution = kwargs['popularityDistribution']
        if 'segmentDurationDash' in kwargs:
            segment_duration_dash = kwargs['segmentDurationDash']
        if 'segmentDurationHds' in kwargs:
            segment_duration_hds = kwargs['segmentDurationHds']
        if 'segmentDurationHls' in kwargs:
            segment_duration_hls = kwargs['segmentDurationHls']
        if 'segmentDurationSmooth' in kwargs:
            segment_duration_smooth = kwargs['segmentDurationSmooth']
        if 'segmentSizeDash' in kwargs:
            segment_size_dash = kwargs['segmentSizeDash']
        if 'segmentSizeHds' in kwargs:
            segment_size_hds = kwargs['segmentSizeHds']
        if 'segmentSizeHls' in kwargs:
            segment_size_hls = kwargs['segmentSizeHls']
        if 'segmentSizeSmooth' in kwargs:
            segment_size_smooth = kwargs['segmentSizeSmooth']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if catalog_size is not None:
            _setter("catalog_size", catalog_size)
        if content_type is not None:
            _setter("content_type", content_type)
        if dash is not None:
            _setter("dash", dash)
        if hds is not None:
            _setter("hds", hds)
        if hls is not None:
            _setter("hls", hls)
        if locked is not None:
            _setter("locked", locked)
        if popularity_distribution is not None:
            _setter("popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            _setter("segment_duration_dash", segment_duration_dash)
        if segment_duration_hds is not None:
            _setter("segment_duration_hds", segment_duration_hds)
        if segment_duration_hls is not None:
            _setter("segment_duration_hls", segment_duration_hls)
        if segment_duration_smooth is not None:
            _setter("segment_duration_smooth", segment_duration_smooth)
        if segment_size_dash is not None:
            _setter("segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            _setter("segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            _setter("segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            _setter("segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            _setter("smooth", smooth)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentPrePositionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 first_location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 second_location: Optional[str] = None,
                 source_type: Optional[str] = None,
                 targets: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorContentPrePositionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            first_location=first_location,
            locked=locked,
            second_location=second_location,
            source_type=source_type,
            targets=targets,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             first_location: Optional[str] = None,
             locked: Optional[bool] = None,
             second_location: Optional[str] = None,
             source_type: Optional[str] = None,
             targets: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'firstLocation' in kwargs:
            first_location = kwargs['firstLocation']
        if 'secondLocation' in kwargs:
            second_location = kwargs['secondLocation']
        if 'sourceType' in kwargs:
            source_type = kwargs['sourceType']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if first_location is not None:
            _setter("first_location", first_location)
        if locked is not None:
            _setter("locked", locked)
        if second_location is not None:
            _setter("second_location", second_location)
        if source_type is not None:
            _setter("source_type", source_type)
        if targets is not None:
            _setter("targets", targets)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="firstLocation")
    def first_location(self) -> Optional[str]:
        return pulumi.get(self, "first_location")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="secondLocation")
    def second_location(self) -> Optional[str]:
        return pulumi.get(self, "second_location")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def targets(self) -> Optional[str]:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentTargetingProtectionResult(dict):
    def __init__(__self__, *,
                 countries: Optional[Sequence[str]] = None,
                 dmas: Optional[Sequence[str]] = None,
                 enable_geo_protection: Optional[bool] = None,
                 enable_geo_redirect_on_deny: Optional[bool] = None,
                 enable_ip_protection: Optional[bool] = None,
                 enable_ip_redirect_on_deny: Optional[bool] = None,
                 enable_referrer_protection: Optional[bool] = None,
                 enable_referrer_redirect_on_deny: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 geo_protection_mode: Optional[str] = None,
                 geo_protection_title: Optional[str] = None,
                 geo_redirect_url: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 ip_protection_mode: Optional[str] = None,
                 ip_protection_title: Optional[str] = None,
                 ip_redirect_url: Optional[str] = None,
                 locked: Optional[bool] = None,
                 override_ip_addresses: Optional[Sequence[str]] = None,
                 referrer_domains: Optional[Sequence[str]] = None,
                 referrer_protection_mode: Optional[str] = None,
                 referrer_protection_title: Optional[str] = None,
                 referrer_redirect_url: Optional[str] = None,
                 regions: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorContentTargetingProtectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            countries=countries,
            dmas=dmas,
            enable_geo_protection=enable_geo_protection,
            enable_geo_redirect_on_deny=enable_geo_redirect_on_deny,
            enable_ip_protection=enable_ip_protection,
            enable_ip_redirect_on_deny=enable_ip_redirect_on_deny,
            enable_referrer_protection=enable_referrer_protection,
            enable_referrer_redirect_on_deny=enable_referrer_redirect_on_deny,
            enabled=enabled,
            geo_protection_mode=geo_protection_mode,
            geo_protection_title=geo_protection_title,
            geo_redirect_url=geo_redirect_url,
            ip_addresses=ip_addresses,
            ip_protection_mode=ip_protection_mode,
            ip_protection_title=ip_protection_title,
            ip_redirect_url=ip_redirect_url,
            locked=locked,
            override_ip_addresses=override_ip_addresses,
            referrer_domains=referrer_domains,
            referrer_protection_mode=referrer_protection_mode,
            referrer_protection_title=referrer_protection_title,
            referrer_redirect_url=referrer_redirect_url,
            regions=regions,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             countries: Optional[Sequence[str]] = None,
             dmas: Optional[Sequence[str]] = None,
             enable_geo_protection: Optional[bool] = None,
             enable_geo_redirect_on_deny: Optional[bool] = None,
             enable_ip_protection: Optional[bool] = None,
             enable_ip_redirect_on_deny: Optional[bool] = None,
             enable_referrer_protection: Optional[bool] = None,
             enable_referrer_redirect_on_deny: Optional[bool] = None,
             enabled: Optional[bool] = None,
             geo_protection_mode: Optional[str] = None,
             geo_protection_title: Optional[str] = None,
             geo_redirect_url: Optional[str] = None,
             ip_addresses: Optional[Sequence[str]] = None,
             ip_protection_mode: Optional[str] = None,
             ip_protection_title: Optional[str] = None,
             ip_redirect_url: Optional[str] = None,
             locked: Optional[bool] = None,
             override_ip_addresses: Optional[Sequence[str]] = None,
             referrer_domains: Optional[Sequence[str]] = None,
             referrer_protection_mode: Optional[str] = None,
             referrer_protection_title: Optional[str] = None,
             referrer_redirect_url: Optional[str] = None,
             regions: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enableGeoProtection' in kwargs:
            enable_geo_protection = kwargs['enableGeoProtection']
        if 'enableGeoRedirectOnDeny' in kwargs:
            enable_geo_redirect_on_deny = kwargs['enableGeoRedirectOnDeny']
        if 'enableIpProtection' in kwargs:
            enable_ip_protection = kwargs['enableIpProtection']
        if 'enableIpRedirectOnDeny' in kwargs:
            enable_ip_redirect_on_deny = kwargs['enableIpRedirectOnDeny']
        if 'enableReferrerProtection' in kwargs:
            enable_referrer_protection = kwargs['enableReferrerProtection']
        if 'enableReferrerRedirectOnDeny' in kwargs:
            enable_referrer_redirect_on_deny = kwargs['enableReferrerRedirectOnDeny']
        if 'geoProtectionMode' in kwargs:
            geo_protection_mode = kwargs['geoProtectionMode']
        if 'geoProtectionTitle' in kwargs:
            geo_protection_title = kwargs['geoProtectionTitle']
        if 'geoRedirectUrl' in kwargs:
            geo_redirect_url = kwargs['geoRedirectUrl']
        if 'ipAddresses' in kwargs:
            ip_addresses = kwargs['ipAddresses']
        if 'ipProtectionMode' in kwargs:
            ip_protection_mode = kwargs['ipProtectionMode']
        if 'ipProtectionTitle' in kwargs:
            ip_protection_title = kwargs['ipProtectionTitle']
        if 'ipRedirectUrl' in kwargs:
            ip_redirect_url = kwargs['ipRedirectUrl']
        if 'overrideIpAddresses' in kwargs:
            override_ip_addresses = kwargs['overrideIpAddresses']
        if 'referrerDomains' in kwargs:
            referrer_domains = kwargs['referrerDomains']
        if 'referrerProtectionMode' in kwargs:
            referrer_protection_mode = kwargs['referrerProtectionMode']
        if 'referrerProtectionTitle' in kwargs:
            referrer_protection_title = kwargs['referrerProtectionTitle']
        if 'referrerRedirectUrl' in kwargs:
            referrer_redirect_url = kwargs['referrerRedirectUrl']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if countries is not None:
            _setter("countries", countries)
        if dmas is not None:
            _setter("dmas", dmas)
        if enable_geo_protection is not None:
            _setter("enable_geo_protection", enable_geo_protection)
        if enable_geo_redirect_on_deny is not None:
            _setter("enable_geo_redirect_on_deny", enable_geo_redirect_on_deny)
        if enable_ip_protection is not None:
            _setter("enable_ip_protection", enable_ip_protection)
        if enable_ip_redirect_on_deny is not None:
            _setter("enable_ip_redirect_on_deny", enable_ip_redirect_on_deny)
        if enable_referrer_protection is not None:
            _setter("enable_referrer_protection", enable_referrer_protection)
        if enable_referrer_redirect_on_deny is not None:
            _setter("enable_referrer_redirect_on_deny", enable_referrer_redirect_on_deny)
        if enabled is not None:
            _setter("enabled", enabled)
        if geo_protection_mode is not None:
            _setter("geo_protection_mode", geo_protection_mode)
        if geo_protection_title is not None:
            _setter("geo_protection_title", geo_protection_title)
        if geo_redirect_url is not None:
            _setter("geo_redirect_url", geo_redirect_url)
        if ip_addresses is not None:
            _setter("ip_addresses", ip_addresses)
        if ip_protection_mode is not None:
            _setter("ip_protection_mode", ip_protection_mode)
        if ip_protection_title is not None:
            _setter("ip_protection_title", ip_protection_title)
        if ip_redirect_url is not None:
            _setter("ip_redirect_url", ip_redirect_url)
        if locked is not None:
            _setter("locked", locked)
        if override_ip_addresses is not None:
            _setter("override_ip_addresses", override_ip_addresses)
        if referrer_domains is not None:
            _setter("referrer_domains", referrer_domains)
        if referrer_protection_mode is not None:
            _setter("referrer_protection_mode", referrer_protection_mode)
        if referrer_protection_title is not None:
            _setter("referrer_protection_title", referrer_protection_title)
        if referrer_redirect_url is not None:
            _setter("referrer_redirect_url", referrer_redirect_url)
        if regions is not None:
            _setter("regions", regions)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "countries")

    @property
    @pulumi.getter
    def dmas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dmas")

    @property
    @pulumi.getter(name="enableGeoProtection")
    def enable_geo_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_geo_protection")

    @property
    @pulumi.getter(name="enableGeoRedirectOnDeny")
    def enable_geo_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_geo_redirect_on_deny")

    @property
    @pulumi.getter(name="enableIpProtection")
    def enable_ip_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_protection")

    @property
    @pulumi.getter(name="enableIpRedirectOnDeny")
    def enable_ip_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_redirect_on_deny")

    @property
    @pulumi.getter(name="enableReferrerProtection")
    def enable_referrer_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_referrer_protection")

    @property
    @pulumi.getter(name="enableReferrerRedirectOnDeny")
    def enable_referrer_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_referrer_redirect_on_deny")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="geoProtectionMode")
    def geo_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "geo_protection_mode")

    @property
    @pulumi.getter(name="geoProtectionTitle")
    def geo_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "geo_protection_title")

    @property
    @pulumi.getter(name="geoRedirectUrl")
    def geo_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "geo_redirect_url")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="ipProtectionMode")
    def ip_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "ip_protection_mode")

    @property
    @pulumi.getter(name="ipProtectionTitle")
    def ip_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "ip_protection_title")

    @property
    @pulumi.getter(name="ipRedirectUrl")
    def ip_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "ip_redirect_url")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="overrideIpAddresses")
    def override_ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "override_ip_addresses")

    @property
    @pulumi.getter(name="referrerDomains")
    def referrer_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "referrer_domains")

    @property
    @pulumi.getter(name="referrerProtectionMode")
    def referrer_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "referrer_protection_mode")

    @property
    @pulumi.getter(name="referrerProtectionTitle")
    def referrer_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "referrer_protection_title")

    @property
    @pulumi.getter(name="referrerRedirectUrl")
    def referrer_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "referrer_redirect_url")

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCorsSupportResult(dict):
    def __init__(__self__, *,
                 allow_credentials: Optional[bool] = None,
                 allow_headers: Optional[str] = None,
                 allow_origins: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 expose_headers: Optional[Sequence[str]] = None,
                 headers: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 methods: Optional[Sequence[str]] = None,
                 origins: Optional[Sequence[str]] = None,
                 preflight_max_age: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCorsSupportResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_credentials=allow_credentials,
            allow_headers=allow_headers,
            allow_origins=allow_origins,
            enabled=enabled,
            expose_headers=expose_headers,
            headers=headers,
            locked=locked,
            methods=methods,
            origins=origins,
            preflight_max_age=preflight_max_age,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_credentials: Optional[bool] = None,
             allow_headers: Optional[str] = None,
             allow_origins: Optional[str] = None,
             enabled: Optional[bool] = None,
             expose_headers: Optional[Sequence[str]] = None,
             headers: Optional[Sequence[str]] = None,
             locked: Optional[bool] = None,
             methods: Optional[Sequence[str]] = None,
             origins: Optional[Sequence[str]] = None,
             preflight_max_age: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowCredentials' in kwargs:
            allow_credentials = kwargs['allowCredentials']
        if 'allowHeaders' in kwargs:
            allow_headers = kwargs['allowHeaders']
        if 'allowOrigins' in kwargs:
            allow_origins = kwargs['allowOrigins']
        if 'exposeHeaders' in kwargs:
            expose_headers = kwargs['exposeHeaders']
        if 'preflightMaxAge' in kwargs:
            preflight_max_age = kwargs['preflightMaxAge']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if allow_credentials is not None:
            _setter("allow_credentials", allow_credentials)
        if allow_headers is not None:
            _setter("allow_headers", allow_headers)
        if allow_origins is not None:
            _setter("allow_origins", allow_origins)
        if enabled is not None:
            _setter("enabled", enabled)
        if expose_headers is not None:
            _setter("expose_headers", expose_headers)
        if headers is not None:
            _setter("headers", headers)
        if locked is not None:
            _setter("locked", locked)
        if methods is not None:
            _setter("methods", methods)
        if origins is not None:
            _setter("origins", origins)
        if preflight_max_age is not None:
            _setter("preflight_max_age", preflight_max_age)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "allow_credentials")

    @property
    @pulumi.getter(name="allowHeaders")
    def allow_headers(self) -> Optional[str]:
        return pulumi.get(self, "allow_headers")

    @property
    @pulumi.getter(name="allowOrigins")
    def allow_origins(self) -> Optional[str]:
        return pulumi.get(self, "allow_origins")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "expose_headers")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "origins")

    @property
    @pulumi.getter(name="preflightMaxAge")
    def preflight_max_age(self) -> Optional[str]:
        return pulumi.get(self, "preflight_max_age")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueResult'] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueResult']:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCustomBehaviorResult(dict):
    def __init__(__self__, *,
                 behavior_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorCustomBehaviorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior_id=behavior_id,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior_id: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'behaviorId' in kwargs:
            behavior_id = kwargs['behaviorId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if behavior_id is not None:
            _setter("behavior_id", behavior_id)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="behaviorId")
    def behavior_id(self) -> Optional[str]:
        return pulumi.get(self, "behavior_id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDatastreamResult(dict):
    def __init__(__self__, *,
                 beacon_stream_title: Optional[str] = None,
                 collect_midgress_traffic: Optional[bool] = None,
                 datastream_ids: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 log_enabled: Optional[bool] = None,
                 log_stream_name: Optional[int] = None,
                 log_stream_title: Optional[str] = None,
                 sampling_percentage: Optional[int] = None,
                 stream_type: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDatastreamResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            beacon_stream_title=beacon_stream_title,
            collect_midgress_traffic=collect_midgress_traffic,
            datastream_ids=datastream_ids,
            enabled=enabled,
            locked=locked,
            log_enabled=log_enabled,
            log_stream_name=log_stream_name,
            log_stream_title=log_stream_title,
            sampling_percentage=sampling_percentage,
            stream_type=stream_type,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             beacon_stream_title: Optional[str] = None,
             collect_midgress_traffic: Optional[bool] = None,
             datastream_ids: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             log_enabled: Optional[bool] = None,
             log_stream_name: Optional[int] = None,
             log_stream_title: Optional[str] = None,
             sampling_percentage: Optional[int] = None,
             stream_type: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'beaconStreamTitle' in kwargs:
            beacon_stream_title = kwargs['beaconStreamTitle']
        if 'collectMidgressTraffic' in kwargs:
            collect_midgress_traffic = kwargs['collectMidgressTraffic']
        if 'datastreamIds' in kwargs:
            datastream_ids = kwargs['datastreamIds']
        if 'logEnabled' in kwargs:
            log_enabled = kwargs['logEnabled']
        if 'logStreamName' in kwargs:
            log_stream_name = kwargs['logStreamName']
        if 'logStreamTitle' in kwargs:
            log_stream_title = kwargs['logStreamTitle']
        if 'samplingPercentage' in kwargs:
            sampling_percentage = kwargs['samplingPercentage']
        if 'streamType' in kwargs:
            stream_type = kwargs['streamType']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if beacon_stream_title is not None:
            _setter("beacon_stream_title", beacon_stream_title)
        if collect_midgress_traffic is not None:
            _setter("collect_midgress_traffic", collect_midgress_traffic)
        if datastream_ids is not None:
            _setter("datastream_ids", datastream_ids)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if log_enabled is not None:
            _setter("log_enabled", log_enabled)
        if log_stream_name is not None:
            _setter("log_stream_name", log_stream_name)
        if log_stream_title is not None:
            _setter("log_stream_title", log_stream_title)
        if sampling_percentage is not None:
            _setter("sampling_percentage", sampling_percentage)
        if stream_type is not None:
            _setter("stream_type", stream_type)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="beaconStreamTitle")
    def beacon_stream_title(self) -> Optional[str]:
        return pulumi.get(self, "beacon_stream_title")

    @property
    @pulumi.getter(name="collectMidgressTraffic")
    def collect_midgress_traffic(self) -> Optional[bool]:
        return pulumi.get(self, "collect_midgress_traffic")

    @property
    @pulumi.getter(name="datastreamIds")
    def datastream_ids(self) -> Optional[str]:
        return pulumi.get(self, "datastream_ids")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="logEnabled")
    def log_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "log_enabled")

    @property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> Optional[int]:
        return pulumi.get(self, "log_stream_name")

    @property
    @pulumi.getter(name="logStreamTitle")
    def log_stream_title(self) -> Optional[str]:
        return pulumi.get(self, "log_stream_title")

    @property
    @pulumi.getter(name="samplingPercentage")
    def sampling_percentage(self) -> Optional[int]:
        return pulumi.get(self, "sampling_percentage")

    @property
    @pulumi.getter(name="streamType")
    def stream_type(self) -> Optional[str]:
        return pulumi.get(self, "stream_type")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpResult(dict):
    def __init__(__self__, *,
                 anonymous: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 gwenabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 namespace_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tlsenabled: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 wsenabled: Optional[bool] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDcpResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            anonymous=anonymous,
            enabled=enabled,
            gwenabled=gwenabled,
            locked=locked,
            namespace_id=namespace_id,
            template_uuid=template_uuid,
            tlsenabled=tlsenabled,
            uuid=uuid,
            wsenabled=wsenabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             anonymous: Optional[bool] = None,
             enabled: Optional[bool] = None,
             gwenabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             namespace_id: Optional[str] = None,
             template_uuid: Optional[str] = None,
             tlsenabled: Optional[bool] = None,
             uuid: Optional[str] = None,
             wsenabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'namespaceId' in kwargs:
            namespace_id = kwargs['namespaceId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if anonymous is not None:
            _setter("anonymous", anonymous)
        if enabled is not None:
            _setter("enabled", enabled)
        if gwenabled is not None:
            _setter("gwenabled", gwenabled)
        if locked is not None:
            _setter("locked", locked)
        if namespace_id is not None:
            _setter("namespace_id", namespace_id)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if tlsenabled is not None:
            _setter("tlsenabled", tlsenabled)
        if uuid is not None:
            _setter("uuid", uuid)
        if wsenabled is not None:
            _setter("wsenabled", wsenabled)

    @property
    @pulumi.getter
    def anonymous(self) -> Optional[bool]:
        return pulumi.get(self, "anonymous")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def gwenabled(self) -> Optional[bool]:
        return pulumi.get(self, "gwenabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[str]:
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def tlsenabled(self) -> Optional[bool]:
        return pulumi.get(self, "tlsenabled")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def wsenabled(self) -> Optional[bool]:
        return pulumi.get(self, "wsenabled")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthHmacTransformationResult(dict):
    def __init__(__self__, *,
                 hash_conversion_algorithm: Optional[str] = None,
                 hash_conversion_key: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthHmacTransformationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hash_conversion_algorithm=hash_conversion_algorithm,
            hash_conversion_key=hash_conversion_key,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hash_conversion_algorithm: Optional[str] = None,
             hash_conversion_key: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hashConversionAlgorithm' in kwargs:
            hash_conversion_algorithm = kwargs['hashConversionAlgorithm']
        if 'hashConversionKey' in kwargs:
            hash_conversion_key = kwargs['hashConversionKey']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if hash_conversion_algorithm is not None:
            _setter("hash_conversion_algorithm", hash_conversion_algorithm)
        if hash_conversion_key is not None:
            _setter("hash_conversion_key", hash_conversion_key)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="hashConversionAlgorithm")
    def hash_conversion_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hash_conversion_algorithm")

    @property
    @pulumi.getter(name="hashConversionKey")
    def hash_conversion_key(self) -> Optional[str]:
        return pulumi.get(self, "hash_conversion_key")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthRegexTransformationResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthRegexTransformationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            regex_pattern=regex_pattern,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             regex_pattern: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'regexPattern' in kwargs:
            regex_pattern = kwargs['regexPattern']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if regex_pattern is not None:
            _setter("regex_pattern", regex_pattern)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthSubstringTransformationResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 substring_end: Optional[str] = None,
                 substring_start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthSubstringTransformationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            substring_end=substring_end,
            substring_start=substring_start,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             substring_end: Optional[str] = None,
             substring_start: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'substringEnd' in kwargs:
            substring_end = kwargs['substringEnd']
        if 'substringStart' in kwargs:
            substring_start = kwargs['substringStart']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if substring_end is not None:
            _setter("substring_end", substring_end)
        if substring_start is not None:
            _setter("substring_start", substring_start)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="substringEnd")
    def substring_end(self) -> Optional[str]:
        return pulumi.get(self, "substring_end")

    @property
    @pulumi.getter(name="substringStart")
    def substring_start(self) -> Optional[str]:
        return pulumi.get(self, "substring_start")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthVariableExtractorResult(dict):
    def __init__(__self__, *,
                 certificate_field: Optional[str] = None,
                 dcp_mutual_auth_processing_variable_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthVariableExtractorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_field=certificate_field,
            dcp_mutual_auth_processing_variable_id=dcp_mutual_auth_processing_variable_id,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_field: Optional[str] = None,
             dcp_mutual_auth_processing_variable_id: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'certificateField' in kwargs:
            certificate_field = kwargs['certificateField']
        if 'dcpMutualAuthProcessingVariableId' in kwargs:
            dcp_mutual_auth_processing_variable_id = kwargs['dcpMutualAuthProcessingVariableId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if certificate_field is not None:
            _setter("certificate_field", certificate_field)
        if dcp_mutual_auth_processing_variable_id is not None:
            _setter("dcp_mutual_auth_processing_variable_id", dcp_mutual_auth_processing_variable_id)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="certificateField")
    def certificate_field(self) -> Optional[str]:
        return pulumi.get(self, "certificate_field")

    @property
    @pulumi.getter(name="dcpMutualAuthProcessingVariableId")
    def dcp_mutual_auth_processing_variable_id(self) -> Optional[str]:
        return pulumi.get(self, "dcp_mutual_auth_processing_variable_id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpDefaultAuthzGroupsResult(dict):
    def __init__(__self__, *,
                 group_names: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDcpDefaultAuthzGroupsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_names=group_names,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_names: Optional[Sequence[str]] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'groupNames' in kwargs:
            group_names = kwargs['groupNames']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if group_names is not None:
            _setter("group_names", group_names)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="groupNames")
    def group_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_names")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpDevRelationsResult(dict):
    def __init__(__self__, *,
                 custom_values: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 locked: Optional[bool] = None,
                 path: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDcpDevRelationsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_values=custom_values,
            enabled=enabled,
            hostname=hostname,
            locked=locked,
            path=path,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_values: Optional[bool] = None,
             enabled: Optional[bool] = None,
             hostname: Optional[str] = None,
             locked: Optional[bool] = None,
             path: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customValues' in kwargs:
            custom_values = kwargs['customValues']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if custom_values is not None:
            _setter("custom_values", custom_values)
        if enabled is not None:
            _setter("enabled", enabled)
        if hostname is not None:
            _setter("hostname", hostname)
        if locked is not None:
            _setter("locked", locked)
        if path is not None:
            _setter("path", path)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="customValues")
    def custom_values(self) -> Optional[bool]:
        return pulumi.get(self, "custom_values")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpRealTimeAuthResult(dict):
    def __init__(__self__, *,
                 extract_hostname: Optional[bool] = None,
                 extract_jurisdiction: Optional[bool] = None,
                 extract_namespace: Optional[bool] = None,
                 hostname_claim: Optional[str] = None,
                 jurisdiction_claim: Optional[str] = None,
                 locked: Optional[bool] = None,
                 namespace_claim: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDcpRealTimeAuthResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            extract_hostname=extract_hostname,
            extract_jurisdiction=extract_jurisdiction,
            extract_namespace=extract_namespace,
            hostname_claim=hostname_claim,
            jurisdiction_claim=jurisdiction_claim,
            locked=locked,
            namespace_claim=namespace_claim,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             extract_hostname: Optional[bool] = None,
             extract_jurisdiction: Optional[bool] = None,
             extract_namespace: Optional[bool] = None,
             hostname_claim: Optional[str] = None,
             jurisdiction_claim: Optional[str] = None,
             locked: Optional[bool] = None,
             namespace_claim: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'extractHostname' in kwargs:
            extract_hostname = kwargs['extractHostname']
        if 'extractJurisdiction' in kwargs:
            extract_jurisdiction = kwargs['extractJurisdiction']
        if 'extractNamespace' in kwargs:
            extract_namespace = kwargs['extractNamespace']
        if 'hostnameClaim' in kwargs:
            hostname_claim = kwargs['hostnameClaim']
        if 'jurisdictionClaim' in kwargs:
            jurisdiction_claim = kwargs['jurisdictionClaim']
        if 'namespaceClaim' in kwargs:
            namespace_claim = kwargs['namespaceClaim']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if extract_hostname is not None:
            _setter("extract_hostname", extract_hostname)
        if extract_jurisdiction is not None:
            _setter("extract_jurisdiction", extract_jurisdiction)
        if extract_namespace is not None:
            _setter("extract_namespace", extract_namespace)
        if hostname_claim is not None:
            _setter("hostname_claim", hostname_claim)
        if jurisdiction_claim is not None:
            _setter("jurisdiction_claim", jurisdiction_claim)
        if locked is not None:
            _setter("locked", locked)
        if namespace_claim is not None:
            _setter("namespace_claim", namespace_claim)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="extractHostname")
    def extract_hostname(self) -> Optional[bool]:
        return pulumi.get(self, "extract_hostname")

    @property
    @pulumi.getter(name="extractJurisdiction")
    def extract_jurisdiction(self) -> Optional[bool]:
        return pulumi.get(self, "extract_jurisdiction")

    @property
    @pulumi.getter(name="extractNamespace")
    def extract_namespace(self) -> Optional[bool]:
        return pulumi.get(self, "extract_namespace")

    @property
    @pulumi.getter(name="hostnameClaim")
    def hostname_claim(self) -> Optional[str]:
        return pulumi.get(self, "hostname_claim")

    @property
    @pulumi.getter(name="jurisdictionClaim")
    def jurisdiction_claim(self) -> Optional[str]:
        return pulumi.get(self, "jurisdiction_claim")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="namespaceClaim")
    def namespace_claim(self) -> Optional[str]:
        return pulumi.get(self, "namespace_claim")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDeliveryReceiptResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDeliveryReceiptResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDenyAccessResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 reason: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDenyAccessResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            reason=reason,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             reason: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if reason is not None:
            _setter("reason", reason)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDenyDirectFailoverAccessResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDenyDirectFailoverAccessResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicCacheIdResult(dict):
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicCacheIdResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            elements=elements,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             elements: Optional[Sequence[str]] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if elements is not None:
            _setter("elements", elements)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicHeaderResult(dict):
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            elements=elements,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             elements: Optional[Sequence[str]] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if elements is not None:
            _setter("elements", elements)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDnsAsyncRefreshResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDnsAsyncRefreshResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            timeout=timeout,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             timeout: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if timeout is not None:
            _setter("timeout", timeout)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDnsPrefreshResult(dict):
    def __init__(__self__, *,
                 delay: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDnsPrefreshResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delay=delay,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            timeout=timeout,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delay: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             timeout: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if delay is not None:
            _setter("delay", delay)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if timeout is not None:
            _setter("timeout", timeout)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def delay(self) -> Optional[str]:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDowngradeProtocolResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDowngradeProtocolResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDownloadCompleteMarkerResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDownloadCompleteMarkerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDownloadNotificationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDownloadNotificationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDownstreamCacheResult(dict):
    def __init__(__self__, *,
                 allow_behavior: Optional[str] = None,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 send_headers: Optional[str] = None,
                 send_private: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDownstreamCacheResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_behavior=allow_behavior,
            behavior=behavior,
            locked=locked,
            send_headers=send_headers,
            send_private=send_private,
            template_uuid=template_uuid,
            ttl=ttl,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_behavior: Optional[str] = None,
             behavior: Optional[str] = None,
             locked: Optional[bool] = None,
             send_headers: Optional[str] = None,
             send_private: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             ttl: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowBehavior' in kwargs:
            allow_behavior = kwargs['allowBehavior']
        if 'sendHeaders' in kwargs:
            send_headers = kwargs['sendHeaders']
        if 'sendPrivate' in kwargs:
            send_private = kwargs['sendPrivate']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if allow_behavior is not None:
            _setter("allow_behavior", allow_behavior)
        if behavior is not None:
            _setter("behavior", behavior)
        if locked is not None:
            _setter("locked", locked)
        if send_headers is not None:
            _setter("send_headers", send_headers)
        if send_private is not None:
            _setter("send_private", send_private)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if ttl is not None:
            _setter("ttl", ttl)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowBehavior")
    def allow_behavior(self) -> Optional[str]:
        return pulumi.get(self, "allow_behavior")

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="sendHeaders")
    def send_headers(self) -> Optional[str]:
        return pulumi.get(self, "send_headers")

    @property
    @pulumi.getter(name="sendPrivate")
    def send_private(self) -> Optional[bool]:
        return pulumi.get(self, "send_private")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationOverrideResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 throughput: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationOverrideResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            throughput=throughput,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             throughput: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if throughput is not None:
            _setter("throughput", throughput)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[str]:
        return pulumi.get(self, "throughput")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDynamicWebContentResult(dict):
    def __init__(__self__, *,
                 image_compression: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 prefetch: Optional[bool] = None,
                 real_user_monitoring: Optional[bool] = None,
                 sure_route: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorDynamicWebContentResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            image_compression=image_compression,
            locked=locked,
            prefetch=prefetch,
            real_user_monitoring=real_user_monitoring,
            sure_route=sure_route,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             image_compression: Optional[bool] = None,
             locked: Optional[bool] = None,
             prefetch: Optional[bool] = None,
             real_user_monitoring: Optional[bool] = None,
             sure_route: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'imageCompression' in kwargs:
            image_compression = kwargs['imageCompression']
        if 'realUserMonitoring' in kwargs:
            real_user_monitoring = kwargs['realUserMonitoring']
        if 'sureRoute' in kwargs:
            sure_route = kwargs['sureRoute']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if image_compression is not None:
            _setter("image_compression", image_compression)
        if locked is not None:
            _setter("locked", locked)
        if prefetch is not None:
            _setter("prefetch", prefetch)
        if real_user_monitoring is not None:
            _setter("real_user_monitoring", real_user_monitoring)
        if sure_route is not None:
            _setter("sure_route", sure_route)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="imageCompression")
    def image_compression(self) -> Optional[bool]:
        return pulumi.get(self, "image_compression")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def prefetch(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch")

    @property
    @pulumi.getter(name="realUserMonitoring")
    def real_user_monitoring(self) -> Optional[bool]:
        return pulumi.get(self, "real_user_monitoring")

    @property
    @pulumi.getter(name="sureRoute")
    def sure_route(self) -> Optional[bool]:
        return pulumi.get(self, "sure_route")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEcmsBulkUploadResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEcmsBulkUploadResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatabaseResult(dict):
    def __init__(__self__, *,
                 database: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatabaseResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database=database,
            extract_location=extract_location,
            header_name=header_name,
            locked=locked,
            query_parameter_name=query_parameter_name,
            regex_pattern=regex_pattern,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database: Optional[str] = None,
             extract_location: Optional[str] = None,
             header_name: Optional[str] = None,
             locked: Optional[bool] = None,
             query_parameter_name: Optional[str] = None,
             regex_pattern: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'extractLocation' in kwargs:
            extract_location = kwargs['extractLocation']
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'queryParameterName' in kwargs:
            query_parameter_name = kwargs['queryParameterName']
        if 'regexPattern' in kwargs:
            regex_pattern = kwargs['regexPattern']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if database is not None:
            _setter("database", database)
        if extract_location is not None:
            _setter("extract_location", extract_location)
        if header_name is not None:
            _setter("header_name", header_name)
        if locked is not None:
            _setter("locked", locked)
        if query_parameter_name is not None:
            _setter("query_parameter_name", query_parameter_name)
        if regex_pattern is not None:
            _setter("regex_pattern", regex_pattern)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatasetResult(dict):
    def __init__(__self__, *,
                 dataset: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatasetResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataset=dataset,
            extract_location=extract_location,
            header_name=header_name,
            locked=locked,
            query_parameter_name=query_parameter_name,
            regex_pattern=regex_pattern,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataset: Optional[str] = None,
             extract_location: Optional[str] = None,
             header_name: Optional[str] = None,
             locked: Optional[bool] = None,
             query_parameter_name: Optional[str] = None,
             regex_pattern: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'extractLocation' in kwargs:
            extract_location = kwargs['extractLocation']
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'queryParameterName' in kwargs:
            query_parameter_name = kwargs['queryParameterName']
        if 'regexPattern' in kwargs:
            regex_pattern = kwargs['regexPattern']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if dataset is not None:
            _setter("dataset", dataset)
        if extract_location is not None:
            _setter("extract_location", extract_location)
        if header_name is not None:
            _setter("header_name", header_name)
        if locked is not None:
            _setter("locked", locked)
        if query_parameter_name is not None:
            _setter("query_parameter_name", query_parameter_name)
        if regex_pattern is not None:
            _setter("regex_pattern", regex_pattern)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[str]:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEcmsObjectKeyResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 regex: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEcmsObjectKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            regex=regex,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             regex: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if regex is not None:
            _setter("regex", regex)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeConnectResult(dict):
    def __init__(__self__, *,
                 aggregate_lines: Optional[str] = None,
                 aggregate_size: Optional[str] = None,
                 aggregate_time: Optional[str] = None,
                 api_connector: Optional[str] = None,
                 api_data_elements: Optional[Sequence[str]] = None,
                 destination_hostname: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 override_aggregate_settings: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEdgeConnectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregate_lines=aggregate_lines,
            aggregate_size=aggregate_size,
            aggregate_time=aggregate_time,
            api_connector=api_connector,
            api_data_elements=api_data_elements,
            destination_hostname=destination_hostname,
            destination_path=destination_path,
            enabled=enabled,
            locked=locked,
            override_aggregate_settings=override_aggregate_settings,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregate_lines: Optional[str] = None,
             aggregate_size: Optional[str] = None,
             aggregate_time: Optional[str] = None,
             api_connector: Optional[str] = None,
             api_data_elements: Optional[Sequence[str]] = None,
             destination_hostname: Optional[str] = None,
             destination_path: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             override_aggregate_settings: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregateLines' in kwargs:
            aggregate_lines = kwargs['aggregateLines']
        if 'aggregateSize' in kwargs:
            aggregate_size = kwargs['aggregateSize']
        if 'aggregateTime' in kwargs:
            aggregate_time = kwargs['aggregateTime']
        if 'apiConnector' in kwargs:
            api_connector = kwargs['apiConnector']
        if 'apiDataElements' in kwargs:
            api_data_elements = kwargs['apiDataElements']
        if 'destinationHostname' in kwargs:
            destination_hostname = kwargs['destinationHostname']
        if 'destinationPath' in kwargs:
            destination_path = kwargs['destinationPath']
        if 'overrideAggregateSettings' in kwargs:
            override_aggregate_settings = kwargs['overrideAggregateSettings']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if aggregate_lines is not None:
            _setter("aggregate_lines", aggregate_lines)
        if aggregate_size is not None:
            _setter("aggregate_size", aggregate_size)
        if aggregate_time is not None:
            _setter("aggregate_time", aggregate_time)
        if api_connector is not None:
            _setter("api_connector", api_connector)
        if api_data_elements is not None:
            _setter("api_data_elements", api_data_elements)
        if destination_hostname is not None:
            _setter("destination_hostname", destination_hostname)
        if destination_path is not None:
            _setter("destination_path", destination_path)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if override_aggregate_settings is not None:
            _setter("override_aggregate_settings", override_aggregate_settings)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="aggregateLines")
    def aggregate_lines(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_lines")

    @property
    @pulumi.getter(name="aggregateSize")
    def aggregate_size(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_size")

    @property
    @pulumi.getter(name="aggregateTime")
    def aggregate_time(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_time")

    @property
    @pulumi.getter(name="apiConnector")
    def api_connector(self) -> Optional[str]:
        return pulumi.get(self, "api_connector")

    @property
    @pulumi.getter(name="apiDataElements")
    def api_data_elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "api_data_elements")

    @property
    @pulumi.getter(name="destinationHostname")
    def destination_hostname(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="overrideAggregateSettings")
    def override_aggregate_settings(self) -> Optional[bool]:
        return pulumi.get(self, "override_aggregate_settings")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingAdvancedResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingAdvancedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            xml=xml,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             xml: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if description is not None:
            _setter("description", description)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if xml is not None:
            _setter("xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 description: Optional[str] = None,
                 enable_failover: Optional[bool] = None,
                 failover_rules: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult']] = None,
                 failover_title: Optional[str] = None,
                 hostname: Optional[str] = None,
                 ip: Optional[str] = None,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_name=cookie_name,
            description=description,
            enable_failover=enable_failover,
            failover_rules=failover_rules,
            failover_title=failover_title,
            hostname=hostname,
            ip=ip,
            locked=locked,
            origin_id=origin_id,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_name: Optional[str] = None,
             description: Optional[str] = None,
             enable_failover: Optional[bool] = None,
             failover_rules: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult']] = None,
             failover_title: Optional[str] = None,
             hostname: Optional[str] = None,
             ip: Optional[str] = None,
             locked: Optional[bool] = None,
             origin_id: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cookieName' in kwargs:
            cookie_name = kwargs['cookieName']
        if 'enableFailover' in kwargs:
            enable_failover = kwargs['enableFailover']
        if 'failoverRules' in kwargs:
            failover_rules = kwargs['failoverRules']
        if 'failoverTitle' in kwargs:
            failover_title = kwargs['failoverTitle']
        if 'originId' in kwargs:
            origin_id = kwargs['originId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cookie_name is not None:
            _setter("cookie_name", cookie_name)
        if description is not None:
            _setter("description", description)
        if enable_failover is not None:
            _setter("enable_failover", enable_failover)
        if failover_rules is not None:
            _setter("failover_rules", failover_rules)
        if failover_title is not None:
            _setter("failover_title", failover_title)
        if hostname is not None:
            _setter("hostname", hostname)
        if ip is not None:
            _setter("ip", ip)
        if locked is not None:
            _setter("locked", locked)
        if origin_id is not None:
            _setter("origin_id", origin_id)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableFailover")
    def enable_failover(self) -> Optional[bool]:
        return pulumi.get(self, "enable_failover")

    @property
    @pulumi.getter(name="failoverRules")
    def failover_rules(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult']]:
        return pulumi.get(self, "failover_rules")

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult(dict):
    def __init__(__self__, *,
                 absolute_path: Optional[bool] = None,
                 context_root: Optional[str] = None,
                 failover_hostname: Optional[str] = None,
                 modify_request: Optional[bool] = None,
                 override_hostname: Optional[bool] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            absolute_path=absolute_path,
            context_root=context_root,
            failover_hostname=failover_hostname,
            modify_request=modify_request,
            override_hostname=override_hostname,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             absolute_path: Optional[bool] = None,
             context_root: Optional[str] = None,
             failover_hostname: Optional[str] = None,
             modify_request: Optional[bool] = None,
             override_hostname: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'absolutePath' in kwargs:
            absolute_path = kwargs['absolutePath']
        if 'contextRoot' in kwargs:
            context_root = kwargs['contextRoot']
        if 'failoverHostname' in kwargs:
            failover_hostname = kwargs['failoverHostname']
        if 'modifyRequest' in kwargs:
            modify_request = kwargs['modifyRequest']
        if 'overrideHostname' in kwargs:
            override_hostname = kwargs['overrideHostname']

        if absolute_path is not None:
            _setter("absolute_path", absolute_path)
        if context_root is not None:
            _setter("context_root", context_root)
        if failover_hostname is not None:
            _setter("failover_hostname", failover_hostname)
        if modify_request is not None:
            _setter("modify_request", modify_request)
        if override_hostname is not None:
            _setter("override_hostname", override_hostname)

    @property
    @pulumi.getter(name="absolutePath")
    def absolute_path(self) -> Optional[bool]:
        return pulumi.get(self, "absolute_path")

    @property
    @pulumi.getter(name="contextRoot")
    def context_root(self) -> Optional[str]:
        return pulumi.get(self, "context_root")

    @property
    @pulumi.getter(name="failoverHostname")
    def failover_hostname(self) -> Optional[str]:
        return pulumi.get(self, "failover_hostname")

    @property
    @pulumi.getter(name="modifyRequest")
    def modify_request(self) -> Optional[bool]:
        return pulumi.get(self, "modify_request")

    @property
    @pulumi.getter(name="overrideHostname")
    def override_hostname(self) -> Optional[bool]:
        return pulumi.get(self, "override_hostname")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingOriginResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 description: Optional[str] = None,
                 enable_session_persistence: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_persistence_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingOriginResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_name=cookie_name,
            description=description,
            enable_session_persistence=enable_session_persistence,
            hostname=hostname,
            id=id,
            locked=locked,
            session_persistence_title=session_persistence_title,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_name: Optional[str] = None,
             description: Optional[str] = None,
             enable_session_persistence: Optional[bool] = None,
             hostname: Optional[str] = None,
             id: Optional[str] = None,
             locked: Optional[bool] = None,
             session_persistence_title: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cookieName' in kwargs:
            cookie_name = kwargs['cookieName']
        if 'enableSessionPersistence' in kwargs:
            enable_session_persistence = kwargs['enableSessionPersistence']
        if 'sessionPersistenceTitle' in kwargs:
            session_persistence_title = kwargs['sessionPersistenceTitle']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cookie_name is not None:
            _setter("cookie_name", cookie_name)
        if description is not None:
            _setter("description", description)
        if enable_session_persistence is not None:
            _setter("enable_session_persistence", enable_session_persistence)
        if hostname is not None:
            _setter("hostname", hostname)
        if id is not None:
            _setter("id", id)
        if locked is not None:
            _setter("locked", locked)
        if session_persistence_title is not None:
            _setter("session_persistence_title", session_persistence_title)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableSessionPersistence")
    def enable_session_persistence(self) -> Optional[bool]:
        return pulumi.get(self, "enable_session_persistence")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="sessionPersistenceTitle")
    def session_persistence_title(self) -> Optional[str]:
        return pulumi.get(self, "session_persistence_title")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeOriginAuthorizationResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 domain: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEdgeOriginAuthorizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_name=cookie_name,
            domain=domain,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_name: Optional[str] = None,
             domain: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cookieName' in kwargs:
            cookie_name = kwargs['cookieName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cookie_name is not None:
            _setter("cookie_name", cookie_name)
        if domain is not None:
            _setter("domain", domain)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloudlet_policy=cloudlet_policy,
            cloudlet_shared_policy=cloudlet_shared_policy,
            enabled=enabled,
            is_shared_policy=is_shared_policy,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorCloudletPolicyResult'] = None,
             cloudlet_shared_policy: Optional[int] = None,
             enabled: Optional[bool] = None,
             is_shared_policy: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'cloudletSharedPolicy' in kwargs:
            cloudlet_shared_policy = kwargs['cloudletSharedPolicy']
        if 'isSharedPolicy' in kwargs:
            is_shared_policy = kwargs['isSharedPolicy']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            _setter("cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if is_shared_policy is not None:
            _setter("is_shared_policy", is_shared_policy)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeScapeResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEdgeScapeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeSideIncludesResult(dict):
    def __init__(__self__, *,
                 detect_injection: Optional[bool] = None,
                 enable_via_http: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 i18n_charsets: Optional[Sequence[str]] = None,
                 i18n_status: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 pass_client_ip: Optional[bool] = None,
                 pass_set_cookie: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEdgeSideIncludesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            detect_injection=detect_injection,
            enable_via_http=enable_via_http,
            enabled=enabled,
            i18n_charsets=i18n_charsets,
            i18n_status=i18n_status,
            locked=locked,
            pass_client_ip=pass_client_ip,
            pass_set_cookie=pass_set_cookie,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             detect_injection: Optional[bool] = None,
             enable_via_http: Optional[bool] = None,
             enabled: Optional[bool] = None,
             i18n_charsets: Optional[Sequence[str]] = None,
             i18n_status: Optional[bool] = None,
             locked: Optional[bool] = None,
             pass_client_ip: Optional[bool] = None,
             pass_set_cookie: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'detectInjection' in kwargs:
            detect_injection = kwargs['detectInjection']
        if 'enableViaHttp' in kwargs:
            enable_via_http = kwargs['enableViaHttp']
        if 'i18nCharsets' in kwargs:
            i18n_charsets = kwargs['i18nCharsets']
        if 'i18nStatus' in kwargs:
            i18n_status = kwargs['i18nStatus']
        if 'passClientIp' in kwargs:
            pass_client_ip = kwargs['passClientIp']
        if 'passSetCookie' in kwargs:
            pass_set_cookie = kwargs['passSetCookie']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if detect_injection is not None:
            _setter("detect_injection", detect_injection)
        if enable_via_http is not None:
            _setter("enable_via_http", enable_via_http)
        if enabled is not None:
            _setter("enabled", enabled)
        if i18n_charsets is not None:
            _setter("i18n_charsets", i18n_charsets)
        if i18n_status is not None:
            _setter("i18n_status", i18n_status)
        if locked is not None:
            _setter("locked", locked)
        if pass_client_ip is not None:
            _setter("pass_client_ip", pass_client_ip)
        if pass_set_cookie is not None:
            _setter("pass_set_cookie", pass_set_cookie)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="detectInjection")
    def detect_injection(self) -> Optional[bool]:
        return pulumi.get(self, "detect_injection")

    @property
    @pulumi.getter(name="enableViaHttp")
    def enable_via_http(self) -> Optional[bool]:
        return pulumi.get(self, "enable_via_http")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="i18nCharsets")
    def i18n_charsets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "i18n_charsets")

    @property
    @pulumi.getter(name="i18nStatus")
    def i18n_status(self) -> Optional[bool]:
        return pulumi.get(self, "i18n_status")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="passClientIp")
    def pass_client_ip(self) -> Optional[bool]:
        return pulumi.get(self, "pass_client_ip")

    @property
    @pulumi.getter(name="passSetCookie")
    def pass_set_cookie(self) -> Optional[bool]:
        return pulumi.get(self, "pass_set_cookie")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeWorkerResult(dict):
    def __init__(__self__, *,
                 create_edge_worker: Optional[str] = None,
                 edge_worker_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 resource_tier: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEdgeWorkerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create_edge_worker=create_edge_worker,
            edge_worker_id=edge_worker_id,
            enabled=enabled,
            locked=locked,
            resource_tier=resource_tier,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create_edge_worker: Optional[str] = None,
             edge_worker_id: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             resource_tier: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createEdgeWorker' in kwargs:
            create_edge_worker = kwargs['createEdgeWorker']
        if 'edgeWorkerId' in kwargs:
            edge_worker_id = kwargs['edgeWorkerId']
        if 'resourceTier' in kwargs:
            resource_tier = kwargs['resourceTier']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if create_edge_worker is not None:
            _setter("create_edge_worker", create_edge_worker)
        if edge_worker_id is not None:
            _setter("edge_worker_id", edge_worker_id)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if resource_tier is not None:
            _setter("resource_tier", resource_tier)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="createEdgeWorker")
    def create_edge_worker(self) -> Optional[str]:
        return pulumi.get(self, "create_edge_worker")

    @property
    @pulumi.getter(name="edgeWorkerId")
    def edge_worker_id(self) -> Optional[str]:
        return pulumi.get(self, "edge_worker_id")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="resourceTier")
    def resource_tier(self) -> Optional[str]:
        return pulumi.get(self, "resource_tier")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedAkamaiProtocolResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedAkamaiProtocolResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display=display,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if display is not None:
            _setter("display", display)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedProxyDetectionResult(dict):
    def __init__(__self__, *,
                 anonymous_vpn: Optional[str] = None,
                 best_practice_action: Optional[str] = None,
                 best_practice_redirecturl: Optional[str] = None,
                 detect_anonymous_vpn: Optional[bool] = None,
                 detect_anonymous_vpn_action: Optional[str] = None,
                 detect_anonymous_vpn_redirecturl: Optional[str] = None,
                 detect_hosting_provider: Optional[bool] = None,
                 detect_hosting_provider_action: Optional[str] = None,
                 detect_hosting_provider_redirecturl: Optional[str] = None,
                 detect_public_proxy: Optional[bool] = None,
                 detect_public_proxy_action: Optional[str] = None,
                 detect_public_proxy_redirecturl: Optional[str] = None,
                 detect_residential_proxy: Optional[bool] = None,
                 detect_residential_proxy_action: Optional[str] = None,
                 detect_residential_proxy_redirecturl: Optional[str] = None,
                 detect_smart_dns_proxy: Optional[bool] = None,
                 detect_smart_dns_proxy_action: Optional[str] = None,
                 detect_smart_dns_proxy_redirecturl: Optional[str] = None,
                 detect_tor_exit_node: Optional[bool] = None,
                 detect_tor_exit_node_action: Optional[str] = None,
                 detect_tor_exit_node_redirecturl: Optional[str] = None,
                 detect_vpn_data_center: Optional[bool] = None,
                 detect_vpn_data_center_action: Optional[str] = None,
                 detect_vpn_data_center_redirecturl: Optional[str] = None,
                 enable_configuration_mode: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 forward_header_enrichment: Optional[bool] = None,
                 hosting_provider: Optional[str] = None,
                 locked: Optional[bool] = None,
                 public_proxy: Optional[str] = None,
                 residential_proxy: Optional[str] = None,
                 smart_dns_proxy: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tor_exit_node: Optional[str] = None,
                 uuid: Optional[str] = None,
                 vpn_data_center: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedProxyDetectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            anonymous_vpn=anonymous_vpn,
            best_practice_action=best_practice_action,
            best_practice_redirecturl=best_practice_redirecturl,
            detect_anonymous_vpn=detect_anonymous_vpn,
            detect_anonymous_vpn_action=detect_anonymous_vpn_action,
            detect_anonymous_vpn_redirecturl=detect_anonymous_vpn_redirecturl,
            detect_hosting_provider=detect_hosting_provider,
            detect_hosting_provider_action=detect_hosting_provider_action,
            detect_hosting_provider_redirecturl=detect_hosting_provider_redirecturl,
            detect_public_proxy=detect_public_proxy,
            detect_public_proxy_action=detect_public_proxy_action,
            detect_public_proxy_redirecturl=detect_public_proxy_redirecturl,
            detect_residential_proxy=detect_residential_proxy,
            detect_residential_proxy_action=detect_residential_proxy_action,
            detect_residential_proxy_redirecturl=detect_residential_proxy_redirecturl,
            detect_smart_dns_proxy=detect_smart_dns_proxy,
            detect_smart_dns_proxy_action=detect_smart_dns_proxy_action,
            detect_smart_dns_proxy_redirecturl=detect_smart_dns_proxy_redirecturl,
            detect_tor_exit_node=detect_tor_exit_node,
            detect_tor_exit_node_action=detect_tor_exit_node_action,
            detect_tor_exit_node_redirecturl=detect_tor_exit_node_redirecturl,
            detect_vpn_data_center=detect_vpn_data_center,
            detect_vpn_data_center_action=detect_vpn_data_center_action,
            detect_vpn_data_center_redirecturl=detect_vpn_data_center_redirecturl,
            enable_configuration_mode=enable_configuration_mode,
            enabled=enabled,
            forward_header_enrichment=forward_header_enrichment,
            hosting_provider=hosting_provider,
            locked=locked,
            public_proxy=public_proxy,
            residential_proxy=residential_proxy,
            smart_dns_proxy=smart_dns_proxy,
            template_uuid=template_uuid,
            tor_exit_node=tor_exit_node,
            uuid=uuid,
            vpn_data_center=vpn_data_center,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             anonymous_vpn: Optional[str] = None,
             best_practice_action: Optional[str] = None,
             best_practice_redirecturl: Optional[str] = None,
             detect_anonymous_vpn: Optional[bool] = None,
             detect_anonymous_vpn_action: Optional[str] = None,
             detect_anonymous_vpn_redirecturl: Optional[str] = None,
             detect_hosting_provider: Optional[bool] = None,
             detect_hosting_provider_action: Optional[str] = None,
             detect_hosting_provider_redirecturl: Optional[str] = None,
             detect_public_proxy: Optional[bool] = None,
             detect_public_proxy_action: Optional[str] = None,
             detect_public_proxy_redirecturl: Optional[str] = None,
             detect_residential_proxy: Optional[bool] = None,
             detect_residential_proxy_action: Optional[str] = None,
             detect_residential_proxy_redirecturl: Optional[str] = None,
             detect_smart_dns_proxy: Optional[bool] = None,
             detect_smart_dns_proxy_action: Optional[str] = None,
             detect_smart_dns_proxy_redirecturl: Optional[str] = None,
             detect_tor_exit_node: Optional[bool] = None,
             detect_tor_exit_node_action: Optional[str] = None,
             detect_tor_exit_node_redirecturl: Optional[str] = None,
             detect_vpn_data_center: Optional[bool] = None,
             detect_vpn_data_center_action: Optional[str] = None,
             detect_vpn_data_center_redirecturl: Optional[str] = None,
             enable_configuration_mode: Optional[str] = None,
             enabled: Optional[bool] = None,
             forward_header_enrichment: Optional[bool] = None,
             hosting_provider: Optional[str] = None,
             locked: Optional[bool] = None,
             public_proxy: Optional[str] = None,
             residential_proxy: Optional[str] = None,
             smart_dns_proxy: Optional[str] = None,
             template_uuid: Optional[str] = None,
             tor_exit_node: Optional[str] = None,
             uuid: Optional[str] = None,
             vpn_data_center: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'anonymousVpn' in kwargs:
            anonymous_vpn = kwargs['anonymousVpn']
        if 'bestPracticeAction' in kwargs:
            best_practice_action = kwargs['bestPracticeAction']
        if 'bestPracticeRedirecturl' in kwargs:
            best_practice_redirecturl = kwargs['bestPracticeRedirecturl']
        if 'detectAnonymousVpn' in kwargs:
            detect_anonymous_vpn = kwargs['detectAnonymousVpn']
        if 'detectAnonymousVpnAction' in kwargs:
            detect_anonymous_vpn_action = kwargs['detectAnonymousVpnAction']
        if 'detectAnonymousVpnRedirecturl' in kwargs:
            detect_anonymous_vpn_redirecturl = kwargs['detectAnonymousVpnRedirecturl']
        if 'detectHostingProvider' in kwargs:
            detect_hosting_provider = kwargs['detectHostingProvider']
        if 'detectHostingProviderAction' in kwargs:
            detect_hosting_provider_action = kwargs['detectHostingProviderAction']
        if 'detectHostingProviderRedirecturl' in kwargs:
            detect_hosting_provider_redirecturl = kwargs['detectHostingProviderRedirecturl']
        if 'detectPublicProxy' in kwargs:
            detect_public_proxy = kwargs['detectPublicProxy']
        if 'detectPublicProxyAction' in kwargs:
            detect_public_proxy_action = kwargs['detectPublicProxyAction']
        if 'detectPublicProxyRedirecturl' in kwargs:
            detect_public_proxy_redirecturl = kwargs['detectPublicProxyRedirecturl']
        if 'detectResidentialProxy' in kwargs:
            detect_residential_proxy = kwargs['detectResidentialProxy']
        if 'detectResidentialProxyAction' in kwargs:
            detect_residential_proxy_action = kwargs['detectResidentialProxyAction']
        if 'detectResidentialProxyRedirecturl' in kwargs:
            detect_residential_proxy_redirecturl = kwargs['detectResidentialProxyRedirecturl']
        if 'detectSmartDnsProxy' in kwargs:
            detect_smart_dns_proxy = kwargs['detectSmartDnsProxy']
        if 'detectSmartDnsProxyAction' in kwargs:
            detect_smart_dns_proxy_action = kwargs['detectSmartDnsProxyAction']
        if 'detectSmartDnsProxyRedirecturl' in kwargs:
            detect_smart_dns_proxy_redirecturl = kwargs['detectSmartDnsProxyRedirecturl']
        if 'detectTorExitNode' in kwargs:
            detect_tor_exit_node = kwargs['detectTorExitNode']
        if 'detectTorExitNodeAction' in kwargs:
            detect_tor_exit_node_action = kwargs['detectTorExitNodeAction']
        if 'detectTorExitNodeRedirecturl' in kwargs:
            detect_tor_exit_node_redirecturl = kwargs['detectTorExitNodeRedirecturl']
        if 'detectVpnDataCenter' in kwargs:
            detect_vpn_data_center = kwargs['detectVpnDataCenter']
        if 'detectVpnDataCenterAction' in kwargs:
            detect_vpn_data_center_action = kwargs['detectVpnDataCenterAction']
        if 'detectVpnDataCenterRedirecturl' in kwargs:
            detect_vpn_data_center_redirecturl = kwargs['detectVpnDataCenterRedirecturl']
        if 'enableConfigurationMode' in kwargs:
            enable_configuration_mode = kwargs['enableConfigurationMode']
        if 'forwardHeaderEnrichment' in kwargs:
            forward_header_enrichment = kwargs['forwardHeaderEnrichment']
        if 'hostingProvider' in kwargs:
            hosting_provider = kwargs['hostingProvider']
        if 'publicProxy' in kwargs:
            public_proxy = kwargs['publicProxy']
        if 'residentialProxy' in kwargs:
            residential_proxy = kwargs['residentialProxy']
        if 'smartDnsProxy' in kwargs:
            smart_dns_proxy = kwargs['smartDnsProxy']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'torExitNode' in kwargs:
            tor_exit_node = kwargs['torExitNode']
        if 'vpnDataCenter' in kwargs:
            vpn_data_center = kwargs['vpnDataCenter']

        if anonymous_vpn is not None:
            _setter("anonymous_vpn", anonymous_vpn)
        if best_practice_action is not None:
            _setter("best_practice_action", best_practice_action)
        if best_practice_redirecturl is not None:
            _setter("best_practice_redirecturl", best_practice_redirecturl)
        if detect_anonymous_vpn is not None:
            _setter("detect_anonymous_vpn", detect_anonymous_vpn)
        if detect_anonymous_vpn_action is not None:
            _setter("detect_anonymous_vpn_action", detect_anonymous_vpn_action)
        if detect_anonymous_vpn_redirecturl is not None:
            _setter("detect_anonymous_vpn_redirecturl", detect_anonymous_vpn_redirecturl)
        if detect_hosting_provider is not None:
            _setter("detect_hosting_provider", detect_hosting_provider)
        if detect_hosting_provider_action is not None:
            _setter("detect_hosting_provider_action", detect_hosting_provider_action)
        if detect_hosting_provider_redirecturl is not None:
            _setter("detect_hosting_provider_redirecturl", detect_hosting_provider_redirecturl)
        if detect_public_proxy is not None:
            _setter("detect_public_proxy", detect_public_proxy)
        if detect_public_proxy_action is not None:
            _setter("detect_public_proxy_action", detect_public_proxy_action)
        if detect_public_proxy_redirecturl is not None:
            _setter("detect_public_proxy_redirecturl", detect_public_proxy_redirecturl)
        if detect_residential_proxy is not None:
            _setter("detect_residential_proxy", detect_residential_proxy)
        if detect_residential_proxy_action is not None:
            _setter("detect_residential_proxy_action", detect_residential_proxy_action)
        if detect_residential_proxy_redirecturl is not None:
            _setter("detect_residential_proxy_redirecturl", detect_residential_proxy_redirecturl)
        if detect_smart_dns_proxy is not None:
            _setter("detect_smart_dns_proxy", detect_smart_dns_proxy)
        if detect_smart_dns_proxy_action is not None:
            _setter("detect_smart_dns_proxy_action", detect_smart_dns_proxy_action)
        if detect_smart_dns_proxy_redirecturl is not None:
            _setter("detect_smart_dns_proxy_redirecturl", detect_smart_dns_proxy_redirecturl)
        if detect_tor_exit_node is not None:
            _setter("detect_tor_exit_node", detect_tor_exit_node)
        if detect_tor_exit_node_action is not None:
            _setter("detect_tor_exit_node_action", detect_tor_exit_node_action)
        if detect_tor_exit_node_redirecturl is not None:
            _setter("detect_tor_exit_node_redirecturl", detect_tor_exit_node_redirecturl)
        if detect_vpn_data_center is not None:
            _setter("detect_vpn_data_center", detect_vpn_data_center)
        if detect_vpn_data_center_action is not None:
            _setter("detect_vpn_data_center_action", detect_vpn_data_center_action)
        if detect_vpn_data_center_redirecturl is not None:
            _setter("detect_vpn_data_center_redirecturl", detect_vpn_data_center_redirecturl)
        if enable_configuration_mode is not None:
            _setter("enable_configuration_mode", enable_configuration_mode)
        if enabled is not None:
            _setter("enabled", enabled)
        if forward_header_enrichment is not None:
            _setter("forward_header_enrichment", forward_header_enrichment)
        if hosting_provider is not None:
            _setter("hosting_provider", hosting_provider)
        if locked is not None:
            _setter("locked", locked)
        if public_proxy is not None:
            _setter("public_proxy", public_proxy)
        if residential_proxy is not None:
            _setter("residential_proxy", residential_proxy)
        if smart_dns_proxy is not None:
            _setter("smart_dns_proxy", smart_dns_proxy)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if tor_exit_node is not None:
            _setter("tor_exit_node", tor_exit_node)
        if uuid is not None:
            _setter("uuid", uuid)
        if vpn_data_center is not None:
            _setter("vpn_data_center", vpn_data_center)

    @property
    @pulumi.getter(name="anonymousVpn")
    def anonymous_vpn(self) -> Optional[str]:
        return pulumi.get(self, "anonymous_vpn")

    @property
    @pulumi.getter(name="bestPracticeAction")
    def best_practice_action(self) -> Optional[str]:
        return pulumi.get(self, "best_practice_action")

    @property
    @pulumi.getter(name="bestPracticeRedirecturl")
    def best_practice_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "best_practice_redirecturl")

    @property
    @pulumi.getter(name="detectAnonymousVpn")
    def detect_anonymous_vpn(self) -> Optional[bool]:
        return pulumi.get(self, "detect_anonymous_vpn")

    @property
    @pulumi.getter(name="detectAnonymousVpnAction")
    def detect_anonymous_vpn_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_anonymous_vpn_action")

    @property
    @pulumi.getter(name="detectAnonymousVpnRedirecturl")
    def detect_anonymous_vpn_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_anonymous_vpn_redirecturl")

    @property
    @pulumi.getter(name="detectHostingProvider")
    def detect_hosting_provider(self) -> Optional[bool]:
        return pulumi.get(self, "detect_hosting_provider")

    @property
    @pulumi.getter(name="detectHostingProviderAction")
    def detect_hosting_provider_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_hosting_provider_action")

    @property
    @pulumi.getter(name="detectHostingProviderRedirecturl")
    def detect_hosting_provider_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_hosting_provider_redirecturl")

    @property
    @pulumi.getter(name="detectPublicProxy")
    def detect_public_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_public_proxy")

    @property
    @pulumi.getter(name="detectPublicProxyAction")
    def detect_public_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_public_proxy_action")

    @property
    @pulumi.getter(name="detectPublicProxyRedirecturl")
    def detect_public_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_public_proxy_redirecturl")

    @property
    @pulumi.getter(name="detectResidentialProxy")
    def detect_residential_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_residential_proxy")

    @property
    @pulumi.getter(name="detectResidentialProxyAction")
    def detect_residential_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_residential_proxy_action")

    @property
    @pulumi.getter(name="detectResidentialProxyRedirecturl")
    def detect_residential_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_residential_proxy_redirecturl")

    @property
    @pulumi.getter(name="detectSmartDnsProxy")
    def detect_smart_dns_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_smart_dns_proxy")

    @property
    @pulumi.getter(name="detectSmartDnsProxyAction")
    def detect_smart_dns_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_smart_dns_proxy_action")

    @property
    @pulumi.getter(name="detectSmartDnsProxyRedirecturl")
    def detect_smart_dns_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_smart_dns_proxy_redirecturl")

    @property
    @pulumi.getter(name="detectTorExitNode")
    def detect_tor_exit_node(self) -> Optional[bool]:
        return pulumi.get(self, "detect_tor_exit_node")

    @property
    @pulumi.getter(name="detectTorExitNodeAction")
    def detect_tor_exit_node_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_tor_exit_node_action")

    @property
    @pulumi.getter(name="detectTorExitNodeRedirecturl")
    def detect_tor_exit_node_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_tor_exit_node_redirecturl")

    @property
    @pulumi.getter(name="detectVpnDataCenter")
    def detect_vpn_data_center(self) -> Optional[bool]:
        return pulumi.get(self, "detect_vpn_data_center")

    @property
    @pulumi.getter(name="detectVpnDataCenterAction")
    def detect_vpn_data_center_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_vpn_data_center_action")

    @property
    @pulumi.getter(name="detectVpnDataCenterRedirecturl")
    def detect_vpn_data_center_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_vpn_data_center_redirecturl")

    @property
    @pulumi.getter(name="enableConfigurationMode")
    def enable_configuration_mode(self) -> Optional[str]:
        return pulumi.get(self, "enable_configuration_mode")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forwardHeaderEnrichment")
    def forward_header_enrichment(self) -> Optional[bool]:
        return pulumi.get(self, "forward_header_enrichment")

    @property
    @pulumi.getter(name="hostingProvider")
    def hosting_provider(self) -> Optional[str]:
        return pulumi.get(self, "hosting_provider")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="publicProxy")
    def public_proxy(self) -> Optional[str]:
        return pulumi.get(self, "public_proxy")

    @property
    @pulumi.getter(name="residentialProxy")
    def residential_proxy(self) -> Optional[str]:
        return pulumi.get(self, "residential_proxy")

    @property
    @pulumi.getter(name="smartDnsProxy")
    def smart_dns_proxy(self) -> Optional[str]:
        return pulumi.get(self, "smart_dns_proxy")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="torExitNode")
    def tor_exit_node(self) -> Optional[str]:
        return pulumi.get(self, "tor_exit_node")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="vpnDataCenter")
    def vpn_data_center(self) -> Optional[str]:
        return pulumi.get(self, "vpn_data_center")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEpdForwardHeaderEnrichmentResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorEpdForwardHeaderEnrichmentResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFailActionResult(dict):
    def __init__(__self__, *,
                 action_type: Optional[str] = None,
                 allow_fcm_parent_override: Optional[bool] = None,
                 cex_custom_path: Optional[bool] = None,
                 cex_hostname: Optional[str] = None,
                 cex_path: Optional[str] = None,
                 content_custom_path: Optional[bool] = None,
                 content_hostname: Optional[str] = None,
                 content_path: Optional[str] = None,
                 cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeResult'] = None,
                 dynamic_custom_path: Optional[bool] = None,
                 dynamic_method: Optional[str] = None,
                 dynamic_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modify_protocol: Optional[bool] = None,
                 net_storage_hostname: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionNetStorageHostnameResult'] = None,
                 net_storage_path: Optional[str] = None,
                 preserve_query_string: Optional[bool] = None,
                 protocol: Optional[str] = None,
                 redirect_custom_path: Optional[bool] = None,
                 redirect_hostname: Optional[str] = None,
                 redirect_hostname_type: Optional[str] = None,
                 redirect_method: Optional[int] = None,
                 redirect_path: Optional[str] = None,
                 saas_cname_enabled: Optional[bool] = None,
                 saas_cname_level: Optional[int] = None,
                 saas_cookie: Optional[str] = None,
                 saas_query_string: Optional[str] = None,
                 saas_regex: Optional[str] = None,
                 saas_replace: Optional[str] = None,
                 saas_suffix: Optional[str] = None,
                 saas_type: Optional[str] = None,
                 status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorFailActionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_type=action_type,
            allow_fcm_parent_override=allow_fcm_parent_override,
            cex_custom_path=cex_custom_path,
            cex_hostname=cex_hostname,
            cex_path=cex_path,
            content_custom_path=content_custom_path,
            content_hostname=content_hostname,
            content_path=content_path,
            cp_code=cp_code,
            dynamic_custom_path=dynamic_custom_path,
            dynamic_method=dynamic_method,
            dynamic_path=dynamic_path,
            enabled=enabled,
            locked=locked,
            modify_protocol=modify_protocol,
            net_storage_hostname=net_storage_hostname,
            net_storage_path=net_storage_path,
            preserve_query_string=preserve_query_string,
            protocol=protocol,
            redirect_custom_path=redirect_custom_path,
            redirect_hostname=redirect_hostname,
            redirect_hostname_type=redirect_hostname_type,
            redirect_method=redirect_method,
            redirect_path=redirect_path,
            saas_cname_enabled=saas_cname_enabled,
            saas_cname_level=saas_cname_level,
            saas_cookie=saas_cookie,
            saas_query_string=saas_query_string,
            saas_regex=saas_regex,
            saas_replace=saas_replace,
            saas_suffix=saas_suffix,
            saas_type=saas_type,
            status_code=status_code,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_type: Optional[str] = None,
             allow_fcm_parent_override: Optional[bool] = None,
             cex_custom_path: Optional[bool] = None,
             cex_hostname: Optional[str] = None,
             cex_path: Optional[str] = None,
             content_custom_path: Optional[bool] = None,
             content_hostname: Optional[str] = None,
             content_path: Optional[str] = None,
             cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeResult'] = None,
             dynamic_custom_path: Optional[bool] = None,
             dynamic_method: Optional[str] = None,
             dynamic_path: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             modify_protocol: Optional[bool] = None,
             net_storage_hostname: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionNetStorageHostnameResult'] = None,
             net_storage_path: Optional[str] = None,
             preserve_query_string: Optional[bool] = None,
             protocol: Optional[str] = None,
             redirect_custom_path: Optional[bool] = None,
             redirect_hostname: Optional[str] = None,
             redirect_hostname_type: Optional[str] = None,
             redirect_method: Optional[int] = None,
             redirect_path: Optional[str] = None,
             saas_cname_enabled: Optional[bool] = None,
             saas_cname_level: Optional[int] = None,
             saas_cookie: Optional[str] = None,
             saas_query_string: Optional[str] = None,
             saas_regex: Optional[str] = None,
             saas_replace: Optional[str] = None,
             saas_suffix: Optional[str] = None,
             saas_type: Optional[str] = None,
             status_code: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'actionType' in kwargs:
            action_type = kwargs['actionType']
        if 'allowFcmParentOverride' in kwargs:
            allow_fcm_parent_override = kwargs['allowFcmParentOverride']
        if 'cexCustomPath' in kwargs:
            cex_custom_path = kwargs['cexCustomPath']
        if 'cexHostname' in kwargs:
            cex_hostname = kwargs['cexHostname']
        if 'cexPath' in kwargs:
            cex_path = kwargs['cexPath']
        if 'contentCustomPath' in kwargs:
            content_custom_path = kwargs['contentCustomPath']
        if 'contentHostname' in kwargs:
            content_hostname = kwargs['contentHostname']
        if 'contentPath' in kwargs:
            content_path = kwargs['contentPath']
        if 'cpCode' in kwargs:
            cp_code = kwargs['cpCode']
        if 'dynamicCustomPath' in kwargs:
            dynamic_custom_path = kwargs['dynamicCustomPath']
        if 'dynamicMethod' in kwargs:
            dynamic_method = kwargs['dynamicMethod']
        if 'dynamicPath' in kwargs:
            dynamic_path = kwargs['dynamicPath']
        if 'modifyProtocol' in kwargs:
            modify_protocol = kwargs['modifyProtocol']
        if 'netStorageHostname' in kwargs:
            net_storage_hostname = kwargs['netStorageHostname']
        if 'netStoragePath' in kwargs:
            net_storage_path = kwargs['netStoragePath']
        if 'preserveQueryString' in kwargs:
            preserve_query_string = kwargs['preserveQueryString']
        if 'redirectCustomPath' in kwargs:
            redirect_custom_path = kwargs['redirectCustomPath']
        if 'redirectHostname' in kwargs:
            redirect_hostname = kwargs['redirectHostname']
        if 'redirectHostnameType' in kwargs:
            redirect_hostname_type = kwargs['redirectHostnameType']
        if 'redirectMethod' in kwargs:
            redirect_method = kwargs['redirectMethod']
        if 'redirectPath' in kwargs:
            redirect_path = kwargs['redirectPath']
        if 'saasCnameEnabled' in kwargs:
            saas_cname_enabled = kwargs['saasCnameEnabled']
        if 'saasCnameLevel' in kwargs:
            saas_cname_level = kwargs['saasCnameLevel']
        if 'saasCookie' in kwargs:
            saas_cookie = kwargs['saasCookie']
        if 'saasQueryString' in kwargs:
            saas_query_string = kwargs['saasQueryString']
        if 'saasRegex' in kwargs:
            saas_regex = kwargs['saasRegex']
        if 'saasReplace' in kwargs:
            saas_replace = kwargs['saasReplace']
        if 'saasSuffix' in kwargs:
            saas_suffix = kwargs['saasSuffix']
        if 'saasType' in kwargs:
            saas_type = kwargs['saasType']
        if 'statusCode' in kwargs:
            status_code = kwargs['statusCode']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if action_type is not None:
            _setter("action_type", action_type)
        if allow_fcm_parent_override is not None:
            _setter("allow_fcm_parent_override", allow_fcm_parent_override)
        if cex_custom_path is not None:
            _setter("cex_custom_path", cex_custom_path)
        if cex_hostname is not None:
            _setter("cex_hostname", cex_hostname)
        if cex_path is not None:
            _setter("cex_path", cex_path)
        if content_custom_path is not None:
            _setter("content_custom_path", content_custom_path)
        if content_hostname is not None:
            _setter("content_hostname", content_hostname)
        if content_path is not None:
            _setter("content_path", content_path)
        if cp_code is not None:
            _setter("cp_code", cp_code)
        if dynamic_custom_path is not None:
            _setter("dynamic_custom_path", dynamic_custom_path)
        if dynamic_method is not None:
            _setter("dynamic_method", dynamic_method)
        if dynamic_path is not None:
            _setter("dynamic_path", dynamic_path)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if modify_protocol is not None:
            _setter("modify_protocol", modify_protocol)
        if net_storage_hostname is not None:
            _setter("net_storage_hostname", net_storage_hostname)
        if net_storage_path is not None:
            _setter("net_storage_path", net_storage_path)
        if preserve_query_string is not None:
            _setter("preserve_query_string", preserve_query_string)
        if protocol is not None:
            _setter("protocol", protocol)
        if redirect_custom_path is not None:
            _setter("redirect_custom_path", redirect_custom_path)
        if redirect_hostname is not None:
            _setter("redirect_hostname", redirect_hostname)
        if redirect_hostname_type is not None:
            _setter("redirect_hostname_type", redirect_hostname_type)
        if redirect_method is not None:
            _setter("redirect_method", redirect_method)
        if redirect_path is not None:
            _setter("redirect_path", redirect_path)
        if saas_cname_enabled is not None:
            _setter("saas_cname_enabled", saas_cname_enabled)
        if saas_cname_level is not None:
            _setter("saas_cname_level", saas_cname_level)
        if saas_cookie is not None:
            _setter("saas_cookie", saas_cookie)
        if saas_query_string is not None:
            _setter("saas_query_string", saas_query_string)
        if saas_regex is not None:
            _setter("saas_regex", saas_regex)
        if saas_replace is not None:
            _setter("saas_replace", saas_replace)
        if saas_suffix is not None:
            _setter("saas_suffix", saas_suffix)
        if saas_type is not None:
            _setter("saas_type", saas_type)
        if status_code is not None:
            _setter("status_code", status_code)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="allowFcmParentOverride")
    def allow_fcm_parent_override(self) -> Optional[bool]:
        return pulumi.get(self, "allow_fcm_parent_override")

    @property
    @pulumi.getter(name="cexCustomPath")
    def cex_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "cex_custom_path")

    @property
    @pulumi.getter(name="cexHostname")
    def cex_hostname(self) -> Optional[str]:
        return pulumi.get(self, "cex_hostname")

    @property
    @pulumi.getter(name="cexPath")
    def cex_path(self) -> Optional[str]:
        return pulumi.get(self, "cex_path")

    @property
    @pulumi.getter(name="contentCustomPath")
    def content_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "content_custom_path")

    @property
    @pulumi.getter(name="contentHostname")
    def content_hostname(self) -> Optional[str]:
        return pulumi.get(self, "content_hostname")

    @property
    @pulumi.getter(name="contentPath")
    def content_path(self) -> Optional[str]:
        return pulumi.get(self, "content_path")

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeResult']:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="dynamicCustomPath")
    def dynamic_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_custom_path")

    @property
    @pulumi.getter(name="dynamicMethod")
    def dynamic_method(self) -> Optional[str]:
        return pulumi.get(self, "dynamic_method")

    @property
    @pulumi.getter(name="dynamicPath")
    def dynamic_path(self) -> Optional[str]:
        return pulumi.get(self, "dynamic_path")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="modifyProtocol")
    def modify_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "modify_protocol")

    @property
    @pulumi.getter(name="netStorageHostname")
    def net_storage_hostname(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionNetStorageHostnameResult']:
        return pulumi.get(self, "net_storage_hostname")

    @property
    @pulumi.getter(name="netStoragePath")
    def net_storage_path(self) -> Optional[str]:
        return pulumi.get(self, "net_storage_path")

    @property
    @pulumi.getter(name="preserveQueryString")
    def preserve_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_query_string")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="redirectCustomPath")
    def redirect_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "redirect_custom_path")

    @property
    @pulumi.getter(name="redirectHostname")
    def redirect_hostname(self) -> Optional[str]:
        return pulumi.get(self, "redirect_hostname")

    @property
    @pulumi.getter(name="redirectHostnameType")
    def redirect_hostname_type(self) -> Optional[str]:
        return pulumi.get(self, "redirect_hostname_type")

    @property
    @pulumi.getter(name="redirectMethod")
    def redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "redirect_method")

    @property
    @pulumi.getter(name="redirectPath")
    def redirect_path(self) -> Optional[str]:
        return pulumi.get(self, "redirect_path")

    @property
    @pulumi.getter(name="saasCnameEnabled")
    def saas_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "saas_cname_enabled")

    @property
    @pulumi.getter(name="saasCnameLevel")
    def saas_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "saas_cname_level")

    @property
    @pulumi.getter(name="saasCookie")
    def saas_cookie(self) -> Optional[str]:
        return pulumi.get(self, "saas_cookie")

    @property
    @pulumi.getter(name="saasQueryString")
    def saas_query_string(self) -> Optional[str]:
        return pulumi.get(self, "saas_query_string")

    @property
    @pulumi.getter(name="saasRegex")
    def saas_regex(self) -> Optional[str]:
        return pulumi.get(self, "saas_regex")

    @property
    @pulumi.getter(name="saasReplace")
    def saas_replace(self) -> Optional[str]:
        return pulumi.get(self, "saas_replace")

    @property
    @pulumi.getter(name="saasSuffix")
    def saas_suffix(self) -> Optional[str]:
        return pulumi.get(self, "saas_suffix")

    @property
    @pulumi.getter(name="saasType")
    def saas_type(self) -> Optional[str]:
        return pulumi.get(self, "saas_type")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFailActionNetStorageHostnameResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorFailActionNetStorageHostnameResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code=cp_code,
            download_domain_name=download_domain_name,
            g2o_token=g2o_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code: Optional[int] = None,
             download_domain_name: Optional[str] = None,
             g2o_token: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCode' in kwargs:
            cp_code = kwargs['cpCode']
        if 'downloadDomainName' in kwargs:
            download_domain_name = kwargs['downloadDomainName']
        if 'g2oToken' in kwargs:
            g2o_token = kwargs['g2oToken']

        if cp_code is not None:
            _setter("cp_code", cp_code)
        if download_domain_name is not None:
            _setter("download_domain_name", download_domain_name)
        if g2o_token is not None:
            _setter("g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFailoverBotManagerFeatureCompatibilityResult(dict):
    def __init__(__self__, *,
                 compatibility: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorFailoverBotManagerFeatureCompatibilityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compatibility=compatibility,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compatibility: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if compatibility is not None:
            _setter("compatibility", compatibility)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def compatibility(self) -> Optional[bool]:
        return pulumi.get(self, "compatibility")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFastInvalidateResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorFastInvalidateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 java_script_insertion_rule: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_math_prefix: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloudlet_policy=cloudlet_policy,
            enabled=enabled,
            java_script_insertion_rule=java_script_insertion_rule,
            locked=locked,
            media_math_prefix=media_math_prefix,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingCloudletPolicyResult'] = None,
             enabled: Optional[bool] = None,
             java_script_insertion_rule: Optional[str] = None,
             locked: Optional[bool] = None,
             media_math_prefix: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'javaScriptInsertionRule' in kwargs:
            java_script_insertion_rule = kwargs['javaScriptInsertionRule']
        if 'mediaMathPrefix' in kwargs:
            media_math_prefix = kwargs['mediaMathPrefix']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if java_script_insertion_rule is not None:
            _setter("java_script_insertion_rule", java_script_insertion_rule)
        if locked is not None:
            _setter("locked", locked)
        if media_math_prefix is not None:
            _setter("media_math_prefix", media_math_prefix)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="javaScriptInsertionRule")
    def java_script_insertion_rule(self) -> Optional[str]:
        return pulumi.get(self, "java_script_insertion_rule")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mediaMathPrefix")
    def media_math_prefix(self) -> Optional[str]:
        return pulumi.get(self, "media_math_prefix")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 java_script_insertion_rule: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_math_prefix: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloudlet_policy=cloudlet_policy,
            enabled=enabled,
            java_script_insertion_rule=java_script_insertion_rule,
            locked=locked,
            media_math_prefix=media_math_prefix,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusCloudletPolicyResult'] = None,
             enabled: Optional[bool] = None,
             java_script_insertion_rule: Optional[str] = None,
             locked: Optional[bool] = None,
             media_math_prefix: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'javaScriptInsertionRule' in kwargs:
            java_script_insertion_rule = kwargs['javaScriptInsertionRule']
        if 'mediaMathPrefix' in kwargs:
            media_math_prefix = kwargs['mediaMathPrefix']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if java_script_insertion_rule is not None:
            _setter("java_script_insertion_rule", java_script_insertion_rule)
        if locked is not None:
            _setter("locked", locked)
        if media_math_prefix is not None:
            _setter("media_math_prefix", media_math_prefix)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="javaScriptInsertionRule")
    def java_script_insertion_rule(self) -> Optional[str]:
        return pulumi.get(self, "java_script_insertion_rule")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mediaMathPrefix")
    def media_math_prefix(self) -> Optional[str]:
        return pulumi.get(self, "media_math_prefix")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloudlet_policy=cloudlet_policy,
            cloudlet_shared_policy=cloudlet_shared_policy,
            enabled=enabled,
            is_shared_policy=is_shared_policy,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteCloudletPolicyResult'] = None,
             cloudlet_shared_policy: Optional[int] = None,
             enabled: Optional[bool] = None,
             is_shared_policy: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'cloudletSharedPolicy' in kwargs:
            cloudlet_shared_policy = kwargs['cloudletSharedPolicy']
        if 'isSharedPolicy' in kwargs:
            is_shared_policy = kwargs['isSharedPolicy']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            _setter("cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if is_shared_policy is not None:
            _setter("is_shared_policy", is_shared_policy)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFrontEndOptimizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorFrontEndOptimizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorG2oheaderResult(dict):
    def __init__(__self__, *,
                 custom_sign_strings: Optional[Sequence[str]] = None,
                 data_header: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 encoding_version: Optional[int] = None,
                 locked: Optional[bool] = None,
                 nonce: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 signed_header: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_custom_sign_string: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorG2oheaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_sign_strings=custom_sign_strings,
            data_header=data_header,
            enabled=enabled,
            encoding_version=encoding_version,
            locked=locked,
            nonce=nonce,
            secret_key=secret_key,
            signed_header=signed_header,
            template_uuid=template_uuid,
            use_custom_sign_string=use_custom_sign_string,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_sign_strings: Optional[Sequence[str]] = None,
             data_header: Optional[str] = None,
             enabled: Optional[bool] = None,
             encoding_version: Optional[int] = None,
             locked: Optional[bool] = None,
             nonce: Optional[str] = None,
             secret_key: Optional[str] = None,
             signed_header: Optional[str] = None,
             template_uuid: Optional[str] = None,
             use_custom_sign_string: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customSignStrings' in kwargs:
            custom_sign_strings = kwargs['customSignStrings']
        if 'dataHeader' in kwargs:
            data_header = kwargs['dataHeader']
        if 'encodingVersion' in kwargs:
            encoding_version = kwargs['encodingVersion']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'signedHeader' in kwargs:
            signed_header = kwargs['signedHeader']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useCustomSignString' in kwargs:
            use_custom_sign_string = kwargs['useCustomSignString']

        if custom_sign_strings is not None:
            _setter("custom_sign_strings", custom_sign_strings)
        if data_header is not None:
            _setter("data_header", data_header)
        if enabled is not None:
            _setter("enabled", enabled)
        if encoding_version is not None:
            _setter("encoding_version", encoding_version)
        if locked is not None:
            _setter("locked", locked)
        if nonce is not None:
            _setter("nonce", nonce)
        if secret_key is not None:
            _setter("secret_key", secret_key)
        if signed_header is not None:
            _setter("signed_header", signed_header)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_custom_sign_string is not None:
            _setter("use_custom_sign_string", use_custom_sign_string)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="customSignStrings")
    def custom_sign_strings(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_sign_strings")

    @property
    @pulumi.getter(name="dataHeader")
    def data_header(self) -> Optional[str]:
        return pulumi.get(self, "data_header")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="encodingVersion")
    def encoding_version(self) -> Optional[int]:
        return pulumi.get(self, "encoding_version")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="signedHeader")
    def signed_header(self) -> Optional[str]:
        return pulumi.get(self, "signed_header")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useCustomSignString")
    def use_custom_sign_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_custom_sign_string")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorGlobalRequestNumberResult(dict):
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 output_option: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorGlobalRequestNumberResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_name=header_name,
            locked=locked,
            output_option=output_option,
            template_uuid=template_uuid,
            uuid=uuid,
            variable_name=variable_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_name: Optional[str] = None,
             locked: Optional[bool] = None,
             output_option: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             variable_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'outputOption' in kwargs:
            output_option = kwargs['outputOption']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'variableName' in kwargs:
            variable_name = kwargs['variableName']

        if header_name is not None:
            _setter("header_name", header_name)
        if locked is not None:
            _setter("locked", locked)
        if output_option is not None:
            _setter("output_option", output_option)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if variable_name is not None:
            _setter("variable_name", variable_name)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="outputOption")
    def output_option(self) -> Optional[str]:
        return pulumi.get(self, "output_option")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorGraphqlCachingResult(dict):
    def __init__(__self__, *,
                 advanced: Optional[str] = None,
                 cache_responses_with_errors: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 operations_json_body_parameter_name: Optional[str] = None,
                 operations_url_query_parameter_name: Optional[str] = None,
                 post_request_processing_error_handling: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorGraphqlCachingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            advanced=advanced,
            cache_responses_with_errors=cache_responses_with_errors,
            enabled=enabled,
            locked=locked,
            operations_json_body_parameter_name=operations_json_body_parameter_name,
            operations_url_query_parameter_name=operations_url_query_parameter_name,
            post_request_processing_error_handling=post_request_processing_error_handling,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             advanced: Optional[str] = None,
             cache_responses_with_errors: Optional[bool] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             operations_json_body_parameter_name: Optional[str] = None,
             operations_url_query_parameter_name: Optional[str] = None,
             post_request_processing_error_handling: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cacheResponsesWithErrors' in kwargs:
            cache_responses_with_errors = kwargs['cacheResponsesWithErrors']
        if 'operationsJsonBodyParameterName' in kwargs:
            operations_json_body_parameter_name = kwargs['operationsJsonBodyParameterName']
        if 'operationsUrlQueryParameterName' in kwargs:
            operations_url_query_parameter_name = kwargs['operationsUrlQueryParameterName']
        if 'postRequestProcessingErrorHandling' in kwargs:
            post_request_processing_error_handling = kwargs['postRequestProcessingErrorHandling']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if advanced is not None:
            _setter("advanced", advanced)
        if cache_responses_with_errors is not None:
            _setter("cache_responses_with_errors", cache_responses_with_errors)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if operations_json_body_parameter_name is not None:
            _setter("operations_json_body_parameter_name", operations_json_body_parameter_name)
        if operations_url_query_parameter_name is not None:
            _setter("operations_url_query_parameter_name", operations_url_query_parameter_name)
        if post_request_processing_error_handling is not None:
            _setter("post_request_processing_error_handling", post_request_processing_error_handling)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[str]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="cacheResponsesWithErrors")
    def cache_responses_with_errors(self) -> Optional[bool]:
        return pulumi.get(self, "cache_responses_with_errors")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="operationsJsonBodyParameterName")
    def operations_json_body_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "operations_json_body_parameter_name")

    @property
    @pulumi.getter(name="operationsUrlQueryParameterName")
    def operations_url_query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "operations_url_query_parameter_name")

    @property
    @pulumi.getter(name="postRequestProcessingErrorHandling")
    def post_request_processing_error_handling(self) -> Optional[str]:
        return pulumi.get(self, "post_request_processing_error_handling")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorGzipResponseResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorGzipResponseResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior=behavior,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if behavior is not None:
            _setter("behavior", behavior)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHdDataAdvancedResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorHdDataAdvancedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            xml=xml,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             xml: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if description is not None:
            _setter("description", description)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if xml is not None:
            _setter("xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHealthDetectionResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 maximum_reconnects: Optional[int] = None,
                 retry_count: Optional[int] = None,
                 retry_interval: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorHealthDetectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            maximum_reconnects=maximum_reconnects,
            retry_count=retry_count,
            retry_interval=retry_interval,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             maximum_reconnects: Optional[int] = None,
             retry_count: Optional[int] = None,
             retry_interval: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maximumReconnects' in kwargs:
            maximum_reconnects = kwargs['maximumReconnects']
        if 'retryCount' in kwargs:
            retry_count = kwargs['retryCount']
        if 'retryInterval' in kwargs:
            retry_interval = kwargs['retryInterval']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if maximum_reconnects is not None:
            _setter("maximum_reconnects", maximum_reconnects)
        if retry_count is not None:
            _setter("retry_count", retry_count)
        if retry_interval is not None:
            _setter("retry_interval", retry_interval)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumReconnects")
    def maximum_reconnects(self) -> Optional[int]:
        return pulumi.get(self, "maximum_reconnects")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[int]:
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[str]:
        return pulumi.get(self, "retry_interval")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHsafEipBindingResult(dict):
    def __init__(__self__, *,
                 custom_extracted_serial: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 hash_max_value: Optional[int] = None,
                 hash_min_value: Optional[int] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tier: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorHsafEipBindingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_extracted_serial=custom_extracted_serial,
            enabled=enabled,
            hash_max_value=hash_max_value,
            hash_min_value=hash_min_value,
            locked=locked,
            template_uuid=template_uuid,
            tier=tier,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_extracted_serial: Optional[bool] = None,
             enabled: Optional[bool] = None,
             hash_max_value: Optional[int] = None,
             hash_min_value: Optional[int] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             tier: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customExtractedSerial' in kwargs:
            custom_extracted_serial = kwargs['customExtractedSerial']
        if 'hashMaxValue' in kwargs:
            hash_max_value = kwargs['hashMaxValue']
        if 'hashMinValue' in kwargs:
            hash_min_value = kwargs['hashMinValue']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if custom_extracted_serial is not None:
            _setter("custom_extracted_serial", custom_extracted_serial)
        if enabled is not None:
            _setter("enabled", enabled)
        if hash_max_value is not None:
            _setter("hash_max_value", hash_max_value)
        if hash_min_value is not None:
            _setter("hash_min_value", hash_min_value)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if tier is not None:
            _setter("tier", tier)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="customExtractedSerial")
    def custom_extracted_serial(self) -> Optional[bool]:
        return pulumi.get(self, "custom_extracted_serial")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="hashMaxValue")
    def hash_max_value(self) -> Optional[int]:
        return pulumi.get(self, "hash_max_value")

    @property
    @pulumi.getter(name="hashMinValue")
    def hash_min_value(self) -> Optional[int]:
        return pulumi.get(self, "hash_min_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        return pulumi.get(self, "tier")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHttp2Result(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorHttp2Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHttp3Result(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorHttp3Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable=enable,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enable is not None:
            _setter("enable", enable)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHttpStrictTransportSecurityResult(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 include_sub_domains: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 max_age: Optional[str] = None,
                 preload: Optional[bool] = None,
                 redirect: Optional[bool] = None,
                 redirect_status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorHttpStrictTransportSecurityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable=enable,
            include_sub_domains=include_sub_domains,
            locked=locked,
            max_age=max_age,
            preload=preload,
            redirect=redirect,
            redirect_status_code=redirect_status_code,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable: Optional[bool] = None,
             include_sub_domains: Optional[bool] = None,
             locked: Optional[bool] = None,
             max_age: Optional[str] = None,
             preload: Optional[bool] = None,
             redirect: Optional[bool] = None,
             redirect_status_code: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'includeSubDomains' in kwargs:
            include_sub_domains = kwargs['includeSubDomains']
        if 'maxAge' in kwargs:
            max_age = kwargs['maxAge']
        if 'redirectStatusCode' in kwargs:
            redirect_status_code = kwargs['redirectStatusCode']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enable is not None:
            _setter("enable", enable)
        if include_sub_domains is not None:
            _setter("include_sub_domains", include_sub_domains)
        if locked is not None:
            _setter("locked", locked)
        if max_age is not None:
            _setter("max_age", max_age)
        if preload is not None:
            _setter("preload", preload)
        if redirect is not None:
            _setter("redirect", redirect)
        if redirect_status_code is not None:
            _setter("redirect_status_code", redirect_status_code)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="includeSubDomains")
    def include_sub_domains(self) -> Optional[bool]:
        return pulumi.get(self, "include_sub_domains")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[str]:
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter
    def preload(self) -> Optional[bool]:
        return pulumi.get(self, "preload")

    @property
    @pulumi.getter
    def redirect(self) -> Optional[bool]:
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter(name="redirectStatusCode")
    def redirect_status_code(self) -> Optional[int]:
        return pulumi.get(self, "redirect_status_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHttpToHttpsUpgradeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upgrade: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorHttpToHttpsUpgradeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            upgrade=upgrade,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             upgrade: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if upgrade is not None:
            _setter("upgrade", upgrade)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def upgrade(self) -> Optional[str]:
        return pulumi.get(self, "upgrade")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImOverrideResult(dict):
    def __init__(__self__, *,
                 dpr: Optional[float] = None,
                 dprvar: Optional[str] = None,
                 exclude_all_query_parameters: Optional[bool] = None,
                 excluded_query_parameters: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 formatvar: Optional[str] = None,
                 locked: Optional[bool] = None,
                 override: Optional[str] = None,
                 policy: Optional[str] = None,
                 policyvar: Optional[str] = None,
                 policyvar_i_mvar: Optional[str] = None,
                 policyvar_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 typesel: Optional[str] = None,
                 uuid: Optional[str] = None,
                 width: Optional[float] = None,
                 widthvar: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorImOverrideResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dpr=dpr,
            dprvar=dprvar,
            exclude_all_query_parameters=exclude_all_query_parameters,
            excluded_query_parameters=excluded_query_parameters,
            format=format,
            formatvar=formatvar,
            locked=locked,
            override=override,
            policy=policy,
            policyvar=policyvar,
            policyvar_i_mvar=policyvar_i_mvar,
            policyvar_name=policyvar_name,
            template_uuid=template_uuid,
            typesel=typesel,
            uuid=uuid,
            width=width,
            widthvar=widthvar,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dpr: Optional[float] = None,
             dprvar: Optional[str] = None,
             exclude_all_query_parameters: Optional[bool] = None,
             excluded_query_parameters: Optional[Sequence[str]] = None,
             format: Optional[str] = None,
             formatvar: Optional[str] = None,
             locked: Optional[bool] = None,
             override: Optional[str] = None,
             policy: Optional[str] = None,
             policyvar: Optional[str] = None,
             policyvar_i_mvar: Optional[str] = None,
             policyvar_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             typesel: Optional[str] = None,
             uuid: Optional[str] = None,
             width: Optional[float] = None,
             widthvar: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'excludeAllQueryParameters' in kwargs:
            exclude_all_query_parameters = kwargs['excludeAllQueryParameters']
        if 'excludedQueryParameters' in kwargs:
            excluded_query_parameters = kwargs['excludedQueryParameters']
        if 'policyvarIMvar' in kwargs:
            policyvar_i_mvar = kwargs['policyvarIMvar']
        if 'policyvarName' in kwargs:
            policyvar_name = kwargs['policyvarName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if dpr is not None:
            _setter("dpr", dpr)
        if dprvar is not None:
            _setter("dprvar", dprvar)
        if exclude_all_query_parameters is not None:
            _setter("exclude_all_query_parameters", exclude_all_query_parameters)
        if excluded_query_parameters is not None:
            _setter("excluded_query_parameters", excluded_query_parameters)
        if format is not None:
            _setter("format", format)
        if formatvar is not None:
            _setter("formatvar", formatvar)
        if locked is not None:
            _setter("locked", locked)
        if override is not None:
            _setter("override", override)
        if policy is not None:
            _setter("policy", policy)
        if policyvar is not None:
            _setter("policyvar", policyvar)
        if policyvar_i_mvar is not None:
            _setter("policyvar_i_mvar", policyvar_i_mvar)
        if policyvar_name is not None:
            _setter("policyvar_name", policyvar_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if typesel is not None:
            _setter("typesel", typesel)
        if uuid is not None:
            _setter("uuid", uuid)
        if width is not None:
            _setter("width", width)
        if widthvar is not None:
            _setter("widthvar", widthvar)

    @property
    @pulumi.getter
    def dpr(self) -> Optional[float]:
        return pulumi.get(self, "dpr")

    @property
    @pulumi.getter
    def dprvar(self) -> Optional[str]:
        return pulumi.get(self, "dprvar")

    @property
    @pulumi.getter(name="excludeAllQueryParameters")
    def exclude_all_query_parameters(self) -> Optional[bool]:
        return pulumi.get(self, "exclude_all_query_parameters")

    @property
    @pulumi.getter(name="excludedQueryParameters")
    def excluded_query_parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_query_parameters")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def formatvar(self) -> Optional[str]:
        return pulumi.get(self, "formatvar")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def override(self) -> Optional[str]:
        return pulumi.get(self, "override")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def policyvar(self) -> Optional[str]:
        return pulumi.get(self, "policyvar")

    @property
    @pulumi.getter(name="policyvarIMvar")
    def policyvar_i_mvar(self) -> Optional[str]:
        return pulumi.get(self, "policyvar_i_mvar")

    @property
    @pulumi.getter(name="policyvarName")
    def policyvar_name(self) -> Optional[str]:
        return pulumi.get(self, "policyvar_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def typesel(self) -> Optional[str]:
        return pulumi.get(self, "typesel")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def width(self) -> Optional[float]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter
    def widthvar(self) -> Optional[str]:
        return pulumi.get(self, "widthvar")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerResult(dict):
    def __init__(__self__, *,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalResult'] = None,
                 cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedResult'] = None,
                 enabled: Optional[bool] = None,
                 image_set: Optional[str] = None,
                 locked: Optional[bool] = None,
                 policy_set_type: Optional[str] = None,
                 resize: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 video_set: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            apply_best_file_type=apply_best_file_type,
            cp_code_original=cp_code_original,
            cp_code_transformed=cp_code_transformed,
            enabled=enabled,
            image_set=image_set,
            locked=locked,
            policy_set_type=policy_set_type,
            resize=resize,
            template_uuid=template_uuid,
            uuid=uuid,
            video_set=video_set,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             apply_best_file_type: Optional[bool] = None,
             cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalResult'] = None,
             cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedResult'] = None,
             enabled: Optional[bool] = None,
             image_set: Optional[str] = None,
             locked: Optional[bool] = None,
             policy_set_type: Optional[str] = None,
             resize: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             video_set: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'applyBestFileType' in kwargs:
            apply_best_file_type = kwargs['applyBestFileType']
        if 'cpCodeOriginal' in kwargs:
            cp_code_original = kwargs['cpCodeOriginal']
        if 'cpCodeTransformed' in kwargs:
            cp_code_transformed = kwargs['cpCodeTransformed']
        if 'imageSet' in kwargs:
            image_set = kwargs['imageSet']
        if 'policySetType' in kwargs:
            policy_set_type = kwargs['policySetType']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'videoSet' in kwargs:
            video_set = kwargs['videoSet']

        if apply_best_file_type is not None:
            _setter("apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            _setter("cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            _setter("cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            _setter("enabled", enabled)
        if image_set is not None:
            _setter("image_set", image_set)
        if locked is not None:
            _setter("locked", locked)
        if policy_set_type is not None:
            _setter("policy_set_type", policy_set_type)
        if resize is not None:
            _setter("resize", resize)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if video_set is not None:
            _setter("video_set", video_set)

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalResult']:
        return pulumi.get(self, "cp_code_original")

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedResult']:
        return pulumi.get(self, "cp_code_transformed")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="imageSet")
    def image_set(self) -> Optional[str]:
        return pulumi.get(self, "image_set")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="policySetType")
    def policy_set_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_set_type")

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="videoSet")
    def video_set(self) -> Optional[str]:
        return pulumi.get(self, "video_set")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerResult(dict):
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 api_reference_title: Optional[str] = None,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalResult'] = None,
                 cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedResult'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 policy_set: Optional[str] = None,
                 policy_token: Optional[str] = None,
                 policy_token_default: Optional[str] = None,
                 resize: Optional[bool] = None,
                 settings_title: Optional[str] = None,
                 super_cache_region: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 traffic_title: Optional[str] = None,
                 use_existing_policy_set: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            advanced=advanced,
            api_reference_title=api_reference_title,
            apply_best_file_type=apply_best_file_type,
            cp_code_original=cp_code_original,
            cp_code_transformed=cp_code_transformed,
            enabled=enabled,
            locked=locked,
            policy_set=policy_set,
            policy_token=policy_token,
            policy_token_default=policy_token_default,
            resize=resize,
            settings_title=settings_title,
            super_cache_region=super_cache_region,
            template_uuid=template_uuid,
            traffic_title=traffic_title,
            use_existing_policy_set=use_existing_policy_set,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             advanced: Optional[bool] = None,
             api_reference_title: Optional[str] = None,
             apply_best_file_type: Optional[bool] = None,
             cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalResult'] = None,
             cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedResult'] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             policy_set: Optional[str] = None,
             policy_token: Optional[str] = None,
             policy_token_default: Optional[str] = None,
             resize: Optional[bool] = None,
             settings_title: Optional[str] = None,
             super_cache_region: Optional[str] = None,
             template_uuid: Optional[str] = None,
             traffic_title: Optional[str] = None,
             use_existing_policy_set: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiReferenceTitle' in kwargs:
            api_reference_title = kwargs['apiReferenceTitle']
        if 'applyBestFileType' in kwargs:
            apply_best_file_type = kwargs['applyBestFileType']
        if 'cpCodeOriginal' in kwargs:
            cp_code_original = kwargs['cpCodeOriginal']
        if 'cpCodeTransformed' in kwargs:
            cp_code_transformed = kwargs['cpCodeTransformed']
        if 'policySet' in kwargs:
            policy_set = kwargs['policySet']
        if 'policyToken' in kwargs:
            policy_token = kwargs['policyToken']
        if 'policyTokenDefault' in kwargs:
            policy_token_default = kwargs['policyTokenDefault']
        if 'settingsTitle' in kwargs:
            settings_title = kwargs['settingsTitle']
        if 'superCacheRegion' in kwargs:
            super_cache_region = kwargs['superCacheRegion']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'trafficTitle' in kwargs:
            traffic_title = kwargs['trafficTitle']
        if 'useExistingPolicySet' in kwargs:
            use_existing_policy_set = kwargs['useExistingPolicySet']

        if advanced is not None:
            _setter("advanced", advanced)
        if api_reference_title is not None:
            _setter("api_reference_title", api_reference_title)
        if apply_best_file_type is not None:
            _setter("apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            _setter("cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            _setter("cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if policy_set is not None:
            _setter("policy_set", policy_set)
        if policy_token is not None:
            _setter("policy_token", policy_token)
        if policy_token_default is not None:
            _setter("policy_token_default", policy_token_default)
        if resize is not None:
            _setter("resize", resize)
        if settings_title is not None:
            _setter("settings_title", settings_title)
        if super_cache_region is not None:
            _setter("super_cache_region", super_cache_region)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if traffic_title is not None:
            _setter("traffic_title", traffic_title)
        if use_existing_policy_set is not None:
            _setter("use_existing_policy_set", use_existing_policy_set)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="apiReferenceTitle")
    def api_reference_title(self) -> Optional[str]:
        return pulumi.get(self, "api_reference_title")

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalResult']:
        return pulumi.get(self, "cp_code_original")

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedResult']:
        return pulumi.get(self, "cp_code_transformed")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="policySet")
    def policy_set(self) -> Optional[str]:
        return pulumi.get(self, "policy_set")

    @property
    @pulumi.getter(name="policyToken")
    def policy_token(self) -> Optional[str]:
        return pulumi.get(self, "policy_token")

    @property
    @pulumi.getter(name="policyTokenDefault")
    def policy_token_default(self) -> Optional[str]:
        return pulumi.get(self, "policy_token_default")

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @property
    @pulumi.getter(name="settingsTitle")
    def settings_title(self) -> Optional[str]:
        return pulumi.get(self, "settings_title")

    @property
    @pulumi.getter(name="superCacheRegion")
    def super_cache_region(self) -> Optional[str]:
        return pulumi.get(self, "super_cache_region")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="trafficTitle")
    def traffic_title(self) -> Optional[str]:
        return pulumi.get(self, "traffic_title")

    @property
    @pulumi.getter(name="useExistingPolicySet")
    def use_existing_policy_set(self) -> Optional[bool]:
        return pulumi.get(self, "use_existing_policy_set")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoResult(dict):
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 api_reference_title: Optional[str] = None,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalResult'] = None,
                 cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedResult'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 policy_set: Optional[str] = None,
                 policy_token: Optional[str] = None,
                 policy_token_default: Optional[str] = None,
                 resize: Optional[bool] = None,
                 settings_title: Optional[str] = None,
                 super_cache_region: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 traffic_title: Optional[str] = None,
                 use_existing_policy_set: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            advanced=advanced,
            api_reference_title=api_reference_title,
            apply_best_file_type=apply_best_file_type,
            cp_code_original=cp_code_original,
            cp_code_transformed=cp_code_transformed,
            enabled=enabled,
            locked=locked,
            policy_set=policy_set,
            policy_token=policy_token,
            policy_token_default=policy_token_default,
            resize=resize,
            settings_title=settings_title,
            super_cache_region=super_cache_region,
            template_uuid=template_uuid,
            traffic_title=traffic_title,
            use_existing_policy_set=use_existing_policy_set,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             advanced: Optional[bool] = None,
             api_reference_title: Optional[str] = None,
             apply_best_file_type: Optional[bool] = None,
             cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalResult'] = None,
             cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedResult'] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             policy_set: Optional[str] = None,
             policy_token: Optional[str] = None,
             policy_token_default: Optional[str] = None,
             resize: Optional[bool] = None,
             settings_title: Optional[str] = None,
             super_cache_region: Optional[str] = None,
             template_uuid: Optional[str] = None,
             traffic_title: Optional[str] = None,
             use_existing_policy_set: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiReferenceTitle' in kwargs:
            api_reference_title = kwargs['apiReferenceTitle']
        if 'applyBestFileType' in kwargs:
            apply_best_file_type = kwargs['applyBestFileType']
        if 'cpCodeOriginal' in kwargs:
            cp_code_original = kwargs['cpCodeOriginal']
        if 'cpCodeTransformed' in kwargs:
            cp_code_transformed = kwargs['cpCodeTransformed']
        if 'policySet' in kwargs:
            policy_set = kwargs['policySet']
        if 'policyToken' in kwargs:
            policy_token = kwargs['policyToken']
        if 'policyTokenDefault' in kwargs:
            policy_token_default = kwargs['policyTokenDefault']
        if 'settingsTitle' in kwargs:
            settings_title = kwargs['settingsTitle']
        if 'superCacheRegion' in kwargs:
            super_cache_region = kwargs['superCacheRegion']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'trafficTitle' in kwargs:
            traffic_title = kwargs['trafficTitle']
        if 'useExistingPolicySet' in kwargs:
            use_existing_policy_set = kwargs['useExistingPolicySet']

        if advanced is not None:
            _setter("advanced", advanced)
        if api_reference_title is not None:
            _setter("api_reference_title", api_reference_title)
        if apply_best_file_type is not None:
            _setter("apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            _setter("cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            _setter("cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if policy_set is not None:
            _setter("policy_set", policy_set)
        if policy_token is not None:
            _setter("policy_token", policy_token)
        if policy_token_default is not None:
            _setter("policy_token_default", policy_token_default)
        if resize is not None:
            _setter("resize", resize)
        if settings_title is not None:
            _setter("settings_title", settings_title)
        if super_cache_region is not None:
            _setter("super_cache_region", super_cache_region)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if traffic_title is not None:
            _setter("traffic_title", traffic_title)
        if use_existing_policy_set is not None:
            _setter("use_existing_policy_set", use_existing_policy_set)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="apiReferenceTitle")
    def api_reference_title(self) -> Optional[str]:
        return pulumi.get(self, "api_reference_title")

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalResult']:
        return pulumi.get(self, "cp_code_original")

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedResult']:
        return pulumi.get(self, "cp_code_transformed")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="policySet")
    def policy_set(self) -> Optional[str]:
        return pulumi.get(self, "policy_set")

    @property
    @pulumi.getter(name="policyToken")
    def policy_token(self) -> Optional[str]:
        return pulumi.get(self, "policy_token")

    @property
    @pulumi.getter(name="policyTokenDefault")
    def policy_token_default(self) -> Optional[str]:
        return pulumi.get(self, "policy_token_default")

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @property
    @pulumi.getter(name="settingsTitle")
    def settings_title(self) -> Optional[str]:
        return pulumi.get(self, "settings_title")

    @property
    @pulumi.getter(name="superCacheRegion")
    def super_cache_region(self) -> Optional[str]:
        return pulumi.get(self, "super_cache_region")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="trafficTitle")
    def traffic_title(self) -> Optional[str]:
        return pulumi.get(self, "traffic_title")

    @property
    @pulumi.getter(name="useExistingPolicySet")
    def use_existing_policy_set(self) -> Optional[bool]:
        return pulumi.get(self, "use_existing_policy_set")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorIncludeResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorIncludeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if id is not None:
            _setter("id", id)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationResult(dict):
    def __init__(__self__, *,
                 allow_large_post_body: Optional[bool] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 failure302_uri: Optional[str] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 penalty302_uri: Optional[str] = None,
                 penalty403_net_storage_path: Optional[str] = None,
                 penalty_action: Optional[str] = None,
                 penalty_branded_deny_cache_ttl: Optional[int] = None,
                 penalty_net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorageResult'] = None,
                 penalty_threshold: Optional[int] = None,
                 penalty_title: Optional[str] = None,
                 reset_on_valid: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 user_identification_by_cookie: Optional[bool] = None,
                 user_identification_by_headers: Optional[bool] = None,
                 user_identification_by_ip: Optional[bool] = None,
                 user_identification_by_params: Optional[bool] = None,
                 user_identification_key_cookie: Optional[str] = None,
                 user_identification_key_headers: Optional[Sequence[str]] = None,
                 user_identification_key_params: Optional[Sequence[str]] = None,
                 user_identification_title: Optional[str] = None,
                 uuid: Optional[str] = None,
                 validate_on_origin_header_name: Optional[str] = None,
                 validate_on_origin_header_value: Optional[str] = None,
                 validate_on_origin_response_code: Optional[int] = None,
                 validate_on_origin_with: Optional[str] = None,
                 validation_title: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_large_post_body=allow_large_post_body,
            cloudlet_policy=cloudlet_policy,
            enabled=enabled,
            failure302_uri=failure302_uri,
            label=label,
            locked=locked,
            penalty302_uri=penalty302_uri,
            penalty403_net_storage_path=penalty403_net_storage_path,
            penalty_action=penalty_action,
            penalty_branded_deny_cache_ttl=penalty_branded_deny_cache_ttl,
            penalty_net_storage=penalty_net_storage,
            penalty_threshold=penalty_threshold,
            penalty_title=penalty_title,
            reset_on_valid=reset_on_valid,
            template_uuid=template_uuid,
            user_identification_by_cookie=user_identification_by_cookie,
            user_identification_by_headers=user_identification_by_headers,
            user_identification_by_ip=user_identification_by_ip,
            user_identification_by_params=user_identification_by_params,
            user_identification_key_cookie=user_identification_key_cookie,
            user_identification_key_headers=user_identification_key_headers,
            user_identification_key_params=user_identification_key_params,
            user_identification_title=user_identification_title,
            uuid=uuid,
            validate_on_origin_header_name=validate_on_origin_header_name,
            validate_on_origin_header_value=validate_on_origin_header_value,
            validate_on_origin_response_code=validate_on_origin_response_code,
            validate_on_origin_with=validate_on_origin_with,
            validation_title=validation_title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_large_post_body: Optional[bool] = None,
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicyResult'] = None,
             enabled: Optional[bool] = None,
             failure302_uri: Optional[str] = None,
             label: Optional[str] = None,
             locked: Optional[bool] = None,
             penalty302_uri: Optional[str] = None,
             penalty403_net_storage_path: Optional[str] = None,
             penalty_action: Optional[str] = None,
             penalty_branded_deny_cache_ttl: Optional[int] = None,
             penalty_net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorageResult'] = None,
             penalty_threshold: Optional[int] = None,
             penalty_title: Optional[str] = None,
             reset_on_valid: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             user_identification_by_cookie: Optional[bool] = None,
             user_identification_by_headers: Optional[bool] = None,
             user_identification_by_ip: Optional[bool] = None,
             user_identification_by_params: Optional[bool] = None,
             user_identification_key_cookie: Optional[str] = None,
             user_identification_key_headers: Optional[Sequence[str]] = None,
             user_identification_key_params: Optional[Sequence[str]] = None,
             user_identification_title: Optional[str] = None,
             uuid: Optional[str] = None,
             validate_on_origin_header_name: Optional[str] = None,
             validate_on_origin_header_value: Optional[str] = None,
             validate_on_origin_response_code: Optional[int] = None,
             validate_on_origin_with: Optional[str] = None,
             validation_title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowLargePostBody' in kwargs:
            allow_large_post_body = kwargs['allowLargePostBody']
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'failure302Uri' in kwargs:
            failure302_uri = kwargs['failure302Uri']
        if 'penalty302Uri' in kwargs:
            penalty302_uri = kwargs['penalty302Uri']
        if 'penalty403NetStoragePath' in kwargs:
            penalty403_net_storage_path = kwargs['penalty403NetStoragePath']
        if 'penaltyAction' in kwargs:
            penalty_action = kwargs['penaltyAction']
        if 'penaltyBrandedDenyCacheTtl' in kwargs:
            penalty_branded_deny_cache_ttl = kwargs['penaltyBrandedDenyCacheTtl']
        if 'penaltyNetStorage' in kwargs:
            penalty_net_storage = kwargs['penaltyNetStorage']
        if 'penaltyThreshold' in kwargs:
            penalty_threshold = kwargs['penaltyThreshold']
        if 'penaltyTitle' in kwargs:
            penalty_title = kwargs['penaltyTitle']
        if 'resetOnValid' in kwargs:
            reset_on_valid = kwargs['resetOnValid']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'userIdentificationByCookie' in kwargs:
            user_identification_by_cookie = kwargs['userIdentificationByCookie']
        if 'userIdentificationByHeaders' in kwargs:
            user_identification_by_headers = kwargs['userIdentificationByHeaders']
        if 'userIdentificationByIp' in kwargs:
            user_identification_by_ip = kwargs['userIdentificationByIp']
        if 'userIdentificationByParams' in kwargs:
            user_identification_by_params = kwargs['userIdentificationByParams']
        if 'userIdentificationKeyCookie' in kwargs:
            user_identification_key_cookie = kwargs['userIdentificationKeyCookie']
        if 'userIdentificationKeyHeaders' in kwargs:
            user_identification_key_headers = kwargs['userIdentificationKeyHeaders']
        if 'userIdentificationKeyParams' in kwargs:
            user_identification_key_params = kwargs['userIdentificationKeyParams']
        if 'userIdentificationTitle' in kwargs:
            user_identification_title = kwargs['userIdentificationTitle']
        if 'validateOnOriginHeaderName' in kwargs:
            validate_on_origin_header_name = kwargs['validateOnOriginHeaderName']
        if 'validateOnOriginHeaderValue' in kwargs:
            validate_on_origin_header_value = kwargs['validateOnOriginHeaderValue']
        if 'validateOnOriginResponseCode' in kwargs:
            validate_on_origin_response_code = kwargs['validateOnOriginResponseCode']
        if 'validateOnOriginWith' in kwargs:
            validate_on_origin_with = kwargs['validateOnOriginWith']
        if 'validationTitle' in kwargs:
            validation_title = kwargs['validationTitle']

        if allow_large_post_body is not None:
            _setter("allow_large_post_body", allow_large_post_body)
        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if failure302_uri is not None:
            _setter("failure302_uri", failure302_uri)
        if label is not None:
            _setter("label", label)
        if locked is not None:
            _setter("locked", locked)
        if penalty302_uri is not None:
            _setter("penalty302_uri", penalty302_uri)
        if penalty403_net_storage_path is not None:
            _setter("penalty403_net_storage_path", penalty403_net_storage_path)
        if penalty_action is not None:
            _setter("penalty_action", penalty_action)
        if penalty_branded_deny_cache_ttl is not None:
            _setter("penalty_branded_deny_cache_ttl", penalty_branded_deny_cache_ttl)
        if penalty_net_storage is not None:
            _setter("penalty_net_storage", penalty_net_storage)
        if penalty_threshold is not None:
            _setter("penalty_threshold", penalty_threshold)
        if penalty_title is not None:
            _setter("penalty_title", penalty_title)
        if reset_on_valid is not None:
            _setter("reset_on_valid", reset_on_valid)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if user_identification_by_cookie is not None:
            _setter("user_identification_by_cookie", user_identification_by_cookie)
        if user_identification_by_headers is not None:
            _setter("user_identification_by_headers", user_identification_by_headers)
        if user_identification_by_ip is not None:
            _setter("user_identification_by_ip", user_identification_by_ip)
        if user_identification_by_params is not None:
            _setter("user_identification_by_params", user_identification_by_params)
        if user_identification_key_cookie is not None:
            _setter("user_identification_key_cookie", user_identification_key_cookie)
        if user_identification_key_headers is not None:
            _setter("user_identification_key_headers", user_identification_key_headers)
        if user_identification_key_params is not None:
            _setter("user_identification_key_params", user_identification_key_params)
        if user_identification_title is not None:
            _setter("user_identification_title", user_identification_title)
        if uuid is not None:
            _setter("uuid", uuid)
        if validate_on_origin_header_name is not None:
            _setter("validate_on_origin_header_name", validate_on_origin_header_name)
        if validate_on_origin_header_value is not None:
            _setter("validate_on_origin_header_value", validate_on_origin_header_value)
        if validate_on_origin_response_code is not None:
            _setter("validate_on_origin_response_code", validate_on_origin_response_code)
        if validate_on_origin_with is not None:
            _setter("validate_on_origin_with", validate_on_origin_with)
        if validation_title is not None:
            _setter("validation_title", validation_title)

    @property
    @pulumi.getter(name="allowLargePostBody")
    def allow_large_post_body(self) -> Optional[bool]:
        return pulumi.get(self, "allow_large_post_body")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failure302Uri")
    def failure302_uri(self) -> Optional[str]:
        return pulumi.get(self, "failure302_uri")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="penalty302Uri")
    def penalty302_uri(self) -> Optional[str]:
        return pulumi.get(self, "penalty302_uri")

    @property
    @pulumi.getter(name="penalty403NetStoragePath")
    def penalty403_net_storage_path(self) -> Optional[str]:
        return pulumi.get(self, "penalty403_net_storage_path")

    @property
    @pulumi.getter(name="penaltyAction")
    def penalty_action(self) -> Optional[str]:
        return pulumi.get(self, "penalty_action")

    @property
    @pulumi.getter(name="penaltyBrandedDenyCacheTtl")
    def penalty_branded_deny_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "penalty_branded_deny_cache_ttl")

    @property
    @pulumi.getter(name="penaltyNetStorage")
    def penalty_net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorageResult']:
        return pulumi.get(self, "penalty_net_storage")

    @property
    @pulumi.getter(name="penaltyThreshold")
    def penalty_threshold(self) -> Optional[int]:
        return pulumi.get(self, "penalty_threshold")

    @property
    @pulumi.getter(name="penaltyTitle")
    def penalty_title(self) -> Optional[str]:
        return pulumi.get(self, "penalty_title")

    @property
    @pulumi.getter(name="resetOnValid")
    def reset_on_valid(self) -> Optional[bool]:
        return pulumi.get(self, "reset_on_valid")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="userIdentificationByCookie")
    def user_identification_by_cookie(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_cookie")

    @property
    @pulumi.getter(name="userIdentificationByHeaders")
    def user_identification_by_headers(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_headers")

    @property
    @pulumi.getter(name="userIdentificationByIp")
    def user_identification_by_ip(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_ip")

    @property
    @pulumi.getter(name="userIdentificationByParams")
    def user_identification_by_params(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_params")

    @property
    @pulumi.getter(name="userIdentificationKeyCookie")
    def user_identification_key_cookie(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_key_cookie")

    @property
    @pulumi.getter(name="userIdentificationKeyHeaders")
    def user_identification_key_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_headers")

    @property
    @pulumi.getter(name="userIdentificationKeyParams")
    def user_identification_key_params(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_params")

    @property
    @pulumi.getter(name="userIdentificationTitle")
    def user_identification_title(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_title")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="validateOnOriginHeaderName")
    def validate_on_origin_header_name(self) -> Optional[str]:
        return pulumi.get(self, "validate_on_origin_header_name")

    @property
    @pulumi.getter(name="validateOnOriginHeaderValue")
    def validate_on_origin_header_value(self) -> Optional[str]:
        return pulumi.get(self, "validate_on_origin_header_value")

    @property
    @pulumi.getter(name="validateOnOriginResponseCode")
    def validate_on_origin_response_code(self) -> Optional[int]:
        return pulumi.get(self, "validate_on_origin_response_code")

    @property
    @pulumi.getter(name="validateOnOriginWith")
    def validate_on_origin_with(self) -> Optional[str]:
        return pulumi.get(self, "validate_on_origin_with")

    @property
    @pulumi.getter(name="validationTitle")
    def validation_title(self) -> Optional[str]:
        return pulumi.get(self, "validation_title")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code=cp_code,
            download_domain_name=download_domain_name,
            g2o_token=g2o_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code: Optional[int] = None,
             download_domain_name: Optional[str] = None,
             g2o_token: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCode' in kwargs:
            cp_code = kwargs['cpCode']
        if 'downloadDomainName' in kwargs:
            download_domain_name = kwargs['downloadDomainName']
        if 'g2oToken' in kwargs:
            g2o_token = kwargs['g2oToken']

        if cp_code is not None:
            _setter("cp_code", cp_code)
        if download_domain_name is not None:
            _setter("download_domain_name", download_domain_name)
        if g2o_token is not None:
            _setter("g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorInstantResult(dict):
    def __init__(__self__, *,
                 custom_link_relations: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 prefetch_cacheable: Optional[bool] = None,
                 prefetch_html: Optional[bool] = None,
                 prefetch_no_store: Optional[bool] = None,
                 prefetch_no_store_extensions: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorInstantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_link_relations=custom_link_relations,
            locked=locked,
            prefetch_cacheable=prefetch_cacheable,
            prefetch_html=prefetch_html,
            prefetch_no_store=prefetch_no_store,
            prefetch_no_store_extensions=prefetch_no_store_extensions,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_link_relations: Optional[Sequence[str]] = None,
             locked: Optional[bool] = None,
             prefetch_cacheable: Optional[bool] = None,
             prefetch_html: Optional[bool] = None,
             prefetch_no_store: Optional[bool] = None,
             prefetch_no_store_extensions: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customLinkRelations' in kwargs:
            custom_link_relations = kwargs['customLinkRelations']
        if 'prefetchCacheable' in kwargs:
            prefetch_cacheable = kwargs['prefetchCacheable']
        if 'prefetchHtml' in kwargs:
            prefetch_html = kwargs['prefetchHtml']
        if 'prefetchNoStore' in kwargs:
            prefetch_no_store = kwargs['prefetchNoStore']
        if 'prefetchNoStoreExtensions' in kwargs:
            prefetch_no_store_extensions = kwargs['prefetchNoStoreExtensions']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if custom_link_relations is not None:
            _setter("custom_link_relations", custom_link_relations)
        if locked is not None:
            _setter("locked", locked)
        if prefetch_cacheable is not None:
            _setter("prefetch_cacheable", prefetch_cacheable)
        if prefetch_html is not None:
            _setter("prefetch_html", prefetch_html)
        if prefetch_no_store is not None:
            _setter("prefetch_no_store", prefetch_no_store)
        if prefetch_no_store_extensions is not None:
            _setter("prefetch_no_store_extensions", prefetch_no_store_extensions)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="customLinkRelations")
    def custom_link_relations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_link_relations")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="prefetchCacheable")
    def prefetch_cacheable(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_cacheable")

    @property
    @pulumi.getter(name="prefetchHtml")
    def prefetch_html(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_html")

    @property
    @pulumi.getter(name="prefetchNoStore")
    def prefetch_no_store(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_no_store")

    @property
    @pulumi.getter(name="prefetchNoStoreExtensions")
    def prefetch_no_store_extensions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prefetch_no_store_extensions")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorInstantConfigResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorInstantConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationResult(dict):
    def __init__(__self__, *,
                 enable_partial_object_caching: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 minimum_size: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_versioning: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_partial_object_caching=enable_partial_object_caching,
            enabled=enabled,
            locked=locked,
            maximum_size=maximum_size,
            minimum_size=minimum_size,
            template_uuid=template_uuid,
            use_versioning=use_versioning,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_partial_object_caching: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             maximum_size: Optional[str] = None,
             minimum_size: Optional[str] = None,
             template_uuid: Optional[str] = None,
             use_versioning: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enablePartialObjectCaching' in kwargs:
            enable_partial_object_caching = kwargs['enablePartialObjectCaching']
        if 'maximumSize' in kwargs:
            maximum_size = kwargs['maximumSize']
        if 'minimumSize' in kwargs:
            minimum_size = kwargs['minimumSize']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useVersioning' in kwargs:
            use_versioning = kwargs['useVersioning']

        if enable_partial_object_caching is not None:
            _setter("enable_partial_object_caching", enable_partial_object_caching)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if maximum_size is not None:
            _setter("maximum_size", maximum_size)
        if minimum_size is not None:
            _setter("minimum_size", minimum_size)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_versioning is not None:
            _setter("use_versioning", use_versioning)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="enablePartialObjectCaching")
    def enable_partial_object_caching(self) -> Optional[str]:
        return pulumi.get(self, "enable_partial_object_caching")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @property
    @pulumi.getter(name="minimumSize")
    def minimum_size(self) -> Optional[str]:
        return pulumi.get(self, "minimum_size")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useVersioning")
    def use_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "use_versioning")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationAdvancedResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 fragment_size: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 prefetch_after_request: Optional[int] = None,
                 prefetch_during_request: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationAdvancedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            fragment_size=fragment_size,
            locked=locked,
            object_size=object_size,
            prefetch_after_request=prefetch_after_request,
            prefetch_during_request=prefetch_during_request,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             fragment_size: Optional[str] = None,
             locked: Optional[bool] = None,
             object_size: Optional[str] = None,
             prefetch_after_request: Optional[int] = None,
             prefetch_during_request: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fragmentSize' in kwargs:
            fragment_size = kwargs['fragmentSize']
        if 'objectSize' in kwargs:
            object_size = kwargs['objectSize']
        if 'prefetchAfterRequest' in kwargs:
            prefetch_after_request = kwargs['prefetchAfterRequest']
        if 'prefetchDuringRequest' in kwargs:
            prefetch_during_request = kwargs['prefetchDuringRequest']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if fragment_size is not None:
            _setter("fragment_size", fragment_size)
        if locked is not None:
            _setter("locked", locked)
        if object_size is not None:
            _setter("object_size", object_size)
        if prefetch_after_request is not None:
            _setter("prefetch_after_request", prefetch_after_request)
        if prefetch_during_request is not None:
            _setter("prefetch_during_request", prefetch_during_request)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="fragmentSize")
    def fragment_size(self) -> Optional[str]:
        return pulumi.get(self, "fragment_size")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="prefetchAfterRequest")
    def prefetch_after_request(self) -> Optional[int]:
        return pulumi.get(self, "prefetch_after_request")

    @property
    @pulumi.getter(name="prefetchDuringRequest")
    def prefetch_during_request(self) -> Optional[int]:
        return pulumi.get(self, "prefetch_during_request")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateResult(dict):
    def __init__(__self__, *,
                 bitrate_tables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateBitrateTableResult']] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 threshold_tables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateThresholdTableResult']] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bitrate_tables=bitrate_tables,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            threshold_tables=threshold_tables,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bitrate_tables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateBitrateTableResult']] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             threshold_tables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateThresholdTableResult']] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bitrateTables' in kwargs:
            bitrate_tables = kwargs['bitrateTables']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'thresholdTables' in kwargs:
            threshold_tables = kwargs['thresholdTables']

        if bitrate_tables is not None:
            _setter("bitrate_tables", bitrate_tables)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if threshold_tables is not None:
            _setter("threshold_tables", threshold_tables)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="bitrateTables")
    def bitrate_tables(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateBitrateTableResult']]:
        return pulumi.get(self, "bitrate_tables")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="thresholdTables")
    def threshold_tables(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateThresholdTableResult']]:
        return pulumi.get(self, "threshold_tables")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateBitrateTableResult(dict):
    def __init__(__self__, *,
                 bitrate_unit: Optional[str] = None,
                 bitrate_value: Optional[float] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateBitrateTableResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bitrate_unit=bitrate_unit,
            bitrate_value=bitrate_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bitrate_unit: Optional[str] = None,
             bitrate_value: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bitrateUnit' in kwargs:
            bitrate_unit = kwargs['bitrateUnit']
        if 'bitrateValue' in kwargs:
            bitrate_value = kwargs['bitrateValue']

        if bitrate_unit is not None:
            _setter("bitrate_unit", bitrate_unit)
        if bitrate_value is not None:
            _setter("bitrate_value", bitrate_value)

    @property
    @pulumi.getter(name="bitrateUnit")
    def bitrate_unit(self) -> Optional[str]:
        return pulumi.get(self, "bitrate_unit")

    @property
    @pulumi.getter(name="bitrateValue")
    def bitrate_value(self) -> Optional[float]:
        return pulumi.get(self, "bitrate_value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateThresholdTableResult(dict):
    def __init__(__self__, *,
                 threshold_unit: Optional[str] = None,
                 threshold_value: Optional[int] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateThresholdTableResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            threshold_unit=threshold_unit,
            threshold_value=threshold_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             threshold_unit: Optional[str] = None,
             threshold_value: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'thresholdUnit' in kwargs:
            threshold_unit = kwargs['thresholdUnit']
        if 'thresholdValue' in kwargs:
            threshold_value = kwargs['thresholdValue']

        if threshold_unit is not None:
            _setter("threshold_unit", threshold_unit)
        if threshold_value is not None:
            _setter("threshold_value", threshold_value)

    @property
    @pulumi.getter(name="thresholdUnit")
    def threshold_unit(self) -> Optional[str]:
        return pulumi.get(self, "threshold_unit")

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> Optional[int]:
        return pulumi.get(self, "threshold_value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLogCustomResult(dict):
    def __init__(__self__, *,
                 custom_log_field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 log_custom_log_field: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorLogCustomResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_log_field=custom_log_field,
            locked=locked,
            log_custom_log_field=log_custom_log_field,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_log_field: Optional[str] = None,
             locked: Optional[bool] = None,
             log_custom_log_field: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customLogField' in kwargs:
            custom_log_field = kwargs['customLogField']
        if 'logCustomLogField' in kwargs:
            log_custom_log_field = kwargs['logCustomLogField']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if custom_log_field is not None:
            _setter("custom_log_field", custom_log_field)
        if locked is not None:
            _setter("locked", locked)
        if log_custom_log_field is not None:
            _setter("log_custom_log_field", log_custom_log_field)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="customLogField")
    def custom_log_field(self) -> Optional[str]:
        return pulumi.get(self, "custom_log_field")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="logCustomLogField")
    def log_custom_log_field(self) -> Optional[bool]:
        return pulumi.get(self, "log_custom_log_field")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMPulseResult(dict):
    def __init__(__self__, *,
                 api_key: Optional[str] = None,
                 buffer_size: Optional[str] = None,
                 config_override: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 loader_version: Optional[str] = None,
                 locked: Optional[bool] = None,
                 require_pci: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 title_optional: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorMPulseResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            api_key=api_key,
            buffer_size=buffer_size,
            config_override=config_override,
            enabled=enabled,
            loader_version=loader_version,
            locked=locked,
            require_pci=require_pci,
            template_uuid=template_uuid,
            title_optional=title_optional,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             api_key: Optional[str] = None,
             buffer_size: Optional[str] = None,
             config_override: Optional[str] = None,
             enabled: Optional[bool] = None,
             loader_version: Optional[str] = None,
             locked: Optional[bool] = None,
             require_pci: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             title_optional: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiKey' in kwargs:
            api_key = kwargs['apiKey']
        if 'bufferSize' in kwargs:
            buffer_size = kwargs['bufferSize']
        if 'configOverride' in kwargs:
            config_override = kwargs['configOverride']
        if 'loaderVersion' in kwargs:
            loader_version = kwargs['loaderVersion']
        if 'requirePci' in kwargs:
            require_pci = kwargs['requirePci']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'titleOptional' in kwargs:
            title_optional = kwargs['titleOptional']

        if api_key is not None:
            _setter("api_key", api_key)
        if buffer_size is not None:
            _setter("buffer_size", buffer_size)
        if config_override is not None:
            _setter("config_override", config_override)
        if enabled is not None:
            _setter("enabled", enabled)
        if loader_version is not None:
            _setter("loader_version", loader_version)
        if locked is not None:
            _setter("locked", locked)
        if require_pci is not None:
            _setter("require_pci", require_pci)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if title_optional is not None:
            _setter("title_optional", title_optional)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[str]:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "buffer_size")

    @property
    @pulumi.getter(name="configOverride")
    def config_override(self) -> Optional[str]:
        return pulumi.get(self, "config_override")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="loaderVersion")
    def loader_version(self) -> Optional[str]:
        return pulumi.get(self, "loader_version")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="requirePci")
    def require_pci(self) -> Optional[bool]:
        return pulumi.get(self, "require_pci")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="titleOptional")
    def title_optional(self) -> Optional[str]:
        return pulumi.get(self, "title_optional")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorManifestPersonalizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 hls_enable_debug_headers: Optional[bool] = None,
                 hls_enabled: Optional[bool] = None,
                 hls_filter_in_bitrate_ranges: Optional[str] = None,
                 hls_filter_in_bitrates: Optional[str] = None,
                 hls_mode: Optional[str] = None,
                 hls_preferred_bitrate: Optional[str] = None,
                 hls_query_param_enabled: Optional[bool] = None,
                 hls_query_param_secret_key: Optional[str] = None,
                 hls_query_param_transition_key: Optional[str] = None,
                 hls_show_advanced: Optional[bool] = None,
                 hls_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorManifestPersonalizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            hls_enable_debug_headers=hls_enable_debug_headers,
            hls_enabled=hls_enabled,
            hls_filter_in_bitrate_ranges=hls_filter_in_bitrate_ranges,
            hls_filter_in_bitrates=hls_filter_in_bitrates,
            hls_mode=hls_mode,
            hls_preferred_bitrate=hls_preferred_bitrate,
            hls_query_param_enabled=hls_query_param_enabled,
            hls_query_param_secret_key=hls_query_param_secret_key,
            hls_query_param_transition_key=hls_query_param_transition_key,
            hls_show_advanced=hls_show_advanced,
            hls_title=hls_title,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             hls_enable_debug_headers: Optional[bool] = None,
             hls_enabled: Optional[bool] = None,
             hls_filter_in_bitrate_ranges: Optional[str] = None,
             hls_filter_in_bitrates: Optional[str] = None,
             hls_mode: Optional[str] = None,
             hls_preferred_bitrate: Optional[str] = None,
             hls_query_param_enabled: Optional[bool] = None,
             hls_query_param_secret_key: Optional[str] = None,
             hls_query_param_transition_key: Optional[str] = None,
             hls_show_advanced: Optional[bool] = None,
             hls_title: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hlsEnableDebugHeaders' in kwargs:
            hls_enable_debug_headers = kwargs['hlsEnableDebugHeaders']
        if 'hlsEnabled' in kwargs:
            hls_enabled = kwargs['hlsEnabled']
        if 'hlsFilterInBitrateRanges' in kwargs:
            hls_filter_in_bitrate_ranges = kwargs['hlsFilterInBitrateRanges']
        if 'hlsFilterInBitrates' in kwargs:
            hls_filter_in_bitrates = kwargs['hlsFilterInBitrates']
        if 'hlsMode' in kwargs:
            hls_mode = kwargs['hlsMode']
        if 'hlsPreferredBitrate' in kwargs:
            hls_preferred_bitrate = kwargs['hlsPreferredBitrate']
        if 'hlsQueryParamEnabled' in kwargs:
            hls_query_param_enabled = kwargs['hlsQueryParamEnabled']
        if 'hlsQueryParamSecretKey' in kwargs:
            hls_query_param_secret_key = kwargs['hlsQueryParamSecretKey']
        if 'hlsQueryParamTransitionKey' in kwargs:
            hls_query_param_transition_key = kwargs['hlsQueryParamTransitionKey']
        if 'hlsShowAdvanced' in kwargs:
            hls_show_advanced = kwargs['hlsShowAdvanced']
        if 'hlsTitle' in kwargs:
            hls_title = kwargs['hlsTitle']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if hls_enable_debug_headers is not None:
            _setter("hls_enable_debug_headers", hls_enable_debug_headers)
        if hls_enabled is not None:
            _setter("hls_enabled", hls_enabled)
        if hls_filter_in_bitrate_ranges is not None:
            _setter("hls_filter_in_bitrate_ranges", hls_filter_in_bitrate_ranges)
        if hls_filter_in_bitrates is not None:
            _setter("hls_filter_in_bitrates", hls_filter_in_bitrates)
        if hls_mode is not None:
            _setter("hls_mode", hls_mode)
        if hls_preferred_bitrate is not None:
            _setter("hls_preferred_bitrate", hls_preferred_bitrate)
        if hls_query_param_enabled is not None:
            _setter("hls_query_param_enabled", hls_query_param_enabled)
        if hls_query_param_secret_key is not None:
            _setter("hls_query_param_secret_key", hls_query_param_secret_key)
        if hls_query_param_transition_key is not None:
            _setter("hls_query_param_transition_key", hls_query_param_transition_key)
        if hls_show_advanced is not None:
            _setter("hls_show_advanced", hls_show_advanced)
        if hls_title is not None:
            _setter("hls_title", hls_title)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="hlsEnableDebugHeaders")
    def hls_enable_debug_headers(self) -> Optional[bool]:
        return pulumi.get(self, "hls_enable_debug_headers")

    @property
    @pulumi.getter(name="hlsEnabled")
    def hls_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "hls_enabled")

    @property
    @pulumi.getter(name="hlsFilterInBitrateRanges")
    def hls_filter_in_bitrate_ranges(self) -> Optional[str]:
        return pulumi.get(self, "hls_filter_in_bitrate_ranges")

    @property
    @pulumi.getter(name="hlsFilterInBitrates")
    def hls_filter_in_bitrates(self) -> Optional[str]:
        return pulumi.get(self, "hls_filter_in_bitrates")

    @property
    @pulumi.getter(name="hlsMode")
    def hls_mode(self) -> Optional[str]:
        return pulumi.get(self, "hls_mode")

    @property
    @pulumi.getter(name="hlsPreferredBitrate")
    def hls_preferred_bitrate(self) -> Optional[str]:
        return pulumi.get(self, "hls_preferred_bitrate")

    @property
    @pulumi.getter(name="hlsQueryParamEnabled")
    def hls_query_param_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "hls_query_param_enabled")

    @property
    @pulumi.getter(name="hlsQueryParamSecretKey")
    def hls_query_param_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "hls_query_param_secret_key")

    @property
    @pulumi.getter(name="hlsQueryParamTransitionKey")
    def hls_query_param_transition_key(self) -> Optional[str]:
        return pulumi.get(self, "hls_query_param_transition_key")

    @property
    @pulumi.getter(name="hlsShowAdvanced")
    def hls_show_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "hls_show_advanced")

    @property
    @pulumi.getter(name="hlsTitle")
    def hls_title(self) -> Optional[str]:
        return pulumi.get(self, "hls_title")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorManifestReroutingResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 partner: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 username: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorManifestReroutingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            partner=partner,
            template_uuid=template_uuid,
            username=username,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             partner: Optional[str] = None,
             template_uuid: Optional[str] = None,
             username: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if partner is not None:
            _setter("partner", partner)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if username is not None:
            _setter("username", username)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def partner(self) -> Optional[str]:
        return pulumi.get(self, "partner")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorManualServerPushResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 serverpushlists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorManualServerPushResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            serverpushlists=serverpushlists,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             serverpushlists: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if serverpushlists is not None:
            _setter("serverpushlists", serverpushlists)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def serverpushlists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "serverpushlists")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationQuicOptoutResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 optout: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationQuicOptoutResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            optout=optout,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             optout: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if optout is not None:
            _setter("optout", optout)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def optout(self) -> Optional[str]:
        return pulumi.get(self, "optout")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMediaClientResult(dict):
    def __init__(__self__, *,
                 beacon_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_hybrid_http_udp: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorMediaClientResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            beacon_id=beacon_id,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            use_hybrid_http_udp=use_hybrid_http_udp,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             beacon_id: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             use_hybrid_http_udp: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'beaconId' in kwargs:
            beacon_id = kwargs['beaconId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useHybridHttpUdp' in kwargs:
            use_hybrid_http_udp = kwargs['useHybridHttpUdp']

        if beacon_id is not None:
            _setter("beacon_id", beacon_id)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_hybrid_http_udp is not None:
            _setter("use_hybrid_http_udp", use_hybrid_http_udp)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="beaconId")
    def beacon_id(self) -> Optional[str]:
        return pulumi.get(self, "beacon_id")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useHybridHttpUdp")
    def use_hybrid_http_udp(self) -> Optional[bool]:
        return pulumi.get(self, "use_hybrid_http_udp")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMediaFileRetrievalOptimizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorMediaFileRetrievalOptimizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMediaOriginFailoverResult(dict):
    def __init__(__self__, *,
                 cache_error_response: Optional[bool] = None,
                 cache_window: Optional[str] = None,
                 client_response_code: Optional[str] = None,
                 detect_object_unavailable: Optional[bool] = None,
                 detect_object_unavailable_title: Optional[str] = None,
                 detect_origin_unavailable: Optional[bool] = None,
                 detect_origin_unavailable_title: Optional[str] = None,
                 detect_origin_unresponsive: Optional[bool] = None,
                 detect_origin_unresponsive_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_unavailable_alternate_host: Optional[str] = None,
                 object_unavailable_backup_host: Optional[str] = None,
                 object_unavailable_blacklist_origin_ip: Optional[bool] = None,
                 object_unavailable_blacklist_window: Optional[str] = None,
                 object_unavailable_change_protocol: Optional[bool] = None,
                 object_unavailable_detection_level: Optional[str] = None,
                 object_unavailable_include_query_string: Optional[bool] = None,
                 object_unavailable_modified_path: Optional[str] = None,
                 object_unavailable_modify_request_path: Optional[bool] = None,
                 object_unavailable_protocol: Optional[str] = None,
                 object_unavailable_recovery: Optional[str] = None,
                 object_unavailable_redirect_method: Optional[int] = None,
                 object_unavailable_response_codes: Optional[Sequence[str]] = None,
                 object_unavailable_retry_limit: Optional[str] = None,
                 origin_unavailable_alternate_host: Optional[str] = None,
                 origin_unavailable_backup_host: Optional[str] = None,
                 origin_unavailable_blacklist_origin_ip: Optional[bool] = None,
                 origin_unavailable_blacklist_window: Optional[str] = None,
                 origin_unavailable_change_protocol: Optional[bool] = None,
                 origin_unavailable_detection_level: Optional[str] = None,
                 origin_unavailable_include_query_string: Optional[bool] = None,
                 origin_unavailable_modified_path: Optional[str] = None,
                 origin_unavailable_modify_request_path: Optional[bool] = None,
                 origin_unavailable_protocol: Optional[str] = None,
                 origin_unavailable_recovery: Optional[str] = None,
                 origin_unavailable_redirect_method: Optional[int] = None,
                 origin_unavailable_response_codes: Optional[Sequence[str]] = None,
                 origin_unavailable_retry_limit: Optional[str] = None,
                 origin_unresponsive_alternate_host: Optional[str] = None,
                 origin_unresponsive_backup_host: Optional[str] = None,
                 origin_unresponsive_blacklist_origin_ip: Optional[bool] = None,
                 origin_unresponsive_blacklist_window: Optional[str] = None,
                 origin_unresponsive_change_protocol: Optional[bool] = None,
                 origin_unresponsive_detection_level: Optional[str] = None,
                 origin_unresponsive_include_query_string: Optional[bool] = None,
                 origin_unresponsive_modified_path: Optional[str] = None,
                 origin_unresponsive_modify_request_path: Optional[bool] = None,
                 origin_unresponsive_protocol: Optional[str] = None,
                 origin_unresponsive_recovery: Optional[str] = None,
                 origin_unresponsive_redirect_method: Optional[int] = None,
                 origin_unresponsive_retry_limit: Optional[str] = None,
                 other_options: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorMediaOriginFailoverResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cache_error_response=cache_error_response,
            cache_window=cache_window,
            client_response_code=client_response_code,
            detect_object_unavailable=detect_object_unavailable,
            detect_object_unavailable_title=detect_object_unavailable_title,
            detect_origin_unavailable=detect_origin_unavailable,
            detect_origin_unavailable_title=detect_origin_unavailable_title,
            detect_origin_unresponsive=detect_origin_unresponsive,
            detect_origin_unresponsive_title=detect_origin_unresponsive_title,
            locked=locked,
            object_unavailable_alternate_host=object_unavailable_alternate_host,
            object_unavailable_backup_host=object_unavailable_backup_host,
            object_unavailable_blacklist_origin_ip=object_unavailable_blacklist_origin_ip,
            object_unavailable_blacklist_window=object_unavailable_blacklist_window,
            object_unavailable_change_protocol=object_unavailable_change_protocol,
            object_unavailable_detection_level=object_unavailable_detection_level,
            object_unavailable_include_query_string=object_unavailable_include_query_string,
            object_unavailable_modified_path=object_unavailable_modified_path,
            object_unavailable_modify_request_path=object_unavailable_modify_request_path,
            object_unavailable_protocol=object_unavailable_protocol,
            object_unavailable_recovery=object_unavailable_recovery,
            object_unavailable_redirect_method=object_unavailable_redirect_method,
            object_unavailable_response_codes=object_unavailable_response_codes,
            object_unavailable_retry_limit=object_unavailable_retry_limit,
            origin_unavailable_alternate_host=origin_unavailable_alternate_host,
            origin_unavailable_backup_host=origin_unavailable_backup_host,
            origin_unavailable_blacklist_origin_ip=origin_unavailable_blacklist_origin_ip,
            origin_unavailable_blacklist_window=origin_unavailable_blacklist_window,
            origin_unavailable_change_protocol=origin_unavailable_change_protocol,
            origin_unavailable_detection_level=origin_unavailable_detection_level,
            origin_unavailable_include_query_string=origin_unavailable_include_query_string,
            origin_unavailable_modified_path=origin_unavailable_modified_path,
            origin_unavailable_modify_request_path=origin_unavailable_modify_request_path,
            origin_unavailable_protocol=origin_unavailable_protocol,
            origin_unavailable_recovery=origin_unavailable_recovery,
            origin_unavailable_redirect_method=origin_unavailable_redirect_method,
            origin_unavailable_response_codes=origin_unavailable_response_codes,
            origin_unavailable_retry_limit=origin_unavailable_retry_limit,
            origin_unresponsive_alternate_host=origin_unresponsive_alternate_host,
            origin_unresponsive_backup_host=origin_unresponsive_backup_host,
            origin_unresponsive_blacklist_origin_ip=origin_unresponsive_blacklist_origin_ip,
            origin_unresponsive_blacklist_window=origin_unresponsive_blacklist_window,
            origin_unresponsive_change_protocol=origin_unresponsive_change_protocol,
            origin_unresponsive_detection_level=origin_unresponsive_detection_level,
            origin_unresponsive_include_query_string=origin_unresponsive_include_query_string,
            origin_unresponsive_modified_path=origin_unresponsive_modified_path,
            origin_unresponsive_modify_request_path=origin_unresponsive_modify_request_path,
            origin_unresponsive_protocol=origin_unresponsive_protocol,
            origin_unresponsive_recovery=origin_unresponsive_recovery,
            origin_unresponsive_redirect_method=origin_unresponsive_redirect_method,
            origin_unresponsive_retry_limit=origin_unresponsive_retry_limit,
            other_options=other_options,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cache_error_response: Optional[bool] = None,
             cache_window: Optional[str] = None,
             client_response_code: Optional[str] = None,
             detect_object_unavailable: Optional[bool] = None,
             detect_object_unavailable_title: Optional[str] = None,
             detect_origin_unavailable: Optional[bool] = None,
             detect_origin_unavailable_title: Optional[str] = None,
             detect_origin_unresponsive: Optional[bool] = None,
             detect_origin_unresponsive_title: Optional[str] = None,
             locked: Optional[bool] = None,
             object_unavailable_alternate_host: Optional[str] = None,
             object_unavailable_backup_host: Optional[str] = None,
             object_unavailable_blacklist_origin_ip: Optional[bool] = None,
             object_unavailable_blacklist_window: Optional[str] = None,
             object_unavailable_change_protocol: Optional[bool] = None,
             object_unavailable_detection_level: Optional[str] = None,
             object_unavailable_include_query_string: Optional[bool] = None,
             object_unavailable_modified_path: Optional[str] = None,
             object_unavailable_modify_request_path: Optional[bool] = None,
             object_unavailable_protocol: Optional[str] = None,
             object_unavailable_recovery: Optional[str] = None,
             object_unavailable_redirect_method: Optional[int] = None,
             object_unavailable_response_codes: Optional[Sequence[str]] = None,
             object_unavailable_retry_limit: Optional[str] = None,
             origin_unavailable_alternate_host: Optional[str] = None,
             origin_unavailable_backup_host: Optional[str] = None,
             origin_unavailable_blacklist_origin_ip: Optional[bool] = None,
             origin_unavailable_blacklist_window: Optional[str] = None,
             origin_unavailable_change_protocol: Optional[bool] = None,
             origin_unavailable_detection_level: Optional[str] = None,
             origin_unavailable_include_query_string: Optional[bool] = None,
             origin_unavailable_modified_path: Optional[str] = None,
             origin_unavailable_modify_request_path: Optional[bool] = None,
             origin_unavailable_protocol: Optional[str] = None,
             origin_unavailable_recovery: Optional[str] = None,
             origin_unavailable_redirect_method: Optional[int] = None,
             origin_unavailable_response_codes: Optional[Sequence[str]] = None,
             origin_unavailable_retry_limit: Optional[str] = None,
             origin_unresponsive_alternate_host: Optional[str] = None,
             origin_unresponsive_backup_host: Optional[str] = None,
             origin_unresponsive_blacklist_origin_ip: Optional[bool] = None,
             origin_unresponsive_blacklist_window: Optional[str] = None,
             origin_unresponsive_change_protocol: Optional[bool] = None,
             origin_unresponsive_detection_level: Optional[str] = None,
             origin_unresponsive_include_query_string: Optional[bool] = None,
             origin_unresponsive_modified_path: Optional[str] = None,
             origin_unresponsive_modify_request_path: Optional[bool] = None,
             origin_unresponsive_protocol: Optional[str] = None,
             origin_unresponsive_recovery: Optional[str] = None,
             origin_unresponsive_redirect_method: Optional[int] = None,
             origin_unresponsive_retry_limit: Optional[str] = None,
             other_options: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cacheErrorResponse' in kwargs:
            cache_error_response = kwargs['cacheErrorResponse']
        if 'cacheWindow' in kwargs:
            cache_window = kwargs['cacheWindow']
        if 'clientResponseCode' in kwargs:
            client_response_code = kwargs['clientResponseCode']
        if 'detectObjectUnavailable' in kwargs:
            detect_object_unavailable = kwargs['detectObjectUnavailable']
        if 'detectObjectUnavailableTitle' in kwargs:
            detect_object_unavailable_title = kwargs['detectObjectUnavailableTitle']
        if 'detectOriginUnavailable' in kwargs:
            detect_origin_unavailable = kwargs['detectOriginUnavailable']
        if 'detectOriginUnavailableTitle' in kwargs:
            detect_origin_unavailable_title = kwargs['detectOriginUnavailableTitle']
        if 'detectOriginUnresponsive' in kwargs:
            detect_origin_unresponsive = kwargs['detectOriginUnresponsive']
        if 'detectOriginUnresponsiveTitle' in kwargs:
            detect_origin_unresponsive_title = kwargs['detectOriginUnresponsiveTitle']
        if 'objectUnavailableAlternateHost' in kwargs:
            object_unavailable_alternate_host = kwargs['objectUnavailableAlternateHost']
        if 'objectUnavailableBackupHost' in kwargs:
            object_unavailable_backup_host = kwargs['objectUnavailableBackupHost']
        if 'objectUnavailableBlacklistOriginIp' in kwargs:
            object_unavailable_blacklist_origin_ip = kwargs['objectUnavailableBlacklistOriginIp']
        if 'objectUnavailableBlacklistWindow' in kwargs:
            object_unavailable_blacklist_window = kwargs['objectUnavailableBlacklistWindow']
        if 'objectUnavailableChangeProtocol' in kwargs:
            object_unavailable_change_protocol = kwargs['objectUnavailableChangeProtocol']
        if 'objectUnavailableDetectionLevel' in kwargs:
            object_unavailable_detection_level = kwargs['objectUnavailableDetectionLevel']
        if 'objectUnavailableIncludeQueryString' in kwargs:
            object_unavailable_include_query_string = kwargs['objectUnavailableIncludeQueryString']
        if 'objectUnavailableModifiedPath' in kwargs:
            object_unavailable_modified_path = kwargs['objectUnavailableModifiedPath']
        if 'objectUnavailableModifyRequestPath' in kwargs:
            object_unavailable_modify_request_path = kwargs['objectUnavailableModifyRequestPath']
        if 'objectUnavailableProtocol' in kwargs:
            object_unavailable_protocol = kwargs['objectUnavailableProtocol']
        if 'objectUnavailableRecovery' in kwargs:
            object_unavailable_recovery = kwargs['objectUnavailableRecovery']
        if 'objectUnavailableRedirectMethod' in kwargs:
            object_unavailable_redirect_method = kwargs['objectUnavailableRedirectMethod']
        if 'objectUnavailableResponseCodes' in kwargs:
            object_unavailable_response_codes = kwargs['objectUnavailableResponseCodes']
        if 'objectUnavailableRetryLimit' in kwargs:
            object_unavailable_retry_limit = kwargs['objectUnavailableRetryLimit']
        if 'originUnavailableAlternateHost' in kwargs:
            origin_unavailable_alternate_host = kwargs['originUnavailableAlternateHost']
        if 'originUnavailableBackupHost' in kwargs:
            origin_unavailable_backup_host = kwargs['originUnavailableBackupHost']
        if 'originUnavailableBlacklistOriginIp' in kwargs:
            origin_unavailable_blacklist_origin_ip = kwargs['originUnavailableBlacklistOriginIp']
        if 'originUnavailableBlacklistWindow' in kwargs:
            origin_unavailable_blacklist_window = kwargs['originUnavailableBlacklistWindow']
        if 'originUnavailableChangeProtocol' in kwargs:
            origin_unavailable_change_protocol = kwargs['originUnavailableChangeProtocol']
        if 'originUnavailableDetectionLevel' in kwargs:
            origin_unavailable_detection_level = kwargs['originUnavailableDetectionLevel']
        if 'originUnavailableIncludeQueryString' in kwargs:
            origin_unavailable_include_query_string = kwargs['originUnavailableIncludeQueryString']
        if 'originUnavailableModifiedPath' in kwargs:
            origin_unavailable_modified_path = kwargs['originUnavailableModifiedPath']
        if 'originUnavailableModifyRequestPath' in kwargs:
            origin_unavailable_modify_request_path = kwargs['originUnavailableModifyRequestPath']
        if 'originUnavailableProtocol' in kwargs:
            origin_unavailable_protocol = kwargs['originUnavailableProtocol']
        if 'originUnavailableRecovery' in kwargs:
            origin_unavailable_recovery = kwargs['originUnavailableRecovery']
        if 'originUnavailableRedirectMethod' in kwargs:
            origin_unavailable_redirect_method = kwargs['originUnavailableRedirectMethod']
        if 'originUnavailableResponseCodes' in kwargs:
            origin_unavailable_response_codes = kwargs['originUnavailableResponseCodes']
        if 'originUnavailableRetryLimit' in kwargs:
            origin_unavailable_retry_limit = kwargs['originUnavailableRetryLimit']
        if 'originUnresponsiveAlternateHost' in kwargs:
            origin_unresponsive_alternate_host = kwargs['originUnresponsiveAlternateHost']
        if 'originUnresponsiveBackupHost' in kwargs:
            origin_unresponsive_backup_host = kwargs['originUnresponsiveBackupHost']
        if 'originUnresponsiveBlacklistOriginIp' in kwargs:
            origin_unresponsive_blacklist_origin_ip = kwargs['originUnresponsiveBlacklistOriginIp']
        if 'originUnresponsiveBlacklistWindow' in kwargs:
            origin_unresponsive_blacklist_window = kwargs['originUnresponsiveBlacklistWindow']
        if 'originUnresponsiveChangeProtocol' in kwargs:
            origin_unresponsive_change_protocol = kwargs['originUnresponsiveChangeProtocol']
        if 'originUnresponsiveDetectionLevel' in kwargs:
            origin_unresponsive_detection_level = kwargs['originUnresponsiveDetectionLevel']
        if 'originUnresponsiveIncludeQueryString' in kwargs:
            origin_unresponsive_include_query_string = kwargs['originUnresponsiveIncludeQueryString']
        if 'originUnresponsiveModifiedPath' in kwargs:
            origin_unresponsive_modified_path = kwargs['originUnresponsiveModifiedPath']
        if 'originUnresponsiveModifyRequestPath' in kwargs:
            origin_unresponsive_modify_request_path = kwargs['originUnresponsiveModifyRequestPath']
        if 'originUnresponsiveProtocol' in kwargs:
            origin_unresponsive_protocol = kwargs['originUnresponsiveProtocol']
        if 'originUnresponsiveRecovery' in kwargs:
            origin_unresponsive_recovery = kwargs['originUnresponsiveRecovery']
        if 'originUnresponsiveRedirectMethod' in kwargs:
            origin_unresponsive_redirect_method = kwargs['originUnresponsiveRedirectMethod']
        if 'originUnresponsiveRetryLimit' in kwargs:
            origin_unresponsive_retry_limit = kwargs['originUnresponsiveRetryLimit']
        if 'otherOptions' in kwargs:
            other_options = kwargs['otherOptions']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cache_error_response is not None:
            _setter("cache_error_response", cache_error_response)
        if cache_window is not None:
            _setter("cache_window", cache_window)
        if client_response_code is not None:
            _setter("client_response_code", client_response_code)
        if detect_object_unavailable is not None:
            _setter("detect_object_unavailable", detect_object_unavailable)
        if detect_object_unavailable_title is not None:
            _setter("detect_object_unavailable_title", detect_object_unavailable_title)
        if detect_origin_unavailable is not None:
            _setter("detect_origin_unavailable", detect_origin_unavailable)
        if detect_origin_unavailable_title is not None:
            _setter("detect_origin_unavailable_title", detect_origin_unavailable_title)
        if detect_origin_unresponsive is not None:
            _setter("detect_origin_unresponsive", detect_origin_unresponsive)
        if detect_origin_unresponsive_title is not None:
            _setter("detect_origin_unresponsive_title", detect_origin_unresponsive_title)
        if locked is not None:
            _setter("locked", locked)
        if object_unavailable_alternate_host is not None:
            _setter("object_unavailable_alternate_host", object_unavailable_alternate_host)
        if object_unavailable_backup_host is not None:
            _setter("object_unavailable_backup_host", object_unavailable_backup_host)
        if object_unavailable_blacklist_origin_ip is not None:
            _setter("object_unavailable_blacklist_origin_ip", object_unavailable_blacklist_origin_ip)
        if object_unavailable_blacklist_window is not None:
            _setter("object_unavailable_blacklist_window", object_unavailable_blacklist_window)
        if object_unavailable_change_protocol is not None:
            _setter("object_unavailable_change_protocol", object_unavailable_change_protocol)
        if object_unavailable_detection_level is not None:
            _setter("object_unavailable_detection_level", object_unavailable_detection_level)
        if object_unavailable_include_query_string is not None:
            _setter("object_unavailable_include_query_string", object_unavailable_include_query_string)
        if object_unavailable_modified_path is not None:
            _setter("object_unavailable_modified_path", object_unavailable_modified_path)
        if object_unavailable_modify_request_path is not None:
            _setter("object_unavailable_modify_request_path", object_unavailable_modify_request_path)
        if object_unavailable_protocol is not None:
            _setter("object_unavailable_protocol", object_unavailable_protocol)
        if object_unavailable_recovery is not None:
            _setter("object_unavailable_recovery", object_unavailable_recovery)
        if object_unavailable_redirect_method is not None:
            _setter("object_unavailable_redirect_method", object_unavailable_redirect_method)
        if object_unavailable_response_codes is not None:
            _setter("object_unavailable_response_codes", object_unavailable_response_codes)
        if object_unavailable_retry_limit is not None:
            _setter("object_unavailable_retry_limit", object_unavailable_retry_limit)
        if origin_unavailable_alternate_host is not None:
            _setter("origin_unavailable_alternate_host", origin_unavailable_alternate_host)
        if origin_unavailable_backup_host is not None:
            _setter("origin_unavailable_backup_host", origin_unavailable_backup_host)
        if origin_unavailable_blacklist_origin_ip is not None:
            _setter("origin_unavailable_blacklist_origin_ip", origin_unavailable_blacklist_origin_ip)
        if origin_unavailable_blacklist_window is not None:
            _setter("origin_unavailable_blacklist_window", origin_unavailable_blacklist_window)
        if origin_unavailable_change_protocol is not None:
            _setter("origin_unavailable_change_protocol", origin_unavailable_change_protocol)
        if origin_unavailable_detection_level is not None:
            _setter("origin_unavailable_detection_level", origin_unavailable_detection_level)
        if origin_unavailable_include_query_string is not None:
            _setter("origin_unavailable_include_query_string", origin_unavailable_include_query_string)
        if origin_unavailable_modified_path is not None:
            _setter("origin_unavailable_modified_path", origin_unavailable_modified_path)
        if origin_unavailable_modify_request_path is not None:
            _setter("origin_unavailable_modify_request_path", origin_unavailable_modify_request_path)
        if origin_unavailable_protocol is not None:
            _setter("origin_unavailable_protocol", origin_unavailable_protocol)
        if origin_unavailable_recovery is not None:
            _setter("origin_unavailable_recovery", origin_unavailable_recovery)
        if origin_unavailable_redirect_method is not None:
            _setter("origin_unavailable_redirect_method", origin_unavailable_redirect_method)
        if origin_unavailable_response_codes is not None:
            _setter("origin_unavailable_response_codes", origin_unavailable_response_codes)
        if origin_unavailable_retry_limit is not None:
            _setter("origin_unavailable_retry_limit", origin_unavailable_retry_limit)
        if origin_unresponsive_alternate_host is not None:
            _setter("origin_unresponsive_alternate_host", origin_unresponsive_alternate_host)
        if origin_unresponsive_backup_host is not None:
            _setter("origin_unresponsive_backup_host", origin_unresponsive_backup_host)
        if origin_unresponsive_blacklist_origin_ip is not None:
            _setter("origin_unresponsive_blacklist_origin_ip", origin_unresponsive_blacklist_origin_ip)
        if origin_unresponsive_blacklist_window is not None:
            _setter("origin_unresponsive_blacklist_window", origin_unresponsive_blacklist_window)
        if origin_unresponsive_change_protocol is not None:
            _setter("origin_unresponsive_change_protocol", origin_unresponsive_change_protocol)
        if origin_unresponsive_detection_level is not None:
            _setter("origin_unresponsive_detection_level", origin_unresponsive_detection_level)
        if origin_unresponsive_include_query_string is not None:
            _setter("origin_unresponsive_include_query_string", origin_unresponsive_include_query_string)
        if origin_unresponsive_modified_path is not None:
            _setter("origin_unresponsive_modified_path", origin_unresponsive_modified_path)
        if origin_unresponsive_modify_request_path is not None:
            _setter("origin_unresponsive_modify_request_path", origin_unresponsive_modify_request_path)
        if origin_unresponsive_protocol is not None:
            _setter("origin_unresponsive_protocol", origin_unresponsive_protocol)
        if origin_unresponsive_recovery is not None:
            _setter("origin_unresponsive_recovery", origin_unresponsive_recovery)
        if origin_unresponsive_redirect_method is not None:
            _setter("origin_unresponsive_redirect_method", origin_unresponsive_redirect_method)
        if origin_unresponsive_retry_limit is not None:
            _setter("origin_unresponsive_retry_limit", origin_unresponsive_retry_limit)
        if other_options is not None:
            _setter("other_options", other_options)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cacheErrorResponse")
    def cache_error_response(self) -> Optional[bool]:
        return pulumi.get(self, "cache_error_response")

    @property
    @pulumi.getter(name="cacheWindow")
    def cache_window(self) -> Optional[str]:
        return pulumi.get(self, "cache_window")

    @property
    @pulumi.getter(name="clientResponseCode")
    def client_response_code(self) -> Optional[str]:
        return pulumi.get(self, "client_response_code")

    @property
    @pulumi.getter(name="detectObjectUnavailable")
    def detect_object_unavailable(self) -> Optional[bool]:
        return pulumi.get(self, "detect_object_unavailable")

    @property
    @pulumi.getter(name="detectObjectUnavailableTitle")
    def detect_object_unavailable_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_object_unavailable_title")

    @property
    @pulumi.getter(name="detectOriginUnavailable")
    def detect_origin_unavailable(self) -> Optional[bool]:
        return pulumi.get(self, "detect_origin_unavailable")

    @property
    @pulumi.getter(name="detectOriginUnavailableTitle")
    def detect_origin_unavailable_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_origin_unavailable_title")

    @property
    @pulumi.getter(name="detectOriginUnresponsive")
    def detect_origin_unresponsive(self) -> Optional[bool]:
        return pulumi.get(self, "detect_origin_unresponsive")

    @property
    @pulumi.getter(name="detectOriginUnresponsiveTitle")
    def detect_origin_unresponsive_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_origin_unresponsive_title")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectUnavailableAlternateHost")
    def object_unavailable_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_alternate_host")

    @property
    @pulumi.getter(name="objectUnavailableBackupHost")
    def object_unavailable_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_backup_host")

    @property
    @pulumi.getter(name="objectUnavailableBlacklistOriginIp")
    def object_unavailable_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_blacklist_origin_ip")

    @property
    @pulumi.getter(name="objectUnavailableBlacklistWindow")
    def object_unavailable_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_blacklist_window")

    @property
    @pulumi.getter(name="objectUnavailableChangeProtocol")
    def object_unavailable_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_change_protocol")

    @property
    @pulumi.getter(name="objectUnavailableDetectionLevel")
    def object_unavailable_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_detection_level")

    @property
    @pulumi.getter(name="objectUnavailableIncludeQueryString")
    def object_unavailable_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_include_query_string")

    @property
    @pulumi.getter(name="objectUnavailableModifiedPath")
    def object_unavailable_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_modified_path")

    @property
    @pulumi.getter(name="objectUnavailableModifyRequestPath")
    def object_unavailable_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_modify_request_path")

    @property
    @pulumi.getter(name="objectUnavailableProtocol")
    def object_unavailable_protocol(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_protocol")

    @property
    @pulumi.getter(name="objectUnavailableRecovery")
    def object_unavailable_recovery(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_recovery")

    @property
    @pulumi.getter(name="objectUnavailableRedirectMethod")
    def object_unavailable_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "object_unavailable_redirect_method")

    @property
    @pulumi.getter(name="objectUnavailableResponseCodes")
    def object_unavailable_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "object_unavailable_response_codes")

    @property
    @pulumi.getter(name="objectUnavailableRetryLimit")
    def object_unavailable_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_retry_limit")

    @property
    @pulumi.getter(name="originUnavailableAlternateHost")
    def origin_unavailable_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_alternate_host")

    @property
    @pulumi.getter(name="originUnavailableBackupHost")
    def origin_unavailable_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_backup_host")

    @property
    @pulumi.getter(name="originUnavailableBlacklistOriginIp")
    def origin_unavailable_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_blacklist_origin_ip")

    @property
    @pulumi.getter(name="originUnavailableBlacklistWindow")
    def origin_unavailable_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_blacklist_window")

    @property
    @pulumi.getter(name="originUnavailableChangeProtocol")
    def origin_unavailable_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_change_protocol")

    @property
    @pulumi.getter(name="originUnavailableDetectionLevel")
    def origin_unavailable_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_detection_level")

    @property
    @pulumi.getter(name="originUnavailableIncludeQueryString")
    def origin_unavailable_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_include_query_string")

    @property
    @pulumi.getter(name="originUnavailableModifiedPath")
    def origin_unavailable_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_modified_path")

    @property
    @pulumi.getter(name="originUnavailableModifyRequestPath")
    def origin_unavailable_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_modify_request_path")

    @property
    @pulumi.getter(name="originUnavailableProtocol")
    def origin_unavailable_protocol(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_protocol")

    @property
    @pulumi.getter(name="originUnavailableRecovery")
    def origin_unavailable_recovery(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_recovery")

    @property
    @pulumi.getter(name="originUnavailableRedirectMethod")
    def origin_unavailable_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "origin_unavailable_redirect_method")

    @property
    @pulumi.getter(name="originUnavailableResponseCodes")
    def origin_unavailable_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "origin_unavailable_response_codes")

    @property
    @pulumi.getter(name="originUnavailableRetryLimit")
    def origin_unavailable_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_retry_limit")

    @property
    @pulumi.getter(name="originUnresponsiveAlternateHost")
    def origin_unresponsive_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_alternate_host")

    @property
    @pulumi.getter(name="originUnresponsiveBackupHost")
    def origin_unresponsive_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_backup_host")

    @property
    @pulumi.getter(name="originUnresponsiveBlacklistOriginIp")
    def origin_unresponsive_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_blacklist_origin_ip")

    @property
    @pulumi.getter(name="originUnresponsiveBlacklistWindow")
    def origin_unresponsive_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_blacklist_window")

    @property
    @pulumi.getter(name="originUnresponsiveChangeProtocol")
    def origin_unresponsive_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_change_protocol")

    @property
    @pulumi.getter(name="originUnresponsiveDetectionLevel")
    def origin_unresponsive_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_detection_level")

    @property
    @pulumi.getter(name="originUnresponsiveIncludeQueryString")
    def origin_unresponsive_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_include_query_string")

    @property
    @pulumi.getter(name="originUnresponsiveModifiedPath")
    def origin_unresponsive_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_modified_path")

    @property
    @pulumi.getter(name="originUnresponsiveModifyRequestPath")
    def origin_unresponsive_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_modify_request_path")

    @property
    @pulumi.getter(name="originUnresponsiveProtocol")
    def origin_unresponsive_protocol(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_protocol")

    @property
    @pulumi.getter(name="originUnresponsiveRecovery")
    def origin_unresponsive_recovery(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_recovery")

    @property
    @pulumi.getter(name="originUnresponsiveRedirectMethod")
    def origin_unresponsive_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "origin_unresponsive_redirect_method")

    @property
    @pulumi.getter(name="originUnresponsiveRetryLimit")
    def origin_unresponsive_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_retry_limit")

    @property
    @pulumi.getter(name="otherOptions")
    def other_options(self) -> Optional[str]:
        return pulumi.get(self, "other_options")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMetadataCachingResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorMetadataCachingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMobileSdkPerformanceResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 secondary_multipath_to_origin: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorMobileSdkPerformanceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            secondary_multipath_to_origin=secondary_multipath_to_origin,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             secondary_multipath_to_origin: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'secondaryMultipathToOrigin' in kwargs:
            secondary_multipath_to_origin = kwargs['secondaryMultipathToOrigin']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if secondary_multipath_to_origin is not None:
            _setter("secondary_multipath_to_origin", secondary_multipath_to_origin)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="secondaryMultipathToOrigin")
    def secondary_multipath_to_origin(self) -> Optional[bool]:
        return pulumi.get(self, "secondary_multipath_to_origin")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingRequestHeaderResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 standard_pass_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingRequestHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            avoid_duplicate_headers=avoid_duplicate_headers,
            custom_header_name=custom_header_name,
            header_value=header_value,
            locked=locked,
            new_header_value=new_header_value,
            standard_add_header_name=standard_add_header_name,
            standard_delete_header_name=standard_delete_header_name,
            standard_modify_header_name=standard_modify_header_name,
            standard_pass_header_name=standard_pass_header_name,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[str] = None,
             avoid_duplicate_headers: Optional[bool] = None,
             custom_header_name: Optional[str] = None,
             header_value: Optional[str] = None,
             locked: Optional[bool] = None,
             new_header_value: Optional[str] = None,
             standard_add_header_name: Optional[str] = None,
             standard_delete_header_name: Optional[str] = None,
             standard_modify_header_name: Optional[str] = None,
             standard_pass_header_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'avoidDuplicateHeaders' in kwargs:
            avoid_duplicate_headers = kwargs['avoidDuplicateHeaders']
        if 'customHeaderName' in kwargs:
            custom_header_name = kwargs['customHeaderName']
        if 'headerValue' in kwargs:
            header_value = kwargs['headerValue']
        if 'newHeaderValue' in kwargs:
            new_header_value = kwargs['newHeaderValue']
        if 'standardAddHeaderName' in kwargs:
            standard_add_header_name = kwargs['standardAddHeaderName']
        if 'standardDeleteHeaderName' in kwargs:
            standard_delete_header_name = kwargs['standardDeleteHeaderName']
        if 'standardModifyHeaderName' in kwargs:
            standard_modify_header_name = kwargs['standardModifyHeaderName']
        if 'standardPassHeaderName' in kwargs:
            standard_pass_header_name = kwargs['standardPassHeaderName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if action is not None:
            _setter("action", action)
        if avoid_duplicate_headers is not None:
            _setter("avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            _setter("custom_header_name", custom_header_name)
        if header_value is not None:
            _setter("header_value", header_value)
        if locked is not None:
            _setter("locked", locked)
        if new_header_value is not None:
            _setter("new_header_value", new_header_value)
        if standard_add_header_name is not None:
            _setter("standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            _setter("standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            _setter("standard_modify_header_name", standard_modify_header_name)
        if standard_pass_header_name is not None:
            _setter("standard_pass_header_name", standard_pass_header_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @property
    @pulumi.getter(name="standardPassHeaderName")
    def standard_pass_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_pass_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingResponseHeaderResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 standard_pass_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingResponseHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            avoid_duplicate_headers=avoid_duplicate_headers,
            custom_header_name=custom_header_name,
            header_value=header_value,
            locked=locked,
            new_header_value=new_header_value,
            standard_add_header_name=standard_add_header_name,
            standard_delete_header_name=standard_delete_header_name,
            standard_modify_header_name=standard_modify_header_name,
            standard_pass_header_name=standard_pass_header_name,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[str] = None,
             avoid_duplicate_headers: Optional[bool] = None,
             custom_header_name: Optional[str] = None,
             header_value: Optional[str] = None,
             locked: Optional[bool] = None,
             new_header_value: Optional[str] = None,
             standard_add_header_name: Optional[str] = None,
             standard_delete_header_name: Optional[str] = None,
             standard_modify_header_name: Optional[str] = None,
             standard_pass_header_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'avoidDuplicateHeaders' in kwargs:
            avoid_duplicate_headers = kwargs['avoidDuplicateHeaders']
        if 'customHeaderName' in kwargs:
            custom_header_name = kwargs['customHeaderName']
        if 'headerValue' in kwargs:
            header_value = kwargs['headerValue']
        if 'newHeaderValue' in kwargs:
            new_header_value = kwargs['newHeaderValue']
        if 'standardAddHeaderName' in kwargs:
            standard_add_header_name = kwargs['standardAddHeaderName']
        if 'standardDeleteHeaderName' in kwargs:
            standard_delete_header_name = kwargs['standardDeleteHeaderName']
        if 'standardModifyHeaderName' in kwargs:
            standard_modify_header_name = kwargs['standardModifyHeaderName']
        if 'standardPassHeaderName' in kwargs:
            standard_pass_header_name = kwargs['standardPassHeaderName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if action is not None:
            _setter("action", action)
        if avoid_duplicate_headers is not None:
            _setter("avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            _setter("custom_header_name", custom_header_name)
        if header_value is not None:
            _setter("header_value", header_value)
        if locked is not None:
            _setter("locked", locked)
        if new_header_value is not None:
            _setter("new_header_value", new_header_value)
        if standard_add_header_name is not None:
            _setter("standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            _setter("standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            _setter("standard_modify_header_name", standard_modify_header_name)
        if standard_pass_header_name is not None:
            _setter("standard_pass_header_name", standard_pass_header_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @property
    @pulumi.getter(name="standardPassHeaderName")
    def standard_pass_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_pass_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingRequestHeaderResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_multiple: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 regex_header_match: Optional[str] = None,
                 regex_header_replace: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingRequestHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            avoid_duplicate_headers=avoid_duplicate_headers,
            custom_header_name=custom_header_name,
            header_value=header_value,
            locked=locked,
            match_multiple=match_multiple,
            new_header_value=new_header_value,
            regex_header_match=regex_header_match,
            regex_header_replace=regex_header_replace,
            standard_add_header_name=standard_add_header_name,
            standard_delete_header_name=standard_delete_header_name,
            standard_modify_header_name=standard_modify_header_name,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[str] = None,
             avoid_duplicate_headers: Optional[bool] = None,
             custom_header_name: Optional[str] = None,
             header_value: Optional[str] = None,
             locked: Optional[bool] = None,
             match_multiple: Optional[bool] = None,
             new_header_value: Optional[str] = None,
             regex_header_match: Optional[str] = None,
             regex_header_replace: Optional[str] = None,
             standard_add_header_name: Optional[str] = None,
             standard_delete_header_name: Optional[str] = None,
             standard_modify_header_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'avoidDuplicateHeaders' in kwargs:
            avoid_duplicate_headers = kwargs['avoidDuplicateHeaders']
        if 'customHeaderName' in kwargs:
            custom_header_name = kwargs['customHeaderName']
        if 'headerValue' in kwargs:
            header_value = kwargs['headerValue']
        if 'matchMultiple' in kwargs:
            match_multiple = kwargs['matchMultiple']
        if 'newHeaderValue' in kwargs:
            new_header_value = kwargs['newHeaderValue']
        if 'regexHeaderMatch' in kwargs:
            regex_header_match = kwargs['regexHeaderMatch']
        if 'regexHeaderReplace' in kwargs:
            regex_header_replace = kwargs['regexHeaderReplace']
        if 'standardAddHeaderName' in kwargs:
            standard_add_header_name = kwargs['standardAddHeaderName']
        if 'standardDeleteHeaderName' in kwargs:
            standard_delete_header_name = kwargs['standardDeleteHeaderName']
        if 'standardModifyHeaderName' in kwargs:
            standard_modify_header_name = kwargs['standardModifyHeaderName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if action is not None:
            _setter("action", action)
        if avoid_duplicate_headers is not None:
            _setter("avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            _setter("custom_header_name", custom_header_name)
        if header_value is not None:
            _setter("header_value", header_value)
        if locked is not None:
            _setter("locked", locked)
        if match_multiple is not None:
            _setter("match_multiple", match_multiple)
        if new_header_value is not None:
            _setter("new_header_value", new_header_value)
        if regex_header_match is not None:
            _setter("regex_header_match", regex_header_match)
        if regex_header_replace is not None:
            _setter("regex_header_replace", regex_header_replace)
        if standard_add_header_name is not None:
            _setter("standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            _setter("standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            _setter("standard_modify_header_name", standard_modify_header_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @property
    @pulumi.getter(name="regexHeaderMatch")
    def regex_header_match(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_match")

    @property
    @pulumi.getter(name="regexHeaderReplace")
    def regex_header_replace(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_replace")

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingResponseHeaderResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_multiple: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 regex_header_match: Optional[str] = None,
                 regex_header_replace: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingResponseHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            avoid_duplicate_headers=avoid_duplicate_headers,
            custom_header_name=custom_header_name,
            header_value=header_value,
            locked=locked,
            match_multiple=match_multiple,
            new_header_value=new_header_value,
            regex_header_match=regex_header_match,
            regex_header_replace=regex_header_replace,
            standard_add_header_name=standard_add_header_name,
            standard_delete_header_name=standard_delete_header_name,
            standard_modify_header_name=standard_modify_header_name,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[str] = None,
             avoid_duplicate_headers: Optional[bool] = None,
             custom_header_name: Optional[str] = None,
             header_value: Optional[str] = None,
             locked: Optional[bool] = None,
             match_multiple: Optional[bool] = None,
             new_header_value: Optional[str] = None,
             regex_header_match: Optional[str] = None,
             regex_header_replace: Optional[str] = None,
             standard_add_header_name: Optional[str] = None,
             standard_delete_header_name: Optional[str] = None,
             standard_modify_header_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'avoidDuplicateHeaders' in kwargs:
            avoid_duplicate_headers = kwargs['avoidDuplicateHeaders']
        if 'customHeaderName' in kwargs:
            custom_header_name = kwargs['customHeaderName']
        if 'headerValue' in kwargs:
            header_value = kwargs['headerValue']
        if 'matchMultiple' in kwargs:
            match_multiple = kwargs['matchMultiple']
        if 'newHeaderValue' in kwargs:
            new_header_value = kwargs['newHeaderValue']
        if 'regexHeaderMatch' in kwargs:
            regex_header_match = kwargs['regexHeaderMatch']
        if 'regexHeaderReplace' in kwargs:
            regex_header_replace = kwargs['regexHeaderReplace']
        if 'standardAddHeaderName' in kwargs:
            standard_add_header_name = kwargs['standardAddHeaderName']
        if 'standardDeleteHeaderName' in kwargs:
            standard_delete_header_name = kwargs['standardDeleteHeaderName']
        if 'standardModifyHeaderName' in kwargs:
            standard_modify_header_name = kwargs['standardModifyHeaderName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if action is not None:
            _setter("action", action)
        if avoid_duplicate_headers is not None:
            _setter("avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            _setter("custom_header_name", custom_header_name)
        if header_value is not None:
            _setter("header_value", header_value)
        if locked is not None:
            _setter("locked", locked)
        if match_multiple is not None:
            _setter("match_multiple", match_multiple)
        if new_header_value is not None:
            _setter("new_header_value", new_header_value)
        if regex_header_match is not None:
            _setter("regex_header_match", regex_header_match)
        if regex_header_replace is not None:
            _setter("regex_header_replace", regex_header_replace)
        if standard_add_header_name is not None:
            _setter("standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            _setter("standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            _setter("standard_modify_header_name", standard_modify_header_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @property
    @pulumi.getter(name="regexHeaderMatch")
    def regex_header_match(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_match")

    @property
    @pulumi.getter(name="regexHeaderReplace")
    def regex_header_replace(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_replace")

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorModifyViaHeaderResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modification_option: Optional[str] = None,
                 rename_header_to: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorModifyViaHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            modification_option=modification_option,
            rename_header_to=rename_header_to,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             modification_option: Optional[str] = None,
             rename_header_to: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'modificationOption' in kwargs:
            modification_option = kwargs['modificationOption']
        if 'renameHeaderTo' in kwargs:
            rename_header_to = kwargs['renameHeaderTo']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if modification_option is not None:
            _setter("modification_option", modification_option)
        if rename_header_to is not None:
            _setter("rename_header_to", rename_header_to)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="modificationOption")
    def modification_option(self) -> Optional[str]:
        return pulumi.get(self, "modification_option")

    @property
    @pulumi.getter(name="renameHeaderTo")
    def rename_header_to(self) -> Optional[str]:
        return pulumi.get(self, "rename_header_to")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginResult(dict):
    def __init__(__self__, *,
                 cache_key_hostname: Optional[str] = None,
                 compress: Optional[bool] = None,
                 custom_certificate_authorities: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityResult']] = None,
                 custom_certificates: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateResult']] = None,
                 custom_forward_host_header: Optional[str] = None,
                 custom_valid_cn_values: Optional[Sequence[str]] = None,
                 enable_true_client_ip: Optional[bool] = None,
                 forward_host_header: Optional[str] = None,
                 hostname: Optional[str] = None,
                 http_port: Optional[int] = None,
                 https_port: Optional[int] = None,
                 ip_version: Optional[str] = None,
                 locked: Optional[bool] = None,
                 mslorigin: Optional[str] = None,
                 net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginNetStorageResult'] = None,
                 origin_certificate: Optional[str] = None,
                 origin_certs_to_honor: Optional[str] = None,
                 origin_id: Optional[str] = None,
                 origin_sni: Optional[bool] = None,
                 origin_type: Optional[str] = None,
                 ports: Optional[str] = None,
                 saas_cname_enabled: Optional[bool] = None,
                 saas_cname_level: Optional[int] = None,
                 saas_cookie: Optional[str] = None,
                 saas_query_string: Optional[str] = None,
                 saas_regex: Optional[str] = None,
                 saas_replace: Optional[str] = None,
                 saas_suffix: Optional[str] = None,
                 saas_type: Optional[str] = None,
                 second_hostname: Optional[str] = None,
                 second_hostname_enabled: Optional[bool] = None,
                 standard_certificate_authorities: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 true_client_ip_client_setting: Optional[bool] = None,
                 true_client_ip_header: Optional[str] = None,
                 use_unique_cache_key: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 verification_mode: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorOriginResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cache_key_hostname=cache_key_hostname,
            compress=compress,
            custom_certificate_authorities=custom_certificate_authorities,
            custom_certificates=custom_certificates,
            custom_forward_host_header=custom_forward_host_header,
            custom_valid_cn_values=custom_valid_cn_values,
            enable_true_client_ip=enable_true_client_ip,
            forward_host_header=forward_host_header,
            hostname=hostname,
            http_port=http_port,
            https_port=https_port,
            ip_version=ip_version,
            locked=locked,
            mslorigin=mslorigin,
            net_storage=net_storage,
            origin_certificate=origin_certificate,
            origin_certs_to_honor=origin_certs_to_honor,
            origin_id=origin_id,
            origin_sni=origin_sni,
            origin_type=origin_type,
            ports=ports,
            saas_cname_enabled=saas_cname_enabled,
            saas_cname_level=saas_cname_level,
            saas_cookie=saas_cookie,
            saas_query_string=saas_query_string,
            saas_regex=saas_regex,
            saas_replace=saas_replace,
            saas_suffix=saas_suffix,
            saas_type=saas_type,
            second_hostname=second_hostname,
            second_hostname_enabled=second_hostname_enabled,
            standard_certificate_authorities=standard_certificate_authorities,
            template_uuid=template_uuid,
            true_client_ip_client_setting=true_client_ip_client_setting,
            true_client_ip_header=true_client_ip_header,
            use_unique_cache_key=use_unique_cache_key,
            uuid=uuid,
            verification_mode=verification_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cache_key_hostname: Optional[str] = None,
             compress: Optional[bool] = None,
             custom_certificate_authorities: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityResult']] = None,
             custom_certificates: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateResult']] = None,
             custom_forward_host_header: Optional[str] = None,
             custom_valid_cn_values: Optional[Sequence[str]] = None,
             enable_true_client_ip: Optional[bool] = None,
             forward_host_header: Optional[str] = None,
             hostname: Optional[str] = None,
             http_port: Optional[int] = None,
             https_port: Optional[int] = None,
             ip_version: Optional[str] = None,
             locked: Optional[bool] = None,
             mslorigin: Optional[str] = None,
             net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginNetStorageResult'] = None,
             origin_certificate: Optional[str] = None,
             origin_certs_to_honor: Optional[str] = None,
             origin_id: Optional[str] = None,
             origin_sni: Optional[bool] = None,
             origin_type: Optional[str] = None,
             ports: Optional[str] = None,
             saas_cname_enabled: Optional[bool] = None,
             saas_cname_level: Optional[int] = None,
             saas_cookie: Optional[str] = None,
             saas_query_string: Optional[str] = None,
             saas_regex: Optional[str] = None,
             saas_replace: Optional[str] = None,
             saas_suffix: Optional[str] = None,
             saas_type: Optional[str] = None,
             second_hostname: Optional[str] = None,
             second_hostname_enabled: Optional[bool] = None,
             standard_certificate_authorities: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             true_client_ip_client_setting: Optional[bool] = None,
             true_client_ip_header: Optional[str] = None,
             use_unique_cache_key: Optional[bool] = None,
             uuid: Optional[str] = None,
             verification_mode: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cacheKeyHostname' in kwargs:
            cache_key_hostname = kwargs['cacheKeyHostname']
        if 'customCertificateAuthorities' in kwargs:
            custom_certificate_authorities = kwargs['customCertificateAuthorities']
        if 'customCertificates' in kwargs:
            custom_certificates = kwargs['customCertificates']
        if 'customForwardHostHeader' in kwargs:
            custom_forward_host_header = kwargs['customForwardHostHeader']
        if 'customValidCnValues' in kwargs:
            custom_valid_cn_values = kwargs['customValidCnValues']
        if 'enableTrueClientIp' in kwargs:
            enable_true_client_ip = kwargs['enableTrueClientIp']
        if 'forwardHostHeader' in kwargs:
            forward_host_header = kwargs['forwardHostHeader']
        if 'httpPort' in kwargs:
            http_port = kwargs['httpPort']
        if 'httpsPort' in kwargs:
            https_port = kwargs['httpsPort']
        if 'ipVersion' in kwargs:
            ip_version = kwargs['ipVersion']
        if 'netStorage' in kwargs:
            net_storage = kwargs['netStorage']
        if 'originCertificate' in kwargs:
            origin_certificate = kwargs['originCertificate']
        if 'originCertsToHonor' in kwargs:
            origin_certs_to_honor = kwargs['originCertsToHonor']
        if 'originId' in kwargs:
            origin_id = kwargs['originId']
        if 'originSni' in kwargs:
            origin_sni = kwargs['originSni']
        if 'originType' in kwargs:
            origin_type = kwargs['originType']
        if 'saasCnameEnabled' in kwargs:
            saas_cname_enabled = kwargs['saasCnameEnabled']
        if 'saasCnameLevel' in kwargs:
            saas_cname_level = kwargs['saasCnameLevel']
        if 'saasCookie' in kwargs:
            saas_cookie = kwargs['saasCookie']
        if 'saasQueryString' in kwargs:
            saas_query_string = kwargs['saasQueryString']
        if 'saasRegex' in kwargs:
            saas_regex = kwargs['saasRegex']
        if 'saasReplace' in kwargs:
            saas_replace = kwargs['saasReplace']
        if 'saasSuffix' in kwargs:
            saas_suffix = kwargs['saasSuffix']
        if 'saasType' in kwargs:
            saas_type = kwargs['saasType']
        if 'secondHostname' in kwargs:
            second_hostname = kwargs['secondHostname']
        if 'secondHostnameEnabled' in kwargs:
            second_hostname_enabled = kwargs['secondHostnameEnabled']
        if 'standardCertificateAuthorities' in kwargs:
            standard_certificate_authorities = kwargs['standardCertificateAuthorities']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'trueClientIpClientSetting' in kwargs:
            true_client_ip_client_setting = kwargs['trueClientIpClientSetting']
        if 'trueClientIpHeader' in kwargs:
            true_client_ip_header = kwargs['trueClientIpHeader']
        if 'useUniqueCacheKey' in kwargs:
            use_unique_cache_key = kwargs['useUniqueCacheKey']
        if 'verificationMode' in kwargs:
            verification_mode = kwargs['verificationMode']

        if cache_key_hostname is not None:
            _setter("cache_key_hostname", cache_key_hostname)
        if compress is not None:
            _setter("compress", compress)
        if custom_certificate_authorities is not None:
            _setter("custom_certificate_authorities", custom_certificate_authorities)
        if custom_certificates is not None:
            _setter("custom_certificates", custom_certificates)
        if custom_forward_host_header is not None:
            _setter("custom_forward_host_header", custom_forward_host_header)
        if custom_valid_cn_values is not None:
            _setter("custom_valid_cn_values", custom_valid_cn_values)
        if enable_true_client_ip is not None:
            _setter("enable_true_client_ip", enable_true_client_ip)
        if forward_host_header is not None:
            _setter("forward_host_header", forward_host_header)
        if hostname is not None:
            _setter("hostname", hostname)
        if http_port is not None:
            _setter("http_port", http_port)
        if https_port is not None:
            _setter("https_port", https_port)
        if ip_version is not None:
            _setter("ip_version", ip_version)
        if locked is not None:
            _setter("locked", locked)
        if mslorigin is not None:
            _setter("mslorigin", mslorigin)
        if net_storage is not None:
            _setter("net_storage", net_storage)
        if origin_certificate is not None:
            _setter("origin_certificate", origin_certificate)
        if origin_certs_to_honor is not None:
            _setter("origin_certs_to_honor", origin_certs_to_honor)
        if origin_id is not None:
            _setter("origin_id", origin_id)
        if origin_sni is not None:
            _setter("origin_sni", origin_sni)
        if origin_type is not None:
            _setter("origin_type", origin_type)
        if ports is not None:
            _setter("ports", ports)
        if saas_cname_enabled is not None:
            _setter("saas_cname_enabled", saas_cname_enabled)
        if saas_cname_level is not None:
            _setter("saas_cname_level", saas_cname_level)
        if saas_cookie is not None:
            _setter("saas_cookie", saas_cookie)
        if saas_query_string is not None:
            _setter("saas_query_string", saas_query_string)
        if saas_regex is not None:
            _setter("saas_regex", saas_regex)
        if saas_replace is not None:
            _setter("saas_replace", saas_replace)
        if saas_suffix is not None:
            _setter("saas_suffix", saas_suffix)
        if saas_type is not None:
            _setter("saas_type", saas_type)
        if second_hostname is not None:
            _setter("second_hostname", second_hostname)
        if second_hostname_enabled is not None:
            _setter("second_hostname_enabled", second_hostname_enabled)
        if standard_certificate_authorities is not None:
            _setter("standard_certificate_authorities", standard_certificate_authorities)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if true_client_ip_client_setting is not None:
            _setter("true_client_ip_client_setting", true_client_ip_client_setting)
        if true_client_ip_header is not None:
            _setter("true_client_ip_header", true_client_ip_header)
        if use_unique_cache_key is not None:
            _setter("use_unique_cache_key", use_unique_cache_key)
        if uuid is not None:
            _setter("uuid", uuid)
        if verification_mode is not None:
            _setter("verification_mode", verification_mode)

    @property
    @pulumi.getter(name="cacheKeyHostname")
    def cache_key_hostname(self) -> Optional[str]:
        return pulumi.get(self, "cache_key_hostname")

    @property
    @pulumi.getter
    def compress(self) -> Optional[bool]:
        return pulumi.get(self, "compress")

    @property
    @pulumi.getter(name="customCertificateAuthorities")
    def custom_certificate_authorities(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityResult']]:
        return pulumi.get(self, "custom_certificate_authorities")

    @property
    @pulumi.getter(name="customCertificates")
    def custom_certificates(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateResult']]:
        return pulumi.get(self, "custom_certificates")

    @property
    @pulumi.getter(name="customForwardHostHeader")
    def custom_forward_host_header(self) -> Optional[str]:
        return pulumi.get(self, "custom_forward_host_header")

    @property
    @pulumi.getter(name="customValidCnValues")
    def custom_valid_cn_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_valid_cn_values")

    @property
    @pulumi.getter(name="enableTrueClientIp")
    def enable_true_client_ip(self) -> Optional[bool]:
        return pulumi.get(self, "enable_true_client_ip")

    @property
    @pulumi.getter(name="forwardHostHeader")
    def forward_host_header(self) -> Optional[str]:
        return pulumi.get(self, "forward_host_header")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[int]:
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def mslorigin(self) -> Optional[str]:
        return pulumi.get(self, "mslorigin")

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginNetStorageResult']:
        return pulumi.get(self, "net_storage")

    @property
    @pulumi.getter(name="originCertificate")
    def origin_certificate(self) -> Optional[str]:
        return pulumi.get(self, "origin_certificate")

    @property
    @pulumi.getter(name="originCertsToHonor")
    def origin_certs_to_honor(self) -> Optional[str]:
        return pulumi.get(self, "origin_certs_to_honor")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="originSni")
    def origin_sni(self) -> Optional[bool]:
        return pulumi.get(self, "origin_sni")

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional[str]:
        return pulumi.get(self, "origin_type")

    @property
    @pulumi.getter
    def ports(self) -> Optional[str]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="saasCnameEnabled")
    def saas_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "saas_cname_enabled")

    @property
    @pulumi.getter(name="saasCnameLevel")
    def saas_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "saas_cname_level")

    @property
    @pulumi.getter(name="saasCookie")
    def saas_cookie(self) -> Optional[str]:
        return pulumi.get(self, "saas_cookie")

    @property
    @pulumi.getter(name="saasQueryString")
    def saas_query_string(self) -> Optional[str]:
        return pulumi.get(self, "saas_query_string")

    @property
    @pulumi.getter(name="saasRegex")
    def saas_regex(self) -> Optional[str]:
        return pulumi.get(self, "saas_regex")

    @property
    @pulumi.getter(name="saasReplace")
    def saas_replace(self) -> Optional[str]:
        return pulumi.get(self, "saas_replace")

    @property
    @pulumi.getter(name="saasSuffix")
    def saas_suffix(self) -> Optional[str]:
        return pulumi.get(self, "saas_suffix")

    @property
    @pulumi.getter(name="saasType")
    def saas_type(self) -> Optional[str]:
        return pulumi.get(self, "saas_type")

    @property
    @pulumi.getter(name="secondHostname")
    def second_hostname(self) -> Optional[str]:
        return pulumi.get(self, "second_hostname")

    @property
    @pulumi.getter(name="secondHostnameEnabled")
    def second_hostname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "second_hostname_enabled")

    @property
    @pulumi.getter(name="standardCertificateAuthorities")
    def standard_certificate_authorities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "standard_certificate_authorities")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="trueClientIpClientSetting")
    def true_client_ip_client_setting(self) -> Optional[bool]:
        return pulumi.get(self, "true_client_ip_client_setting")

    @property
    @pulumi.getter(name="trueClientIpHeader")
    def true_client_ip_header(self) -> Optional[str]:
        return pulumi.get(self, "true_client_ip_header")

    @property
    @pulumi.getter(name="useUniqueCacheKey")
    def use_unique_cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "use_unique_cache_key")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="verificationMode")
    def verification_mode(self) -> Optional[str]:
        return pulumi.get(self, "verification_mode")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsResult(dict):
    def __init__(__self__, *,
                 access_key_encrypted_storage: Optional[bool] = None,
                 adc_title: Optional[str] = None,
                 authentication_method: Optional[str] = None,
                 authentication_method_title: Optional[str] = None,
                 aws_access_key_id: Optional[str] = None,
                 aws_access_key_version_guid: Optional[str] = None,
                 aws_host: Optional[str] = None,
                 aws_region: Optional[str] = None,
                 aws_secret_access_key: Optional[str] = None,
                 aws_service: Optional[str] = None,
                 country: Optional[str] = None,
                 custom_sign_strings: Optional[Sequence[str]] = None,
                 direct_connect_geo: Optional[str] = None,
                 encoding_version: Optional[int] = None,
                 gcs_access_key_version_guid: Optional[str] = None,
                 gcs_hmac_key_access_id: Optional[str] = None,
                 gcs_hmac_key_secret: Optional[str] = None,
                 locked: Optional[bool] = None,
                 mslkey: Optional[str] = None,
                 mslname: Optional[str] = None,
                 nonce: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_custom_sign_string: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_key_encrypted_storage=access_key_encrypted_storage,
            adc_title=adc_title,
            authentication_method=authentication_method,
            authentication_method_title=authentication_method_title,
            aws_access_key_id=aws_access_key_id,
            aws_access_key_version_guid=aws_access_key_version_guid,
            aws_host=aws_host,
            aws_region=aws_region,
            aws_secret_access_key=aws_secret_access_key,
            aws_service=aws_service,
            country=country,
            custom_sign_strings=custom_sign_strings,
            direct_connect_geo=direct_connect_geo,
            encoding_version=encoding_version,
            gcs_access_key_version_guid=gcs_access_key_version_guid,
            gcs_hmac_key_access_id=gcs_hmac_key_access_id,
            gcs_hmac_key_secret=gcs_hmac_key_secret,
            locked=locked,
            mslkey=mslkey,
            mslname=mslname,
            nonce=nonce,
            secret_key=secret_key,
            template_uuid=template_uuid,
            use_custom_sign_string=use_custom_sign_string,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_key_encrypted_storage: Optional[bool] = None,
             adc_title: Optional[str] = None,
             authentication_method: Optional[str] = None,
             authentication_method_title: Optional[str] = None,
             aws_access_key_id: Optional[str] = None,
             aws_access_key_version_guid: Optional[str] = None,
             aws_host: Optional[str] = None,
             aws_region: Optional[str] = None,
             aws_secret_access_key: Optional[str] = None,
             aws_service: Optional[str] = None,
             country: Optional[str] = None,
             custom_sign_strings: Optional[Sequence[str]] = None,
             direct_connect_geo: Optional[str] = None,
             encoding_version: Optional[int] = None,
             gcs_access_key_version_guid: Optional[str] = None,
             gcs_hmac_key_access_id: Optional[str] = None,
             gcs_hmac_key_secret: Optional[str] = None,
             locked: Optional[bool] = None,
             mslkey: Optional[str] = None,
             mslname: Optional[str] = None,
             nonce: Optional[str] = None,
             secret_key: Optional[str] = None,
             template_uuid: Optional[str] = None,
             use_custom_sign_string: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessKeyEncryptedStorage' in kwargs:
            access_key_encrypted_storage = kwargs['accessKeyEncryptedStorage']
        if 'adcTitle' in kwargs:
            adc_title = kwargs['adcTitle']
        if 'authenticationMethod' in kwargs:
            authentication_method = kwargs['authenticationMethod']
        if 'authenticationMethodTitle' in kwargs:
            authentication_method_title = kwargs['authenticationMethodTitle']
        if 'awsAccessKeyId' in kwargs:
            aws_access_key_id = kwargs['awsAccessKeyId']
        if 'awsAccessKeyVersionGuid' in kwargs:
            aws_access_key_version_guid = kwargs['awsAccessKeyVersionGuid']
        if 'awsHost' in kwargs:
            aws_host = kwargs['awsHost']
        if 'awsRegion' in kwargs:
            aws_region = kwargs['awsRegion']
        if 'awsSecretAccessKey' in kwargs:
            aws_secret_access_key = kwargs['awsSecretAccessKey']
        if 'awsService' in kwargs:
            aws_service = kwargs['awsService']
        if 'customSignStrings' in kwargs:
            custom_sign_strings = kwargs['customSignStrings']
        if 'directConnectGeo' in kwargs:
            direct_connect_geo = kwargs['directConnectGeo']
        if 'encodingVersion' in kwargs:
            encoding_version = kwargs['encodingVersion']
        if 'gcsAccessKeyVersionGuid' in kwargs:
            gcs_access_key_version_guid = kwargs['gcsAccessKeyVersionGuid']
        if 'gcsHmacKeyAccessId' in kwargs:
            gcs_hmac_key_access_id = kwargs['gcsHmacKeyAccessId']
        if 'gcsHmacKeySecret' in kwargs:
            gcs_hmac_key_secret = kwargs['gcsHmacKeySecret']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useCustomSignString' in kwargs:
            use_custom_sign_string = kwargs['useCustomSignString']

        if access_key_encrypted_storage is not None:
            _setter("access_key_encrypted_storage", access_key_encrypted_storage)
        if adc_title is not None:
            _setter("adc_title", adc_title)
        if authentication_method is not None:
            _setter("authentication_method", authentication_method)
        if authentication_method_title is not None:
            _setter("authentication_method_title", authentication_method_title)
        if aws_access_key_id is not None:
            _setter("aws_access_key_id", aws_access_key_id)
        if aws_access_key_version_guid is not None:
            _setter("aws_access_key_version_guid", aws_access_key_version_guid)
        if aws_host is not None:
            _setter("aws_host", aws_host)
        if aws_region is not None:
            _setter("aws_region", aws_region)
        if aws_secret_access_key is not None:
            _setter("aws_secret_access_key", aws_secret_access_key)
        if aws_service is not None:
            _setter("aws_service", aws_service)
        if country is not None:
            _setter("country", country)
        if custom_sign_strings is not None:
            _setter("custom_sign_strings", custom_sign_strings)
        if direct_connect_geo is not None:
            _setter("direct_connect_geo", direct_connect_geo)
        if encoding_version is not None:
            _setter("encoding_version", encoding_version)
        if gcs_access_key_version_guid is not None:
            _setter("gcs_access_key_version_guid", gcs_access_key_version_guid)
        if gcs_hmac_key_access_id is not None:
            _setter("gcs_hmac_key_access_id", gcs_hmac_key_access_id)
        if gcs_hmac_key_secret is not None:
            _setter("gcs_hmac_key_secret", gcs_hmac_key_secret)
        if locked is not None:
            _setter("locked", locked)
        if mslkey is not None:
            _setter("mslkey", mslkey)
        if mslname is not None:
            _setter("mslname", mslname)
        if nonce is not None:
            _setter("nonce", nonce)
        if secret_key is not None:
            _setter("secret_key", secret_key)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_custom_sign_string is not None:
            _setter("use_custom_sign_string", use_custom_sign_string)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="accessKeyEncryptedStorage")
    def access_key_encrypted_storage(self) -> Optional[bool]:
        return pulumi.get(self, "access_key_encrypted_storage")

    @property
    @pulumi.getter(name="adcTitle")
    def adc_title(self) -> Optional[str]:
        return pulumi.get(self, "adc_title")

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> Optional[str]:
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter(name="authenticationMethodTitle")
    def authentication_method_title(self) -> Optional[str]:
        return pulumi.get(self, "authentication_method_title")

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsAccessKeyVersionGuid")
    def aws_access_key_version_guid(self) -> Optional[str]:
        return pulumi.get(self, "aws_access_key_version_guid")

    @property
    @pulumi.getter(name="awsHost")
    def aws_host(self) -> Optional[str]:
        return pulumi.get(self, "aws_host")

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[str]:
        return pulumi.get(self, "aws_region")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "aws_secret_access_key")

    @property
    @pulumi.getter(name="awsService")
    def aws_service(self) -> Optional[str]:
        return pulumi.get(self, "aws_service")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="customSignStrings")
    def custom_sign_strings(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_sign_strings")

    @property
    @pulumi.getter(name="directConnectGeo")
    def direct_connect_geo(self) -> Optional[str]:
        return pulumi.get(self, "direct_connect_geo")

    @property
    @pulumi.getter(name="encodingVersion")
    def encoding_version(self) -> Optional[int]:
        return pulumi.get(self, "encoding_version")

    @property
    @pulumi.getter(name="gcsAccessKeyVersionGuid")
    def gcs_access_key_version_guid(self) -> Optional[str]:
        return pulumi.get(self, "gcs_access_key_version_guid")

    @property
    @pulumi.getter(name="gcsHmacKeyAccessId")
    def gcs_hmac_key_access_id(self) -> Optional[str]:
        return pulumi.get(self, "gcs_hmac_key_access_id")

    @property
    @pulumi.getter(name="gcsHmacKeySecret")
    def gcs_hmac_key_secret(self) -> Optional[str]:
        return pulumi.get(self, "gcs_hmac_key_secret")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def mslkey(self) -> Optional[str]:
        return pulumi.get(self, "mslkey")

    @property
    @pulumi.getter
    def mslname(self) -> Optional[str]:
        return pulumi.get(self, "mslname")

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useCustomSignString")
    def use_custom_sign_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_custom_sign_string")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsWsdResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origintype: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsWsdResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            origintype=origintype,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             origintype: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if origintype is not None:
            _setter("origintype", origintype)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def origintype(self) -> Optional[str]:
        return pulumi.get(self, "origintype")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateResult(dict):
    def __init__(__self__, *,
                 can_be_ca: Optional[bool] = None,
                 can_be_leaf: Optional[bool] = None,
                 issuer_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateIssuerRdnsResult'] = None,
                 not_after: Optional[int] = None,
                 not_before: Optional[int] = None,
                 pem_encoded_cert: Optional[str] = None,
                 public_key: Optional[str] = None,
                 public_key_algorithm: Optional[str] = None,
                 public_key_format: Optional[str] = None,
                 self_signed: Optional[bool] = None,
                 serial_number: Optional[str] = None,
                 sha1_fingerprint: Optional[str] = None,
                 sig_alg_name: Optional[str] = None,
                 subject_alternative_names: Optional[Sequence[str]] = None,
                 subject_cn: Optional[str] = None,
                 subject_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateSubjectRdnsResult'] = None,
                 version: Optional[int] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            can_be_ca=can_be_ca,
            can_be_leaf=can_be_leaf,
            issuer_rdns=issuer_rdns,
            not_after=not_after,
            not_before=not_before,
            pem_encoded_cert=pem_encoded_cert,
            public_key=public_key,
            public_key_algorithm=public_key_algorithm,
            public_key_format=public_key_format,
            self_signed=self_signed,
            serial_number=serial_number,
            sha1_fingerprint=sha1_fingerprint,
            sig_alg_name=sig_alg_name,
            subject_alternative_names=subject_alternative_names,
            subject_cn=subject_cn,
            subject_rdns=subject_rdns,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             can_be_ca: Optional[bool] = None,
             can_be_leaf: Optional[bool] = None,
             issuer_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateIssuerRdnsResult'] = None,
             not_after: Optional[int] = None,
             not_before: Optional[int] = None,
             pem_encoded_cert: Optional[str] = None,
             public_key: Optional[str] = None,
             public_key_algorithm: Optional[str] = None,
             public_key_format: Optional[str] = None,
             self_signed: Optional[bool] = None,
             serial_number: Optional[str] = None,
             sha1_fingerprint: Optional[str] = None,
             sig_alg_name: Optional[str] = None,
             subject_alternative_names: Optional[Sequence[str]] = None,
             subject_cn: Optional[str] = None,
             subject_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateSubjectRdnsResult'] = None,
             version: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'canBeCa' in kwargs:
            can_be_ca = kwargs['canBeCa']
        if 'canBeLeaf' in kwargs:
            can_be_leaf = kwargs['canBeLeaf']
        if 'issuerRdns' in kwargs:
            issuer_rdns = kwargs['issuerRdns']
        if 'notAfter' in kwargs:
            not_after = kwargs['notAfter']
        if 'notBefore' in kwargs:
            not_before = kwargs['notBefore']
        if 'pemEncodedCert' in kwargs:
            pem_encoded_cert = kwargs['pemEncodedCert']
        if 'publicKey' in kwargs:
            public_key = kwargs['publicKey']
        if 'publicKeyAlgorithm' in kwargs:
            public_key_algorithm = kwargs['publicKeyAlgorithm']
        if 'publicKeyFormat' in kwargs:
            public_key_format = kwargs['publicKeyFormat']
        if 'selfSigned' in kwargs:
            self_signed = kwargs['selfSigned']
        if 'serialNumber' in kwargs:
            serial_number = kwargs['serialNumber']
        if 'sha1Fingerprint' in kwargs:
            sha1_fingerprint = kwargs['sha1Fingerprint']
        if 'sigAlgName' in kwargs:
            sig_alg_name = kwargs['sigAlgName']
        if 'subjectAlternativeNames' in kwargs:
            subject_alternative_names = kwargs['subjectAlternativeNames']
        if 'subjectCn' in kwargs:
            subject_cn = kwargs['subjectCn']
        if 'subjectRdns' in kwargs:
            subject_rdns = kwargs['subjectRdns']

        if can_be_ca is not None:
            _setter("can_be_ca", can_be_ca)
        if can_be_leaf is not None:
            _setter("can_be_leaf", can_be_leaf)
        if issuer_rdns is not None:
            _setter("issuer_rdns", issuer_rdns)
        if not_after is not None:
            _setter("not_after", not_after)
        if not_before is not None:
            _setter("not_before", not_before)
        if pem_encoded_cert is not None:
            _setter("pem_encoded_cert", pem_encoded_cert)
        if public_key is not None:
            _setter("public_key", public_key)
        if public_key_algorithm is not None:
            _setter("public_key_algorithm", public_key_algorithm)
        if public_key_format is not None:
            _setter("public_key_format", public_key_format)
        if self_signed is not None:
            _setter("self_signed", self_signed)
        if serial_number is not None:
            _setter("serial_number", serial_number)
        if sha1_fingerprint is not None:
            _setter("sha1_fingerprint", sha1_fingerprint)
        if sig_alg_name is not None:
            _setter("sig_alg_name", sig_alg_name)
        if subject_alternative_names is not None:
            _setter("subject_alternative_names", subject_alternative_names)
        if subject_cn is not None:
            _setter("subject_cn", subject_cn)
        if subject_rdns is not None:
            _setter("subject_rdns", subject_rdns)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter(name="canBeCa")
    def can_be_ca(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_ca")

    @property
    @pulumi.getter(name="canBeLeaf")
    def can_be_leaf(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_leaf")

    @property
    @pulumi.getter(name="issuerRdns")
    def issuer_rdns(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateIssuerRdnsResult']:
        return pulumi.get(self, "issuer_rdns")

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> Optional[int]:
        return pulumi.get(self, "not_after")

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[int]:
        return pulumi.get(self, "not_before")

    @property
    @pulumi.getter(name="pemEncodedCert")
    def pem_encoded_cert(self) -> Optional[str]:
        return pulumi.get(self, "pem_encoded_cert")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="publicKeyAlgorithm")
    def public_key_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "public_key_algorithm")

    @property
    @pulumi.getter(name="publicKeyFormat")
    def public_key_format(self) -> Optional[str]:
        return pulumi.get(self, "public_key_format")

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional[bool]:
        return pulumi.get(self, "self_signed")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="sha1Fingerprint")
    def sha1_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "sha1_fingerprint")

    @property
    @pulumi.getter(name="sigAlgName")
    def sig_alg_name(self) -> Optional[str]:
        return pulumi.get(self, "sig_alg_name")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter(name="subjectCn")
    def subject_cn(self) -> Optional[str]:
        return pulumi.get(self, "subject_cn")

    @property
    @pulumi.getter(name="subjectRdns")
    def subject_rdns(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateSubjectRdnsResult']:
        return pulumi.get(self, "subject_rdns")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityResult(dict):
    def __init__(__self__, *,
                 can_be_ca: Optional[bool] = None,
                 can_be_leaf: Optional[bool] = None,
                 issuer_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult'] = None,
                 not_after: Optional[int] = None,
                 not_before: Optional[int] = None,
                 pem_encoded_cert: Optional[str] = None,
                 public_key: Optional[str] = None,
                 public_key_algorithm: Optional[str] = None,
                 public_key_format: Optional[str] = None,
                 self_signed: Optional[bool] = None,
                 serial_number: Optional[str] = None,
                 sha1_fingerprint: Optional[str] = None,
                 sig_alg_name: Optional[str] = None,
                 subject_alternative_names: Optional[Sequence[str]] = None,
                 subject_cn: Optional[str] = None,
                 subject_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult'] = None,
                 version: Optional[int] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            can_be_ca=can_be_ca,
            can_be_leaf=can_be_leaf,
            issuer_rdns=issuer_rdns,
            not_after=not_after,
            not_before=not_before,
            pem_encoded_cert=pem_encoded_cert,
            public_key=public_key,
            public_key_algorithm=public_key_algorithm,
            public_key_format=public_key_format,
            self_signed=self_signed,
            serial_number=serial_number,
            sha1_fingerprint=sha1_fingerprint,
            sig_alg_name=sig_alg_name,
            subject_alternative_names=subject_alternative_names,
            subject_cn=subject_cn,
            subject_rdns=subject_rdns,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             can_be_ca: Optional[bool] = None,
             can_be_leaf: Optional[bool] = None,
             issuer_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult'] = None,
             not_after: Optional[int] = None,
             not_before: Optional[int] = None,
             pem_encoded_cert: Optional[str] = None,
             public_key: Optional[str] = None,
             public_key_algorithm: Optional[str] = None,
             public_key_format: Optional[str] = None,
             self_signed: Optional[bool] = None,
             serial_number: Optional[str] = None,
             sha1_fingerprint: Optional[str] = None,
             sig_alg_name: Optional[str] = None,
             subject_alternative_names: Optional[Sequence[str]] = None,
             subject_cn: Optional[str] = None,
             subject_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult'] = None,
             version: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'canBeCa' in kwargs:
            can_be_ca = kwargs['canBeCa']
        if 'canBeLeaf' in kwargs:
            can_be_leaf = kwargs['canBeLeaf']
        if 'issuerRdns' in kwargs:
            issuer_rdns = kwargs['issuerRdns']
        if 'notAfter' in kwargs:
            not_after = kwargs['notAfter']
        if 'notBefore' in kwargs:
            not_before = kwargs['notBefore']
        if 'pemEncodedCert' in kwargs:
            pem_encoded_cert = kwargs['pemEncodedCert']
        if 'publicKey' in kwargs:
            public_key = kwargs['publicKey']
        if 'publicKeyAlgorithm' in kwargs:
            public_key_algorithm = kwargs['publicKeyAlgorithm']
        if 'publicKeyFormat' in kwargs:
            public_key_format = kwargs['publicKeyFormat']
        if 'selfSigned' in kwargs:
            self_signed = kwargs['selfSigned']
        if 'serialNumber' in kwargs:
            serial_number = kwargs['serialNumber']
        if 'sha1Fingerprint' in kwargs:
            sha1_fingerprint = kwargs['sha1Fingerprint']
        if 'sigAlgName' in kwargs:
            sig_alg_name = kwargs['sigAlgName']
        if 'subjectAlternativeNames' in kwargs:
            subject_alternative_names = kwargs['subjectAlternativeNames']
        if 'subjectCn' in kwargs:
            subject_cn = kwargs['subjectCn']
        if 'subjectRdns' in kwargs:
            subject_rdns = kwargs['subjectRdns']

        if can_be_ca is not None:
            _setter("can_be_ca", can_be_ca)
        if can_be_leaf is not None:
            _setter("can_be_leaf", can_be_leaf)
        if issuer_rdns is not None:
            _setter("issuer_rdns", issuer_rdns)
        if not_after is not None:
            _setter("not_after", not_after)
        if not_before is not None:
            _setter("not_before", not_before)
        if pem_encoded_cert is not None:
            _setter("pem_encoded_cert", pem_encoded_cert)
        if public_key is not None:
            _setter("public_key", public_key)
        if public_key_algorithm is not None:
            _setter("public_key_algorithm", public_key_algorithm)
        if public_key_format is not None:
            _setter("public_key_format", public_key_format)
        if self_signed is not None:
            _setter("self_signed", self_signed)
        if serial_number is not None:
            _setter("serial_number", serial_number)
        if sha1_fingerprint is not None:
            _setter("sha1_fingerprint", sha1_fingerprint)
        if sig_alg_name is not None:
            _setter("sig_alg_name", sig_alg_name)
        if subject_alternative_names is not None:
            _setter("subject_alternative_names", subject_alternative_names)
        if subject_cn is not None:
            _setter("subject_cn", subject_cn)
        if subject_rdns is not None:
            _setter("subject_rdns", subject_rdns)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter(name="canBeCa")
    def can_be_ca(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_ca")

    @property
    @pulumi.getter(name="canBeLeaf")
    def can_be_leaf(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_leaf")

    @property
    @pulumi.getter(name="issuerRdns")
    def issuer_rdns(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult']:
        return pulumi.get(self, "issuer_rdns")

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> Optional[int]:
        return pulumi.get(self, "not_after")

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[int]:
        return pulumi.get(self, "not_before")

    @property
    @pulumi.getter(name="pemEncodedCert")
    def pem_encoded_cert(self) -> Optional[str]:
        return pulumi.get(self, "pem_encoded_cert")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="publicKeyAlgorithm")
    def public_key_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "public_key_algorithm")

    @property
    @pulumi.getter(name="publicKeyFormat")
    def public_key_format(self) -> Optional[str]:
        return pulumi.get(self, "public_key_format")

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional[bool]:
        return pulumi.get(self, "self_signed")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="sha1Fingerprint")
    def sha1_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "sha1_fingerprint")

    @property
    @pulumi.getter(name="sigAlgName")
    def sig_alg_name(self) -> Optional[str]:
        return pulumi.get(self, "sig_alg_name")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter(name="subjectCn")
    def subject_cn(self) -> Optional[str]:
        return pulumi.get(self, "subject_cn")

    @property
    @pulumi.getter(name="subjectRdns")
    def subject_rdns(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult']:
        return pulumi.get(self, "subject_rdns")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult(dict):
    def __init__(__self__, *,
                 c: Optional[str] = None,
                 cn: Optional[str] = None,
                 o: Optional[str] = None,
                 ou: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            c=c,
            cn=cn,
            o=o,
            ou=ou,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             c: Optional[str] = None,
             cn: Optional[str] = None,
             o: Optional[str] = None,
             ou: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if c is not None:
            _setter("c", c)
        if cn is not None:
            _setter("cn", cn)
        if o is not None:
            _setter("o", o)
        if ou is not None:
            _setter("ou", ou)

    @property
    @pulumi.getter
    def c(self) -> Optional[str]:
        return pulumi.get(self, "c")

    @property
    @pulumi.getter
    def cn(self) -> Optional[str]:
        return pulumi.get(self, "cn")

    @property
    @pulumi.getter
    def o(self) -> Optional[str]:
        return pulumi.get(self, "o")

    @property
    @pulumi.getter
    def ou(self) -> Optional[str]:
        return pulumi.get(self, "ou")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult(dict):
    def __init__(__self__, *,
                 c: Optional[str] = None,
                 cn: Optional[str] = None,
                 o: Optional[str] = None,
                 ou: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            c=c,
            cn=cn,
            o=o,
            ou=ou,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             c: Optional[str] = None,
             cn: Optional[str] = None,
             o: Optional[str] = None,
             ou: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if c is not None:
            _setter("c", c)
        if cn is not None:
            _setter("cn", cn)
        if o is not None:
            _setter("o", o)
        if ou is not None:
            _setter("ou", ou)

    @property
    @pulumi.getter
    def c(self) -> Optional[str]:
        return pulumi.get(self, "c")

    @property
    @pulumi.getter
    def cn(self) -> Optional[str]:
        return pulumi.get(self, "cn")

    @property
    @pulumi.getter
    def o(self) -> Optional[str]:
        return pulumi.get(self, "o")

    @property
    @pulumi.getter
    def ou(self) -> Optional[str]:
        return pulumi.get(self, "ou")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateIssuerRdnsResult(dict):
    def __init__(__self__, *,
                 c: Optional[str] = None,
                 cn: Optional[str] = None,
                 o: Optional[str] = None,
                 ou: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateIssuerRdnsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            c=c,
            cn=cn,
            o=o,
            ou=ou,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             c: Optional[str] = None,
             cn: Optional[str] = None,
             o: Optional[str] = None,
             ou: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if c is not None:
            _setter("c", c)
        if cn is not None:
            _setter("cn", cn)
        if o is not None:
            _setter("o", o)
        if ou is not None:
            _setter("ou", ou)

    @property
    @pulumi.getter
    def c(self) -> Optional[str]:
        return pulumi.get(self, "c")

    @property
    @pulumi.getter
    def cn(self) -> Optional[str]:
        return pulumi.get(self, "cn")

    @property
    @pulumi.getter
    def o(self) -> Optional[str]:
        return pulumi.get(self, "o")

    @property
    @pulumi.getter
    def ou(self) -> Optional[str]:
        return pulumi.get(self, "ou")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateSubjectRdnsResult(dict):
    def __init__(__self__, *,
                 c: Optional[str] = None,
                 cn: Optional[str] = None,
                 o: Optional[str] = None,
                 ou: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateSubjectRdnsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            c=c,
            cn=cn,
            o=o,
            ou=ou,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             c: Optional[str] = None,
             cn: Optional[str] = None,
             o: Optional[str] = None,
             ou: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if c is not None:
            _setter("c", c)
        if cn is not None:
            _setter("cn", cn)
        if o is not None:
            _setter("o", o)
        if ou is not None:
            _setter("ou", ou)

    @property
    @pulumi.getter
    def c(self) -> Optional[str]:
        return pulumi.get(self, "c")

    @property
    @pulumi.getter
    def cn(self) -> Optional[str]:
        return pulumi.get(self, "cn")

    @property
    @pulumi.getter
    def o(self) -> Optional[str]:
        return pulumi.get(self, "o")

    @property
    @pulumi.getter
    def ou(self) -> Optional[str]:
        return pulumi.get(self, "ou")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryMethodResult(dict):
    def __init__(__self__, *,
                 custom_status_code: Optional[str] = None,
                 locked: Optional[bool] = None,
                 recovery_method: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryMethodResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_status_code=custom_status_code,
            locked=locked,
            recovery_method=recovery_method,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_status_code: Optional[str] = None,
             locked: Optional[bool] = None,
             recovery_method: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customStatusCode' in kwargs:
            custom_status_code = kwargs['customStatusCode']
        if 'recoveryMethod' in kwargs:
            recovery_method = kwargs['recoveryMethod']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if custom_status_code is not None:
            _setter("custom_status_code", custom_status_code)
        if locked is not None:
            _setter("locked", locked)
        if recovery_method is not None:
            _setter("recovery_method", recovery_method)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="customStatusCode")
    def custom_status_code(self) -> Optional[str]:
        return pulumi.get(self, "custom_status_code")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="recoveryMethod")
    def recovery_method(self) -> Optional[str]:
        return pulumi.get(self, "recovery_method")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryPolicyResult(dict):
    def __init__(__self__, *,
                 binary_equivalent_content: Optional[bool] = None,
                 enable_ip_avoidance: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 ip_avoidance_error_threshold: Optional[int] = None,
                 ip_avoidance_retry_interval: Optional[int] = None,
                 locked: Optional[bool] = None,
                 monitor_origin_responsiveness: Optional[bool] = None,
                 monitor_response_codes1s: Optional[Sequence[str]] = None,
                 monitor_response_codes2s: Optional[Sequence[str]] = None,
                 monitor_response_codes3s: Optional[Sequence[str]] = None,
                 monitor_status_codes1: Optional[bool] = None,
                 monitor_status_codes1_enable_recovery: Optional[bool] = None,
                 monitor_status_codes1_enable_retry: Optional[bool] = None,
                 monitor_status_codes1_recovery_config_name: Optional[str] = None,
                 monitor_status_codes2: Optional[bool] = None,
                 monitor_status_codes2_enable_recovery: Optional[bool] = None,
                 monitor_status_codes2_enable_retry: Optional[bool] = None,
                 monitor_status_codes2_recovery_config_name: Optional[str] = None,
                 monitor_status_codes3: Optional[bool] = None,
                 monitor_status_codes3_enable_recovery: Optional[bool] = None,
                 monitor_status_codes3_enable_retry: Optional[bool] = None,
                 monitor_status_codes3_recovery_config_name: Optional[str] = None,
                 origin_responsiveness_custom_timeout: Optional[int] = None,
                 origin_responsiveness_enable_recovery: Optional[bool] = None,
                 origin_responsiveness_enable_retry: Optional[bool] = None,
                 origin_responsiveness_monitoring: Optional[str] = None,
                 origin_responsiveness_recovery_config_name: Optional[str] = None,
                 origin_responsiveness_timeout: Optional[str] = None,
                 status_code_monitoring1: Optional[str] = None,
                 status_code_monitoring2: Optional[str] = None,
                 status_code_monitoring3: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tuning_parameters: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            binary_equivalent_content=binary_equivalent_content,
            enable_ip_avoidance=enable_ip_avoidance,
            enabled=enabled,
            ip_avoidance_error_threshold=ip_avoidance_error_threshold,
            ip_avoidance_retry_interval=ip_avoidance_retry_interval,
            locked=locked,
            monitor_origin_responsiveness=monitor_origin_responsiveness,
            monitor_response_codes1s=monitor_response_codes1s,
            monitor_response_codes2s=monitor_response_codes2s,
            monitor_response_codes3s=monitor_response_codes3s,
            monitor_status_codes1=monitor_status_codes1,
            monitor_status_codes1_enable_recovery=monitor_status_codes1_enable_recovery,
            monitor_status_codes1_enable_retry=monitor_status_codes1_enable_retry,
            monitor_status_codes1_recovery_config_name=monitor_status_codes1_recovery_config_name,
            monitor_status_codes2=monitor_status_codes2,
            monitor_status_codes2_enable_recovery=monitor_status_codes2_enable_recovery,
            monitor_status_codes2_enable_retry=monitor_status_codes2_enable_retry,
            monitor_status_codes2_recovery_config_name=monitor_status_codes2_recovery_config_name,
            monitor_status_codes3=monitor_status_codes3,
            monitor_status_codes3_enable_recovery=monitor_status_codes3_enable_recovery,
            monitor_status_codes3_enable_retry=monitor_status_codes3_enable_retry,
            monitor_status_codes3_recovery_config_name=monitor_status_codes3_recovery_config_name,
            origin_responsiveness_custom_timeout=origin_responsiveness_custom_timeout,
            origin_responsiveness_enable_recovery=origin_responsiveness_enable_recovery,
            origin_responsiveness_enable_retry=origin_responsiveness_enable_retry,
            origin_responsiveness_monitoring=origin_responsiveness_monitoring,
            origin_responsiveness_recovery_config_name=origin_responsiveness_recovery_config_name,
            origin_responsiveness_timeout=origin_responsiveness_timeout,
            status_code_monitoring1=status_code_monitoring1,
            status_code_monitoring2=status_code_monitoring2,
            status_code_monitoring3=status_code_monitoring3,
            template_uuid=template_uuid,
            tuning_parameters=tuning_parameters,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             binary_equivalent_content: Optional[bool] = None,
             enable_ip_avoidance: Optional[bool] = None,
             enabled: Optional[bool] = None,
             ip_avoidance_error_threshold: Optional[int] = None,
             ip_avoidance_retry_interval: Optional[int] = None,
             locked: Optional[bool] = None,
             monitor_origin_responsiveness: Optional[bool] = None,
             monitor_response_codes1s: Optional[Sequence[str]] = None,
             monitor_response_codes2s: Optional[Sequence[str]] = None,
             monitor_response_codes3s: Optional[Sequence[str]] = None,
             monitor_status_codes1: Optional[bool] = None,
             monitor_status_codes1_enable_recovery: Optional[bool] = None,
             monitor_status_codes1_enable_retry: Optional[bool] = None,
             monitor_status_codes1_recovery_config_name: Optional[str] = None,
             monitor_status_codes2: Optional[bool] = None,
             monitor_status_codes2_enable_recovery: Optional[bool] = None,
             monitor_status_codes2_enable_retry: Optional[bool] = None,
             monitor_status_codes2_recovery_config_name: Optional[str] = None,
             monitor_status_codes3: Optional[bool] = None,
             monitor_status_codes3_enable_recovery: Optional[bool] = None,
             monitor_status_codes3_enable_retry: Optional[bool] = None,
             monitor_status_codes3_recovery_config_name: Optional[str] = None,
             origin_responsiveness_custom_timeout: Optional[int] = None,
             origin_responsiveness_enable_recovery: Optional[bool] = None,
             origin_responsiveness_enable_retry: Optional[bool] = None,
             origin_responsiveness_monitoring: Optional[str] = None,
             origin_responsiveness_recovery_config_name: Optional[str] = None,
             origin_responsiveness_timeout: Optional[str] = None,
             status_code_monitoring1: Optional[str] = None,
             status_code_monitoring2: Optional[str] = None,
             status_code_monitoring3: Optional[str] = None,
             template_uuid: Optional[str] = None,
             tuning_parameters: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'binaryEquivalentContent' in kwargs:
            binary_equivalent_content = kwargs['binaryEquivalentContent']
        if 'enableIpAvoidance' in kwargs:
            enable_ip_avoidance = kwargs['enableIpAvoidance']
        if 'ipAvoidanceErrorThreshold' in kwargs:
            ip_avoidance_error_threshold = kwargs['ipAvoidanceErrorThreshold']
        if 'ipAvoidanceRetryInterval' in kwargs:
            ip_avoidance_retry_interval = kwargs['ipAvoidanceRetryInterval']
        if 'monitorOriginResponsiveness' in kwargs:
            monitor_origin_responsiveness = kwargs['monitorOriginResponsiveness']
        if 'monitorResponseCodes1s' in kwargs:
            monitor_response_codes1s = kwargs['monitorResponseCodes1s']
        if 'monitorResponseCodes2s' in kwargs:
            monitor_response_codes2s = kwargs['monitorResponseCodes2s']
        if 'monitorResponseCodes3s' in kwargs:
            monitor_response_codes3s = kwargs['monitorResponseCodes3s']
        if 'monitorStatusCodes1' in kwargs:
            monitor_status_codes1 = kwargs['monitorStatusCodes1']
        if 'monitorStatusCodes1EnableRecovery' in kwargs:
            monitor_status_codes1_enable_recovery = kwargs['monitorStatusCodes1EnableRecovery']
        if 'monitorStatusCodes1EnableRetry' in kwargs:
            monitor_status_codes1_enable_retry = kwargs['monitorStatusCodes1EnableRetry']
        if 'monitorStatusCodes1RecoveryConfigName' in kwargs:
            monitor_status_codes1_recovery_config_name = kwargs['monitorStatusCodes1RecoveryConfigName']
        if 'monitorStatusCodes2' in kwargs:
            monitor_status_codes2 = kwargs['monitorStatusCodes2']
        if 'monitorStatusCodes2EnableRecovery' in kwargs:
            monitor_status_codes2_enable_recovery = kwargs['monitorStatusCodes2EnableRecovery']
        if 'monitorStatusCodes2EnableRetry' in kwargs:
            monitor_status_codes2_enable_retry = kwargs['monitorStatusCodes2EnableRetry']
        if 'monitorStatusCodes2RecoveryConfigName' in kwargs:
            monitor_status_codes2_recovery_config_name = kwargs['monitorStatusCodes2RecoveryConfigName']
        if 'monitorStatusCodes3' in kwargs:
            monitor_status_codes3 = kwargs['monitorStatusCodes3']
        if 'monitorStatusCodes3EnableRecovery' in kwargs:
            monitor_status_codes3_enable_recovery = kwargs['monitorStatusCodes3EnableRecovery']
        if 'monitorStatusCodes3EnableRetry' in kwargs:
            monitor_status_codes3_enable_retry = kwargs['monitorStatusCodes3EnableRetry']
        if 'monitorStatusCodes3RecoveryConfigName' in kwargs:
            monitor_status_codes3_recovery_config_name = kwargs['monitorStatusCodes3RecoveryConfigName']
        if 'originResponsivenessCustomTimeout' in kwargs:
            origin_responsiveness_custom_timeout = kwargs['originResponsivenessCustomTimeout']
        if 'originResponsivenessEnableRecovery' in kwargs:
            origin_responsiveness_enable_recovery = kwargs['originResponsivenessEnableRecovery']
        if 'originResponsivenessEnableRetry' in kwargs:
            origin_responsiveness_enable_retry = kwargs['originResponsivenessEnableRetry']
        if 'originResponsivenessMonitoring' in kwargs:
            origin_responsiveness_monitoring = kwargs['originResponsivenessMonitoring']
        if 'originResponsivenessRecoveryConfigName' in kwargs:
            origin_responsiveness_recovery_config_name = kwargs['originResponsivenessRecoveryConfigName']
        if 'originResponsivenessTimeout' in kwargs:
            origin_responsiveness_timeout = kwargs['originResponsivenessTimeout']
        if 'statusCodeMonitoring1' in kwargs:
            status_code_monitoring1 = kwargs['statusCodeMonitoring1']
        if 'statusCodeMonitoring2' in kwargs:
            status_code_monitoring2 = kwargs['statusCodeMonitoring2']
        if 'statusCodeMonitoring3' in kwargs:
            status_code_monitoring3 = kwargs['statusCodeMonitoring3']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'tuningParameters' in kwargs:
            tuning_parameters = kwargs['tuningParameters']

        if binary_equivalent_content is not None:
            _setter("binary_equivalent_content", binary_equivalent_content)
        if enable_ip_avoidance is not None:
            _setter("enable_ip_avoidance", enable_ip_avoidance)
        if enabled is not None:
            _setter("enabled", enabled)
        if ip_avoidance_error_threshold is not None:
            _setter("ip_avoidance_error_threshold", ip_avoidance_error_threshold)
        if ip_avoidance_retry_interval is not None:
            _setter("ip_avoidance_retry_interval", ip_avoidance_retry_interval)
        if locked is not None:
            _setter("locked", locked)
        if monitor_origin_responsiveness is not None:
            _setter("monitor_origin_responsiveness", monitor_origin_responsiveness)
        if monitor_response_codes1s is not None:
            _setter("monitor_response_codes1s", monitor_response_codes1s)
        if monitor_response_codes2s is not None:
            _setter("monitor_response_codes2s", monitor_response_codes2s)
        if monitor_response_codes3s is not None:
            _setter("monitor_response_codes3s", monitor_response_codes3s)
        if monitor_status_codes1 is not None:
            _setter("monitor_status_codes1", monitor_status_codes1)
        if monitor_status_codes1_enable_recovery is not None:
            _setter("monitor_status_codes1_enable_recovery", monitor_status_codes1_enable_recovery)
        if monitor_status_codes1_enable_retry is not None:
            _setter("monitor_status_codes1_enable_retry", monitor_status_codes1_enable_retry)
        if monitor_status_codes1_recovery_config_name is not None:
            _setter("monitor_status_codes1_recovery_config_name", monitor_status_codes1_recovery_config_name)
        if monitor_status_codes2 is not None:
            _setter("monitor_status_codes2", monitor_status_codes2)
        if monitor_status_codes2_enable_recovery is not None:
            _setter("monitor_status_codes2_enable_recovery", monitor_status_codes2_enable_recovery)
        if monitor_status_codes2_enable_retry is not None:
            _setter("monitor_status_codes2_enable_retry", monitor_status_codes2_enable_retry)
        if monitor_status_codes2_recovery_config_name is not None:
            _setter("monitor_status_codes2_recovery_config_name", monitor_status_codes2_recovery_config_name)
        if monitor_status_codes3 is not None:
            _setter("monitor_status_codes3", monitor_status_codes3)
        if monitor_status_codes3_enable_recovery is not None:
            _setter("monitor_status_codes3_enable_recovery", monitor_status_codes3_enable_recovery)
        if monitor_status_codes3_enable_retry is not None:
            _setter("monitor_status_codes3_enable_retry", monitor_status_codes3_enable_retry)
        if monitor_status_codes3_recovery_config_name is not None:
            _setter("monitor_status_codes3_recovery_config_name", monitor_status_codes3_recovery_config_name)
        if origin_responsiveness_custom_timeout is not None:
            _setter("origin_responsiveness_custom_timeout", origin_responsiveness_custom_timeout)
        if origin_responsiveness_enable_recovery is not None:
            _setter("origin_responsiveness_enable_recovery", origin_responsiveness_enable_recovery)
        if origin_responsiveness_enable_retry is not None:
            _setter("origin_responsiveness_enable_retry", origin_responsiveness_enable_retry)
        if origin_responsiveness_monitoring is not None:
            _setter("origin_responsiveness_monitoring", origin_responsiveness_monitoring)
        if origin_responsiveness_recovery_config_name is not None:
            _setter("origin_responsiveness_recovery_config_name", origin_responsiveness_recovery_config_name)
        if origin_responsiveness_timeout is not None:
            _setter("origin_responsiveness_timeout", origin_responsiveness_timeout)
        if status_code_monitoring1 is not None:
            _setter("status_code_monitoring1", status_code_monitoring1)
        if status_code_monitoring2 is not None:
            _setter("status_code_monitoring2", status_code_monitoring2)
        if status_code_monitoring3 is not None:
            _setter("status_code_monitoring3", status_code_monitoring3)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if tuning_parameters is not None:
            _setter("tuning_parameters", tuning_parameters)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="binaryEquivalentContent")
    def binary_equivalent_content(self) -> Optional[bool]:
        return pulumi.get(self, "binary_equivalent_content")

    @property
    @pulumi.getter(name="enableIpAvoidance")
    def enable_ip_avoidance(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_avoidance")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ipAvoidanceErrorThreshold")
    def ip_avoidance_error_threshold(self) -> Optional[int]:
        return pulumi.get(self, "ip_avoidance_error_threshold")

    @property
    @pulumi.getter(name="ipAvoidanceRetryInterval")
    def ip_avoidance_retry_interval(self) -> Optional[int]:
        return pulumi.get(self, "ip_avoidance_retry_interval")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="monitorOriginResponsiveness")
    def monitor_origin_responsiveness(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_origin_responsiveness")

    @property
    @pulumi.getter(name="monitorResponseCodes1s")
    def monitor_response_codes1s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes1s")

    @property
    @pulumi.getter(name="monitorResponseCodes2s")
    def monitor_response_codes2s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes2s")

    @property
    @pulumi.getter(name="monitorResponseCodes3s")
    def monitor_response_codes3s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes3s")

    @property
    @pulumi.getter(name="monitorStatusCodes1")
    def monitor_status_codes1(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1")

    @property
    @pulumi.getter(name="monitorStatusCodes1EnableRecovery")
    def monitor_status_codes1_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1_enable_recovery")

    @property
    @pulumi.getter(name="monitorStatusCodes1EnableRetry")
    def monitor_status_codes1_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1_enable_retry")

    @property
    @pulumi.getter(name="monitorStatusCodes1RecoveryConfigName")
    def monitor_status_codes1_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes1_recovery_config_name")

    @property
    @pulumi.getter(name="monitorStatusCodes2")
    def monitor_status_codes2(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2")

    @property
    @pulumi.getter(name="monitorStatusCodes2EnableRecovery")
    def monitor_status_codes2_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2_enable_recovery")

    @property
    @pulumi.getter(name="monitorStatusCodes2EnableRetry")
    def monitor_status_codes2_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2_enable_retry")

    @property
    @pulumi.getter(name="monitorStatusCodes2RecoveryConfigName")
    def monitor_status_codes2_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes2_recovery_config_name")

    @property
    @pulumi.getter(name="monitorStatusCodes3")
    def monitor_status_codes3(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3")

    @property
    @pulumi.getter(name="monitorStatusCodes3EnableRecovery")
    def monitor_status_codes3_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3_enable_recovery")

    @property
    @pulumi.getter(name="monitorStatusCodes3EnableRetry")
    def monitor_status_codes3_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3_enable_retry")

    @property
    @pulumi.getter(name="monitorStatusCodes3RecoveryConfigName")
    def monitor_status_codes3_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes3_recovery_config_name")

    @property
    @pulumi.getter(name="originResponsivenessCustomTimeout")
    def origin_responsiveness_custom_timeout(self) -> Optional[int]:
        return pulumi.get(self, "origin_responsiveness_custom_timeout")

    @property
    @pulumi.getter(name="originResponsivenessEnableRecovery")
    def origin_responsiveness_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "origin_responsiveness_enable_recovery")

    @property
    @pulumi.getter(name="originResponsivenessEnableRetry")
    def origin_responsiveness_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "origin_responsiveness_enable_retry")

    @property
    @pulumi.getter(name="originResponsivenessMonitoring")
    def origin_responsiveness_monitoring(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_monitoring")

    @property
    @pulumi.getter(name="originResponsivenessRecoveryConfigName")
    def origin_responsiveness_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_recovery_config_name")

    @property
    @pulumi.getter(name="originResponsivenessTimeout")
    def origin_responsiveness_timeout(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_timeout")

    @property
    @pulumi.getter(name="statusCodeMonitoring1")
    def status_code_monitoring1(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring1")

    @property
    @pulumi.getter(name="statusCodeMonitoring2")
    def status_code_monitoring2(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring2")

    @property
    @pulumi.getter(name="statusCodeMonitoring3")
    def status_code_monitoring3(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring3")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tuningParameters")
    def tuning_parameters(self) -> Optional[str]:
        return pulumi.get(self, "tuning_parameters")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginIpAclResult(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorOriginIpAclResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable=enable,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enable is not None:
            _setter("enable", enable)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorOriginNetStorageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code=cp_code,
            download_domain_name=download_domain_name,
            g2o_token=g2o_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code: Optional[int] = None,
             download_domain_name: Optional[str] = None,
             g2o_token: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCode' in kwargs:
            cp_code = kwargs['cpCode']
        if 'downloadDomainName' in kwargs:
            download_domain_name = kwargs['downloadDomainName']
        if 'g2oToken' in kwargs:
            g2o_token = kwargs['g2oToken']

        if cp_code is not None:
            _setter("cp_code", cp_code)
        if download_domain_name is not None:
            _setter("download_domain_name", download_domain_name)
        if g2o_token is not None:
            _setter("g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPersistentClientConnectionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorPersistentClientConnectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            timeout=timeout,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             timeout: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if timeout is not None:
            _setter("timeout", timeout)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPersistentConnectionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorPersistentConnectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            timeout=timeout,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             timeout: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if timeout is not None:
            _setter("timeout", timeout)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPersonallyIdentifiableInformationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorPersonallyIdentifiableInformationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 failover_duration: Optional[int] = None,
                 failover_enabled: Optional[bool] = None,
                 failover_response_codes: Optional[Sequence[str]] = None,
                 failover_title: Optional[str] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 population_cookie_type: Optional[str] = None,
                 population_duration: Optional[str] = None,
                 population_expiration_date: Optional[str] = None,
                 population_refresh: Optional[bool] = None,
                 population_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloudlet_policy=cloudlet_policy,
            enabled=enabled,
            failover_duration=failover_duration,
            failover_enabled=failover_enabled,
            failover_response_codes=failover_response_codes,
            failover_title=failover_title,
            label=label,
            locked=locked,
            population_cookie_type=population_cookie_type,
            population_duration=population_duration,
            population_expiration_date=population_expiration_date,
            population_refresh=population_refresh,
            population_title=population_title,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseCloudletPolicyResult'] = None,
             enabled: Optional[bool] = None,
             failover_duration: Optional[int] = None,
             failover_enabled: Optional[bool] = None,
             failover_response_codes: Optional[Sequence[str]] = None,
             failover_title: Optional[str] = None,
             label: Optional[str] = None,
             locked: Optional[bool] = None,
             population_cookie_type: Optional[str] = None,
             population_duration: Optional[str] = None,
             population_expiration_date: Optional[str] = None,
             population_refresh: Optional[bool] = None,
             population_title: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'failoverDuration' in kwargs:
            failover_duration = kwargs['failoverDuration']
        if 'failoverEnabled' in kwargs:
            failover_enabled = kwargs['failoverEnabled']
        if 'failoverResponseCodes' in kwargs:
            failover_response_codes = kwargs['failoverResponseCodes']
        if 'failoverTitle' in kwargs:
            failover_title = kwargs['failoverTitle']
        if 'populationCookieType' in kwargs:
            population_cookie_type = kwargs['populationCookieType']
        if 'populationDuration' in kwargs:
            population_duration = kwargs['populationDuration']
        if 'populationExpirationDate' in kwargs:
            population_expiration_date = kwargs['populationExpirationDate']
        if 'populationRefresh' in kwargs:
            population_refresh = kwargs['populationRefresh']
        if 'populationTitle' in kwargs:
            population_title = kwargs['populationTitle']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if failover_duration is not None:
            _setter("failover_duration", failover_duration)
        if failover_enabled is not None:
            _setter("failover_enabled", failover_enabled)
        if failover_response_codes is not None:
            _setter("failover_response_codes", failover_response_codes)
        if failover_title is not None:
            _setter("failover_title", failover_title)
        if label is not None:
            _setter("label", label)
        if locked is not None:
            _setter("locked", locked)
        if population_cookie_type is not None:
            _setter("population_cookie_type", population_cookie_type)
        if population_duration is not None:
            _setter("population_duration", population_duration)
        if population_expiration_date is not None:
            _setter("population_expiration_date", population_expiration_date)
        if population_refresh is not None:
            _setter("population_refresh", population_refresh)
        if population_title is not None:
            _setter("population_title", population_title)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failoverDuration")
    def failover_duration(self) -> Optional[int]:
        return pulumi.get(self, "failover_duration")

    @property
    @pulumi.getter(name="failoverEnabled")
    def failover_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "failover_enabled")

    @property
    @pulumi.getter(name="failoverResponseCodes")
    def failover_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "failover_response_codes")

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="populationCookieType")
    def population_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_type")

    @property
    @pulumi.getter(name="populationDuration")
    def population_duration(self) -> Optional[str]:
        return pulumi.get(self, "population_duration")

    @property
    @pulumi.getter(name="populationExpirationDate")
    def population_expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "population_expiration_date")

    @property
    @pulumi.getter(name="populationRefresh")
    def population_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "population_refresh")

    @property
    @pulumi.getter(name="populationTitle")
    def population_title(self) -> Optional[str]:
        return pulumi.get(self, "population_title")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPreconnectResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 preconnectlists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorPreconnectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            preconnectlists=preconnectlists,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             preconnectlists: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if preconnectlists is not None:
            _setter("preconnectlists", preconnectlists)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def preconnectlists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "preconnectlists")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPredictiveContentDeliveryResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorPredictiveContentDeliveryResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPredictivePrefetchingResult(dict):
    def __init__(__self__, *,
                 accuracy_target: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorPredictivePrefetchingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accuracy_target=accuracy_target,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accuracy_target: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accuracyTarget' in kwargs:
            accuracy_target = kwargs['accuracyTarget']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if accuracy_target is not None:
            _setter("accuracy_target", accuracy_target)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="accuracyTarget")
    def accuracy_target(self) -> Optional[str]:
        return pulumi.get(self, "accuracy_target")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchableResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchableResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPrefreshCacheResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 prefreshval: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorPrefreshCacheResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            prefreshval=prefreshval,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             prefreshval: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if prefreshval is not None:
            _setter("prefreshval", prefreshval)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def prefreshval(self) -> Optional[int]:
        return pulumi.get(self, "prefreshval")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorQualityResult(dict):
    def __init__(__self__, *,
                 audience_settings: Optional[str] = None,
                 catalog_size: Optional[str] = None,
                 content_settings: Optional[str] = None,
                 content_type: Optional[str] = None,
                 country: Optional[str] = None,
                 delivery_format: Optional[str] = None,
                 delivery_type: Optional[str] = None,
                 download_type: Optional[str] = None,
                 end_user_location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 maximum_concurrent_users: Optional[str] = None,
                 object_size: Optional[str] = None,
                 optimize_for: Optional[str] = None,
                 origin_settings: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 refresh_rate: Optional[str] = None,
                 segment_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorQualityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            audience_settings=audience_settings,
            catalog_size=catalog_size,
            content_settings=content_settings,
            content_type=content_type,
            country=country,
            delivery_format=delivery_format,
            delivery_type=delivery_type,
            download_type=download_type,
            end_user_location=end_user_location,
            locked=locked,
            maximum_concurrent_users=maximum_concurrent_users,
            object_size=object_size,
            optimize_for=optimize_for,
            origin_settings=origin_settings,
            popularity_distribution=popularity_distribution,
            refresh_rate=refresh_rate,
            segment_duration=segment_duration,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             audience_settings: Optional[str] = None,
             catalog_size: Optional[str] = None,
             content_settings: Optional[str] = None,
             content_type: Optional[str] = None,
             country: Optional[str] = None,
             delivery_format: Optional[str] = None,
             delivery_type: Optional[str] = None,
             download_type: Optional[str] = None,
             end_user_location: Optional[str] = None,
             locked: Optional[bool] = None,
             maximum_concurrent_users: Optional[str] = None,
             object_size: Optional[str] = None,
             optimize_for: Optional[str] = None,
             origin_settings: Optional[str] = None,
             popularity_distribution: Optional[str] = None,
             refresh_rate: Optional[str] = None,
             segment_duration: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'audienceSettings' in kwargs:
            audience_settings = kwargs['audienceSettings']
        if 'catalogSize' in kwargs:
            catalog_size = kwargs['catalogSize']
        if 'contentSettings' in kwargs:
            content_settings = kwargs['contentSettings']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'deliveryFormat' in kwargs:
            delivery_format = kwargs['deliveryFormat']
        if 'deliveryType' in kwargs:
            delivery_type = kwargs['deliveryType']
        if 'downloadType' in kwargs:
            download_type = kwargs['downloadType']
        if 'endUserLocation' in kwargs:
            end_user_location = kwargs['endUserLocation']
        if 'maximumConcurrentUsers' in kwargs:
            maximum_concurrent_users = kwargs['maximumConcurrentUsers']
        if 'objectSize' in kwargs:
            object_size = kwargs['objectSize']
        if 'optimizeFor' in kwargs:
            optimize_for = kwargs['optimizeFor']
        if 'originSettings' in kwargs:
            origin_settings = kwargs['originSettings']
        if 'popularityDistribution' in kwargs:
            popularity_distribution = kwargs['popularityDistribution']
        if 'refreshRate' in kwargs:
            refresh_rate = kwargs['refreshRate']
        if 'segmentDuration' in kwargs:
            segment_duration = kwargs['segmentDuration']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if audience_settings is not None:
            _setter("audience_settings", audience_settings)
        if catalog_size is not None:
            _setter("catalog_size", catalog_size)
        if content_settings is not None:
            _setter("content_settings", content_settings)
        if content_type is not None:
            _setter("content_type", content_type)
        if country is not None:
            _setter("country", country)
        if delivery_format is not None:
            _setter("delivery_format", delivery_format)
        if delivery_type is not None:
            _setter("delivery_type", delivery_type)
        if download_type is not None:
            _setter("download_type", download_type)
        if end_user_location is not None:
            _setter("end_user_location", end_user_location)
        if locked is not None:
            _setter("locked", locked)
        if maximum_concurrent_users is not None:
            _setter("maximum_concurrent_users", maximum_concurrent_users)
        if object_size is not None:
            _setter("object_size", object_size)
        if optimize_for is not None:
            _setter("optimize_for", optimize_for)
        if origin_settings is not None:
            _setter("origin_settings", origin_settings)
        if popularity_distribution is not None:
            _setter("popularity_distribution", popularity_distribution)
        if refresh_rate is not None:
            _setter("refresh_rate", refresh_rate)
        if segment_duration is not None:
            _setter("segment_duration", segment_duration)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="audienceSettings")
    def audience_settings(self) -> Optional[str]:
        return pulumi.get(self, "audience_settings")

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentSettings")
    def content_settings(self) -> Optional[str]:
        return pulumi.get(self, "content_settings")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="deliveryFormat")
    def delivery_format(self) -> Optional[str]:
        return pulumi.get(self, "delivery_format")

    @property
    @pulumi.getter(name="deliveryType")
    def delivery_type(self) -> Optional[str]:
        return pulumi.get(self, "delivery_type")

    @property
    @pulumi.getter(name="downloadType")
    def download_type(self) -> Optional[str]:
        return pulumi.get(self, "download_type")

    @property
    @pulumi.getter(name="endUserLocation")
    def end_user_location(self) -> Optional[str]:
        return pulumi.get(self, "end_user_location")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumConcurrentUsers")
    def maximum_concurrent_users(self) -> Optional[str]:
        return pulumi.get(self, "maximum_concurrent_users")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="optimizeFor")
    def optimize_for(self) -> Optional[str]:
        return pulumi.get(self, "optimize_for")

    @property
    @pulumi.getter(name="originSettings")
    def origin_settings(self) -> Optional[str]:
        return pulumi.get(self, "origin_settings")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[str]:
        return pulumi.get(self, "refresh_rate")

    @property
    @pulumi.getter(name="segmentDuration")
    def segment_duration(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorQuicBetaResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 quic_offer_percentage: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorQuicBetaResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            quic_offer_percentage=quic_offer_percentage,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             quic_offer_percentage: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'quicOfferPercentage' in kwargs:
            quic_offer_percentage = kwargs['quicOfferPercentage']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if quic_offer_percentage is not None:
            _setter("quic_offer_percentage", quic_offer_percentage)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="quicOfferPercentage")
    def quic_offer_percentage(self) -> Optional[int]:
        return pulumi.get(self, "quic_offer_percentage")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRandomSeekResult(dict):
    def __init__(__self__, *,
                 flv: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 mp4: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorRandomSeekResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            flv=flv,
            locked=locked,
            maximum_size=maximum_size,
            mp4=mp4,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             flv: Optional[bool] = None,
             locked: Optional[bool] = None,
             maximum_size: Optional[str] = None,
             mp4: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maximumSize' in kwargs:
            maximum_size = kwargs['maximumSize']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if flv is not None:
            _setter("flv", flv)
        if locked is not None:
            _setter("locked", locked)
        if maximum_size is not None:
            _setter("maximum_size", maximum_size)
        if mp4 is not None:
            _setter("mp4", mp4)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def flv(self) -> Optional[bool]:
        return pulumi.get(self, "flv")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @property
    @pulumi.getter
    def mp4(self) -> Optional[bool]:
        return pulumi.get(self, "mp4")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRapidResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorRapidResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorReadTimeoutResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorReadTimeoutResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRealTimeReportingResult(dict):
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 beacon_sampling_percentage: Optional[float] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorRealTimeReportingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            advanced=advanced,
            beacon_sampling_percentage=beacon_sampling_percentage,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             advanced: Optional[bool] = None,
             beacon_sampling_percentage: Optional[float] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'beaconSamplingPercentage' in kwargs:
            beacon_sampling_percentage = kwargs['beaconSamplingPercentage']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if advanced is not None:
            _setter("advanced", advanced)
        if beacon_sampling_percentage is not None:
            _setter("beacon_sampling_percentage", beacon_sampling_percentage)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="beaconSamplingPercentage")
    def beacon_sampling_percentage(self) -> Optional[float]:
        return pulumi.get(self, "beacon_sampling_percentage")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRealUserMonitoringResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorRealUserMonitoringResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRedirectResult(dict):
    def __init__(__self__, *,
                 destination_hostname: Optional[str] = None,
                 destination_hostname_other: Optional[str] = None,
                 destination_hostname_sibling: Optional[str] = None,
                 destination_hostname_subdomain: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 destination_path_other: Optional[str] = None,
                 destination_path_prefix: Optional[str] = None,
                 destination_path_suffix: Optional[str] = None,
                 destination_path_suffix_status: Optional[str] = None,
                 destination_protocol: Optional[str] = None,
                 locked: Optional[bool] = None,
                 mobile_default_choice: Optional[str] = None,
                 query_string: Optional[str] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorRedirectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_hostname=destination_hostname,
            destination_hostname_other=destination_hostname_other,
            destination_hostname_sibling=destination_hostname_sibling,
            destination_hostname_subdomain=destination_hostname_subdomain,
            destination_path=destination_path,
            destination_path_other=destination_path_other,
            destination_path_prefix=destination_path_prefix,
            destination_path_suffix=destination_path_suffix,
            destination_path_suffix_status=destination_path_suffix_status,
            destination_protocol=destination_protocol,
            locked=locked,
            mobile_default_choice=mobile_default_choice,
            query_string=query_string,
            response_code=response_code,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_hostname: Optional[str] = None,
             destination_hostname_other: Optional[str] = None,
             destination_hostname_sibling: Optional[str] = None,
             destination_hostname_subdomain: Optional[str] = None,
             destination_path: Optional[str] = None,
             destination_path_other: Optional[str] = None,
             destination_path_prefix: Optional[str] = None,
             destination_path_suffix: Optional[str] = None,
             destination_path_suffix_status: Optional[str] = None,
             destination_protocol: Optional[str] = None,
             locked: Optional[bool] = None,
             mobile_default_choice: Optional[str] = None,
             query_string: Optional[str] = None,
             response_code: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'destinationHostname' in kwargs:
            destination_hostname = kwargs['destinationHostname']
        if 'destinationHostnameOther' in kwargs:
            destination_hostname_other = kwargs['destinationHostnameOther']
        if 'destinationHostnameSibling' in kwargs:
            destination_hostname_sibling = kwargs['destinationHostnameSibling']
        if 'destinationHostnameSubdomain' in kwargs:
            destination_hostname_subdomain = kwargs['destinationHostnameSubdomain']
        if 'destinationPath' in kwargs:
            destination_path = kwargs['destinationPath']
        if 'destinationPathOther' in kwargs:
            destination_path_other = kwargs['destinationPathOther']
        if 'destinationPathPrefix' in kwargs:
            destination_path_prefix = kwargs['destinationPathPrefix']
        if 'destinationPathSuffix' in kwargs:
            destination_path_suffix = kwargs['destinationPathSuffix']
        if 'destinationPathSuffixStatus' in kwargs:
            destination_path_suffix_status = kwargs['destinationPathSuffixStatus']
        if 'destinationProtocol' in kwargs:
            destination_protocol = kwargs['destinationProtocol']
        if 'mobileDefaultChoice' in kwargs:
            mobile_default_choice = kwargs['mobileDefaultChoice']
        if 'queryString' in kwargs:
            query_string = kwargs['queryString']
        if 'responseCode' in kwargs:
            response_code = kwargs['responseCode']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if destination_hostname is not None:
            _setter("destination_hostname", destination_hostname)
        if destination_hostname_other is not None:
            _setter("destination_hostname_other", destination_hostname_other)
        if destination_hostname_sibling is not None:
            _setter("destination_hostname_sibling", destination_hostname_sibling)
        if destination_hostname_subdomain is not None:
            _setter("destination_hostname_subdomain", destination_hostname_subdomain)
        if destination_path is not None:
            _setter("destination_path", destination_path)
        if destination_path_other is not None:
            _setter("destination_path_other", destination_path_other)
        if destination_path_prefix is not None:
            _setter("destination_path_prefix", destination_path_prefix)
        if destination_path_suffix is not None:
            _setter("destination_path_suffix", destination_path_suffix)
        if destination_path_suffix_status is not None:
            _setter("destination_path_suffix_status", destination_path_suffix_status)
        if destination_protocol is not None:
            _setter("destination_protocol", destination_protocol)
        if locked is not None:
            _setter("locked", locked)
        if mobile_default_choice is not None:
            _setter("mobile_default_choice", mobile_default_choice)
        if query_string is not None:
            _setter("query_string", query_string)
        if response_code is not None:
            _setter("response_code", response_code)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="destinationHostname")
    def destination_hostname(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname")

    @property
    @pulumi.getter(name="destinationHostnameOther")
    def destination_hostname_other(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_other")

    @property
    @pulumi.getter(name="destinationHostnameSibling")
    def destination_hostname_sibling(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_sibling")

    @property
    @pulumi.getter(name="destinationHostnameSubdomain")
    def destination_hostname_subdomain(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_subdomain")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="destinationPathOther")
    def destination_path_other(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_other")

    @property
    @pulumi.getter(name="destinationPathPrefix")
    def destination_path_prefix(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_prefix")

    @property
    @pulumi.getter(name="destinationPathSuffix")
    def destination_path_suffix(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_suffix")

    @property
    @pulumi.getter(name="destinationPathSuffixStatus")
    def destination_path_suffix_status(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_suffix_status")

    @property
    @pulumi.getter(name="destinationProtocol")
    def destination_protocol(self) -> Optional[str]:
        return pulumi.get(self, "destination_protocol")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mobileDefaultChoice")
    def mobile_default_choice(self) -> Optional[str]:
        return pulumi.get(self, "mobile_default_choice")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[str]:
        return pulumi.get(self, "query_string")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRedirectplusResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorRedirectplusResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            enabled=enabled,
            locked=locked,
            response_code=response_code,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             response_code: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'responseCode' in kwargs:
            response_code = kwargs['responseCode']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if destination is not None:
            _setter("destination", destination)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if response_code is not None:
            _setter("response_code", response_code)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRefererCheckingResult(dict):
    def __init__(__self__, *,
                 allow_children: Optional[bool] = None,
                 domains: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 strict: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorRefererCheckingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_children=allow_children,
            domains=domains,
            enabled=enabled,
            locked=locked,
            strict=strict,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_children: Optional[bool] = None,
             domains: Optional[Sequence[str]] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             strict: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowChildren' in kwargs:
            allow_children = kwargs['allowChildren']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if allow_children is not None:
            _setter("allow_children", allow_children)
        if domains is not None:
            _setter("domains", domains)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if strict is not None:
            _setter("strict", strict)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowChildren")
    def allow_children(self) -> Optional[bool]:
        return pulumi.get(self, "allow_children")

    @property
    @pulumi.getter
    def domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def strict(self) -> Optional[bool]:
        return pulumi.get(self, "strict")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRemoveQueryParameterResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 parameters: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorRemoveQueryParameterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            parameters=parameters,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             parameters: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if parameters is not None:
            _setter("parameters", parameters)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRemoveVaryResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorRemoveVaryResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorReportResult(dict):
    def __init__(__self__, *,
                 cookies: Optional[Sequence[str]] = None,
                 custom_log_field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 log_accept_language: Optional[bool] = None,
                 log_cookies: Optional[str] = None,
                 log_custom_log_field: Optional[bool] = None,
                 log_edge_ip: Optional[bool] = None,
                 log_host: Optional[bool] = None,
                 log_referer: Optional[bool] = None,
                 log_user_agent: Optional[bool] = None,
                 log_x_forwarded_for: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorReportResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookies=cookies,
            custom_log_field=custom_log_field,
            locked=locked,
            log_accept_language=log_accept_language,
            log_cookies=log_cookies,
            log_custom_log_field=log_custom_log_field,
            log_edge_ip=log_edge_ip,
            log_host=log_host,
            log_referer=log_referer,
            log_user_agent=log_user_agent,
            log_x_forwarded_for=log_x_forwarded_for,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookies: Optional[Sequence[str]] = None,
             custom_log_field: Optional[str] = None,
             locked: Optional[bool] = None,
             log_accept_language: Optional[bool] = None,
             log_cookies: Optional[str] = None,
             log_custom_log_field: Optional[bool] = None,
             log_edge_ip: Optional[bool] = None,
             log_host: Optional[bool] = None,
             log_referer: Optional[bool] = None,
             log_user_agent: Optional[bool] = None,
             log_x_forwarded_for: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customLogField' in kwargs:
            custom_log_field = kwargs['customLogField']
        if 'logAcceptLanguage' in kwargs:
            log_accept_language = kwargs['logAcceptLanguage']
        if 'logCookies' in kwargs:
            log_cookies = kwargs['logCookies']
        if 'logCustomLogField' in kwargs:
            log_custom_log_field = kwargs['logCustomLogField']
        if 'logEdgeIp' in kwargs:
            log_edge_ip = kwargs['logEdgeIp']
        if 'logHost' in kwargs:
            log_host = kwargs['logHost']
        if 'logReferer' in kwargs:
            log_referer = kwargs['logReferer']
        if 'logUserAgent' in kwargs:
            log_user_agent = kwargs['logUserAgent']
        if 'logXForwardedFor' in kwargs:
            log_x_forwarded_for = kwargs['logXForwardedFor']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cookies is not None:
            _setter("cookies", cookies)
        if custom_log_field is not None:
            _setter("custom_log_field", custom_log_field)
        if locked is not None:
            _setter("locked", locked)
        if log_accept_language is not None:
            _setter("log_accept_language", log_accept_language)
        if log_cookies is not None:
            _setter("log_cookies", log_cookies)
        if log_custom_log_field is not None:
            _setter("log_custom_log_field", log_custom_log_field)
        if log_edge_ip is not None:
            _setter("log_edge_ip", log_edge_ip)
        if log_host is not None:
            _setter("log_host", log_host)
        if log_referer is not None:
            _setter("log_referer", log_referer)
        if log_user_agent is not None:
            _setter("log_user_agent", log_user_agent)
        if log_x_forwarded_for is not None:
            _setter("log_x_forwarded_for", log_x_forwarded_for)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def cookies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cookies")

    @property
    @pulumi.getter(name="customLogField")
    def custom_log_field(self) -> Optional[str]:
        return pulumi.get(self, "custom_log_field")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="logAcceptLanguage")
    def log_accept_language(self) -> Optional[bool]:
        return pulumi.get(self, "log_accept_language")

    @property
    @pulumi.getter(name="logCookies")
    def log_cookies(self) -> Optional[str]:
        return pulumi.get(self, "log_cookies")

    @property
    @pulumi.getter(name="logCustomLogField")
    def log_custom_log_field(self) -> Optional[bool]:
        return pulumi.get(self, "log_custom_log_field")

    @property
    @pulumi.getter(name="logEdgeIp")
    def log_edge_ip(self) -> Optional[bool]:
        return pulumi.get(self, "log_edge_ip")

    @property
    @pulumi.getter(name="logHost")
    def log_host(self) -> Optional[bool]:
        return pulumi.get(self, "log_host")

    @property
    @pulumi.getter(name="logReferer")
    def log_referer(self) -> Optional[bool]:
        return pulumi.get(self, "log_referer")

    @property
    @pulumi.getter(name="logUserAgent")
    def log_user_agent(self) -> Optional[bool]:
        return pulumi.get(self, "log_user_agent")

    @property
    @pulumi.getter(name="logXForwardedFor")
    def log_x_forwarded_for(self) -> Optional[bool]:
        return pulumi.get(self, "log_x_forwarded_for")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlResult(dict):
    def __init__(__self__, *,
                 branded403_file: Optional[str] = None,
                 branded403_status_code: Optional[int] = None,
                 branded403_url: Optional[str] = None,
                 branded_deny_cache_ttl: Optional[int] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlCloudletPolicyResult'] = None,
                 enable_branded403: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlNetStorageResult'] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            branded403_file=branded403_file,
            branded403_status_code=branded403_status_code,
            branded403_url=branded403_url,
            branded_deny_cache_ttl=branded_deny_cache_ttl,
            cloudlet_policy=cloudlet_policy,
            enable_branded403=enable_branded403,
            enabled=enabled,
            locked=locked,
            net_storage=net_storage,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             branded403_file: Optional[str] = None,
             branded403_status_code: Optional[int] = None,
             branded403_url: Optional[str] = None,
             branded_deny_cache_ttl: Optional[int] = None,
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlCloudletPolicyResult'] = None,
             enable_branded403: Optional[bool] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlNetStorageResult'] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'branded403File' in kwargs:
            branded403_file = kwargs['branded403File']
        if 'branded403StatusCode' in kwargs:
            branded403_status_code = kwargs['branded403StatusCode']
        if 'branded403Url' in kwargs:
            branded403_url = kwargs['branded403Url']
        if 'brandedDenyCacheTtl' in kwargs:
            branded_deny_cache_ttl = kwargs['brandedDenyCacheTtl']
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'enableBranded403' in kwargs:
            enable_branded403 = kwargs['enableBranded403']
        if 'netStorage' in kwargs:
            net_storage = kwargs['netStorage']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if branded403_file is not None:
            _setter("branded403_file", branded403_file)
        if branded403_status_code is not None:
            _setter("branded403_status_code", branded403_status_code)
        if branded403_url is not None:
            _setter("branded403_url", branded403_url)
        if branded_deny_cache_ttl is not None:
            _setter("branded_deny_cache_ttl", branded_deny_cache_ttl)
        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if enable_branded403 is not None:
            _setter("enable_branded403", enable_branded403)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if net_storage is not None:
            _setter("net_storage", net_storage)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="branded403File")
    def branded403_file(self) -> Optional[str]:
        return pulumi.get(self, "branded403_file")

    @property
    @pulumi.getter(name="branded403StatusCode")
    def branded403_status_code(self) -> Optional[int]:
        return pulumi.get(self, "branded403_status_code")

    @property
    @pulumi.getter(name="branded403Url")
    def branded403_url(self) -> Optional[str]:
        return pulumi.get(self, "branded403_url")

    @property
    @pulumi.getter(name="brandedDenyCacheTtl")
    def branded_deny_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "branded_deny_cache_ttl")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="enableBranded403")
    def enable_branded403(self) -> Optional[bool]:
        return pulumi.get(self, "enable_branded403")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlNetStorageResult']:
        return pulumi.get(self, "net_storage")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlNetStorageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code=cp_code,
            download_domain_name=download_domain_name,
            g2o_token=g2o_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code: Optional[int] = None,
             download_domain_name: Optional[str] = None,
             g2o_token: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCode' in kwargs:
            cp_code = kwargs['cpCode']
        if 'downloadDomainName' in kwargs:
            download_domain_name = kwargs['downloadDomainName']
        if 'g2oToken' in kwargs:
            g2o_token = kwargs['g2oToken']

        if cp_code is not None:
            _setter("cp_code", cp_code)
        if download_domain_name is not None:
            _setter("download_domain_name", download_domain_name)
        if g2o_token is not None:
            _setter("g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRequestTypeMarkerResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 request_type: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorRequestTypeMarkerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            request_type=request_type,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             request_type: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'requestType' in kwargs:
            request_type = kwargs['requestType']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if request_type is not None:
            _setter("request_type", request_type)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[str]:
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerExtendedCompatibilityResult(dict):
    def __init__(__self__, *,
                 enable_all_features: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerExtendedCompatibilityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_all_features=enable_all_features,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_all_features: Optional[bool] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enableAllFeatures' in kwargs:
            enable_all_features = kwargs['enableAllFeatures']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enable_all_features is not None:
            _setter("enable_all_features", enable_all_features)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="enableAllFeatures")
    def enable_all_features(self) -> Optional[bool]:
        return pulumi.get(self, "enable_all_features")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorResponseCodeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 override206: Optional[bool] = None,
                 status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorResponseCodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            override206=override206,
            status_code=status_code,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             override206: Optional[bool] = None,
             status_code: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'statusCode' in kwargs:
            status_code = kwargs['statusCode']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if override206 is not None:
            _setter("override206", override206)
        if status_code is not None:
            _setter("status_code", status_code)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def override206(self) -> Optional[bool]:
        return pulumi.get(self, "override206")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorResponseCookieResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 default_domain: Optional[bool] = None,
                 default_path: Optional[bool] = None,
                 domain: Optional[str] = None,
                 duration: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 expiration_date: Optional[str] = None,
                 expires: Optional[str] = None,
                 format: Optional[str] = None,
                 http_only: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 path: Optional[str] = None,
                 same_site: Optional[str] = None,
                 secure: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorResponseCookieResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_name=cookie_name,
            default_domain=default_domain,
            default_path=default_path,
            domain=domain,
            duration=duration,
            enabled=enabled,
            expiration_date=expiration_date,
            expires=expires,
            format=format,
            http_only=http_only,
            locked=locked,
            path=path,
            same_site=same_site,
            secure=secure,
            template_uuid=template_uuid,
            type=type,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_name: Optional[str] = None,
             default_domain: Optional[bool] = None,
             default_path: Optional[bool] = None,
             domain: Optional[str] = None,
             duration: Optional[str] = None,
             enabled: Optional[bool] = None,
             expiration_date: Optional[str] = None,
             expires: Optional[str] = None,
             format: Optional[str] = None,
             http_only: Optional[bool] = None,
             locked: Optional[bool] = None,
             path: Optional[str] = None,
             same_site: Optional[str] = None,
             secure: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cookieName' in kwargs:
            cookie_name = kwargs['cookieName']
        if 'defaultDomain' in kwargs:
            default_domain = kwargs['defaultDomain']
        if 'defaultPath' in kwargs:
            default_path = kwargs['defaultPath']
        if 'expirationDate' in kwargs:
            expiration_date = kwargs['expirationDate']
        if 'httpOnly' in kwargs:
            http_only = kwargs['httpOnly']
        if 'sameSite' in kwargs:
            same_site = kwargs['sameSite']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cookie_name is not None:
            _setter("cookie_name", cookie_name)
        if default_domain is not None:
            _setter("default_domain", default_domain)
        if default_path is not None:
            _setter("default_path", default_path)
        if domain is not None:
            _setter("domain", domain)
        if duration is not None:
            _setter("duration", duration)
        if enabled is not None:
            _setter("enabled", enabled)
        if expiration_date is not None:
            _setter("expiration_date", expiration_date)
        if expires is not None:
            _setter("expires", expires)
        if format is not None:
            _setter("format", format)
        if http_only is not None:
            _setter("http_only", http_only)
        if locked is not None:
            _setter("locked", locked)
        if path is not None:
            _setter("path", path)
        if same_site is not None:
            _setter("same_site", same_site)
        if secure is not None:
            _setter("secure", secure)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if type is not None:
            _setter("type", type)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="defaultDomain")
    def default_domain(self) -> Optional[bool]:
        return pulumi.get(self, "default_domain")

    @property
    @pulumi.getter(name="defaultPath")
    def default_path(self) -> Optional[bool]:
        return pulumi.get(self, "default_path")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter
    def expires(self) -> Optional[str]:
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="httpOnly")
    def http_only(self) -> Optional[bool]:
        return pulumi.get(self, "http_only")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="sameSite")
    def same_site(self) -> Optional[str]:
        return pulumi.get(self, "same_site")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRestrictObjectCachingResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorRestrictObjectCachingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            maximum_size=maximum_size,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             maximum_size: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maximumSize' in kwargs:
            maximum_size = kwargs['maximumSize']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if maximum_size is not None:
            _setter("maximum_size", maximum_size)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorReturnCacheStatusResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 response_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorReturnCacheStatusResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            response_header_name=response_header_name,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             response_header_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'responseHeaderName' in kwargs:
            response_header_name = kwargs['responseHeaderName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if response_header_name is not None:
            _setter("response_header_name", response_header_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="responseHeaderName")
    def response_header_name(self) -> Optional[str]:
        return pulumi.get(self, "response_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRewriteUrlResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 keep_query_string: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match: Optional[str] = None,
                 match_multiple: Optional[bool] = None,
                 match_regex: Optional[str] = None,
                 target_path: Optional[str] = None,
                 target_path_prepend: Optional[str] = None,
                 target_regex: Optional[str] = None,
                 target_url: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorRewriteUrlResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior=behavior,
            keep_query_string=keep_query_string,
            locked=locked,
            match=match,
            match_multiple=match_multiple,
            match_regex=match_regex,
            target_path=target_path,
            target_path_prepend=target_path_prepend,
            target_regex=target_regex,
            target_url=target_url,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior: Optional[str] = None,
             keep_query_string: Optional[bool] = None,
             locked: Optional[bool] = None,
             match: Optional[str] = None,
             match_multiple: Optional[bool] = None,
             match_regex: Optional[str] = None,
             target_path: Optional[str] = None,
             target_path_prepend: Optional[str] = None,
             target_regex: Optional[str] = None,
             target_url: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'keepQueryString' in kwargs:
            keep_query_string = kwargs['keepQueryString']
        if 'matchMultiple' in kwargs:
            match_multiple = kwargs['matchMultiple']
        if 'matchRegex' in kwargs:
            match_regex = kwargs['matchRegex']
        if 'targetPath' in kwargs:
            target_path = kwargs['targetPath']
        if 'targetPathPrepend' in kwargs:
            target_path_prepend = kwargs['targetPathPrepend']
        if 'targetRegex' in kwargs:
            target_regex = kwargs['targetRegex']
        if 'targetUrl' in kwargs:
            target_url = kwargs['targetUrl']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if behavior is not None:
            _setter("behavior", behavior)
        if keep_query_string is not None:
            _setter("keep_query_string", keep_query_string)
        if locked is not None:
            _setter("locked", locked)
        if match is not None:
            _setter("match", match)
        if match_multiple is not None:
            _setter("match_multiple", match_multiple)
        if match_regex is not None:
            _setter("match_regex", match_regex)
        if target_path is not None:
            _setter("target_path", target_path)
        if target_path_prepend is not None:
            _setter("target_path_prepend", target_path_prepend)
        if target_regex is not None:
            _setter("target_regex", target_regex)
        if target_url is not None:
            _setter("target_url", target_url)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter(name="keepQueryString")
    def keep_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "keep_query_string")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @property
    @pulumi.getter(name="matchRegex")
    def match_regex(self) -> Optional[str]:
        return pulumi.get(self, "match_regex")

    @property
    @pulumi.getter(name="targetPath")
    def target_path(self) -> Optional[str]:
        return pulumi.get(self, "target_path")

    @property
    @pulumi.getter(name="targetPathPrepend")
    def target_path_prepend(self) -> Optional[str]:
        return pulumi.get(self, "target_path_prepend")

    @property
    @pulumi.getter(name="targetRegex")
    def target_regex(self) -> Optional[str]:
        return pulumi.get(self, "target_regex")

    @property
    @pulumi.getter(name="targetUrl")
    def target_url(self) -> Optional[str]:
        return pulumi.get(self, "target_url")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRumCustomResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 rum_group_name: Optional[str] = None,
                 rum_sample_rate: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorRumCustomResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            rum_group_name=rum_group_name,
            rum_sample_rate=rum_sample_rate,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             rum_group_name: Optional[str] = None,
             rum_sample_rate: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rumGroupName' in kwargs:
            rum_group_name = kwargs['rumGroupName']
        if 'rumSampleRate' in kwargs:
            rum_sample_rate = kwargs['rumSampleRate']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if rum_group_name is not None:
            _setter("rum_group_name", rum_group_name)
        if rum_sample_rate is not None:
            _setter("rum_sample_rate", rum_sample_rate)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="rumGroupName")
    def rum_group_name(self) -> Optional[str]:
        return pulumi.get(self, "rum_group_name")

    @property
    @pulumi.getter(name="rumSampleRate")
    def rum_sample_rate(self) -> Optional[int]:
        return pulumi.get(self, "rum_sample_rate")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSaasDefinitionsResult(dict):
    def __init__(__self__, *,
                 application_action: Optional[str] = None,
                 application_cname_enabled: Optional[bool] = None,
                 application_cname_level: Optional[int] = None,
                 application_cookie: Optional[str] = None,
                 application_query_string: Optional[str] = None,
                 application_regex: Optional[str] = None,
                 application_replace: Optional[str] = None,
                 application_title: Optional[str] = None,
                 customer_action: Optional[str] = None,
                 customer_cname_enabled: Optional[bool] = None,
                 customer_cname_level: Optional[int] = None,
                 customer_cookie: Optional[str] = None,
                 customer_query_string: Optional[str] = None,
                 customer_regex: Optional[str] = None,
                 customer_replace: Optional[str] = None,
                 customer_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 users_action: Optional[str] = None,
                 users_cname_enabled: Optional[bool] = None,
                 users_cname_level: Optional[int] = None,
                 users_cookie: Optional[str] = None,
                 users_query_string: Optional[str] = None,
                 users_regex: Optional[str] = None,
                 users_replace: Optional[str] = None,
                 users_title: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorSaasDefinitionsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            application_action=application_action,
            application_cname_enabled=application_cname_enabled,
            application_cname_level=application_cname_level,
            application_cookie=application_cookie,
            application_query_string=application_query_string,
            application_regex=application_regex,
            application_replace=application_replace,
            application_title=application_title,
            customer_action=customer_action,
            customer_cname_enabled=customer_cname_enabled,
            customer_cname_level=customer_cname_level,
            customer_cookie=customer_cookie,
            customer_query_string=customer_query_string,
            customer_regex=customer_regex,
            customer_replace=customer_replace,
            customer_title=customer_title,
            locked=locked,
            template_uuid=template_uuid,
            users_action=users_action,
            users_cname_enabled=users_cname_enabled,
            users_cname_level=users_cname_level,
            users_cookie=users_cookie,
            users_query_string=users_query_string,
            users_regex=users_regex,
            users_replace=users_replace,
            users_title=users_title,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             application_action: Optional[str] = None,
             application_cname_enabled: Optional[bool] = None,
             application_cname_level: Optional[int] = None,
             application_cookie: Optional[str] = None,
             application_query_string: Optional[str] = None,
             application_regex: Optional[str] = None,
             application_replace: Optional[str] = None,
             application_title: Optional[str] = None,
             customer_action: Optional[str] = None,
             customer_cname_enabled: Optional[bool] = None,
             customer_cname_level: Optional[int] = None,
             customer_cookie: Optional[str] = None,
             customer_query_string: Optional[str] = None,
             customer_regex: Optional[str] = None,
             customer_replace: Optional[str] = None,
             customer_title: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             users_action: Optional[str] = None,
             users_cname_enabled: Optional[bool] = None,
             users_cname_level: Optional[int] = None,
             users_cookie: Optional[str] = None,
             users_query_string: Optional[str] = None,
             users_regex: Optional[str] = None,
             users_replace: Optional[str] = None,
             users_title: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'applicationAction' in kwargs:
            application_action = kwargs['applicationAction']
        if 'applicationCnameEnabled' in kwargs:
            application_cname_enabled = kwargs['applicationCnameEnabled']
        if 'applicationCnameLevel' in kwargs:
            application_cname_level = kwargs['applicationCnameLevel']
        if 'applicationCookie' in kwargs:
            application_cookie = kwargs['applicationCookie']
        if 'applicationQueryString' in kwargs:
            application_query_string = kwargs['applicationQueryString']
        if 'applicationRegex' in kwargs:
            application_regex = kwargs['applicationRegex']
        if 'applicationReplace' in kwargs:
            application_replace = kwargs['applicationReplace']
        if 'applicationTitle' in kwargs:
            application_title = kwargs['applicationTitle']
        if 'customerAction' in kwargs:
            customer_action = kwargs['customerAction']
        if 'customerCnameEnabled' in kwargs:
            customer_cname_enabled = kwargs['customerCnameEnabled']
        if 'customerCnameLevel' in kwargs:
            customer_cname_level = kwargs['customerCnameLevel']
        if 'customerCookie' in kwargs:
            customer_cookie = kwargs['customerCookie']
        if 'customerQueryString' in kwargs:
            customer_query_string = kwargs['customerQueryString']
        if 'customerRegex' in kwargs:
            customer_regex = kwargs['customerRegex']
        if 'customerReplace' in kwargs:
            customer_replace = kwargs['customerReplace']
        if 'customerTitle' in kwargs:
            customer_title = kwargs['customerTitle']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'usersAction' in kwargs:
            users_action = kwargs['usersAction']
        if 'usersCnameEnabled' in kwargs:
            users_cname_enabled = kwargs['usersCnameEnabled']
        if 'usersCnameLevel' in kwargs:
            users_cname_level = kwargs['usersCnameLevel']
        if 'usersCookie' in kwargs:
            users_cookie = kwargs['usersCookie']
        if 'usersQueryString' in kwargs:
            users_query_string = kwargs['usersQueryString']
        if 'usersRegex' in kwargs:
            users_regex = kwargs['usersRegex']
        if 'usersReplace' in kwargs:
            users_replace = kwargs['usersReplace']
        if 'usersTitle' in kwargs:
            users_title = kwargs['usersTitle']

        if application_action is not None:
            _setter("application_action", application_action)
        if application_cname_enabled is not None:
            _setter("application_cname_enabled", application_cname_enabled)
        if application_cname_level is not None:
            _setter("application_cname_level", application_cname_level)
        if application_cookie is not None:
            _setter("application_cookie", application_cookie)
        if application_query_string is not None:
            _setter("application_query_string", application_query_string)
        if application_regex is not None:
            _setter("application_regex", application_regex)
        if application_replace is not None:
            _setter("application_replace", application_replace)
        if application_title is not None:
            _setter("application_title", application_title)
        if customer_action is not None:
            _setter("customer_action", customer_action)
        if customer_cname_enabled is not None:
            _setter("customer_cname_enabled", customer_cname_enabled)
        if customer_cname_level is not None:
            _setter("customer_cname_level", customer_cname_level)
        if customer_cookie is not None:
            _setter("customer_cookie", customer_cookie)
        if customer_query_string is not None:
            _setter("customer_query_string", customer_query_string)
        if customer_regex is not None:
            _setter("customer_regex", customer_regex)
        if customer_replace is not None:
            _setter("customer_replace", customer_replace)
        if customer_title is not None:
            _setter("customer_title", customer_title)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if users_action is not None:
            _setter("users_action", users_action)
        if users_cname_enabled is not None:
            _setter("users_cname_enabled", users_cname_enabled)
        if users_cname_level is not None:
            _setter("users_cname_level", users_cname_level)
        if users_cookie is not None:
            _setter("users_cookie", users_cookie)
        if users_query_string is not None:
            _setter("users_query_string", users_query_string)
        if users_regex is not None:
            _setter("users_regex", users_regex)
        if users_replace is not None:
            _setter("users_replace", users_replace)
        if users_title is not None:
            _setter("users_title", users_title)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="applicationAction")
    def application_action(self) -> Optional[str]:
        return pulumi.get(self, "application_action")

    @property
    @pulumi.getter(name="applicationCnameEnabled")
    def application_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "application_cname_enabled")

    @property
    @pulumi.getter(name="applicationCnameLevel")
    def application_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "application_cname_level")

    @property
    @pulumi.getter(name="applicationCookie")
    def application_cookie(self) -> Optional[str]:
        return pulumi.get(self, "application_cookie")

    @property
    @pulumi.getter(name="applicationQueryString")
    def application_query_string(self) -> Optional[str]:
        return pulumi.get(self, "application_query_string")

    @property
    @pulumi.getter(name="applicationRegex")
    def application_regex(self) -> Optional[str]:
        return pulumi.get(self, "application_regex")

    @property
    @pulumi.getter(name="applicationReplace")
    def application_replace(self) -> Optional[str]:
        return pulumi.get(self, "application_replace")

    @property
    @pulumi.getter(name="applicationTitle")
    def application_title(self) -> Optional[str]:
        return pulumi.get(self, "application_title")

    @property
    @pulumi.getter(name="customerAction")
    def customer_action(self) -> Optional[str]:
        return pulumi.get(self, "customer_action")

    @property
    @pulumi.getter(name="customerCnameEnabled")
    def customer_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "customer_cname_enabled")

    @property
    @pulumi.getter(name="customerCnameLevel")
    def customer_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "customer_cname_level")

    @property
    @pulumi.getter(name="customerCookie")
    def customer_cookie(self) -> Optional[str]:
        return pulumi.get(self, "customer_cookie")

    @property
    @pulumi.getter(name="customerQueryString")
    def customer_query_string(self) -> Optional[str]:
        return pulumi.get(self, "customer_query_string")

    @property
    @pulumi.getter(name="customerRegex")
    def customer_regex(self) -> Optional[str]:
        return pulumi.get(self, "customer_regex")

    @property
    @pulumi.getter(name="customerReplace")
    def customer_replace(self) -> Optional[str]:
        return pulumi.get(self, "customer_replace")

    @property
    @pulumi.getter(name="customerTitle")
    def customer_title(self) -> Optional[str]:
        return pulumi.get(self, "customer_title")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="usersAction")
    def users_action(self) -> Optional[str]:
        return pulumi.get(self, "users_action")

    @property
    @pulumi.getter(name="usersCnameEnabled")
    def users_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "users_cname_enabled")

    @property
    @pulumi.getter(name="usersCnameLevel")
    def users_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "users_cname_level")

    @property
    @pulumi.getter(name="usersCookie")
    def users_cookie(self) -> Optional[str]:
        return pulumi.get(self, "users_cookie")

    @property
    @pulumi.getter(name="usersQueryString")
    def users_query_string(self) -> Optional[str]:
        return pulumi.get(self, "users_query_string")

    @property
    @pulumi.getter(name="usersRegex")
    def users_regex(self) -> Optional[str]:
        return pulumi.get(self, "users_regex")

    @property
    @pulumi.getter(name="usersReplace")
    def users_replace(self) -> Optional[str]:
        return pulumi.get(self, "users_replace")

    @property
    @pulumi.getter(name="usersTitle")
    def users_title(self) -> Optional[str]:
        return pulumi.get(self, "users_title")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudClientResult(dict):
    def __init__(__self__, *,
                 allow_override_origin_cache_key: Optional[bool] = None,
                 connector_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 origin_host_header: Optional[str] = None,
                 origin_type: Optional[str] = None,
                 sf3c_origin_host: Optional[str] = None,
                 sf3c_origin_host_header: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudClientResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_override_origin_cache_key=allow_override_origin_cache_key,
            connector_id=connector_id,
            enabled=enabled,
            locked=locked,
            origin_host_header=origin_host_header,
            origin_type=origin_type,
            sf3c_origin_host=sf3c_origin_host,
            sf3c_origin_host_header=sf3c_origin_host_header,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_override_origin_cache_key: Optional[bool] = None,
             connector_id: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             origin_host_header: Optional[str] = None,
             origin_type: Optional[str] = None,
             sf3c_origin_host: Optional[str] = None,
             sf3c_origin_host_header: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowOverrideOriginCacheKey' in kwargs:
            allow_override_origin_cache_key = kwargs['allowOverrideOriginCacheKey']
        if 'connectorId' in kwargs:
            connector_id = kwargs['connectorId']
        if 'originHostHeader' in kwargs:
            origin_host_header = kwargs['originHostHeader']
        if 'originType' in kwargs:
            origin_type = kwargs['originType']
        if 'sf3cOriginHost' in kwargs:
            sf3c_origin_host = kwargs['sf3cOriginHost']
        if 'sf3cOriginHostHeader' in kwargs:
            sf3c_origin_host_header = kwargs['sf3cOriginHostHeader']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if allow_override_origin_cache_key is not None:
            _setter("allow_override_origin_cache_key", allow_override_origin_cache_key)
        if connector_id is not None:
            _setter("connector_id", connector_id)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if origin_host_header is not None:
            _setter("origin_host_header", origin_host_header)
        if origin_type is not None:
            _setter("origin_type", origin_type)
        if sf3c_origin_host is not None:
            _setter("sf3c_origin_host", sf3c_origin_host)
        if sf3c_origin_host_header is not None:
            _setter("sf3c_origin_host_header", sf3c_origin_host_header)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowOverrideOriginCacheKey")
    def allow_override_origin_cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "allow_override_origin_cache_key")

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[str]:
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originHostHeader")
    def origin_host_header(self) -> Optional[str]:
        return pulumi.get(self, "origin_host_header")

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional[str]:
        return pulumi.get(self, "origin_type")

    @property
    @pulumi.getter(name="sf3cOriginHost")
    def sf3c_origin_host(self) -> Optional[str]:
        return pulumi.get(self, "sf3c_origin_host")

    @property
    @pulumi.getter(name="sf3cOriginHostHeader")
    def sf3c_origin_host_header(self) -> Optional[str]:
        return pulumi.get(self, "sf3c_origin_host_header")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderHostHeaderResult(dict):
    def __init__(__self__, *,
                 host_header_source: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderHostHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_header_source=host_header_source,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_header_source: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hostHeaderSource' in kwargs:
            host_header_source = kwargs['hostHeaderSource']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if host_header_source is not None:
            _setter("host_header_source", host_header_source)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="hostHeaderSource")
    def host_header_source(self) -> Optional[str]:
        return pulumi.get(self, "host_header_source")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSavePostDcaProcessingResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorSavePostDcaProcessingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorScheduleInvalidationResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 refresh_method: Optional[str] = None,
                 repeat: Optional[bool] = None,
                 repeat_interval: Optional[str] = None,
                 start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorScheduleInvalidationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            refresh_method=refresh_method,
            repeat=repeat,
            repeat_interval=repeat_interval,
            start=start,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             refresh_method: Optional[str] = None,
             repeat: Optional[bool] = None,
             repeat_interval: Optional[str] = None,
             start: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'refreshMethod' in kwargs:
            refresh_method = kwargs['refreshMethod']
        if 'repeatInterval' in kwargs:
            repeat_interval = kwargs['repeatInterval']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if refresh_method is not None:
            _setter("refresh_method", refresh_method)
        if repeat is not None:
            _setter("repeat", repeat)
        if repeat_interval is not None:
            _setter("repeat_interval", repeat_interval)
        if start is not None:
            _setter("start", start)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="refreshMethod")
    def refresh_method(self) -> Optional[str]:
        return pulumi.get(self, "refresh_method")

    @property
    @pulumi.getter
    def repeat(self) -> Optional[bool]:
        return pulumi.get(self, "repeat")

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[str]:
        return pulumi.get(self, "repeat_interval")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorScriptManagementResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 serviceworker: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 timestamp: Optional[int] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorScriptManagementResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            serviceworker=serviceworker,
            template_uuid=template_uuid,
            timestamp=timestamp,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             serviceworker: Optional[str] = None,
             template_uuid: Optional[str] = None,
             timestamp: Optional[int] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if serviceworker is not None:
            _setter("serviceworker", serviceworker)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if timestamp is not None:
            _setter("timestamp", timestamp)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def serviceworker(self) -> Optional[str]:
        return pulumi.get(self, "serviceworker")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[int]:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedContentProtectionResult(dict):
    def __init__(__self__, *,
                 acl: Optional[bool] = None,
                 dash_media_encryption: Optional[bool] = None,
                 data_payload: Optional[bool] = None,
                 enable_token_in_uri: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 field_carry_over: Optional[str] = None,
                 header_for_salts: Optional[Sequence[str]] = None,
                 hls_master_manifest_files: Optional[Sequence[str]] = None,
                 hls_media_encryption: Optional[bool] = None,
                 ip: Optional[bool] = None,
                 key: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_encryption_title: Optional[str] = None,
                 revoked_list_id: Optional[int] = None,
                 salt: Optional[str] = None,
                 session_id: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_auth_hls_title: Optional[str] = None,
                 token_authentication_title: Optional[str] = None,
                 token_revocation_enabled: Optional[bool] = None,
                 token_revocation_title: Optional[str] = None,
                 transition_key: Optional[str] = None,
                 use_advanced: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedContentProtectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acl=acl,
            dash_media_encryption=dash_media_encryption,
            data_payload=data_payload,
            enable_token_in_uri=enable_token_in_uri,
            enabled=enabled,
            field_carry_over=field_carry_over,
            header_for_salts=header_for_salts,
            hls_master_manifest_files=hls_master_manifest_files,
            hls_media_encryption=hls_media_encryption,
            ip=ip,
            key=key,
            locked=locked,
            media_encryption_title=media_encryption_title,
            revoked_list_id=revoked_list_id,
            salt=salt,
            session_id=session_id,
            template_uuid=template_uuid,
            token_auth_hls_title=token_auth_hls_title,
            token_authentication_title=token_authentication_title,
            token_revocation_enabled=token_revocation_enabled,
            token_revocation_title=token_revocation_title,
            transition_key=transition_key,
            use_advanced=use_advanced,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acl: Optional[bool] = None,
             dash_media_encryption: Optional[bool] = None,
             data_payload: Optional[bool] = None,
             enable_token_in_uri: Optional[bool] = None,
             enabled: Optional[bool] = None,
             field_carry_over: Optional[str] = None,
             header_for_salts: Optional[Sequence[str]] = None,
             hls_master_manifest_files: Optional[Sequence[str]] = None,
             hls_media_encryption: Optional[bool] = None,
             ip: Optional[bool] = None,
             key: Optional[str] = None,
             locked: Optional[bool] = None,
             media_encryption_title: Optional[str] = None,
             revoked_list_id: Optional[int] = None,
             salt: Optional[str] = None,
             session_id: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             token_auth_hls_title: Optional[str] = None,
             token_authentication_title: Optional[str] = None,
             token_revocation_enabled: Optional[bool] = None,
             token_revocation_title: Optional[str] = None,
             transition_key: Optional[str] = None,
             use_advanced: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dashMediaEncryption' in kwargs:
            dash_media_encryption = kwargs['dashMediaEncryption']
        if 'dataPayload' in kwargs:
            data_payload = kwargs['dataPayload']
        if 'enableTokenInUri' in kwargs:
            enable_token_in_uri = kwargs['enableTokenInUri']
        if 'fieldCarryOver' in kwargs:
            field_carry_over = kwargs['fieldCarryOver']
        if 'headerForSalts' in kwargs:
            header_for_salts = kwargs['headerForSalts']
        if 'hlsMasterManifestFiles' in kwargs:
            hls_master_manifest_files = kwargs['hlsMasterManifestFiles']
        if 'hlsMediaEncryption' in kwargs:
            hls_media_encryption = kwargs['hlsMediaEncryption']
        if 'mediaEncryptionTitle' in kwargs:
            media_encryption_title = kwargs['mediaEncryptionTitle']
        if 'revokedListId' in kwargs:
            revoked_list_id = kwargs['revokedListId']
        if 'sessionId' in kwargs:
            session_id = kwargs['sessionId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'tokenAuthHlsTitle' in kwargs:
            token_auth_hls_title = kwargs['tokenAuthHlsTitle']
        if 'tokenAuthenticationTitle' in kwargs:
            token_authentication_title = kwargs['tokenAuthenticationTitle']
        if 'tokenRevocationEnabled' in kwargs:
            token_revocation_enabled = kwargs['tokenRevocationEnabled']
        if 'tokenRevocationTitle' in kwargs:
            token_revocation_title = kwargs['tokenRevocationTitle']
        if 'transitionKey' in kwargs:
            transition_key = kwargs['transitionKey']
        if 'useAdvanced' in kwargs:
            use_advanced = kwargs['useAdvanced']

        if acl is not None:
            _setter("acl", acl)
        if dash_media_encryption is not None:
            _setter("dash_media_encryption", dash_media_encryption)
        if data_payload is not None:
            _setter("data_payload", data_payload)
        if enable_token_in_uri is not None:
            _setter("enable_token_in_uri", enable_token_in_uri)
        if enabled is not None:
            _setter("enabled", enabled)
        if field_carry_over is not None:
            _setter("field_carry_over", field_carry_over)
        if header_for_salts is not None:
            _setter("header_for_salts", header_for_salts)
        if hls_master_manifest_files is not None:
            _setter("hls_master_manifest_files", hls_master_manifest_files)
        if hls_media_encryption is not None:
            _setter("hls_media_encryption", hls_media_encryption)
        if ip is not None:
            _setter("ip", ip)
        if key is not None:
            _setter("key", key)
        if locked is not None:
            _setter("locked", locked)
        if media_encryption_title is not None:
            _setter("media_encryption_title", media_encryption_title)
        if revoked_list_id is not None:
            _setter("revoked_list_id", revoked_list_id)
        if salt is not None:
            _setter("salt", salt)
        if session_id is not None:
            _setter("session_id", session_id)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if token_auth_hls_title is not None:
            _setter("token_auth_hls_title", token_auth_hls_title)
        if token_authentication_title is not None:
            _setter("token_authentication_title", token_authentication_title)
        if token_revocation_enabled is not None:
            _setter("token_revocation_enabled", token_revocation_enabled)
        if token_revocation_title is not None:
            _setter("token_revocation_title", token_revocation_title)
        if transition_key is not None:
            _setter("transition_key", transition_key)
        if use_advanced is not None:
            _setter("use_advanced", use_advanced)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def acl(self) -> Optional[bool]:
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter(name="dashMediaEncryption")
    def dash_media_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "dash_media_encryption")

    @property
    @pulumi.getter(name="dataPayload")
    def data_payload(self) -> Optional[bool]:
        return pulumi.get(self, "data_payload")

    @property
    @pulumi.getter(name="enableTokenInUri")
    def enable_token_in_uri(self) -> Optional[bool]:
        return pulumi.get(self, "enable_token_in_uri")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="fieldCarryOver")
    def field_carry_over(self) -> Optional[str]:
        return pulumi.get(self, "field_carry_over")

    @property
    @pulumi.getter(name="headerForSalts")
    def header_for_salts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "header_for_salts")

    @property
    @pulumi.getter(name="hlsMasterManifestFiles")
    def hls_master_manifest_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hls_master_manifest_files")

    @property
    @pulumi.getter(name="hlsMediaEncryption")
    def hls_media_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "hls_media_encryption")

    @property
    @pulumi.getter
    def ip(self) -> Optional[bool]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mediaEncryptionTitle")
    def media_encryption_title(self) -> Optional[str]:
        return pulumi.get(self, "media_encryption_title")

    @property
    @pulumi.getter(name="revokedListId")
    def revoked_list_id(self) -> Optional[int]:
        return pulumi.get(self, "revoked_list_id")

    @property
    @pulumi.getter
    def salt(self) -> Optional[str]:
        return pulumi.get(self, "salt")

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[bool]:
        return pulumi.get(self, "session_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tokenAuthHlsTitle")
    def token_auth_hls_title(self) -> Optional[str]:
        return pulumi.get(self, "token_auth_hls_title")

    @property
    @pulumi.getter(name="tokenAuthenticationTitle")
    def token_authentication_title(self) -> Optional[str]:
        return pulumi.get(self, "token_authentication_title")

    @property
    @pulumi.getter(name="tokenRevocationEnabled")
    def token_revocation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "token_revocation_enabled")

    @property
    @pulumi.getter(name="tokenRevocationTitle")
    def token_revocation_title(self) -> Optional[str]:
        return pulumi.get(self, "token_revocation_title")

    @property
    @pulumi.getter(name="transitionKey")
    def transition_key(self) -> Optional[str]:
        return pulumi.get(self, "transition_key")

    @property
    @pulumi.getter(name="useAdvanced")
    def use_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "use_advanced")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaOptimizationResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 dvr_type: Optional[str] = None,
                 dvr_window: Optional[str] = None,
                 enable_ull_streaming: Optional[bool] = None,
                 end_time: Optional[str] = None,
                 live_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 show_advanced: Optional[bool] = None,
                 start_time: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaOptimizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior=behavior,
            dvr_type=dvr_type,
            dvr_window=dvr_window,
            enable_ull_streaming=enable_ull_streaming,
            end_time=end_time,
            live_type=live_type,
            locked=locked,
            show_advanced=show_advanced,
            start_time=start_time,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior: Optional[str] = None,
             dvr_type: Optional[str] = None,
             dvr_window: Optional[str] = None,
             enable_ull_streaming: Optional[bool] = None,
             end_time: Optional[str] = None,
             live_type: Optional[str] = None,
             locked: Optional[bool] = None,
             show_advanced: Optional[bool] = None,
             start_time: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dvrType' in kwargs:
            dvr_type = kwargs['dvrType']
        if 'dvrWindow' in kwargs:
            dvr_window = kwargs['dvrWindow']
        if 'enableUllStreaming' in kwargs:
            enable_ull_streaming = kwargs['enableUllStreaming']
        if 'endTime' in kwargs:
            end_time = kwargs['endTime']
        if 'liveType' in kwargs:
            live_type = kwargs['liveType']
        if 'showAdvanced' in kwargs:
            show_advanced = kwargs['showAdvanced']
        if 'startTime' in kwargs:
            start_time = kwargs['startTime']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if behavior is not None:
            _setter("behavior", behavior)
        if dvr_type is not None:
            _setter("dvr_type", dvr_type)
        if dvr_window is not None:
            _setter("dvr_window", dvr_window)
        if enable_ull_streaming is not None:
            _setter("enable_ull_streaming", enable_ull_streaming)
        if end_time is not None:
            _setter("end_time", end_time)
        if live_type is not None:
            _setter("live_type", live_type)
        if locked is not None:
            _setter("locked", locked)
        if show_advanced is not None:
            _setter("show_advanced", show_advanced)
        if start_time is not None:
            _setter("start_time", start_time)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter(name="dvrType")
    def dvr_type(self) -> Optional[str]:
        return pulumi.get(self, "dvr_type")

    @property
    @pulumi.getter(name="dvrWindow")
    def dvr_window(self) -> Optional[str]:
        return pulumi.get(self, "dvr_window")

    @property
    @pulumi.getter(name="enableUllStreaming")
    def enable_ull_streaming(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ull_streaming")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="liveType")
    def live_type(self) -> Optional[str]:
        return pulumi.get(self, "live_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="showAdvanced")
    def show_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "show_advanced")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaStreamingPrefetchResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaStreamingPrefetchResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSetVariableResult(dict):
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 case_sensitive: Optional[bool] = None,
                 certificate_field_name: Optional[str] = None,
                 cookie_name: Optional[str] = None,
                 device_profile: Optional[str] = None,
                 encryption_key: Optional[str] = None,
                 encryption_mode: Optional[str] = None,
                 end_index: Optional[str] = None,
                 except_chars: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 force_chars: Optional[str] = None,
                 format_string: Optional[str] = None,
                 generator: Optional[str] = None,
                 global_substitution: Optional[bool] = None,
                 header_name: Optional[str] = None,
                 hmac_algorithm: Optional[str] = None,
                 hmac_key: Optional[str] = None,
                 initialization_vector: Optional[str] = None,
                 ip_version: Optional[str] = None,
                 ipv4_prefix: Optional[int] = None,
                 ipv6_prefix: Optional[int] = None,
                 location_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 max: Optional[int] = None,
                 max_random_number: Optional[str] = None,
                 min: Optional[int] = None,
                 min_random_number: Optional[str] = None,
                 nonce: Optional[str] = None,
                 number_of_bytes: Optional[int] = None,
                 operand_one: Optional[str] = None,
                 param_name: Optional[str] = None,
                 path_component_offset: Optional[str] = None,
                 prepend_bytes: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex: Optional[str] = None,
                 replacement: Optional[str] = None,
                 response_header_name: Optional[str] = None,
                 separator: Optional[str] = None,
                 set_cookie_name: Optional[str] = None,
                 start_index: Optional[str] = None,
                 sub_string: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 transform: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value_source: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 variable_value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorSetVariableResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            algorithm=algorithm,
            case_sensitive=case_sensitive,
            certificate_field_name=certificate_field_name,
            cookie_name=cookie_name,
            device_profile=device_profile,
            encryption_key=encryption_key,
            encryption_mode=encryption_mode,
            end_index=end_index,
            except_chars=except_chars,
            extract_location=extract_location,
            force_chars=force_chars,
            format_string=format_string,
            generator=generator,
            global_substitution=global_substitution,
            header_name=header_name,
            hmac_algorithm=hmac_algorithm,
            hmac_key=hmac_key,
            initialization_vector=initialization_vector,
            ip_version=ip_version,
            ipv4_prefix=ipv4_prefix,
            ipv6_prefix=ipv6_prefix,
            location_id=location_id,
            locked=locked,
            max=max,
            max_random_number=max_random_number,
            min=min,
            min_random_number=min_random_number,
            nonce=nonce,
            number_of_bytes=number_of_bytes,
            operand_one=operand_one,
            param_name=param_name,
            path_component_offset=path_component_offset,
            prepend_bytes=prepend_bytes,
            query_parameter_name=query_parameter_name,
            regex=regex,
            replacement=replacement,
            response_header_name=response_header_name,
            separator=separator,
            set_cookie_name=set_cookie_name,
            start_index=start_index,
            sub_string=sub_string,
            template_uuid=template_uuid,
            transform=transform,
            uuid=uuid,
            value_source=value_source,
            variable_name=variable_name,
            variable_value=variable_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             algorithm: Optional[str] = None,
             case_sensitive: Optional[bool] = None,
             certificate_field_name: Optional[str] = None,
             cookie_name: Optional[str] = None,
             device_profile: Optional[str] = None,
             encryption_key: Optional[str] = None,
             encryption_mode: Optional[str] = None,
             end_index: Optional[str] = None,
             except_chars: Optional[str] = None,
             extract_location: Optional[str] = None,
             force_chars: Optional[str] = None,
             format_string: Optional[str] = None,
             generator: Optional[str] = None,
             global_substitution: Optional[bool] = None,
             header_name: Optional[str] = None,
             hmac_algorithm: Optional[str] = None,
             hmac_key: Optional[str] = None,
             initialization_vector: Optional[str] = None,
             ip_version: Optional[str] = None,
             ipv4_prefix: Optional[int] = None,
             ipv6_prefix: Optional[int] = None,
             location_id: Optional[str] = None,
             locked: Optional[bool] = None,
             max: Optional[int] = None,
             max_random_number: Optional[str] = None,
             min: Optional[int] = None,
             min_random_number: Optional[str] = None,
             nonce: Optional[str] = None,
             number_of_bytes: Optional[int] = None,
             operand_one: Optional[str] = None,
             param_name: Optional[str] = None,
             path_component_offset: Optional[str] = None,
             prepend_bytes: Optional[bool] = None,
             query_parameter_name: Optional[str] = None,
             regex: Optional[str] = None,
             replacement: Optional[str] = None,
             response_header_name: Optional[str] = None,
             separator: Optional[str] = None,
             set_cookie_name: Optional[str] = None,
             start_index: Optional[str] = None,
             sub_string: Optional[str] = None,
             template_uuid: Optional[str] = None,
             transform: Optional[str] = None,
             uuid: Optional[str] = None,
             value_source: Optional[str] = None,
             variable_name: Optional[str] = None,
             variable_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'caseSensitive' in kwargs:
            case_sensitive = kwargs['caseSensitive']
        if 'certificateFieldName' in kwargs:
            certificate_field_name = kwargs['certificateFieldName']
        if 'cookieName' in kwargs:
            cookie_name = kwargs['cookieName']
        if 'deviceProfile' in kwargs:
            device_profile = kwargs['deviceProfile']
        if 'encryptionKey' in kwargs:
            encryption_key = kwargs['encryptionKey']
        if 'encryptionMode' in kwargs:
            encryption_mode = kwargs['encryptionMode']
        if 'endIndex' in kwargs:
            end_index = kwargs['endIndex']
        if 'exceptChars' in kwargs:
            except_chars = kwargs['exceptChars']
        if 'extractLocation' in kwargs:
            extract_location = kwargs['extractLocation']
        if 'forceChars' in kwargs:
            force_chars = kwargs['forceChars']
        if 'formatString' in kwargs:
            format_string = kwargs['formatString']
        if 'globalSubstitution' in kwargs:
            global_substitution = kwargs['globalSubstitution']
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'hmacAlgorithm' in kwargs:
            hmac_algorithm = kwargs['hmacAlgorithm']
        if 'hmacKey' in kwargs:
            hmac_key = kwargs['hmacKey']
        if 'initializationVector' in kwargs:
            initialization_vector = kwargs['initializationVector']
        if 'ipVersion' in kwargs:
            ip_version = kwargs['ipVersion']
        if 'ipv4Prefix' in kwargs:
            ipv4_prefix = kwargs['ipv4Prefix']
        if 'ipv6Prefix' in kwargs:
            ipv6_prefix = kwargs['ipv6Prefix']
        if 'locationId' in kwargs:
            location_id = kwargs['locationId']
        if 'maxRandomNumber' in kwargs:
            max_random_number = kwargs['maxRandomNumber']
        if 'minRandomNumber' in kwargs:
            min_random_number = kwargs['minRandomNumber']
        if 'numberOfBytes' in kwargs:
            number_of_bytes = kwargs['numberOfBytes']
        if 'operandOne' in kwargs:
            operand_one = kwargs['operandOne']
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'pathComponentOffset' in kwargs:
            path_component_offset = kwargs['pathComponentOffset']
        if 'prependBytes' in kwargs:
            prepend_bytes = kwargs['prependBytes']
        if 'queryParameterName' in kwargs:
            query_parameter_name = kwargs['queryParameterName']
        if 'responseHeaderName' in kwargs:
            response_header_name = kwargs['responseHeaderName']
        if 'setCookieName' in kwargs:
            set_cookie_name = kwargs['setCookieName']
        if 'startIndex' in kwargs:
            start_index = kwargs['startIndex']
        if 'subString' in kwargs:
            sub_string = kwargs['subString']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'valueSource' in kwargs:
            value_source = kwargs['valueSource']
        if 'variableName' in kwargs:
            variable_name = kwargs['variableName']
        if 'variableValue' in kwargs:
            variable_value = kwargs['variableValue']

        if algorithm is not None:
            _setter("algorithm", algorithm)
        if case_sensitive is not None:
            _setter("case_sensitive", case_sensitive)
        if certificate_field_name is not None:
            _setter("certificate_field_name", certificate_field_name)
        if cookie_name is not None:
            _setter("cookie_name", cookie_name)
        if device_profile is not None:
            _setter("device_profile", device_profile)
        if encryption_key is not None:
            _setter("encryption_key", encryption_key)
        if encryption_mode is not None:
            _setter("encryption_mode", encryption_mode)
        if end_index is not None:
            _setter("end_index", end_index)
        if except_chars is not None:
            _setter("except_chars", except_chars)
        if extract_location is not None:
            _setter("extract_location", extract_location)
        if force_chars is not None:
            _setter("force_chars", force_chars)
        if format_string is not None:
            _setter("format_string", format_string)
        if generator is not None:
            _setter("generator", generator)
        if global_substitution is not None:
            _setter("global_substitution", global_substitution)
        if header_name is not None:
            _setter("header_name", header_name)
        if hmac_algorithm is not None:
            _setter("hmac_algorithm", hmac_algorithm)
        if hmac_key is not None:
            _setter("hmac_key", hmac_key)
        if initialization_vector is not None:
            _setter("initialization_vector", initialization_vector)
        if ip_version is not None:
            _setter("ip_version", ip_version)
        if ipv4_prefix is not None:
            _setter("ipv4_prefix", ipv4_prefix)
        if ipv6_prefix is not None:
            _setter("ipv6_prefix", ipv6_prefix)
        if location_id is not None:
            _setter("location_id", location_id)
        if locked is not None:
            _setter("locked", locked)
        if max is not None:
            _setter("max", max)
        if max_random_number is not None:
            _setter("max_random_number", max_random_number)
        if min is not None:
            _setter("min", min)
        if min_random_number is not None:
            _setter("min_random_number", min_random_number)
        if nonce is not None:
            _setter("nonce", nonce)
        if number_of_bytes is not None:
            _setter("number_of_bytes", number_of_bytes)
        if operand_one is not None:
            _setter("operand_one", operand_one)
        if param_name is not None:
            _setter("param_name", param_name)
        if path_component_offset is not None:
            _setter("path_component_offset", path_component_offset)
        if prepend_bytes is not None:
            _setter("prepend_bytes", prepend_bytes)
        if query_parameter_name is not None:
            _setter("query_parameter_name", query_parameter_name)
        if regex is not None:
            _setter("regex", regex)
        if replacement is not None:
            _setter("replacement", replacement)
        if response_header_name is not None:
            _setter("response_header_name", response_header_name)
        if separator is not None:
            _setter("separator", separator)
        if set_cookie_name is not None:
            _setter("set_cookie_name", set_cookie_name)
        if start_index is not None:
            _setter("start_index", start_index)
        if sub_string is not None:
            _setter("sub_string", sub_string)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if transform is not None:
            _setter("transform", transform)
        if uuid is not None:
            _setter("uuid", uuid)
        if value_source is not None:
            _setter("value_source", value_source)
        if variable_name is not None:
            _setter("variable_name", variable_name)
        if variable_value is not None:
            _setter("variable_value", variable_value)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="certificateFieldName")
    def certificate_field_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_field_name")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="deviceProfile")
    def device_profile(self) -> Optional[str]:
        return pulumi.get(self, "device_profile")

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[str]:
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter(name="encryptionMode")
    def encryption_mode(self) -> Optional[str]:
        return pulumi.get(self, "encryption_mode")

    @property
    @pulumi.getter(name="endIndex")
    def end_index(self) -> Optional[str]:
        return pulumi.get(self, "end_index")

    @property
    @pulumi.getter(name="exceptChars")
    def except_chars(self) -> Optional[str]:
        return pulumi.get(self, "except_chars")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="forceChars")
    def force_chars(self) -> Optional[str]:
        return pulumi.get(self, "force_chars")

    @property
    @pulumi.getter(name="formatString")
    def format_string(self) -> Optional[str]:
        return pulumi.get(self, "format_string")

    @property
    @pulumi.getter
    def generator(self) -> Optional[str]:
        return pulumi.get(self, "generator")

    @property
    @pulumi.getter(name="globalSubstitution")
    def global_substitution(self) -> Optional[bool]:
        return pulumi.get(self, "global_substitution")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="hmacAlgorithm")
    def hmac_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hmac_algorithm")

    @property
    @pulumi.getter(name="hmacKey")
    def hmac_key(self) -> Optional[str]:
        return pulumi.get(self, "hmac_key")

    @property
    @pulumi.getter(name="initializationVector")
    def initialization_vector(self) -> Optional[str]:
        return pulumi.get(self, "initialization_vector")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="ipv4Prefix")
    def ipv4_prefix(self) -> Optional[int]:
        return pulumi.get(self, "ipv4_prefix")

    @property
    @pulumi.getter(name="ipv6Prefix")
    def ipv6_prefix(self) -> Optional[int]:
        return pulumi.get(self, "ipv6_prefix")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[str]:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter(name="maxRandomNumber")
    def max_random_number(self) -> Optional[str]:
        return pulumi.get(self, "max_random_number")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="minRandomNumber")
    def min_random_number(self) -> Optional[str]:
        return pulumi.get(self, "min_random_number")

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @property
    @pulumi.getter(name="numberOfBytes")
    def number_of_bytes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_bytes")

    @property
    @pulumi.getter(name="operandOne")
    def operand_one(self) -> Optional[str]:
        return pulumi.get(self, "operand_one")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="pathComponentOffset")
    def path_component_offset(self) -> Optional[str]:
        return pulumi.get(self, "path_component_offset")

    @property
    @pulumi.getter(name="prependBytes")
    def prepend_bytes(self) -> Optional[bool]:
        return pulumi.get(self, "prepend_bytes")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def replacement(self) -> Optional[str]:
        return pulumi.get(self, "replacement")

    @property
    @pulumi.getter(name="responseHeaderName")
    def response_header_name(self) -> Optional[str]:
        return pulumi.get(self, "response_header_name")

    @property
    @pulumi.getter
    def separator(self) -> Optional[str]:
        return pulumi.get(self, "separator")

    @property
    @pulumi.getter(name="setCookieName")
    def set_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "set_cookie_name")

    @property
    @pulumi.getter(name="startIndex")
    def start_index(self) -> Optional[str]:
        return pulumi.get(self, "start_index")

    @property
    @pulumi.getter(name="subString")
    def sub_string(self) -> Optional[str]:
        return pulumi.get(self, "sub_string")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def transform(self) -> Optional[str]:
        return pulumi.get(self, "transform")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="valueSource")
    def value_source(self) -> Optional[str]:
        return pulumi.get(self, "value_source")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @property
    @pulumi.getter(name="variableValue")
    def variable_value(self) -> Optional[str]:
        return pulumi.get(self, "variable_value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorShutrResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 status: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorShutrResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            status=status,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             status: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if status is not None:
            _setter("status", status)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSimulateErrorCodeResult(dict):
    def __init__(__self__, *,
                 error_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorSimulateErrorCodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            error_type=error_type,
            locked=locked,
            template_uuid=template_uuid,
            timeout=timeout,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             error_type: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             timeout: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'errorType' in kwargs:
            error_type = kwargs['errorType']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if error_type is not None:
            _setter("error_type", error_type)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if timeout is not None:
            _setter("timeout", timeout)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> Optional[str]:
        return pulumi.get(self, "error_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 nossmap: Optional[str] = None,
                 ssmap: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldSsmapResult'] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            nossmap=nossmap,
            ssmap=ssmap,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             nossmap: Optional[str] = None,
             ssmap: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldSsmapResult'] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if nossmap is not None:
            _setter("nossmap", nossmap)
        if ssmap is not None:
            _setter("ssmap", ssmap)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def nossmap(self) -> Optional[str]:
        return pulumi.get(self, "nossmap")

    @property
    @pulumi.getter
    def ssmap(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldSsmapResult']:
        return pulumi.get(self, "ssmap")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldSsmapResult(dict):
    def __init__(__self__, *,
                 china_cdn_map: Optional[str] = None,
                 has_mixed_hosts: Optional[bool] = None,
                 name: Optional[str] = None,
                 src: Optional[str] = None,
                 srmap: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldSsmapResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            china_cdn_map=china_cdn_map,
            has_mixed_hosts=has_mixed_hosts,
            name=name,
            src=src,
            srmap=srmap,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             china_cdn_map: Optional[str] = None,
             has_mixed_hosts: Optional[bool] = None,
             name: Optional[str] = None,
             src: Optional[str] = None,
             srmap: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'chinaCdnMap' in kwargs:
            china_cdn_map = kwargs['chinaCdnMap']
        if 'hasMixedHosts' in kwargs:
            has_mixed_hosts = kwargs['hasMixedHosts']

        if china_cdn_map is not None:
            _setter("china_cdn_map", china_cdn_map)
        if has_mixed_hosts is not None:
            _setter("has_mixed_hosts", has_mixed_hosts)
        if name is not None:
            _setter("name", name)
        if src is not None:
            _setter("src", src)
        if srmap is not None:
            _setter("srmap", srmap)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="chinaCdnMap")
    def china_cdn_map(self) -> Optional[str]:
        return pulumi.get(self, "china_cdn_map")

    @property
    @pulumi.getter(name="hasMixedHosts")
    def has_mixed_hosts(self) -> Optional[bool]:
        return pulumi.get(self, "has_mixed_hosts")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def src(self) -> Optional[str]:
        return pulumi.get(self, "src")

    @property
    @pulumi.getter
    def srmap(self) -> Optional[str]:
        return pulumi.get(self, "srmap")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationResult(dict):
    def __init__(__self__, *,
                 allow_https_downgrade: Optional[bool] = None,
                 allow_https_upgrade: Optional[bool] = None,
                 cache_sharing_duration: Optional[int] = None,
                 cache_sharing_start_time: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 is_certificate_sni_only: Optional[bool] = None,
                 is_tiered_distribution_used: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 migration_duration: Optional[int] = None,
                 migration_from: Optional[str] = None,
                 migration_start_time: Optional[str] = None,
                 td_location: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_https_downgrade=allow_https_downgrade,
            allow_https_upgrade=allow_https_upgrade,
            cache_sharing_duration=cache_sharing_duration,
            cache_sharing_start_time=cache_sharing_start_time,
            enabled=enabled,
            is_certificate_sni_only=is_certificate_sni_only,
            is_tiered_distribution_used=is_tiered_distribution_used,
            locked=locked,
            migration_duration=migration_duration,
            migration_from=migration_from,
            migration_start_time=migration_start_time,
            td_location=td_location,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_https_downgrade: Optional[bool] = None,
             allow_https_upgrade: Optional[bool] = None,
             cache_sharing_duration: Optional[int] = None,
             cache_sharing_start_time: Optional[str] = None,
             enabled: Optional[bool] = None,
             is_certificate_sni_only: Optional[bool] = None,
             is_tiered_distribution_used: Optional[bool] = None,
             locked: Optional[bool] = None,
             migration_duration: Optional[int] = None,
             migration_from: Optional[str] = None,
             migration_start_time: Optional[str] = None,
             td_location: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowHttpsDowngrade' in kwargs:
            allow_https_downgrade = kwargs['allowHttpsDowngrade']
        if 'allowHttpsUpgrade' in kwargs:
            allow_https_upgrade = kwargs['allowHttpsUpgrade']
        if 'cacheSharingDuration' in kwargs:
            cache_sharing_duration = kwargs['cacheSharingDuration']
        if 'cacheSharingStartTime' in kwargs:
            cache_sharing_start_time = kwargs['cacheSharingStartTime']
        if 'isCertificateSniOnly' in kwargs:
            is_certificate_sni_only = kwargs['isCertificateSniOnly']
        if 'isTieredDistributionUsed' in kwargs:
            is_tiered_distribution_used = kwargs['isTieredDistributionUsed']
        if 'migrationDuration' in kwargs:
            migration_duration = kwargs['migrationDuration']
        if 'migrationFrom' in kwargs:
            migration_from = kwargs['migrationFrom']
        if 'migrationStartTime' in kwargs:
            migration_start_time = kwargs['migrationStartTime']
        if 'tdLocation' in kwargs:
            td_location = kwargs['tdLocation']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if allow_https_downgrade is not None:
            _setter("allow_https_downgrade", allow_https_downgrade)
        if allow_https_upgrade is not None:
            _setter("allow_https_upgrade", allow_https_upgrade)
        if cache_sharing_duration is not None:
            _setter("cache_sharing_duration", cache_sharing_duration)
        if cache_sharing_start_time is not None:
            _setter("cache_sharing_start_time", cache_sharing_start_time)
        if enabled is not None:
            _setter("enabled", enabled)
        if is_certificate_sni_only is not None:
            _setter("is_certificate_sni_only", is_certificate_sni_only)
        if is_tiered_distribution_used is not None:
            _setter("is_tiered_distribution_used", is_tiered_distribution_used)
        if locked is not None:
            _setter("locked", locked)
        if migration_duration is not None:
            _setter("migration_duration", migration_duration)
        if migration_from is not None:
            _setter("migration_from", migration_from)
        if migration_start_time is not None:
            _setter("migration_start_time", migration_start_time)
        if td_location is not None:
            _setter("td_location", td_location)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowHttpsDowngrade")
    def allow_https_downgrade(self) -> Optional[bool]:
        return pulumi.get(self, "allow_https_downgrade")

    @property
    @pulumi.getter(name="allowHttpsUpgrade")
    def allow_https_upgrade(self) -> Optional[bool]:
        return pulumi.get(self, "allow_https_upgrade")

    @property
    @pulumi.getter(name="cacheSharingDuration")
    def cache_sharing_duration(self) -> Optional[int]:
        return pulumi.get(self, "cache_sharing_duration")

    @property
    @pulumi.getter(name="cacheSharingStartTime")
    def cache_sharing_start_time(self) -> Optional[str]:
        return pulumi.get(self, "cache_sharing_start_time")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isCertificateSniOnly")
    def is_certificate_sni_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_certificate_sni_only")

    @property
    @pulumi.getter(name="isTieredDistributionUsed")
    def is_tiered_distribution_used(self) -> Optional[bool]:
        return pulumi.get(self, "is_tiered_distribution_used")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="migrationDuration")
    def migration_duration(self) -> Optional[int]:
        return pulumi.get(self, "migration_duration")

    @property
    @pulumi.getter(name="migrationFrom")
    def migration_from(self) -> Optional[str]:
        return pulumi.get(self, "migration_from")

    @property
    @pulumi.getter(name="migrationStartTime")
    def migration_start_time(self) -> Optional[str]:
        return pulumi.get(self, "migration_start_time")

    @property
    @pulumi.getter(name="tdLocation")
    def td_location(self) -> Optional[str]:
        return pulumi.get(self, "td_location")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationOverrideResult(dict):
    def __init__(__self__, *,
                 info: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationOverrideResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info=info,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if info is not None:
            _setter("info", info)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def info(self) -> Optional[str]:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorStrictHeaderParsingResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 strict_mode: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 valid_mode: Optional[bool] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorStrictHeaderParsingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            strict_mode=strict_mode,
            template_uuid=template_uuid,
            uuid=uuid,
            valid_mode=valid_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             strict_mode: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             valid_mode: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'strictMode' in kwargs:
            strict_mode = kwargs['strictMode']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'validMode' in kwargs:
            valid_mode = kwargs['validMode']

        if locked is not None:
            _setter("locked", locked)
        if strict_mode is not None:
            _setter("strict_mode", strict_mode)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if valid_mode is not None:
            _setter("valid_mode", valid_mode)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="strictMode")
    def strict_mode(self) -> Optional[bool]:
        return pulumi.get(self, "strict_mode")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="validMode")
    def valid_mode(self) -> Optional[bool]:
        return pulumi.get(self, "valid_mode")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSubCustomerResult(dict):
    def __init__(__self__, *,
                 access_control: Optional[bool] = None,
                 cache_key: Optional[bool] = None,
                 caching: Optional[bool] = None,
                 content_compressor: Optional[bool] = None,
                 dynamic_web_content: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 geo_location: Optional[bool] = None,
                 ip: Optional[bool] = None,
                 large_file_delivery: Optional[bool] = None,
                 live_video_delivery: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modify_path: Optional[bool] = None,
                 on_demand_video_delivery: Optional[bool] = None,
                 origin: Optional[bool] = None,
                 partner_domain_suffix: Optional[str] = None,
                 referrer: Optional[bool] = None,
                 refresh_content: Optional[bool] = None,
                 site_failover: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_authorization: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 web_application_firewall: Optional[bool] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorSubCustomerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_control=access_control,
            cache_key=cache_key,
            caching=caching,
            content_compressor=content_compressor,
            dynamic_web_content=dynamic_web_content,
            enabled=enabled,
            geo_location=geo_location,
            ip=ip,
            large_file_delivery=large_file_delivery,
            live_video_delivery=live_video_delivery,
            locked=locked,
            modify_path=modify_path,
            on_demand_video_delivery=on_demand_video_delivery,
            origin=origin,
            partner_domain_suffix=partner_domain_suffix,
            referrer=referrer,
            refresh_content=refresh_content,
            site_failover=site_failover,
            template_uuid=template_uuid,
            token_authorization=token_authorization,
            uuid=uuid,
            web_application_firewall=web_application_firewall,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_control: Optional[bool] = None,
             cache_key: Optional[bool] = None,
             caching: Optional[bool] = None,
             content_compressor: Optional[bool] = None,
             dynamic_web_content: Optional[bool] = None,
             enabled: Optional[bool] = None,
             geo_location: Optional[bool] = None,
             ip: Optional[bool] = None,
             large_file_delivery: Optional[bool] = None,
             live_video_delivery: Optional[bool] = None,
             locked: Optional[bool] = None,
             modify_path: Optional[bool] = None,
             on_demand_video_delivery: Optional[bool] = None,
             origin: Optional[bool] = None,
             partner_domain_suffix: Optional[str] = None,
             referrer: Optional[bool] = None,
             refresh_content: Optional[bool] = None,
             site_failover: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             token_authorization: Optional[bool] = None,
             uuid: Optional[str] = None,
             web_application_firewall: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessControl' in kwargs:
            access_control = kwargs['accessControl']
        if 'cacheKey' in kwargs:
            cache_key = kwargs['cacheKey']
        if 'contentCompressor' in kwargs:
            content_compressor = kwargs['contentCompressor']
        if 'dynamicWebContent' in kwargs:
            dynamic_web_content = kwargs['dynamicWebContent']
        if 'geoLocation' in kwargs:
            geo_location = kwargs['geoLocation']
        if 'largeFileDelivery' in kwargs:
            large_file_delivery = kwargs['largeFileDelivery']
        if 'liveVideoDelivery' in kwargs:
            live_video_delivery = kwargs['liveVideoDelivery']
        if 'modifyPath' in kwargs:
            modify_path = kwargs['modifyPath']
        if 'onDemandVideoDelivery' in kwargs:
            on_demand_video_delivery = kwargs['onDemandVideoDelivery']
        if 'partnerDomainSuffix' in kwargs:
            partner_domain_suffix = kwargs['partnerDomainSuffix']
        if 'refreshContent' in kwargs:
            refresh_content = kwargs['refreshContent']
        if 'siteFailover' in kwargs:
            site_failover = kwargs['siteFailover']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'tokenAuthorization' in kwargs:
            token_authorization = kwargs['tokenAuthorization']
        if 'webApplicationFirewall' in kwargs:
            web_application_firewall = kwargs['webApplicationFirewall']

        if access_control is not None:
            _setter("access_control", access_control)
        if cache_key is not None:
            _setter("cache_key", cache_key)
        if caching is not None:
            _setter("caching", caching)
        if content_compressor is not None:
            _setter("content_compressor", content_compressor)
        if dynamic_web_content is not None:
            _setter("dynamic_web_content", dynamic_web_content)
        if enabled is not None:
            _setter("enabled", enabled)
        if geo_location is not None:
            _setter("geo_location", geo_location)
        if ip is not None:
            _setter("ip", ip)
        if large_file_delivery is not None:
            _setter("large_file_delivery", large_file_delivery)
        if live_video_delivery is not None:
            _setter("live_video_delivery", live_video_delivery)
        if locked is not None:
            _setter("locked", locked)
        if modify_path is not None:
            _setter("modify_path", modify_path)
        if on_demand_video_delivery is not None:
            _setter("on_demand_video_delivery", on_demand_video_delivery)
        if origin is not None:
            _setter("origin", origin)
        if partner_domain_suffix is not None:
            _setter("partner_domain_suffix", partner_domain_suffix)
        if referrer is not None:
            _setter("referrer", referrer)
        if refresh_content is not None:
            _setter("refresh_content", refresh_content)
        if site_failover is not None:
            _setter("site_failover", site_failover)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if token_authorization is not None:
            _setter("token_authorization", token_authorization)
        if uuid is not None:
            _setter("uuid", uuid)
        if web_application_firewall is not None:
            _setter("web_application_firewall", web_application_firewall)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> Optional[bool]:
        return pulumi.get(self, "access_control")

    @property
    @pulumi.getter(name="cacheKey")
    def cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "cache_key")

    @property
    @pulumi.getter
    def caching(self) -> Optional[bool]:
        return pulumi.get(self, "caching")

    @property
    @pulumi.getter(name="contentCompressor")
    def content_compressor(self) -> Optional[bool]:
        return pulumi.get(self, "content_compressor")

    @property
    @pulumi.getter(name="dynamicWebContent")
    def dynamic_web_content(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_web_content")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="geoLocation")
    def geo_location(self) -> Optional[bool]:
        return pulumi.get(self, "geo_location")

    @property
    @pulumi.getter
    def ip(self) -> Optional[bool]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="largeFileDelivery")
    def large_file_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "large_file_delivery")

    @property
    @pulumi.getter(name="liveVideoDelivery")
    def live_video_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "live_video_delivery")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="modifyPath")
    def modify_path(self) -> Optional[bool]:
        return pulumi.get(self, "modify_path")

    @property
    @pulumi.getter(name="onDemandVideoDelivery")
    def on_demand_video_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "on_demand_video_delivery")

    @property
    @pulumi.getter
    def origin(self) -> Optional[bool]:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="partnerDomainSuffix")
    def partner_domain_suffix(self) -> Optional[str]:
        return pulumi.get(self, "partner_domain_suffix")

    @property
    @pulumi.getter
    def referrer(self) -> Optional[bool]:
        return pulumi.get(self, "referrer")

    @property
    @pulumi.getter(name="refreshContent")
    def refresh_content(self) -> Optional[bool]:
        return pulumi.get(self, "refresh_content")

    @property
    @pulumi.getter(name="siteFailover")
    def site_failover(self) -> Optional[bool]:
        return pulumi.get(self, "site_failover")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tokenAuthorization")
    def token_authorization(self) -> Optional[bool]:
        return pulumi.get(self, "token_authorization")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="webApplicationFirewall")
    def web_application_firewall(self) -> Optional[bool]:
        return pulumi.get(self, "web_application_firewall")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSureRouteResult(dict):
    def __init__(__self__, *,
                 allow_fcm_parent_override: Optional[bool] = None,
                 custom_map: Optional[str] = None,
                 custom_stat_key: Optional[str] = None,
                 enable_custom_key: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 force_ssl_forward: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 race_stat_ttl: Optional[str] = None,
                 sr_download_link_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 test_object_url: Optional[str] = None,
                 to_host: Optional[str] = None,
                 to_host_status: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorSureRouteResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_fcm_parent_override=allow_fcm_parent_override,
            custom_map=custom_map,
            custom_stat_key=custom_stat_key,
            enable_custom_key=enable_custom_key,
            enabled=enabled,
            force_ssl_forward=force_ssl_forward,
            locked=locked,
            race_stat_ttl=race_stat_ttl,
            sr_download_link_title=sr_download_link_title,
            template_uuid=template_uuid,
            test_object_url=test_object_url,
            to_host=to_host,
            to_host_status=to_host_status,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_fcm_parent_override: Optional[bool] = None,
             custom_map: Optional[str] = None,
             custom_stat_key: Optional[str] = None,
             enable_custom_key: Optional[bool] = None,
             enabled: Optional[bool] = None,
             force_ssl_forward: Optional[bool] = None,
             locked: Optional[bool] = None,
             race_stat_ttl: Optional[str] = None,
             sr_download_link_title: Optional[str] = None,
             template_uuid: Optional[str] = None,
             test_object_url: Optional[str] = None,
             to_host: Optional[str] = None,
             to_host_status: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowFcmParentOverride' in kwargs:
            allow_fcm_parent_override = kwargs['allowFcmParentOverride']
        if 'customMap' in kwargs:
            custom_map = kwargs['customMap']
        if 'customStatKey' in kwargs:
            custom_stat_key = kwargs['customStatKey']
        if 'enableCustomKey' in kwargs:
            enable_custom_key = kwargs['enableCustomKey']
        if 'forceSslForward' in kwargs:
            force_ssl_forward = kwargs['forceSslForward']
        if 'raceStatTtl' in kwargs:
            race_stat_ttl = kwargs['raceStatTtl']
        if 'srDownloadLinkTitle' in kwargs:
            sr_download_link_title = kwargs['srDownloadLinkTitle']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'testObjectUrl' in kwargs:
            test_object_url = kwargs['testObjectUrl']
        if 'toHost' in kwargs:
            to_host = kwargs['toHost']
        if 'toHostStatus' in kwargs:
            to_host_status = kwargs['toHostStatus']

        if allow_fcm_parent_override is not None:
            _setter("allow_fcm_parent_override", allow_fcm_parent_override)
        if custom_map is not None:
            _setter("custom_map", custom_map)
        if custom_stat_key is not None:
            _setter("custom_stat_key", custom_stat_key)
        if enable_custom_key is not None:
            _setter("enable_custom_key", enable_custom_key)
        if enabled is not None:
            _setter("enabled", enabled)
        if force_ssl_forward is not None:
            _setter("force_ssl_forward", force_ssl_forward)
        if locked is not None:
            _setter("locked", locked)
        if race_stat_ttl is not None:
            _setter("race_stat_ttl", race_stat_ttl)
        if sr_download_link_title is not None:
            _setter("sr_download_link_title", sr_download_link_title)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if test_object_url is not None:
            _setter("test_object_url", test_object_url)
        if to_host is not None:
            _setter("to_host", to_host)
        if to_host_status is not None:
            _setter("to_host_status", to_host_status)
        if type is not None:
            _setter("type", type)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowFcmParentOverride")
    def allow_fcm_parent_override(self) -> Optional[bool]:
        return pulumi.get(self, "allow_fcm_parent_override")

    @property
    @pulumi.getter(name="customMap")
    def custom_map(self) -> Optional[str]:
        return pulumi.get(self, "custom_map")

    @property
    @pulumi.getter(name="customStatKey")
    def custom_stat_key(self) -> Optional[str]:
        return pulumi.get(self, "custom_stat_key")

    @property
    @pulumi.getter(name="enableCustomKey")
    def enable_custom_key(self) -> Optional[bool]:
        return pulumi.get(self, "enable_custom_key")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forceSslForward")
    def force_ssl_forward(self) -> Optional[bool]:
        return pulumi.get(self, "force_ssl_forward")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="raceStatTtl")
    def race_stat_ttl(self) -> Optional[str]:
        return pulumi.get(self, "race_stat_ttl")

    @property
    @pulumi.getter(name="srDownloadLinkTitle")
    def sr_download_link_title(self) -> Optional[str]:
        return pulumi.get(self, "sr_download_link_title")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="testObjectUrl")
    def test_object_url(self) -> Optional[str]:
        return pulumi.get(self, "test_object_url")

    @property
    @pulumi.getter(name="toHost")
    def to_host(self) -> Optional[str]:
        return pulumi.get(self, "to_host")

    @property
    @pulumi.getter(name="toHostStatus")
    def to_host_status(self) -> Optional[str]:
        return pulumi.get(self, "to_host_status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTcpOptimizationResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorTcpOptimizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display=display,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if display is not None:
            _setter("display", display)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTeaLeafResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ibm_customer_id: Optional[int] = None,
                 limit_to_dynamic: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorTeaLeafResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            ibm_customer_id=ibm_customer_id,
            limit_to_dynamic=limit_to_dynamic,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             ibm_customer_id: Optional[int] = None,
             limit_to_dynamic: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ibmCustomerId' in kwargs:
            ibm_customer_id = kwargs['ibmCustomerId']
        if 'limitToDynamic' in kwargs:
            limit_to_dynamic = kwargs['limitToDynamic']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if ibm_customer_id is not None:
            _setter("ibm_customer_id", ibm_customer_id)
        if limit_to_dynamic is not None:
            _setter("limit_to_dynamic", limit_to_dynamic)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ibmCustomerId")
    def ibm_customer_id(self) -> Optional[int]:
        return pulumi.get(self, "ibm_customer_id")

    @property
    @pulumi.getter(name="limitToDynamic")
    def limit_to_dynamic(self) -> Optional[bool]:
        return pulumi.get(self, "limit_to_dynamic")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tiered_distribution_map: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            tiered_distribution_map=tiered_distribution_map,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             tiered_distribution_map: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'tieredDistributionMap' in kwargs:
            tiered_distribution_map = kwargs['tieredDistributionMap']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if tiered_distribution_map is not None:
            _setter("tiered_distribution_map", tiered_distribution_map)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tieredDistributionMap")
    def tiered_distribution_map(self) -> Optional[str]:
        return pulumi.get(self, "tiered_distribution_map")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionAdvancedResult(dict):
    def __init__(__self__, *,
                 allowall: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 method: Optional[str] = None,
                 policy: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tiered_distribution_map: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionAdvancedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowall=allowall,
            enabled=enabled,
            locked=locked,
            method=method,
            policy=policy,
            template_uuid=template_uuid,
            tiered_distribution_map=tiered_distribution_map,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowall: Optional[bool] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             method: Optional[str] = None,
             policy: Optional[str] = None,
             template_uuid: Optional[str] = None,
             tiered_distribution_map: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'tieredDistributionMap' in kwargs:
            tiered_distribution_map = kwargs['tieredDistributionMap']

        if allowall is not None:
            _setter("allowall", allowall)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if method is not None:
            _setter("method", method)
        if policy is not None:
            _setter("policy", policy)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if tiered_distribution_map is not None:
            _setter("tiered_distribution_map", tiered_distribution_map)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def allowall(self) -> Optional[bool]:
        return pulumi.get(self, "allowall")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tieredDistributionMap")
    def tiered_distribution_map(self) -> Optional[str]:
        return pulumi.get(self, "tiered_distribution_map")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionCustomizationResult(dict):
    def __init__(__self__, *,
                 cloudwrapper_map_migration_title: Optional[str] = None,
                 custom_map_enabled: Optional[bool] = None,
                 custom_map_name: Optional[str] = None,
                 hash_algorithm: Optional[str] = None,
                 location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 map_migration_enabled: Optional[bool] = None,
                 migration_end_date: Optional[str] = None,
                 migration_start_date: Optional[str] = None,
                 migration_within_cw_maps_enabled: Optional[bool] = None,
                 serial_end: Optional[str] = None,
                 serial_start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tier1_title: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionCustomizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloudwrapper_map_migration_title=cloudwrapper_map_migration_title,
            custom_map_enabled=custom_map_enabled,
            custom_map_name=custom_map_name,
            hash_algorithm=hash_algorithm,
            location=location,
            locked=locked,
            map_migration_enabled=map_migration_enabled,
            migration_end_date=migration_end_date,
            migration_start_date=migration_start_date,
            migration_within_cw_maps_enabled=migration_within_cw_maps_enabled,
            serial_end=serial_end,
            serial_start=serial_start,
            template_uuid=template_uuid,
            tier1_title=tier1_title,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloudwrapper_map_migration_title: Optional[str] = None,
             custom_map_enabled: Optional[bool] = None,
             custom_map_name: Optional[str] = None,
             hash_algorithm: Optional[str] = None,
             location: Optional[str] = None,
             locked: Optional[bool] = None,
             map_migration_enabled: Optional[bool] = None,
             migration_end_date: Optional[str] = None,
             migration_start_date: Optional[str] = None,
             migration_within_cw_maps_enabled: Optional[bool] = None,
             serial_end: Optional[str] = None,
             serial_start: Optional[str] = None,
             template_uuid: Optional[str] = None,
             tier1_title: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudwrapperMapMigrationTitle' in kwargs:
            cloudwrapper_map_migration_title = kwargs['cloudwrapperMapMigrationTitle']
        if 'customMapEnabled' in kwargs:
            custom_map_enabled = kwargs['customMapEnabled']
        if 'customMapName' in kwargs:
            custom_map_name = kwargs['customMapName']
        if 'hashAlgorithm' in kwargs:
            hash_algorithm = kwargs['hashAlgorithm']
        if 'mapMigrationEnabled' in kwargs:
            map_migration_enabled = kwargs['mapMigrationEnabled']
        if 'migrationEndDate' in kwargs:
            migration_end_date = kwargs['migrationEndDate']
        if 'migrationStartDate' in kwargs:
            migration_start_date = kwargs['migrationStartDate']
        if 'migrationWithinCwMapsEnabled' in kwargs:
            migration_within_cw_maps_enabled = kwargs['migrationWithinCwMapsEnabled']
        if 'serialEnd' in kwargs:
            serial_end = kwargs['serialEnd']
        if 'serialStart' in kwargs:
            serial_start = kwargs['serialStart']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'tier1Title' in kwargs:
            tier1_title = kwargs['tier1Title']

        if cloudwrapper_map_migration_title is not None:
            _setter("cloudwrapper_map_migration_title", cloudwrapper_map_migration_title)
        if custom_map_enabled is not None:
            _setter("custom_map_enabled", custom_map_enabled)
        if custom_map_name is not None:
            _setter("custom_map_name", custom_map_name)
        if hash_algorithm is not None:
            _setter("hash_algorithm", hash_algorithm)
        if location is not None:
            _setter("location", location)
        if locked is not None:
            _setter("locked", locked)
        if map_migration_enabled is not None:
            _setter("map_migration_enabled", map_migration_enabled)
        if migration_end_date is not None:
            _setter("migration_end_date", migration_end_date)
        if migration_start_date is not None:
            _setter("migration_start_date", migration_start_date)
        if migration_within_cw_maps_enabled is not None:
            _setter("migration_within_cw_maps_enabled", migration_within_cw_maps_enabled)
        if serial_end is not None:
            _setter("serial_end", serial_end)
        if serial_start is not None:
            _setter("serial_start", serial_start)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if tier1_title is not None:
            _setter("tier1_title", tier1_title)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cloudwrapperMapMigrationTitle")
    def cloudwrapper_map_migration_title(self) -> Optional[str]:
        return pulumi.get(self, "cloudwrapper_map_migration_title")

    @property
    @pulumi.getter(name="customMapEnabled")
    def custom_map_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "custom_map_enabled")

    @property
    @pulumi.getter(name="customMapName")
    def custom_map_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_map_name")

    @property
    @pulumi.getter(name="hashAlgorithm")
    def hash_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hash_algorithm")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mapMigrationEnabled")
    def map_migration_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "map_migration_enabled")

    @property
    @pulumi.getter(name="migrationEndDate")
    def migration_end_date(self) -> Optional[str]:
        return pulumi.get(self, "migration_end_date")

    @property
    @pulumi.getter(name="migrationStartDate")
    def migration_start_date(self) -> Optional[str]:
        return pulumi.get(self, "migration_start_date")

    @property
    @pulumi.getter(name="migrationWithinCwMapsEnabled")
    def migration_within_cw_maps_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "migration_within_cw_maps_enabled")

    @property
    @pulumi.getter(name="serialEnd")
    def serial_end(self) -> Optional[str]:
        return pulumi.get(self, "serial_end")

    @property
    @pulumi.getter(name="serialStart")
    def serial_start(self) -> Optional[str]:
        return pulumi.get(self, "serial_start")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tier1Title")
    def tier1_title(self) -> Optional[str]:
        return pulumi.get(self, "tier1_title")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTimeoutResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorTimeoutResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorUidConfigurationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 legal_text: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorUidConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            extract_location=extract_location,
            header_name=header_name,
            legal_text=legal_text,
            locked=locked,
            query_parameter_name=query_parameter_name,
            template_uuid=template_uuid,
            uuid=uuid,
            variable_name=variable_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             extract_location: Optional[str] = None,
             header_name: Optional[str] = None,
             legal_text: Optional[str] = None,
             locked: Optional[bool] = None,
             query_parameter_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             variable_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'extractLocation' in kwargs:
            extract_location = kwargs['extractLocation']
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'legalText' in kwargs:
            legal_text = kwargs['legalText']
        if 'queryParameterName' in kwargs:
            query_parameter_name = kwargs['queryParameterName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'variableName' in kwargs:
            variable_name = kwargs['variableName']

        if enabled is not None:
            _setter("enabled", enabled)
        if extract_location is not None:
            _setter("extract_location", extract_location)
        if header_name is not None:
            _setter("header_name", header_name)
        if legal_text is not None:
            _setter("legal_text", legal_text)
        if locked is not None:
            _setter("locked", locked)
        if query_parameter_name is not None:
            _setter("query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if variable_name is not None:
            _setter("variable_name", variable_name)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="legalText")
    def legal_text(self) -> Optional[str]:
        return pulumi.get(self, "legal_text")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorValidateEntityTagResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorValidateEntityTagResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenResult(dict):
    def __init__(__self__, *,
                 enable_es256: Optional[bool] = None,
                 enable_rs256: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 jwt: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_es256=enable_es256,
            enable_rs256=enable_rs256,
            extract_location=extract_location,
            header_name=header_name,
            jwt=jwt,
            locked=locked,
            query_parameter_name=query_parameter_name,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_es256: Optional[bool] = None,
             enable_rs256: Optional[bool] = None,
             extract_location: Optional[str] = None,
             header_name: Optional[str] = None,
             jwt: Optional[str] = None,
             locked: Optional[bool] = None,
             query_parameter_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enableEs256' in kwargs:
            enable_es256 = kwargs['enableEs256']
        if 'enableRs256' in kwargs:
            enable_rs256 = kwargs['enableRs256']
        if 'extractLocation' in kwargs:
            extract_location = kwargs['extractLocation']
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'queryParameterName' in kwargs:
            query_parameter_name = kwargs['queryParameterName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enable_es256 is not None:
            _setter("enable_es256", enable_es256)
        if enable_rs256 is not None:
            _setter("enable_rs256", enable_rs256)
        if extract_location is not None:
            _setter("extract_location", extract_location)
        if header_name is not None:
            _setter("header_name", header_name)
        if jwt is not None:
            _setter("jwt", jwt)
        if locked is not None:
            _setter("locked", locked)
        if query_parameter_name is not None:
            _setter("query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="enableEs256")
    def enable_es256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_es256")

    @property
    @pulumi.getter(name="enableRs256")
    def enable_rs256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_rs256")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def jwt(self) -> Optional[str]:
        return pulumi.get(self, "jwt")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenForDcpResult(dict):
    def __init__(__self__, *,
                 authorizations: Optional[str] = None,
                 client_id: Optional[str] = None,
                 custom_header: Optional[bool] = None,
                 enable_es256: Optional[bool] = None,
                 enable_rs256: Optional[bool] = None,
                 extract_authorizations: Optional[bool] = None,
                 extract_client_id: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 extract_user_name: Optional[bool] = None,
                 header_name: Optional[str] = None,
                 jwt: Optional[str] = None,
                 locked: Optional[bool] = None,
                 primary_location: Optional[str] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 user_name: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenForDcpResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authorizations=authorizations,
            client_id=client_id,
            custom_header=custom_header,
            enable_es256=enable_es256,
            enable_rs256=enable_rs256,
            extract_authorizations=extract_authorizations,
            extract_client_id=extract_client_id,
            extract_location=extract_location,
            extract_user_name=extract_user_name,
            header_name=header_name,
            jwt=jwt,
            locked=locked,
            primary_location=primary_location,
            query_parameter_name=query_parameter_name,
            template_uuid=template_uuid,
            user_name=user_name,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authorizations: Optional[str] = None,
             client_id: Optional[str] = None,
             custom_header: Optional[bool] = None,
             enable_es256: Optional[bool] = None,
             enable_rs256: Optional[bool] = None,
             extract_authorizations: Optional[bool] = None,
             extract_client_id: Optional[bool] = None,
             extract_location: Optional[str] = None,
             extract_user_name: Optional[bool] = None,
             header_name: Optional[str] = None,
             jwt: Optional[str] = None,
             locked: Optional[bool] = None,
             primary_location: Optional[str] = None,
             query_parameter_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             user_name: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if 'customHeader' in kwargs:
            custom_header = kwargs['customHeader']
        if 'enableEs256' in kwargs:
            enable_es256 = kwargs['enableEs256']
        if 'enableRs256' in kwargs:
            enable_rs256 = kwargs['enableRs256']
        if 'extractAuthorizations' in kwargs:
            extract_authorizations = kwargs['extractAuthorizations']
        if 'extractClientId' in kwargs:
            extract_client_id = kwargs['extractClientId']
        if 'extractLocation' in kwargs:
            extract_location = kwargs['extractLocation']
        if 'extractUserName' in kwargs:
            extract_user_name = kwargs['extractUserName']
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'primaryLocation' in kwargs:
            primary_location = kwargs['primaryLocation']
        if 'queryParameterName' in kwargs:
            query_parameter_name = kwargs['queryParameterName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'userName' in kwargs:
            user_name = kwargs['userName']

        if authorizations is not None:
            _setter("authorizations", authorizations)
        if client_id is not None:
            _setter("client_id", client_id)
        if custom_header is not None:
            _setter("custom_header", custom_header)
        if enable_es256 is not None:
            _setter("enable_es256", enable_es256)
        if enable_rs256 is not None:
            _setter("enable_rs256", enable_rs256)
        if extract_authorizations is not None:
            _setter("extract_authorizations", extract_authorizations)
        if extract_client_id is not None:
            _setter("extract_client_id", extract_client_id)
        if extract_location is not None:
            _setter("extract_location", extract_location)
        if extract_user_name is not None:
            _setter("extract_user_name", extract_user_name)
        if header_name is not None:
            _setter("header_name", header_name)
        if jwt is not None:
            _setter("jwt", jwt)
        if locked is not None:
            _setter("locked", locked)
        if primary_location is not None:
            _setter("primary_location", primary_location)
        if query_parameter_name is not None:
            _setter("query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if user_name is not None:
            _setter("user_name", user_name)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def authorizations(self) -> Optional[str]:
        return pulumi.get(self, "authorizations")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="customHeader")
    def custom_header(self) -> Optional[bool]:
        return pulumi.get(self, "custom_header")

    @property
    @pulumi.getter(name="enableEs256")
    def enable_es256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_es256")

    @property
    @pulumi.getter(name="enableRs256")
    def enable_rs256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_rs256")

    @property
    @pulumi.getter(name="extractAuthorizations")
    def extract_authorizations(self) -> Optional[bool]:
        return pulumi.get(self, "extract_authorizations")

    @property
    @pulumi.getter(name="extractClientId")
    def extract_client_id(self) -> Optional[bool]:
        return pulumi.get(self, "extract_client_id")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="extractUserName")
    def extract_user_name(self) -> Optional[bool]:
        return pulumi.get(self, "extract_user_name")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def jwt(self) -> Optional[str]:
        return pulumi.get(self, "jwt")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="primaryLocation")
    def primary_location(self) -> Optional[str]:
        return pulumi.get(self, "primary_location")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationResult(dict):
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 escape_hmac_inputs: Optional[bool] = None,
                 failure_response: Optional[bool] = None,
                 ignore_query_string: Optional[bool] = None,
                 key: Optional[str] = None,
                 location: Optional[str] = None,
                 location_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 salt: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 transition_key: Optional[str] = None,
                 use_advanced: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            algorithm=algorithm,
            escape_hmac_inputs=escape_hmac_inputs,
            failure_response=failure_response,
            ignore_query_string=ignore_query_string,
            key=key,
            location=location,
            location_id=location_id,
            locked=locked,
            salt=salt,
            template_uuid=template_uuid,
            transition_key=transition_key,
            use_advanced=use_advanced,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             algorithm: Optional[str] = None,
             escape_hmac_inputs: Optional[bool] = None,
             failure_response: Optional[bool] = None,
             ignore_query_string: Optional[bool] = None,
             key: Optional[str] = None,
             location: Optional[str] = None,
             location_id: Optional[str] = None,
             locked: Optional[bool] = None,
             salt: Optional[str] = None,
             template_uuid: Optional[str] = None,
             transition_key: Optional[str] = None,
             use_advanced: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'escapeHmacInputs' in kwargs:
            escape_hmac_inputs = kwargs['escapeHmacInputs']
        if 'failureResponse' in kwargs:
            failure_response = kwargs['failureResponse']
        if 'ignoreQueryString' in kwargs:
            ignore_query_string = kwargs['ignoreQueryString']
        if 'locationId' in kwargs:
            location_id = kwargs['locationId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'transitionKey' in kwargs:
            transition_key = kwargs['transitionKey']
        if 'useAdvanced' in kwargs:
            use_advanced = kwargs['useAdvanced']

        if algorithm is not None:
            _setter("algorithm", algorithm)
        if escape_hmac_inputs is not None:
            _setter("escape_hmac_inputs", escape_hmac_inputs)
        if failure_response is not None:
            _setter("failure_response", failure_response)
        if ignore_query_string is not None:
            _setter("ignore_query_string", ignore_query_string)
        if key is not None:
            _setter("key", key)
        if location is not None:
            _setter("location", location)
        if location_id is not None:
            _setter("location_id", location_id)
        if locked is not None:
            _setter("locked", locked)
        if salt is not None:
            _setter("salt", salt)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if transition_key is not None:
            _setter("transition_key", transition_key)
        if use_advanced is not None:
            _setter("use_advanced", use_advanced)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="escapeHmacInputs")
    def escape_hmac_inputs(self) -> Optional[bool]:
        return pulumi.get(self, "escape_hmac_inputs")

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional[bool]:
        return pulumi.get(self, "failure_response")

    @property
    @pulumi.getter(name="ignoreQueryString")
    def ignore_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_query_string")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[str]:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def salt(self) -> Optional[str]:
        return pulumi.get(self, "salt")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="transitionKey")
    def transition_key(self) -> Optional[str]:
        return pulumi.get(self, "transition_key")

    @property
    @pulumi.getter(name="useAdvanced")
    def use_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "use_advanced")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomResult(dict):
    def __init__(__self__, *,
                 access_title: Optional[str] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 custom_cookie_domain: Optional[str] = None,
                 domain_config: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_auto_prolong: Optional[bool] = None,
                 session_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_assets_paths: Optional[Sequence[str]] = None,
                 waiting_room_path: Optional[str] = None,
                 waiting_room_title: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_title=access_title,
            cloudlet_shared_policy=cloudlet_shared_policy,
            custom_cookie_domain=custom_cookie_domain,
            domain_config=domain_config,
            locked=locked,
            session_auto_prolong=session_auto_prolong,
            session_duration=session_duration,
            template_uuid=template_uuid,
            uuid=uuid,
            waiting_room_assets_paths=waiting_room_assets_paths,
            waiting_room_path=waiting_room_path,
            waiting_room_title=waiting_room_title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_title: Optional[str] = None,
             cloudlet_shared_policy: Optional[int] = None,
             custom_cookie_domain: Optional[str] = None,
             domain_config: Optional[str] = None,
             locked: Optional[bool] = None,
             session_auto_prolong: Optional[bool] = None,
             session_duration: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             waiting_room_assets_paths: Optional[Sequence[str]] = None,
             waiting_room_path: Optional[str] = None,
             waiting_room_title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessTitle' in kwargs:
            access_title = kwargs['accessTitle']
        if 'cloudletSharedPolicy' in kwargs:
            cloudlet_shared_policy = kwargs['cloudletSharedPolicy']
        if 'customCookieDomain' in kwargs:
            custom_cookie_domain = kwargs['customCookieDomain']
        if 'domainConfig' in kwargs:
            domain_config = kwargs['domainConfig']
        if 'sessionAutoProlong' in kwargs:
            session_auto_prolong = kwargs['sessionAutoProlong']
        if 'sessionDuration' in kwargs:
            session_duration = kwargs['sessionDuration']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'waitingRoomAssetsPaths' in kwargs:
            waiting_room_assets_paths = kwargs['waitingRoomAssetsPaths']
        if 'waitingRoomPath' in kwargs:
            waiting_room_path = kwargs['waitingRoomPath']
        if 'waitingRoomTitle' in kwargs:
            waiting_room_title = kwargs['waitingRoomTitle']

        if access_title is not None:
            _setter("access_title", access_title)
        if cloudlet_shared_policy is not None:
            _setter("cloudlet_shared_policy", cloudlet_shared_policy)
        if custom_cookie_domain is not None:
            _setter("custom_cookie_domain", custom_cookie_domain)
        if domain_config is not None:
            _setter("domain_config", domain_config)
        if locked is not None:
            _setter("locked", locked)
        if session_auto_prolong is not None:
            _setter("session_auto_prolong", session_auto_prolong)
        if session_duration is not None:
            _setter("session_duration", session_duration)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if waiting_room_assets_paths is not None:
            _setter("waiting_room_assets_paths", waiting_room_assets_paths)
        if waiting_room_path is not None:
            _setter("waiting_room_path", waiting_room_path)
        if waiting_room_title is not None:
            _setter("waiting_room_title", waiting_room_title)

    @property
    @pulumi.getter(name="accessTitle")
    def access_title(self) -> Optional[str]:
        return pulumi.get(self, "access_title")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter(name="customCookieDomain")
    def custom_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_cookie_domain")

    @property
    @pulumi.getter(name="domainConfig")
    def domain_config(self) -> Optional[str]:
        return pulumi.get(self, "domain_config")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="sessionAutoProlong")
    def session_auto_prolong(self) -> Optional[bool]:
        return pulumi.get(self, "session_auto_prolong")

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[int]:
        return pulumi.get(self, "session_duration")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="waitingRoomAssetsPaths")
    def waiting_room_assets_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "waiting_room_assets_paths")

    @property
    @pulumi.getter(name="waitingRoomPath")
    def waiting_room_path(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_path")

    @property
    @pulumi.getter(name="waitingRoomTitle")
    def waiting_room_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_title")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomWithEdgeWorkersResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomWithEdgeWorkersResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationResult(dict):
    def __init__(__self__, *,
                 allowed_user_cookie_advanced: Optional[bool] = None,
                 allowed_user_cookie_automatic_salt: Optional[bool] = None,
                 allowed_user_cookie_domain: Optional[str] = None,
                 allowed_user_cookie_domain_type: Optional[str] = None,
                 allowed_user_cookie_duration: Optional[int] = None,
                 allowed_user_cookie_enabled: Optional[bool] = None,
                 allowed_user_cookie_http_only: Optional[bool] = None,
                 allowed_user_cookie_label: Optional[str] = None,
                 allowed_user_cookie_management_title: Optional[str] = None,
                 allowed_user_cookie_refresh: Optional[bool] = None,
                 allowed_user_cookie_salt: Optional[str] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 user_identification_by_cookie: Optional[bool] = None,
                 user_identification_by_headers: Optional[bool] = None,
                 user_identification_by_ip: Optional[bool] = None,
                 user_identification_by_params: Optional[bool] = None,
                 user_identification_key_cookie: Optional[str] = None,
                 user_identification_key_headers: Optional[Sequence[str]] = None,
                 user_identification_key_params: Optional[Sequence[str]] = None,
                 user_identification_title: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_cache_ttl: Optional[int] = None,
                 waiting_room_cookie_advanced: Optional[bool] = None,
                 waiting_room_cookie_automatic_salt: Optional[bool] = None,
                 waiting_room_cookie_domain: Optional[str] = None,
                 waiting_room_cookie_domain_type: Optional[str] = None,
                 waiting_room_cookie_duration: Optional[int] = None,
                 waiting_room_cookie_enabled: Optional[bool] = None,
                 waiting_room_cookie_http_only: Optional[bool] = None,
                 waiting_room_cookie_label: Optional[str] = None,
                 waiting_room_cookie_management_title: Optional[str] = None,
                 waiting_room_cookie_salt: Optional[str] = None,
                 waiting_room_cookie_share_label: Optional[bool] = None,
                 waiting_room_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeResult'] = None,
                 waiting_room_directory: Optional[str] = None,
                 waiting_room_management_title: Optional[str] = None,
                 waiting_room_net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomNetStorageResult'] = None,
                 waiting_room_status_code: Optional[int] = None,
                 waiting_room_use_cp_code: Optional[bool] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_user_cookie_advanced=allowed_user_cookie_advanced,
            allowed_user_cookie_automatic_salt=allowed_user_cookie_automatic_salt,
            allowed_user_cookie_domain=allowed_user_cookie_domain,
            allowed_user_cookie_domain_type=allowed_user_cookie_domain_type,
            allowed_user_cookie_duration=allowed_user_cookie_duration,
            allowed_user_cookie_enabled=allowed_user_cookie_enabled,
            allowed_user_cookie_http_only=allowed_user_cookie_http_only,
            allowed_user_cookie_label=allowed_user_cookie_label,
            allowed_user_cookie_management_title=allowed_user_cookie_management_title,
            allowed_user_cookie_refresh=allowed_user_cookie_refresh,
            allowed_user_cookie_salt=allowed_user_cookie_salt,
            cloudlet_policy=cloudlet_policy,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            user_identification_by_cookie=user_identification_by_cookie,
            user_identification_by_headers=user_identification_by_headers,
            user_identification_by_ip=user_identification_by_ip,
            user_identification_by_params=user_identification_by_params,
            user_identification_key_cookie=user_identification_key_cookie,
            user_identification_key_headers=user_identification_key_headers,
            user_identification_key_params=user_identification_key_params,
            user_identification_title=user_identification_title,
            uuid=uuid,
            waiting_room_cache_ttl=waiting_room_cache_ttl,
            waiting_room_cookie_advanced=waiting_room_cookie_advanced,
            waiting_room_cookie_automatic_salt=waiting_room_cookie_automatic_salt,
            waiting_room_cookie_domain=waiting_room_cookie_domain,
            waiting_room_cookie_domain_type=waiting_room_cookie_domain_type,
            waiting_room_cookie_duration=waiting_room_cookie_duration,
            waiting_room_cookie_enabled=waiting_room_cookie_enabled,
            waiting_room_cookie_http_only=waiting_room_cookie_http_only,
            waiting_room_cookie_label=waiting_room_cookie_label,
            waiting_room_cookie_management_title=waiting_room_cookie_management_title,
            waiting_room_cookie_salt=waiting_room_cookie_salt,
            waiting_room_cookie_share_label=waiting_room_cookie_share_label,
            waiting_room_cp_code=waiting_room_cp_code,
            waiting_room_directory=waiting_room_directory,
            waiting_room_management_title=waiting_room_management_title,
            waiting_room_net_storage=waiting_room_net_storage,
            waiting_room_status_code=waiting_room_status_code,
            waiting_room_use_cp_code=waiting_room_use_cp_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_user_cookie_advanced: Optional[bool] = None,
             allowed_user_cookie_automatic_salt: Optional[bool] = None,
             allowed_user_cookie_domain: Optional[str] = None,
             allowed_user_cookie_domain_type: Optional[str] = None,
             allowed_user_cookie_duration: Optional[int] = None,
             allowed_user_cookie_enabled: Optional[bool] = None,
             allowed_user_cookie_http_only: Optional[bool] = None,
             allowed_user_cookie_label: Optional[str] = None,
             allowed_user_cookie_management_title: Optional[str] = None,
             allowed_user_cookie_refresh: Optional[bool] = None,
             allowed_user_cookie_salt: Optional[str] = None,
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationCloudletPolicyResult'] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             user_identification_by_cookie: Optional[bool] = None,
             user_identification_by_headers: Optional[bool] = None,
             user_identification_by_ip: Optional[bool] = None,
             user_identification_by_params: Optional[bool] = None,
             user_identification_key_cookie: Optional[str] = None,
             user_identification_key_headers: Optional[Sequence[str]] = None,
             user_identification_key_params: Optional[Sequence[str]] = None,
             user_identification_title: Optional[str] = None,
             uuid: Optional[str] = None,
             waiting_room_cache_ttl: Optional[int] = None,
             waiting_room_cookie_advanced: Optional[bool] = None,
             waiting_room_cookie_automatic_salt: Optional[bool] = None,
             waiting_room_cookie_domain: Optional[str] = None,
             waiting_room_cookie_domain_type: Optional[str] = None,
             waiting_room_cookie_duration: Optional[int] = None,
             waiting_room_cookie_enabled: Optional[bool] = None,
             waiting_room_cookie_http_only: Optional[bool] = None,
             waiting_room_cookie_label: Optional[str] = None,
             waiting_room_cookie_management_title: Optional[str] = None,
             waiting_room_cookie_salt: Optional[str] = None,
             waiting_room_cookie_share_label: Optional[bool] = None,
             waiting_room_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeResult'] = None,
             waiting_room_directory: Optional[str] = None,
             waiting_room_management_title: Optional[str] = None,
             waiting_room_net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomNetStorageResult'] = None,
             waiting_room_status_code: Optional[int] = None,
             waiting_room_use_cp_code: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowedUserCookieAdvanced' in kwargs:
            allowed_user_cookie_advanced = kwargs['allowedUserCookieAdvanced']
        if 'allowedUserCookieAutomaticSalt' in kwargs:
            allowed_user_cookie_automatic_salt = kwargs['allowedUserCookieAutomaticSalt']
        if 'allowedUserCookieDomain' in kwargs:
            allowed_user_cookie_domain = kwargs['allowedUserCookieDomain']
        if 'allowedUserCookieDomainType' in kwargs:
            allowed_user_cookie_domain_type = kwargs['allowedUserCookieDomainType']
        if 'allowedUserCookieDuration' in kwargs:
            allowed_user_cookie_duration = kwargs['allowedUserCookieDuration']
        if 'allowedUserCookieEnabled' in kwargs:
            allowed_user_cookie_enabled = kwargs['allowedUserCookieEnabled']
        if 'allowedUserCookieHttpOnly' in kwargs:
            allowed_user_cookie_http_only = kwargs['allowedUserCookieHttpOnly']
        if 'allowedUserCookieLabel' in kwargs:
            allowed_user_cookie_label = kwargs['allowedUserCookieLabel']
        if 'allowedUserCookieManagementTitle' in kwargs:
            allowed_user_cookie_management_title = kwargs['allowedUserCookieManagementTitle']
        if 'allowedUserCookieRefresh' in kwargs:
            allowed_user_cookie_refresh = kwargs['allowedUserCookieRefresh']
        if 'allowedUserCookieSalt' in kwargs:
            allowed_user_cookie_salt = kwargs['allowedUserCookieSalt']
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'userIdentificationByCookie' in kwargs:
            user_identification_by_cookie = kwargs['userIdentificationByCookie']
        if 'userIdentificationByHeaders' in kwargs:
            user_identification_by_headers = kwargs['userIdentificationByHeaders']
        if 'userIdentificationByIp' in kwargs:
            user_identification_by_ip = kwargs['userIdentificationByIp']
        if 'userIdentificationByParams' in kwargs:
            user_identification_by_params = kwargs['userIdentificationByParams']
        if 'userIdentificationKeyCookie' in kwargs:
            user_identification_key_cookie = kwargs['userIdentificationKeyCookie']
        if 'userIdentificationKeyHeaders' in kwargs:
            user_identification_key_headers = kwargs['userIdentificationKeyHeaders']
        if 'userIdentificationKeyParams' in kwargs:
            user_identification_key_params = kwargs['userIdentificationKeyParams']
        if 'userIdentificationTitle' in kwargs:
            user_identification_title = kwargs['userIdentificationTitle']
        if 'waitingRoomCacheTtl' in kwargs:
            waiting_room_cache_ttl = kwargs['waitingRoomCacheTtl']
        if 'waitingRoomCookieAdvanced' in kwargs:
            waiting_room_cookie_advanced = kwargs['waitingRoomCookieAdvanced']
        if 'waitingRoomCookieAutomaticSalt' in kwargs:
            waiting_room_cookie_automatic_salt = kwargs['waitingRoomCookieAutomaticSalt']
        if 'waitingRoomCookieDomain' in kwargs:
            waiting_room_cookie_domain = kwargs['waitingRoomCookieDomain']
        if 'waitingRoomCookieDomainType' in kwargs:
            waiting_room_cookie_domain_type = kwargs['waitingRoomCookieDomainType']
        if 'waitingRoomCookieDuration' in kwargs:
            waiting_room_cookie_duration = kwargs['waitingRoomCookieDuration']
        if 'waitingRoomCookieEnabled' in kwargs:
            waiting_room_cookie_enabled = kwargs['waitingRoomCookieEnabled']
        if 'waitingRoomCookieHttpOnly' in kwargs:
            waiting_room_cookie_http_only = kwargs['waitingRoomCookieHttpOnly']
        if 'waitingRoomCookieLabel' in kwargs:
            waiting_room_cookie_label = kwargs['waitingRoomCookieLabel']
        if 'waitingRoomCookieManagementTitle' in kwargs:
            waiting_room_cookie_management_title = kwargs['waitingRoomCookieManagementTitle']
        if 'waitingRoomCookieSalt' in kwargs:
            waiting_room_cookie_salt = kwargs['waitingRoomCookieSalt']
        if 'waitingRoomCookieShareLabel' in kwargs:
            waiting_room_cookie_share_label = kwargs['waitingRoomCookieShareLabel']
        if 'waitingRoomCpCode' in kwargs:
            waiting_room_cp_code = kwargs['waitingRoomCpCode']
        if 'waitingRoomDirectory' in kwargs:
            waiting_room_directory = kwargs['waitingRoomDirectory']
        if 'waitingRoomManagementTitle' in kwargs:
            waiting_room_management_title = kwargs['waitingRoomManagementTitle']
        if 'waitingRoomNetStorage' in kwargs:
            waiting_room_net_storage = kwargs['waitingRoomNetStorage']
        if 'waitingRoomStatusCode' in kwargs:
            waiting_room_status_code = kwargs['waitingRoomStatusCode']
        if 'waitingRoomUseCpCode' in kwargs:
            waiting_room_use_cp_code = kwargs['waitingRoomUseCpCode']

        if allowed_user_cookie_advanced is not None:
            _setter("allowed_user_cookie_advanced", allowed_user_cookie_advanced)
        if allowed_user_cookie_automatic_salt is not None:
            _setter("allowed_user_cookie_automatic_salt", allowed_user_cookie_automatic_salt)
        if allowed_user_cookie_domain is not None:
            _setter("allowed_user_cookie_domain", allowed_user_cookie_domain)
        if allowed_user_cookie_domain_type is not None:
            _setter("allowed_user_cookie_domain_type", allowed_user_cookie_domain_type)
        if allowed_user_cookie_duration is not None:
            _setter("allowed_user_cookie_duration", allowed_user_cookie_duration)
        if allowed_user_cookie_enabled is not None:
            _setter("allowed_user_cookie_enabled", allowed_user_cookie_enabled)
        if allowed_user_cookie_http_only is not None:
            _setter("allowed_user_cookie_http_only", allowed_user_cookie_http_only)
        if allowed_user_cookie_label is not None:
            _setter("allowed_user_cookie_label", allowed_user_cookie_label)
        if allowed_user_cookie_management_title is not None:
            _setter("allowed_user_cookie_management_title", allowed_user_cookie_management_title)
        if allowed_user_cookie_refresh is not None:
            _setter("allowed_user_cookie_refresh", allowed_user_cookie_refresh)
        if allowed_user_cookie_salt is not None:
            _setter("allowed_user_cookie_salt", allowed_user_cookie_salt)
        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if user_identification_by_cookie is not None:
            _setter("user_identification_by_cookie", user_identification_by_cookie)
        if user_identification_by_headers is not None:
            _setter("user_identification_by_headers", user_identification_by_headers)
        if user_identification_by_ip is not None:
            _setter("user_identification_by_ip", user_identification_by_ip)
        if user_identification_by_params is not None:
            _setter("user_identification_by_params", user_identification_by_params)
        if user_identification_key_cookie is not None:
            _setter("user_identification_key_cookie", user_identification_key_cookie)
        if user_identification_key_headers is not None:
            _setter("user_identification_key_headers", user_identification_key_headers)
        if user_identification_key_params is not None:
            _setter("user_identification_key_params", user_identification_key_params)
        if user_identification_title is not None:
            _setter("user_identification_title", user_identification_title)
        if uuid is not None:
            _setter("uuid", uuid)
        if waiting_room_cache_ttl is not None:
            _setter("waiting_room_cache_ttl", waiting_room_cache_ttl)
        if waiting_room_cookie_advanced is not None:
            _setter("waiting_room_cookie_advanced", waiting_room_cookie_advanced)
        if waiting_room_cookie_automatic_salt is not None:
            _setter("waiting_room_cookie_automatic_salt", waiting_room_cookie_automatic_salt)
        if waiting_room_cookie_domain is not None:
            _setter("waiting_room_cookie_domain", waiting_room_cookie_domain)
        if waiting_room_cookie_domain_type is not None:
            _setter("waiting_room_cookie_domain_type", waiting_room_cookie_domain_type)
        if waiting_room_cookie_duration is not None:
            _setter("waiting_room_cookie_duration", waiting_room_cookie_duration)
        if waiting_room_cookie_enabled is not None:
            _setter("waiting_room_cookie_enabled", waiting_room_cookie_enabled)
        if waiting_room_cookie_http_only is not None:
            _setter("waiting_room_cookie_http_only", waiting_room_cookie_http_only)
        if waiting_room_cookie_label is not None:
            _setter("waiting_room_cookie_label", waiting_room_cookie_label)
        if waiting_room_cookie_management_title is not None:
            _setter("waiting_room_cookie_management_title", waiting_room_cookie_management_title)
        if waiting_room_cookie_salt is not None:
            _setter("waiting_room_cookie_salt", waiting_room_cookie_salt)
        if waiting_room_cookie_share_label is not None:
            _setter("waiting_room_cookie_share_label", waiting_room_cookie_share_label)
        if waiting_room_cp_code is not None:
            _setter("waiting_room_cp_code", waiting_room_cp_code)
        if waiting_room_directory is not None:
            _setter("waiting_room_directory", waiting_room_directory)
        if waiting_room_management_title is not None:
            _setter("waiting_room_management_title", waiting_room_management_title)
        if waiting_room_net_storage is not None:
            _setter("waiting_room_net_storage", waiting_room_net_storage)
        if waiting_room_status_code is not None:
            _setter("waiting_room_status_code", waiting_room_status_code)
        if waiting_room_use_cp_code is not None:
            _setter("waiting_room_use_cp_code", waiting_room_use_cp_code)

    @property
    @pulumi.getter(name="allowedUserCookieAdvanced")
    def allowed_user_cookie_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_advanced")

    @property
    @pulumi.getter(name="allowedUserCookieAutomaticSalt")
    def allowed_user_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_automatic_salt")

    @property
    @pulumi.getter(name="allowedUserCookieDomain")
    def allowed_user_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_domain")

    @property
    @pulumi.getter(name="allowedUserCookieDomainType")
    def allowed_user_cookie_domain_type(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_domain_type")

    @property
    @pulumi.getter(name="allowedUserCookieDuration")
    def allowed_user_cookie_duration(self) -> Optional[int]:
        return pulumi.get(self, "allowed_user_cookie_duration")

    @property
    @pulumi.getter(name="allowedUserCookieEnabled")
    def allowed_user_cookie_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_enabled")

    @property
    @pulumi.getter(name="allowedUserCookieHttpOnly")
    def allowed_user_cookie_http_only(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_http_only")

    @property
    @pulumi.getter(name="allowedUserCookieLabel")
    def allowed_user_cookie_label(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_label")

    @property
    @pulumi.getter(name="allowedUserCookieManagementTitle")
    def allowed_user_cookie_management_title(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_management_title")

    @property
    @pulumi.getter(name="allowedUserCookieRefresh")
    def allowed_user_cookie_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_refresh")

    @property
    @pulumi.getter(name="allowedUserCookieSalt")
    def allowed_user_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_salt")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="userIdentificationByCookie")
    def user_identification_by_cookie(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_cookie")

    @property
    @pulumi.getter(name="userIdentificationByHeaders")
    def user_identification_by_headers(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_headers")

    @property
    @pulumi.getter(name="userIdentificationByIp")
    def user_identification_by_ip(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_ip")

    @property
    @pulumi.getter(name="userIdentificationByParams")
    def user_identification_by_params(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_params")

    @property
    @pulumi.getter(name="userIdentificationKeyCookie")
    def user_identification_key_cookie(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_key_cookie")

    @property
    @pulumi.getter(name="userIdentificationKeyHeaders")
    def user_identification_key_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_headers")

    @property
    @pulumi.getter(name="userIdentificationKeyParams")
    def user_identification_key_params(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_params")

    @property
    @pulumi.getter(name="userIdentificationTitle")
    def user_identification_title(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_title")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="waitingRoomCacheTtl")
    def waiting_room_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_cache_ttl")

    @property
    @pulumi.getter(name="waitingRoomCookieAdvanced")
    def waiting_room_cookie_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_advanced")

    @property
    @pulumi.getter(name="waitingRoomCookieAutomaticSalt")
    def waiting_room_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_automatic_salt")

    @property
    @pulumi.getter(name="waitingRoomCookieDomain")
    def waiting_room_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_domain")

    @property
    @pulumi.getter(name="waitingRoomCookieDomainType")
    def waiting_room_cookie_domain_type(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_domain_type")

    @property
    @pulumi.getter(name="waitingRoomCookieDuration")
    def waiting_room_cookie_duration(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_cookie_duration")

    @property
    @pulumi.getter(name="waitingRoomCookieEnabled")
    def waiting_room_cookie_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_enabled")

    @property
    @pulumi.getter(name="waitingRoomCookieHttpOnly")
    def waiting_room_cookie_http_only(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_http_only")

    @property
    @pulumi.getter(name="waitingRoomCookieLabel")
    def waiting_room_cookie_label(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_label")

    @property
    @pulumi.getter(name="waitingRoomCookieManagementTitle")
    def waiting_room_cookie_management_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_management_title")

    @property
    @pulumi.getter(name="waitingRoomCookieSalt")
    def waiting_room_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_salt")

    @property
    @pulumi.getter(name="waitingRoomCookieShareLabel")
    def waiting_room_cookie_share_label(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_share_label")

    @property
    @pulumi.getter(name="waitingRoomCpCode")
    def waiting_room_cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeResult']:
        return pulumi.get(self, "waiting_room_cp_code")

    @property
    @pulumi.getter(name="waitingRoomDirectory")
    def waiting_room_directory(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_directory")

    @property
    @pulumi.getter(name="waitingRoomManagementTitle")
    def waiting_room_management_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_management_title")

    @property
    @pulumi.getter(name="waitingRoomNetStorage")
    def waiting_room_net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomNetStorageResult']:
        return pulumi.get(self, "waiting_room_net_storage")

    @property
    @pulumi.getter(name="waitingRoomStatusCode")
    def waiting_room_status_code(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_status_code")

    @property
    @pulumi.getter(name="waitingRoomUseCpCode")
    def waiting_room_use_cp_code(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_use_cp_code")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoResult(dict):
    def __init__(__self__, *,
                 access_title: Optional[str] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 custom_cookie_domain: Optional[str] = None,
                 domain_config: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_auto_prolong: Optional[bool] = None,
                 session_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_assets_paths: Optional[Sequence[str]] = None,
                 waiting_room_path: Optional[str] = None,
                 waiting_room_title: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_title=access_title,
            cloudlet_shared_policy=cloudlet_shared_policy,
            custom_cookie_domain=custom_cookie_domain,
            domain_config=domain_config,
            locked=locked,
            session_auto_prolong=session_auto_prolong,
            session_duration=session_duration,
            template_uuid=template_uuid,
            uuid=uuid,
            waiting_room_assets_paths=waiting_room_assets_paths,
            waiting_room_path=waiting_room_path,
            waiting_room_title=waiting_room_title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_title: Optional[str] = None,
             cloudlet_shared_policy: Optional[int] = None,
             custom_cookie_domain: Optional[str] = None,
             domain_config: Optional[str] = None,
             locked: Optional[bool] = None,
             session_auto_prolong: Optional[bool] = None,
             session_duration: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             waiting_room_assets_paths: Optional[Sequence[str]] = None,
             waiting_room_path: Optional[str] = None,
             waiting_room_title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessTitle' in kwargs:
            access_title = kwargs['accessTitle']
        if 'cloudletSharedPolicy' in kwargs:
            cloudlet_shared_policy = kwargs['cloudletSharedPolicy']
        if 'customCookieDomain' in kwargs:
            custom_cookie_domain = kwargs['customCookieDomain']
        if 'domainConfig' in kwargs:
            domain_config = kwargs['domainConfig']
        if 'sessionAutoProlong' in kwargs:
            session_auto_prolong = kwargs['sessionAutoProlong']
        if 'sessionDuration' in kwargs:
            session_duration = kwargs['sessionDuration']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'waitingRoomAssetsPaths' in kwargs:
            waiting_room_assets_paths = kwargs['waitingRoomAssetsPaths']
        if 'waitingRoomPath' in kwargs:
            waiting_room_path = kwargs['waitingRoomPath']
        if 'waitingRoomTitle' in kwargs:
            waiting_room_title = kwargs['waitingRoomTitle']

        if access_title is not None:
            _setter("access_title", access_title)
        if cloudlet_shared_policy is not None:
            _setter("cloudlet_shared_policy", cloudlet_shared_policy)
        if custom_cookie_domain is not None:
            _setter("custom_cookie_domain", custom_cookie_domain)
        if domain_config is not None:
            _setter("domain_config", domain_config)
        if locked is not None:
            _setter("locked", locked)
        if session_auto_prolong is not None:
            _setter("session_auto_prolong", session_auto_prolong)
        if session_duration is not None:
            _setter("session_duration", session_duration)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if waiting_room_assets_paths is not None:
            _setter("waiting_room_assets_paths", waiting_room_assets_paths)
        if waiting_room_path is not None:
            _setter("waiting_room_path", waiting_room_path)
        if waiting_room_title is not None:
            _setter("waiting_room_title", waiting_room_title)

    @property
    @pulumi.getter(name="accessTitle")
    def access_title(self) -> Optional[str]:
        return pulumi.get(self, "access_title")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter(name="customCookieDomain")
    def custom_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_cookie_domain")

    @property
    @pulumi.getter(name="domainConfig")
    def domain_config(self) -> Optional[str]:
        return pulumi.get(self, "domain_config")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="sessionAutoProlong")
    def session_auto_prolong(self) -> Optional[bool]:
        return pulumi.get(self, "session_auto_prolong")

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[int]:
        return pulumi.get(self, "session_duration")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="waitingRoomAssetsPaths")
    def waiting_room_assets_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "waiting_room_assets_paths")

    @property
    @pulumi.getter(name="waitingRoomPath")
    def waiting_room_path(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_path")

    @property
    @pulumi.getter(name="waitingRoomTitle")
    def waiting_room_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_title")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoStandaloneResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoStandaloneResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomNetStorageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code=cp_code,
            download_domain_name=download_domain_name,
            g2o_token=g2o_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code: Optional[int] = None,
             download_domain_name: Optional[str] = None,
             g2o_token: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCode' in kwargs:
            cp_code = kwargs['cpCode']
        if 'downloadDomainName' in kwargs:
            download_domain_name = kwargs['downloadDomainName']
        if 'g2oToken' in kwargs:
            g2o_token = kwargs['g2oToken']

        if cp_code is not None:
            _setter("cp_code", cp_code)
        if download_domain_name is not None:
            _setter("download_domain_name", download_domain_name)
        if g2o_token is not None:
            _setter("g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorWatermarkingResult(dict):
    def __init__(__self__, *,
                 ab_variant_location: Optional[str] = None,
                 decryption_password1: Optional[str] = None,
                 decryption_password2: Optional[str] = None,
                 decryption_password_id1: Optional[str] = None,
                 decryption_password_id2: Optional[str] = None,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 miscellaneous_settings_title: Optional[str] = None,
                 pattern_decryption_enable: Optional[bool] = None,
                 pattern_encryption_title: Optional[str] = None,
                 signature_verification_enable: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_signing_title: Optional[str] = None,
                 use_original_as_a: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 verification_key_id1: Optional[str] = None,
                 verification_key_id2: Optional[str] = None,
                 verification_public_key1: Optional[str] = None,
                 verification_public_key2: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorWatermarkingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ab_variant_location=ab_variant_location,
            decryption_password1=decryption_password1,
            decryption_password2=decryption_password2,
            decryption_password_id1=decryption_password_id1,
            decryption_password_id2=decryption_password_id2,
            enable=enable,
            locked=locked,
            miscellaneous_settings_title=miscellaneous_settings_title,
            pattern_decryption_enable=pattern_decryption_enable,
            pattern_encryption_title=pattern_encryption_title,
            signature_verification_enable=signature_verification_enable,
            template_uuid=template_uuid,
            token_signing_title=token_signing_title,
            use_original_as_a=use_original_as_a,
            uuid=uuid,
            verification_key_id1=verification_key_id1,
            verification_key_id2=verification_key_id2,
            verification_public_key1=verification_public_key1,
            verification_public_key2=verification_public_key2,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ab_variant_location: Optional[str] = None,
             decryption_password1: Optional[str] = None,
             decryption_password2: Optional[str] = None,
             decryption_password_id1: Optional[str] = None,
             decryption_password_id2: Optional[str] = None,
             enable: Optional[bool] = None,
             locked: Optional[bool] = None,
             miscellaneous_settings_title: Optional[str] = None,
             pattern_decryption_enable: Optional[bool] = None,
             pattern_encryption_title: Optional[str] = None,
             signature_verification_enable: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             token_signing_title: Optional[str] = None,
             use_original_as_a: Optional[bool] = None,
             uuid: Optional[str] = None,
             verification_key_id1: Optional[str] = None,
             verification_key_id2: Optional[str] = None,
             verification_public_key1: Optional[str] = None,
             verification_public_key2: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'abVariantLocation' in kwargs:
            ab_variant_location = kwargs['abVariantLocation']
        if 'decryptionPassword1' in kwargs:
            decryption_password1 = kwargs['decryptionPassword1']
        if 'decryptionPassword2' in kwargs:
            decryption_password2 = kwargs['decryptionPassword2']
        if 'decryptionPasswordId1' in kwargs:
            decryption_password_id1 = kwargs['decryptionPasswordId1']
        if 'decryptionPasswordId2' in kwargs:
            decryption_password_id2 = kwargs['decryptionPasswordId2']
        if 'miscellaneousSettingsTitle' in kwargs:
            miscellaneous_settings_title = kwargs['miscellaneousSettingsTitle']
        if 'patternDecryptionEnable' in kwargs:
            pattern_decryption_enable = kwargs['patternDecryptionEnable']
        if 'patternEncryptionTitle' in kwargs:
            pattern_encryption_title = kwargs['patternEncryptionTitle']
        if 'signatureVerificationEnable' in kwargs:
            signature_verification_enable = kwargs['signatureVerificationEnable']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'tokenSigningTitle' in kwargs:
            token_signing_title = kwargs['tokenSigningTitle']
        if 'useOriginalAsA' in kwargs:
            use_original_as_a = kwargs['useOriginalAsA']
        if 'verificationKeyId1' in kwargs:
            verification_key_id1 = kwargs['verificationKeyId1']
        if 'verificationKeyId2' in kwargs:
            verification_key_id2 = kwargs['verificationKeyId2']
        if 'verificationPublicKey1' in kwargs:
            verification_public_key1 = kwargs['verificationPublicKey1']
        if 'verificationPublicKey2' in kwargs:
            verification_public_key2 = kwargs['verificationPublicKey2']

        if ab_variant_location is not None:
            _setter("ab_variant_location", ab_variant_location)
        if decryption_password1 is not None:
            _setter("decryption_password1", decryption_password1)
        if decryption_password2 is not None:
            _setter("decryption_password2", decryption_password2)
        if decryption_password_id1 is not None:
            _setter("decryption_password_id1", decryption_password_id1)
        if decryption_password_id2 is not None:
            _setter("decryption_password_id2", decryption_password_id2)
        if enable is not None:
            _setter("enable", enable)
        if locked is not None:
            _setter("locked", locked)
        if miscellaneous_settings_title is not None:
            _setter("miscellaneous_settings_title", miscellaneous_settings_title)
        if pattern_decryption_enable is not None:
            _setter("pattern_decryption_enable", pattern_decryption_enable)
        if pattern_encryption_title is not None:
            _setter("pattern_encryption_title", pattern_encryption_title)
        if signature_verification_enable is not None:
            _setter("signature_verification_enable", signature_verification_enable)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if token_signing_title is not None:
            _setter("token_signing_title", token_signing_title)
        if use_original_as_a is not None:
            _setter("use_original_as_a", use_original_as_a)
        if uuid is not None:
            _setter("uuid", uuid)
        if verification_key_id1 is not None:
            _setter("verification_key_id1", verification_key_id1)
        if verification_key_id2 is not None:
            _setter("verification_key_id2", verification_key_id2)
        if verification_public_key1 is not None:
            _setter("verification_public_key1", verification_public_key1)
        if verification_public_key2 is not None:
            _setter("verification_public_key2", verification_public_key2)

    @property
    @pulumi.getter(name="abVariantLocation")
    def ab_variant_location(self) -> Optional[str]:
        return pulumi.get(self, "ab_variant_location")

    @property
    @pulumi.getter(name="decryptionPassword1")
    def decryption_password1(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password1")

    @property
    @pulumi.getter(name="decryptionPassword2")
    def decryption_password2(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password2")

    @property
    @pulumi.getter(name="decryptionPasswordId1")
    def decryption_password_id1(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password_id1")

    @property
    @pulumi.getter(name="decryptionPasswordId2")
    def decryption_password_id2(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password_id2")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="miscellaneousSettingsTitle")
    def miscellaneous_settings_title(self) -> Optional[str]:
        return pulumi.get(self, "miscellaneous_settings_title")

    @property
    @pulumi.getter(name="patternDecryptionEnable")
    def pattern_decryption_enable(self) -> Optional[bool]:
        return pulumi.get(self, "pattern_decryption_enable")

    @property
    @pulumi.getter(name="patternEncryptionTitle")
    def pattern_encryption_title(self) -> Optional[str]:
        return pulumi.get(self, "pattern_encryption_title")

    @property
    @pulumi.getter(name="signatureVerificationEnable")
    def signature_verification_enable(self) -> Optional[bool]:
        return pulumi.get(self, "signature_verification_enable")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tokenSigningTitle")
    def token_signing_title(self) -> Optional[str]:
        return pulumi.get(self, "token_signing_title")

    @property
    @pulumi.getter(name="useOriginalAsA")
    def use_original_as_a(self) -> Optional[bool]:
        return pulumi.get(self, "use_original_as_a")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="verificationKeyId1")
    def verification_key_id1(self) -> Optional[str]:
        return pulumi.get(self, "verification_key_id1")

    @property
    @pulumi.getter(name="verificationKeyId2")
    def verification_key_id2(self) -> Optional[str]:
        return pulumi.get(self, "verification_key_id2")

    @property
    @pulumi.getter(name="verificationPublicKey1")
    def verification_public_key1(self) -> Optional[str]:
        return pulumi.get(self, "verification_public_key1")

    @property
    @pulumi.getter(name="verificationPublicKey2")
    def verification_public_key2(self) -> Optional[str]:
        return pulumi.get(self, "verification_public_key2")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallResult(dict):
    def __init__(__self__, *,
                 firewall_configuration: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallFirewallConfigurationResult'] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            firewall_configuration=firewall_configuration,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             firewall_configuration: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallFirewallConfigurationResult'] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'firewallConfiguration' in kwargs:
            firewall_configuration = kwargs['firewallConfiguration']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if firewall_configuration is not None:
            _setter("firewall_configuration", firewall_configuration)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="firewallConfiguration")
    def firewall_configuration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallFirewallConfigurationResult']:
        return pulumi.get(self, "firewall_configuration")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallFirewallConfigurationResult(dict):
    def __init__(__self__, *,
                 config_id: Optional[int] = None,
                 file_name: Optional[str] = None,
                 production_status: Optional[str] = None,
                 production_version: Optional[int] = None,
                 staging_status: Optional[str] = None,
                 staging_version: Optional[int] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallFirewallConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_id=config_id,
            file_name=file_name,
            production_status=production_status,
            production_version=production_version,
            staging_status=staging_status,
            staging_version=staging_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_id: Optional[int] = None,
             file_name: Optional[str] = None,
             production_status: Optional[str] = None,
             production_version: Optional[int] = None,
             staging_status: Optional[str] = None,
             staging_version: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'configId' in kwargs:
            config_id = kwargs['configId']
        if 'fileName' in kwargs:
            file_name = kwargs['fileName']
        if 'productionStatus' in kwargs:
            production_status = kwargs['productionStatus']
        if 'productionVersion' in kwargs:
            production_version = kwargs['productionVersion']
        if 'stagingStatus' in kwargs:
            staging_status = kwargs['stagingStatus']
        if 'stagingVersion' in kwargs:
            staging_version = kwargs['stagingVersion']

        if config_id is not None:
            _setter("config_id", config_id)
        if file_name is not None:
            _setter("file_name", file_name)
        if production_status is not None:
            _setter("production_status", production_status)
        if production_version is not None:
            _setter("production_version", production_version)
        if staging_status is not None:
            _setter("staging_status", staging_status)
        if staging_version is not None:
            _setter("staging_version", staging_version)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[int]:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="productionStatus")
    def production_status(self) -> Optional[str]:
        return pulumi.get(self, "production_status")

    @property
    @pulumi.getter(name="productionVersion")
    def production_version(self) -> Optional[int]:
        return pulumi.get(self, "production_version")

    @property
    @pulumi.getter(name="stagingStatus")
    def staging_status(self) -> Optional[str]:
        return pulumi.get(self, "staging_status")

    @property
    @pulumi.getter(name="stagingVersion")
    def staging_version(self) -> Optional[int]:
        return pulumi.get(self, "staging_version")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorWebSocketsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorWebSocketsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorWebdavResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105BehaviorWebdavResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionResult(dict):
    def __init__(__self__, *,
                 advanced_im_match: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionAdvancedImMatchResult'] = None,
                 bucket: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionBucketResult'] = None,
                 cacheability: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionCacheabilityResult'] = None,
                 china_cdn_region: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionChinaCdnRegionResult'] = None,
                 client_certificate: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientCertificateResult'] = None,
                 client_ip: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientIpResult'] = None,
                 client_ip_version: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientIpVersionResult'] = None,
                 cloudlets_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionCloudletsOriginResult'] = None,
                 content_delivery_network: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionContentDeliveryNetworkResult'] = None,
                 content_type: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionContentTypeResult'] = None,
                 device_characteristic: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionDeviceCharacteristicResult'] = None,
                 ecmd_auth_groups: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthGroupsResult'] = None,
                 ecmd_auth_scheme: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthSchemeResult'] = None,
                 ecmd_is_authenticated: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdIsAuthenticatedResult'] = None,
                 ecmd_username: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdUsernameResult'] = None,
                 edge_workers_failure: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEdgeWorkersFailureResult'] = None,
                 file_extension: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionFileExtensionResult'] = None,
                 filename: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionFilenameResult'] = None,
                 hostname: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionHostnameResult'] = None,
                 match_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchAdvancedResult'] = None,
                 match_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeResult'] = None,
                 match_response_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchResponseCodeResult'] = None,
                 match_variable: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchVariableResult'] = None,
                 metadata_stage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMetadataStageResult'] = None,
                 origin_timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionOriginTimeoutResult'] = None,
                 path: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionPathResult'] = None,
                 query_string_parameter: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionQueryStringParameterResult'] = None,
                 random: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRandomResult'] = None,
                 recovery_config: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRecoveryConfigResult'] = None,
                 regular_expression: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRegularExpressionResult'] = None,
                 request_cookie: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestCookieResult'] = None,
                 request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestHeaderResult'] = None,
                 request_method: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestMethodResult'] = None,
                 request_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestProtocolResult'] = None,
                 request_type: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestTypeResult'] = None,
                 response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionResponseHeaderResult'] = None,
                 time: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionTimeResult'] = None,
                 token_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionTokenAuthorizationResult'] = None,
                 user_agent: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserAgentResult'] = None,
                 user_location: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserLocationResult'] = None,
                 user_network: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserNetworkResult'] = None,
                 variable_error: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionVariableErrorResult'] = None,
                 virtual_waiting_room_request: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionVirtualWaitingRoomRequestResult'] = None,
                 visitor_prioritization_request: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionVisitorPrioritizationRequestResult'] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            advanced_im_match=advanced_im_match,
            bucket=bucket,
            cacheability=cacheability,
            china_cdn_region=china_cdn_region,
            client_certificate=client_certificate,
            client_ip=client_ip,
            client_ip_version=client_ip_version,
            cloudlets_origin=cloudlets_origin,
            content_delivery_network=content_delivery_network,
            content_type=content_type,
            device_characteristic=device_characteristic,
            ecmd_auth_groups=ecmd_auth_groups,
            ecmd_auth_scheme=ecmd_auth_scheme,
            ecmd_is_authenticated=ecmd_is_authenticated,
            ecmd_username=ecmd_username,
            edge_workers_failure=edge_workers_failure,
            file_extension=file_extension,
            filename=filename,
            hostname=hostname,
            match_advanced=match_advanced,
            match_cp_code=match_cp_code,
            match_response_code=match_response_code,
            match_variable=match_variable,
            metadata_stage=metadata_stage,
            origin_timeout=origin_timeout,
            path=path,
            query_string_parameter=query_string_parameter,
            random=random,
            recovery_config=recovery_config,
            regular_expression=regular_expression,
            request_cookie=request_cookie,
            request_header=request_header,
            request_method=request_method,
            request_protocol=request_protocol,
            request_type=request_type,
            response_header=response_header,
            time=time,
            token_authorization=token_authorization,
            user_agent=user_agent,
            user_location=user_location,
            user_network=user_network,
            variable_error=variable_error,
            virtual_waiting_room_request=virtual_waiting_room_request,
            visitor_prioritization_request=visitor_prioritization_request,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             advanced_im_match: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionAdvancedImMatchResult'] = None,
             bucket: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionBucketResult'] = None,
             cacheability: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionCacheabilityResult'] = None,
             china_cdn_region: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionChinaCdnRegionResult'] = None,
             client_certificate: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientCertificateResult'] = None,
             client_ip: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientIpResult'] = None,
             client_ip_version: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientIpVersionResult'] = None,
             cloudlets_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionCloudletsOriginResult'] = None,
             content_delivery_network: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionContentDeliveryNetworkResult'] = None,
             content_type: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionContentTypeResult'] = None,
             device_characteristic: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionDeviceCharacteristicResult'] = None,
             ecmd_auth_groups: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthGroupsResult'] = None,
             ecmd_auth_scheme: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthSchemeResult'] = None,
             ecmd_is_authenticated: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdIsAuthenticatedResult'] = None,
             ecmd_username: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdUsernameResult'] = None,
             edge_workers_failure: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEdgeWorkersFailureResult'] = None,
             file_extension: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionFileExtensionResult'] = None,
             filename: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionFilenameResult'] = None,
             hostname: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionHostnameResult'] = None,
             match_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchAdvancedResult'] = None,
             match_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeResult'] = None,
             match_response_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchResponseCodeResult'] = None,
             match_variable: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchVariableResult'] = None,
             metadata_stage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMetadataStageResult'] = None,
             origin_timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionOriginTimeoutResult'] = None,
             path: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionPathResult'] = None,
             query_string_parameter: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionQueryStringParameterResult'] = None,
             random: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRandomResult'] = None,
             recovery_config: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRecoveryConfigResult'] = None,
             regular_expression: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRegularExpressionResult'] = None,
             request_cookie: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestCookieResult'] = None,
             request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestHeaderResult'] = None,
             request_method: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestMethodResult'] = None,
             request_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestProtocolResult'] = None,
             request_type: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestTypeResult'] = None,
             response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionResponseHeaderResult'] = None,
             time: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionTimeResult'] = None,
             token_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionTokenAuthorizationResult'] = None,
             user_agent: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserAgentResult'] = None,
             user_location: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserLocationResult'] = None,
             user_network: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserNetworkResult'] = None,
             variable_error: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionVariableErrorResult'] = None,
             virtual_waiting_room_request: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionVirtualWaitingRoomRequestResult'] = None,
             visitor_prioritization_request: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionVisitorPrioritizationRequestResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'advancedImMatch' in kwargs:
            advanced_im_match = kwargs['advancedImMatch']
        if 'chinaCdnRegion' in kwargs:
            china_cdn_region = kwargs['chinaCdnRegion']
        if 'clientCertificate' in kwargs:
            client_certificate = kwargs['clientCertificate']
        if 'clientIp' in kwargs:
            client_ip = kwargs['clientIp']
        if 'clientIpVersion' in kwargs:
            client_ip_version = kwargs['clientIpVersion']
        if 'cloudletsOrigin' in kwargs:
            cloudlets_origin = kwargs['cloudletsOrigin']
        if 'contentDeliveryNetwork' in kwargs:
            content_delivery_network = kwargs['contentDeliveryNetwork']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'deviceCharacteristic' in kwargs:
            device_characteristic = kwargs['deviceCharacteristic']
        if 'ecmdAuthGroups' in kwargs:
            ecmd_auth_groups = kwargs['ecmdAuthGroups']
        if 'ecmdAuthScheme' in kwargs:
            ecmd_auth_scheme = kwargs['ecmdAuthScheme']
        if 'ecmdIsAuthenticated' in kwargs:
            ecmd_is_authenticated = kwargs['ecmdIsAuthenticated']
        if 'ecmdUsername' in kwargs:
            ecmd_username = kwargs['ecmdUsername']
        if 'edgeWorkersFailure' in kwargs:
            edge_workers_failure = kwargs['edgeWorkersFailure']
        if 'fileExtension' in kwargs:
            file_extension = kwargs['fileExtension']
        if 'matchAdvanced' in kwargs:
            match_advanced = kwargs['matchAdvanced']
        if 'matchCpCode' in kwargs:
            match_cp_code = kwargs['matchCpCode']
        if 'matchResponseCode' in kwargs:
            match_response_code = kwargs['matchResponseCode']
        if 'matchVariable' in kwargs:
            match_variable = kwargs['matchVariable']
        if 'metadataStage' in kwargs:
            metadata_stage = kwargs['metadataStage']
        if 'originTimeout' in kwargs:
            origin_timeout = kwargs['originTimeout']
        if 'queryStringParameter' in kwargs:
            query_string_parameter = kwargs['queryStringParameter']
        if 'recoveryConfig' in kwargs:
            recovery_config = kwargs['recoveryConfig']
        if 'regularExpression' in kwargs:
            regular_expression = kwargs['regularExpression']
        if 'requestCookie' in kwargs:
            request_cookie = kwargs['requestCookie']
        if 'requestHeader' in kwargs:
            request_header = kwargs['requestHeader']
        if 'requestMethod' in kwargs:
            request_method = kwargs['requestMethod']
        if 'requestProtocol' in kwargs:
            request_protocol = kwargs['requestProtocol']
        if 'requestType' in kwargs:
            request_type = kwargs['requestType']
        if 'responseHeader' in kwargs:
            response_header = kwargs['responseHeader']
        if 'tokenAuthorization' in kwargs:
            token_authorization = kwargs['tokenAuthorization']
        if 'userAgent' in kwargs:
            user_agent = kwargs['userAgent']
        if 'userLocation' in kwargs:
            user_location = kwargs['userLocation']
        if 'userNetwork' in kwargs:
            user_network = kwargs['userNetwork']
        if 'variableError' in kwargs:
            variable_error = kwargs['variableError']
        if 'virtualWaitingRoomRequest' in kwargs:
            virtual_waiting_room_request = kwargs['virtualWaitingRoomRequest']
        if 'visitorPrioritizationRequest' in kwargs:
            visitor_prioritization_request = kwargs['visitorPrioritizationRequest']

        if advanced_im_match is not None:
            _setter("advanced_im_match", advanced_im_match)
        if bucket is not None:
            _setter("bucket", bucket)
        if cacheability is not None:
            _setter("cacheability", cacheability)
        if china_cdn_region is not None:
            _setter("china_cdn_region", china_cdn_region)
        if client_certificate is not None:
            _setter("client_certificate", client_certificate)
        if client_ip is not None:
            _setter("client_ip", client_ip)
        if client_ip_version is not None:
            _setter("client_ip_version", client_ip_version)
        if cloudlets_origin is not None:
            _setter("cloudlets_origin", cloudlets_origin)
        if content_delivery_network is not None:
            _setter("content_delivery_network", content_delivery_network)
        if content_type is not None:
            _setter("content_type", content_type)
        if device_characteristic is not None:
            _setter("device_characteristic", device_characteristic)
        if ecmd_auth_groups is not None:
            _setter("ecmd_auth_groups", ecmd_auth_groups)
        if ecmd_auth_scheme is not None:
            _setter("ecmd_auth_scheme", ecmd_auth_scheme)
        if ecmd_is_authenticated is not None:
            _setter("ecmd_is_authenticated", ecmd_is_authenticated)
        if ecmd_username is not None:
            _setter("ecmd_username", ecmd_username)
        if edge_workers_failure is not None:
            _setter("edge_workers_failure", edge_workers_failure)
        if file_extension is not None:
            _setter("file_extension", file_extension)
        if filename is not None:
            _setter("filename", filename)
        if hostname is not None:
            _setter("hostname", hostname)
        if match_advanced is not None:
            _setter("match_advanced", match_advanced)
        if match_cp_code is not None:
            _setter("match_cp_code", match_cp_code)
        if match_response_code is not None:
            _setter("match_response_code", match_response_code)
        if match_variable is not None:
            _setter("match_variable", match_variable)
        if metadata_stage is not None:
            _setter("metadata_stage", metadata_stage)
        if origin_timeout is not None:
            _setter("origin_timeout", origin_timeout)
        if path is not None:
            _setter("path", path)
        if query_string_parameter is not None:
            _setter("query_string_parameter", query_string_parameter)
        if random is not None:
            _setter("random", random)
        if recovery_config is not None:
            _setter("recovery_config", recovery_config)
        if regular_expression is not None:
            _setter("regular_expression", regular_expression)
        if request_cookie is not None:
            _setter("request_cookie", request_cookie)
        if request_header is not None:
            _setter("request_header", request_header)
        if request_method is not None:
            _setter("request_method", request_method)
        if request_protocol is not None:
            _setter("request_protocol", request_protocol)
        if request_type is not None:
            _setter("request_type", request_type)
        if response_header is not None:
            _setter("response_header", response_header)
        if time is not None:
            _setter("time", time)
        if token_authorization is not None:
            _setter("token_authorization", token_authorization)
        if user_agent is not None:
            _setter("user_agent", user_agent)
        if user_location is not None:
            _setter("user_location", user_location)
        if user_network is not None:
            _setter("user_network", user_network)
        if variable_error is not None:
            _setter("variable_error", variable_error)
        if virtual_waiting_room_request is not None:
            _setter("virtual_waiting_room_request", virtual_waiting_room_request)
        if visitor_prioritization_request is not None:
            _setter("visitor_prioritization_request", visitor_prioritization_request)

    @property
    @pulumi.getter(name="advancedImMatch")
    def advanced_im_match(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionAdvancedImMatchResult']:
        return pulumi.get(self, "advanced_im_match")

    @property
    @pulumi.getter
    def bucket(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionBucketResult']:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def cacheability(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionCacheabilityResult']:
        return pulumi.get(self, "cacheability")

    @property
    @pulumi.getter(name="chinaCdnRegion")
    def china_cdn_region(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionChinaCdnRegionResult']:
        return pulumi.get(self, "china_cdn_region")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientCertificateResult']:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientIpResult']:
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter(name="clientIpVersion")
    def client_ip_version(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientIpVersionResult']:
        return pulumi.get(self, "client_ip_version")

    @property
    @pulumi.getter(name="cloudletsOrigin")
    def cloudlets_origin(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionCloudletsOriginResult']:
        return pulumi.get(self, "cloudlets_origin")

    @property
    @pulumi.getter(name="contentDeliveryNetwork")
    def content_delivery_network(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionContentDeliveryNetworkResult']:
        return pulumi.get(self, "content_delivery_network")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionContentTypeResult']:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="deviceCharacteristic")
    def device_characteristic(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionDeviceCharacteristicResult']:
        return pulumi.get(self, "device_characteristic")

    @property
    @pulumi.getter(name="ecmdAuthGroups")
    def ecmd_auth_groups(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthGroupsResult']:
        return pulumi.get(self, "ecmd_auth_groups")

    @property
    @pulumi.getter(name="ecmdAuthScheme")
    def ecmd_auth_scheme(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthSchemeResult']:
        return pulumi.get(self, "ecmd_auth_scheme")

    @property
    @pulumi.getter(name="ecmdIsAuthenticated")
    def ecmd_is_authenticated(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdIsAuthenticatedResult']:
        return pulumi.get(self, "ecmd_is_authenticated")

    @property
    @pulumi.getter(name="ecmdUsername")
    def ecmd_username(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdUsernameResult']:
        return pulumi.get(self, "ecmd_username")

    @property
    @pulumi.getter(name="edgeWorkersFailure")
    def edge_workers_failure(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEdgeWorkersFailureResult']:
        return pulumi.get(self, "edge_workers_failure")

    @property
    @pulumi.getter(name="fileExtension")
    def file_extension(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionFileExtensionResult']:
        return pulumi.get(self, "file_extension")

    @property
    @pulumi.getter
    def filename(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionFilenameResult']:
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def hostname(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionHostnameResult']:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="matchAdvanced")
    def match_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchAdvancedResult']:
        return pulumi.get(self, "match_advanced")

    @property
    @pulumi.getter(name="matchCpCode")
    def match_cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeResult']:
        return pulumi.get(self, "match_cp_code")

    @property
    @pulumi.getter(name="matchResponseCode")
    def match_response_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchResponseCodeResult']:
        return pulumi.get(self, "match_response_code")

    @property
    @pulumi.getter(name="matchVariable")
    def match_variable(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchVariableResult']:
        return pulumi.get(self, "match_variable")

    @property
    @pulumi.getter(name="metadataStage")
    def metadata_stage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMetadataStageResult']:
        return pulumi.get(self, "metadata_stage")

    @property
    @pulumi.getter(name="originTimeout")
    def origin_timeout(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionOriginTimeoutResult']:
        return pulumi.get(self, "origin_timeout")

    @property
    @pulumi.getter
    def path(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionPathResult']:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="queryStringParameter")
    def query_string_parameter(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionQueryStringParameterResult']:
        return pulumi.get(self, "query_string_parameter")

    @property
    @pulumi.getter
    def random(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRandomResult']:
        return pulumi.get(self, "random")

    @property
    @pulumi.getter(name="recoveryConfig")
    def recovery_config(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRecoveryConfigResult']:
        return pulumi.get(self, "recovery_config")

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRegularExpressionResult']:
        return pulumi.get(self, "regular_expression")

    @property
    @pulumi.getter(name="requestCookie")
    def request_cookie(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestCookieResult']:
        return pulumi.get(self, "request_cookie")

    @property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestHeaderResult']:
        return pulumi.get(self, "request_header")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestMethodResult']:
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestProtocolResult']:
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestTypeResult']:
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter(name="responseHeader")
    def response_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionResponseHeaderResult']:
        return pulumi.get(self, "response_header")

    @property
    @pulumi.getter
    def time(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionTimeResult']:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="tokenAuthorization")
    def token_authorization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionTokenAuthorizationResult']:
        return pulumi.get(self, "token_authorization")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserAgentResult']:
        return pulumi.get(self, "user_agent")

    @property
    @pulumi.getter(name="userLocation")
    def user_location(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserLocationResult']:
        return pulumi.get(self, "user_location")

    @property
    @pulumi.getter(name="userNetwork")
    def user_network(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserNetworkResult']:
        return pulumi.get(self, "user_network")

    @property
    @pulumi.getter(name="variableError")
    def variable_error(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionVariableErrorResult']:
        return pulumi.get(self, "variable_error")

    @property
    @pulumi.getter(name="virtualWaitingRoomRequest")
    def virtual_waiting_room_request(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionVirtualWaitingRoomRequestResult']:
        return pulumi.get(self, "virtual_waiting_room_request")

    @property
    @pulumi.getter(name="visitorPrioritizationRequest")
    def visitor_prioritization_request(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionVisitorPrioritizationRequestResult']:
        return pulumi.get(self, "visitor_prioritization_request")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionAdvancedImMatchResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionAdvancedImMatchResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_on=match_on,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_on: Optional[str] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOn' in kwargs:
            match_on = kwargs['matchOn']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_on is not None:
            _setter("match_on", match_on)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionBucketResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 percentage: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionBucketResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            percentage=percentage,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             percentage: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if percentage is not None:
            _setter("percentage", percentage)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def percentage(self) -> Optional[int]:
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionCacheabilityResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionCacheabilityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionChinaCdnRegionResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionChinaCdnRegionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionClientCertificateResult(dict):
    def __init__(__self__, *,
                 is_certificate_present: Optional[bool] = None,
                 is_certificate_valid: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionClientCertificateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_certificate_present=is_certificate_present,
            is_certificate_valid=is_certificate_valid,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_certificate_present: Optional[bool] = None,
             is_certificate_valid: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isCertificatePresent' in kwargs:
            is_certificate_present = kwargs['isCertificatePresent']
        if 'isCertificateValid' in kwargs:
            is_certificate_valid = kwargs['isCertificateValid']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if is_certificate_present is not None:
            _setter("is_certificate_present", is_certificate_present)
        if is_certificate_valid is not None:
            _setter("is_certificate_valid", is_certificate_valid)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="isCertificatePresent")
    def is_certificate_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_certificate_present")

    @property
    @pulumi.getter(name="isCertificateValid")
    def is_certificate_valid(self) -> Optional[str]:
        return pulumi.get(self, "is_certificate_valid")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionClientIpResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_headers: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionClientIpResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            use_headers=use_headers,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             use_headers: Optional[bool] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useHeaders' in kwargs:
            use_headers = kwargs['useHeaders']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_headers is not None:
            _setter("use_headers", use_headers)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useHeaders")
    def use_headers(self) -> Optional[bool]:
        return pulumi.get(self, "use_headers")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionClientIpVersionResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_x_forwarded_for: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionClientIpVersionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            use_x_forwarded_for=use_x_forwarded_for,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             use_x_forwarded_for: Optional[bool] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useXForwardedFor' in kwargs:
            use_x_forwarded_for = kwargs['useXForwardedFor']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_x_forwarded_for is not None:
            _setter("use_x_forwarded_for", use_x_forwarded_for)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useXForwardedFor")
    def use_x_forwarded_for(self) -> Optional[bool]:
        return pulumi.get(self, "use_x_forwarded_for")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionCloudletsOriginResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionCloudletsOriginResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            origin_id=origin_id,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             origin_id: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'originId' in kwargs:
            origin_id = kwargs['originId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if origin_id is not None:
            _setter("origin_id", origin_id)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionContentDeliveryNetworkResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 network: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionContentDeliveryNetworkResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            network=network,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             network: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if network is not None:
            _setter("network", network)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionContentTypeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionContentTypeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_case_sensitive=match_case_sensitive,
            match_operator=match_operator,
            match_wildcard=match_wildcard,
            template_uuid=template_uuid,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_case_sensitive: Optional[bool] = None,
             match_operator: Optional[str] = None,
             match_wildcard: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchCaseSensitive' in kwargs:
            match_case_sensitive = kwargs['matchCaseSensitive']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchWildcard' in kwargs:
            match_wildcard = kwargs['matchWildcard']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_case_sensitive is not None:
            _setter("match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_wildcard is not None:
            _setter("match_wildcard", match_wildcard)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionDeviceCharacteristicResult(dict):
    def __init__(__self__, *,
                 boolean_value: Optional[bool] = None,
                 characteristic: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_wildcard: Optional[bool] = None,
                 numeric_match_operator: Optional[str] = None,
                 numeric_value: Optional[int] = None,
                 string_match_operator: Optional[str] = None,
                 string_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 version_match_operator: Optional[str] = None,
                 version_value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionDeviceCharacteristicResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            boolean_value=boolean_value,
            characteristic=characteristic,
            locked=locked,
            match_case_sensitive=match_case_sensitive,
            match_wildcard=match_wildcard,
            numeric_match_operator=numeric_match_operator,
            numeric_value=numeric_value,
            string_match_operator=string_match_operator,
            string_values=string_values,
            template_uuid=template_uuid,
            uuid=uuid,
            version_match_operator=version_match_operator,
            version_value=version_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             boolean_value: Optional[bool] = None,
             characteristic: Optional[str] = None,
             locked: Optional[bool] = None,
             match_case_sensitive: Optional[bool] = None,
             match_wildcard: Optional[bool] = None,
             numeric_match_operator: Optional[str] = None,
             numeric_value: Optional[int] = None,
             string_match_operator: Optional[str] = None,
             string_values: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             version_match_operator: Optional[str] = None,
             version_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'booleanValue' in kwargs:
            boolean_value = kwargs['booleanValue']
        if 'matchCaseSensitive' in kwargs:
            match_case_sensitive = kwargs['matchCaseSensitive']
        if 'matchWildcard' in kwargs:
            match_wildcard = kwargs['matchWildcard']
        if 'numericMatchOperator' in kwargs:
            numeric_match_operator = kwargs['numericMatchOperator']
        if 'numericValue' in kwargs:
            numeric_value = kwargs['numericValue']
        if 'stringMatchOperator' in kwargs:
            string_match_operator = kwargs['stringMatchOperator']
        if 'stringValues' in kwargs:
            string_values = kwargs['stringValues']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'versionMatchOperator' in kwargs:
            version_match_operator = kwargs['versionMatchOperator']
        if 'versionValue' in kwargs:
            version_value = kwargs['versionValue']

        if boolean_value is not None:
            _setter("boolean_value", boolean_value)
        if characteristic is not None:
            _setter("characteristic", characteristic)
        if locked is not None:
            _setter("locked", locked)
        if match_case_sensitive is not None:
            _setter("match_case_sensitive", match_case_sensitive)
        if match_wildcard is not None:
            _setter("match_wildcard", match_wildcard)
        if numeric_match_operator is not None:
            _setter("numeric_match_operator", numeric_match_operator)
        if numeric_value is not None:
            _setter("numeric_value", numeric_value)
        if string_match_operator is not None:
            _setter("string_match_operator", string_match_operator)
        if string_values is not None:
            _setter("string_values", string_values)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if version_match_operator is not None:
            _setter("version_match_operator", version_match_operator)
        if version_value is not None:
            _setter("version_value", version_value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[bool]:
        return pulumi.get(self, "boolean_value")

    @property
    @pulumi.getter
    def characteristic(self) -> Optional[str]:
        return pulumi.get(self, "characteristic")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @property
    @pulumi.getter(name="numericMatchOperator")
    def numeric_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "numeric_match_operator")

    @property
    @pulumi.getter(name="numericValue")
    def numeric_value(self) -> Optional[int]:
        return pulumi.get(self, "numeric_value")

    @property
    @pulumi.getter(name="stringMatchOperator")
    def string_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "string_match_operator")

    @property
    @pulumi.getter(name="stringValues")
    def string_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "string_values")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="versionMatchOperator")
    def version_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "version_match_operator")

    @property
    @pulumi.getter(name="versionValue")
    def version_value(self) -> Optional[str]:
        return pulumi.get(self, "version_value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthGroupsResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthGroupsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthSchemeResult(dict):
    def __init__(__self__, *,
                 auth_scheme: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthSchemeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_scheme=auth_scheme,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_scheme: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authScheme' in kwargs:
            auth_scheme = kwargs['authScheme']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if auth_scheme is not None:
            _setter("auth_scheme", auth_scheme)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="authScheme")
    def auth_scheme(self) -> Optional[str]:
        return pulumi.get(self, "auth_scheme")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionEcmdIsAuthenticatedResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionEcmdIsAuthenticatedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionEcmdUsernameResult(dict):
    def __init__(__self__, *,
                 length: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionEcmdUsernameResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            length=length,
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             length: Optional[str] = None,
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if length is not None:
            _setter("length", length)
        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[str]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionEdgeWorkersFailureResult(dict):
    def __init__(__self__, *,
                 exec_status: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionEdgeWorkersFailureResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exec_status=exec_status,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exec_status: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'execStatus' in kwargs:
            exec_status = kwargs['execStatus']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if exec_status is not None:
            _setter("exec_status", exec_status)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="execStatus")
    def exec_status(self) -> Optional[str]:
        return pulumi.get(self, "exec_status")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionFileExtensionResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionFileExtensionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_case_sensitive=match_case_sensitive,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_case_sensitive: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchCaseSensitive' in kwargs:
            match_case_sensitive = kwargs['matchCaseSensitive']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_case_sensitive is not None:
            _setter("match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionFilenameResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionFilenameResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_case_sensitive=match_case_sensitive,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_case_sensitive: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchCaseSensitive' in kwargs:
            match_case_sensitive = kwargs['matchCaseSensitive']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_case_sensitive is not None:
            _setter("match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionHostnameResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionHostnameResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchAdvancedResult(dict):
    def __init__(__self__, *,
                 close_xml: Optional[str] = None,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 open_xml: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionMatchAdvancedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            close_xml=close_xml,
            description=description,
            locked=locked,
            open_xml=open_xml,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             close_xml: Optional[str] = None,
             description: Optional[str] = None,
             locked: Optional[bool] = None,
             open_xml: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'closeXml' in kwargs:
            close_xml = kwargs['closeXml']
        if 'openXml' in kwargs:
            open_xml = kwargs['openXml']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if close_xml is not None:
            _setter("close_xml", close_xml)
        if description is not None:
            _setter("description", description)
        if locked is not None:
            _setter("locked", locked)
        if open_xml is not None:
            _setter("open_xml", open_xml)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="closeXml")
    def close_xml(self) -> Optional[str]:
        return pulumi.get(self, "close_xml")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="openXml")
    def open_xml(self) -> Optional[str]:
        return pulumi.get(self, "open_xml")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueResult'] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueResult']:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchResponseCodeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionMatchResponseCodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            lower_bound=lower_bound,
            match_operator=match_operator,
            template_uuid=template_uuid,
            upper_bound=upper_bound,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             lower_bound: Optional[int] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             upper_bound: Optional[int] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'lowerBound' in kwargs:
            lower_bound = kwargs['lowerBound']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'upperBound' in kwargs:
            upper_bound = kwargs['upperBound']

        if locked is not None:
            _setter("locked", locked)
        if lower_bound is not None:
            _setter("lower_bound", lower_bound)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if upper_bound is not None:
            _setter("upper_bound", upper_bound)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchVariableResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[str] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_expression: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 variable_values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionMatchVariableResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            lower_bound=lower_bound,
            match_case_sensitive=match_case_sensitive,
            match_operator=match_operator,
            match_wildcard=match_wildcard,
            template_uuid=template_uuid,
            upper_bound=upper_bound,
            uuid=uuid,
            variable_expression=variable_expression,
            variable_name=variable_name,
            variable_values=variable_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             lower_bound: Optional[str] = None,
             match_case_sensitive: Optional[bool] = None,
             match_operator: Optional[str] = None,
             match_wildcard: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             upper_bound: Optional[str] = None,
             uuid: Optional[str] = None,
             variable_expression: Optional[str] = None,
             variable_name: Optional[str] = None,
             variable_values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'lowerBound' in kwargs:
            lower_bound = kwargs['lowerBound']
        if 'matchCaseSensitive' in kwargs:
            match_case_sensitive = kwargs['matchCaseSensitive']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchWildcard' in kwargs:
            match_wildcard = kwargs['matchWildcard']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'upperBound' in kwargs:
            upper_bound = kwargs['upperBound']
        if 'variableExpression' in kwargs:
            variable_expression = kwargs['variableExpression']
        if 'variableName' in kwargs:
            variable_name = kwargs['variableName']
        if 'variableValues' in kwargs:
            variable_values = kwargs['variableValues']

        if locked is not None:
            _setter("locked", locked)
        if lower_bound is not None:
            _setter("lower_bound", lower_bound)
        if match_case_sensitive is not None:
            _setter("match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_wildcard is not None:
            _setter("match_wildcard", match_wildcard)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if upper_bound is not None:
            _setter("upper_bound", upper_bound)
        if uuid is not None:
            _setter("uuid", uuid)
        if variable_expression is not None:
            _setter("variable_expression", variable_expression)
        if variable_name is not None:
            _setter("variable_name", variable_name)
        if variable_values is not None:
            _setter("variable_values", variable_values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[str]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[str]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableExpression")
    def variable_expression(self) -> Optional[str]:
        return pulumi.get(self, "variable_expression")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @property
    @pulumi.getter(name="variableValues")
    def variable_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "variable_values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionMetadataStageResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionMetadataStageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionOriginTimeoutResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionOriginTimeoutResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionPathResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 normalize: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionPathResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_case_sensitive=match_case_sensitive,
            match_operator=match_operator,
            normalize=normalize,
            template_uuid=template_uuid,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_case_sensitive: Optional[bool] = None,
             match_operator: Optional[str] = None,
             normalize: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchCaseSensitive' in kwargs:
            match_case_sensitive = kwargs['matchCaseSensitive']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_case_sensitive is not None:
            _setter("match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if normalize is not None:
            _setter("normalize", normalize)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter
    def normalize(self) -> Optional[bool]:
        return pulumi.get(self, "normalize")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionQueryStringParameterResult(dict):
    def __init__(__self__, *,
                 escape_value: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_name: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionQueryStringParameterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            escape_value=escape_value,
            locked=locked,
            lower_bound=lower_bound,
            match_case_sensitive_name=match_case_sensitive_name,
            match_case_sensitive_value=match_case_sensitive_value,
            match_operator=match_operator,
            match_wildcard_name=match_wildcard_name,
            match_wildcard_value=match_wildcard_value,
            parameter_name=parameter_name,
            template_uuid=template_uuid,
            upper_bound=upper_bound,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             escape_value: Optional[bool] = None,
             locked: Optional[bool] = None,
             lower_bound: Optional[int] = None,
             match_case_sensitive_name: Optional[bool] = None,
             match_case_sensitive_value: Optional[bool] = None,
             match_operator: Optional[str] = None,
             match_wildcard_name: Optional[bool] = None,
             match_wildcard_value: Optional[bool] = None,
             parameter_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             upper_bound: Optional[int] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'escapeValue' in kwargs:
            escape_value = kwargs['escapeValue']
        if 'lowerBound' in kwargs:
            lower_bound = kwargs['lowerBound']
        if 'matchCaseSensitiveName' in kwargs:
            match_case_sensitive_name = kwargs['matchCaseSensitiveName']
        if 'matchCaseSensitiveValue' in kwargs:
            match_case_sensitive_value = kwargs['matchCaseSensitiveValue']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchWildcardName' in kwargs:
            match_wildcard_name = kwargs['matchWildcardName']
        if 'matchWildcardValue' in kwargs:
            match_wildcard_value = kwargs['matchWildcardValue']
        if 'parameterName' in kwargs:
            parameter_name = kwargs['parameterName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'upperBound' in kwargs:
            upper_bound = kwargs['upperBound']

        if escape_value is not None:
            _setter("escape_value", escape_value)
        if locked is not None:
            _setter("locked", locked)
        if lower_bound is not None:
            _setter("lower_bound", lower_bound)
        if match_case_sensitive_name is not None:
            _setter("match_case_sensitive_name", match_case_sensitive_name)
        if match_case_sensitive_value is not None:
            _setter("match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_wildcard_name is not None:
            _setter("match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            _setter("match_wildcard_value", match_wildcard_value)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if upper_bound is not None:
            _setter("upper_bound", upper_bound)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="escapeValue")
    def escape_value(self) -> Optional[bool]:
        return pulumi.get(self, "escape_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchCaseSensitiveName")
    def match_case_sensitive_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_name")

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "parameter_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionRandomResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[int] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionRandomResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[int] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if bucket is not None:
            _setter("bucket", bucket)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[int]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionRecoveryConfigResult(dict):
    def __init__(__self__, *,
                 config_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionRecoveryConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_name=config_name,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_name: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'configName' in kwargs:
            config_name = kwargs['configName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if config_name is not None:
            _setter("config_name", config_name)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> Optional[str]:
        return pulumi.get(self, "config_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionRegularExpressionResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match_string: Optional[str] = None,
                 regex: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionRegularExpressionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            case_sensitive=case_sensitive,
            locked=locked,
            match_string=match_string,
            regex=regex,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             case_sensitive: Optional[bool] = None,
             locked: Optional[bool] = None,
             match_string: Optional[str] = None,
             regex: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'caseSensitive' in kwargs:
            case_sensitive = kwargs['caseSensitive']
        if 'matchString' in kwargs:
            match_string = kwargs['matchString']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if case_sensitive is not None:
            _setter("case_sensitive", case_sensitive)
        if locked is not None:
            _setter("locked", locked)
        if match_string is not None:
            _setter("match_string", match_string)
        if regex is not None:
            _setter("regex", regex)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchString")
    def match_string(self) -> Optional[str]:
        return pulumi.get(self, "match_string")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionRequestCookieResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_name: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionRequestCookieResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_name=cookie_name,
            locked=locked,
            lower_bound=lower_bound,
            match_case_sensitive_name=match_case_sensitive_name,
            match_case_sensitive_value=match_case_sensitive_value,
            match_operator=match_operator,
            match_wildcard_name=match_wildcard_name,
            match_wildcard_value=match_wildcard_value,
            template_uuid=template_uuid,
            upper_bound=upper_bound,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_name: Optional[str] = None,
             locked: Optional[bool] = None,
             lower_bound: Optional[int] = None,
             match_case_sensitive_name: Optional[bool] = None,
             match_case_sensitive_value: Optional[bool] = None,
             match_operator: Optional[str] = None,
             match_wildcard_name: Optional[bool] = None,
             match_wildcard_value: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             upper_bound: Optional[int] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cookieName' in kwargs:
            cookie_name = kwargs['cookieName']
        if 'lowerBound' in kwargs:
            lower_bound = kwargs['lowerBound']
        if 'matchCaseSensitiveName' in kwargs:
            match_case_sensitive_name = kwargs['matchCaseSensitiveName']
        if 'matchCaseSensitiveValue' in kwargs:
            match_case_sensitive_value = kwargs['matchCaseSensitiveValue']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchWildcardName' in kwargs:
            match_wildcard_name = kwargs['matchWildcardName']
        if 'matchWildcardValue' in kwargs:
            match_wildcard_value = kwargs['matchWildcardValue']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'upperBound' in kwargs:
            upper_bound = kwargs['upperBound']

        if cookie_name is not None:
            _setter("cookie_name", cookie_name)
        if locked is not None:
            _setter("locked", locked)
        if lower_bound is not None:
            _setter("lower_bound", lower_bound)
        if match_case_sensitive_name is not None:
            _setter("match_case_sensitive_name", match_case_sensitive_name)
        if match_case_sensitive_value is not None:
            _setter("match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_wildcard_name is not None:
            _setter("match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            _setter("match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if upper_bound is not None:
            _setter("upper_bound", upper_bound)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchCaseSensitiveName")
    def match_case_sensitive_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_name")

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionRequestHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionRequestHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_name=header_name,
            locked=locked,
            match_case_sensitive_value=match_case_sensitive_value,
            match_operator=match_operator,
            match_wildcard_name=match_wildcard_name,
            match_wildcard_value=match_wildcard_value,
            template_uuid=template_uuid,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_name: Optional[str] = None,
             locked: Optional[bool] = None,
             match_case_sensitive_value: Optional[bool] = None,
             match_operator: Optional[str] = None,
             match_wildcard_name: Optional[bool] = None,
             match_wildcard_value: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'matchCaseSensitiveValue' in kwargs:
            match_case_sensitive_value = kwargs['matchCaseSensitiveValue']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchWildcardName' in kwargs:
            match_wildcard_name = kwargs['matchWildcardName']
        if 'matchWildcardValue' in kwargs:
            match_wildcard_value = kwargs['matchWildcardValue']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if header_name is not None:
            _setter("header_name", header_name)
        if locked is not None:
            _setter("locked", locked)
        if match_case_sensitive_value is not None:
            _setter("match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_wildcard_name is not None:
            _setter("match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            _setter("match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionRequestMethodResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionRequestMethodResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionRequestProtocolResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionRequestProtocolResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionRequestTypeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionRequestTypeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionResponseHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionResponseHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_name=header_name,
            locked=locked,
            lower_bound=lower_bound,
            match_case_sensitive_value=match_case_sensitive_value,
            match_operator=match_operator,
            match_wildcard_name=match_wildcard_name,
            match_wildcard_value=match_wildcard_value,
            template_uuid=template_uuid,
            upper_bound=upper_bound,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_name: Optional[str] = None,
             locked: Optional[bool] = None,
             lower_bound: Optional[int] = None,
             match_case_sensitive_value: Optional[bool] = None,
             match_operator: Optional[str] = None,
             match_wildcard_name: Optional[bool] = None,
             match_wildcard_value: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             upper_bound: Optional[int] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'lowerBound' in kwargs:
            lower_bound = kwargs['lowerBound']
        if 'matchCaseSensitiveValue' in kwargs:
            match_case_sensitive_value = kwargs['matchCaseSensitiveValue']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchWildcardName' in kwargs:
            match_wildcard_name = kwargs['matchWildcardName']
        if 'matchWildcardValue' in kwargs:
            match_wildcard_value = kwargs['matchWildcardValue']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'upperBound' in kwargs:
            upper_bound = kwargs['upperBound']

        if header_name is not None:
            _setter("header_name", header_name)
        if locked is not None:
            _setter("locked", locked)
        if lower_bound is not None:
            _setter("lower_bound", lower_bound)
        if match_case_sensitive_value is not None:
            _setter("match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_wildcard_name is not None:
            _setter("match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            _setter("match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if upper_bound is not None:
            _setter("upper_bound", upper_bound)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionTimeResult(dict):
    def __init__(__self__, *,
                 apply_daylight_savings_time: Optional[bool] = None,
                 begin_date: Optional[str] = None,
                 end_date: Optional[str] = None,
                 lasting_date: Optional[str] = None,
                 lasting_duration: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 repeat_begin_date: Optional[str] = None,
                 repeat_duration: Optional[str] = None,
                 repeat_interval: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionTimeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            apply_daylight_savings_time=apply_daylight_savings_time,
            begin_date=begin_date,
            end_date=end_date,
            lasting_date=lasting_date,
            lasting_duration=lasting_duration,
            locked=locked,
            match_operator=match_operator,
            repeat_begin_date=repeat_begin_date,
            repeat_duration=repeat_duration,
            repeat_interval=repeat_interval,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             apply_daylight_savings_time: Optional[bool] = None,
             begin_date: Optional[str] = None,
             end_date: Optional[str] = None,
             lasting_date: Optional[str] = None,
             lasting_duration: Optional[str] = None,
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             repeat_begin_date: Optional[str] = None,
             repeat_duration: Optional[str] = None,
             repeat_interval: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'applyDaylightSavingsTime' in kwargs:
            apply_daylight_savings_time = kwargs['applyDaylightSavingsTime']
        if 'beginDate' in kwargs:
            begin_date = kwargs['beginDate']
        if 'endDate' in kwargs:
            end_date = kwargs['endDate']
        if 'lastingDate' in kwargs:
            lasting_date = kwargs['lastingDate']
        if 'lastingDuration' in kwargs:
            lasting_duration = kwargs['lastingDuration']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'repeatBeginDate' in kwargs:
            repeat_begin_date = kwargs['repeatBeginDate']
        if 'repeatDuration' in kwargs:
            repeat_duration = kwargs['repeatDuration']
        if 'repeatInterval' in kwargs:
            repeat_interval = kwargs['repeatInterval']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if apply_daylight_savings_time is not None:
            _setter("apply_daylight_savings_time", apply_daylight_savings_time)
        if begin_date is not None:
            _setter("begin_date", begin_date)
        if end_date is not None:
            _setter("end_date", end_date)
        if lasting_date is not None:
            _setter("lasting_date", lasting_date)
        if lasting_duration is not None:
            _setter("lasting_duration", lasting_duration)
        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if repeat_begin_date is not None:
            _setter("repeat_begin_date", repeat_begin_date)
        if repeat_duration is not None:
            _setter("repeat_duration", repeat_duration)
        if repeat_interval is not None:
            _setter("repeat_interval", repeat_interval)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="applyDaylightSavingsTime")
    def apply_daylight_savings_time(self) -> Optional[bool]:
        return pulumi.get(self, "apply_daylight_savings_time")

    @property
    @pulumi.getter(name="beginDate")
    def begin_date(self) -> Optional[str]:
        return pulumi.get(self, "begin_date")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="lastingDate")
    def lasting_date(self) -> Optional[str]:
        return pulumi.get(self, "lasting_date")

    @property
    @pulumi.getter(name="lastingDuration")
    def lasting_duration(self) -> Optional[str]:
        return pulumi.get(self, "lasting_duration")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="repeatBeginDate")
    def repeat_begin_date(self) -> Optional[str]:
        return pulumi.get(self, "repeat_begin_date")

    @property
    @pulumi.getter(name="repeatDuration")
    def repeat_duration(self) -> Optional[str]:
        return pulumi.get(self, "repeat_duration")

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[str]:
        return pulumi.get(self, "repeat_interval")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionTokenAuthorizationResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 status_lists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionTokenAuthorizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            status_lists=status_lists,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             status_lists: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'statusLists' in kwargs:
            status_lists = kwargs['statusLists']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if status_lists is not None:
            _setter("status_lists", status_lists)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="statusLists")
    def status_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "status_lists")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionUserAgentResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionUserAgentResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_case_sensitive=match_case_sensitive,
            match_operator=match_operator,
            match_wildcard=match_wildcard,
            template_uuid=template_uuid,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_case_sensitive: Optional[bool] = None,
             match_operator: Optional[str] = None,
             match_wildcard: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchCaseSensitive' in kwargs:
            match_case_sensitive = kwargs['matchCaseSensitive']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchWildcard' in kwargs:
            match_wildcard = kwargs['matchWildcard']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_case_sensitive is not None:
            _setter("match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_wildcard is not None:
            _setter("match_wildcard", match_wildcard)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionUserLocationResult(dict):
    def __init__(__self__, *,
                 check_ips: Optional[str] = None,
                 continent_values: Optional[Sequence[str]] = None,
                 country_values: Optional[Sequence[str]] = None,
                 field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 region_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 use_only_first_x_forwarded_for_ip: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionUserLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            check_ips=check_ips,
            continent_values=continent_values,
            country_values=country_values,
            field=field,
            locked=locked,
            match_operator=match_operator,
            region_values=region_values,
            template_uuid=template_uuid,
            use_only_first_x_forwarded_for_ip=use_only_first_x_forwarded_for_ip,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             check_ips: Optional[str] = None,
             continent_values: Optional[Sequence[str]] = None,
             country_values: Optional[Sequence[str]] = None,
             field: Optional[str] = None,
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             region_values: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             use_only_first_x_forwarded_for_ip: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'checkIps' in kwargs:
            check_ips = kwargs['checkIps']
        if 'continentValues' in kwargs:
            continent_values = kwargs['continentValues']
        if 'countryValues' in kwargs:
            country_values = kwargs['countryValues']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'regionValues' in kwargs:
            region_values = kwargs['regionValues']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useOnlyFirstXForwardedForIp' in kwargs:
            use_only_first_x_forwarded_for_ip = kwargs['useOnlyFirstXForwardedForIp']

        if check_ips is not None:
            _setter("check_ips", check_ips)
        if continent_values is not None:
            _setter("continent_values", continent_values)
        if country_values is not None:
            _setter("country_values", country_values)
        if field is not None:
            _setter("field", field)
        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if region_values is not None:
            _setter("region_values", region_values)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_only_first_x_forwarded_for_ip is not None:
            _setter("use_only_first_x_forwarded_for_ip", use_only_first_x_forwarded_for_ip)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="continentValues")
    def continent_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "continent_values")

    @property
    @pulumi.getter(name="countryValues")
    def country_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "country_values")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="regionValues")
    def region_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "region_values")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useOnlyFirstXForwardedForIp")
    def use_only_first_x_forwarded_for_ip(self) -> Optional[bool]:
        return pulumi.get(self, "use_only_first_x_forwarded_for_ip")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionUserNetworkResult(dict):
    def __init__(__self__, *,
                 bandwidth_values: Optional[Sequence[str]] = None,
                 check_ips: Optional[str] = None,
                 field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 network_type_values: Optional[Sequence[str]] = None,
                 network_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 use_only_first_x_forwarded_for_ip: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionUserNetworkResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bandwidth_values=bandwidth_values,
            check_ips=check_ips,
            field=field,
            locked=locked,
            match_operator=match_operator,
            network_type_values=network_type_values,
            network_values=network_values,
            template_uuid=template_uuid,
            use_only_first_x_forwarded_for_ip=use_only_first_x_forwarded_for_ip,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bandwidth_values: Optional[Sequence[str]] = None,
             check_ips: Optional[str] = None,
             field: Optional[str] = None,
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             network_type_values: Optional[Sequence[str]] = None,
             network_values: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             use_only_first_x_forwarded_for_ip: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bandwidthValues' in kwargs:
            bandwidth_values = kwargs['bandwidthValues']
        if 'checkIps' in kwargs:
            check_ips = kwargs['checkIps']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'networkTypeValues' in kwargs:
            network_type_values = kwargs['networkTypeValues']
        if 'networkValues' in kwargs:
            network_values = kwargs['networkValues']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useOnlyFirstXForwardedForIp' in kwargs:
            use_only_first_x_forwarded_for_ip = kwargs['useOnlyFirstXForwardedForIp']

        if bandwidth_values is not None:
            _setter("bandwidth_values", bandwidth_values)
        if check_ips is not None:
            _setter("check_ips", check_ips)
        if field is not None:
            _setter("field", field)
        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if network_type_values is not None:
            _setter("network_type_values", network_type_values)
        if network_values is not None:
            _setter("network_values", network_values)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_only_first_x_forwarded_for_ip is not None:
            _setter("use_only_first_x_forwarded_for_ip", use_only_first_x_forwarded_for_ip)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="bandwidthValues")
    def bandwidth_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "bandwidth_values")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="networkTypeValues")
    def network_type_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_type_values")

    @property
    @pulumi.getter(name="networkValues")
    def network_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_values")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useOnlyFirstXForwardedForIp")
    def use_only_first_x_forwarded_for_ip(self) -> Optional[bool]:
        return pulumi.get(self, "use_only_first_x_forwarded_for_ip")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionVariableErrorResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 result: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_names: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionVariableErrorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            result=result,
            template_uuid=template_uuid,
            uuid=uuid,
            variable_names=variable_names,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             result: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             variable_names: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'variableNames' in kwargs:
            variable_names = kwargs['variableNames']

        if locked is not None:
            _setter("locked", locked)
        if result is not None:
            _setter("result", result)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if variable_names is not None:
            _setter("variable_names", variable_names)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def result(self) -> Optional[bool]:
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableNames")
    def variable_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "variable_names")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionVirtualWaitingRoomRequestResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionVirtualWaitingRoomRequestResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_on=match_on,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_on: Optional[str] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOn' in kwargs:
            match_on = kwargs['matchOn']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_on is not None:
            _setter("match_on", match_on)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionVisitorPrioritizationRequestResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CriterionVisitorPrioritizationRequestResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_on=match_on,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_on: Optional[str] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOn' in kwargs:
            match_on = kwargs['matchOn']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_on is not None:
            _setter("match_on", match_on)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CustomOverrideResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 override_id: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230105CustomOverrideResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            override_id=override_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             override_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'overrideId' in kwargs:
            override_id = kwargs['overrideId']

        if name is not None:
            _setter("name", name)
        if override_id is not None:
            _setter("override_id", override_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideId")
    def override_id(self) -> Optional[str]:
        return pulumi.get(self, "override_id")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105VariableResult(dict):
    def __init__(__self__, *,
                 description: str,
                 hidden: bool,
                 name: str,
                 sensitive: bool,
                 value: str):
        GetPropertyRulesBuilderRulesV20230105VariableResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            hidden=hidden,
            name=name,
            sensitive=sensitive,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: str,
             hidden: bool,
             name: str,
             sensitive: bool,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("description", description)
        _setter("hidden", hidden)
        _setter("name", name)
        _setter("sensitive", sensitive)
        _setter("value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hidden(self) -> bool:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sensitive(self) -> bool:
        return pulumi.get(self, "sensitive")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530Result(dict):
    def __init__(__self__, *,
                 name: str,
                 advanced_override: Optional[str] = None,
                 behaviors: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResult']] = None,
                 childrens: Optional[Sequence[str]] = None,
                 comments: Optional[str] = None,
                 criteria_locked: Optional[bool] = None,
                 criteria_must_satisfy: Optional[str] = None,
                 criterions: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530CriterionResult']] = None,
                 custom_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CustomOverrideResult'] = None,
                 is_secure: Optional[bool] = None,
                 template_link: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530VariableResult']] = None):
        GetPropertyRulesBuilderRulesV20230530Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            advanced_override=advanced_override,
            behaviors=behaviors,
            childrens=childrens,
            comments=comments,
            criteria_locked=criteria_locked,
            criteria_must_satisfy=criteria_must_satisfy,
            criterions=criterions,
            custom_override=custom_override,
            is_secure=is_secure,
            template_link=template_link,
            template_uuid=template_uuid,
            uuid=uuid,
            variables=variables,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             advanced_override: Optional[str] = None,
             behaviors: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResult']] = None,
             childrens: Optional[Sequence[str]] = None,
             comments: Optional[str] = None,
             criteria_locked: Optional[bool] = None,
             criteria_must_satisfy: Optional[str] = None,
             criterions: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530CriterionResult']] = None,
             custom_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CustomOverrideResult'] = None,
             is_secure: Optional[bool] = None,
             template_link: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             variables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530VariableResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'advancedOverride' in kwargs:
            advanced_override = kwargs['advancedOverride']
        if 'criteriaLocked' in kwargs:
            criteria_locked = kwargs['criteriaLocked']
        if 'criteriaMustSatisfy' in kwargs:
            criteria_must_satisfy = kwargs['criteriaMustSatisfy']
        if 'customOverride' in kwargs:
            custom_override = kwargs['customOverride']
        if 'isSecure' in kwargs:
            is_secure = kwargs['isSecure']
        if 'templateLink' in kwargs:
            template_link = kwargs['templateLink']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        _setter("name", name)
        if advanced_override is not None:
            _setter("advanced_override", advanced_override)
        if behaviors is not None:
            _setter("behaviors", behaviors)
        if childrens is not None:
            _setter("childrens", childrens)
        if comments is not None:
            _setter("comments", comments)
        if criteria_locked is not None:
            _setter("criteria_locked", criteria_locked)
        if criteria_must_satisfy is not None:
            _setter("criteria_must_satisfy", criteria_must_satisfy)
        if criterions is not None:
            _setter("criterions", criterions)
        if custom_override is not None:
            _setter("custom_override", custom_override)
        if is_secure is not None:
            _setter("is_secure", is_secure)
        if template_link is not None:
            _setter("template_link", template_link)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if variables is not None:
            _setter("variables", variables)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="advancedOverride")
    def advanced_override(self) -> Optional[str]:
        return pulumi.get(self, "advanced_override")

    @property
    @pulumi.getter
    def behaviors(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResult']]:
        return pulumi.get(self, "behaviors")

    @property
    @pulumi.getter
    def childrens(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "childrens")

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="criteriaLocked")
    def criteria_locked(self) -> Optional[bool]:
        return pulumi.get(self, "criteria_locked")

    @property
    @pulumi.getter(name="criteriaMustSatisfy")
    def criteria_must_satisfy(self) -> Optional[str]:
        return pulumi.get(self, "criteria_must_satisfy")

    @property
    @pulumi.getter
    def criterions(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530CriterionResult']]:
        return pulumi.get(self, "criterions")

    @property
    @pulumi.getter(name="customOverride")
    def custom_override(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CustomOverrideResult']:
        return pulumi.get(self, "custom_override")

    @property
    @pulumi.getter(name="isSecure")
    def is_secure(self) -> Optional[bool]:
        return pulumi.get(self, "is_secure")

    @property
    @pulumi.getter(name="templateLink")
    def template_link(self) -> Optional[str]:
        return pulumi.get(self, "template_link")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530VariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorResult(dict):
    def __init__(__self__, *,
                 ad_scaler_circuit_breaker: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdScalerCircuitBreakerResult'] = None,
                 adaptive_acceleration: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveAccelerationResult'] = None,
                 adaptive_image_compression: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveImageCompressionResult'] = None,
                 advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdvancedResult'] = None,
                 aggregated_reporting: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAggregatedReportingResult'] = None,
                 akamaizer: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerResult'] = None,
                 akamaizer_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerTagResult'] = None,
                 all_http_in_cache_hierarchy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllHttpInCacheHierarchyResult'] = None,
                 allow_cloudlets_origins: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowCloudletsOriginsResult'] = None,
                 allow_delete: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowDeleteResult'] = None,
                 allow_https_cache_key_sharing: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsCacheKeySharingResult'] = None,
                 allow_https_downgrade: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsDowngradeResult'] = None,
                 allow_options: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowOptionsResult'] = None,
                 allow_patch: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowPatchResult'] = None,
                 allow_post: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowPostResult'] = None,
                 allow_put: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowPutResult'] = None,
                 allow_transfer_encoding: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowTransferEncodingResult'] = None,
                 alt_svc_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAltSvcHeaderResult'] = None,
                 api_prioritization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationResult'] = None,
                 application_load_balancer: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerResult'] = None,
                 audience_segmentation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationResult'] = None,
                 auto_domain_validation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAutoDomainValidationResult'] = None,
                 base_directory: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBaseDirectoryResult'] = None,
                 boss_beaconing: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBossBeaconingResult'] = None,
                 breadcrumbs: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBreadcrumbsResult'] = None,
                 break_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBreakConnectionResult'] = None,
                 brotli: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBrotliResult'] = None,
                 cache_error: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheErrorResult'] = None,
                 cache_id: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheIdResult'] = None,
                 cache_key_ignore_case: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyIgnoreCaseResult'] = None,
                 cache_key_query_params: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyQueryParamsResult'] = None,
                 cache_key_rewrite: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyRewriteResult'] = None,
                 cache_post: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCachePostResult'] = None,
                 cache_redirect: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheRedirectResult'] = None,
                 cache_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagResult'] = None,
                 cache_tag_visible: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagVisibleResult'] = None,
                 caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCachingResult'] = None,
                 central_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCentralAuthorizationResult'] = None,
                 chase_redirects: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorChaseRedirectsResult'] = None,
                 client_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorClientCharacteristicsResult'] = None,
                 cloud_interconnects: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCloudInterconnectsResult'] = None,
                 cloud_wrapper: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperResult'] = None,
                 cloud_wrapper_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperAdvancedResult'] = None,
                 common_media_client_data: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCommonMediaClientDataResult'] = None,
                 conditional_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorConditionalOriginResult'] = None,
                 construct_response: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorConstructResponseResult'] = None,
                 content_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsResult'] = None,
                 content_characteristics_amd: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsAmdResult'] = None,
                 content_characteristics_dd: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsDdResult'] = None,
                 content_characteristics_wsd_large_file: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLargeFileResult'] = None,
                 content_characteristics_wsd_live: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLiveResult'] = None,
                 content_characteristics_wsd_vod: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdVodResult'] = None,
                 content_pre_position: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentPrePositionResult'] = None,
                 content_targeting_protection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentTargetingProtectionResult'] = None,
                 cors_support: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCorsSupportResult'] = None,
                 cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeResult'] = None,
                 custom_behavior: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCustomBehaviorResult'] = None,
                 datastream: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDatastreamResult'] = None,
                 dcp: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpResult'] = None,
                 dcp_auth_hmac_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthHmacTransformationResult'] = None,
                 dcp_auth_regex_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthRegexTransformationResult'] = None,
                 dcp_auth_substring_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthSubstringTransformationResult'] = None,
                 dcp_auth_variable_extractor: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthVariableExtractorResult'] = None,
                 dcp_default_authz_groups: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpDefaultAuthzGroupsResult'] = None,
                 dcp_dev_relations: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpDevRelationsResult'] = None,
                 dcp_real_time_auth: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpRealTimeAuthResult'] = None,
                 delivery_receipt: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDeliveryReceiptResult'] = None,
                 deny_access: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDenyAccessResult'] = None,
                 deny_direct_failover_access: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDenyDirectFailoverAccessResult'] = None,
                 device_characteristic_cache_id: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicCacheIdResult'] = None,
                 device_characteristic_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicHeaderResult'] = None,
                 dns_async_refresh: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDnsAsyncRefreshResult'] = None,
                 dns_prefresh: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDnsPrefreshResult'] = None,
                 downgrade_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDowngradeProtocolResult'] = None,
                 download_complete_marker: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDownloadCompleteMarkerResult'] = None,
                 download_notification: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDownloadNotificationResult'] = None,
                 downstream_cache: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDownstreamCacheResult'] = None,
                 dynamic_throughtput_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationResult'] = None,
                 dynamic_throughtput_optimization_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationOverrideResult'] = None,
                 dynamic_web_content: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDynamicWebContentResult'] = None,
                 ecms_bulk_upload: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsBulkUploadResult'] = None,
                 ecms_database: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatabaseResult'] = None,
                 ecms_dataset: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatasetResult'] = None,
                 ecms_object_key: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsObjectKeyResult'] = None,
                 edge_connect: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeConnectResult'] = None,
                 edge_load_balancing_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingAdvancedResult'] = None,
                 edge_load_balancing_data_center: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterResult'] = None,
                 edge_load_balancing_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingOriginResult'] = None,
                 edge_origin_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeOriginAuthorizationResult'] = None,
                 edge_redirector: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorResult'] = None,
                 edge_scape: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeScapeResult'] = None,
                 edge_side_includes: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeSideIncludesResult'] = None,
                 edge_worker: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeWorkerResult'] = None,
                 enhanced_akamai_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedAkamaiProtocolResult'] = None,
                 enhanced_proxy_detection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedProxyDetectionResult'] = None,
                 epd_forward_header_enrichment: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEpdForwardHeaderEnrichmentResult'] = None,
                 fail_action: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionResult'] = None,
                 failover_bot_manager_feature_compatibility: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailoverBotManagerFeatureCompatibilityResult'] = None,
                 fast_invalidate: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFastInvalidateResult'] = None,
                 first_party_marketing: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingResult'] = None,
                 first_party_marketing_plus: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusResult'] = None,
                 forward_rewrite: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteResult'] = None,
                 g2oheader: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorG2oheaderResult'] = None,
                 global_request_number: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorGlobalRequestNumberResult'] = None,
                 graphql_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorGraphqlCachingResult'] = None,
                 gzip_response: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorGzipResponseResult'] = None,
                 hd_data_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHdDataAdvancedResult'] = None,
                 health_detection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHealthDetectionResult'] = None,
                 hsaf_eip_binding: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHsafEipBindingResult'] = None,
                 http2: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttp2Result'] = None,
                 http3: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttp3Result'] = None,
                 http_strict_transport_security: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttpStrictTransportSecurityResult'] = None,
                 http_to_https_upgrade: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttpToHttpsUpgradeResult'] = None,
                 im_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImOverrideResult'] = None,
                 image_and_video_manager: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerResult'] = None,
                 image_manager: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerResult'] = None,
                 image_manager_video: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoResult'] = None,
                 include: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorIncludeResult'] = None,
                 instant: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorInstantResult'] = None,
                 instant_config: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorInstantConfigResult'] = None,
                 large_file_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationResult'] = None,
                 large_file_optimization_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationAdvancedResult'] = None,
                 limit_bit_rate: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateResult'] = None,
                 log_custom: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLogCustomResult'] = None,
                 m_pulse: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMPulseResult'] = None,
                 manifest_personalization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorManifestPersonalizationResult'] = None,
                 manifest_rerouting: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorManifestReroutingResult'] = None,
                 manual_server_push: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorManualServerPushResult'] = None,
                 media_acceleration: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationResult'] = None,
                 media_acceleration_quic_optout: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationQuicOptoutResult'] = None,
                 media_client: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaClientResult'] = None,
                 media_file_retrieval_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaFileRetrievalOptimizationResult'] = None,
                 media_origin_failover: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaOriginFailoverResult'] = None,
                 metadata_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMetadataCachingResult'] = None,
                 mobile_sdk_performance: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMobileSdkPerformanceResult'] = None,
                 modify_incoming_request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingRequestHeaderResult'] = None,
                 modify_incoming_response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingResponseHeaderResult'] = None,
                 modify_outgoing_request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingRequestHeaderResult'] = None,
                 modify_outgoing_response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingResponseHeaderResult'] = None,
                 modify_via_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyViaHeaderResult'] = None,
                 origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginResult'] = None,
                 origin_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsResult'] = None,
                 origin_characteristics_wsd: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsWsdResult'] = None,
                 origin_failure_recovery_method: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryMethodResult'] = None,
                 origin_failure_recovery_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryPolicyResult'] = None,
                 origin_ip_acl: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginIpAclResult'] = None,
                 persistent_client_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPersistentClientConnectionResult'] = None,
                 persistent_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPersistentConnectionResult'] = None,
                 personally_identifiable_information: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPersonallyIdentifiableInformationResult'] = None,
                 phased_release: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseResult'] = None,
                 preconnect: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPreconnectResult'] = None,
                 predictive_content_delivery: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPredictiveContentDeliveryResult'] = None,
                 predictive_prefetching: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPredictivePrefetchingResult'] = None,
                 prefetch: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchResult'] = None,
                 prefetchable: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchableResult'] = None,
                 prefresh_cache: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPrefreshCacheResult'] = None,
                 quality: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorQualityResult'] = None,
                 quic_beta: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorQuicBetaResult'] = None,
                 random_seek: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRandomSeekResult'] = None,
                 rapid: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRapidResult'] = None,
                 read_timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorReadTimeoutResult'] = None,
                 real_time_reporting: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRealTimeReportingResult'] = None,
                 real_user_monitoring: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRealUserMonitoringResult'] = None,
                 redirect: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRedirectResult'] = None,
                 redirectplus: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRedirectplusResult'] = None,
                 referer_checking: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRefererCheckingResult'] = None,
                 remove_query_parameter: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRemoveQueryParameterResult'] = None,
                 remove_vary: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRemoveVaryResult'] = None,
                 report: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorReportResult'] = None,
                 request_control: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlResult'] = None,
                 request_type_marker: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestTypeMarkerResult'] = None,
                 resource_optimizer: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerResult'] = None,
                 resource_optimizer_extended_compatibility: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerExtendedCompatibilityResult'] = None,
                 response_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResponseCodeResult'] = None,
                 response_cookie: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResponseCookieResult'] = None,
                 restrict_object_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRestrictObjectCachingResult'] = None,
                 return_cache_status: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorReturnCacheStatusResult'] = None,
                 rewrite_url: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRewriteUrlResult'] = None,
                 rum_custom: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRumCustomResult'] = None,
                 saas_definitions: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSaasDefinitionsResult'] = None,
                 sales_force_commerce_cloud_client: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudClientResult'] = None,
                 sales_force_commerce_cloud_provider: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderResult'] = None,
                 sales_force_commerce_cloud_provider_host_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderHostHeaderResult'] = None,
                 save_post_dca_processing: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSavePostDcaProcessingResult'] = None,
                 schedule_invalidation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorScheduleInvalidationResult'] = None,
                 script_management: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorScriptManagementResult'] = None,
                 segmented_content_protection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedContentProtectionResult'] = None,
                 segmented_media_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaOptimizationResult'] = None,
                 segmented_media_streaming_prefetch: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaStreamingPrefetchResult'] = None,
                 set_variable: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSetVariableResult'] = None,
                 simulate_error_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSimulateErrorCodeResult'] = None,
                 site_shield: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldResult'] = None,
                 standard_tls_migration: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationResult'] = None,
                 standard_tls_migration_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationOverrideResult'] = None,
                 strict_header_parsing: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorStrictHeaderParsingResult'] = None,
                 sub_customer: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSubCustomerResult'] = None,
                 sure_route: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSureRouteResult'] = None,
                 tcp_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTcpOptimizationResult'] = None,
                 tea_leaf: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTeaLeafResult'] = None,
                 tiered_distribution: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionResult'] = None,
                 tiered_distribution_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionAdvancedResult'] = None,
                 tiered_distribution_customization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionCustomizationResult'] = None,
                 timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTimeoutResult'] = None,
                 uid_configuration: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorUidConfigurationResult'] = None,
                 validate_entity_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorValidateEntityTagResult'] = None,
                 verify_json_web_token: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenResult'] = None,
                 verify_json_web_token_for_dcp: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenForDcpResult'] = None,
                 verify_token_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVerifyTokenAuthorizationResult'] = None,
                 virtual_waiting_room: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomResult'] = None,
                 virtual_waiting_room_with_edge_workers: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomWithEdgeWorkersResult'] = None,
                 visitor_prioritization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationResult'] = None,
                 visitor_prioritization_fifo: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoResult'] = None,
                 visitor_prioritization_fifo_standalone: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoStandaloneResult'] = None,
                 watermarking: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWatermarkingResult'] = None,
                 web_application_firewall: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallResult'] = None,
                 web_sockets: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebSocketsResult'] = None,
                 webdav: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebdavResult'] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ad_scaler_circuit_breaker=ad_scaler_circuit_breaker,
            adaptive_acceleration=adaptive_acceleration,
            adaptive_image_compression=adaptive_image_compression,
            advanced=advanced,
            aggregated_reporting=aggregated_reporting,
            akamaizer=akamaizer,
            akamaizer_tag=akamaizer_tag,
            all_http_in_cache_hierarchy=all_http_in_cache_hierarchy,
            allow_cloudlets_origins=allow_cloudlets_origins,
            allow_delete=allow_delete,
            allow_https_cache_key_sharing=allow_https_cache_key_sharing,
            allow_https_downgrade=allow_https_downgrade,
            allow_options=allow_options,
            allow_patch=allow_patch,
            allow_post=allow_post,
            allow_put=allow_put,
            allow_transfer_encoding=allow_transfer_encoding,
            alt_svc_header=alt_svc_header,
            api_prioritization=api_prioritization,
            application_load_balancer=application_load_balancer,
            audience_segmentation=audience_segmentation,
            auto_domain_validation=auto_domain_validation,
            base_directory=base_directory,
            boss_beaconing=boss_beaconing,
            breadcrumbs=breadcrumbs,
            break_connection=break_connection,
            brotli=brotli,
            cache_error=cache_error,
            cache_id=cache_id,
            cache_key_ignore_case=cache_key_ignore_case,
            cache_key_query_params=cache_key_query_params,
            cache_key_rewrite=cache_key_rewrite,
            cache_post=cache_post,
            cache_redirect=cache_redirect,
            cache_tag=cache_tag,
            cache_tag_visible=cache_tag_visible,
            caching=caching,
            central_authorization=central_authorization,
            chase_redirects=chase_redirects,
            client_characteristics=client_characteristics,
            cloud_interconnects=cloud_interconnects,
            cloud_wrapper=cloud_wrapper,
            cloud_wrapper_advanced=cloud_wrapper_advanced,
            common_media_client_data=common_media_client_data,
            conditional_origin=conditional_origin,
            construct_response=construct_response,
            content_characteristics=content_characteristics,
            content_characteristics_amd=content_characteristics_amd,
            content_characteristics_dd=content_characteristics_dd,
            content_characteristics_wsd_large_file=content_characteristics_wsd_large_file,
            content_characteristics_wsd_live=content_characteristics_wsd_live,
            content_characteristics_wsd_vod=content_characteristics_wsd_vod,
            content_pre_position=content_pre_position,
            content_targeting_protection=content_targeting_protection,
            cors_support=cors_support,
            cp_code=cp_code,
            custom_behavior=custom_behavior,
            datastream=datastream,
            dcp=dcp,
            dcp_auth_hmac_transformation=dcp_auth_hmac_transformation,
            dcp_auth_regex_transformation=dcp_auth_regex_transformation,
            dcp_auth_substring_transformation=dcp_auth_substring_transformation,
            dcp_auth_variable_extractor=dcp_auth_variable_extractor,
            dcp_default_authz_groups=dcp_default_authz_groups,
            dcp_dev_relations=dcp_dev_relations,
            dcp_real_time_auth=dcp_real_time_auth,
            delivery_receipt=delivery_receipt,
            deny_access=deny_access,
            deny_direct_failover_access=deny_direct_failover_access,
            device_characteristic_cache_id=device_characteristic_cache_id,
            device_characteristic_header=device_characteristic_header,
            dns_async_refresh=dns_async_refresh,
            dns_prefresh=dns_prefresh,
            downgrade_protocol=downgrade_protocol,
            download_complete_marker=download_complete_marker,
            download_notification=download_notification,
            downstream_cache=downstream_cache,
            dynamic_throughtput_optimization=dynamic_throughtput_optimization,
            dynamic_throughtput_optimization_override=dynamic_throughtput_optimization_override,
            dynamic_web_content=dynamic_web_content,
            ecms_bulk_upload=ecms_bulk_upload,
            ecms_database=ecms_database,
            ecms_dataset=ecms_dataset,
            ecms_object_key=ecms_object_key,
            edge_connect=edge_connect,
            edge_load_balancing_advanced=edge_load_balancing_advanced,
            edge_load_balancing_data_center=edge_load_balancing_data_center,
            edge_load_balancing_origin=edge_load_balancing_origin,
            edge_origin_authorization=edge_origin_authorization,
            edge_redirector=edge_redirector,
            edge_scape=edge_scape,
            edge_side_includes=edge_side_includes,
            edge_worker=edge_worker,
            enhanced_akamai_protocol=enhanced_akamai_protocol,
            enhanced_proxy_detection=enhanced_proxy_detection,
            epd_forward_header_enrichment=epd_forward_header_enrichment,
            fail_action=fail_action,
            failover_bot_manager_feature_compatibility=failover_bot_manager_feature_compatibility,
            fast_invalidate=fast_invalidate,
            first_party_marketing=first_party_marketing,
            first_party_marketing_plus=first_party_marketing_plus,
            forward_rewrite=forward_rewrite,
            g2oheader=g2oheader,
            global_request_number=global_request_number,
            graphql_caching=graphql_caching,
            gzip_response=gzip_response,
            hd_data_advanced=hd_data_advanced,
            health_detection=health_detection,
            hsaf_eip_binding=hsaf_eip_binding,
            http2=http2,
            http3=http3,
            http_strict_transport_security=http_strict_transport_security,
            http_to_https_upgrade=http_to_https_upgrade,
            im_override=im_override,
            image_and_video_manager=image_and_video_manager,
            image_manager=image_manager,
            image_manager_video=image_manager_video,
            include=include,
            instant=instant,
            instant_config=instant_config,
            large_file_optimization=large_file_optimization,
            large_file_optimization_advanced=large_file_optimization_advanced,
            limit_bit_rate=limit_bit_rate,
            log_custom=log_custom,
            m_pulse=m_pulse,
            manifest_personalization=manifest_personalization,
            manifest_rerouting=manifest_rerouting,
            manual_server_push=manual_server_push,
            media_acceleration=media_acceleration,
            media_acceleration_quic_optout=media_acceleration_quic_optout,
            media_client=media_client,
            media_file_retrieval_optimization=media_file_retrieval_optimization,
            media_origin_failover=media_origin_failover,
            metadata_caching=metadata_caching,
            mobile_sdk_performance=mobile_sdk_performance,
            modify_incoming_request_header=modify_incoming_request_header,
            modify_incoming_response_header=modify_incoming_response_header,
            modify_outgoing_request_header=modify_outgoing_request_header,
            modify_outgoing_response_header=modify_outgoing_response_header,
            modify_via_header=modify_via_header,
            origin=origin,
            origin_characteristics=origin_characteristics,
            origin_characteristics_wsd=origin_characteristics_wsd,
            origin_failure_recovery_method=origin_failure_recovery_method,
            origin_failure_recovery_policy=origin_failure_recovery_policy,
            origin_ip_acl=origin_ip_acl,
            persistent_client_connection=persistent_client_connection,
            persistent_connection=persistent_connection,
            personally_identifiable_information=personally_identifiable_information,
            phased_release=phased_release,
            preconnect=preconnect,
            predictive_content_delivery=predictive_content_delivery,
            predictive_prefetching=predictive_prefetching,
            prefetch=prefetch,
            prefetchable=prefetchable,
            prefresh_cache=prefresh_cache,
            quality=quality,
            quic_beta=quic_beta,
            random_seek=random_seek,
            rapid=rapid,
            read_timeout=read_timeout,
            real_time_reporting=real_time_reporting,
            real_user_monitoring=real_user_monitoring,
            redirect=redirect,
            redirectplus=redirectplus,
            referer_checking=referer_checking,
            remove_query_parameter=remove_query_parameter,
            remove_vary=remove_vary,
            report=report,
            request_control=request_control,
            request_type_marker=request_type_marker,
            resource_optimizer=resource_optimizer,
            resource_optimizer_extended_compatibility=resource_optimizer_extended_compatibility,
            response_code=response_code,
            response_cookie=response_cookie,
            restrict_object_caching=restrict_object_caching,
            return_cache_status=return_cache_status,
            rewrite_url=rewrite_url,
            rum_custom=rum_custom,
            saas_definitions=saas_definitions,
            sales_force_commerce_cloud_client=sales_force_commerce_cloud_client,
            sales_force_commerce_cloud_provider=sales_force_commerce_cloud_provider,
            sales_force_commerce_cloud_provider_host_header=sales_force_commerce_cloud_provider_host_header,
            save_post_dca_processing=save_post_dca_processing,
            schedule_invalidation=schedule_invalidation,
            script_management=script_management,
            segmented_content_protection=segmented_content_protection,
            segmented_media_optimization=segmented_media_optimization,
            segmented_media_streaming_prefetch=segmented_media_streaming_prefetch,
            set_variable=set_variable,
            simulate_error_code=simulate_error_code,
            site_shield=site_shield,
            standard_tls_migration=standard_tls_migration,
            standard_tls_migration_override=standard_tls_migration_override,
            strict_header_parsing=strict_header_parsing,
            sub_customer=sub_customer,
            sure_route=sure_route,
            tcp_optimization=tcp_optimization,
            tea_leaf=tea_leaf,
            tiered_distribution=tiered_distribution,
            tiered_distribution_advanced=tiered_distribution_advanced,
            tiered_distribution_customization=tiered_distribution_customization,
            timeout=timeout,
            uid_configuration=uid_configuration,
            validate_entity_tag=validate_entity_tag,
            verify_json_web_token=verify_json_web_token,
            verify_json_web_token_for_dcp=verify_json_web_token_for_dcp,
            verify_token_authorization=verify_token_authorization,
            virtual_waiting_room=virtual_waiting_room,
            virtual_waiting_room_with_edge_workers=virtual_waiting_room_with_edge_workers,
            visitor_prioritization=visitor_prioritization,
            visitor_prioritization_fifo=visitor_prioritization_fifo,
            visitor_prioritization_fifo_standalone=visitor_prioritization_fifo_standalone,
            watermarking=watermarking,
            web_application_firewall=web_application_firewall,
            web_sockets=web_sockets,
            webdav=webdav,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ad_scaler_circuit_breaker: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdScalerCircuitBreakerResult'] = None,
             adaptive_acceleration: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveAccelerationResult'] = None,
             adaptive_image_compression: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveImageCompressionResult'] = None,
             advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdvancedResult'] = None,
             aggregated_reporting: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAggregatedReportingResult'] = None,
             akamaizer: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerResult'] = None,
             akamaizer_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerTagResult'] = None,
             all_http_in_cache_hierarchy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllHttpInCacheHierarchyResult'] = None,
             allow_cloudlets_origins: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowCloudletsOriginsResult'] = None,
             allow_delete: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowDeleteResult'] = None,
             allow_https_cache_key_sharing: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsCacheKeySharingResult'] = None,
             allow_https_downgrade: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsDowngradeResult'] = None,
             allow_options: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowOptionsResult'] = None,
             allow_patch: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowPatchResult'] = None,
             allow_post: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowPostResult'] = None,
             allow_put: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowPutResult'] = None,
             allow_transfer_encoding: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowTransferEncodingResult'] = None,
             alt_svc_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAltSvcHeaderResult'] = None,
             api_prioritization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationResult'] = None,
             application_load_balancer: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerResult'] = None,
             audience_segmentation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationResult'] = None,
             auto_domain_validation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAutoDomainValidationResult'] = None,
             base_directory: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBaseDirectoryResult'] = None,
             boss_beaconing: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBossBeaconingResult'] = None,
             breadcrumbs: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBreadcrumbsResult'] = None,
             break_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBreakConnectionResult'] = None,
             brotli: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBrotliResult'] = None,
             cache_error: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheErrorResult'] = None,
             cache_id: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheIdResult'] = None,
             cache_key_ignore_case: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyIgnoreCaseResult'] = None,
             cache_key_query_params: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyQueryParamsResult'] = None,
             cache_key_rewrite: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyRewriteResult'] = None,
             cache_post: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCachePostResult'] = None,
             cache_redirect: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheRedirectResult'] = None,
             cache_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagResult'] = None,
             cache_tag_visible: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagVisibleResult'] = None,
             caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCachingResult'] = None,
             central_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCentralAuthorizationResult'] = None,
             chase_redirects: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorChaseRedirectsResult'] = None,
             client_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorClientCharacteristicsResult'] = None,
             cloud_interconnects: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCloudInterconnectsResult'] = None,
             cloud_wrapper: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperResult'] = None,
             cloud_wrapper_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperAdvancedResult'] = None,
             common_media_client_data: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCommonMediaClientDataResult'] = None,
             conditional_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorConditionalOriginResult'] = None,
             construct_response: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorConstructResponseResult'] = None,
             content_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsResult'] = None,
             content_characteristics_amd: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsAmdResult'] = None,
             content_characteristics_dd: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsDdResult'] = None,
             content_characteristics_wsd_large_file: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLargeFileResult'] = None,
             content_characteristics_wsd_live: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLiveResult'] = None,
             content_characteristics_wsd_vod: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdVodResult'] = None,
             content_pre_position: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentPrePositionResult'] = None,
             content_targeting_protection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentTargetingProtectionResult'] = None,
             cors_support: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCorsSupportResult'] = None,
             cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeResult'] = None,
             custom_behavior: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCustomBehaviorResult'] = None,
             datastream: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDatastreamResult'] = None,
             dcp: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpResult'] = None,
             dcp_auth_hmac_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthHmacTransformationResult'] = None,
             dcp_auth_regex_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthRegexTransformationResult'] = None,
             dcp_auth_substring_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthSubstringTransformationResult'] = None,
             dcp_auth_variable_extractor: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthVariableExtractorResult'] = None,
             dcp_default_authz_groups: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpDefaultAuthzGroupsResult'] = None,
             dcp_dev_relations: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpDevRelationsResult'] = None,
             dcp_real_time_auth: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpRealTimeAuthResult'] = None,
             delivery_receipt: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDeliveryReceiptResult'] = None,
             deny_access: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDenyAccessResult'] = None,
             deny_direct_failover_access: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDenyDirectFailoverAccessResult'] = None,
             device_characteristic_cache_id: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicCacheIdResult'] = None,
             device_characteristic_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicHeaderResult'] = None,
             dns_async_refresh: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDnsAsyncRefreshResult'] = None,
             dns_prefresh: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDnsPrefreshResult'] = None,
             downgrade_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDowngradeProtocolResult'] = None,
             download_complete_marker: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDownloadCompleteMarkerResult'] = None,
             download_notification: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDownloadNotificationResult'] = None,
             downstream_cache: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDownstreamCacheResult'] = None,
             dynamic_throughtput_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationResult'] = None,
             dynamic_throughtput_optimization_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationOverrideResult'] = None,
             dynamic_web_content: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDynamicWebContentResult'] = None,
             ecms_bulk_upload: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsBulkUploadResult'] = None,
             ecms_database: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatabaseResult'] = None,
             ecms_dataset: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatasetResult'] = None,
             ecms_object_key: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsObjectKeyResult'] = None,
             edge_connect: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeConnectResult'] = None,
             edge_load_balancing_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingAdvancedResult'] = None,
             edge_load_balancing_data_center: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterResult'] = None,
             edge_load_balancing_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingOriginResult'] = None,
             edge_origin_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeOriginAuthorizationResult'] = None,
             edge_redirector: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorResult'] = None,
             edge_scape: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeScapeResult'] = None,
             edge_side_includes: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeSideIncludesResult'] = None,
             edge_worker: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeWorkerResult'] = None,
             enhanced_akamai_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedAkamaiProtocolResult'] = None,
             enhanced_proxy_detection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedProxyDetectionResult'] = None,
             epd_forward_header_enrichment: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEpdForwardHeaderEnrichmentResult'] = None,
             fail_action: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionResult'] = None,
             failover_bot_manager_feature_compatibility: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailoverBotManagerFeatureCompatibilityResult'] = None,
             fast_invalidate: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFastInvalidateResult'] = None,
             first_party_marketing: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingResult'] = None,
             first_party_marketing_plus: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusResult'] = None,
             forward_rewrite: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteResult'] = None,
             g2oheader: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorG2oheaderResult'] = None,
             global_request_number: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorGlobalRequestNumberResult'] = None,
             graphql_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorGraphqlCachingResult'] = None,
             gzip_response: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorGzipResponseResult'] = None,
             hd_data_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHdDataAdvancedResult'] = None,
             health_detection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHealthDetectionResult'] = None,
             hsaf_eip_binding: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHsafEipBindingResult'] = None,
             http2: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttp2Result'] = None,
             http3: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttp3Result'] = None,
             http_strict_transport_security: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttpStrictTransportSecurityResult'] = None,
             http_to_https_upgrade: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttpToHttpsUpgradeResult'] = None,
             im_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImOverrideResult'] = None,
             image_and_video_manager: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerResult'] = None,
             image_manager: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerResult'] = None,
             image_manager_video: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoResult'] = None,
             include: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorIncludeResult'] = None,
             instant: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorInstantResult'] = None,
             instant_config: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorInstantConfigResult'] = None,
             large_file_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationResult'] = None,
             large_file_optimization_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationAdvancedResult'] = None,
             limit_bit_rate: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateResult'] = None,
             log_custom: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLogCustomResult'] = None,
             m_pulse: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMPulseResult'] = None,
             manifest_personalization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorManifestPersonalizationResult'] = None,
             manifest_rerouting: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorManifestReroutingResult'] = None,
             manual_server_push: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorManualServerPushResult'] = None,
             media_acceleration: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationResult'] = None,
             media_acceleration_quic_optout: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationQuicOptoutResult'] = None,
             media_client: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaClientResult'] = None,
             media_file_retrieval_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaFileRetrievalOptimizationResult'] = None,
             media_origin_failover: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaOriginFailoverResult'] = None,
             metadata_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMetadataCachingResult'] = None,
             mobile_sdk_performance: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMobileSdkPerformanceResult'] = None,
             modify_incoming_request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingRequestHeaderResult'] = None,
             modify_incoming_response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingResponseHeaderResult'] = None,
             modify_outgoing_request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingRequestHeaderResult'] = None,
             modify_outgoing_response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingResponseHeaderResult'] = None,
             modify_via_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyViaHeaderResult'] = None,
             origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginResult'] = None,
             origin_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsResult'] = None,
             origin_characteristics_wsd: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsWsdResult'] = None,
             origin_failure_recovery_method: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryMethodResult'] = None,
             origin_failure_recovery_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryPolicyResult'] = None,
             origin_ip_acl: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginIpAclResult'] = None,
             persistent_client_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPersistentClientConnectionResult'] = None,
             persistent_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPersistentConnectionResult'] = None,
             personally_identifiable_information: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPersonallyIdentifiableInformationResult'] = None,
             phased_release: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseResult'] = None,
             preconnect: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPreconnectResult'] = None,
             predictive_content_delivery: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPredictiveContentDeliveryResult'] = None,
             predictive_prefetching: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPredictivePrefetchingResult'] = None,
             prefetch: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchResult'] = None,
             prefetchable: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchableResult'] = None,
             prefresh_cache: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPrefreshCacheResult'] = None,
             quality: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorQualityResult'] = None,
             quic_beta: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorQuicBetaResult'] = None,
             random_seek: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRandomSeekResult'] = None,
             rapid: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRapidResult'] = None,
             read_timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorReadTimeoutResult'] = None,
             real_time_reporting: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRealTimeReportingResult'] = None,
             real_user_monitoring: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRealUserMonitoringResult'] = None,
             redirect: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRedirectResult'] = None,
             redirectplus: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRedirectplusResult'] = None,
             referer_checking: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRefererCheckingResult'] = None,
             remove_query_parameter: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRemoveQueryParameterResult'] = None,
             remove_vary: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRemoveVaryResult'] = None,
             report: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorReportResult'] = None,
             request_control: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlResult'] = None,
             request_type_marker: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestTypeMarkerResult'] = None,
             resource_optimizer: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerResult'] = None,
             resource_optimizer_extended_compatibility: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerExtendedCompatibilityResult'] = None,
             response_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResponseCodeResult'] = None,
             response_cookie: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResponseCookieResult'] = None,
             restrict_object_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRestrictObjectCachingResult'] = None,
             return_cache_status: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorReturnCacheStatusResult'] = None,
             rewrite_url: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRewriteUrlResult'] = None,
             rum_custom: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRumCustomResult'] = None,
             saas_definitions: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSaasDefinitionsResult'] = None,
             sales_force_commerce_cloud_client: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudClientResult'] = None,
             sales_force_commerce_cloud_provider: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderResult'] = None,
             sales_force_commerce_cloud_provider_host_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderHostHeaderResult'] = None,
             save_post_dca_processing: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSavePostDcaProcessingResult'] = None,
             schedule_invalidation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorScheduleInvalidationResult'] = None,
             script_management: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorScriptManagementResult'] = None,
             segmented_content_protection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedContentProtectionResult'] = None,
             segmented_media_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaOptimizationResult'] = None,
             segmented_media_streaming_prefetch: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaStreamingPrefetchResult'] = None,
             set_variable: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSetVariableResult'] = None,
             simulate_error_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSimulateErrorCodeResult'] = None,
             site_shield: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldResult'] = None,
             standard_tls_migration: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationResult'] = None,
             standard_tls_migration_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationOverrideResult'] = None,
             strict_header_parsing: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorStrictHeaderParsingResult'] = None,
             sub_customer: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSubCustomerResult'] = None,
             sure_route: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSureRouteResult'] = None,
             tcp_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTcpOptimizationResult'] = None,
             tea_leaf: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTeaLeafResult'] = None,
             tiered_distribution: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionResult'] = None,
             tiered_distribution_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionAdvancedResult'] = None,
             tiered_distribution_customization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionCustomizationResult'] = None,
             timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTimeoutResult'] = None,
             uid_configuration: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorUidConfigurationResult'] = None,
             validate_entity_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorValidateEntityTagResult'] = None,
             verify_json_web_token: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenResult'] = None,
             verify_json_web_token_for_dcp: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenForDcpResult'] = None,
             verify_token_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVerifyTokenAuthorizationResult'] = None,
             virtual_waiting_room: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomResult'] = None,
             virtual_waiting_room_with_edge_workers: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomWithEdgeWorkersResult'] = None,
             visitor_prioritization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationResult'] = None,
             visitor_prioritization_fifo: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoResult'] = None,
             visitor_prioritization_fifo_standalone: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoStandaloneResult'] = None,
             watermarking: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWatermarkingResult'] = None,
             web_application_firewall: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallResult'] = None,
             web_sockets: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebSocketsResult'] = None,
             webdav: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebdavResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'adScalerCircuitBreaker' in kwargs:
            ad_scaler_circuit_breaker = kwargs['adScalerCircuitBreaker']
        if 'adaptiveAcceleration' in kwargs:
            adaptive_acceleration = kwargs['adaptiveAcceleration']
        if 'adaptiveImageCompression' in kwargs:
            adaptive_image_compression = kwargs['adaptiveImageCompression']
        if 'aggregatedReporting' in kwargs:
            aggregated_reporting = kwargs['aggregatedReporting']
        if 'akamaizerTag' in kwargs:
            akamaizer_tag = kwargs['akamaizerTag']
        if 'allHttpInCacheHierarchy' in kwargs:
            all_http_in_cache_hierarchy = kwargs['allHttpInCacheHierarchy']
        if 'allowCloudletsOrigins' in kwargs:
            allow_cloudlets_origins = kwargs['allowCloudletsOrigins']
        if 'allowDelete' in kwargs:
            allow_delete = kwargs['allowDelete']
        if 'allowHttpsCacheKeySharing' in kwargs:
            allow_https_cache_key_sharing = kwargs['allowHttpsCacheKeySharing']
        if 'allowHttpsDowngrade' in kwargs:
            allow_https_downgrade = kwargs['allowHttpsDowngrade']
        if 'allowOptions' in kwargs:
            allow_options = kwargs['allowOptions']
        if 'allowPatch' in kwargs:
            allow_patch = kwargs['allowPatch']
        if 'allowPost' in kwargs:
            allow_post = kwargs['allowPost']
        if 'allowPut' in kwargs:
            allow_put = kwargs['allowPut']
        if 'allowTransferEncoding' in kwargs:
            allow_transfer_encoding = kwargs['allowTransferEncoding']
        if 'altSvcHeader' in kwargs:
            alt_svc_header = kwargs['altSvcHeader']
        if 'apiPrioritization' in kwargs:
            api_prioritization = kwargs['apiPrioritization']
        if 'applicationLoadBalancer' in kwargs:
            application_load_balancer = kwargs['applicationLoadBalancer']
        if 'audienceSegmentation' in kwargs:
            audience_segmentation = kwargs['audienceSegmentation']
        if 'autoDomainValidation' in kwargs:
            auto_domain_validation = kwargs['autoDomainValidation']
        if 'baseDirectory' in kwargs:
            base_directory = kwargs['baseDirectory']
        if 'bossBeaconing' in kwargs:
            boss_beaconing = kwargs['bossBeaconing']
        if 'breakConnection' in kwargs:
            break_connection = kwargs['breakConnection']
        if 'cacheError' in kwargs:
            cache_error = kwargs['cacheError']
        if 'cacheId' in kwargs:
            cache_id = kwargs['cacheId']
        if 'cacheKeyIgnoreCase' in kwargs:
            cache_key_ignore_case = kwargs['cacheKeyIgnoreCase']
        if 'cacheKeyQueryParams' in kwargs:
            cache_key_query_params = kwargs['cacheKeyQueryParams']
        if 'cacheKeyRewrite' in kwargs:
            cache_key_rewrite = kwargs['cacheKeyRewrite']
        if 'cachePost' in kwargs:
            cache_post = kwargs['cachePost']
        if 'cacheRedirect' in kwargs:
            cache_redirect = kwargs['cacheRedirect']
        if 'cacheTag' in kwargs:
            cache_tag = kwargs['cacheTag']
        if 'cacheTagVisible' in kwargs:
            cache_tag_visible = kwargs['cacheTagVisible']
        if 'centralAuthorization' in kwargs:
            central_authorization = kwargs['centralAuthorization']
        if 'chaseRedirects' in kwargs:
            chase_redirects = kwargs['chaseRedirects']
        if 'clientCharacteristics' in kwargs:
            client_characteristics = kwargs['clientCharacteristics']
        if 'cloudInterconnects' in kwargs:
            cloud_interconnects = kwargs['cloudInterconnects']
        if 'cloudWrapper' in kwargs:
            cloud_wrapper = kwargs['cloudWrapper']
        if 'cloudWrapperAdvanced' in kwargs:
            cloud_wrapper_advanced = kwargs['cloudWrapperAdvanced']
        if 'commonMediaClientData' in kwargs:
            common_media_client_data = kwargs['commonMediaClientData']
        if 'conditionalOrigin' in kwargs:
            conditional_origin = kwargs['conditionalOrigin']
        if 'constructResponse' in kwargs:
            construct_response = kwargs['constructResponse']
        if 'contentCharacteristics' in kwargs:
            content_characteristics = kwargs['contentCharacteristics']
        if 'contentCharacteristicsAmd' in kwargs:
            content_characteristics_amd = kwargs['contentCharacteristicsAmd']
        if 'contentCharacteristicsDd' in kwargs:
            content_characteristics_dd = kwargs['contentCharacteristicsDd']
        if 'contentCharacteristicsWsdLargeFile' in kwargs:
            content_characteristics_wsd_large_file = kwargs['contentCharacteristicsWsdLargeFile']
        if 'contentCharacteristicsWsdLive' in kwargs:
            content_characteristics_wsd_live = kwargs['contentCharacteristicsWsdLive']
        if 'contentCharacteristicsWsdVod' in kwargs:
            content_characteristics_wsd_vod = kwargs['contentCharacteristicsWsdVod']
        if 'contentPrePosition' in kwargs:
            content_pre_position = kwargs['contentPrePosition']
        if 'contentTargetingProtection' in kwargs:
            content_targeting_protection = kwargs['contentTargetingProtection']
        if 'corsSupport' in kwargs:
            cors_support = kwargs['corsSupport']
        if 'cpCode' in kwargs:
            cp_code = kwargs['cpCode']
        if 'customBehavior' in kwargs:
            custom_behavior = kwargs['customBehavior']
        if 'dcpAuthHmacTransformation' in kwargs:
            dcp_auth_hmac_transformation = kwargs['dcpAuthHmacTransformation']
        if 'dcpAuthRegexTransformation' in kwargs:
            dcp_auth_regex_transformation = kwargs['dcpAuthRegexTransformation']
        if 'dcpAuthSubstringTransformation' in kwargs:
            dcp_auth_substring_transformation = kwargs['dcpAuthSubstringTransformation']
        if 'dcpAuthVariableExtractor' in kwargs:
            dcp_auth_variable_extractor = kwargs['dcpAuthVariableExtractor']
        if 'dcpDefaultAuthzGroups' in kwargs:
            dcp_default_authz_groups = kwargs['dcpDefaultAuthzGroups']
        if 'dcpDevRelations' in kwargs:
            dcp_dev_relations = kwargs['dcpDevRelations']
        if 'dcpRealTimeAuth' in kwargs:
            dcp_real_time_auth = kwargs['dcpRealTimeAuth']
        if 'deliveryReceipt' in kwargs:
            delivery_receipt = kwargs['deliveryReceipt']
        if 'denyAccess' in kwargs:
            deny_access = kwargs['denyAccess']
        if 'denyDirectFailoverAccess' in kwargs:
            deny_direct_failover_access = kwargs['denyDirectFailoverAccess']
        if 'deviceCharacteristicCacheId' in kwargs:
            device_characteristic_cache_id = kwargs['deviceCharacteristicCacheId']
        if 'deviceCharacteristicHeader' in kwargs:
            device_characteristic_header = kwargs['deviceCharacteristicHeader']
        if 'dnsAsyncRefresh' in kwargs:
            dns_async_refresh = kwargs['dnsAsyncRefresh']
        if 'dnsPrefresh' in kwargs:
            dns_prefresh = kwargs['dnsPrefresh']
        if 'downgradeProtocol' in kwargs:
            downgrade_protocol = kwargs['downgradeProtocol']
        if 'downloadCompleteMarker' in kwargs:
            download_complete_marker = kwargs['downloadCompleteMarker']
        if 'downloadNotification' in kwargs:
            download_notification = kwargs['downloadNotification']
        if 'downstreamCache' in kwargs:
            downstream_cache = kwargs['downstreamCache']
        if 'dynamicThroughtputOptimization' in kwargs:
            dynamic_throughtput_optimization = kwargs['dynamicThroughtputOptimization']
        if 'dynamicThroughtputOptimizationOverride' in kwargs:
            dynamic_throughtput_optimization_override = kwargs['dynamicThroughtputOptimizationOverride']
        if 'dynamicWebContent' in kwargs:
            dynamic_web_content = kwargs['dynamicWebContent']
        if 'ecmsBulkUpload' in kwargs:
            ecms_bulk_upload = kwargs['ecmsBulkUpload']
        if 'ecmsDatabase' in kwargs:
            ecms_database = kwargs['ecmsDatabase']
        if 'ecmsDataset' in kwargs:
            ecms_dataset = kwargs['ecmsDataset']
        if 'ecmsObjectKey' in kwargs:
            ecms_object_key = kwargs['ecmsObjectKey']
        if 'edgeConnect' in kwargs:
            edge_connect = kwargs['edgeConnect']
        if 'edgeLoadBalancingAdvanced' in kwargs:
            edge_load_balancing_advanced = kwargs['edgeLoadBalancingAdvanced']
        if 'edgeLoadBalancingDataCenter' in kwargs:
            edge_load_balancing_data_center = kwargs['edgeLoadBalancingDataCenter']
        if 'edgeLoadBalancingOrigin' in kwargs:
            edge_load_balancing_origin = kwargs['edgeLoadBalancingOrigin']
        if 'edgeOriginAuthorization' in kwargs:
            edge_origin_authorization = kwargs['edgeOriginAuthorization']
        if 'edgeRedirector' in kwargs:
            edge_redirector = kwargs['edgeRedirector']
        if 'edgeScape' in kwargs:
            edge_scape = kwargs['edgeScape']
        if 'edgeSideIncludes' in kwargs:
            edge_side_includes = kwargs['edgeSideIncludes']
        if 'edgeWorker' in kwargs:
            edge_worker = kwargs['edgeWorker']
        if 'enhancedAkamaiProtocol' in kwargs:
            enhanced_akamai_protocol = kwargs['enhancedAkamaiProtocol']
        if 'enhancedProxyDetection' in kwargs:
            enhanced_proxy_detection = kwargs['enhancedProxyDetection']
        if 'epdForwardHeaderEnrichment' in kwargs:
            epd_forward_header_enrichment = kwargs['epdForwardHeaderEnrichment']
        if 'failAction' in kwargs:
            fail_action = kwargs['failAction']
        if 'failoverBotManagerFeatureCompatibility' in kwargs:
            failover_bot_manager_feature_compatibility = kwargs['failoverBotManagerFeatureCompatibility']
        if 'fastInvalidate' in kwargs:
            fast_invalidate = kwargs['fastInvalidate']
        if 'firstPartyMarketing' in kwargs:
            first_party_marketing = kwargs['firstPartyMarketing']
        if 'firstPartyMarketingPlus' in kwargs:
            first_party_marketing_plus = kwargs['firstPartyMarketingPlus']
        if 'forwardRewrite' in kwargs:
            forward_rewrite = kwargs['forwardRewrite']
        if 'globalRequestNumber' in kwargs:
            global_request_number = kwargs['globalRequestNumber']
        if 'graphqlCaching' in kwargs:
            graphql_caching = kwargs['graphqlCaching']
        if 'gzipResponse' in kwargs:
            gzip_response = kwargs['gzipResponse']
        if 'hdDataAdvanced' in kwargs:
            hd_data_advanced = kwargs['hdDataAdvanced']
        if 'healthDetection' in kwargs:
            health_detection = kwargs['healthDetection']
        if 'hsafEipBinding' in kwargs:
            hsaf_eip_binding = kwargs['hsafEipBinding']
        if 'httpStrictTransportSecurity' in kwargs:
            http_strict_transport_security = kwargs['httpStrictTransportSecurity']
        if 'httpToHttpsUpgrade' in kwargs:
            http_to_https_upgrade = kwargs['httpToHttpsUpgrade']
        if 'imOverride' in kwargs:
            im_override = kwargs['imOverride']
        if 'imageAndVideoManager' in kwargs:
            image_and_video_manager = kwargs['imageAndVideoManager']
        if 'imageManager' in kwargs:
            image_manager = kwargs['imageManager']
        if 'imageManagerVideo' in kwargs:
            image_manager_video = kwargs['imageManagerVideo']
        if 'instantConfig' in kwargs:
            instant_config = kwargs['instantConfig']
        if 'largeFileOptimization' in kwargs:
            large_file_optimization = kwargs['largeFileOptimization']
        if 'largeFileOptimizationAdvanced' in kwargs:
            large_file_optimization_advanced = kwargs['largeFileOptimizationAdvanced']
        if 'limitBitRate' in kwargs:
            limit_bit_rate = kwargs['limitBitRate']
        if 'logCustom' in kwargs:
            log_custom = kwargs['logCustom']
        if 'mPulse' in kwargs:
            m_pulse = kwargs['mPulse']
        if 'manifestPersonalization' in kwargs:
            manifest_personalization = kwargs['manifestPersonalization']
        if 'manifestRerouting' in kwargs:
            manifest_rerouting = kwargs['manifestRerouting']
        if 'manualServerPush' in kwargs:
            manual_server_push = kwargs['manualServerPush']
        if 'mediaAcceleration' in kwargs:
            media_acceleration = kwargs['mediaAcceleration']
        if 'mediaAccelerationQuicOptout' in kwargs:
            media_acceleration_quic_optout = kwargs['mediaAccelerationQuicOptout']
        if 'mediaClient' in kwargs:
            media_client = kwargs['mediaClient']
        if 'mediaFileRetrievalOptimization' in kwargs:
            media_file_retrieval_optimization = kwargs['mediaFileRetrievalOptimization']
        if 'mediaOriginFailover' in kwargs:
            media_origin_failover = kwargs['mediaOriginFailover']
        if 'metadataCaching' in kwargs:
            metadata_caching = kwargs['metadataCaching']
        if 'mobileSdkPerformance' in kwargs:
            mobile_sdk_performance = kwargs['mobileSdkPerformance']
        if 'modifyIncomingRequestHeader' in kwargs:
            modify_incoming_request_header = kwargs['modifyIncomingRequestHeader']
        if 'modifyIncomingResponseHeader' in kwargs:
            modify_incoming_response_header = kwargs['modifyIncomingResponseHeader']
        if 'modifyOutgoingRequestHeader' in kwargs:
            modify_outgoing_request_header = kwargs['modifyOutgoingRequestHeader']
        if 'modifyOutgoingResponseHeader' in kwargs:
            modify_outgoing_response_header = kwargs['modifyOutgoingResponseHeader']
        if 'modifyViaHeader' in kwargs:
            modify_via_header = kwargs['modifyViaHeader']
        if 'originCharacteristics' in kwargs:
            origin_characteristics = kwargs['originCharacteristics']
        if 'originCharacteristicsWsd' in kwargs:
            origin_characteristics_wsd = kwargs['originCharacteristicsWsd']
        if 'originFailureRecoveryMethod' in kwargs:
            origin_failure_recovery_method = kwargs['originFailureRecoveryMethod']
        if 'originFailureRecoveryPolicy' in kwargs:
            origin_failure_recovery_policy = kwargs['originFailureRecoveryPolicy']
        if 'originIpAcl' in kwargs:
            origin_ip_acl = kwargs['originIpAcl']
        if 'persistentClientConnection' in kwargs:
            persistent_client_connection = kwargs['persistentClientConnection']
        if 'persistentConnection' in kwargs:
            persistent_connection = kwargs['persistentConnection']
        if 'personallyIdentifiableInformation' in kwargs:
            personally_identifiable_information = kwargs['personallyIdentifiableInformation']
        if 'phasedRelease' in kwargs:
            phased_release = kwargs['phasedRelease']
        if 'predictiveContentDelivery' in kwargs:
            predictive_content_delivery = kwargs['predictiveContentDelivery']
        if 'predictivePrefetching' in kwargs:
            predictive_prefetching = kwargs['predictivePrefetching']
        if 'prefreshCache' in kwargs:
            prefresh_cache = kwargs['prefreshCache']
        if 'quicBeta' in kwargs:
            quic_beta = kwargs['quicBeta']
        if 'randomSeek' in kwargs:
            random_seek = kwargs['randomSeek']
        if 'readTimeout' in kwargs:
            read_timeout = kwargs['readTimeout']
        if 'realTimeReporting' in kwargs:
            real_time_reporting = kwargs['realTimeReporting']
        if 'realUserMonitoring' in kwargs:
            real_user_monitoring = kwargs['realUserMonitoring']
        if 'refererChecking' in kwargs:
            referer_checking = kwargs['refererChecking']
        if 'removeQueryParameter' in kwargs:
            remove_query_parameter = kwargs['removeQueryParameter']
        if 'removeVary' in kwargs:
            remove_vary = kwargs['removeVary']
        if 'requestControl' in kwargs:
            request_control = kwargs['requestControl']
        if 'requestTypeMarker' in kwargs:
            request_type_marker = kwargs['requestTypeMarker']
        if 'resourceOptimizer' in kwargs:
            resource_optimizer = kwargs['resourceOptimizer']
        if 'resourceOptimizerExtendedCompatibility' in kwargs:
            resource_optimizer_extended_compatibility = kwargs['resourceOptimizerExtendedCompatibility']
        if 'responseCode' in kwargs:
            response_code = kwargs['responseCode']
        if 'responseCookie' in kwargs:
            response_cookie = kwargs['responseCookie']
        if 'restrictObjectCaching' in kwargs:
            restrict_object_caching = kwargs['restrictObjectCaching']
        if 'returnCacheStatus' in kwargs:
            return_cache_status = kwargs['returnCacheStatus']
        if 'rewriteUrl' in kwargs:
            rewrite_url = kwargs['rewriteUrl']
        if 'rumCustom' in kwargs:
            rum_custom = kwargs['rumCustom']
        if 'saasDefinitions' in kwargs:
            saas_definitions = kwargs['saasDefinitions']
        if 'salesForceCommerceCloudClient' in kwargs:
            sales_force_commerce_cloud_client = kwargs['salesForceCommerceCloudClient']
        if 'salesForceCommerceCloudProvider' in kwargs:
            sales_force_commerce_cloud_provider = kwargs['salesForceCommerceCloudProvider']
        if 'salesForceCommerceCloudProviderHostHeader' in kwargs:
            sales_force_commerce_cloud_provider_host_header = kwargs['salesForceCommerceCloudProviderHostHeader']
        if 'savePostDcaProcessing' in kwargs:
            save_post_dca_processing = kwargs['savePostDcaProcessing']
        if 'scheduleInvalidation' in kwargs:
            schedule_invalidation = kwargs['scheduleInvalidation']
        if 'scriptManagement' in kwargs:
            script_management = kwargs['scriptManagement']
        if 'segmentedContentProtection' in kwargs:
            segmented_content_protection = kwargs['segmentedContentProtection']
        if 'segmentedMediaOptimization' in kwargs:
            segmented_media_optimization = kwargs['segmentedMediaOptimization']
        if 'segmentedMediaStreamingPrefetch' in kwargs:
            segmented_media_streaming_prefetch = kwargs['segmentedMediaStreamingPrefetch']
        if 'setVariable' in kwargs:
            set_variable = kwargs['setVariable']
        if 'simulateErrorCode' in kwargs:
            simulate_error_code = kwargs['simulateErrorCode']
        if 'siteShield' in kwargs:
            site_shield = kwargs['siteShield']
        if 'standardTlsMigration' in kwargs:
            standard_tls_migration = kwargs['standardTlsMigration']
        if 'standardTlsMigrationOverride' in kwargs:
            standard_tls_migration_override = kwargs['standardTlsMigrationOverride']
        if 'strictHeaderParsing' in kwargs:
            strict_header_parsing = kwargs['strictHeaderParsing']
        if 'subCustomer' in kwargs:
            sub_customer = kwargs['subCustomer']
        if 'sureRoute' in kwargs:
            sure_route = kwargs['sureRoute']
        if 'tcpOptimization' in kwargs:
            tcp_optimization = kwargs['tcpOptimization']
        if 'teaLeaf' in kwargs:
            tea_leaf = kwargs['teaLeaf']
        if 'tieredDistribution' in kwargs:
            tiered_distribution = kwargs['tieredDistribution']
        if 'tieredDistributionAdvanced' in kwargs:
            tiered_distribution_advanced = kwargs['tieredDistributionAdvanced']
        if 'tieredDistributionCustomization' in kwargs:
            tiered_distribution_customization = kwargs['tieredDistributionCustomization']
        if 'uidConfiguration' in kwargs:
            uid_configuration = kwargs['uidConfiguration']
        if 'validateEntityTag' in kwargs:
            validate_entity_tag = kwargs['validateEntityTag']
        if 'verifyJsonWebToken' in kwargs:
            verify_json_web_token = kwargs['verifyJsonWebToken']
        if 'verifyJsonWebTokenForDcp' in kwargs:
            verify_json_web_token_for_dcp = kwargs['verifyJsonWebTokenForDcp']
        if 'verifyTokenAuthorization' in kwargs:
            verify_token_authorization = kwargs['verifyTokenAuthorization']
        if 'virtualWaitingRoom' in kwargs:
            virtual_waiting_room = kwargs['virtualWaitingRoom']
        if 'virtualWaitingRoomWithEdgeWorkers' in kwargs:
            virtual_waiting_room_with_edge_workers = kwargs['virtualWaitingRoomWithEdgeWorkers']
        if 'visitorPrioritization' in kwargs:
            visitor_prioritization = kwargs['visitorPrioritization']
        if 'visitorPrioritizationFifo' in kwargs:
            visitor_prioritization_fifo = kwargs['visitorPrioritizationFifo']
        if 'visitorPrioritizationFifoStandalone' in kwargs:
            visitor_prioritization_fifo_standalone = kwargs['visitorPrioritizationFifoStandalone']
        if 'webApplicationFirewall' in kwargs:
            web_application_firewall = kwargs['webApplicationFirewall']
        if 'webSockets' in kwargs:
            web_sockets = kwargs['webSockets']

        if ad_scaler_circuit_breaker is not None:
            _setter("ad_scaler_circuit_breaker", ad_scaler_circuit_breaker)
        if adaptive_acceleration is not None:
            _setter("adaptive_acceleration", adaptive_acceleration)
        if adaptive_image_compression is not None:
            _setter("adaptive_image_compression", adaptive_image_compression)
        if advanced is not None:
            _setter("advanced", advanced)
        if aggregated_reporting is not None:
            _setter("aggregated_reporting", aggregated_reporting)
        if akamaizer is not None:
            _setter("akamaizer", akamaizer)
        if akamaizer_tag is not None:
            _setter("akamaizer_tag", akamaizer_tag)
        if all_http_in_cache_hierarchy is not None:
            _setter("all_http_in_cache_hierarchy", all_http_in_cache_hierarchy)
        if allow_cloudlets_origins is not None:
            _setter("allow_cloudlets_origins", allow_cloudlets_origins)
        if allow_delete is not None:
            _setter("allow_delete", allow_delete)
        if allow_https_cache_key_sharing is not None:
            _setter("allow_https_cache_key_sharing", allow_https_cache_key_sharing)
        if allow_https_downgrade is not None:
            _setter("allow_https_downgrade", allow_https_downgrade)
        if allow_options is not None:
            _setter("allow_options", allow_options)
        if allow_patch is not None:
            _setter("allow_patch", allow_patch)
        if allow_post is not None:
            _setter("allow_post", allow_post)
        if allow_put is not None:
            _setter("allow_put", allow_put)
        if allow_transfer_encoding is not None:
            _setter("allow_transfer_encoding", allow_transfer_encoding)
        if alt_svc_header is not None:
            _setter("alt_svc_header", alt_svc_header)
        if api_prioritization is not None:
            _setter("api_prioritization", api_prioritization)
        if application_load_balancer is not None:
            _setter("application_load_balancer", application_load_balancer)
        if audience_segmentation is not None:
            _setter("audience_segmentation", audience_segmentation)
        if auto_domain_validation is not None:
            _setter("auto_domain_validation", auto_domain_validation)
        if base_directory is not None:
            _setter("base_directory", base_directory)
        if boss_beaconing is not None:
            _setter("boss_beaconing", boss_beaconing)
        if breadcrumbs is not None:
            _setter("breadcrumbs", breadcrumbs)
        if break_connection is not None:
            _setter("break_connection", break_connection)
        if brotli is not None:
            _setter("brotli", brotli)
        if cache_error is not None:
            _setter("cache_error", cache_error)
        if cache_id is not None:
            _setter("cache_id", cache_id)
        if cache_key_ignore_case is not None:
            _setter("cache_key_ignore_case", cache_key_ignore_case)
        if cache_key_query_params is not None:
            _setter("cache_key_query_params", cache_key_query_params)
        if cache_key_rewrite is not None:
            _setter("cache_key_rewrite", cache_key_rewrite)
        if cache_post is not None:
            _setter("cache_post", cache_post)
        if cache_redirect is not None:
            _setter("cache_redirect", cache_redirect)
        if cache_tag is not None:
            _setter("cache_tag", cache_tag)
        if cache_tag_visible is not None:
            _setter("cache_tag_visible", cache_tag_visible)
        if caching is not None:
            _setter("caching", caching)
        if central_authorization is not None:
            _setter("central_authorization", central_authorization)
        if chase_redirects is not None:
            _setter("chase_redirects", chase_redirects)
        if client_characteristics is not None:
            _setter("client_characteristics", client_characteristics)
        if cloud_interconnects is not None:
            _setter("cloud_interconnects", cloud_interconnects)
        if cloud_wrapper is not None:
            _setter("cloud_wrapper", cloud_wrapper)
        if cloud_wrapper_advanced is not None:
            _setter("cloud_wrapper_advanced", cloud_wrapper_advanced)
        if common_media_client_data is not None:
            _setter("common_media_client_data", common_media_client_data)
        if conditional_origin is not None:
            _setter("conditional_origin", conditional_origin)
        if construct_response is not None:
            _setter("construct_response", construct_response)
        if content_characteristics is not None:
            _setter("content_characteristics", content_characteristics)
        if content_characteristics_amd is not None:
            _setter("content_characteristics_amd", content_characteristics_amd)
        if content_characteristics_dd is not None:
            _setter("content_characteristics_dd", content_characteristics_dd)
        if content_characteristics_wsd_large_file is not None:
            _setter("content_characteristics_wsd_large_file", content_characteristics_wsd_large_file)
        if content_characteristics_wsd_live is not None:
            _setter("content_characteristics_wsd_live", content_characteristics_wsd_live)
        if content_characteristics_wsd_vod is not None:
            _setter("content_characteristics_wsd_vod", content_characteristics_wsd_vod)
        if content_pre_position is not None:
            _setter("content_pre_position", content_pre_position)
        if content_targeting_protection is not None:
            _setter("content_targeting_protection", content_targeting_protection)
        if cors_support is not None:
            _setter("cors_support", cors_support)
        if cp_code is not None:
            _setter("cp_code", cp_code)
        if custom_behavior is not None:
            _setter("custom_behavior", custom_behavior)
        if datastream is not None:
            _setter("datastream", datastream)
        if dcp is not None:
            _setter("dcp", dcp)
        if dcp_auth_hmac_transformation is not None:
            _setter("dcp_auth_hmac_transformation", dcp_auth_hmac_transformation)
        if dcp_auth_regex_transformation is not None:
            _setter("dcp_auth_regex_transformation", dcp_auth_regex_transformation)
        if dcp_auth_substring_transformation is not None:
            _setter("dcp_auth_substring_transformation", dcp_auth_substring_transformation)
        if dcp_auth_variable_extractor is not None:
            _setter("dcp_auth_variable_extractor", dcp_auth_variable_extractor)
        if dcp_default_authz_groups is not None:
            _setter("dcp_default_authz_groups", dcp_default_authz_groups)
        if dcp_dev_relations is not None:
            _setter("dcp_dev_relations", dcp_dev_relations)
        if dcp_real_time_auth is not None:
            _setter("dcp_real_time_auth", dcp_real_time_auth)
        if delivery_receipt is not None:
            _setter("delivery_receipt", delivery_receipt)
        if deny_access is not None:
            _setter("deny_access", deny_access)
        if deny_direct_failover_access is not None:
            _setter("deny_direct_failover_access", deny_direct_failover_access)
        if device_characteristic_cache_id is not None:
            _setter("device_characteristic_cache_id", device_characteristic_cache_id)
        if device_characteristic_header is not None:
            _setter("device_characteristic_header", device_characteristic_header)
        if dns_async_refresh is not None:
            _setter("dns_async_refresh", dns_async_refresh)
        if dns_prefresh is not None:
            _setter("dns_prefresh", dns_prefresh)
        if downgrade_protocol is not None:
            _setter("downgrade_protocol", downgrade_protocol)
        if download_complete_marker is not None:
            _setter("download_complete_marker", download_complete_marker)
        if download_notification is not None:
            _setter("download_notification", download_notification)
        if downstream_cache is not None:
            _setter("downstream_cache", downstream_cache)
        if dynamic_throughtput_optimization is not None:
            _setter("dynamic_throughtput_optimization", dynamic_throughtput_optimization)
        if dynamic_throughtput_optimization_override is not None:
            _setter("dynamic_throughtput_optimization_override", dynamic_throughtput_optimization_override)
        if dynamic_web_content is not None:
            _setter("dynamic_web_content", dynamic_web_content)
        if ecms_bulk_upload is not None:
            _setter("ecms_bulk_upload", ecms_bulk_upload)
        if ecms_database is not None:
            _setter("ecms_database", ecms_database)
        if ecms_dataset is not None:
            _setter("ecms_dataset", ecms_dataset)
        if ecms_object_key is not None:
            _setter("ecms_object_key", ecms_object_key)
        if edge_connect is not None:
            _setter("edge_connect", edge_connect)
        if edge_load_balancing_advanced is not None:
            _setter("edge_load_balancing_advanced", edge_load_balancing_advanced)
        if edge_load_balancing_data_center is not None:
            _setter("edge_load_balancing_data_center", edge_load_balancing_data_center)
        if edge_load_balancing_origin is not None:
            _setter("edge_load_balancing_origin", edge_load_balancing_origin)
        if edge_origin_authorization is not None:
            _setter("edge_origin_authorization", edge_origin_authorization)
        if edge_redirector is not None:
            _setter("edge_redirector", edge_redirector)
        if edge_scape is not None:
            _setter("edge_scape", edge_scape)
        if edge_side_includes is not None:
            _setter("edge_side_includes", edge_side_includes)
        if edge_worker is not None:
            _setter("edge_worker", edge_worker)
        if enhanced_akamai_protocol is not None:
            _setter("enhanced_akamai_protocol", enhanced_akamai_protocol)
        if enhanced_proxy_detection is not None:
            _setter("enhanced_proxy_detection", enhanced_proxy_detection)
        if epd_forward_header_enrichment is not None:
            _setter("epd_forward_header_enrichment", epd_forward_header_enrichment)
        if fail_action is not None:
            _setter("fail_action", fail_action)
        if failover_bot_manager_feature_compatibility is not None:
            _setter("failover_bot_manager_feature_compatibility", failover_bot_manager_feature_compatibility)
        if fast_invalidate is not None:
            _setter("fast_invalidate", fast_invalidate)
        if first_party_marketing is not None:
            _setter("first_party_marketing", first_party_marketing)
        if first_party_marketing_plus is not None:
            _setter("first_party_marketing_plus", first_party_marketing_plus)
        if forward_rewrite is not None:
            _setter("forward_rewrite", forward_rewrite)
        if g2oheader is not None:
            _setter("g2oheader", g2oheader)
        if global_request_number is not None:
            _setter("global_request_number", global_request_number)
        if graphql_caching is not None:
            _setter("graphql_caching", graphql_caching)
        if gzip_response is not None:
            _setter("gzip_response", gzip_response)
        if hd_data_advanced is not None:
            _setter("hd_data_advanced", hd_data_advanced)
        if health_detection is not None:
            _setter("health_detection", health_detection)
        if hsaf_eip_binding is not None:
            _setter("hsaf_eip_binding", hsaf_eip_binding)
        if http2 is not None:
            _setter("http2", http2)
        if http3 is not None:
            _setter("http3", http3)
        if http_strict_transport_security is not None:
            _setter("http_strict_transport_security", http_strict_transport_security)
        if http_to_https_upgrade is not None:
            _setter("http_to_https_upgrade", http_to_https_upgrade)
        if im_override is not None:
            _setter("im_override", im_override)
        if image_and_video_manager is not None:
            _setter("image_and_video_manager", image_and_video_manager)
        if image_manager is not None:
            _setter("image_manager", image_manager)
        if image_manager_video is not None:
            _setter("image_manager_video", image_manager_video)
        if include is not None:
            _setter("include", include)
        if instant is not None:
            _setter("instant", instant)
        if instant_config is not None:
            _setter("instant_config", instant_config)
        if large_file_optimization is not None:
            _setter("large_file_optimization", large_file_optimization)
        if large_file_optimization_advanced is not None:
            _setter("large_file_optimization_advanced", large_file_optimization_advanced)
        if limit_bit_rate is not None:
            _setter("limit_bit_rate", limit_bit_rate)
        if log_custom is not None:
            _setter("log_custom", log_custom)
        if m_pulse is not None:
            _setter("m_pulse", m_pulse)
        if manifest_personalization is not None:
            _setter("manifest_personalization", manifest_personalization)
        if manifest_rerouting is not None:
            _setter("manifest_rerouting", manifest_rerouting)
        if manual_server_push is not None:
            _setter("manual_server_push", manual_server_push)
        if media_acceleration is not None:
            _setter("media_acceleration", media_acceleration)
        if media_acceleration_quic_optout is not None:
            _setter("media_acceleration_quic_optout", media_acceleration_quic_optout)
        if media_client is not None:
            _setter("media_client", media_client)
        if media_file_retrieval_optimization is not None:
            _setter("media_file_retrieval_optimization", media_file_retrieval_optimization)
        if media_origin_failover is not None:
            _setter("media_origin_failover", media_origin_failover)
        if metadata_caching is not None:
            _setter("metadata_caching", metadata_caching)
        if mobile_sdk_performance is not None:
            _setter("mobile_sdk_performance", mobile_sdk_performance)
        if modify_incoming_request_header is not None:
            _setter("modify_incoming_request_header", modify_incoming_request_header)
        if modify_incoming_response_header is not None:
            _setter("modify_incoming_response_header", modify_incoming_response_header)
        if modify_outgoing_request_header is not None:
            _setter("modify_outgoing_request_header", modify_outgoing_request_header)
        if modify_outgoing_response_header is not None:
            _setter("modify_outgoing_response_header", modify_outgoing_response_header)
        if modify_via_header is not None:
            _setter("modify_via_header", modify_via_header)
        if origin is not None:
            _setter("origin", origin)
        if origin_characteristics is not None:
            _setter("origin_characteristics", origin_characteristics)
        if origin_characteristics_wsd is not None:
            _setter("origin_characteristics_wsd", origin_characteristics_wsd)
        if origin_failure_recovery_method is not None:
            _setter("origin_failure_recovery_method", origin_failure_recovery_method)
        if origin_failure_recovery_policy is not None:
            _setter("origin_failure_recovery_policy", origin_failure_recovery_policy)
        if origin_ip_acl is not None:
            _setter("origin_ip_acl", origin_ip_acl)
        if persistent_client_connection is not None:
            _setter("persistent_client_connection", persistent_client_connection)
        if persistent_connection is not None:
            _setter("persistent_connection", persistent_connection)
        if personally_identifiable_information is not None:
            _setter("personally_identifiable_information", personally_identifiable_information)
        if phased_release is not None:
            _setter("phased_release", phased_release)
        if preconnect is not None:
            _setter("preconnect", preconnect)
        if predictive_content_delivery is not None:
            _setter("predictive_content_delivery", predictive_content_delivery)
        if predictive_prefetching is not None:
            _setter("predictive_prefetching", predictive_prefetching)
        if prefetch is not None:
            _setter("prefetch", prefetch)
        if prefetchable is not None:
            _setter("prefetchable", prefetchable)
        if prefresh_cache is not None:
            _setter("prefresh_cache", prefresh_cache)
        if quality is not None:
            _setter("quality", quality)
        if quic_beta is not None:
            _setter("quic_beta", quic_beta)
        if random_seek is not None:
            _setter("random_seek", random_seek)
        if rapid is not None:
            _setter("rapid", rapid)
        if read_timeout is not None:
            _setter("read_timeout", read_timeout)
        if real_time_reporting is not None:
            _setter("real_time_reporting", real_time_reporting)
        if real_user_monitoring is not None:
            _setter("real_user_monitoring", real_user_monitoring)
        if redirect is not None:
            _setter("redirect", redirect)
        if redirectplus is not None:
            _setter("redirectplus", redirectplus)
        if referer_checking is not None:
            _setter("referer_checking", referer_checking)
        if remove_query_parameter is not None:
            _setter("remove_query_parameter", remove_query_parameter)
        if remove_vary is not None:
            _setter("remove_vary", remove_vary)
        if report is not None:
            _setter("report", report)
        if request_control is not None:
            _setter("request_control", request_control)
        if request_type_marker is not None:
            _setter("request_type_marker", request_type_marker)
        if resource_optimizer is not None:
            _setter("resource_optimizer", resource_optimizer)
        if resource_optimizer_extended_compatibility is not None:
            _setter("resource_optimizer_extended_compatibility", resource_optimizer_extended_compatibility)
        if response_code is not None:
            _setter("response_code", response_code)
        if response_cookie is not None:
            _setter("response_cookie", response_cookie)
        if restrict_object_caching is not None:
            _setter("restrict_object_caching", restrict_object_caching)
        if return_cache_status is not None:
            _setter("return_cache_status", return_cache_status)
        if rewrite_url is not None:
            _setter("rewrite_url", rewrite_url)
        if rum_custom is not None:
            _setter("rum_custom", rum_custom)
        if saas_definitions is not None:
            _setter("saas_definitions", saas_definitions)
        if sales_force_commerce_cloud_client is not None:
            _setter("sales_force_commerce_cloud_client", sales_force_commerce_cloud_client)
        if sales_force_commerce_cloud_provider is not None:
            _setter("sales_force_commerce_cloud_provider", sales_force_commerce_cloud_provider)
        if sales_force_commerce_cloud_provider_host_header is not None:
            _setter("sales_force_commerce_cloud_provider_host_header", sales_force_commerce_cloud_provider_host_header)
        if save_post_dca_processing is not None:
            _setter("save_post_dca_processing", save_post_dca_processing)
        if schedule_invalidation is not None:
            _setter("schedule_invalidation", schedule_invalidation)
        if script_management is not None:
            _setter("script_management", script_management)
        if segmented_content_protection is not None:
            _setter("segmented_content_protection", segmented_content_protection)
        if segmented_media_optimization is not None:
            _setter("segmented_media_optimization", segmented_media_optimization)
        if segmented_media_streaming_prefetch is not None:
            _setter("segmented_media_streaming_prefetch", segmented_media_streaming_prefetch)
        if set_variable is not None:
            _setter("set_variable", set_variable)
        if simulate_error_code is not None:
            _setter("simulate_error_code", simulate_error_code)
        if site_shield is not None:
            _setter("site_shield", site_shield)
        if standard_tls_migration is not None:
            _setter("standard_tls_migration", standard_tls_migration)
        if standard_tls_migration_override is not None:
            _setter("standard_tls_migration_override", standard_tls_migration_override)
        if strict_header_parsing is not None:
            _setter("strict_header_parsing", strict_header_parsing)
        if sub_customer is not None:
            _setter("sub_customer", sub_customer)
        if sure_route is not None:
            _setter("sure_route", sure_route)
        if tcp_optimization is not None:
            _setter("tcp_optimization", tcp_optimization)
        if tea_leaf is not None:
            _setter("tea_leaf", tea_leaf)
        if tiered_distribution is not None:
            _setter("tiered_distribution", tiered_distribution)
        if tiered_distribution_advanced is not None:
            _setter("tiered_distribution_advanced", tiered_distribution_advanced)
        if tiered_distribution_customization is not None:
            _setter("tiered_distribution_customization", tiered_distribution_customization)
        if timeout is not None:
            _setter("timeout", timeout)
        if uid_configuration is not None:
            _setter("uid_configuration", uid_configuration)
        if validate_entity_tag is not None:
            _setter("validate_entity_tag", validate_entity_tag)
        if verify_json_web_token is not None:
            _setter("verify_json_web_token", verify_json_web_token)
        if verify_json_web_token_for_dcp is not None:
            _setter("verify_json_web_token_for_dcp", verify_json_web_token_for_dcp)
        if verify_token_authorization is not None:
            _setter("verify_token_authorization", verify_token_authorization)
        if virtual_waiting_room is not None:
            _setter("virtual_waiting_room", virtual_waiting_room)
        if virtual_waiting_room_with_edge_workers is not None:
            _setter("virtual_waiting_room_with_edge_workers", virtual_waiting_room_with_edge_workers)
        if visitor_prioritization is not None:
            _setter("visitor_prioritization", visitor_prioritization)
        if visitor_prioritization_fifo is not None:
            _setter("visitor_prioritization_fifo", visitor_prioritization_fifo)
        if visitor_prioritization_fifo_standalone is not None:
            _setter("visitor_prioritization_fifo_standalone", visitor_prioritization_fifo_standalone)
        if watermarking is not None:
            _setter("watermarking", watermarking)
        if web_application_firewall is not None:
            _setter("web_application_firewall", web_application_firewall)
        if web_sockets is not None:
            _setter("web_sockets", web_sockets)
        if webdav is not None:
            _setter("webdav", webdav)

    @property
    @pulumi.getter(name="adScalerCircuitBreaker")
    def ad_scaler_circuit_breaker(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdScalerCircuitBreakerResult']:
        return pulumi.get(self, "ad_scaler_circuit_breaker")

    @property
    @pulumi.getter(name="adaptiveAcceleration")
    def adaptive_acceleration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveAccelerationResult']:
        return pulumi.get(self, "adaptive_acceleration")

    @property
    @pulumi.getter(name="adaptiveImageCompression")
    def adaptive_image_compression(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveImageCompressionResult']:
        return pulumi.get(self, "adaptive_image_compression")

    @property
    @pulumi.getter
    def advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdvancedResult']:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="aggregatedReporting")
    def aggregated_reporting(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAggregatedReportingResult']:
        return pulumi.get(self, "aggregated_reporting")

    @property
    @pulumi.getter
    def akamaizer(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerResult']:
        return pulumi.get(self, "akamaizer")

    @property
    @pulumi.getter(name="akamaizerTag")
    def akamaizer_tag(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerTagResult']:
        return pulumi.get(self, "akamaizer_tag")

    @property
    @pulumi.getter(name="allHttpInCacheHierarchy")
    def all_http_in_cache_hierarchy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllHttpInCacheHierarchyResult']:
        return pulumi.get(self, "all_http_in_cache_hierarchy")

    @property
    @pulumi.getter(name="allowCloudletsOrigins")
    def allow_cloudlets_origins(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowCloudletsOriginsResult']:
        return pulumi.get(self, "allow_cloudlets_origins")

    @property
    @pulumi.getter(name="allowDelete")
    def allow_delete(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowDeleteResult']:
        return pulumi.get(self, "allow_delete")

    @property
    @pulumi.getter(name="allowHttpsCacheKeySharing")
    def allow_https_cache_key_sharing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsCacheKeySharingResult']:
        return pulumi.get(self, "allow_https_cache_key_sharing")

    @property
    @pulumi.getter(name="allowHttpsDowngrade")
    def allow_https_downgrade(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsDowngradeResult']:
        return pulumi.get(self, "allow_https_downgrade")

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowOptionsResult']:
        return pulumi.get(self, "allow_options")

    @property
    @pulumi.getter(name="allowPatch")
    def allow_patch(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowPatchResult']:
        return pulumi.get(self, "allow_patch")

    @property
    @pulumi.getter(name="allowPost")
    def allow_post(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowPostResult']:
        return pulumi.get(self, "allow_post")

    @property
    @pulumi.getter(name="allowPut")
    def allow_put(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowPutResult']:
        return pulumi.get(self, "allow_put")

    @property
    @pulumi.getter(name="allowTransferEncoding")
    def allow_transfer_encoding(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowTransferEncodingResult']:
        return pulumi.get(self, "allow_transfer_encoding")

    @property
    @pulumi.getter(name="altSvcHeader")
    def alt_svc_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAltSvcHeaderResult']:
        return pulumi.get(self, "alt_svc_header")

    @property
    @pulumi.getter(name="apiPrioritization")
    def api_prioritization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationResult']:
        return pulumi.get(self, "api_prioritization")

    @property
    @pulumi.getter(name="applicationLoadBalancer")
    def application_load_balancer(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerResult']:
        return pulumi.get(self, "application_load_balancer")

    @property
    @pulumi.getter(name="audienceSegmentation")
    def audience_segmentation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationResult']:
        return pulumi.get(self, "audience_segmentation")

    @property
    @pulumi.getter(name="autoDomainValidation")
    def auto_domain_validation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAutoDomainValidationResult']:
        return pulumi.get(self, "auto_domain_validation")

    @property
    @pulumi.getter(name="baseDirectory")
    def base_directory(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBaseDirectoryResult']:
        return pulumi.get(self, "base_directory")

    @property
    @pulumi.getter(name="bossBeaconing")
    def boss_beaconing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBossBeaconingResult']:
        return pulumi.get(self, "boss_beaconing")

    @property
    @pulumi.getter
    def breadcrumbs(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBreadcrumbsResult']:
        return pulumi.get(self, "breadcrumbs")

    @property
    @pulumi.getter(name="breakConnection")
    def break_connection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBreakConnectionResult']:
        return pulumi.get(self, "break_connection")

    @property
    @pulumi.getter
    def brotli(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBrotliResult']:
        return pulumi.get(self, "brotli")

    @property
    @pulumi.getter(name="cacheError")
    def cache_error(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheErrorResult']:
        return pulumi.get(self, "cache_error")

    @property
    @pulumi.getter(name="cacheId")
    def cache_id(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheIdResult']:
        return pulumi.get(self, "cache_id")

    @property
    @pulumi.getter(name="cacheKeyIgnoreCase")
    def cache_key_ignore_case(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyIgnoreCaseResult']:
        return pulumi.get(self, "cache_key_ignore_case")

    @property
    @pulumi.getter(name="cacheKeyQueryParams")
    def cache_key_query_params(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyQueryParamsResult']:
        return pulumi.get(self, "cache_key_query_params")

    @property
    @pulumi.getter(name="cacheKeyRewrite")
    def cache_key_rewrite(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyRewriteResult']:
        return pulumi.get(self, "cache_key_rewrite")

    @property
    @pulumi.getter(name="cachePost")
    def cache_post(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCachePostResult']:
        return pulumi.get(self, "cache_post")

    @property
    @pulumi.getter(name="cacheRedirect")
    def cache_redirect(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheRedirectResult']:
        return pulumi.get(self, "cache_redirect")

    @property
    @pulumi.getter(name="cacheTag")
    def cache_tag(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagResult']:
        return pulumi.get(self, "cache_tag")

    @property
    @pulumi.getter(name="cacheTagVisible")
    def cache_tag_visible(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagVisibleResult']:
        return pulumi.get(self, "cache_tag_visible")

    @property
    @pulumi.getter
    def caching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCachingResult']:
        return pulumi.get(self, "caching")

    @property
    @pulumi.getter(name="centralAuthorization")
    def central_authorization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCentralAuthorizationResult']:
        return pulumi.get(self, "central_authorization")

    @property
    @pulumi.getter(name="chaseRedirects")
    def chase_redirects(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorChaseRedirectsResult']:
        return pulumi.get(self, "chase_redirects")

    @property
    @pulumi.getter(name="clientCharacteristics")
    def client_characteristics(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorClientCharacteristicsResult']:
        return pulumi.get(self, "client_characteristics")

    @property
    @pulumi.getter(name="cloudInterconnects")
    def cloud_interconnects(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCloudInterconnectsResult']:
        return pulumi.get(self, "cloud_interconnects")

    @property
    @pulumi.getter(name="cloudWrapper")
    def cloud_wrapper(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperResult']:
        return pulumi.get(self, "cloud_wrapper")

    @property
    @pulumi.getter(name="cloudWrapperAdvanced")
    def cloud_wrapper_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperAdvancedResult']:
        return pulumi.get(self, "cloud_wrapper_advanced")

    @property
    @pulumi.getter(name="commonMediaClientData")
    def common_media_client_data(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCommonMediaClientDataResult']:
        return pulumi.get(self, "common_media_client_data")

    @property
    @pulumi.getter(name="conditionalOrigin")
    def conditional_origin(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorConditionalOriginResult']:
        return pulumi.get(self, "conditional_origin")

    @property
    @pulumi.getter(name="constructResponse")
    def construct_response(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorConstructResponseResult']:
        return pulumi.get(self, "construct_response")

    @property
    @pulumi.getter(name="contentCharacteristics")
    def content_characteristics(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsResult']:
        return pulumi.get(self, "content_characteristics")

    @property
    @pulumi.getter(name="contentCharacteristicsAmd")
    def content_characteristics_amd(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsAmdResult']:
        return pulumi.get(self, "content_characteristics_amd")

    @property
    @pulumi.getter(name="contentCharacteristicsDd")
    def content_characteristics_dd(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsDdResult']:
        return pulumi.get(self, "content_characteristics_dd")

    @property
    @pulumi.getter(name="contentCharacteristicsWsdLargeFile")
    def content_characteristics_wsd_large_file(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLargeFileResult']:
        return pulumi.get(self, "content_characteristics_wsd_large_file")

    @property
    @pulumi.getter(name="contentCharacteristicsWsdLive")
    def content_characteristics_wsd_live(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLiveResult']:
        return pulumi.get(self, "content_characteristics_wsd_live")

    @property
    @pulumi.getter(name="contentCharacteristicsWsdVod")
    def content_characteristics_wsd_vod(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdVodResult']:
        return pulumi.get(self, "content_characteristics_wsd_vod")

    @property
    @pulumi.getter(name="contentPrePosition")
    def content_pre_position(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentPrePositionResult']:
        return pulumi.get(self, "content_pre_position")

    @property
    @pulumi.getter(name="contentTargetingProtection")
    def content_targeting_protection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentTargetingProtectionResult']:
        return pulumi.get(self, "content_targeting_protection")

    @property
    @pulumi.getter(name="corsSupport")
    def cors_support(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCorsSupportResult']:
        return pulumi.get(self, "cors_support")

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeResult']:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="customBehavior")
    def custom_behavior(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCustomBehaviorResult']:
        return pulumi.get(self, "custom_behavior")

    @property
    @pulumi.getter
    def datastream(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDatastreamResult']:
        return pulumi.get(self, "datastream")

    @property
    @pulumi.getter
    def dcp(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpResult']:
        return pulumi.get(self, "dcp")

    @property
    @pulumi.getter(name="dcpAuthHmacTransformation")
    def dcp_auth_hmac_transformation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthHmacTransformationResult']:
        return pulumi.get(self, "dcp_auth_hmac_transformation")

    @property
    @pulumi.getter(name="dcpAuthRegexTransformation")
    def dcp_auth_regex_transformation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthRegexTransformationResult']:
        return pulumi.get(self, "dcp_auth_regex_transformation")

    @property
    @pulumi.getter(name="dcpAuthSubstringTransformation")
    def dcp_auth_substring_transformation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthSubstringTransformationResult']:
        return pulumi.get(self, "dcp_auth_substring_transformation")

    @property
    @pulumi.getter(name="dcpAuthVariableExtractor")
    def dcp_auth_variable_extractor(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthVariableExtractorResult']:
        return pulumi.get(self, "dcp_auth_variable_extractor")

    @property
    @pulumi.getter(name="dcpDefaultAuthzGroups")
    def dcp_default_authz_groups(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpDefaultAuthzGroupsResult']:
        return pulumi.get(self, "dcp_default_authz_groups")

    @property
    @pulumi.getter(name="dcpDevRelations")
    def dcp_dev_relations(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpDevRelationsResult']:
        return pulumi.get(self, "dcp_dev_relations")

    @property
    @pulumi.getter(name="dcpRealTimeAuth")
    def dcp_real_time_auth(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpRealTimeAuthResult']:
        return pulumi.get(self, "dcp_real_time_auth")

    @property
    @pulumi.getter(name="deliveryReceipt")
    def delivery_receipt(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDeliveryReceiptResult']:
        return pulumi.get(self, "delivery_receipt")

    @property
    @pulumi.getter(name="denyAccess")
    def deny_access(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDenyAccessResult']:
        return pulumi.get(self, "deny_access")

    @property
    @pulumi.getter(name="denyDirectFailoverAccess")
    def deny_direct_failover_access(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDenyDirectFailoverAccessResult']:
        return pulumi.get(self, "deny_direct_failover_access")

    @property
    @pulumi.getter(name="deviceCharacteristicCacheId")
    def device_characteristic_cache_id(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicCacheIdResult']:
        return pulumi.get(self, "device_characteristic_cache_id")

    @property
    @pulumi.getter(name="deviceCharacteristicHeader")
    def device_characteristic_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicHeaderResult']:
        return pulumi.get(self, "device_characteristic_header")

    @property
    @pulumi.getter(name="dnsAsyncRefresh")
    def dns_async_refresh(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDnsAsyncRefreshResult']:
        return pulumi.get(self, "dns_async_refresh")

    @property
    @pulumi.getter(name="dnsPrefresh")
    def dns_prefresh(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDnsPrefreshResult']:
        return pulumi.get(self, "dns_prefresh")

    @property
    @pulumi.getter(name="downgradeProtocol")
    def downgrade_protocol(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDowngradeProtocolResult']:
        return pulumi.get(self, "downgrade_protocol")

    @property
    @pulumi.getter(name="downloadCompleteMarker")
    def download_complete_marker(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDownloadCompleteMarkerResult']:
        return pulumi.get(self, "download_complete_marker")

    @property
    @pulumi.getter(name="downloadNotification")
    def download_notification(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDownloadNotificationResult']:
        return pulumi.get(self, "download_notification")

    @property
    @pulumi.getter(name="downstreamCache")
    def downstream_cache(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDownstreamCacheResult']:
        return pulumi.get(self, "downstream_cache")

    @property
    @pulumi.getter(name="dynamicThroughtputOptimization")
    def dynamic_throughtput_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationResult']:
        return pulumi.get(self, "dynamic_throughtput_optimization")

    @property
    @pulumi.getter(name="dynamicThroughtputOptimizationOverride")
    def dynamic_throughtput_optimization_override(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationOverrideResult']:
        return pulumi.get(self, "dynamic_throughtput_optimization_override")

    @property
    @pulumi.getter(name="dynamicWebContent")
    def dynamic_web_content(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDynamicWebContentResult']:
        return pulumi.get(self, "dynamic_web_content")

    @property
    @pulumi.getter(name="ecmsBulkUpload")
    def ecms_bulk_upload(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsBulkUploadResult']:
        return pulumi.get(self, "ecms_bulk_upload")

    @property
    @pulumi.getter(name="ecmsDatabase")
    def ecms_database(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatabaseResult']:
        return pulumi.get(self, "ecms_database")

    @property
    @pulumi.getter(name="ecmsDataset")
    def ecms_dataset(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatasetResult']:
        return pulumi.get(self, "ecms_dataset")

    @property
    @pulumi.getter(name="ecmsObjectKey")
    def ecms_object_key(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsObjectKeyResult']:
        return pulumi.get(self, "ecms_object_key")

    @property
    @pulumi.getter(name="edgeConnect")
    def edge_connect(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeConnectResult']:
        return pulumi.get(self, "edge_connect")

    @property
    @pulumi.getter(name="edgeLoadBalancingAdvanced")
    def edge_load_balancing_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingAdvancedResult']:
        return pulumi.get(self, "edge_load_balancing_advanced")

    @property
    @pulumi.getter(name="edgeLoadBalancingDataCenter")
    def edge_load_balancing_data_center(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterResult']:
        return pulumi.get(self, "edge_load_balancing_data_center")

    @property
    @pulumi.getter(name="edgeLoadBalancingOrigin")
    def edge_load_balancing_origin(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingOriginResult']:
        return pulumi.get(self, "edge_load_balancing_origin")

    @property
    @pulumi.getter(name="edgeOriginAuthorization")
    def edge_origin_authorization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeOriginAuthorizationResult']:
        return pulumi.get(self, "edge_origin_authorization")

    @property
    @pulumi.getter(name="edgeRedirector")
    def edge_redirector(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorResult']:
        return pulumi.get(self, "edge_redirector")

    @property
    @pulumi.getter(name="edgeScape")
    def edge_scape(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeScapeResult']:
        return pulumi.get(self, "edge_scape")

    @property
    @pulumi.getter(name="edgeSideIncludes")
    def edge_side_includes(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeSideIncludesResult']:
        return pulumi.get(self, "edge_side_includes")

    @property
    @pulumi.getter(name="edgeWorker")
    def edge_worker(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeWorkerResult']:
        return pulumi.get(self, "edge_worker")

    @property
    @pulumi.getter(name="enhancedAkamaiProtocol")
    def enhanced_akamai_protocol(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedAkamaiProtocolResult']:
        return pulumi.get(self, "enhanced_akamai_protocol")

    @property
    @pulumi.getter(name="enhancedProxyDetection")
    def enhanced_proxy_detection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedProxyDetectionResult']:
        return pulumi.get(self, "enhanced_proxy_detection")

    @property
    @pulumi.getter(name="epdForwardHeaderEnrichment")
    def epd_forward_header_enrichment(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEpdForwardHeaderEnrichmentResult']:
        return pulumi.get(self, "epd_forward_header_enrichment")

    @property
    @pulumi.getter(name="failAction")
    def fail_action(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionResult']:
        return pulumi.get(self, "fail_action")

    @property
    @pulumi.getter(name="failoverBotManagerFeatureCompatibility")
    def failover_bot_manager_feature_compatibility(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailoverBotManagerFeatureCompatibilityResult']:
        return pulumi.get(self, "failover_bot_manager_feature_compatibility")

    @property
    @pulumi.getter(name="fastInvalidate")
    def fast_invalidate(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFastInvalidateResult']:
        return pulumi.get(self, "fast_invalidate")

    @property
    @pulumi.getter(name="firstPartyMarketing")
    def first_party_marketing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingResult']:
        return pulumi.get(self, "first_party_marketing")

    @property
    @pulumi.getter(name="firstPartyMarketingPlus")
    def first_party_marketing_plus(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusResult']:
        return pulumi.get(self, "first_party_marketing_plus")

    @property
    @pulumi.getter(name="forwardRewrite")
    def forward_rewrite(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteResult']:
        return pulumi.get(self, "forward_rewrite")

    @property
    @pulumi.getter
    def g2oheader(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorG2oheaderResult']:
        return pulumi.get(self, "g2oheader")

    @property
    @pulumi.getter(name="globalRequestNumber")
    def global_request_number(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorGlobalRequestNumberResult']:
        return pulumi.get(self, "global_request_number")

    @property
    @pulumi.getter(name="graphqlCaching")
    def graphql_caching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorGraphqlCachingResult']:
        return pulumi.get(self, "graphql_caching")

    @property
    @pulumi.getter(name="gzipResponse")
    def gzip_response(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorGzipResponseResult']:
        return pulumi.get(self, "gzip_response")

    @property
    @pulumi.getter(name="hdDataAdvanced")
    def hd_data_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHdDataAdvancedResult']:
        return pulumi.get(self, "hd_data_advanced")

    @property
    @pulumi.getter(name="healthDetection")
    def health_detection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHealthDetectionResult']:
        return pulumi.get(self, "health_detection")

    @property
    @pulumi.getter(name="hsafEipBinding")
    def hsaf_eip_binding(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHsafEipBindingResult']:
        return pulumi.get(self, "hsaf_eip_binding")

    @property
    @pulumi.getter
    def http2(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttp2Result']:
        return pulumi.get(self, "http2")

    @property
    @pulumi.getter
    def http3(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttp3Result']:
        return pulumi.get(self, "http3")

    @property
    @pulumi.getter(name="httpStrictTransportSecurity")
    def http_strict_transport_security(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttpStrictTransportSecurityResult']:
        return pulumi.get(self, "http_strict_transport_security")

    @property
    @pulumi.getter(name="httpToHttpsUpgrade")
    def http_to_https_upgrade(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttpToHttpsUpgradeResult']:
        return pulumi.get(self, "http_to_https_upgrade")

    @property
    @pulumi.getter(name="imOverride")
    def im_override(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImOverrideResult']:
        return pulumi.get(self, "im_override")

    @property
    @pulumi.getter(name="imageAndVideoManager")
    def image_and_video_manager(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerResult']:
        return pulumi.get(self, "image_and_video_manager")

    @property
    @pulumi.getter(name="imageManager")
    def image_manager(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerResult']:
        return pulumi.get(self, "image_manager")

    @property
    @pulumi.getter(name="imageManagerVideo")
    def image_manager_video(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoResult']:
        return pulumi.get(self, "image_manager_video")

    @property
    @pulumi.getter
    def include(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorIncludeResult']:
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def instant(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorInstantResult']:
        return pulumi.get(self, "instant")

    @property
    @pulumi.getter(name="instantConfig")
    def instant_config(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorInstantConfigResult']:
        return pulumi.get(self, "instant_config")

    @property
    @pulumi.getter(name="largeFileOptimization")
    def large_file_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationResult']:
        return pulumi.get(self, "large_file_optimization")

    @property
    @pulumi.getter(name="largeFileOptimizationAdvanced")
    def large_file_optimization_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationAdvancedResult']:
        return pulumi.get(self, "large_file_optimization_advanced")

    @property
    @pulumi.getter(name="limitBitRate")
    def limit_bit_rate(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateResult']:
        return pulumi.get(self, "limit_bit_rate")

    @property
    @pulumi.getter(name="logCustom")
    def log_custom(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLogCustomResult']:
        return pulumi.get(self, "log_custom")

    @property
    @pulumi.getter(name="mPulse")
    def m_pulse(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMPulseResult']:
        return pulumi.get(self, "m_pulse")

    @property
    @pulumi.getter(name="manifestPersonalization")
    def manifest_personalization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorManifestPersonalizationResult']:
        return pulumi.get(self, "manifest_personalization")

    @property
    @pulumi.getter(name="manifestRerouting")
    def manifest_rerouting(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorManifestReroutingResult']:
        return pulumi.get(self, "manifest_rerouting")

    @property
    @pulumi.getter(name="manualServerPush")
    def manual_server_push(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorManualServerPushResult']:
        return pulumi.get(self, "manual_server_push")

    @property
    @pulumi.getter(name="mediaAcceleration")
    def media_acceleration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationResult']:
        return pulumi.get(self, "media_acceleration")

    @property
    @pulumi.getter(name="mediaAccelerationQuicOptout")
    def media_acceleration_quic_optout(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationQuicOptoutResult']:
        return pulumi.get(self, "media_acceleration_quic_optout")

    @property
    @pulumi.getter(name="mediaClient")
    def media_client(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaClientResult']:
        return pulumi.get(self, "media_client")

    @property
    @pulumi.getter(name="mediaFileRetrievalOptimization")
    def media_file_retrieval_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaFileRetrievalOptimizationResult']:
        return pulumi.get(self, "media_file_retrieval_optimization")

    @property
    @pulumi.getter(name="mediaOriginFailover")
    def media_origin_failover(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaOriginFailoverResult']:
        return pulumi.get(self, "media_origin_failover")

    @property
    @pulumi.getter(name="metadataCaching")
    def metadata_caching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMetadataCachingResult']:
        return pulumi.get(self, "metadata_caching")

    @property
    @pulumi.getter(name="mobileSdkPerformance")
    def mobile_sdk_performance(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMobileSdkPerformanceResult']:
        return pulumi.get(self, "mobile_sdk_performance")

    @property
    @pulumi.getter(name="modifyIncomingRequestHeader")
    def modify_incoming_request_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingRequestHeaderResult']:
        return pulumi.get(self, "modify_incoming_request_header")

    @property
    @pulumi.getter(name="modifyIncomingResponseHeader")
    def modify_incoming_response_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingResponseHeaderResult']:
        return pulumi.get(self, "modify_incoming_response_header")

    @property
    @pulumi.getter(name="modifyOutgoingRequestHeader")
    def modify_outgoing_request_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingRequestHeaderResult']:
        return pulumi.get(self, "modify_outgoing_request_header")

    @property
    @pulumi.getter(name="modifyOutgoingResponseHeader")
    def modify_outgoing_response_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingResponseHeaderResult']:
        return pulumi.get(self, "modify_outgoing_response_header")

    @property
    @pulumi.getter(name="modifyViaHeader")
    def modify_via_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyViaHeaderResult']:
        return pulumi.get(self, "modify_via_header")

    @property
    @pulumi.getter
    def origin(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginResult']:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="originCharacteristics")
    def origin_characteristics(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsResult']:
        return pulumi.get(self, "origin_characteristics")

    @property
    @pulumi.getter(name="originCharacteristicsWsd")
    def origin_characteristics_wsd(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsWsdResult']:
        return pulumi.get(self, "origin_characteristics_wsd")

    @property
    @pulumi.getter(name="originFailureRecoveryMethod")
    def origin_failure_recovery_method(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryMethodResult']:
        return pulumi.get(self, "origin_failure_recovery_method")

    @property
    @pulumi.getter(name="originFailureRecoveryPolicy")
    def origin_failure_recovery_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryPolicyResult']:
        return pulumi.get(self, "origin_failure_recovery_policy")

    @property
    @pulumi.getter(name="originIpAcl")
    def origin_ip_acl(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginIpAclResult']:
        return pulumi.get(self, "origin_ip_acl")

    @property
    @pulumi.getter(name="persistentClientConnection")
    def persistent_client_connection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPersistentClientConnectionResult']:
        return pulumi.get(self, "persistent_client_connection")

    @property
    @pulumi.getter(name="persistentConnection")
    def persistent_connection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPersistentConnectionResult']:
        return pulumi.get(self, "persistent_connection")

    @property
    @pulumi.getter(name="personallyIdentifiableInformation")
    def personally_identifiable_information(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPersonallyIdentifiableInformationResult']:
        return pulumi.get(self, "personally_identifiable_information")

    @property
    @pulumi.getter(name="phasedRelease")
    def phased_release(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseResult']:
        return pulumi.get(self, "phased_release")

    @property
    @pulumi.getter
    def preconnect(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPreconnectResult']:
        return pulumi.get(self, "preconnect")

    @property
    @pulumi.getter(name="predictiveContentDelivery")
    def predictive_content_delivery(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPredictiveContentDeliveryResult']:
        return pulumi.get(self, "predictive_content_delivery")

    @property
    @pulumi.getter(name="predictivePrefetching")
    def predictive_prefetching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPredictivePrefetchingResult']:
        return pulumi.get(self, "predictive_prefetching")

    @property
    @pulumi.getter
    def prefetch(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchResult']:
        return pulumi.get(self, "prefetch")

    @property
    @pulumi.getter
    def prefetchable(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchableResult']:
        return pulumi.get(self, "prefetchable")

    @property
    @pulumi.getter(name="prefreshCache")
    def prefresh_cache(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPrefreshCacheResult']:
        return pulumi.get(self, "prefresh_cache")

    @property
    @pulumi.getter
    def quality(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorQualityResult']:
        return pulumi.get(self, "quality")

    @property
    @pulumi.getter(name="quicBeta")
    def quic_beta(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorQuicBetaResult']:
        return pulumi.get(self, "quic_beta")

    @property
    @pulumi.getter(name="randomSeek")
    def random_seek(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRandomSeekResult']:
        return pulumi.get(self, "random_seek")

    @property
    @pulumi.getter
    def rapid(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRapidResult']:
        return pulumi.get(self, "rapid")

    @property
    @pulumi.getter(name="readTimeout")
    def read_timeout(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorReadTimeoutResult']:
        return pulumi.get(self, "read_timeout")

    @property
    @pulumi.getter(name="realTimeReporting")
    def real_time_reporting(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRealTimeReportingResult']:
        return pulumi.get(self, "real_time_reporting")

    @property
    @pulumi.getter(name="realUserMonitoring")
    def real_user_monitoring(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRealUserMonitoringResult']:
        return pulumi.get(self, "real_user_monitoring")

    @property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRedirectResult']:
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter
    def redirectplus(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRedirectplusResult']:
        return pulumi.get(self, "redirectplus")

    @property
    @pulumi.getter(name="refererChecking")
    def referer_checking(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRefererCheckingResult']:
        return pulumi.get(self, "referer_checking")

    @property
    @pulumi.getter(name="removeQueryParameter")
    def remove_query_parameter(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRemoveQueryParameterResult']:
        return pulumi.get(self, "remove_query_parameter")

    @property
    @pulumi.getter(name="removeVary")
    def remove_vary(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRemoveVaryResult']:
        return pulumi.get(self, "remove_vary")

    @property
    @pulumi.getter
    def report(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorReportResult']:
        return pulumi.get(self, "report")

    @property
    @pulumi.getter(name="requestControl")
    def request_control(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlResult']:
        return pulumi.get(self, "request_control")

    @property
    @pulumi.getter(name="requestTypeMarker")
    def request_type_marker(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestTypeMarkerResult']:
        return pulumi.get(self, "request_type_marker")

    @property
    @pulumi.getter(name="resourceOptimizer")
    def resource_optimizer(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerResult']:
        return pulumi.get(self, "resource_optimizer")

    @property
    @pulumi.getter(name="resourceOptimizerExtendedCompatibility")
    def resource_optimizer_extended_compatibility(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerExtendedCompatibilityResult']:
        return pulumi.get(self, "resource_optimizer_extended_compatibility")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResponseCodeResult']:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="responseCookie")
    def response_cookie(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResponseCookieResult']:
        return pulumi.get(self, "response_cookie")

    @property
    @pulumi.getter(name="restrictObjectCaching")
    def restrict_object_caching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRestrictObjectCachingResult']:
        return pulumi.get(self, "restrict_object_caching")

    @property
    @pulumi.getter(name="returnCacheStatus")
    def return_cache_status(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorReturnCacheStatusResult']:
        return pulumi.get(self, "return_cache_status")

    @property
    @pulumi.getter(name="rewriteUrl")
    def rewrite_url(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRewriteUrlResult']:
        return pulumi.get(self, "rewrite_url")

    @property
    @pulumi.getter(name="rumCustom")
    def rum_custom(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRumCustomResult']:
        return pulumi.get(self, "rum_custom")

    @property
    @pulumi.getter(name="saasDefinitions")
    def saas_definitions(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSaasDefinitionsResult']:
        return pulumi.get(self, "saas_definitions")

    @property
    @pulumi.getter(name="salesForceCommerceCloudClient")
    def sales_force_commerce_cloud_client(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudClientResult']:
        return pulumi.get(self, "sales_force_commerce_cloud_client")

    @property
    @pulumi.getter(name="salesForceCommerceCloudProvider")
    def sales_force_commerce_cloud_provider(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderResult']:
        return pulumi.get(self, "sales_force_commerce_cloud_provider")

    @property
    @pulumi.getter(name="salesForceCommerceCloudProviderHostHeader")
    def sales_force_commerce_cloud_provider_host_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderHostHeaderResult']:
        return pulumi.get(self, "sales_force_commerce_cloud_provider_host_header")

    @property
    @pulumi.getter(name="savePostDcaProcessing")
    def save_post_dca_processing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSavePostDcaProcessingResult']:
        return pulumi.get(self, "save_post_dca_processing")

    @property
    @pulumi.getter(name="scheduleInvalidation")
    def schedule_invalidation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorScheduleInvalidationResult']:
        return pulumi.get(self, "schedule_invalidation")

    @property
    @pulumi.getter(name="scriptManagement")
    def script_management(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorScriptManagementResult']:
        return pulumi.get(self, "script_management")

    @property
    @pulumi.getter(name="segmentedContentProtection")
    def segmented_content_protection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedContentProtectionResult']:
        return pulumi.get(self, "segmented_content_protection")

    @property
    @pulumi.getter(name="segmentedMediaOptimization")
    def segmented_media_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaOptimizationResult']:
        return pulumi.get(self, "segmented_media_optimization")

    @property
    @pulumi.getter(name="segmentedMediaStreamingPrefetch")
    def segmented_media_streaming_prefetch(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaStreamingPrefetchResult']:
        return pulumi.get(self, "segmented_media_streaming_prefetch")

    @property
    @pulumi.getter(name="setVariable")
    def set_variable(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSetVariableResult']:
        return pulumi.get(self, "set_variable")

    @property
    @pulumi.getter(name="simulateErrorCode")
    def simulate_error_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSimulateErrorCodeResult']:
        return pulumi.get(self, "simulate_error_code")

    @property
    @pulumi.getter(name="siteShield")
    def site_shield(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldResult']:
        return pulumi.get(self, "site_shield")

    @property
    @pulumi.getter(name="standardTlsMigration")
    def standard_tls_migration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationResult']:
        return pulumi.get(self, "standard_tls_migration")

    @property
    @pulumi.getter(name="standardTlsMigrationOverride")
    def standard_tls_migration_override(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationOverrideResult']:
        return pulumi.get(self, "standard_tls_migration_override")

    @property
    @pulumi.getter(name="strictHeaderParsing")
    def strict_header_parsing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorStrictHeaderParsingResult']:
        return pulumi.get(self, "strict_header_parsing")

    @property
    @pulumi.getter(name="subCustomer")
    def sub_customer(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSubCustomerResult']:
        return pulumi.get(self, "sub_customer")

    @property
    @pulumi.getter(name="sureRoute")
    def sure_route(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSureRouteResult']:
        return pulumi.get(self, "sure_route")

    @property
    @pulumi.getter(name="tcpOptimization")
    def tcp_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTcpOptimizationResult']:
        return pulumi.get(self, "tcp_optimization")

    @property
    @pulumi.getter(name="teaLeaf")
    def tea_leaf(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTeaLeafResult']:
        return pulumi.get(self, "tea_leaf")

    @property
    @pulumi.getter(name="tieredDistribution")
    def tiered_distribution(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionResult']:
        return pulumi.get(self, "tiered_distribution")

    @property
    @pulumi.getter(name="tieredDistributionAdvanced")
    def tiered_distribution_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionAdvancedResult']:
        return pulumi.get(self, "tiered_distribution_advanced")

    @property
    @pulumi.getter(name="tieredDistributionCustomization")
    def tiered_distribution_customization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionCustomizationResult']:
        return pulumi.get(self, "tiered_distribution_customization")

    @property
    @pulumi.getter
    def timeout(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTimeoutResult']:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="uidConfiguration")
    def uid_configuration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorUidConfigurationResult']:
        return pulumi.get(self, "uid_configuration")

    @property
    @pulumi.getter(name="validateEntityTag")
    def validate_entity_tag(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorValidateEntityTagResult']:
        return pulumi.get(self, "validate_entity_tag")

    @property
    @pulumi.getter(name="verifyJsonWebToken")
    def verify_json_web_token(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenResult']:
        return pulumi.get(self, "verify_json_web_token")

    @property
    @pulumi.getter(name="verifyJsonWebTokenForDcp")
    def verify_json_web_token_for_dcp(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenForDcpResult']:
        return pulumi.get(self, "verify_json_web_token_for_dcp")

    @property
    @pulumi.getter(name="verifyTokenAuthorization")
    def verify_token_authorization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVerifyTokenAuthorizationResult']:
        return pulumi.get(self, "verify_token_authorization")

    @property
    @pulumi.getter(name="virtualWaitingRoom")
    def virtual_waiting_room(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomResult']:
        return pulumi.get(self, "virtual_waiting_room")

    @property
    @pulumi.getter(name="virtualWaitingRoomWithEdgeWorkers")
    def virtual_waiting_room_with_edge_workers(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomWithEdgeWorkersResult']:
        return pulumi.get(self, "virtual_waiting_room_with_edge_workers")

    @property
    @pulumi.getter(name="visitorPrioritization")
    def visitor_prioritization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationResult']:
        return pulumi.get(self, "visitor_prioritization")

    @property
    @pulumi.getter(name="visitorPrioritizationFifo")
    def visitor_prioritization_fifo(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoResult']:
        return pulumi.get(self, "visitor_prioritization_fifo")

    @property
    @pulumi.getter(name="visitorPrioritizationFifoStandalone")
    def visitor_prioritization_fifo_standalone(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoStandaloneResult']:
        return pulumi.get(self, "visitor_prioritization_fifo_standalone")

    @property
    @pulumi.getter
    def watermarking(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWatermarkingResult']:
        return pulumi.get(self, "watermarking")

    @property
    @pulumi.getter(name="webApplicationFirewall")
    def web_application_firewall(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallResult']:
        return pulumi.get(self, "web_application_firewall")

    @property
    @pulumi.getter(name="webSockets")
    def web_sockets(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebSocketsResult']:
        return pulumi.get(self, "web_sockets")

    @property
    @pulumi.getter
    def webdav(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebdavResult']:
        return pulumi.get(self, "webdav")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAdScalerCircuitBreakerResult(dict):
    def __init__(__self__, *,
                 fallback_action_response_code_based: Optional[str] = None,
                 locked: Optional[bool] = None,
                 response_code_based: Optional[bool] = None,
                 response_codes: Optional[str] = None,
                 response_delay_based: Optional[bool] = None,
                 response_delay_threshold: Optional[str] = None,
                 return_error_response_code_based: Optional[str] = None,
                 specify_your_own_response_code_based: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAdScalerCircuitBreakerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fallback_action_response_code_based=fallback_action_response_code_based,
            locked=locked,
            response_code_based=response_code_based,
            response_codes=response_codes,
            response_delay_based=response_delay_based,
            response_delay_threshold=response_delay_threshold,
            return_error_response_code_based=return_error_response_code_based,
            specify_your_own_response_code_based=specify_your_own_response_code_based,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fallback_action_response_code_based: Optional[str] = None,
             locked: Optional[bool] = None,
             response_code_based: Optional[bool] = None,
             response_codes: Optional[str] = None,
             response_delay_based: Optional[bool] = None,
             response_delay_threshold: Optional[str] = None,
             return_error_response_code_based: Optional[str] = None,
             specify_your_own_response_code_based: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fallbackActionResponseCodeBased' in kwargs:
            fallback_action_response_code_based = kwargs['fallbackActionResponseCodeBased']
        if 'responseCodeBased' in kwargs:
            response_code_based = kwargs['responseCodeBased']
        if 'responseCodes' in kwargs:
            response_codes = kwargs['responseCodes']
        if 'responseDelayBased' in kwargs:
            response_delay_based = kwargs['responseDelayBased']
        if 'responseDelayThreshold' in kwargs:
            response_delay_threshold = kwargs['responseDelayThreshold']
        if 'returnErrorResponseCodeBased' in kwargs:
            return_error_response_code_based = kwargs['returnErrorResponseCodeBased']
        if 'specifyYourOwnResponseCodeBased' in kwargs:
            specify_your_own_response_code_based = kwargs['specifyYourOwnResponseCodeBased']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if fallback_action_response_code_based is not None:
            _setter("fallback_action_response_code_based", fallback_action_response_code_based)
        if locked is not None:
            _setter("locked", locked)
        if response_code_based is not None:
            _setter("response_code_based", response_code_based)
        if response_codes is not None:
            _setter("response_codes", response_codes)
        if response_delay_based is not None:
            _setter("response_delay_based", response_delay_based)
        if response_delay_threshold is not None:
            _setter("response_delay_threshold", response_delay_threshold)
        if return_error_response_code_based is not None:
            _setter("return_error_response_code_based", return_error_response_code_based)
        if specify_your_own_response_code_based is not None:
            _setter("specify_your_own_response_code_based", specify_your_own_response_code_based)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="fallbackActionResponseCodeBased")
    def fallback_action_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "fallback_action_response_code_based")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="responseCodeBased")
    def response_code_based(self) -> Optional[bool]:
        return pulumi.get(self, "response_code_based")

    @property
    @pulumi.getter(name="responseCodes")
    def response_codes(self) -> Optional[str]:
        return pulumi.get(self, "response_codes")

    @property
    @pulumi.getter(name="responseDelayBased")
    def response_delay_based(self) -> Optional[bool]:
        return pulumi.get(self, "response_delay_based")

    @property
    @pulumi.getter(name="responseDelayThreshold")
    def response_delay_threshold(self) -> Optional[str]:
        return pulumi.get(self, "response_delay_threshold")

    @property
    @pulumi.getter(name="returnErrorResponseCodeBased")
    def return_error_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "return_error_response_code_based")

    @property
    @pulumi.getter(name="specifyYourOwnResponseCodeBased")
    def specify_your_own_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "specify_your_own_response_code_based")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveAccelerationResult(dict):
    def __init__(__self__, *,
                 ab_logic: Optional[str] = None,
                 ab_testing: Optional[str] = None,
                 compression: Optional[str] = None,
                 cookie_name: Optional[str] = None,
                 enable_brotli_compression: Optional[bool] = None,
                 enable_for_noncacheable: Optional[bool] = None,
                 enable_preconnect: Optional[bool] = None,
                 enable_push: Optional[bool] = None,
                 enable_ro: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 preload_enable: Optional[bool] = None,
                 source: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 title_brotli: Optional[str] = None,
                 title_http2_server_push: Optional[str] = None,
                 title_preconnect: Optional[str] = None,
                 title_preload: Optional[str] = None,
                 title_ro: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveAccelerationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ab_logic=ab_logic,
            ab_testing=ab_testing,
            compression=compression,
            cookie_name=cookie_name,
            enable_brotli_compression=enable_brotli_compression,
            enable_for_noncacheable=enable_for_noncacheable,
            enable_preconnect=enable_preconnect,
            enable_push=enable_push,
            enable_ro=enable_ro,
            locked=locked,
            preload_enable=preload_enable,
            source=source,
            template_uuid=template_uuid,
            title_brotli=title_brotli,
            title_http2_server_push=title_http2_server_push,
            title_preconnect=title_preconnect,
            title_preload=title_preload,
            title_ro=title_ro,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ab_logic: Optional[str] = None,
             ab_testing: Optional[str] = None,
             compression: Optional[str] = None,
             cookie_name: Optional[str] = None,
             enable_brotli_compression: Optional[bool] = None,
             enable_for_noncacheable: Optional[bool] = None,
             enable_preconnect: Optional[bool] = None,
             enable_push: Optional[bool] = None,
             enable_ro: Optional[bool] = None,
             locked: Optional[bool] = None,
             preload_enable: Optional[bool] = None,
             source: Optional[str] = None,
             template_uuid: Optional[str] = None,
             title_brotli: Optional[str] = None,
             title_http2_server_push: Optional[str] = None,
             title_preconnect: Optional[str] = None,
             title_preload: Optional[str] = None,
             title_ro: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'abLogic' in kwargs:
            ab_logic = kwargs['abLogic']
        if 'abTesting' in kwargs:
            ab_testing = kwargs['abTesting']
        if 'cookieName' in kwargs:
            cookie_name = kwargs['cookieName']
        if 'enableBrotliCompression' in kwargs:
            enable_brotli_compression = kwargs['enableBrotliCompression']
        if 'enableForNoncacheable' in kwargs:
            enable_for_noncacheable = kwargs['enableForNoncacheable']
        if 'enablePreconnect' in kwargs:
            enable_preconnect = kwargs['enablePreconnect']
        if 'enablePush' in kwargs:
            enable_push = kwargs['enablePush']
        if 'enableRo' in kwargs:
            enable_ro = kwargs['enableRo']
        if 'preloadEnable' in kwargs:
            preload_enable = kwargs['preloadEnable']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'titleBrotli' in kwargs:
            title_brotli = kwargs['titleBrotli']
        if 'titleHttp2ServerPush' in kwargs:
            title_http2_server_push = kwargs['titleHttp2ServerPush']
        if 'titlePreconnect' in kwargs:
            title_preconnect = kwargs['titlePreconnect']
        if 'titlePreload' in kwargs:
            title_preload = kwargs['titlePreload']
        if 'titleRo' in kwargs:
            title_ro = kwargs['titleRo']

        if ab_logic is not None:
            _setter("ab_logic", ab_logic)
        if ab_testing is not None:
            _setter("ab_testing", ab_testing)
        if compression is not None:
            _setter("compression", compression)
        if cookie_name is not None:
            _setter("cookie_name", cookie_name)
        if enable_brotli_compression is not None:
            _setter("enable_brotli_compression", enable_brotli_compression)
        if enable_for_noncacheable is not None:
            _setter("enable_for_noncacheable", enable_for_noncacheable)
        if enable_preconnect is not None:
            _setter("enable_preconnect", enable_preconnect)
        if enable_push is not None:
            _setter("enable_push", enable_push)
        if enable_ro is not None:
            _setter("enable_ro", enable_ro)
        if locked is not None:
            _setter("locked", locked)
        if preload_enable is not None:
            _setter("preload_enable", preload_enable)
        if source is not None:
            _setter("source", source)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if title_brotli is not None:
            _setter("title_brotli", title_brotli)
        if title_http2_server_push is not None:
            _setter("title_http2_server_push", title_http2_server_push)
        if title_preconnect is not None:
            _setter("title_preconnect", title_preconnect)
        if title_preload is not None:
            _setter("title_preload", title_preload)
        if title_ro is not None:
            _setter("title_ro", title_ro)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="abLogic")
    def ab_logic(self) -> Optional[str]:
        return pulumi.get(self, "ab_logic")

    @property
    @pulumi.getter(name="abTesting")
    def ab_testing(self) -> Optional[str]:
        return pulumi.get(self, "ab_testing")

    @property
    @pulumi.getter
    def compression(self) -> Optional[str]:
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="enableBrotliCompression")
    def enable_brotli_compression(self) -> Optional[bool]:
        return pulumi.get(self, "enable_brotli_compression")

    @property
    @pulumi.getter(name="enableForNoncacheable")
    def enable_for_noncacheable(self) -> Optional[bool]:
        return pulumi.get(self, "enable_for_noncacheable")

    @property
    @pulumi.getter(name="enablePreconnect")
    def enable_preconnect(self) -> Optional[bool]:
        return pulumi.get(self, "enable_preconnect")

    @property
    @pulumi.getter(name="enablePush")
    def enable_push(self) -> Optional[bool]:
        return pulumi.get(self, "enable_push")

    @property
    @pulumi.getter(name="enableRo")
    def enable_ro(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ro")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="preloadEnable")
    def preload_enable(self) -> Optional[bool]:
        return pulumi.get(self, "preload_enable")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="titleBrotli")
    def title_brotli(self) -> Optional[str]:
        return pulumi.get(self, "title_brotli")

    @property
    @pulumi.getter(name="titleHttp2ServerPush")
    def title_http2_server_push(self) -> Optional[str]:
        return pulumi.get(self, "title_http2_server_push")

    @property
    @pulumi.getter(name="titlePreconnect")
    def title_preconnect(self) -> Optional[str]:
        return pulumi.get(self, "title_preconnect")

    @property
    @pulumi.getter(name="titlePreload")
    def title_preload(self) -> Optional[str]:
        return pulumi.get(self, "title_preload")

    @property
    @pulumi.getter(name="titleRo")
    def title_ro(self) -> Optional[str]:
        return pulumi.get(self, "title_ro")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveImageCompressionResult(dict):
    def __init__(__self__, *,
                 compress_mobile: Optional[bool] = None,
                 compress_standard: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tier1_mobile_compression_method: Optional[str] = None,
                 tier1_mobile_compression_value: Optional[int] = None,
                 tier1_standard_compression_method: Optional[str] = None,
                 tier1_standard_compression_value: Optional[int] = None,
                 tier2_mobile_compression_method: Optional[str] = None,
                 tier2_mobile_compression_value: Optional[int] = None,
                 tier2_standard_compression_method: Optional[str] = None,
                 tier2_standard_compression_value: Optional[int] = None,
                 tier3_mobile_compression_method: Optional[str] = None,
                 tier3_mobile_compression_value: Optional[int] = None,
                 tier3_standard_compression_method: Optional[str] = None,
                 tier3_standard_compression_value: Optional[int] = None,
                 title_aic_mobile: Optional[str] = None,
                 title_aic_nonmobile: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveImageCompressionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compress_mobile=compress_mobile,
            compress_standard=compress_standard,
            locked=locked,
            template_uuid=template_uuid,
            tier1_mobile_compression_method=tier1_mobile_compression_method,
            tier1_mobile_compression_value=tier1_mobile_compression_value,
            tier1_standard_compression_method=tier1_standard_compression_method,
            tier1_standard_compression_value=tier1_standard_compression_value,
            tier2_mobile_compression_method=tier2_mobile_compression_method,
            tier2_mobile_compression_value=tier2_mobile_compression_value,
            tier2_standard_compression_method=tier2_standard_compression_method,
            tier2_standard_compression_value=tier2_standard_compression_value,
            tier3_mobile_compression_method=tier3_mobile_compression_method,
            tier3_mobile_compression_value=tier3_mobile_compression_value,
            tier3_standard_compression_method=tier3_standard_compression_method,
            tier3_standard_compression_value=tier3_standard_compression_value,
            title_aic_mobile=title_aic_mobile,
            title_aic_nonmobile=title_aic_nonmobile,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compress_mobile: Optional[bool] = None,
             compress_standard: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             tier1_mobile_compression_method: Optional[str] = None,
             tier1_mobile_compression_value: Optional[int] = None,
             tier1_standard_compression_method: Optional[str] = None,
             tier1_standard_compression_value: Optional[int] = None,
             tier2_mobile_compression_method: Optional[str] = None,
             tier2_mobile_compression_value: Optional[int] = None,
             tier2_standard_compression_method: Optional[str] = None,
             tier2_standard_compression_value: Optional[int] = None,
             tier3_mobile_compression_method: Optional[str] = None,
             tier3_mobile_compression_value: Optional[int] = None,
             tier3_standard_compression_method: Optional[str] = None,
             tier3_standard_compression_value: Optional[int] = None,
             title_aic_mobile: Optional[str] = None,
             title_aic_nonmobile: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compressMobile' in kwargs:
            compress_mobile = kwargs['compressMobile']
        if 'compressStandard' in kwargs:
            compress_standard = kwargs['compressStandard']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'tier1MobileCompressionMethod' in kwargs:
            tier1_mobile_compression_method = kwargs['tier1MobileCompressionMethod']
        if 'tier1MobileCompressionValue' in kwargs:
            tier1_mobile_compression_value = kwargs['tier1MobileCompressionValue']
        if 'tier1StandardCompressionMethod' in kwargs:
            tier1_standard_compression_method = kwargs['tier1StandardCompressionMethod']
        if 'tier1StandardCompressionValue' in kwargs:
            tier1_standard_compression_value = kwargs['tier1StandardCompressionValue']
        if 'tier2MobileCompressionMethod' in kwargs:
            tier2_mobile_compression_method = kwargs['tier2MobileCompressionMethod']
        if 'tier2MobileCompressionValue' in kwargs:
            tier2_mobile_compression_value = kwargs['tier2MobileCompressionValue']
        if 'tier2StandardCompressionMethod' in kwargs:
            tier2_standard_compression_method = kwargs['tier2StandardCompressionMethod']
        if 'tier2StandardCompressionValue' in kwargs:
            tier2_standard_compression_value = kwargs['tier2StandardCompressionValue']
        if 'tier3MobileCompressionMethod' in kwargs:
            tier3_mobile_compression_method = kwargs['tier3MobileCompressionMethod']
        if 'tier3MobileCompressionValue' in kwargs:
            tier3_mobile_compression_value = kwargs['tier3MobileCompressionValue']
        if 'tier3StandardCompressionMethod' in kwargs:
            tier3_standard_compression_method = kwargs['tier3StandardCompressionMethod']
        if 'tier3StandardCompressionValue' in kwargs:
            tier3_standard_compression_value = kwargs['tier3StandardCompressionValue']
        if 'titleAicMobile' in kwargs:
            title_aic_mobile = kwargs['titleAicMobile']
        if 'titleAicNonmobile' in kwargs:
            title_aic_nonmobile = kwargs['titleAicNonmobile']

        if compress_mobile is not None:
            _setter("compress_mobile", compress_mobile)
        if compress_standard is not None:
            _setter("compress_standard", compress_standard)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if tier1_mobile_compression_method is not None:
            _setter("tier1_mobile_compression_method", tier1_mobile_compression_method)
        if tier1_mobile_compression_value is not None:
            _setter("tier1_mobile_compression_value", tier1_mobile_compression_value)
        if tier1_standard_compression_method is not None:
            _setter("tier1_standard_compression_method", tier1_standard_compression_method)
        if tier1_standard_compression_value is not None:
            _setter("tier1_standard_compression_value", tier1_standard_compression_value)
        if tier2_mobile_compression_method is not None:
            _setter("tier2_mobile_compression_method", tier2_mobile_compression_method)
        if tier2_mobile_compression_value is not None:
            _setter("tier2_mobile_compression_value", tier2_mobile_compression_value)
        if tier2_standard_compression_method is not None:
            _setter("tier2_standard_compression_method", tier2_standard_compression_method)
        if tier2_standard_compression_value is not None:
            _setter("tier2_standard_compression_value", tier2_standard_compression_value)
        if tier3_mobile_compression_method is not None:
            _setter("tier3_mobile_compression_method", tier3_mobile_compression_method)
        if tier3_mobile_compression_value is not None:
            _setter("tier3_mobile_compression_value", tier3_mobile_compression_value)
        if tier3_standard_compression_method is not None:
            _setter("tier3_standard_compression_method", tier3_standard_compression_method)
        if tier3_standard_compression_value is not None:
            _setter("tier3_standard_compression_value", tier3_standard_compression_value)
        if title_aic_mobile is not None:
            _setter("title_aic_mobile", title_aic_mobile)
        if title_aic_nonmobile is not None:
            _setter("title_aic_nonmobile", title_aic_nonmobile)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="compressMobile")
    def compress_mobile(self) -> Optional[bool]:
        return pulumi.get(self, "compress_mobile")

    @property
    @pulumi.getter(name="compressStandard")
    def compress_standard(self) -> Optional[bool]:
        return pulumi.get(self, "compress_standard")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tier1MobileCompressionMethod")
    def tier1_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier1_mobile_compression_method")

    @property
    @pulumi.getter(name="tier1MobileCompressionValue")
    def tier1_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier1_mobile_compression_value")

    @property
    @pulumi.getter(name="tier1StandardCompressionMethod")
    def tier1_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier1_standard_compression_method")

    @property
    @pulumi.getter(name="tier1StandardCompressionValue")
    def tier1_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier1_standard_compression_value")

    @property
    @pulumi.getter(name="tier2MobileCompressionMethod")
    def tier2_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier2_mobile_compression_method")

    @property
    @pulumi.getter(name="tier2MobileCompressionValue")
    def tier2_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier2_mobile_compression_value")

    @property
    @pulumi.getter(name="tier2StandardCompressionMethod")
    def tier2_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier2_standard_compression_method")

    @property
    @pulumi.getter(name="tier2StandardCompressionValue")
    def tier2_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier2_standard_compression_value")

    @property
    @pulumi.getter(name="tier3MobileCompressionMethod")
    def tier3_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier3_mobile_compression_method")

    @property
    @pulumi.getter(name="tier3MobileCompressionValue")
    def tier3_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier3_mobile_compression_value")

    @property
    @pulumi.getter(name="tier3StandardCompressionMethod")
    def tier3_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier3_standard_compression_method")

    @property
    @pulumi.getter(name="tier3StandardCompressionValue")
    def tier3_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier3_standard_compression_value")

    @property
    @pulumi.getter(name="titleAicMobile")
    def title_aic_mobile(self) -> Optional[str]:
        return pulumi.get(self, "title_aic_mobile")

    @property
    @pulumi.getter(name="titleAicNonmobile")
    def title_aic_nonmobile(self) -> Optional[str]:
        return pulumi.get(self, "title_aic_nonmobile")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAdvancedResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAdvancedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            xml=xml,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             xml: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if description is not None:
            _setter("description", description)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if xml is not None:
            _setter("xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAggregatedReportingResult(dict):
    def __init__(__self__, *,
                 attribute1: Optional[str] = None,
                 attribute2: Optional[str] = None,
                 attribute3: Optional[str] = None,
                 attribute4: Optional[str] = None,
                 attributes_count: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 report_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAggregatedReportingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute1=attribute1,
            attribute2=attribute2,
            attribute3=attribute3,
            attribute4=attribute4,
            attributes_count=attributes_count,
            enabled=enabled,
            locked=locked,
            report_name=report_name,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute1: Optional[str] = None,
             attribute2: Optional[str] = None,
             attribute3: Optional[str] = None,
             attribute4: Optional[str] = None,
             attributes_count: Optional[int] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             report_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'attributesCount' in kwargs:
            attributes_count = kwargs['attributesCount']
        if 'reportName' in kwargs:
            report_name = kwargs['reportName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if attribute1 is not None:
            _setter("attribute1", attribute1)
        if attribute2 is not None:
            _setter("attribute2", attribute2)
        if attribute3 is not None:
            _setter("attribute3", attribute3)
        if attribute4 is not None:
            _setter("attribute4", attribute4)
        if attributes_count is not None:
            _setter("attributes_count", attributes_count)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if report_name is not None:
            _setter("report_name", report_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def attribute1(self) -> Optional[str]:
        return pulumi.get(self, "attribute1")

    @property
    @pulumi.getter
    def attribute2(self) -> Optional[str]:
        return pulumi.get(self, "attribute2")

    @property
    @pulumi.getter
    def attribute3(self) -> Optional[str]:
        return pulumi.get(self, "attribute3")

    @property
    @pulumi.getter
    def attribute4(self) -> Optional[str]:
        return pulumi.get(self, "attribute4")

    @property
    @pulumi.getter(name="attributesCount")
    def attributes_count(self) -> Optional[int]:
        return pulumi.get(self, "attributes_count")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="reportName")
    def report_name(self) -> Optional[str]:
        return pulumi.get(self, "report_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerTagResult(dict):
    def __init__(__self__, *,
                 include_tags_attribute: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match_hostname: Optional[str] = None,
                 replace_all: Optional[bool] = None,
                 replacement_hostname: Optional[str] = None,
                 scope: Optional[str] = None,
                 tags_attribute: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerTagResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            include_tags_attribute=include_tags_attribute,
            locked=locked,
            match_hostname=match_hostname,
            replace_all=replace_all,
            replacement_hostname=replacement_hostname,
            scope=scope,
            tags_attribute=tags_attribute,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             include_tags_attribute: Optional[bool] = None,
             locked: Optional[bool] = None,
             match_hostname: Optional[str] = None,
             replace_all: Optional[bool] = None,
             replacement_hostname: Optional[str] = None,
             scope: Optional[str] = None,
             tags_attribute: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'includeTagsAttribute' in kwargs:
            include_tags_attribute = kwargs['includeTagsAttribute']
        if 'matchHostname' in kwargs:
            match_hostname = kwargs['matchHostname']
        if 'replaceAll' in kwargs:
            replace_all = kwargs['replaceAll']
        if 'replacementHostname' in kwargs:
            replacement_hostname = kwargs['replacementHostname']
        if 'tagsAttribute' in kwargs:
            tags_attribute = kwargs['tagsAttribute']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if include_tags_attribute is not None:
            _setter("include_tags_attribute", include_tags_attribute)
        if locked is not None:
            _setter("locked", locked)
        if match_hostname is not None:
            _setter("match_hostname", match_hostname)
        if replace_all is not None:
            _setter("replace_all", replace_all)
        if replacement_hostname is not None:
            _setter("replacement_hostname", replacement_hostname)
        if scope is not None:
            _setter("scope", scope)
        if tags_attribute is not None:
            _setter("tags_attribute", tags_attribute)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="includeTagsAttribute")
    def include_tags_attribute(self) -> Optional[bool]:
        return pulumi.get(self, "include_tags_attribute")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchHostname")
    def match_hostname(self) -> Optional[str]:
        return pulumi.get(self, "match_hostname")

    @property
    @pulumi.getter(name="replaceAll")
    def replace_all(self) -> Optional[bool]:
        return pulumi.get(self, "replace_all")

    @property
    @pulumi.getter(name="replacementHostname")
    def replacement_hostname(self) -> Optional[str]:
        return pulumi.get(self, "replacement_hostname")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="tagsAttribute")
    def tags_attribute(self) -> Optional[str]:
        return pulumi.get(self, "tags_attribute")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllHttpInCacheHierarchyResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAllHttpInCacheHierarchyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowCloudletsOriginsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 honor_base_directory: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 purge_origin_query_parameter: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAllowCloudletsOriginsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            honor_base_directory=honor_base_directory,
            locked=locked,
            purge_origin_query_parameter=purge_origin_query_parameter,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             honor_base_directory: Optional[bool] = None,
             locked: Optional[bool] = None,
             purge_origin_query_parameter: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'honorBaseDirectory' in kwargs:
            honor_base_directory = kwargs['honorBaseDirectory']
        if 'purgeOriginQueryParameter' in kwargs:
            purge_origin_query_parameter = kwargs['purgeOriginQueryParameter']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if honor_base_directory is not None:
            _setter("honor_base_directory", honor_base_directory)
        if locked is not None:
            _setter("locked", locked)
        if purge_origin_query_parameter is not None:
            _setter("purge_origin_query_parameter", purge_origin_query_parameter)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="honorBaseDirectory")
    def honor_base_directory(self) -> Optional[bool]:
        return pulumi.get(self, "honor_base_directory")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="purgeOriginQueryParameter")
    def purge_origin_query_parameter(self) -> Optional[str]:
        return pulumi.get(self, "purge_origin_query_parameter")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowDeleteResult(dict):
    def __init__(__self__, *,
                 allow_body: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAllowDeleteResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_body=allow_body,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_body: Optional[bool] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowBody' in kwargs:
            allow_body = kwargs['allowBody']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if allow_body is not None:
            _setter("allow_body", allow_body)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowBody")
    def allow_body(self) -> Optional[bool]:
        return pulumi.get(self, "allow_body")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsCacheKeySharingResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsCacheKeySharingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsDowngradeResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsDowngradeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowOptionsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAllowOptionsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowPatchResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAllowPatchResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowPostResult(dict):
    def __init__(__self__, *,
                 allow_without_content_length: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAllowPostResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_without_content_length=allow_without_content_length,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_without_content_length: Optional[bool] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowWithoutContentLength' in kwargs:
            allow_without_content_length = kwargs['allowWithoutContentLength']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if allow_without_content_length is not None:
            _setter("allow_without_content_length", allow_without_content_length)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowWithoutContentLength")
    def allow_without_content_length(self) -> Optional[bool]:
        return pulumi.get(self, "allow_without_content_length")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowPutResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAllowPutResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowTransferEncodingResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAllowTransferEncodingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAltSvcHeaderResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 max_age: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAltSvcHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            max_age=max_age,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             max_age: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxAge' in kwargs:
            max_age = kwargs['maxAge']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if max_age is not None:
            _setter("max_age", max_age)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[int]:
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationResult(dict):
    def __init__(__self__, *,
                 alternate_response_cache_ttl: Optional[int] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationNetStorageResult'] = None,
                 net_storage_path: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 throttled_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeResult'] = None,
                 throttled_status_code: Optional[int] = None,
                 use_throttled_cp_code: Optional[bool] = None,
                 use_throttled_status_code: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alternate_response_cache_ttl=alternate_response_cache_ttl,
            cloudlet_policy=cloudlet_policy,
            cloudlet_shared_policy=cloudlet_shared_policy,
            enabled=enabled,
            is_shared_policy=is_shared_policy,
            label=label,
            locked=locked,
            net_storage=net_storage,
            net_storage_path=net_storage_path,
            template_uuid=template_uuid,
            throttled_cp_code=throttled_cp_code,
            throttled_status_code=throttled_status_code,
            use_throttled_cp_code=use_throttled_cp_code,
            use_throttled_status_code=use_throttled_status_code,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alternate_response_cache_ttl: Optional[int] = None,
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationCloudletPolicyResult'] = None,
             cloudlet_shared_policy: Optional[int] = None,
             enabled: Optional[bool] = None,
             is_shared_policy: Optional[bool] = None,
             label: Optional[str] = None,
             locked: Optional[bool] = None,
             net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationNetStorageResult'] = None,
             net_storage_path: Optional[str] = None,
             template_uuid: Optional[str] = None,
             throttled_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeResult'] = None,
             throttled_status_code: Optional[int] = None,
             use_throttled_cp_code: Optional[bool] = None,
             use_throttled_status_code: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'alternateResponseCacheTtl' in kwargs:
            alternate_response_cache_ttl = kwargs['alternateResponseCacheTtl']
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'cloudletSharedPolicy' in kwargs:
            cloudlet_shared_policy = kwargs['cloudletSharedPolicy']
        if 'isSharedPolicy' in kwargs:
            is_shared_policy = kwargs['isSharedPolicy']
        if 'netStorage' in kwargs:
            net_storage = kwargs['netStorage']
        if 'netStoragePath' in kwargs:
            net_storage_path = kwargs['netStoragePath']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'throttledCpCode' in kwargs:
            throttled_cp_code = kwargs['throttledCpCode']
        if 'throttledStatusCode' in kwargs:
            throttled_status_code = kwargs['throttledStatusCode']
        if 'useThrottledCpCode' in kwargs:
            use_throttled_cp_code = kwargs['useThrottledCpCode']
        if 'useThrottledStatusCode' in kwargs:
            use_throttled_status_code = kwargs['useThrottledStatusCode']

        if alternate_response_cache_ttl is not None:
            _setter("alternate_response_cache_ttl", alternate_response_cache_ttl)
        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            _setter("cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if is_shared_policy is not None:
            _setter("is_shared_policy", is_shared_policy)
        if label is not None:
            _setter("label", label)
        if locked is not None:
            _setter("locked", locked)
        if net_storage is not None:
            _setter("net_storage", net_storage)
        if net_storage_path is not None:
            _setter("net_storage_path", net_storage_path)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if throttled_cp_code is not None:
            _setter("throttled_cp_code", throttled_cp_code)
        if throttled_status_code is not None:
            _setter("throttled_status_code", throttled_status_code)
        if use_throttled_cp_code is not None:
            _setter("use_throttled_cp_code", use_throttled_cp_code)
        if use_throttled_status_code is not None:
            _setter("use_throttled_status_code", use_throttled_status_code)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="alternateResponseCacheTtl")
    def alternate_response_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "alternate_response_cache_ttl")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationNetStorageResult']:
        return pulumi.get(self, "net_storage")

    @property
    @pulumi.getter(name="netStoragePath")
    def net_storage_path(self) -> Optional[str]:
        return pulumi.get(self, "net_storage_path")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="throttledCpCode")
    def throttled_cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeResult']:
        return pulumi.get(self, "throttled_cp_code")

    @property
    @pulumi.getter(name="throttledStatusCode")
    def throttled_status_code(self) -> Optional[int]:
        return pulumi.get(self, "throttled_status_code")

    @property
    @pulumi.getter(name="useThrottledCpCode")
    def use_throttled_cp_code(self) -> Optional[bool]:
        return pulumi.get(self, "use_throttled_cp_code")

    @property
    @pulumi.getter(name="useThrottledStatusCode")
    def use_throttled_status_code(self) -> Optional[bool]:
        return pulumi.get(self, "use_throttled_status_code")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationNetStorageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code=cp_code,
            download_domain_name=download_domain_name,
            g2o_token=g2o_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code: Optional[int] = None,
             download_domain_name: Optional[str] = None,
             g2o_token: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCode' in kwargs:
            cp_code = kwargs['cpCode']
        if 'downloadDomainName' in kwargs:
            download_domain_name = kwargs['downloadDomainName']
        if 'g2oToken' in kwargs:
            g2o_token = kwargs['g2oToken']

        if cp_code is not None:
            _setter("cp_code", cp_code)
        if download_domain_name is not None:
            _setter("download_domain_name", download_domain_name)
        if g2o_token is not None:
            _setter("g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerResult(dict):
    def __init__(__self__, *,
                 all_down_net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerAllDownNetStorageResult'] = None,
                 all_down_net_storage_file: Optional[str] = None,
                 all_down_status_code: Optional[str] = None,
                 all_down_title: Optional[str] = None,
                 allow_cache_prefresh: Optional[bool] = None,
                 cached_content_title: Optional[str] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 failover_attempts_threshold: Optional[int] = None,
                 failover_mode: Optional[str] = None,
                 failover_origin_maps: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerFailoverOriginMapResult']] = None,
                 failover_status_codes: Optional[Sequence[str]] = None,
                 failover_title: Optional[str] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 origin_cookie_name: Optional[str] = None,
                 specify_stickiness_cookie_domain: Optional[bool] = None,
                 stickiness_cookie_automatic_salt: Optional[bool] = None,
                 stickiness_cookie_domain: Optional[str] = None,
                 stickiness_cookie_salt: Optional[str] = None,
                 stickiness_cookie_set_http_only_flag: Optional[bool] = None,
                 stickiness_cookie_type: Optional[str] = None,
                 stickiness_duration: Optional[str] = None,
                 stickiness_expiration_date: Optional[str] = None,
                 stickiness_refresh: Optional[bool] = None,
                 stickiness_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all_down_net_storage=all_down_net_storage,
            all_down_net_storage_file=all_down_net_storage_file,
            all_down_status_code=all_down_status_code,
            all_down_title=all_down_title,
            allow_cache_prefresh=allow_cache_prefresh,
            cached_content_title=cached_content_title,
            cloudlet_policy=cloudlet_policy,
            enabled=enabled,
            failover_attempts_threshold=failover_attempts_threshold,
            failover_mode=failover_mode,
            failover_origin_maps=failover_origin_maps,
            failover_status_codes=failover_status_codes,
            failover_title=failover_title,
            label=label,
            locked=locked,
            origin_cookie_name=origin_cookie_name,
            specify_stickiness_cookie_domain=specify_stickiness_cookie_domain,
            stickiness_cookie_automatic_salt=stickiness_cookie_automatic_salt,
            stickiness_cookie_domain=stickiness_cookie_domain,
            stickiness_cookie_salt=stickiness_cookie_salt,
            stickiness_cookie_set_http_only_flag=stickiness_cookie_set_http_only_flag,
            stickiness_cookie_type=stickiness_cookie_type,
            stickiness_duration=stickiness_duration,
            stickiness_expiration_date=stickiness_expiration_date,
            stickiness_refresh=stickiness_refresh,
            stickiness_title=stickiness_title,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all_down_net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerAllDownNetStorageResult'] = None,
             all_down_net_storage_file: Optional[str] = None,
             all_down_status_code: Optional[str] = None,
             all_down_title: Optional[str] = None,
             allow_cache_prefresh: Optional[bool] = None,
             cached_content_title: Optional[str] = None,
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerCloudletPolicyResult'] = None,
             enabled: Optional[bool] = None,
             failover_attempts_threshold: Optional[int] = None,
             failover_mode: Optional[str] = None,
             failover_origin_maps: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerFailoverOriginMapResult']] = None,
             failover_status_codes: Optional[Sequence[str]] = None,
             failover_title: Optional[str] = None,
             label: Optional[str] = None,
             locked: Optional[bool] = None,
             origin_cookie_name: Optional[str] = None,
             specify_stickiness_cookie_domain: Optional[bool] = None,
             stickiness_cookie_automatic_salt: Optional[bool] = None,
             stickiness_cookie_domain: Optional[str] = None,
             stickiness_cookie_salt: Optional[str] = None,
             stickiness_cookie_set_http_only_flag: Optional[bool] = None,
             stickiness_cookie_type: Optional[str] = None,
             stickiness_duration: Optional[str] = None,
             stickiness_expiration_date: Optional[str] = None,
             stickiness_refresh: Optional[bool] = None,
             stickiness_title: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allDownNetStorage' in kwargs:
            all_down_net_storage = kwargs['allDownNetStorage']
        if 'allDownNetStorageFile' in kwargs:
            all_down_net_storage_file = kwargs['allDownNetStorageFile']
        if 'allDownStatusCode' in kwargs:
            all_down_status_code = kwargs['allDownStatusCode']
        if 'allDownTitle' in kwargs:
            all_down_title = kwargs['allDownTitle']
        if 'allowCachePrefresh' in kwargs:
            allow_cache_prefresh = kwargs['allowCachePrefresh']
        if 'cachedContentTitle' in kwargs:
            cached_content_title = kwargs['cachedContentTitle']
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'failoverAttemptsThreshold' in kwargs:
            failover_attempts_threshold = kwargs['failoverAttemptsThreshold']
        if 'failoverMode' in kwargs:
            failover_mode = kwargs['failoverMode']
        if 'failoverOriginMaps' in kwargs:
            failover_origin_maps = kwargs['failoverOriginMaps']
        if 'failoverStatusCodes' in kwargs:
            failover_status_codes = kwargs['failoverStatusCodes']
        if 'failoverTitle' in kwargs:
            failover_title = kwargs['failoverTitle']
        if 'originCookieName' in kwargs:
            origin_cookie_name = kwargs['originCookieName']
        if 'specifyStickinessCookieDomain' in kwargs:
            specify_stickiness_cookie_domain = kwargs['specifyStickinessCookieDomain']
        if 'stickinessCookieAutomaticSalt' in kwargs:
            stickiness_cookie_automatic_salt = kwargs['stickinessCookieAutomaticSalt']
        if 'stickinessCookieDomain' in kwargs:
            stickiness_cookie_domain = kwargs['stickinessCookieDomain']
        if 'stickinessCookieSalt' in kwargs:
            stickiness_cookie_salt = kwargs['stickinessCookieSalt']
        if 'stickinessCookieSetHttpOnlyFlag' in kwargs:
            stickiness_cookie_set_http_only_flag = kwargs['stickinessCookieSetHttpOnlyFlag']
        if 'stickinessCookieType' in kwargs:
            stickiness_cookie_type = kwargs['stickinessCookieType']
        if 'stickinessDuration' in kwargs:
            stickiness_duration = kwargs['stickinessDuration']
        if 'stickinessExpirationDate' in kwargs:
            stickiness_expiration_date = kwargs['stickinessExpirationDate']
        if 'stickinessRefresh' in kwargs:
            stickiness_refresh = kwargs['stickinessRefresh']
        if 'stickinessTitle' in kwargs:
            stickiness_title = kwargs['stickinessTitle']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if all_down_net_storage is not None:
            _setter("all_down_net_storage", all_down_net_storage)
        if all_down_net_storage_file is not None:
            _setter("all_down_net_storage_file", all_down_net_storage_file)
        if all_down_status_code is not None:
            _setter("all_down_status_code", all_down_status_code)
        if all_down_title is not None:
            _setter("all_down_title", all_down_title)
        if allow_cache_prefresh is not None:
            _setter("allow_cache_prefresh", allow_cache_prefresh)
        if cached_content_title is not None:
            _setter("cached_content_title", cached_content_title)
        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if failover_attempts_threshold is not None:
            _setter("failover_attempts_threshold", failover_attempts_threshold)
        if failover_mode is not None:
            _setter("failover_mode", failover_mode)
        if failover_origin_maps is not None:
            _setter("failover_origin_maps", failover_origin_maps)
        if failover_status_codes is not None:
            _setter("failover_status_codes", failover_status_codes)
        if failover_title is not None:
            _setter("failover_title", failover_title)
        if label is not None:
            _setter("label", label)
        if locked is not None:
            _setter("locked", locked)
        if origin_cookie_name is not None:
            _setter("origin_cookie_name", origin_cookie_name)
        if specify_stickiness_cookie_domain is not None:
            _setter("specify_stickiness_cookie_domain", specify_stickiness_cookie_domain)
        if stickiness_cookie_automatic_salt is not None:
            _setter("stickiness_cookie_automatic_salt", stickiness_cookie_automatic_salt)
        if stickiness_cookie_domain is not None:
            _setter("stickiness_cookie_domain", stickiness_cookie_domain)
        if stickiness_cookie_salt is not None:
            _setter("stickiness_cookie_salt", stickiness_cookie_salt)
        if stickiness_cookie_set_http_only_flag is not None:
            _setter("stickiness_cookie_set_http_only_flag", stickiness_cookie_set_http_only_flag)
        if stickiness_cookie_type is not None:
            _setter("stickiness_cookie_type", stickiness_cookie_type)
        if stickiness_duration is not None:
            _setter("stickiness_duration", stickiness_duration)
        if stickiness_expiration_date is not None:
            _setter("stickiness_expiration_date", stickiness_expiration_date)
        if stickiness_refresh is not None:
            _setter("stickiness_refresh", stickiness_refresh)
        if stickiness_title is not None:
            _setter("stickiness_title", stickiness_title)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allDownNetStorage")
    def all_down_net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerAllDownNetStorageResult']:
        return pulumi.get(self, "all_down_net_storage")

    @property
    @pulumi.getter(name="allDownNetStorageFile")
    def all_down_net_storage_file(self) -> Optional[str]:
        return pulumi.get(self, "all_down_net_storage_file")

    @property
    @pulumi.getter(name="allDownStatusCode")
    def all_down_status_code(self) -> Optional[str]:
        return pulumi.get(self, "all_down_status_code")

    @property
    @pulumi.getter(name="allDownTitle")
    def all_down_title(self) -> Optional[str]:
        return pulumi.get(self, "all_down_title")

    @property
    @pulumi.getter(name="allowCachePrefresh")
    def allow_cache_prefresh(self) -> Optional[bool]:
        return pulumi.get(self, "allow_cache_prefresh")

    @property
    @pulumi.getter(name="cachedContentTitle")
    def cached_content_title(self) -> Optional[str]:
        return pulumi.get(self, "cached_content_title")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failoverAttemptsThreshold")
    def failover_attempts_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failover_attempts_threshold")

    @property
    @pulumi.getter(name="failoverMode")
    def failover_mode(self) -> Optional[str]:
        return pulumi.get(self, "failover_mode")

    @property
    @pulumi.getter(name="failoverOriginMaps")
    def failover_origin_maps(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerFailoverOriginMapResult']]:
        return pulumi.get(self, "failover_origin_maps")

    @property
    @pulumi.getter(name="failoverStatusCodes")
    def failover_status_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "failover_status_codes")

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originCookieName")
    def origin_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "origin_cookie_name")

    @property
    @pulumi.getter(name="specifyStickinessCookieDomain")
    def specify_stickiness_cookie_domain(self) -> Optional[bool]:
        return pulumi.get(self, "specify_stickiness_cookie_domain")

    @property
    @pulumi.getter(name="stickinessCookieAutomaticSalt")
    def stickiness_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_cookie_automatic_salt")

    @property
    @pulumi.getter(name="stickinessCookieDomain")
    def stickiness_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_domain")

    @property
    @pulumi.getter(name="stickinessCookieSalt")
    def stickiness_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_salt")

    @property
    @pulumi.getter(name="stickinessCookieSetHttpOnlyFlag")
    def stickiness_cookie_set_http_only_flag(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_cookie_set_http_only_flag")

    @property
    @pulumi.getter(name="stickinessCookieType")
    def stickiness_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_type")

    @property
    @pulumi.getter(name="stickinessDuration")
    def stickiness_duration(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_duration")

    @property
    @pulumi.getter(name="stickinessExpirationDate")
    def stickiness_expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_expiration_date")

    @property
    @pulumi.getter(name="stickinessRefresh")
    def stickiness_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_refresh")

    @property
    @pulumi.getter(name="stickinessTitle")
    def stickiness_title(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_title")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerAllDownNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerAllDownNetStorageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code=cp_code,
            download_domain_name=download_domain_name,
            g2o_token=g2o_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code: Optional[int] = None,
             download_domain_name: Optional[str] = None,
             g2o_token: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCode' in kwargs:
            cp_code = kwargs['cpCode']
        if 'downloadDomainName' in kwargs:
            download_domain_name = kwargs['downloadDomainName']
        if 'g2oToken' in kwargs:
            g2o_token = kwargs['g2oToken']

        if cp_code is not None:
            _setter("cp_code", cp_code)
        if download_domain_name is not None:
            _setter("download_domain_name", download_domain_name)
        if g2o_token is not None:
            _setter("g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerFailoverOriginMapResult(dict):
    def __init__(__self__, *,
                 from_origin_id: Optional[str] = None,
                 to_origin_ids: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerFailoverOriginMapResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_origin_id=from_origin_id,
            to_origin_ids=to_origin_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_origin_id: Optional[str] = None,
             to_origin_ids: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fromOriginId' in kwargs:
            from_origin_id = kwargs['fromOriginId']
        if 'toOriginIds' in kwargs:
            to_origin_ids = kwargs['toOriginIds']

        if from_origin_id is not None:
            _setter("from_origin_id", from_origin_id)
        if to_origin_ids is not None:
            _setter("to_origin_ids", to_origin_ids)

    @property
    @pulumi.getter(name="fromOriginId")
    def from_origin_id(self) -> Optional[str]:
        return pulumi.get(self, "from_origin_id")

    @property
    @pulumi.getter(name="toOriginIds")
    def to_origin_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "to_origin_ids")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 population_cookie_automatic_salt: Optional[bool] = None,
                 population_cookie_domain: Optional[str] = None,
                 population_cookie_include_rule_name: Optional[bool] = None,
                 population_cookie_salt: Optional[str] = None,
                 population_cookie_type: Optional[str] = None,
                 population_duration: Optional[str] = None,
                 population_refresh: Optional[bool] = None,
                 population_title: Optional[str] = None,
                 segment_tracking_cookie_name: Optional[str] = None,
                 segment_tracking_custom_header: Optional[str] = None,
                 segment_tracking_method: Optional[str] = None,
                 segment_tracking_query_param: Optional[str] = None,
                 segment_tracking_title: Optional[str] = None,
                 specify_population_cookie_domain: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloudlet_policy=cloudlet_policy,
            cloudlet_shared_policy=cloudlet_shared_policy,
            enabled=enabled,
            is_shared_policy=is_shared_policy,
            label=label,
            locked=locked,
            population_cookie_automatic_salt=population_cookie_automatic_salt,
            population_cookie_domain=population_cookie_domain,
            population_cookie_include_rule_name=population_cookie_include_rule_name,
            population_cookie_salt=population_cookie_salt,
            population_cookie_type=population_cookie_type,
            population_duration=population_duration,
            population_refresh=population_refresh,
            population_title=population_title,
            segment_tracking_cookie_name=segment_tracking_cookie_name,
            segment_tracking_custom_header=segment_tracking_custom_header,
            segment_tracking_method=segment_tracking_method,
            segment_tracking_query_param=segment_tracking_query_param,
            segment_tracking_title=segment_tracking_title,
            specify_population_cookie_domain=specify_population_cookie_domain,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationCloudletPolicyResult'] = None,
             cloudlet_shared_policy: Optional[int] = None,
             enabled: Optional[bool] = None,
             is_shared_policy: Optional[bool] = None,
             label: Optional[str] = None,
             locked: Optional[bool] = None,
             population_cookie_automatic_salt: Optional[bool] = None,
             population_cookie_domain: Optional[str] = None,
             population_cookie_include_rule_name: Optional[bool] = None,
             population_cookie_salt: Optional[str] = None,
             population_cookie_type: Optional[str] = None,
             population_duration: Optional[str] = None,
             population_refresh: Optional[bool] = None,
             population_title: Optional[str] = None,
             segment_tracking_cookie_name: Optional[str] = None,
             segment_tracking_custom_header: Optional[str] = None,
             segment_tracking_method: Optional[str] = None,
             segment_tracking_query_param: Optional[str] = None,
             segment_tracking_title: Optional[str] = None,
             specify_population_cookie_domain: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'cloudletSharedPolicy' in kwargs:
            cloudlet_shared_policy = kwargs['cloudletSharedPolicy']
        if 'isSharedPolicy' in kwargs:
            is_shared_policy = kwargs['isSharedPolicy']
        if 'populationCookieAutomaticSalt' in kwargs:
            population_cookie_automatic_salt = kwargs['populationCookieAutomaticSalt']
        if 'populationCookieDomain' in kwargs:
            population_cookie_domain = kwargs['populationCookieDomain']
        if 'populationCookieIncludeRuleName' in kwargs:
            population_cookie_include_rule_name = kwargs['populationCookieIncludeRuleName']
        if 'populationCookieSalt' in kwargs:
            population_cookie_salt = kwargs['populationCookieSalt']
        if 'populationCookieType' in kwargs:
            population_cookie_type = kwargs['populationCookieType']
        if 'populationDuration' in kwargs:
            population_duration = kwargs['populationDuration']
        if 'populationRefresh' in kwargs:
            population_refresh = kwargs['populationRefresh']
        if 'populationTitle' in kwargs:
            population_title = kwargs['populationTitle']
        if 'segmentTrackingCookieName' in kwargs:
            segment_tracking_cookie_name = kwargs['segmentTrackingCookieName']
        if 'segmentTrackingCustomHeader' in kwargs:
            segment_tracking_custom_header = kwargs['segmentTrackingCustomHeader']
        if 'segmentTrackingMethod' in kwargs:
            segment_tracking_method = kwargs['segmentTrackingMethod']
        if 'segmentTrackingQueryParam' in kwargs:
            segment_tracking_query_param = kwargs['segmentTrackingQueryParam']
        if 'segmentTrackingTitle' in kwargs:
            segment_tracking_title = kwargs['segmentTrackingTitle']
        if 'specifyPopulationCookieDomain' in kwargs:
            specify_population_cookie_domain = kwargs['specifyPopulationCookieDomain']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            _setter("cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if is_shared_policy is not None:
            _setter("is_shared_policy", is_shared_policy)
        if label is not None:
            _setter("label", label)
        if locked is not None:
            _setter("locked", locked)
        if population_cookie_automatic_salt is not None:
            _setter("population_cookie_automatic_salt", population_cookie_automatic_salt)
        if population_cookie_domain is not None:
            _setter("population_cookie_domain", population_cookie_domain)
        if population_cookie_include_rule_name is not None:
            _setter("population_cookie_include_rule_name", population_cookie_include_rule_name)
        if population_cookie_salt is not None:
            _setter("population_cookie_salt", population_cookie_salt)
        if population_cookie_type is not None:
            _setter("population_cookie_type", population_cookie_type)
        if population_duration is not None:
            _setter("population_duration", population_duration)
        if population_refresh is not None:
            _setter("population_refresh", population_refresh)
        if population_title is not None:
            _setter("population_title", population_title)
        if segment_tracking_cookie_name is not None:
            _setter("segment_tracking_cookie_name", segment_tracking_cookie_name)
        if segment_tracking_custom_header is not None:
            _setter("segment_tracking_custom_header", segment_tracking_custom_header)
        if segment_tracking_method is not None:
            _setter("segment_tracking_method", segment_tracking_method)
        if segment_tracking_query_param is not None:
            _setter("segment_tracking_query_param", segment_tracking_query_param)
        if segment_tracking_title is not None:
            _setter("segment_tracking_title", segment_tracking_title)
        if specify_population_cookie_domain is not None:
            _setter("specify_population_cookie_domain", specify_population_cookie_domain)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="populationCookieAutomaticSalt")
    def population_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "population_cookie_automatic_salt")

    @property
    @pulumi.getter(name="populationCookieDomain")
    def population_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_domain")

    @property
    @pulumi.getter(name="populationCookieIncludeRuleName")
    def population_cookie_include_rule_name(self) -> Optional[bool]:
        return pulumi.get(self, "population_cookie_include_rule_name")

    @property
    @pulumi.getter(name="populationCookieSalt")
    def population_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_salt")

    @property
    @pulumi.getter(name="populationCookieType")
    def population_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_type")

    @property
    @pulumi.getter(name="populationDuration")
    def population_duration(self) -> Optional[str]:
        return pulumi.get(self, "population_duration")

    @property
    @pulumi.getter(name="populationRefresh")
    def population_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "population_refresh")

    @property
    @pulumi.getter(name="populationTitle")
    def population_title(self) -> Optional[str]:
        return pulumi.get(self, "population_title")

    @property
    @pulumi.getter(name="segmentTrackingCookieName")
    def segment_tracking_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_cookie_name")

    @property
    @pulumi.getter(name="segmentTrackingCustomHeader")
    def segment_tracking_custom_header(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_custom_header")

    @property
    @pulumi.getter(name="segmentTrackingMethod")
    def segment_tracking_method(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_method")

    @property
    @pulumi.getter(name="segmentTrackingQueryParam")
    def segment_tracking_query_param(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_query_param")

    @property
    @pulumi.getter(name="segmentTrackingTitle")
    def segment_tracking_title(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_title")

    @property
    @pulumi.getter(name="specifyPopulationCookieDomain")
    def specify_population_cookie_domain(self) -> Optional[bool]:
        return pulumi.get(self, "specify_population_cookie_domain")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAutoDomainValidationResult(dict):
    def __init__(__self__, *,
                 autodv: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorAutoDomainValidationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            autodv=autodv,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             autodv: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if autodv is not None:
            _setter("autodv", autodv)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def autodv(self) -> Optional[str]:
        return pulumi.get(self, "autodv")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorBaseDirectoryResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorBaseDirectoryResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorBossBeaconingResult(dict):
    def __init__(__self__, *,
                 conditional_error_pattern: Optional[str] = None,
                 conditional_http_statuses: Optional[Sequence[str]] = None,
                 conditional_sampling_frequency: Optional[str] = None,
                 cpcodes: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 forward_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 request_type: Optional[str] = None,
                 sampling_frequency: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorBossBeaconingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_error_pattern=conditional_error_pattern,
            conditional_http_statuses=conditional_http_statuses,
            conditional_sampling_frequency=conditional_sampling_frequency,
            cpcodes=cpcodes,
            enabled=enabled,
            forward_type=forward_type,
            locked=locked,
            request_type=request_type,
            sampling_frequency=sampling_frequency,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_error_pattern: Optional[str] = None,
             conditional_http_statuses: Optional[Sequence[str]] = None,
             conditional_sampling_frequency: Optional[str] = None,
             cpcodes: Optional[str] = None,
             enabled: Optional[bool] = None,
             forward_type: Optional[str] = None,
             locked: Optional[bool] = None,
             request_type: Optional[str] = None,
             sampling_frequency: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'conditionalErrorPattern' in kwargs:
            conditional_error_pattern = kwargs['conditionalErrorPattern']
        if 'conditionalHttpStatuses' in kwargs:
            conditional_http_statuses = kwargs['conditionalHttpStatuses']
        if 'conditionalSamplingFrequency' in kwargs:
            conditional_sampling_frequency = kwargs['conditionalSamplingFrequency']
        if 'forwardType' in kwargs:
            forward_type = kwargs['forwardType']
        if 'requestType' in kwargs:
            request_type = kwargs['requestType']
        if 'samplingFrequency' in kwargs:
            sampling_frequency = kwargs['samplingFrequency']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if conditional_error_pattern is not None:
            _setter("conditional_error_pattern", conditional_error_pattern)
        if conditional_http_statuses is not None:
            _setter("conditional_http_statuses", conditional_http_statuses)
        if conditional_sampling_frequency is not None:
            _setter("conditional_sampling_frequency", conditional_sampling_frequency)
        if cpcodes is not None:
            _setter("cpcodes", cpcodes)
        if enabled is not None:
            _setter("enabled", enabled)
        if forward_type is not None:
            _setter("forward_type", forward_type)
        if locked is not None:
            _setter("locked", locked)
        if request_type is not None:
            _setter("request_type", request_type)
        if sampling_frequency is not None:
            _setter("sampling_frequency", sampling_frequency)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="conditionalErrorPattern")
    def conditional_error_pattern(self) -> Optional[str]:
        return pulumi.get(self, "conditional_error_pattern")

    @property
    @pulumi.getter(name="conditionalHttpStatuses")
    def conditional_http_statuses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "conditional_http_statuses")

    @property
    @pulumi.getter(name="conditionalSamplingFrequency")
    def conditional_sampling_frequency(self) -> Optional[str]:
        return pulumi.get(self, "conditional_sampling_frequency")

    @property
    @pulumi.getter
    def cpcodes(self) -> Optional[str]:
        return pulumi.get(self, "cpcodes")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forwardType")
    def forward_type(self) -> Optional[str]:
        return pulumi.get(self, "forward_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[str]:
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter(name="samplingFrequency")
    def sampling_frequency(self) -> Optional[str]:
        return pulumi.get(self, "sampling_frequency")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorBreadcrumbsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 logging_enabled: Optional[bool] = None,
                 opt_mode: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorBreadcrumbsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            logging_enabled=logging_enabled,
            opt_mode=opt_mode,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             logging_enabled: Optional[bool] = None,
             opt_mode: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'loggingEnabled' in kwargs:
            logging_enabled = kwargs['loggingEnabled']
        if 'optMode' in kwargs:
            opt_mode = kwargs['optMode']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if logging_enabled is not None:
            _setter("logging_enabled", logging_enabled)
        if opt_mode is not None:
            _setter("opt_mode", opt_mode)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="loggingEnabled")
    def logging_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "logging_enabled")

    @property
    @pulumi.getter(name="optMode")
    def opt_mode(self) -> Optional[bool]:
        return pulumi.get(self, "opt_mode")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorBreakConnectionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorBreakConnectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorBrotliResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorBrotliResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheErrorResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 preserve_stale: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCacheErrorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            preserve_stale=preserve_stale,
            template_uuid=template_uuid,
            ttl=ttl,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             preserve_stale: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             ttl: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'preserveStale' in kwargs:
            preserve_stale = kwargs['preserveStale']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if preserve_stale is not None:
            _setter("preserve_stale", preserve_stale)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if ttl is not None:
            _setter("ttl", ttl)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="preserveStale")
    def preserve_stale(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_stale")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheIdResult(dict):
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 include_value: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 optional: Optional[bool] = None,
                 rule: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCacheIdResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            elements=elements,
            include_value=include_value,
            locked=locked,
            optional=optional,
            rule=rule,
            template_uuid=template_uuid,
            uuid=uuid,
            variable_name=variable_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             elements: Optional[Sequence[str]] = None,
             include_value: Optional[bool] = None,
             locked: Optional[bool] = None,
             optional: Optional[bool] = None,
             rule: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             variable_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'includeValue' in kwargs:
            include_value = kwargs['includeValue']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'variableName' in kwargs:
            variable_name = kwargs['variableName']

        if elements is not None:
            _setter("elements", elements)
        if include_value is not None:
            _setter("include_value", include_value)
        if locked is not None:
            _setter("locked", locked)
        if optional is not None:
            _setter("optional", optional)
        if rule is not None:
            _setter("rule", rule)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if variable_name is not None:
            _setter("variable_name", variable_name)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter(name="includeValue")
    def include_value(self) -> Optional[bool]:
        return pulumi.get(self, "include_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter
    def rule(self) -> Optional[str]:
        return pulumi.get(self, "rule")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyIgnoreCaseResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyIgnoreCaseResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyQueryParamsResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 exact_match: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 parameters: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyQueryParamsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior=behavior,
            exact_match=exact_match,
            locked=locked,
            parameters=parameters,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior: Optional[str] = None,
             exact_match: Optional[bool] = None,
             locked: Optional[bool] = None,
             parameters: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'exactMatch' in kwargs:
            exact_match = kwargs['exactMatch']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if behavior is not None:
            _setter("behavior", behavior)
        if exact_match is not None:
            _setter("exact_match", exact_match)
        if locked is not None:
            _setter("locked", locked)
        if parameters is not None:
            _setter("parameters", parameters)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[bool]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyRewriteResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 purge_key: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyRewriteResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            purge_key=purge_key,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             purge_key: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'purgeKey' in kwargs:
            purge_key = kwargs['purgeKey']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if purge_key is not None:
            _setter("purge_key", purge_key)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="purgeKey")
    def purge_key(self) -> Optional[str]:
        return pulumi.get(self, "purge_key")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCachePostResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_body: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCachePostResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            use_body=use_body,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             use_body: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useBody' in kwargs:
            use_body = kwargs['useBody']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_body is not None:
            _setter("use_body", use_body)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useBody")
    def use_body(self) -> Optional[str]:
        return pulumi.get(self, "use_body")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheRedirectResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCacheRedirectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 tag: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            tag=tag,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             tag: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if tag is not None:
            _setter("tag", tag)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagVisibleResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagVisibleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior=behavior,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if behavior is not None:
            _setter("behavior", behavior)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCachingResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 cache_control_directives: Optional[str] = None,
                 cacheability_settings: Optional[str] = None,
                 default_ttl: Optional[str] = None,
                 enhanced_rfc_support: Optional[bool] = None,
                 expiration_settings: Optional[str] = None,
                 honor_max_age: Optional[bool] = None,
                 honor_must_revalidate: Optional[bool] = None,
                 honor_no_cache: Optional[bool] = None,
                 honor_no_store: Optional[bool] = None,
                 honor_private: Optional[bool] = None,
                 honor_proxy_revalidate: Optional[bool] = None,
                 honor_s_maxage: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 must_revalidate: Optional[bool] = None,
                 revalidation_settings: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCachingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior=behavior,
            cache_control_directives=cache_control_directives,
            cacheability_settings=cacheability_settings,
            default_ttl=default_ttl,
            enhanced_rfc_support=enhanced_rfc_support,
            expiration_settings=expiration_settings,
            honor_max_age=honor_max_age,
            honor_must_revalidate=honor_must_revalidate,
            honor_no_cache=honor_no_cache,
            honor_no_store=honor_no_store,
            honor_private=honor_private,
            honor_proxy_revalidate=honor_proxy_revalidate,
            honor_s_maxage=honor_s_maxage,
            locked=locked,
            must_revalidate=must_revalidate,
            revalidation_settings=revalidation_settings,
            template_uuid=template_uuid,
            ttl=ttl,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior: Optional[str] = None,
             cache_control_directives: Optional[str] = None,
             cacheability_settings: Optional[str] = None,
             default_ttl: Optional[str] = None,
             enhanced_rfc_support: Optional[bool] = None,
             expiration_settings: Optional[str] = None,
             honor_max_age: Optional[bool] = None,
             honor_must_revalidate: Optional[bool] = None,
             honor_no_cache: Optional[bool] = None,
             honor_no_store: Optional[bool] = None,
             honor_private: Optional[bool] = None,
             honor_proxy_revalidate: Optional[bool] = None,
             honor_s_maxage: Optional[bool] = None,
             locked: Optional[bool] = None,
             must_revalidate: Optional[bool] = None,
             revalidation_settings: Optional[str] = None,
             template_uuid: Optional[str] = None,
             ttl: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cacheControlDirectives' in kwargs:
            cache_control_directives = kwargs['cacheControlDirectives']
        if 'cacheabilitySettings' in kwargs:
            cacheability_settings = kwargs['cacheabilitySettings']
        if 'defaultTtl' in kwargs:
            default_ttl = kwargs['defaultTtl']
        if 'enhancedRfcSupport' in kwargs:
            enhanced_rfc_support = kwargs['enhancedRfcSupport']
        if 'expirationSettings' in kwargs:
            expiration_settings = kwargs['expirationSettings']
        if 'honorMaxAge' in kwargs:
            honor_max_age = kwargs['honorMaxAge']
        if 'honorMustRevalidate' in kwargs:
            honor_must_revalidate = kwargs['honorMustRevalidate']
        if 'honorNoCache' in kwargs:
            honor_no_cache = kwargs['honorNoCache']
        if 'honorNoStore' in kwargs:
            honor_no_store = kwargs['honorNoStore']
        if 'honorPrivate' in kwargs:
            honor_private = kwargs['honorPrivate']
        if 'honorProxyRevalidate' in kwargs:
            honor_proxy_revalidate = kwargs['honorProxyRevalidate']
        if 'honorSMaxage' in kwargs:
            honor_s_maxage = kwargs['honorSMaxage']
        if 'mustRevalidate' in kwargs:
            must_revalidate = kwargs['mustRevalidate']
        if 'revalidationSettings' in kwargs:
            revalidation_settings = kwargs['revalidationSettings']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if behavior is not None:
            _setter("behavior", behavior)
        if cache_control_directives is not None:
            _setter("cache_control_directives", cache_control_directives)
        if cacheability_settings is not None:
            _setter("cacheability_settings", cacheability_settings)
        if default_ttl is not None:
            _setter("default_ttl", default_ttl)
        if enhanced_rfc_support is not None:
            _setter("enhanced_rfc_support", enhanced_rfc_support)
        if expiration_settings is not None:
            _setter("expiration_settings", expiration_settings)
        if honor_max_age is not None:
            _setter("honor_max_age", honor_max_age)
        if honor_must_revalidate is not None:
            _setter("honor_must_revalidate", honor_must_revalidate)
        if honor_no_cache is not None:
            _setter("honor_no_cache", honor_no_cache)
        if honor_no_store is not None:
            _setter("honor_no_store", honor_no_store)
        if honor_private is not None:
            _setter("honor_private", honor_private)
        if honor_proxy_revalidate is not None:
            _setter("honor_proxy_revalidate", honor_proxy_revalidate)
        if honor_s_maxage is not None:
            _setter("honor_s_maxage", honor_s_maxage)
        if locked is not None:
            _setter("locked", locked)
        if must_revalidate is not None:
            _setter("must_revalidate", must_revalidate)
        if revalidation_settings is not None:
            _setter("revalidation_settings", revalidation_settings)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if ttl is not None:
            _setter("ttl", ttl)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter(name="cacheControlDirectives")
    def cache_control_directives(self) -> Optional[str]:
        return pulumi.get(self, "cache_control_directives")

    @property
    @pulumi.getter(name="cacheabilitySettings")
    def cacheability_settings(self) -> Optional[str]:
        return pulumi.get(self, "cacheability_settings")

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[str]:
        return pulumi.get(self, "default_ttl")

    @property
    @pulumi.getter(name="enhancedRfcSupport")
    def enhanced_rfc_support(self) -> Optional[bool]:
        return pulumi.get(self, "enhanced_rfc_support")

    @property
    @pulumi.getter(name="expirationSettings")
    def expiration_settings(self) -> Optional[str]:
        return pulumi.get(self, "expiration_settings")

    @property
    @pulumi.getter(name="honorMaxAge")
    def honor_max_age(self) -> Optional[bool]:
        return pulumi.get(self, "honor_max_age")

    @property
    @pulumi.getter(name="honorMustRevalidate")
    def honor_must_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "honor_must_revalidate")

    @property
    @pulumi.getter(name="honorNoCache")
    def honor_no_cache(self) -> Optional[bool]:
        return pulumi.get(self, "honor_no_cache")

    @property
    @pulumi.getter(name="honorNoStore")
    def honor_no_store(self) -> Optional[bool]:
        return pulumi.get(self, "honor_no_store")

    @property
    @pulumi.getter(name="honorPrivate")
    def honor_private(self) -> Optional[bool]:
        return pulumi.get(self, "honor_private")

    @property
    @pulumi.getter(name="honorProxyRevalidate")
    def honor_proxy_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "honor_proxy_revalidate")

    @property
    @pulumi.getter(name="honorSMaxage")
    def honor_s_maxage(self) -> Optional[bool]:
        return pulumi.get(self, "honor_s_maxage")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mustRevalidate")
    def must_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "must_revalidate")

    @property
    @pulumi.getter(name="revalidationSettings")
    def revalidation_settings(self) -> Optional[str]:
        return pulumi.get(self, "revalidation_settings")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCentralAuthorizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCentralAuthorizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorChaseRedirectsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 limit: Optional[str] = None,
                 locked: Optional[bool] = None,
                 serve404: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorChaseRedirectsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            limit=limit,
            locked=locked,
            serve404=serve404,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             limit: Optional[str] = None,
             locked: Optional[bool] = None,
             serve404: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if limit is not None:
            _setter("limit", limit)
        if locked is not None:
            _setter("locked", locked)
        if serve404 is not None:
            _setter("serve404", serve404)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def serve404(self) -> Optional[bool]:
        return pulumi.get(self, "serve404")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorClientCharacteristicsResult(dict):
    def __init__(__self__, *,
                 country: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorClientCharacteristicsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            country=country,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             country: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if country is not None:
            _setter("country", country)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCloudInterconnectsResult(dict):
    def __init__(__self__, *,
                 cloud_locations: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCloudInterconnectsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_locations=cloud_locations,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_locations: Optional[Sequence[str]] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudLocations' in kwargs:
            cloud_locations = kwargs['cloudLocations']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cloud_locations is not None:
            _setter("cloud_locations", cloud_locations)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cloudLocations")
    def cloud_locations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cloud_locations")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            location=location,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             location: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if location is not None:
            _setter("location", location)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperAdvancedResult(dict):
    def __init__(__self__, *,
                 custom_failover_map: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 failover_map: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperAdvancedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_failover_map=custom_failover_map,
            enabled=enabled,
            failover_map=failover_map,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_failover_map: Optional[str] = None,
             enabled: Optional[bool] = None,
             failover_map: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customFailoverMap' in kwargs:
            custom_failover_map = kwargs['customFailoverMap']
        if 'failoverMap' in kwargs:
            failover_map = kwargs['failoverMap']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if custom_failover_map is not None:
            _setter("custom_failover_map", custom_failover_map)
        if enabled is not None:
            _setter("enabled", enabled)
        if failover_map is not None:
            _setter("failover_map", failover_map)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="customFailoverMap")
    def custom_failover_map(self) -> Optional[str]:
        return pulumi.get(self, "custom_failover_map")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failoverMap")
    def failover_map(self) -> Optional[str]:
        return pulumi.get(self, "failover_map")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCommonMediaClientDataResult(dict):
    def __init__(__self__, *,
                 enable_cmcd_segment_prefetch: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCommonMediaClientDataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_cmcd_segment_prefetch=enable_cmcd_segment_prefetch,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_cmcd_segment_prefetch: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enableCmcdSegmentPrefetch' in kwargs:
            enable_cmcd_segment_prefetch = kwargs['enableCmcdSegmentPrefetch']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enable_cmcd_segment_prefetch is not None:
            _setter("enable_cmcd_segment_prefetch", enable_cmcd_segment_prefetch)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="enableCmcdSegmentPrefetch")
    def enable_cmcd_segment_prefetch(self) -> Optional[bool]:
        return pulumi.get(self, "enable_cmcd_segment_prefetch")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorConditionalOriginResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorConditionalOriginResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            origin_id=origin_id,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             origin_id: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'originId' in kwargs:
            origin_id = kwargs['originId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if origin_id is not None:
            _setter("origin_id", origin_id)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorConstructResponseResult(dict):
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 force_eviction: Optional[bool] = None,
                 ignore_purge: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorConstructResponseResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            body=body,
            enabled=enabled,
            force_eviction=force_eviction,
            ignore_purge=ignore_purge,
            locked=locked,
            response_code=response_code,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             body: Optional[str] = None,
             enabled: Optional[bool] = None,
             force_eviction: Optional[bool] = None,
             ignore_purge: Optional[bool] = None,
             locked: Optional[bool] = None,
             response_code: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'forceEviction' in kwargs:
            force_eviction = kwargs['forceEviction']
        if 'ignorePurge' in kwargs:
            ignore_purge = kwargs['ignorePurge']
        if 'responseCode' in kwargs:
            response_code = kwargs['responseCode']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if body is not None:
            _setter("body", body)
        if enabled is not None:
            _setter("enabled", enabled)
        if force_eviction is not None:
            _setter("force_eviction", force_eviction)
        if ignore_purge is not None:
            _setter("ignore_purge", ignore_purge)
        if locked is not None:
            _setter("locked", locked)
        if response_code is not None:
            _setter("response_code", response_code)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forceEviction")
    def force_eviction(self) -> Optional[bool]:
        return pulumi.get(self, "force_eviction")

    @property
    @pulumi.getter(name="ignorePurge")
    def ignore_purge(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_purge")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_size=catalog_size,
            content_type=content_type,
            locked=locked,
            object_size=object_size,
            popularity_distribution=popularity_distribution,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_size: Optional[str] = None,
             content_type: Optional[str] = None,
             locked: Optional[bool] = None,
             object_size: Optional[str] = None,
             popularity_distribution: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'catalogSize' in kwargs:
            catalog_size = kwargs['catalogSize']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'objectSize' in kwargs:
            object_size = kwargs['objectSize']
        if 'popularityDistribution' in kwargs:
            popularity_distribution = kwargs['popularityDistribution']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if catalog_size is not None:
            _setter("catalog_size", catalog_size)
        if content_type is not None:
            _setter("content_type", content_type)
        if locked is not None:
            _setter("locked", locked)
        if object_size is not None:
            _setter("object_size", object_size)
        if popularity_distribution is not None:
            _setter("popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsAmdResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_dash_custom: Optional[int] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hds_custom: Optional[int] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_hls_custom: Optional[float] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_duration_smooth_custom: Optional[float] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsAmdResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_size=catalog_size,
            content_type=content_type,
            dash=dash,
            hds=hds,
            hls=hls,
            locked=locked,
            popularity_distribution=popularity_distribution,
            segment_duration_dash=segment_duration_dash,
            segment_duration_dash_custom=segment_duration_dash_custom,
            segment_duration_hds=segment_duration_hds,
            segment_duration_hds_custom=segment_duration_hds_custom,
            segment_duration_hls=segment_duration_hls,
            segment_duration_hls_custom=segment_duration_hls_custom,
            segment_duration_smooth=segment_duration_smooth,
            segment_duration_smooth_custom=segment_duration_smooth_custom,
            segment_size_dash=segment_size_dash,
            segment_size_hds=segment_size_hds,
            segment_size_hls=segment_size_hls,
            segment_size_smooth=segment_size_smooth,
            smooth=smooth,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_size: Optional[str] = None,
             content_type: Optional[str] = None,
             dash: Optional[bool] = None,
             hds: Optional[bool] = None,
             hls: Optional[bool] = None,
             locked: Optional[bool] = None,
             popularity_distribution: Optional[str] = None,
             segment_duration_dash: Optional[str] = None,
             segment_duration_dash_custom: Optional[int] = None,
             segment_duration_hds: Optional[str] = None,
             segment_duration_hds_custom: Optional[int] = None,
             segment_duration_hls: Optional[str] = None,
             segment_duration_hls_custom: Optional[float] = None,
             segment_duration_smooth: Optional[str] = None,
             segment_duration_smooth_custom: Optional[float] = None,
             segment_size_dash: Optional[str] = None,
             segment_size_hds: Optional[str] = None,
             segment_size_hls: Optional[str] = None,
             segment_size_smooth: Optional[str] = None,
             smooth: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'catalogSize' in kwargs:
            catalog_size = kwargs['catalogSize']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'popularityDistribution' in kwargs:
            popularity_distribution = kwargs['popularityDistribution']
        if 'segmentDurationDash' in kwargs:
            segment_duration_dash = kwargs['segmentDurationDash']
        if 'segmentDurationDashCustom' in kwargs:
            segment_duration_dash_custom = kwargs['segmentDurationDashCustom']
        if 'segmentDurationHds' in kwargs:
            segment_duration_hds = kwargs['segmentDurationHds']
        if 'segmentDurationHdsCustom' in kwargs:
            segment_duration_hds_custom = kwargs['segmentDurationHdsCustom']
        if 'segmentDurationHls' in kwargs:
            segment_duration_hls = kwargs['segmentDurationHls']
        if 'segmentDurationHlsCustom' in kwargs:
            segment_duration_hls_custom = kwargs['segmentDurationHlsCustom']
        if 'segmentDurationSmooth' in kwargs:
            segment_duration_smooth = kwargs['segmentDurationSmooth']
        if 'segmentDurationSmoothCustom' in kwargs:
            segment_duration_smooth_custom = kwargs['segmentDurationSmoothCustom']
        if 'segmentSizeDash' in kwargs:
            segment_size_dash = kwargs['segmentSizeDash']
        if 'segmentSizeHds' in kwargs:
            segment_size_hds = kwargs['segmentSizeHds']
        if 'segmentSizeHls' in kwargs:
            segment_size_hls = kwargs['segmentSizeHls']
        if 'segmentSizeSmooth' in kwargs:
            segment_size_smooth = kwargs['segmentSizeSmooth']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if catalog_size is not None:
            _setter("catalog_size", catalog_size)
        if content_type is not None:
            _setter("content_type", content_type)
        if dash is not None:
            _setter("dash", dash)
        if hds is not None:
            _setter("hds", hds)
        if hls is not None:
            _setter("hls", hls)
        if locked is not None:
            _setter("locked", locked)
        if popularity_distribution is not None:
            _setter("popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            _setter("segment_duration_dash", segment_duration_dash)
        if segment_duration_dash_custom is not None:
            _setter("segment_duration_dash_custom", segment_duration_dash_custom)
        if segment_duration_hds is not None:
            _setter("segment_duration_hds", segment_duration_hds)
        if segment_duration_hds_custom is not None:
            _setter("segment_duration_hds_custom", segment_duration_hds_custom)
        if segment_duration_hls is not None:
            _setter("segment_duration_hls", segment_duration_hls)
        if segment_duration_hls_custom is not None:
            _setter("segment_duration_hls_custom", segment_duration_hls_custom)
        if segment_duration_smooth is not None:
            _setter("segment_duration_smooth", segment_duration_smooth)
        if segment_duration_smooth_custom is not None:
            _setter("segment_duration_smooth_custom", segment_duration_smooth_custom)
        if segment_size_dash is not None:
            _setter("segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            _setter("segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            _setter("segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            _setter("segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            _setter("smooth", smooth)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @property
    @pulumi.getter(name="segmentDurationDashCustom")
    def segment_duration_dash_custom(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration_dash_custom")

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @property
    @pulumi.getter(name="segmentDurationHdsCustom")
    def segment_duration_hds_custom(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration_hds_custom")

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @property
    @pulumi.getter(name="segmentDurationHlsCustom")
    def segment_duration_hls_custom(self) -> Optional[float]:
        return pulumi.get(self, "segment_duration_hls_custom")

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @property
    @pulumi.getter(name="segmentDurationSmoothCustom")
    def segment_duration_smooth_custom(self) -> Optional[float]:
        return pulumi.get(self, "segment_duration_smooth_custom")

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsDdResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 optimize_option: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsDdResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_size=catalog_size,
            content_type=content_type,
            locked=locked,
            object_size=object_size,
            optimize_option=optimize_option,
            popularity_distribution=popularity_distribution,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_size: Optional[str] = None,
             content_type: Optional[str] = None,
             locked: Optional[bool] = None,
             object_size: Optional[str] = None,
             optimize_option: Optional[bool] = None,
             popularity_distribution: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'catalogSize' in kwargs:
            catalog_size = kwargs['catalogSize']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'objectSize' in kwargs:
            object_size = kwargs['objectSize']
        if 'optimizeOption' in kwargs:
            optimize_option = kwargs['optimizeOption']
        if 'popularityDistribution' in kwargs:
            popularity_distribution = kwargs['popularityDistribution']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if catalog_size is not None:
            _setter("catalog_size", catalog_size)
        if content_type is not None:
            _setter("content_type", content_type)
        if locked is not None:
            _setter("locked", locked)
        if object_size is not None:
            _setter("object_size", object_size)
        if optimize_option is not None:
            _setter("optimize_option", optimize_option)
        if popularity_distribution is not None:
            _setter("popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="optimizeOption")
    def optimize_option(self) -> Optional[bool]:
        return pulumi.get(self, "optimize_option")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLargeFileResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLargeFileResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_size=catalog_size,
            content_type=content_type,
            locked=locked,
            object_size=object_size,
            popularity_distribution=popularity_distribution,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_size: Optional[str] = None,
             content_type: Optional[str] = None,
             locked: Optional[bool] = None,
             object_size: Optional[str] = None,
             popularity_distribution: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'catalogSize' in kwargs:
            catalog_size = kwargs['catalogSize']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'objectSize' in kwargs:
            object_size = kwargs['objectSize']
        if 'popularityDistribution' in kwargs:
            popularity_distribution = kwargs['popularityDistribution']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if catalog_size is not None:
            _setter("catalog_size", catalog_size)
        if content_type is not None:
            _setter("content_type", content_type)
        if locked is not None:
            _setter("locked", locked)
        if object_size is not None:
            _setter("object_size", object_size)
        if popularity_distribution is not None:
            _setter("popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLiveResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLiveResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_size=catalog_size,
            content_type=content_type,
            dash=dash,
            hds=hds,
            hls=hls,
            locked=locked,
            popularity_distribution=popularity_distribution,
            segment_duration_dash=segment_duration_dash,
            segment_duration_hds=segment_duration_hds,
            segment_duration_hls=segment_duration_hls,
            segment_duration_smooth=segment_duration_smooth,
            segment_size_dash=segment_size_dash,
            segment_size_hds=segment_size_hds,
            segment_size_hls=segment_size_hls,
            segment_size_smooth=segment_size_smooth,
            smooth=smooth,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_size: Optional[str] = None,
             content_type: Optional[str] = None,
             dash: Optional[bool] = None,
             hds: Optional[bool] = None,
             hls: Optional[bool] = None,
             locked: Optional[bool] = None,
             popularity_distribution: Optional[str] = None,
             segment_duration_dash: Optional[str] = None,
             segment_duration_hds: Optional[str] = None,
             segment_duration_hls: Optional[str] = None,
             segment_duration_smooth: Optional[str] = None,
             segment_size_dash: Optional[str] = None,
             segment_size_hds: Optional[str] = None,
             segment_size_hls: Optional[str] = None,
             segment_size_smooth: Optional[str] = None,
             smooth: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'catalogSize' in kwargs:
            catalog_size = kwargs['catalogSize']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'popularityDistribution' in kwargs:
            popularity_distribution = kwargs['popularityDistribution']
        if 'segmentDurationDash' in kwargs:
            segment_duration_dash = kwargs['segmentDurationDash']
        if 'segmentDurationHds' in kwargs:
            segment_duration_hds = kwargs['segmentDurationHds']
        if 'segmentDurationHls' in kwargs:
            segment_duration_hls = kwargs['segmentDurationHls']
        if 'segmentDurationSmooth' in kwargs:
            segment_duration_smooth = kwargs['segmentDurationSmooth']
        if 'segmentSizeDash' in kwargs:
            segment_size_dash = kwargs['segmentSizeDash']
        if 'segmentSizeHds' in kwargs:
            segment_size_hds = kwargs['segmentSizeHds']
        if 'segmentSizeHls' in kwargs:
            segment_size_hls = kwargs['segmentSizeHls']
        if 'segmentSizeSmooth' in kwargs:
            segment_size_smooth = kwargs['segmentSizeSmooth']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if catalog_size is not None:
            _setter("catalog_size", catalog_size)
        if content_type is not None:
            _setter("content_type", content_type)
        if dash is not None:
            _setter("dash", dash)
        if hds is not None:
            _setter("hds", hds)
        if hls is not None:
            _setter("hls", hls)
        if locked is not None:
            _setter("locked", locked)
        if popularity_distribution is not None:
            _setter("popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            _setter("segment_duration_dash", segment_duration_dash)
        if segment_duration_hds is not None:
            _setter("segment_duration_hds", segment_duration_hds)
        if segment_duration_hls is not None:
            _setter("segment_duration_hls", segment_duration_hls)
        if segment_duration_smooth is not None:
            _setter("segment_duration_smooth", segment_duration_smooth)
        if segment_size_dash is not None:
            _setter("segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            _setter("segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            _setter("segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            _setter("segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            _setter("smooth", smooth)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdVodResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdVodResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_size=catalog_size,
            content_type=content_type,
            dash=dash,
            hds=hds,
            hls=hls,
            locked=locked,
            popularity_distribution=popularity_distribution,
            segment_duration_dash=segment_duration_dash,
            segment_duration_hds=segment_duration_hds,
            segment_duration_hls=segment_duration_hls,
            segment_duration_smooth=segment_duration_smooth,
            segment_size_dash=segment_size_dash,
            segment_size_hds=segment_size_hds,
            segment_size_hls=segment_size_hls,
            segment_size_smooth=segment_size_smooth,
            smooth=smooth,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_size: Optional[str] = None,
             content_type: Optional[str] = None,
             dash: Optional[bool] = None,
             hds: Optional[bool] = None,
             hls: Optional[bool] = None,
             locked: Optional[bool] = None,
             popularity_distribution: Optional[str] = None,
             segment_duration_dash: Optional[str] = None,
             segment_duration_hds: Optional[str] = None,
             segment_duration_hls: Optional[str] = None,
             segment_duration_smooth: Optional[str] = None,
             segment_size_dash: Optional[str] = None,
             segment_size_hds: Optional[str] = None,
             segment_size_hls: Optional[str] = None,
             segment_size_smooth: Optional[str] = None,
             smooth: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'catalogSize' in kwargs:
            catalog_size = kwargs['catalogSize']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'popularityDistribution' in kwargs:
            popularity_distribution = kwargs['popularityDistribution']
        if 'segmentDurationDash' in kwargs:
            segment_duration_dash = kwargs['segmentDurationDash']
        if 'segmentDurationHds' in kwargs:
            segment_duration_hds = kwargs['segmentDurationHds']
        if 'segmentDurationHls' in kwargs:
            segment_duration_hls = kwargs['segmentDurationHls']
        if 'segmentDurationSmooth' in kwargs:
            segment_duration_smooth = kwargs['segmentDurationSmooth']
        if 'segmentSizeDash' in kwargs:
            segment_size_dash = kwargs['segmentSizeDash']
        if 'segmentSizeHds' in kwargs:
            segment_size_hds = kwargs['segmentSizeHds']
        if 'segmentSizeHls' in kwargs:
            segment_size_hls = kwargs['segmentSizeHls']
        if 'segmentSizeSmooth' in kwargs:
            segment_size_smooth = kwargs['segmentSizeSmooth']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if catalog_size is not None:
            _setter("catalog_size", catalog_size)
        if content_type is not None:
            _setter("content_type", content_type)
        if dash is not None:
            _setter("dash", dash)
        if hds is not None:
            _setter("hds", hds)
        if hls is not None:
            _setter("hls", hls)
        if locked is not None:
            _setter("locked", locked)
        if popularity_distribution is not None:
            _setter("popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            _setter("segment_duration_dash", segment_duration_dash)
        if segment_duration_hds is not None:
            _setter("segment_duration_hds", segment_duration_hds)
        if segment_duration_hls is not None:
            _setter("segment_duration_hls", segment_duration_hls)
        if segment_duration_smooth is not None:
            _setter("segment_duration_smooth", segment_duration_smooth)
        if segment_size_dash is not None:
            _setter("segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            _setter("segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            _setter("segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            _setter("segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            _setter("smooth", smooth)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentPrePositionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 first_location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 second_location: Optional[str] = None,
                 source_type: Optional[str] = None,
                 targets: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorContentPrePositionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            first_location=first_location,
            locked=locked,
            second_location=second_location,
            source_type=source_type,
            targets=targets,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             first_location: Optional[str] = None,
             locked: Optional[bool] = None,
             second_location: Optional[str] = None,
             source_type: Optional[str] = None,
             targets: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'firstLocation' in kwargs:
            first_location = kwargs['firstLocation']
        if 'secondLocation' in kwargs:
            second_location = kwargs['secondLocation']
        if 'sourceType' in kwargs:
            source_type = kwargs['sourceType']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if first_location is not None:
            _setter("first_location", first_location)
        if locked is not None:
            _setter("locked", locked)
        if second_location is not None:
            _setter("second_location", second_location)
        if source_type is not None:
            _setter("source_type", source_type)
        if targets is not None:
            _setter("targets", targets)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="firstLocation")
    def first_location(self) -> Optional[str]:
        return pulumi.get(self, "first_location")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="secondLocation")
    def second_location(self) -> Optional[str]:
        return pulumi.get(self, "second_location")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def targets(self) -> Optional[str]:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentTargetingProtectionResult(dict):
    def __init__(__self__, *,
                 countries: Optional[Sequence[str]] = None,
                 dmas: Optional[Sequence[str]] = None,
                 enable_geo_protection: Optional[bool] = None,
                 enable_geo_redirect_on_deny: Optional[bool] = None,
                 enable_ip_protection: Optional[bool] = None,
                 enable_ip_redirect_on_deny: Optional[bool] = None,
                 enable_referrer_protection: Optional[bool] = None,
                 enable_referrer_redirect_on_deny: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 geo_protection_mode: Optional[str] = None,
                 geo_protection_title: Optional[str] = None,
                 geo_redirect_url: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 ip_protection_mode: Optional[str] = None,
                 ip_protection_title: Optional[str] = None,
                 ip_redirect_url: Optional[str] = None,
                 locked: Optional[bool] = None,
                 override_ip_addresses: Optional[Sequence[str]] = None,
                 referrer_domains: Optional[Sequence[str]] = None,
                 referrer_protection_mode: Optional[str] = None,
                 referrer_protection_title: Optional[str] = None,
                 referrer_redirect_url: Optional[str] = None,
                 regions: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorContentTargetingProtectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            countries=countries,
            dmas=dmas,
            enable_geo_protection=enable_geo_protection,
            enable_geo_redirect_on_deny=enable_geo_redirect_on_deny,
            enable_ip_protection=enable_ip_protection,
            enable_ip_redirect_on_deny=enable_ip_redirect_on_deny,
            enable_referrer_protection=enable_referrer_protection,
            enable_referrer_redirect_on_deny=enable_referrer_redirect_on_deny,
            enabled=enabled,
            geo_protection_mode=geo_protection_mode,
            geo_protection_title=geo_protection_title,
            geo_redirect_url=geo_redirect_url,
            ip_addresses=ip_addresses,
            ip_protection_mode=ip_protection_mode,
            ip_protection_title=ip_protection_title,
            ip_redirect_url=ip_redirect_url,
            locked=locked,
            override_ip_addresses=override_ip_addresses,
            referrer_domains=referrer_domains,
            referrer_protection_mode=referrer_protection_mode,
            referrer_protection_title=referrer_protection_title,
            referrer_redirect_url=referrer_redirect_url,
            regions=regions,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             countries: Optional[Sequence[str]] = None,
             dmas: Optional[Sequence[str]] = None,
             enable_geo_protection: Optional[bool] = None,
             enable_geo_redirect_on_deny: Optional[bool] = None,
             enable_ip_protection: Optional[bool] = None,
             enable_ip_redirect_on_deny: Optional[bool] = None,
             enable_referrer_protection: Optional[bool] = None,
             enable_referrer_redirect_on_deny: Optional[bool] = None,
             enabled: Optional[bool] = None,
             geo_protection_mode: Optional[str] = None,
             geo_protection_title: Optional[str] = None,
             geo_redirect_url: Optional[str] = None,
             ip_addresses: Optional[Sequence[str]] = None,
             ip_protection_mode: Optional[str] = None,
             ip_protection_title: Optional[str] = None,
             ip_redirect_url: Optional[str] = None,
             locked: Optional[bool] = None,
             override_ip_addresses: Optional[Sequence[str]] = None,
             referrer_domains: Optional[Sequence[str]] = None,
             referrer_protection_mode: Optional[str] = None,
             referrer_protection_title: Optional[str] = None,
             referrer_redirect_url: Optional[str] = None,
             regions: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enableGeoProtection' in kwargs:
            enable_geo_protection = kwargs['enableGeoProtection']
        if 'enableGeoRedirectOnDeny' in kwargs:
            enable_geo_redirect_on_deny = kwargs['enableGeoRedirectOnDeny']
        if 'enableIpProtection' in kwargs:
            enable_ip_protection = kwargs['enableIpProtection']
        if 'enableIpRedirectOnDeny' in kwargs:
            enable_ip_redirect_on_deny = kwargs['enableIpRedirectOnDeny']
        if 'enableReferrerProtection' in kwargs:
            enable_referrer_protection = kwargs['enableReferrerProtection']
        if 'enableReferrerRedirectOnDeny' in kwargs:
            enable_referrer_redirect_on_deny = kwargs['enableReferrerRedirectOnDeny']
        if 'geoProtectionMode' in kwargs:
            geo_protection_mode = kwargs['geoProtectionMode']
        if 'geoProtectionTitle' in kwargs:
            geo_protection_title = kwargs['geoProtectionTitle']
        if 'geoRedirectUrl' in kwargs:
            geo_redirect_url = kwargs['geoRedirectUrl']
        if 'ipAddresses' in kwargs:
            ip_addresses = kwargs['ipAddresses']
        if 'ipProtectionMode' in kwargs:
            ip_protection_mode = kwargs['ipProtectionMode']
        if 'ipProtectionTitle' in kwargs:
            ip_protection_title = kwargs['ipProtectionTitle']
        if 'ipRedirectUrl' in kwargs:
            ip_redirect_url = kwargs['ipRedirectUrl']
        if 'overrideIpAddresses' in kwargs:
            override_ip_addresses = kwargs['overrideIpAddresses']
        if 'referrerDomains' in kwargs:
            referrer_domains = kwargs['referrerDomains']
        if 'referrerProtectionMode' in kwargs:
            referrer_protection_mode = kwargs['referrerProtectionMode']
        if 'referrerProtectionTitle' in kwargs:
            referrer_protection_title = kwargs['referrerProtectionTitle']
        if 'referrerRedirectUrl' in kwargs:
            referrer_redirect_url = kwargs['referrerRedirectUrl']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if countries is not None:
            _setter("countries", countries)
        if dmas is not None:
            _setter("dmas", dmas)
        if enable_geo_protection is not None:
            _setter("enable_geo_protection", enable_geo_protection)
        if enable_geo_redirect_on_deny is not None:
            _setter("enable_geo_redirect_on_deny", enable_geo_redirect_on_deny)
        if enable_ip_protection is not None:
            _setter("enable_ip_protection", enable_ip_protection)
        if enable_ip_redirect_on_deny is not None:
            _setter("enable_ip_redirect_on_deny", enable_ip_redirect_on_deny)
        if enable_referrer_protection is not None:
            _setter("enable_referrer_protection", enable_referrer_protection)
        if enable_referrer_redirect_on_deny is not None:
            _setter("enable_referrer_redirect_on_deny", enable_referrer_redirect_on_deny)
        if enabled is not None:
            _setter("enabled", enabled)
        if geo_protection_mode is not None:
            _setter("geo_protection_mode", geo_protection_mode)
        if geo_protection_title is not None:
            _setter("geo_protection_title", geo_protection_title)
        if geo_redirect_url is not None:
            _setter("geo_redirect_url", geo_redirect_url)
        if ip_addresses is not None:
            _setter("ip_addresses", ip_addresses)
        if ip_protection_mode is not None:
            _setter("ip_protection_mode", ip_protection_mode)
        if ip_protection_title is not None:
            _setter("ip_protection_title", ip_protection_title)
        if ip_redirect_url is not None:
            _setter("ip_redirect_url", ip_redirect_url)
        if locked is not None:
            _setter("locked", locked)
        if override_ip_addresses is not None:
            _setter("override_ip_addresses", override_ip_addresses)
        if referrer_domains is not None:
            _setter("referrer_domains", referrer_domains)
        if referrer_protection_mode is not None:
            _setter("referrer_protection_mode", referrer_protection_mode)
        if referrer_protection_title is not None:
            _setter("referrer_protection_title", referrer_protection_title)
        if referrer_redirect_url is not None:
            _setter("referrer_redirect_url", referrer_redirect_url)
        if regions is not None:
            _setter("regions", regions)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "countries")

    @property
    @pulumi.getter
    def dmas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dmas")

    @property
    @pulumi.getter(name="enableGeoProtection")
    def enable_geo_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_geo_protection")

    @property
    @pulumi.getter(name="enableGeoRedirectOnDeny")
    def enable_geo_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_geo_redirect_on_deny")

    @property
    @pulumi.getter(name="enableIpProtection")
    def enable_ip_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_protection")

    @property
    @pulumi.getter(name="enableIpRedirectOnDeny")
    def enable_ip_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_redirect_on_deny")

    @property
    @pulumi.getter(name="enableReferrerProtection")
    def enable_referrer_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_referrer_protection")

    @property
    @pulumi.getter(name="enableReferrerRedirectOnDeny")
    def enable_referrer_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_referrer_redirect_on_deny")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="geoProtectionMode")
    def geo_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "geo_protection_mode")

    @property
    @pulumi.getter(name="geoProtectionTitle")
    def geo_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "geo_protection_title")

    @property
    @pulumi.getter(name="geoRedirectUrl")
    def geo_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "geo_redirect_url")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="ipProtectionMode")
    def ip_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "ip_protection_mode")

    @property
    @pulumi.getter(name="ipProtectionTitle")
    def ip_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "ip_protection_title")

    @property
    @pulumi.getter(name="ipRedirectUrl")
    def ip_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "ip_redirect_url")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="overrideIpAddresses")
    def override_ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "override_ip_addresses")

    @property
    @pulumi.getter(name="referrerDomains")
    def referrer_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "referrer_domains")

    @property
    @pulumi.getter(name="referrerProtectionMode")
    def referrer_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "referrer_protection_mode")

    @property
    @pulumi.getter(name="referrerProtectionTitle")
    def referrer_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "referrer_protection_title")

    @property
    @pulumi.getter(name="referrerRedirectUrl")
    def referrer_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "referrer_redirect_url")

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCorsSupportResult(dict):
    def __init__(__self__, *,
                 allow_credentials: Optional[bool] = None,
                 allow_headers: Optional[str] = None,
                 allow_origins: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 expose_headers: Optional[Sequence[str]] = None,
                 headers: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 methods: Optional[Sequence[str]] = None,
                 origins: Optional[Sequence[str]] = None,
                 preflight_max_age: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCorsSupportResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_credentials=allow_credentials,
            allow_headers=allow_headers,
            allow_origins=allow_origins,
            enabled=enabled,
            expose_headers=expose_headers,
            headers=headers,
            locked=locked,
            methods=methods,
            origins=origins,
            preflight_max_age=preflight_max_age,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_credentials: Optional[bool] = None,
             allow_headers: Optional[str] = None,
             allow_origins: Optional[str] = None,
             enabled: Optional[bool] = None,
             expose_headers: Optional[Sequence[str]] = None,
             headers: Optional[Sequence[str]] = None,
             locked: Optional[bool] = None,
             methods: Optional[Sequence[str]] = None,
             origins: Optional[Sequence[str]] = None,
             preflight_max_age: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowCredentials' in kwargs:
            allow_credentials = kwargs['allowCredentials']
        if 'allowHeaders' in kwargs:
            allow_headers = kwargs['allowHeaders']
        if 'allowOrigins' in kwargs:
            allow_origins = kwargs['allowOrigins']
        if 'exposeHeaders' in kwargs:
            expose_headers = kwargs['exposeHeaders']
        if 'preflightMaxAge' in kwargs:
            preflight_max_age = kwargs['preflightMaxAge']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if allow_credentials is not None:
            _setter("allow_credentials", allow_credentials)
        if allow_headers is not None:
            _setter("allow_headers", allow_headers)
        if allow_origins is not None:
            _setter("allow_origins", allow_origins)
        if enabled is not None:
            _setter("enabled", enabled)
        if expose_headers is not None:
            _setter("expose_headers", expose_headers)
        if headers is not None:
            _setter("headers", headers)
        if locked is not None:
            _setter("locked", locked)
        if methods is not None:
            _setter("methods", methods)
        if origins is not None:
            _setter("origins", origins)
        if preflight_max_age is not None:
            _setter("preflight_max_age", preflight_max_age)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "allow_credentials")

    @property
    @pulumi.getter(name="allowHeaders")
    def allow_headers(self) -> Optional[str]:
        return pulumi.get(self, "allow_headers")

    @property
    @pulumi.getter(name="allowOrigins")
    def allow_origins(self) -> Optional[str]:
        return pulumi.get(self, "allow_origins")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "expose_headers")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "origins")

    @property
    @pulumi.getter(name="preflightMaxAge")
    def preflight_max_age(self) -> Optional[str]:
        return pulumi.get(self, "preflight_max_age")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueResult'] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueResult']:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCustomBehaviorResult(dict):
    def __init__(__self__, *,
                 behavior_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorCustomBehaviorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior_id=behavior_id,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior_id: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'behaviorId' in kwargs:
            behavior_id = kwargs['behaviorId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if behavior_id is not None:
            _setter("behavior_id", behavior_id)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="behaviorId")
    def behavior_id(self) -> Optional[str]:
        return pulumi.get(self, "behavior_id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDatastreamResult(dict):
    def __init__(__self__, *,
                 beacon_stream_title: Optional[str] = None,
                 collect_midgress_traffic: Optional[bool] = None,
                 datastream_ids: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 log_enabled: Optional[bool] = None,
                 log_stream_names: Optional[Sequence[str]] = None,
                 log_stream_title: Optional[str] = None,
                 sampling_percentage: Optional[int] = None,
                 stream_type: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDatastreamResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            beacon_stream_title=beacon_stream_title,
            collect_midgress_traffic=collect_midgress_traffic,
            datastream_ids=datastream_ids,
            enabled=enabled,
            locked=locked,
            log_enabled=log_enabled,
            log_stream_names=log_stream_names,
            log_stream_title=log_stream_title,
            sampling_percentage=sampling_percentage,
            stream_type=stream_type,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             beacon_stream_title: Optional[str] = None,
             collect_midgress_traffic: Optional[bool] = None,
             datastream_ids: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             log_enabled: Optional[bool] = None,
             log_stream_names: Optional[Sequence[str]] = None,
             log_stream_title: Optional[str] = None,
             sampling_percentage: Optional[int] = None,
             stream_type: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'beaconStreamTitle' in kwargs:
            beacon_stream_title = kwargs['beaconStreamTitle']
        if 'collectMidgressTraffic' in kwargs:
            collect_midgress_traffic = kwargs['collectMidgressTraffic']
        if 'datastreamIds' in kwargs:
            datastream_ids = kwargs['datastreamIds']
        if 'logEnabled' in kwargs:
            log_enabled = kwargs['logEnabled']
        if 'logStreamNames' in kwargs:
            log_stream_names = kwargs['logStreamNames']
        if 'logStreamTitle' in kwargs:
            log_stream_title = kwargs['logStreamTitle']
        if 'samplingPercentage' in kwargs:
            sampling_percentage = kwargs['samplingPercentage']
        if 'streamType' in kwargs:
            stream_type = kwargs['streamType']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if beacon_stream_title is not None:
            _setter("beacon_stream_title", beacon_stream_title)
        if collect_midgress_traffic is not None:
            _setter("collect_midgress_traffic", collect_midgress_traffic)
        if datastream_ids is not None:
            _setter("datastream_ids", datastream_ids)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if log_enabled is not None:
            _setter("log_enabled", log_enabled)
        if log_stream_names is not None:
            _setter("log_stream_names", log_stream_names)
        if log_stream_title is not None:
            _setter("log_stream_title", log_stream_title)
        if sampling_percentage is not None:
            _setter("sampling_percentage", sampling_percentage)
        if stream_type is not None:
            _setter("stream_type", stream_type)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="beaconStreamTitle")
    def beacon_stream_title(self) -> Optional[str]:
        return pulumi.get(self, "beacon_stream_title")

    @property
    @pulumi.getter(name="collectMidgressTraffic")
    def collect_midgress_traffic(self) -> Optional[bool]:
        return pulumi.get(self, "collect_midgress_traffic")

    @property
    @pulumi.getter(name="datastreamIds")
    def datastream_ids(self) -> Optional[str]:
        return pulumi.get(self, "datastream_ids")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="logEnabled")
    def log_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "log_enabled")

    @property
    @pulumi.getter(name="logStreamNames")
    def log_stream_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "log_stream_names")

    @property
    @pulumi.getter(name="logStreamTitle")
    def log_stream_title(self) -> Optional[str]:
        return pulumi.get(self, "log_stream_title")

    @property
    @pulumi.getter(name="samplingPercentage")
    def sampling_percentage(self) -> Optional[int]:
        return pulumi.get(self, "sampling_percentage")

    @property
    @pulumi.getter(name="streamType")
    def stream_type(self) -> Optional[str]:
        return pulumi.get(self, "stream_type")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpResult(dict):
    def __init__(__self__, *,
                 anonymous: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 gwenabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 namespace_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tlsenabled: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 wsenabled: Optional[bool] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDcpResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            anonymous=anonymous,
            enabled=enabled,
            gwenabled=gwenabled,
            locked=locked,
            namespace_id=namespace_id,
            template_uuid=template_uuid,
            tlsenabled=tlsenabled,
            uuid=uuid,
            wsenabled=wsenabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             anonymous: Optional[bool] = None,
             enabled: Optional[bool] = None,
             gwenabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             namespace_id: Optional[str] = None,
             template_uuid: Optional[str] = None,
             tlsenabled: Optional[bool] = None,
             uuid: Optional[str] = None,
             wsenabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'namespaceId' in kwargs:
            namespace_id = kwargs['namespaceId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if anonymous is not None:
            _setter("anonymous", anonymous)
        if enabled is not None:
            _setter("enabled", enabled)
        if gwenabled is not None:
            _setter("gwenabled", gwenabled)
        if locked is not None:
            _setter("locked", locked)
        if namespace_id is not None:
            _setter("namespace_id", namespace_id)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if tlsenabled is not None:
            _setter("tlsenabled", tlsenabled)
        if uuid is not None:
            _setter("uuid", uuid)
        if wsenabled is not None:
            _setter("wsenabled", wsenabled)

    @property
    @pulumi.getter
    def anonymous(self) -> Optional[bool]:
        return pulumi.get(self, "anonymous")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def gwenabled(self) -> Optional[bool]:
        return pulumi.get(self, "gwenabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[str]:
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def tlsenabled(self) -> Optional[bool]:
        return pulumi.get(self, "tlsenabled")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def wsenabled(self) -> Optional[bool]:
        return pulumi.get(self, "wsenabled")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthHmacTransformationResult(dict):
    def __init__(__self__, *,
                 hash_conversion_algorithm: Optional[str] = None,
                 hash_conversion_key: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthHmacTransformationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hash_conversion_algorithm=hash_conversion_algorithm,
            hash_conversion_key=hash_conversion_key,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hash_conversion_algorithm: Optional[str] = None,
             hash_conversion_key: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hashConversionAlgorithm' in kwargs:
            hash_conversion_algorithm = kwargs['hashConversionAlgorithm']
        if 'hashConversionKey' in kwargs:
            hash_conversion_key = kwargs['hashConversionKey']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if hash_conversion_algorithm is not None:
            _setter("hash_conversion_algorithm", hash_conversion_algorithm)
        if hash_conversion_key is not None:
            _setter("hash_conversion_key", hash_conversion_key)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="hashConversionAlgorithm")
    def hash_conversion_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hash_conversion_algorithm")

    @property
    @pulumi.getter(name="hashConversionKey")
    def hash_conversion_key(self) -> Optional[str]:
        return pulumi.get(self, "hash_conversion_key")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthRegexTransformationResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthRegexTransformationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            regex_pattern=regex_pattern,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             regex_pattern: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'regexPattern' in kwargs:
            regex_pattern = kwargs['regexPattern']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if regex_pattern is not None:
            _setter("regex_pattern", regex_pattern)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthSubstringTransformationResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 substring_end: Optional[str] = None,
                 substring_start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthSubstringTransformationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            substring_end=substring_end,
            substring_start=substring_start,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             substring_end: Optional[str] = None,
             substring_start: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'substringEnd' in kwargs:
            substring_end = kwargs['substringEnd']
        if 'substringStart' in kwargs:
            substring_start = kwargs['substringStart']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if substring_end is not None:
            _setter("substring_end", substring_end)
        if substring_start is not None:
            _setter("substring_start", substring_start)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="substringEnd")
    def substring_end(self) -> Optional[str]:
        return pulumi.get(self, "substring_end")

    @property
    @pulumi.getter(name="substringStart")
    def substring_start(self) -> Optional[str]:
        return pulumi.get(self, "substring_start")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthVariableExtractorResult(dict):
    def __init__(__self__, *,
                 certificate_field: Optional[str] = None,
                 dcp_mutual_auth_processing_variable_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthVariableExtractorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_field=certificate_field,
            dcp_mutual_auth_processing_variable_id=dcp_mutual_auth_processing_variable_id,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_field: Optional[str] = None,
             dcp_mutual_auth_processing_variable_id: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'certificateField' in kwargs:
            certificate_field = kwargs['certificateField']
        if 'dcpMutualAuthProcessingVariableId' in kwargs:
            dcp_mutual_auth_processing_variable_id = kwargs['dcpMutualAuthProcessingVariableId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if certificate_field is not None:
            _setter("certificate_field", certificate_field)
        if dcp_mutual_auth_processing_variable_id is not None:
            _setter("dcp_mutual_auth_processing_variable_id", dcp_mutual_auth_processing_variable_id)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="certificateField")
    def certificate_field(self) -> Optional[str]:
        return pulumi.get(self, "certificate_field")

    @property
    @pulumi.getter(name="dcpMutualAuthProcessingVariableId")
    def dcp_mutual_auth_processing_variable_id(self) -> Optional[str]:
        return pulumi.get(self, "dcp_mutual_auth_processing_variable_id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpDefaultAuthzGroupsResult(dict):
    def __init__(__self__, *,
                 group_names: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDcpDefaultAuthzGroupsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_names=group_names,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_names: Optional[Sequence[str]] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'groupNames' in kwargs:
            group_names = kwargs['groupNames']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if group_names is not None:
            _setter("group_names", group_names)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="groupNames")
    def group_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_names")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpDevRelationsResult(dict):
    def __init__(__self__, *,
                 custom_values: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 locked: Optional[bool] = None,
                 path: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDcpDevRelationsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_values=custom_values,
            enabled=enabled,
            hostname=hostname,
            locked=locked,
            path=path,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_values: Optional[bool] = None,
             enabled: Optional[bool] = None,
             hostname: Optional[str] = None,
             locked: Optional[bool] = None,
             path: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customValues' in kwargs:
            custom_values = kwargs['customValues']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if custom_values is not None:
            _setter("custom_values", custom_values)
        if enabled is not None:
            _setter("enabled", enabled)
        if hostname is not None:
            _setter("hostname", hostname)
        if locked is not None:
            _setter("locked", locked)
        if path is not None:
            _setter("path", path)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="customValues")
    def custom_values(self) -> Optional[bool]:
        return pulumi.get(self, "custom_values")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpRealTimeAuthResult(dict):
    def __init__(__self__, *,
                 extract_hostname: Optional[bool] = None,
                 extract_jurisdiction: Optional[bool] = None,
                 extract_namespace: Optional[bool] = None,
                 hostname_claim: Optional[str] = None,
                 jurisdiction_claim: Optional[str] = None,
                 locked: Optional[bool] = None,
                 namespace_claim: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDcpRealTimeAuthResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            extract_hostname=extract_hostname,
            extract_jurisdiction=extract_jurisdiction,
            extract_namespace=extract_namespace,
            hostname_claim=hostname_claim,
            jurisdiction_claim=jurisdiction_claim,
            locked=locked,
            namespace_claim=namespace_claim,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             extract_hostname: Optional[bool] = None,
             extract_jurisdiction: Optional[bool] = None,
             extract_namespace: Optional[bool] = None,
             hostname_claim: Optional[str] = None,
             jurisdiction_claim: Optional[str] = None,
             locked: Optional[bool] = None,
             namespace_claim: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'extractHostname' in kwargs:
            extract_hostname = kwargs['extractHostname']
        if 'extractJurisdiction' in kwargs:
            extract_jurisdiction = kwargs['extractJurisdiction']
        if 'extractNamespace' in kwargs:
            extract_namespace = kwargs['extractNamespace']
        if 'hostnameClaim' in kwargs:
            hostname_claim = kwargs['hostnameClaim']
        if 'jurisdictionClaim' in kwargs:
            jurisdiction_claim = kwargs['jurisdictionClaim']
        if 'namespaceClaim' in kwargs:
            namespace_claim = kwargs['namespaceClaim']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if extract_hostname is not None:
            _setter("extract_hostname", extract_hostname)
        if extract_jurisdiction is not None:
            _setter("extract_jurisdiction", extract_jurisdiction)
        if extract_namespace is not None:
            _setter("extract_namespace", extract_namespace)
        if hostname_claim is not None:
            _setter("hostname_claim", hostname_claim)
        if jurisdiction_claim is not None:
            _setter("jurisdiction_claim", jurisdiction_claim)
        if locked is not None:
            _setter("locked", locked)
        if namespace_claim is not None:
            _setter("namespace_claim", namespace_claim)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="extractHostname")
    def extract_hostname(self) -> Optional[bool]:
        return pulumi.get(self, "extract_hostname")

    @property
    @pulumi.getter(name="extractJurisdiction")
    def extract_jurisdiction(self) -> Optional[bool]:
        return pulumi.get(self, "extract_jurisdiction")

    @property
    @pulumi.getter(name="extractNamespace")
    def extract_namespace(self) -> Optional[bool]:
        return pulumi.get(self, "extract_namespace")

    @property
    @pulumi.getter(name="hostnameClaim")
    def hostname_claim(self) -> Optional[str]:
        return pulumi.get(self, "hostname_claim")

    @property
    @pulumi.getter(name="jurisdictionClaim")
    def jurisdiction_claim(self) -> Optional[str]:
        return pulumi.get(self, "jurisdiction_claim")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="namespaceClaim")
    def namespace_claim(self) -> Optional[str]:
        return pulumi.get(self, "namespace_claim")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDeliveryReceiptResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDeliveryReceiptResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDenyAccessResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 reason: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDenyAccessResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            reason=reason,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             reason: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if reason is not None:
            _setter("reason", reason)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDenyDirectFailoverAccessResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDenyDirectFailoverAccessResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicCacheIdResult(dict):
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicCacheIdResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            elements=elements,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             elements: Optional[Sequence[str]] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if elements is not None:
            _setter("elements", elements)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicHeaderResult(dict):
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            elements=elements,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             elements: Optional[Sequence[str]] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if elements is not None:
            _setter("elements", elements)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDnsAsyncRefreshResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDnsAsyncRefreshResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            timeout=timeout,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             timeout: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if timeout is not None:
            _setter("timeout", timeout)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDnsPrefreshResult(dict):
    def __init__(__self__, *,
                 delay: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDnsPrefreshResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delay=delay,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            timeout=timeout,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delay: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             timeout: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if delay is not None:
            _setter("delay", delay)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if timeout is not None:
            _setter("timeout", timeout)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def delay(self) -> Optional[str]:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDowngradeProtocolResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDowngradeProtocolResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDownloadCompleteMarkerResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDownloadCompleteMarkerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDownloadNotificationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDownloadNotificationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDownstreamCacheResult(dict):
    def __init__(__self__, *,
                 allow_behavior: Optional[str] = None,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 send_headers: Optional[str] = None,
                 send_private: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDownstreamCacheResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_behavior=allow_behavior,
            behavior=behavior,
            locked=locked,
            send_headers=send_headers,
            send_private=send_private,
            template_uuid=template_uuid,
            ttl=ttl,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_behavior: Optional[str] = None,
             behavior: Optional[str] = None,
             locked: Optional[bool] = None,
             send_headers: Optional[str] = None,
             send_private: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             ttl: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowBehavior' in kwargs:
            allow_behavior = kwargs['allowBehavior']
        if 'sendHeaders' in kwargs:
            send_headers = kwargs['sendHeaders']
        if 'sendPrivate' in kwargs:
            send_private = kwargs['sendPrivate']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if allow_behavior is not None:
            _setter("allow_behavior", allow_behavior)
        if behavior is not None:
            _setter("behavior", behavior)
        if locked is not None:
            _setter("locked", locked)
        if send_headers is not None:
            _setter("send_headers", send_headers)
        if send_private is not None:
            _setter("send_private", send_private)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if ttl is not None:
            _setter("ttl", ttl)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowBehavior")
    def allow_behavior(self) -> Optional[str]:
        return pulumi.get(self, "allow_behavior")

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="sendHeaders")
    def send_headers(self) -> Optional[str]:
        return pulumi.get(self, "send_headers")

    @property
    @pulumi.getter(name="sendPrivate")
    def send_private(self) -> Optional[bool]:
        return pulumi.get(self, "send_private")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationOverrideResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 throughput: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationOverrideResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            throughput=throughput,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             throughput: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if throughput is not None:
            _setter("throughput", throughput)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[str]:
        return pulumi.get(self, "throughput")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDynamicWebContentResult(dict):
    def __init__(__self__, *,
                 image_compression: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 prefetch: Optional[bool] = None,
                 real_user_monitoring: Optional[bool] = None,
                 sure_route: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorDynamicWebContentResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            image_compression=image_compression,
            locked=locked,
            prefetch=prefetch,
            real_user_monitoring=real_user_monitoring,
            sure_route=sure_route,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             image_compression: Optional[bool] = None,
             locked: Optional[bool] = None,
             prefetch: Optional[bool] = None,
             real_user_monitoring: Optional[bool] = None,
             sure_route: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'imageCompression' in kwargs:
            image_compression = kwargs['imageCompression']
        if 'realUserMonitoring' in kwargs:
            real_user_monitoring = kwargs['realUserMonitoring']
        if 'sureRoute' in kwargs:
            sure_route = kwargs['sureRoute']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if image_compression is not None:
            _setter("image_compression", image_compression)
        if locked is not None:
            _setter("locked", locked)
        if prefetch is not None:
            _setter("prefetch", prefetch)
        if real_user_monitoring is not None:
            _setter("real_user_monitoring", real_user_monitoring)
        if sure_route is not None:
            _setter("sure_route", sure_route)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="imageCompression")
    def image_compression(self) -> Optional[bool]:
        return pulumi.get(self, "image_compression")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def prefetch(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch")

    @property
    @pulumi.getter(name="realUserMonitoring")
    def real_user_monitoring(self) -> Optional[bool]:
        return pulumi.get(self, "real_user_monitoring")

    @property
    @pulumi.getter(name="sureRoute")
    def sure_route(self) -> Optional[bool]:
        return pulumi.get(self, "sure_route")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEcmsBulkUploadResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEcmsBulkUploadResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatabaseResult(dict):
    def __init__(__self__, *,
                 database: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatabaseResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database=database,
            extract_location=extract_location,
            header_name=header_name,
            locked=locked,
            query_parameter_name=query_parameter_name,
            regex_pattern=regex_pattern,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database: Optional[str] = None,
             extract_location: Optional[str] = None,
             header_name: Optional[str] = None,
             locked: Optional[bool] = None,
             query_parameter_name: Optional[str] = None,
             regex_pattern: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'extractLocation' in kwargs:
            extract_location = kwargs['extractLocation']
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'queryParameterName' in kwargs:
            query_parameter_name = kwargs['queryParameterName']
        if 'regexPattern' in kwargs:
            regex_pattern = kwargs['regexPattern']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if database is not None:
            _setter("database", database)
        if extract_location is not None:
            _setter("extract_location", extract_location)
        if header_name is not None:
            _setter("header_name", header_name)
        if locked is not None:
            _setter("locked", locked)
        if query_parameter_name is not None:
            _setter("query_parameter_name", query_parameter_name)
        if regex_pattern is not None:
            _setter("regex_pattern", regex_pattern)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatasetResult(dict):
    def __init__(__self__, *,
                 dataset: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatasetResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataset=dataset,
            extract_location=extract_location,
            header_name=header_name,
            locked=locked,
            query_parameter_name=query_parameter_name,
            regex_pattern=regex_pattern,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataset: Optional[str] = None,
             extract_location: Optional[str] = None,
             header_name: Optional[str] = None,
             locked: Optional[bool] = None,
             query_parameter_name: Optional[str] = None,
             regex_pattern: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'extractLocation' in kwargs:
            extract_location = kwargs['extractLocation']
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'queryParameterName' in kwargs:
            query_parameter_name = kwargs['queryParameterName']
        if 'regexPattern' in kwargs:
            regex_pattern = kwargs['regexPattern']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if dataset is not None:
            _setter("dataset", dataset)
        if extract_location is not None:
            _setter("extract_location", extract_location)
        if header_name is not None:
            _setter("header_name", header_name)
        if locked is not None:
            _setter("locked", locked)
        if query_parameter_name is not None:
            _setter("query_parameter_name", query_parameter_name)
        if regex_pattern is not None:
            _setter("regex_pattern", regex_pattern)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[str]:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEcmsObjectKeyResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 regex: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEcmsObjectKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            regex=regex,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             regex: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if regex is not None:
            _setter("regex", regex)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeConnectResult(dict):
    def __init__(__self__, *,
                 aggregate_lines: Optional[str] = None,
                 aggregate_size: Optional[str] = None,
                 aggregate_time: Optional[str] = None,
                 api_connector: Optional[str] = None,
                 api_data_elements: Optional[Sequence[str]] = None,
                 destination_hostname: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 override_aggregate_settings: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEdgeConnectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregate_lines=aggregate_lines,
            aggregate_size=aggregate_size,
            aggregate_time=aggregate_time,
            api_connector=api_connector,
            api_data_elements=api_data_elements,
            destination_hostname=destination_hostname,
            destination_path=destination_path,
            enabled=enabled,
            locked=locked,
            override_aggregate_settings=override_aggregate_settings,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregate_lines: Optional[str] = None,
             aggregate_size: Optional[str] = None,
             aggregate_time: Optional[str] = None,
             api_connector: Optional[str] = None,
             api_data_elements: Optional[Sequence[str]] = None,
             destination_hostname: Optional[str] = None,
             destination_path: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             override_aggregate_settings: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregateLines' in kwargs:
            aggregate_lines = kwargs['aggregateLines']
        if 'aggregateSize' in kwargs:
            aggregate_size = kwargs['aggregateSize']
        if 'aggregateTime' in kwargs:
            aggregate_time = kwargs['aggregateTime']
        if 'apiConnector' in kwargs:
            api_connector = kwargs['apiConnector']
        if 'apiDataElements' in kwargs:
            api_data_elements = kwargs['apiDataElements']
        if 'destinationHostname' in kwargs:
            destination_hostname = kwargs['destinationHostname']
        if 'destinationPath' in kwargs:
            destination_path = kwargs['destinationPath']
        if 'overrideAggregateSettings' in kwargs:
            override_aggregate_settings = kwargs['overrideAggregateSettings']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if aggregate_lines is not None:
            _setter("aggregate_lines", aggregate_lines)
        if aggregate_size is not None:
            _setter("aggregate_size", aggregate_size)
        if aggregate_time is not None:
            _setter("aggregate_time", aggregate_time)
        if api_connector is not None:
            _setter("api_connector", api_connector)
        if api_data_elements is not None:
            _setter("api_data_elements", api_data_elements)
        if destination_hostname is not None:
            _setter("destination_hostname", destination_hostname)
        if destination_path is not None:
            _setter("destination_path", destination_path)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if override_aggregate_settings is not None:
            _setter("override_aggregate_settings", override_aggregate_settings)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="aggregateLines")
    def aggregate_lines(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_lines")

    @property
    @pulumi.getter(name="aggregateSize")
    def aggregate_size(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_size")

    @property
    @pulumi.getter(name="aggregateTime")
    def aggregate_time(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_time")

    @property
    @pulumi.getter(name="apiConnector")
    def api_connector(self) -> Optional[str]:
        return pulumi.get(self, "api_connector")

    @property
    @pulumi.getter(name="apiDataElements")
    def api_data_elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "api_data_elements")

    @property
    @pulumi.getter(name="destinationHostname")
    def destination_hostname(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="overrideAggregateSettings")
    def override_aggregate_settings(self) -> Optional[bool]:
        return pulumi.get(self, "override_aggregate_settings")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingAdvancedResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingAdvancedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            xml=xml,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             xml: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if description is not None:
            _setter("description", description)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if xml is not None:
            _setter("xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 description: Optional[str] = None,
                 enable_failover: Optional[bool] = None,
                 failover_rules: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult']] = None,
                 failover_title: Optional[str] = None,
                 hostname: Optional[str] = None,
                 ip: Optional[str] = None,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_name=cookie_name,
            description=description,
            enable_failover=enable_failover,
            failover_rules=failover_rules,
            failover_title=failover_title,
            hostname=hostname,
            ip=ip,
            locked=locked,
            origin_id=origin_id,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_name: Optional[str] = None,
             description: Optional[str] = None,
             enable_failover: Optional[bool] = None,
             failover_rules: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult']] = None,
             failover_title: Optional[str] = None,
             hostname: Optional[str] = None,
             ip: Optional[str] = None,
             locked: Optional[bool] = None,
             origin_id: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cookieName' in kwargs:
            cookie_name = kwargs['cookieName']
        if 'enableFailover' in kwargs:
            enable_failover = kwargs['enableFailover']
        if 'failoverRules' in kwargs:
            failover_rules = kwargs['failoverRules']
        if 'failoverTitle' in kwargs:
            failover_title = kwargs['failoverTitle']
        if 'originId' in kwargs:
            origin_id = kwargs['originId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cookie_name is not None:
            _setter("cookie_name", cookie_name)
        if description is not None:
            _setter("description", description)
        if enable_failover is not None:
            _setter("enable_failover", enable_failover)
        if failover_rules is not None:
            _setter("failover_rules", failover_rules)
        if failover_title is not None:
            _setter("failover_title", failover_title)
        if hostname is not None:
            _setter("hostname", hostname)
        if ip is not None:
            _setter("ip", ip)
        if locked is not None:
            _setter("locked", locked)
        if origin_id is not None:
            _setter("origin_id", origin_id)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableFailover")
    def enable_failover(self) -> Optional[bool]:
        return pulumi.get(self, "enable_failover")

    @property
    @pulumi.getter(name="failoverRules")
    def failover_rules(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult']]:
        return pulumi.get(self, "failover_rules")

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult(dict):
    def __init__(__self__, *,
                 absolute_path: Optional[bool] = None,
                 context_root: Optional[str] = None,
                 failover_hostname: Optional[str] = None,
                 modify_request: Optional[bool] = None,
                 override_hostname: Optional[bool] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            absolute_path=absolute_path,
            context_root=context_root,
            failover_hostname=failover_hostname,
            modify_request=modify_request,
            override_hostname=override_hostname,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             absolute_path: Optional[bool] = None,
             context_root: Optional[str] = None,
             failover_hostname: Optional[str] = None,
             modify_request: Optional[bool] = None,
             override_hostname: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'absolutePath' in kwargs:
            absolute_path = kwargs['absolutePath']
        if 'contextRoot' in kwargs:
            context_root = kwargs['contextRoot']
        if 'failoverHostname' in kwargs:
            failover_hostname = kwargs['failoverHostname']
        if 'modifyRequest' in kwargs:
            modify_request = kwargs['modifyRequest']
        if 'overrideHostname' in kwargs:
            override_hostname = kwargs['overrideHostname']

        if absolute_path is not None:
            _setter("absolute_path", absolute_path)
        if context_root is not None:
            _setter("context_root", context_root)
        if failover_hostname is not None:
            _setter("failover_hostname", failover_hostname)
        if modify_request is not None:
            _setter("modify_request", modify_request)
        if override_hostname is not None:
            _setter("override_hostname", override_hostname)

    @property
    @pulumi.getter(name="absolutePath")
    def absolute_path(self) -> Optional[bool]:
        return pulumi.get(self, "absolute_path")

    @property
    @pulumi.getter(name="contextRoot")
    def context_root(self) -> Optional[str]:
        return pulumi.get(self, "context_root")

    @property
    @pulumi.getter(name="failoverHostname")
    def failover_hostname(self) -> Optional[str]:
        return pulumi.get(self, "failover_hostname")

    @property
    @pulumi.getter(name="modifyRequest")
    def modify_request(self) -> Optional[bool]:
        return pulumi.get(self, "modify_request")

    @property
    @pulumi.getter(name="overrideHostname")
    def override_hostname(self) -> Optional[bool]:
        return pulumi.get(self, "override_hostname")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingOriginResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 description: Optional[str] = None,
                 enable_session_persistence: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_persistence_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingOriginResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_name=cookie_name,
            description=description,
            enable_session_persistence=enable_session_persistence,
            hostname=hostname,
            id=id,
            locked=locked,
            session_persistence_title=session_persistence_title,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_name: Optional[str] = None,
             description: Optional[str] = None,
             enable_session_persistence: Optional[bool] = None,
             hostname: Optional[str] = None,
             id: Optional[str] = None,
             locked: Optional[bool] = None,
             session_persistence_title: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cookieName' in kwargs:
            cookie_name = kwargs['cookieName']
        if 'enableSessionPersistence' in kwargs:
            enable_session_persistence = kwargs['enableSessionPersistence']
        if 'sessionPersistenceTitle' in kwargs:
            session_persistence_title = kwargs['sessionPersistenceTitle']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cookie_name is not None:
            _setter("cookie_name", cookie_name)
        if description is not None:
            _setter("description", description)
        if enable_session_persistence is not None:
            _setter("enable_session_persistence", enable_session_persistence)
        if hostname is not None:
            _setter("hostname", hostname)
        if id is not None:
            _setter("id", id)
        if locked is not None:
            _setter("locked", locked)
        if session_persistence_title is not None:
            _setter("session_persistence_title", session_persistence_title)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableSessionPersistence")
    def enable_session_persistence(self) -> Optional[bool]:
        return pulumi.get(self, "enable_session_persistence")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="sessionPersistenceTitle")
    def session_persistence_title(self) -> Optional[str]:
        return pulumi.get(self, "session_persistence_title")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeOriginAuthorizationResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 domain: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEdgeOriginAuthorizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_name=cookie_name,
            domain=domain,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_name: Optional[str] = None,
             domain: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cookieName' in kwargs:
            cookie_name = kwargs['cookieName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cookie_name is not None:
            _setter("cookie_name", cookie_name)
        if domain is not None:
            _setter("domain", domain)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloudlet_policy=cloudlet_policy,
            cloudlet_shared_policy=cloudlet_shared_policy,
            enabled=enabled,
            is_shared_policy=is_shared_policy,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorCloudletPolicyResult'] = None,
             cloudlet_shared_policy: Optional[int] = None,
             enabled: Optional[bool] = None,
             is_shared_policy: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'cloudletSharedPolicy' in kwargs:
            cloudlet_shared_policy = kwargs['cloudletSharedPolicy']
        if 'isSharedPolicy' in kwargs:
            is_shared_policy = kwargs['isSharedPolicy']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            _setter("cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if is_shared_policy is not None:
            _setter("is_shared_policy", is_shared_policy)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeScapeResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEdgeScapeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeSideIncludesResult(dict):
    def __init__(__self__, *,
                 detect_injection: Optional[bool] = None,
                 enable_via_http: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 i18n_charsets: Optional[Sequence[str]] = None,
                 i18n_status: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 pass_client_ip: Optional[bool] = None,
                 pass_set_cookie: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEdgeSideIncludesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            detect_injection=detect_injection,
            enable_via_http=enable_via_http,
            enabled=enabled,
            i18n_charsets=i18n_charsets,
            i18n_status=i18n_status,
            locked=locked,
            pass_client_ip=pass_client_ip,
            pass_set_cookie=pass_set_cookie,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             detect_injection: Optional[bool] = None,
             enable_via_http: Optional[bool] = None,
             enabled: Optional[bool] = None,
             i18n_charsets: Optional[Sequence[str]] = None,
             i18n_status: Optional[bool] = None,
             locked: Optional[bool] = None,
             pass_client_ip: Optional[bool] = None,
             pass_set_cookie: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'detectInjection' in kwargs:
            detect_injection = kwargs['detectInjection']
        if 'enableViaHttp' in kwargs:
            enable_via_http = kwargs['enableViaHttp']
        if 'i18nCharsets' in kwargs:
            i18n_charsets = kwargs['i18nCharsets']
        if 'i18nStatus' in kwargs:
            i18n_status = kwargs['i18nStatus']
        if 'passClientIp' in kwargs:
            pass_client_ip = kwargs['passClientIp']
        if 'passSetCookie' in kwargs:
            pass_set_cookie = kwargs['passSetCookie']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if detect_injection is not None:
            _setter("detect_injection", detect_injection)
        if enable_via_http is not None:
            _setter("enable_via_http", enable_via_http)
        if enabled is not None:
            _setter("enabled", enabled)
        if i18n_charsets is not None:
            _setter("i18n_charsets", i18n_charsets)
        if i18n_status is not None:
            _setter("i18n_status", i18n_status)
        if locked is not None:
            _setter("locked", locked)
        if pass_client_ip is not None:
            _setter("pass_client_ip", pass_client_ip)
        if pass_set_cookie is not None:
            _setter("pass_set_cookie", pass_set_cookie)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="detectInjection")
    def detect_injection(self) -> Optional[bool]:
        return pulumi.get(self, "detect_injection")

    @property
    @pulumi.getter(name="enableViaHttp")
    def enable_via_http(self) -> Optional[bool]:
        return pulumi.get(self, "enable_via_http")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="i18nCharsets")
    def i18n_charsets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "i18n_charsets")

    @property
    @pulumi.getter(name="i18nStatus")
    def i18n_status(self) -> Optional[bool]:
        return pulumi.get(self, "i18n_status")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="passClientIp")
    def pass_client_ip(self) -> Optional[bool]:
        return pulumi.get(self, "pass_client_ip")

    @property
    @pulumi.getter(name="passSetCookie")
    def pass_set_cookie(self) -> Optional[bool]:
        return pulumi.get(self, "pass_set_cookie")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeWorkerResult(dict):
    def __init__(__self__, *,
                 create_edge_worker: Optional[str] = None,
                 edge_worker_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 resource_tier: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEdgeWorkerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create_edge_worker=create_edge_worker,
            edge_worker_id=edge_worker_id,
            enabled=enabled,
            locked=locked,
            resource_tier=resource_tier,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create_edge_worker: Optional[str] = None,
             edge_worker_id: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             resource_tier: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createEdgeWorker' in kwargs:
            create_edge_worker = kwargs['createEdgeWorker']
        if 'edgeWorkerId' in kwargs:
            edge_worker_id = kwargs['edgeWorkerId']
        if 'resourceTier' in kwargs:
            resource_tier = kwargs['resourceTier']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if create_edge_worker is not None:
            _setter("create_edge_worker", create_edge_worker)
        if edge_worker_id is not None:
            _setter("edge_worker_id", edge_worker_id)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if resource_tier is not None:
            _setter("resource_tier", resource_tier)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="createEdgeWorker")
    def create_edge_worker(self) -> Optional[str]:
        return pulumi.get(self, "create_edge_worker")

    @property
    @pulumi.getter(name="edgeWorkerId")
    def edge_worker_id(self) -> Optional[str]:
        return pulumi.get(self, "edge_worker_id")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="resourceTier")
    def resource_tier(self) -> Optional[str]:
        return pulumi.get(self, "resource_tier")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedAkamaiProtocolResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedAkamaiProtocolResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display=display,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if display is not None:
            _setter("display", display)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedProxyDetectionResult(dict):
    def __init__(__self__, *,
                 anonymous_vpn: Optional[str] = None,
                 best_practice_action: Optional[str] = None,
                 best_practice_redirecturl: Optional[str] = None,
                 detect_anonymous_vpn: Optional[bool] = None,
                 detect_anonymous_vpn_action: Optional[str] = None,
                 detect_anonymous_vpn_redirecturl: Optional[str] = None,
                 detect_hosting_provider: Optional[bool] = None,
                 detect_hosting_provider_action: Optional[str] = None,
                 detect_hosting_provider_redirecturl: Optional[str] = None,
                 detect_public_proxy: Optional[bool] = None,
                 detect_public_proxy_action: Optional[str] = None,
                 detect_public_proxy_redirecturl: Optional[str] = None,
                 detect_residential_proxy: Optional[bool] = None,
                 detect_residential_proxy_action: Optional[str] = None,
                 detect_residential_proxy_redirecturl: Optional[str] = None,
                 detect_smart_dns_proxy: Optional[bool] = None,
                 detect_smart_dns_proxy_action: Optional[str] = None,
                 detect_smart_dns_proxy_redirecturl: Optional[str] = None,
                 detect_tor_exit_node: Optional[bool] = None,
                 detect_tor_exit_node_action: Optional[str] = None,
                 detect_tor_exit_node_redirecturl: Optional[str] = None,
                 detect_vpn_data_center: Optional[bool] = None,
                 detect_vpn_data_center_action: Optional[str] = None,
                 detect_vpn_data_center_redirecturl: Optional[str] = None,
                 enable_configuration_mode: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 forward_header_enrichment: Optional[bool] = None,
                 hosting_provider: Optional[str] = None,
                 locked: Optional[bool] = None,
                 public_proxy: Optional[str] = None,
                 residential_proxy: Optional[str] = None,
                 smart_dns_proxy: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tor_exit_node: Optional[str] = None,
                 uuid: Optional[str] = None,
                 vpn_data_center: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedProxyDetectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            anonymous_vpn=anonymous_vpn,
            best_practice_action=best_practice_action,
            best_practice_redirecturl=best_practice_redirecturl,
            detect_anonymous_vpn=detect_anonymous_vpn,
            detect_anonymous_vpn_action=detect_anonymous_vpn_action,
            detect_anonymous_vpn_redirecturl=detect_anonymous_vpn_redirecturl,
            detect_hosting_provider=detect_hosting_provider,
            detect_hosting_provider_action=detect_hosting_provider_action,
            detect_hosting_provider_redirecturl=detect_hosting_provider_redirecturl,
            detect_public_proxy=detect_public_proxy,
            detect_public_proxy_action=detect_public_proxy_action,
            detect_public_proxy_redirecturl=detect_public_proxy_redirecturl,
            detect_residential_proxy=detect_residential_proxy,
            detect_residential_proxy_action=detect_residential_proxy_action,
            detect_residential_proxy_redirecturl=detect_residential_proxy_redirecturl,
            detect_smart_dns_proxy=detect_smart_dns_proxy,
            detect_smart_dns_proxy_action=detect_smart_dns_proxy_action,
            detect_smart_dns_proxy_redirecturl=detect_smart_dns_proxy_redirecturl,
            detect_tor_exit_node=detect_tor_exit_node,
            detect_tor_exit_node_action=detect_tor_exit_node_action,
            detect_tor_exit_node_redirecturl=detect_tor_exit_node_redirecturl,
            detect_vpn_data_center=detect_vpn_data_center,
            detect_vpn_data_center_action=detect_vpn_data_center_action,
            detect_vpn_data_center_redirecturl=detect_vpn_data_center_redirecturl,
            enable_configuration_mode=enable_configuration_mode,
            enabled=enabled,
            forward_header_enrichment=forward_header_enrichment,
            hosting_provider=hosting_provider,
            locked=locked,
            public_proxy=public_proxy,
            residential_proxy=residential_proxy,
            smart_dns_proxy=smart_dns_proxy,
            template_uuid=template_uuid,
            tor_exit_node=tor_exit_node,
            uuid=uuid,
            vpn_data_center=vpn_data_center,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             anonymous_vpn: Optional[str] = None,
             best_practice_action: Optional[str] = None,
             best_practice_redirecturl: Optional[str] = None,
             detect_anonymous_vpn: Optional[bool] = None,
             detect_anonymous_vpn_action: Optional[str] = None,
             detect_anonymous_vpn_redirecturl: Optional[str] = None,
             detect_hosting_provider: Optional[bool] = None,
             detect_hosting_provider_action: Optional[str] = None,
             detect_hosting_provider_redirecturl: Optional[str] = None,
             detect_public_proxy: Optional[bool] = None,
             detect_public_proxy_action: Optional[str] = None,
             detect_public_proxy_redirecturl: Optional[str] = None,
             detect_residential_proxy: Optional[bool] = None,
             detect_residential_proxy_action: Optional[str] = None,
             detect_residential_proxy_redirecturl: Optional[str] = None,
             detect_smart_dns_proxy: Optional[bool] = None,
             detect_smart_dns_proxy_action: Optional[str] = None,
             detect_smart_dns_proxy_redirecturl: Optional[str] = None,
             detect_tor_exit_node: Optional[bool] = None,
             detect_tor_exit_node_action: Optional[str] = None,
             detect_tor_exit_node_redirecturl: Optional[str] = None,
             detect_vpn_data_center: Optional[bool] = None,
             detect_vpn_data_center_action: Optional[str] = None,
             detect_vpn_data_center_redirecturl: Optional[str] = None,
             enable_configuration_mode: Optional[str] = None,
             enabled: Optional[bool] = None,
             forward_header_enrichment: Optional[bool] = None,
             hosting_provider: Optional[str] = None,
             locked: Optional[bool] = None,
             public_proxy: Optional[str] = None,
             residential_proxy: Optional[str] = None,
             smart_dns_proxy: Optional[str] = None,
             template_uuid: Optional[str] = None,
             tor_exit_node: Optional[str] = None,
             uuid: Optional[str] = None,
             vpn_data_center: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'anonymousVpn' in kwargs:
            anonymous_vpn = kwargs['anonymousVpn']
        if 'bestPracticeAction' in kwargs:
            best_practice_action = kwargs['bestPracticeAction']
        if 'bestPracticeRedirecturl' in kwargs:
            best_practice_redirecturl = kwargs['bestPracticeRedirecturl']
        if 'detectAnonymousVpn' in kwargs:
            detect_anonymous_vpn = kwargs['detectAnonymousVpn']
        if 'detectAnonymousVpnAction' in kwargs:
            detect_anonymous_vpn_action = kwargs['detectAnonymousVpnAction']
        if 'detectAnonymousVpnRedirecturl' in kwargs:
            detect_anonymous_vpn_redirecturl = kwargs['detectAnonymousVpnRedirecturl']
        if 'detectHostingProvider' in kwargs:
            detect_hosting_provider = kwargs['detectHostingProvider']
        if 'detectHostingProviderAction' in kwargs:
            detect_hosting_provider_action = kwargs['detectHostingProviderAction']
        if 'detectHostingProviderRedirecturl' in kwargs:
            detect_hosting_provider_redirecturl = kwargs['detectHostingProviderRedirecturl']
        if 'detectPublicProxy' in kwargs:
            detect_public_proxy = kwargs['detectPublicProxy']
        if 'detectPublicProxyAction' in kwargs:
            detect_public_proxy_action = kwargs['detectPublicProxyAction']
        if 'detectPublicProxyRedirecturl' in kwargs:
            detect_public_proxy_redirecturl = kwargs['detectPublicProxyRedirecturl']
        if 'detectResidentialProxy' in kwargs:
            detect_residential_proxy = kwargs['detectResidentialProxy']
        if 'detectResidentialProxyAction' in kwargs:
            detect_residential_proxy_action = kwargs['detectResidentialProxyAction']
        if 'detectResidentialProxyRedirecturl' in kwargs:
            detect_residential_proxy_redirecturl = kwargs['detectResidentialProxyRedirecturl']
        if 'detectSmartDnsProxy' in kwargs:
            detect_smart_dns_proxy = kwargs['detectSmartDnsProxy']
        if 'detectSmartDnsProxyAction' in kwargs:
            detect_smart_dns_proxy_action = kwargs['detectSmartDnsProxyAction']
        if 'detectSmartDnsProxyRedirecturl' in kwargs:
            detect_smart_dns_proxy_redirecturl = kwargs['detectSmartDnsProxyRedirecturl']
        if 'detectTorExitNode' in kwargs:
            detect_tor_exit_node = kwargs['detectTorExitNode']
        if 'detectTorExitNodeAction' in kwargs:
            detect_tor_exit_node_action = kwargs['detectTorExitNodeAction']
        if 'detectTorExitNodeRedirecturl' in kwargs:
            detect_tor_exit_node_redirecturl = kwargs['detectTorExitNodeRedirecturl']
        if 'detectVpnDataCenter' in kwargs:
            detect_vpn_data_center = kwargs['detectVpnDataCenter']
        if 'detectVpnDataCenterAction' in kwargs:
            detect_vpn_data_center_action = kwargs['detectVpnDataCenterAction']
        if 'detectVpnDataCenterRedirecturl' in kwargs:
            detect_vpn_data_center_redirecturl = kwargs['detectVpnDataCenterRedirecturl']
        if 'enableConfigurationMode' in kwargs:
            enable_configuration_mode = kwargs['enableConfigurationMode']
        if 'forwardHeaderEnrichment' in kwargs:
            forward_header_enrichment = kwargs['forwardHeaderEnrichment']
        if 'hostingProvider' in kwargs:
            hosting_provider = kwargs['hostingProvider']
        if 'publicProxy' in kwargs:
            public_proxy = kwargs['publicProxy']
        if 'residentialProxy' in kwargs:
            residential_proxy = kwargs['residentialProxy']
        if 'smartDnsProxy' in kwargs:
            smart_dns_proxy = kwargs['smartDnsProxy']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'torExitNode' in kwargs:
            tor_exit_node = kwargs['torExitNode']
        if 'vpnDataCenter' in kwargs:
            vpn_data_center = kwargs['vpnDataCenter']

        if anonymous_vpn is not None:
            _setter("anonymous_vpn", anonymous_vpn)
        if best_practice_action is not None:
            _setter("best_practice_action", best_practice_action)
        if best_practice_redirecturl is not None:
            _setter("best_practice_redirecturl", best_practice_redirecturl)
        if detect_anonymous_vpn is not None:
            _setter("detect_anonymous_vpn", detect_anonymous_vpn)
        if detect_anonymous_vpn_action is not None:
            _setter("detect_anonymous_vpn_action", detect_anonymous_vpn_action)
        if detect_anonymous_vpn_redirecturl is not None:
            _setter("detect_anonymous_vpn_redirecturl", detect_anonymous_vpn_redirecturl)
        if detect_hosting_provider is not None:
            _setter("detect_hosting_provider", detect_hosting_provider)
        if detect_hosting_provider_action is not None:
            _setter("detect_hosting_provider_action", detect_hosting_provider_action)
        if detect_hosting_provider_redirecturl is not None:
            _setter("detect_hosting_provider_redirecturl", detect_hosting_provider_redirecturl)
        if detect_public_proxy is not None:
            _setter("detect_public_proxy", detect_public_proxy)
        if detect_public_proxy_action is not None:
            _setter("detect_public_proxy_action", detect_public_proxy_action)
        if detect_public_proxy_redirecturl is not None:
            _setter("detect_public_proxy_redirecturl", detect_public_proxy_redirecturl)
        if detect_residential_proxy is not None:
            _setter("detect_residential_proxy", detect_residential_proxy)
        if detect_residential_proxy_action is not None:
            _setter("detect_residential_proxy_action", detect_residential_proxy_action)
        if detect_residential_proxy_redirecturl is not None:
            _setter("detect_residential_proxy_redirecturl", detect_residential_proxy_redirecturl)
        if detect_smart_dns_proxy is not None:
            _setter("detect_smart_dns_proxy", detect_smart_dns_proxy)
        if detect_smart_dns_proxy_action is not None:
            _setter("detect_smart_dns_proxy_action", detect_smart_dns_proxy_action)
        if detect_smart_dns_proxy_redirecturl is not None:
            _setter("detect_smart_dns_proxy_redirecturl", detect_smart_dns_proxy_redirecturl)
        if detect_tor_exit_node is not None:
            _setter("detect_tor_exit_node", detect_tor_exit_node)
        if detect_tor_exit_node_action is not None:
            _setter("detect_tor_exit_node_action", detect_tor_exit_node_action)
        if detect_tor_exit_node_redirecturl is not None:
            _setter("detect_tor_exit_node_redirecturl", detect_tor_exit_node_redirecturl)
        if detect_vpn_data_center is not None:
            _setter("detect_vpn_data_center", detect_vpn_data_center)
        if detect_vpn_data_center_action is not None:
            _setter("detect_vpn_data_center_action", detect_vpn_data_center_action)
        if detect_vpn_data_center_redirecturl is not None:
            _setter("detect_vpn_data_center_redirecturl", detect_vpn_data_center_redirecturl)
        if enable_configuration_mode is not None:
            _setter("enable_configuration_mode", enable_configuration_mode)
        if enabled is not None:
            _setter("enabled", enabled)
        if forward_header_enrichment is not None:
            _setter("forward_header_enrichment", forward_header_enrichment)
        if hosting_provider is not None:
            _setter("hosting_provider", hosting_provider)
        if locked is not None:
            _setter("locked", locked)
        if public_proxy is not None:
            _setter("public_proxy", public_proxy)
        if residential_proxy is not None:
            _setter("residential_proxy", residential_proxy)
        if smart_dns_proxy is not None:
            _setter("smart_dns_proxy", smart_dns_proxy)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if tor_exit_node is not None:
            _setter("tor_exit_node", tor_exit_node)
        if uuid is not None:
            _setter("uuid", uuid)
        if vpn_data_center is not None:
            _setter("vpn_data_center", vpn_data_center)

    @property
    @pulumi.getter(name="anonymousVpn")
    def anonymous_vpn(self) -> Optional[str]:
        return pulumi.get(self, "anonymous_vpn")

    @property
    @pulumi.getter(name="bestPracticeAction")
    def best_practice_action(self) -> Optional[str]:
        return pulumi.get(self, "best_practice_action")

    @property
    @pulumi.getter(name="bestPracticeRedirecturl")
    def best_practice_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "best_practice_redirecturl")

    @property
    @pulumi.getter(name="detectAnonymousVpn")
    def detect_anonymous_vpn(self) -> Optional[bool]:
        return pulumi.get(self, "detect_anonymous_vpn")

    @property
    @pulumi.getter(name="detectAnonymousVpnAction")
    def detect_anonymous_vpn_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_anonymous_vpn_action")

    @property
    @pulumi.getter(name="detectAnonymousVpnRedirecturl")
    def detect_anonymous_vpn_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_anonymous_vpn_redirecturl")

    @property
    @pulumi.getter(name="detectHostingProvider")
    def detect_hosting_provider(self) -> Optional[bool]:
        return pulumi.get(self, "detect_hosting_provider")

    @property
    @pulumi.getter(name="detectHostingProviderAction")
    def detect_hosting_provider_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_hosting_provider_action")

    @property
    @pulumi.getter(name="detectHostingProviderRedirecturl")
    def detect_hosting_provider_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_hosting_provider_redirecturl")

    @property
    @pulumi.getter(name="detectPublicProxy")
    def detect_public_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_public_proxy")

    @property
    @pulumi.getter(name="detectPublicProxyAction")
    def detect_public_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_public_proxy_action")

    @property
    @pulumi.getter(name="detectPublicProxyRedirecturl")
    def detect_public_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_public_proxy_redirecturl")

    @property
    @pulumi.getter(name="detectResidentialProxy")
    def detect_residential_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_residential_proxy")

    @property
    @pulumi.getter(name="detectResidentialProxyAction")
    def detect_residential_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_residential_proxy_action")

    @property
    @pulumi.getter(name="detectResidentialProxyRedirecturl")
    def detect_residential_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_residential_proxy_redirecturl")

    @property
    @pulumi.getter(name="detectSmartDnsProxy")
    def detect_smart_dns_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_smart_dns_proxy")

    @property
    @pulumi.getter(name="detectSmartDnsProxyAction")
    def detect_smart_dns_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_smart_dns_proxy_action")

    @property
    @pulumi.getter(name="detectSmartDnsProxyRedirecturl")
    def detect_smart_dns_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_smart_dns_proxy_redirecturl")

    @property
    @pulumi.getter(name="detectTorExitNode")
    def detect_tor_exit_node(self) -> Optional[bool]:
        return pulumi.get(self, "detect_tor_exit_node")

    @property
    @pulumi.getter(name="detectTorExitNodeAction")
    def detect_tor_exit_node_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_tor_exit_node_action")

    @property
    @pulumi.getter(name="detectTorExitNodeRedirecturl")
    def detect_tor_exit_node_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_tor_exit_node_redirecturl")

    @property
    @pulumi.getter(name="detectVpnDataCenter")
    def detect_vpn_data_center(self) -> Optional[bool]:
        return pulumi.get(self, "detect_vpn_data_center")

    @property
    @pulumi.getter(name="detectVpnDataCenterAction")
    def detect_vpn_data_center_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_vpn_data_center_action")

    @property
    @pulumi.getter(name="detectVpnDataCenterRedirecturl")
    def detect_vpn_data_center_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_vpn_data_center_redirecturl")

    @property
    @pulumi.getter(name="enableConfigurationMode")
    def enable_configuration_mode(self) -> Optional[str]:
        return pulumi.get(self, "enable_configuration_mode")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forwardHeaderEnrichment")
    def forward_header_enrichment(self) -> Optional[bool]:
        return pulumi.get(self, "forward_header_enrichment")

    @property
    @pulumi.getter(name="hostingProvider")
    def hosting_provider(self) -> Optional[str]:
        return pulumi.get(self, "hosting_provider")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="publicProxy")
    def public_proxy(self) -> Optional[str]:
        return pulumi.get(self, "public_proxy")

    @property
    @pulumi.getter(name="residentialProxy")
    def residential_proxy(self) -> Optional[str]:
        return pulumi.get(self, "residential_proxy")

    @property
    @pulumi.getter(name="smartDnsProxy")
    def smart_dns_proxy(self) -> Optional[str]:
        return pulumi.get(self, "smart_dns_proxy")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="torExitNode")
    def tor_exit_node(self) -> Optional[str]:
        return pulumi.get(self, "tor_exit_node")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="vpnDataCenter")
    def vpn_data_center(self) -> Optional[str]:
        return pulumi.get(self, "vpn_data_center")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEpdForwardHeaderEnrichmentResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorEpdForwardHeaderEnrichmentResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFailActionResult(dict):
    def __init__(__self__, *,
                 action_type: Optional[str] = None,
                 allow_fcm_parent_override: Optional[bool] = None,
                 cex_custom_path: Optional[bool] = None,
                 cex_hostname: Optional[str] = None,
                 cex_path: Optional[str] = None,
                 content_custom_path: Optional[bool] = None,
                 content_hostname: Optional[str] = None,
                 content_path: Optional[str] = None,
                 cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeResult'] = None,
                 dynamic_custom_path: Optional[bool] = None,
                 dynamic_method: Optional[str] = None,
                 dynamic_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modify_protocol: Optional[bool] = None,
                 net_storage_hostname: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionNetStorageHostnameResult'] = None,
                 net_storage_path: Optional[str] = None,
                 preserve_query_string: Optional[bool] = None,
                 protocol: Optional[str] = None,
                 redirect_custom_path: Optional[bool] = None,
                 redirect_hostname: Optional[str] = None,
                 redirect_hostname_type: Optional[str] = None,
                 redirect_method: Optional[int] = None,
                 redirect_path: Optional[str] = None,
                 saas_cname_enabled: Optional[bool] = None,
                 saas_cname_level: Optional[int] = None,
                 saas_cookie: Optional[str] = None,
                 saas_query_string: Optional[str] = None,
                 saas_regex: Optional[str] = None,
                 saas_replace: Optional[str] = None,
                 saas_suffix: Optional[str] = None,
                 saas_type: Optional[str] = None,
                 status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorFailActionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_type=action_type,
            allow_fcm_parent_override=allow_fcm_parent_override,
            cex_custom_path=cex_custom_path,
            cex_hostname=cex_hostname,
            cex_path=cex_path,
            content_custom_path=content_custom_path,
            content_hostname=content_hostname,
            content_path=content_path,
            cp_code=cp_code,
            dynamic_custom_path=dynamic_custom_path,
            dynamic_method=dynamic_method,
            dynamic_path=dynamic_path,
            enabled=enabled,
            locked=locked,
            modify_protocol=modify_protocol,
            net_storage_hostname=net_storage_hostname,
            net_storage_path=net_storage_path,
            preserve_query_string=preserve_query_string,
            protocol=protocol,
            redirect_custom_path=redirect_custom_path,
            redirect_hostname=redirect_hostname,
            redirect_hostname_type=redirect_hostname_type,
            redirect_method=redirect_method,
            redirect_path=redirect_path,
            saas_cname_enabled=saas_cname_enabled,
            saas_cname_level=saas_cname_level,
            saas_cookie=saas_cookie,
            saas_query_string=saas_query_string,
            saas_regex=saas_regex,
            saas_replace=saas_replace,
            saas_suffix=saas_suffix,
            saas_type=saas_type,
            status_code=status_code,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_type: Optional[str] = None,
             allow_fcm_parent_override: Optional[bool] = None,
             cex_custom_path: Optional[bool] = None,
             cex_hostname: Optional[str] = None,
             cex_path: Optional[str] = None,
             content_custom_path: Optional[bool] = None,
             content_hostname: Optional[str] = None,
             content_path: Optional[str] = None,
             cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeResult'] = None,
             dynamic_custom_path: Optional[bool] = None,
             dynamic_method: Optional[str] = None,
             dynamic_path: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             modify_protocol: Optional[bool] = None,
             net_storage_hostname: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionNetStorageHostnameResult'] = None,
             net_storage_path: Optional[str] = None,
             preserve_query_string: Optional[bool] = None,
             protocol: Optional[str] = None,
             redirect_custom_path: Optional[bool] = None,
             redirect_hostname: Optional[str] = None,
             redirect_hostname_type: Optional[str] = None,
             redirect_method: Optional[int] = None,
             redirect_path: Optional[str] = None,
             saas_cname_enabled: Optional[bool] = None,
             saas_cname_level: Optional[int] = None,
             saas_cookie: Optional[str] = None,
             saas_query_string: Optional[str] = None,
             saas_regex: Optional[str] = None,
             saas_replace: Optional[str] = None,
             saas_suffix: Optional[str] = None,
             saas_type: Optional[str] = None,
             status_code: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'actionType' in kwargs:
            action_type = kwargs['actionType']
        if 'allowFcmParentOverride' in kwargs:
            allow_fcm_parent_override = kwargs['allowFcmParentOverride']
        if 'cexCustomPath' in kwargs:
            cex_custom_path = kwargs['cexCustomPath']
        if 'cexHostname' in kwargs:
            cex_hostname = kwargs['cexHostname']
        if 'cexPath' in kwargs:
            cex_path = kwargs['cexPath']
        if 'contentCustomPath' in kwargs:
            content_custom_path = kwargs['contentCustomPath']
        if 'contentHostname' in kwargs:
            content_hostname = kwargs['contentHostname']
        if 'contentPath' in kwargs:
            content_path = kwargs['contentPath']
        if 'cpCode' in kwargs:
            cp_code = kwargs['cpCode']
        if 'dynamicCustomPath' in kwargs:
            dynamic_custom_path = kwargs['dynamicCustomPath']
        if 'dynamicMethod' in kwargs:
            dynamic_method = kwargs['dynamicMethod']
        if 'dynamicPath' in kwargs:
            dynamic_path = kwargs['dynamicPath']
        if 'modifyProtocol' in kwargs:
            modify_protocol = kwargs['modifyProtocol']
        if 'netStorageHostname' in kwargs:
            net_storage_hostname = kwargs['netStorageHostname']
        if 'netStoragePath' in kwargs:
            net_storage_path = kwargs['netStoragePath']
        if 'preserveQueryString' in kwargs:
            preserve_query_string = kwargs['preserveQueryString']
        if 'redirectCustomPath' in kwargs:
            redirect_custom_path = kwargs['redirectCustomPath']
        if 'redirectHostname' in kwargs:
            redirect_hostname = kwargs['redirectHostname']
        if 'redirectHostnameType' in kwargs:
            redirect_hostname_type = kwargs['redirectHostnameType']
        if 'redirectMethod' in kwargs:
            redirect_method = kwargs['redirectMethod']
        if 'redirectPath' in kwargs:
            redirect_path = kwargs['redirectPath']
        if 'saasCnameEnabled' in kwargs:
            saas_cname_enabled = kwargs['saasCnameEnabled']
        if 'saasCnameLevel' in kwargs:
            saas_cname_level = kwargs['saasCnameLevel']
        if 'saasCookie' in kwargs:
            saas_cookie = kwargs['saasCookie']
        if 'saasQueryString' in kwargs:
            saas_query_string = kwargs['saasQueryString']
        if 'saasRegex' in kwargs:
            saas_regex = kwargs['saasRegex']
        if 'saasReplace' in kwargs:
            saas_replace = kwargs['saasReplace']
        if 'saasSuffix' in kwargs:
            saas_suffix = kwargs['saasSuffix']
        if 'saasType' in kwargs:
            saas_type = kwargs['saasType']
        if 'statusCode' in kwargs:
            status_code = kwargs['statusCode']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if action_type is not None:
            _setter("action_type", action_type)
        if allow_fcm_parent_override is not None:
            _setter("allow_fcm_parent_override", allow_fcm_parent_override)
        if cex_custom_path is not None:
            _setter("cex_custom_path", cex_custom_path)
        if cex_hostname is not None:
            _setter("cex_hostname", cex_hostname)
        if cex_path is not None:
            _setter("cex_path", cex_path)
        if content_custom_path is not None:
            _setter("content_custom_path", content_custom_path)
        if content_hostname is not None:
            _setter("content_hostname", content_hostname)
        if content_path is not None:
            _setter("content_path", content_path)
        if cp_code is not None:
            _setter("cp_code", cp_code)
        if dynamic_custom_path is not None:
            _setter("dynamic_custom_path", dynamic_custom_path)
        if dynamic_method is not None:
            _setter("dynamic_method", dynamic_method)
        if dynamic_path is not None:
            _setter("dynamic_path", dynamic_path)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if modify_protocol is not None:
            _setter("modify_protocol", modify_protocol)
        if net_storage_hostname is not None:
            _setter("net_storage_hostname", net_storage_hostname)
        if net_storage_path is not None:
            _setter("net_storage_path", net_storage_path)
        if preserve_query_string is not None:
            _setter("preserve_query_string", preserve_query_string)
        if protocol is not None:
            _setter("protocol", protocol)
        if redirect_custom_path is not None:
            _setter("redirect_custom_path", redirect_custom_path)
        if redirect_hostname is not None:
            _setter("redirect_hostname", redirect_hostname)
        if redirect_hostname_type is not None:
            _setter("redirect_hostname_type", redirect_hostname_type)
        if redirect_method is not None:
            _setter("redirect_method", redirect_method)
        if redirect_path is not None:
            _setter("redirect_path", redirect_path)
        if saas_cname_enabled is not None:
            _setter("saas_cname_enabled", saas_cname_enabled)
        if saas_cname_level is not None:
            _setter("saas_cname_level", saas_cname_level)
        if saas_cookie is not None:
            _setter("saas_cookie", saas_cookie)
        if saas_query_string is not None:
            _setter("saas_query_string", saas_query_string)
        if saas_regex is not None:
            _setter("saas_regex", saas_regex)
        if saas_replace is not None:
            _setter("saas_replace", saas_replace)
        if saas_suffix is not None:
            _setter("saas_suffix", saas_suffix)
        if saas_type is not None:
            _setter("saas_type", saas_type)
        if status_code is not None:
            _setter("status_code", status_code)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="allowFcmParentOverride")
    def allow_fcm_parent_override(self) -> Optional[bool]:
        return pulumi.get(self, "allow_fcm_parent_override")

    @property
    @pulumi.getter(name="cexCustomPath")
    def cex_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "cex_custom_path")

    @property
    @pulumi.getter(name="cexHostname")
    def cex_hostname(self) -> Optional[str]:
        return pulumi.get(self, "cex_hostname")

    @property
    @pulumi.getter(name="cexPath")
    def cex_path(self) -> Optional[str]:
        return pulumi.get(self, "cex_path")

    @property
    @pulumi.getter(name="contentCustomPath")
    def content_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "content_custom_path")

    @property
    @pulumi.getter(name="contentHostname")
    def content_hostname(self) -> Optional[str]:
        return pulumi.get(self, "content_hostname")

    @property
    @pulumi.getter(name="contentPath")
    def content_path(self) -> Optional[str]:
        return pulumi.get(self, "content_path")

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeResult']:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="dynamicCustomPath")
    def dynamic_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_custom_path")

    @property
    @pulumi.getter(name="dynamicMethod")
    def dynamic_method(self) -> Optional[str]:
        return pulumi.get(self, "dynamic_method")

    @property
    @pulumi.getter(name="dynamicPath")
    def dynamic_path(self) -> Optional[str]:
        return pulumi.get(self, "dynamic_path")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="modifyProtocol")
    def modify_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "modify_protocol")

    @property
    @pulumi.getter(name="netStorageHostname")
    def net_storage_hostname(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionNetStorageHostnameResult']:
        return pulumi.get(self, "net_storage_hostname")

    @property
    @pulumi.getter(name="netStoragePath")
    def net_storage_path(self) -> Optional[str]:
        return pulumi.get(self, "net_storage_path")

    @property
    @pulumi.getter(name="preserveQueryString")
    def preserve_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_query_string")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="redirectCustomPath")
    def redirect_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "redirect_custom_path")

    @property
    @pulumi.getter(name="redirectHostname")
    def redirect_hostname(self) -> Optional[str]:
        return pulumi.get(self, "redirect_hostname")

    @property
    @pulumi.getter(name="redirectHostnameType")
    def redirect_hostname_type(self) -> Optional[str]:
        return pulumi.get(self, "redirect_hostname_type")

    @property
    @pulumi.getter(name="redirectMethod")
    def redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "redirect_method")

    @property
    @pulumi.getter(name="redirectPath")
    def redirect_path(self) -> Optional[str]:
        return pulumi.get(self, "redirect_path")

    @property
    @pulumi.getter(name="saasCnameEnabled")
    def saas_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "saas_cname_enabled")

    @property
    @pulumi.getter(name="saasCnameLevel")
    def saas_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "saas_cname_level")

    @property
    @pulumi.getter(name="saasCookie")
    def saas_cookie(self) -> Optional[str]:
        return pulumi.get(self, "saas_cookie")

    @property
    @pulumi.getter(name="saasQueryString")
    def saas_query_string(self) -> Optional[str]:
        return pulumi.get(self, "saas_query_string")

    @property
    @pulumi.getter(name="saasRegex")
    def saas_regex(self) -> Optional[str]:
        return pulumi.get(self, "saas_regex")

    @property
    @pulumi.getter(name="saasReplace")
    def saas_replace(self) -> Optional[str]:
        return pulumi.get(self, "saas_replace")

    @property
    @pulumi.getter(name="saasSuffix")
    def saas_suffix(self) -> Optional[str]:
        return pulumi.get(self, "saas_suffix")

    @property
    @pulumi.getter(name="saasType")
    def saas_type(self) -> Optional[str]:
        return pulumi.get(self, "saas_type")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFailActionNetStorageHostnameResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorFailActionNetStorageHostnameResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code=cp_code,
            download_domain_name=download_domain_name,
            g2o_token=g2o_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code: Optional[int] = None,
             download_domain_name: Optional[str] = None,
             g2o_token: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCode' in kwargs:
            cp_code = kwargs['cpCode']
        if 'downloadDomainName' in kwargs:
            download_domain_name = kwargs['downloadDomainName']
        if 'g2oToken' in kwargs:
            g2o_token = kwargs['g2oToken']

        if cp_code is not None:
            _setter("cp_code", cp_code)
        if download_domain_name is not None:
            _setter("download_domain_name", download_domain_name)
        if g2o_token is not None:
            _setter("g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFailoverBotManagerFeatureCompatibilityResult(dict):
    def __init__(__self__, *,
                 compatibility: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorFailoverBotManagerFeatureCompatibilityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compatibility=compatibility,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compatibility: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if compatibility is not None:
            _setter("compatibility", compatibility)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def compatibility(self) -> Optional[bool]:
        return pulumi.get(self, "compatibility")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFastInvalidateResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorFastInvalidateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 java_script_insertion_rule: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_math_prefix: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloudlet_policy=cloudlet_policy,
            enabled=enabled,
            java_script_insertion_rule=java_script_insertion_rule,
            locked=locked,
            media_math_prefix=media_math_prefix,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingCloudletPolicyResult'] = None,
             enabled: Optional[bool] = None,
             java_script_insertion_rule: Optional[str] = None,
             locked: Optional[bool] = None,
             media_math_prefix: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'javaScriptInsertionRule' in kwargs:
            java_script_insertion_rule = kwargs['javaScriptInsertionRule']
        if 'mediaMathPrefix' in kwargs:
            media_math_prefix = kwargs['mediaMathPrefix']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if java_script_insertion_rule is not None:
            _setter("java_script_insertion_rule", java_script_insertion_rule)
        if locked is not None:
            _setter("locked", locked)
        if media_math_prefix is not None:
            _setter("media_math_prefix", media_math_prefix)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="javaScriptInsertionRule")
    def java_script_insertion_rule(self) -> Optional[str]:
        return pulumi.get(self, "java_script_insertion_rule")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mediaMathPrefix")
    def media_math_prefix(self) -> Optional[str]:
        return pulumi.get(self, "media_math_prefix")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 java_script_insertion_rule: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_math_prefix: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloudlet_policy=cloudlet_policy,
            enabled=enabled,
            java_script_insertion_rule=java_script_insertion_rule,
            locked=locked,
            media_math_prefix=media_math_prefix,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusCloudletPolicyResult'] = None,
             enabled: Optional[bool] = None,
             java_script_insertion_rule: Optional[str] = None,
             locked: Optional[bool] = None,
             media_math_prefix: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'javaScriptInsertionRule' in kwargs:
            java_script_insertion_rule = kwargs['javaScriptInsertionRule']
        if 'mediaMathPrefix' in kwargs:
            media_math_prefix = kwargs['mediaMathPrefix']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if java_script_insertion_rule is not None:
            _setter("java_script_insertion_rule", java_script_insertion_rule)
        if locked is not None:
            _setter("locked", locked)
        if media_math_prefix is not None:
            _setter("media_math_prefix", media_math_prefix)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="javaScriptInsertionRule")
    def java_script_insertion_rule(self) -> Optional[str]:
        return pulumi.get(self, "java_script_insertion_rule")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mediaMathPrefix")
    def media_math_prefix(self) -> Optional[str]:
        return pulumi.get(self, "media_math_prefix")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloudlet_policy=cloudlet_policy,
            cloudlet_shared_policy=cloudlet_shared_policy,
            enabled=enabled,
            is_shared_policy=is_shared_policy,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteCloudletPolicyResult'] = None,
             cloudlet_shared_policy: Optional[int] = None,
             enabled: Optional[bool] = None,
             is_shared_policy: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'cloudletSharedPolicy' in kwargs:
            cloudlet_shared_policy = kwargs['cloudletSharedPolicy']
        if 'isSharedPolicy' in kwargs:
            is_shared_policy = kwargs['isSharedPolicy']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            _setter("cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if is_shared_policy is not None:
            _setter("is_shared_policy", is_shared_policy)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorG2oheaderResult(dict):
    def __init__(__self__, *,
                 custom_sign_strings: Optional[Sequence[str]] = None,
                 data_header: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 encoding_version: Optional[int] = None,
                 locked: Optional[bool] = None,
                 nonce: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 signed_header: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_custom_sign_string: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorG2oheaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_sign_strings=custom_sign_strings,
            data_header=data_header,
            enabled=enabled,
            encoding_version=encoding_version,
            locked=locked,
            nonce=nonce,
            secret_key=secret_key,
            signed_header=signed_header,
            template_uuid=template_uuid,
            use_custom_sign_string=use_custom_sign_string,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_sign_strings: Optional[Sequence[str]] = None,
             data_header: Optional[str] = None,
             enabled: Optional[bool] = None,
             encoding_version: Optional[int] = None,
             locked: Optional[bool] = None,
             nonce: Optional[str] = None,
             secret_key: Optional[str] = None,
             signed_header: Optional[str] = None,
             template_uuid: Optional[str] = None,
             use_custom_sign_string: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customSignStrings' in kwargs:
            custom_sign_strings = kwargs['customSignStrings']
        if 'dataHeader' in kwargs:
            data_header = kwargs['dataHeader']
        if 'encodingVersion' in kwargs:
            encoding_version = kwargs['encodingVersion']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'signedHeader' in kwargs:
            signed_header = kwargs['signedHeader']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useCustomSignString' in kwargs:
            use_custom_sign_string = kwargs['useCustomSignString']

        if custom_sign_strings is not None:
            _setter("custom_sign_strings", custom_sign_strings)
        if data_header is not None:
            _setter("data_header", data_header)
        if enabled is not None:
            _setter("enabled", enabled)
        if encoding_version is not None:
            _setter("encoding_version", encoding_version)
        if locked is not None:
            _setter("locked", locked)
        if nonce is not None:
            _setter("nonce", nonce)
        if secret_key is not None:
            _setter("secret_key", secret_key)
        if signed_header is not None:
            _setter("signed_header", signed_header)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_custom_sign_string is not None:
            _setter("use_custom_sign_string", use_custom_sign_string)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="customSignStrings")
    def custom_sign_strings(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_sign_strings")

    @property
    @pulumi.getter(name="dataHeader")
    def data_header(self) -> Optional[str]:
        return pulumi.get(self, "data_header")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="encodingVersion")
    def encoding_version(self) -> Optional[int]:
        return pulumi.get(self, "encoding_version")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="signedHeader")
    def signed_header(self) -> Optional[str]:
        return pulumi.get(self, "signed_header")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useCustomSignString")
    def use_custom_sign_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_custom_sign_string")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorGlobalRequestNumberResult(dict):
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 output_option: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorGlobalRequestNumberResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_name=header_name,
            locked=locked,
            output_option=output_option,
            template_uuid=template_uuid,
            uuid=uuid,
            variable_name=variable_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_name: Optional[str] = None,
             locked: Optional[bool] = None,
             output_option: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             variable_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'outputOption' in kwargs:
            output_option = kwargs['outputOption']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'variableName' in kwargs:
            variable_name = kwargs['variableName']

        if header_name is not None:
            _setter("header_name", header_name)
        if locked is not None:
            _setter("locked", locked)
        if output_option is not None:
            _setter("output_option", output_option)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if variable_name is not None:
            _setter("variable_name", variable_name)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="outputOption")
    def output_option(self) -> Optional[str]:
        return pulumi.get(self, "output_option")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorGraphqlCachingResult(dict):
    def __init__(__self__, *,
                 advanced: Optional[str] = None,
                 cache_responses_with_errors: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 operations_json_body_parameter_name: Optional[str] = None,
                 operations_url_query_parameter_name: Optional[str] = None,
                 post_request_processing_error_handling: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorGraphqlCachingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            advanced=advanced,
            cache_responses_with_errors=cache_responses_with_errors,
            enabled=enabled,
            locked=locked,
            operations_json_body_parameter_name=operations_json_body_parameter_name,
            operations_url_query_parameter_name=operations_url_query_parameter_name,
            post_request_processing_error_handling=post_request_processing_error_handling,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             advanced: Optional[str] = None,
             cache_responses_with_errors: Optional[bool] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             operations_json_body_parameter_name: Optional[str] = None,
             operations_url_query_parameter_name: Optional[str] = None,
             post_request_processing_error_handling: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cacheResponsesWithErrors' in kwargs:
            cache_responses_with_errors = kwargs['cacheResponsesWithErrors']
        if 'operationsJsonBodyParameterName' in kwargs:
            operations_json_body_parameter_name = kwargs['operationsJsonBodyParameterName']
        if 'operationsUrlQueryParameterName' in kwargs:
            operations_url_query_parameter_name = kwargs['operationsUrlQueryParameterName']
        if 'postRequestProcessingErrorHandling' in kwargs:
            post_request_processing_error_handling = kwargs['postRequestProcessingErrorHandling']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if advanced is not None:
            _setter("advanced", advanced)
        if cache_responses_with_errors is not None:
            _setter("cache_responses_with_errors", cache_responses_with_errors)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if operations_json_body_parameter_name is not None:
            _setter("operations_json_body_parameter_name", operations_json_body_parameter_name)
        if operations_url_query_parameter_name is not None:
            _setter("operations_url_query_parameter_name", operations_url_query_parameter_name)
        if post_request_processing_error_handling is not None:
            _setter("post_request_processing_error_handling", post_request_processing_error_handling)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[str]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="cacheResponsesWithErrors")
    def cache_responses_with_errors(self) -> Optional[bool]:
        return pulumi.get(self, "cache_responses_with_errors")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="operationsJsonBodyParameterName")
    def operations_json_body_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "operations_json_body_parameter_name")

    @property
    @pulumi.getter(name="operationsUrlQueryParameterName")
    def operations_url_query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "operations_url_query_parameter_name")

    @property
    @pulumi.getter(name="postRequestProcessingErrorHandling")
    def post_request_processing_error_handling(self) -> Optional[str]:
        return pulumi.get(self, "post_request_processing_error_handling")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorGzipResponseResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorGzipResponseResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior=behavior,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if behavior is not None:
            _setter("behavior", behavior)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHdDataAdvancedResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorHdDataAdvancedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            xml=xml,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             xml: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if description is not None:
            _setter("description", description)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if xml is not None:
            _setter("xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHealthDetectionResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 maximum_reconnects: Optional[int] = None,
                 retry_count: Optional[int] = None,
                 retry_interval: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorHealthDetectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            maximum_reconnects=maximum_reconnects,
            retry_count=retry_count,
            retry_interval=retry_interval,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             maximum_reconnects: Optional[int] = None,
             retry_count: Optional[int] = None,
             retry_interval: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maximumReconnects' in kwargs:
            maximum_reconnects = kwargs['maximumReconnects']
        if 'retryCount' in kwargs:
            retry_count = kwargs['retryCount']
        if 'retryInterval' in kwargs:
            retry_interval = kwargs['retryInterval']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if maximum_reconnects is not None:
            _setter("maximum_reconnects", maximum_reconnects)
        if retry_count is not None:
            _setter("retry_count", retry_count)
        if retry_interval is not None:
            _setter("retry_interval", retry_interval)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumReconnects")
    def maximum_reconnects(self) -> Optional[int]:
        return pulumi.get(self, "maximum_reconnects")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[int]:
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[str]:
        return pulumi.get(self, "retry_interval")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHsafEipBindingResult(dict):
    def __init__(__self__, *,
                 custom_extracted_serial: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 hash_max_value: Optional[int] = None,
                 hash_min_value: Optional[int] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tier: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorHsafEipBindingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_extracted_serial=custom_extracted_serial,
            enabled=enabled,
            hash_max_value=hash_max_value,
            hash_min_value=hash_min_value,
            locked=locked,
            template_uuid=template_uuid,
            tier=tier,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_extracted_serial: Optional[bool] = None,
             enabled: Optional[bool] = None,
             hash_max_value: Optional[int] = None,
             hash_min_value: Optional[int] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             tier: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customExtractedSerial' in kwargs:
            custom_extracted_serial = kwargs['customExtractedSerial']
        if 'hashMaxValue' in kwargs:
            hash_max_value = kwargs['hashMaxValue']
        if 'hashMinValue' in kwargs:
            hash_min_value = kwargs['hashMinValue']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if custom_extracted_serial is not None:
            _setter("custom_extracted_serial", custom_extracted_serial)
        if enabled is not None:
            _setter("enabled", enabled)
        if hash_max_value is not None:
            _setter("hash_max_value", hash_max_value)
        if hash_min_value is not None:
            _setter("hash_min_value", hash_min_value)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if tier is not None:
            _setter("tier", tier)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="customExtractedSerial")
    def custom_extracted_serial(self) -> Optional[bool]:
        return pulumi.get(self, "custom_extracted_serial")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="hashMaxValue")
    def hash_max_value(self) -> Optional[int]:
        return pulumi.get(self, "hash_max_value")

    @property
    @pulumi.getter(name="hashMinValue")
    def hash_min_value(self) -> Optional[int]:
        return pulumi.get(self, "hash_min_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        return pulumi.get(self, "tier")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHttp2Result(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorHttp2Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHttp3Result(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorHttp3Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable=enable,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enable is not None:
            _setter("enable", enable)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHttpStrictTransportSecurityResult(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 include_sub_domains: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 max_age: Optional[str] = None,
                 preload: Optional[bool] = None,
                 redirect: Optional[bool] = None,
                 redirect_status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorHttpStrictTransportSecurityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable=enable,
            include_sub_domains=include_sub_domains,
            locked=locked,
            max_age=max_age,
            preload=preload,
            redirect=redirect,
            redirect_status_code=redirect_status_code,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable: Optional[bool] = None,
             include_sub_domains: Optional[bool] = None,
             locked: Optional[bool] = None,
             max_age: Optional[str] = None,
             preload: Optional[bool] = None,
             redirect: Optional[bool] = None,
             redirect_status_code: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'includeSubDomains' in kwargs:
            include_sub_domains = kwargs['includeSubDomains']
        if 'maxAge' in kwargs:
            max_age = kwargs['maxAge']
        if 'redirectStatusCode' in kwargs:
            redirect_status_code = kwargs['redirectStatusCode']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enable is not None:
            _setter("enable", enable)
        if include_sub_domains is not None:
            _setter("include_sub_domains", include_sub_domains)
        if locked is not None:
            _setter("locked", locked)
        if max_age is not None:
            _setter("max_age", max_age)
        if preload is not None:
            _setter("preload", preload)
        if redirect is not None:
            _setter("redirect", redirect)
        if redirect_status_code is not None:
            _setter("redirect_status_code", redirect_status_code)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="includeSubDomains")
    def include_sub_domains(self) -> Optional[bool]:
        return pulumi.get(self, "include_sub_domains")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[str]:
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter
    def preload(self) -> Optional[bool]:
        return pulumi.get(self, "preload")

    @property
    @pulumi.getter
    def redirect(self) -> Optional[bool]:
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter(name="redirectStatusCode")
    def redirect_status_code(self) -> Optional[int]:
        return pulumi.get(self, "redirect_status_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHttpToHttpsUpgradeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upgrade: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorHttpToHttpsUpgradeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            upgrade=upgrade,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             upgrade: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if upgrade is not None:
            _setter("upgrade", upgrade)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def upgrade(self) -> Optional[str]:
        return pulumi.get(self, "upgrade")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImOverrideResult(dict):
    def __init__(__self__, *,
                 dpr: Optional[float] = None,
                 dprvar: Optional[str] = None,
                 exclude_all_query_parameters: Optional[bool] = None,
                 excluded_query_parameters: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 formatvar: Optional[str] = None,
                 locked: Optional[bool] = None,
                 override: Optional[str] = None,
                 policy: Optional[str] = None,
                 policyvar: Optional[str] = None,
                 policyvar_i_mvar: Optional[str] = None,
                 policyvar_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 typesel: Optional[str] = None,
                 uuid: Optional[str] = None,
                 width: Optional[float] = None,
                 widthvar: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorImOverrideResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dpr=dpr,
            dprvar=dprvar,
            exclude_all_query_parameters=exclude_all_query_parameters,
            excluded_query_parameters=excluded_query_parameters,
            format=format,
            formatvar=formatvar,
            locked=locked,
            override=override,
            policy=policy,
            policyvar=policyvar,
            policyvar_i_mvar=policyvar_i_mvar,
            policyvar_name=policyvar_name,
            template_uuid=template_uuid,
            typesel=typesel,
            uuid=uuid,
            width=width,
            widthvar=widthvar,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dpr: Optional[float] = None,
             dprvar: Optional[str] = None,
             exclude_all_query_parameters: Optional[bool] = None,
             excluded_query_parameters: Optional[Sequence[str]] = None,
             format: Optional[str] = None,
             formatvar: Optional[str] = None,
             locked: Optional[bool] = None,
             override: Optional[str] = None,
             policy: Optional[str] = None,
             policyvar: Optional[str] = None,
             policyvar_i_mvar: Optional[str] = None,
             policyvar_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             typesel: Optional[str] = None,
             uuid: Optional[str] = None,
             width: Optional[float] = None,
             widthvar: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'excludeAllQueryParameters' in kwargs:
            exclude_all_query_parameters = kwargs['excludeAllQueryParameters']
        if 'excludedQueryParameters' in kwargs:
            excluded_query_parameters = kwargs['excludedQueryParameters']
        if 'policyvarIMvar' in kwargs:
            policyvar_i_mvar = kwargs['policyvarIMvar']
        if 'policyvarName' in kwargs:
            policyvar_name = kwargs['policyvarName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if dpr is not None:
            _setter("dpr", dpr)
        if dprvar is not None:
            _setter("dprvar", dprvar)
        if exclude_all_query_parameters is not None:
            _setter("exclude_all_query_parameters", exclude_all_query_parameters)
        if excluded_query_parameters is not None:
            _setter("excluded_query_parameters", excluded_query_parameters)
        if format is not None:
            _setter("format", format)
        if formatvar is not None:
            _setter("formatvar", formatvar)
        if locked is not None:
            _setter("locked", locked)
        if override is not None:
            _setter("override", override)
        if policy is not None:
            _setter("policy", policy)
        if policyvar is not None:
            _setter("policyvar", policyvar)
        if policyvar_i_mvar is not None:
            _setter("policyvar_i_mvar", policyvar_i_mvar)
        if policyvar_name is not None:
            _setter("policyvar_name", policyvar_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if typesel is not None:
            _setter("typesel", typesel)
        if uuid is not None:
            _setter("uuid", uuid)
        if width is not None:
            _setter("width", width)
        if widthvar is not None:
            _setter("widthvar", widthvar)

    @property
    @pulumi.getter
    def dpr(self) -> Optional[float]:
        return pulumi.get(self, "dpr")

    @property
    @pulumi.getter
    def dprvar(self) -> Optional[str]:
        return pulumi.get(self, "dprvar")

    @property
    @pulumi.getter(name="excludeAllQueryParameters")
    def exclude_all_query_parameters(self) -> Optional[bool]:
        return pulumi.get(self, "exclude_all_query_parameters")

    @property
    @pulumi.getter(name="excludedQueryParameters")
    def excluded_query_parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_query_parameters")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def formatvar(self) -> Optional[str]:
        return pulumi.get(self, "formatvar")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def override(self) -> Optional[str]:
        return pulumi.get(self, "override")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def policyvar(self) -> Optional[str]:
        return pulumi.get(self, "policyvar")

    @property
    @pulumi.getter(name="policyvarIMvar")
    def policyvar_i_mvar(self) -> Optional[str]:
        return pulumi.get(self, "policyvar_i_mvar")

    @property
    @pulumi.getter(name="policyvarName")
    def policyvar_name(self) -> Optional[str]:
        return pulumi.get(self, "policyvar_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def typesel(self) -> Optional[str]:
        return pulumi.get(self, "typesel")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def width(self) -> Optional[float]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter
    def widthvar(self) -> Optional[str]:
        return pulumi.get(self, "widthvar")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerResult(dict):
    def __init__(__self__, *,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalResult'] = None,
                 cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedResult'] = None,
                 enabled: Optional[bool] = None,
                 image_set: Optional[str] = None,
                 locked: Optional[bool] = None,
                 policy_set_type: Optional[str] = None,
                 resize: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 video_set: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            apply_best_file_type=apply_best_file_type,
            cp_code_original=cp_code_original,
            cp_code_transformed=cp_code_transformed,
            enabled=enabled,
            image_set=image_set,
            locked=locked,
            policy_set_type=policy_set_type,
            resize=resize,
            template_uuid=template_uuid,
            uuid=uuid,
            video_set=video_set,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             apply_best_file_type: Optional[bool] = None,
             cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalResult'] = None,
             cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedResult'] = None,
             enabled: Optional[bool] = None,
             image_set: Optional[str] = None,
             locked: Optional[bool] = None,
             policy_set_type: Optional[str] = None,
             resize: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             video_set: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'applyBestFileType' in kwargs:
            apply_best_file_type = kwargs['applyBestFileType']
        if 'cpCodeOriginal' in kwargs:
            cp_code_original = kwargs['cpCodeOriginal']
        if 'cpCodeTransformed' in kwargs:
            cp_code_transformed = kwargs['cpCodeTransformed']
        if 'imageSet' in kwargs:
            image_set = kwargs['imageSet']
        if 'policySetType' in kwargs:
            policy_set_type = kwargs['policySetType']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'videoSet' in kwargs:
            video_set = kwargs['videoSet']

        if apply_best_file_type is not None:
            _setter("apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            _setter("cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            _setter("cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            _setter("enabled", enabled)
        if image_set is not None:
            _setter("image_set", image_set)
        if locked is not None:
            _setter("locked", locked)
        if policy_set_type is not None:
            _setter("policy_set_type", policy_set_type)
        if resize is not None:
            _setter("resize", resize)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if video_set is not None:
            _setter("video_set", video_set)

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalResult']:
        return pulumi.get(self, "cp_code_original")

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedResult']:
        return pulumi.get(self, "cp_code_transformed")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="imageSet")
    def image_set(self) -> Optional[str]:
        return pulumi.get(self, "image_set")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="policySetType")
    def policy_set_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_set_type")

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="videoSet")
    def video_set(self) -> Optional[str]:
        return pulumi.get(self, "video_set")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerResult(dict):
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 api_reference_title: Optional[str] = None,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalResult'] = None,
                 cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedResult'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 policy_set: Optional[str] = None,
                 policy_token: Optional[str] = None,
                 policy_token_default: Optional[str] = None,
                 resize: Optional[bool] = None,
                 settings_title: Optional[str] = None,
                 super_cache_region: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 traffic_title: Optional[str] = None,
                 use_existing_policy_set: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            advanced=advanced,
            api_reference_title=api_reference_title,
            apply_best_file_type=apply_best_file_type,
            cp_code_original=cp_code_original,
            cp_code_transformed=cp_code_transformed,
            enabled=enabled,
            locked=locked,
            policy_set=policy_set,
            policy_token=policy_token,
            policy_token_default=policy_token_default,
            resize=resize,
            settings_title=settings_title,
            super_cache_region=super_cache_region,
            template_uuid=template_uuid,
            traffic_title=traffic_title,
            use_existing_policy_set=use_existing_policy_set,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             advanced: Optional[bool] = None,
             api_reference_title: Optional[str] = None,
             apply_best_file_type: Optional[bool] = None,
             cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalResult'] = None,
             cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedResult'] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             policy_set: Optional[str] = None,
             policy_token: Optional[str] = None,
             policy_token_default: Optional[str] = None,
             resize: Optional[bool] = None,
             settings_title: Optional[str] = None,
             super_cache_region: Optional[str] = None,
             template_uuid: Optional[str] = None,
             traffic_title: Optional[str] = None,
             use_existing_policy_set: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiReferenceTitle' in kwargs:
            api_reference_title = kwargs['apiReferenceTitle']
        if 'applyBestFileType' in kwargs:
            apply_best_file_type = kwargs['applyBestFileType']
        if 'cpCodeOriginal' in kwargs:
            cp_code_original = kwargs['cpCodeOriginal']
        if 'cpCodeTransformed' in kwargs:
            cp_code_transformed = kwargs['cpCodeTransformed']
        if 'policySet' in kwargs:
            policy_set = kwargs['policySet']
        if 'policyToken' in kwargs:
            policy_token = kwargs['policyToken']
        if 'policyTokenDefault' in kwargs:
            policy_token_default = kwargs['policyTokenDefault']
        if 'settingsTitle' in kwargs:
            settings_title = kwargs['settingsTitle']
        if 'superCacheRegion' in kwargs:
            super_cache_region = kwargs['superCacheRegion']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'trafficTitle' in kwargs:
            traffic_title = kwargs['trafficTitle']
        if 'useExistingPolicySet' in kwargs:
            use_existing_policy_set = kwargs['useExistingPolicySet']

        if advanced is not None:
            _setter("advanced", advanced)
        if api_reference_title is not None:
            _setter("api_reference_title", api_reference_title)
        if apply_best_file_type is not None:
            _setter("apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            _setter("cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            _setter("cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if policy_set is not None:
            _setter("policy_set", policy_set)
        if policy_token is not None:
            _setter("policy_token", policy_token)
        if policy_token_default is not None:
            _setter("policy_token_default", policy_token_default)
        if resize is not None:
            _setter("resize", resize)
        if settings_title is not None:
            _setter("settings_title", settings_title)
        if super_cache_region is not None:
            _setter("super_cache_region", super_cache_region)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if traffic_title is not None:
            _setter("traffic_title", traffic_title)
        if use_existing_policy_set is not None:
            _setter("use_existing_policy_set", use_existing_policy_set)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="apiReferenceTitle")
    def api_reference_title(self) -> Optional[str]:
        return pulumi.get(self, "api_reference_title")

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalResult']:
        return pulumi.get(self, "cp_code_original")

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedResult']:
        return pulumi.get(self, "cp_code_transformed")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="policySet")
    def policy_set(self) -> Optional[str]:
        return pulumi.get(self, "policy_set")

    @property
    @pulumi.getter(name="policyToken")
    def policy_token(self) -> Optional[str]:
        return pulumi.get(self, "policy_token")

    @property
    @pulumi.getter(name="policyTokenDefault")
    def policy_token_default(self) -> Optional[str]:
        return pulumi.get(self, "policy_token_default")

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @property
    @pulumi.getter(name="settingsTitle")
    def settings_title(self) -> Optional[str]:
        return pulumi.get(self, "settings_title")

    @property
    @pulumi.getter(name="superCacheRegion")
    def super_cache_region(self) -> Optional[str]:
        return pulumi.get(self, "super_cache_region")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="trafficTitle")
    def traffic_title(self) -> Optional[str]:
        return pulumi.get(self, "traffic_title")

    @property
    @pulumi.getter(name="useExistingPolicySet")
    def use_existing_policy_set(self) -> Optional[bool]:
        return pulumi.get(self, "use_existing_policy_set")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoResult(dict):
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 api_reference_title: Optional[str] = None,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalResult'] = None,
                 cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedResult'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 policy_set: Optional[str] = None,
                 policy_token: Optional[str] = None,
                 policy_token_default: Optional[str] = None,
                 resize: Optional[bool] = None,
                 settings_title: Optional[str] = None,
                 super_cache_region: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 traffic_title: Optional[str] = None,
                 use_existing_policy_set: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            advanced=advanced,
            api_reference_title=api_reference_title,
            apply_best_file_type=apply_best_file_type,
            cp_code_original=cp_code_original,
            cp_code_transformed=cp_code_transformed,
            enabled=enabled,
            locked=locked,
            policy_set=policy_set,
            policy_token=policy_token,
            policy_token_default=policy_token_default,
            resize=resize,
            settings_title=settings_title,
            super_cache_region=super_cache_region,
            template_uuid=template_uuid,
            traffic_title=traffic_title,
            use_existing_policy_set=use_existing_policy_set,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             advanced: Optional[bool] = None,
             api_reference_title: Optional[str] = None,
             apply_best_file_type: Optional[bool] = None,
             cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalResult'] = None,
             cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedResult'] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             policy_set: Optional[str] = None,
             policy_token: Optional[str] = None,
             policy_token_default: Optional[str] = None,
             resize: Optional[bool] = None,
             settings_title: Optional[str] = None,
             super_cache_region: Optional[str] = None,
             template_uuid: Optional[str] = None,
             traffic_title: Optional[str] = None,
             use_existing_policy_set: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiReferenceTitle' in kwargs:
            api_reference_title = kwargs['apiReferenceTitle']
        if 'applyBestFileType' in kwargs:
            apply_best_file_type = kwargs['applyBestFileType']
        if 'cpCodeOriginal' in kwargs:
            cp_code_original = kwargs['cpCodeOriginal']
        if 'cpCodeTransformed' in kwargs:
            cp_code_transformed = kwargs['cpCodeTransformed']
        if 'policySet' in kwargs:
            policy_set = kwargs['policySet']
        if 'policyToken' in kwargs:
            policy_token = kwargs['policyToken']
        if 'policyTokenDefault' in kwargs:
            policy_token_default = kwargs['policyTokenDefault']
        if 'settingsTitle' in kwargs:
            settings_title = kwargs['settingsTitle']
        if 'superCacheRegion' in kwargs:
            super_cache_region = kwargs['superCacheRegion']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'trafficTitle' in kwargs:
            traffic_title = kwargs['trafficTitle']
        if 'useExistingPolicySet' in kwargs:
            use_existing_policy_set = kwargs['useExistingPolicySet']

        if advanced is not None:
            _setter("advanced", advanced)
        if api_reference_title is not None:
            _setter("api_reference_title", api_reference_title)
        if apply_best_file_type is not None:
            _setter("apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            _setter("cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            _setter("cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if policy_set is not None:
            _setter("policy_set", policy_set)
        if policy_token is not None:
            _setter("policy_token", policy_token)
        if policy_token_default is not None:
            _setter("policy_token_default", policy_token_default)
        if resize is not None:
            _setter("resize", resize)
        if settings_title is not None:
            _setter("settings_title", settings_title)
        if super_cache_region is not None:
            _setter("super_cache_region", super_cache_region)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if traffic_title is not None:
            _setter("traffic_title", traffic_title)
        if use_existing_policy_set is not None:
            _setter("use_existing_policy_set", use_existing_policy_set)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="apiReferenceTitle")
    def api_reference_title(self) -> Optional[str]:
        return pulumi.get(self, "api_reference_title")

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalResult']:
        return pulumi.get(self, "cp_code_original")

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedResult']:
        return pulumi.get(self, "cp_code_transformed")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="policySet")
    def policy_set(self) -> Optional[str]:
        return pulumi.get(self, "policy_set")

    @property
    @pulumi.getter(name="policyToken")
    def policy_token(self) -> Optional[str]:
        return pulumi.get(self, "policy_token")

    @property
    @pulumi.getter(name="policyTokenDefault")
    def policy_token_default(self) -> Optional[str]:
        return pulumi.get(self, "policy_token_default")

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @property
    @pulumi.getter(name="settingsTitle")
    def settings_title(self) -> Optional[str]:
        return pulumi.get(self, "settings_title")

    @property
    @pulumi.getter(name="superCacheRegion")
    def super_cache_region(self) -> Optional[str]:
        return pulumi.get(self, "super_cache_region")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="trafficTitle")
    def traffic_title(self) -> Optional[str]:
        return pulumi.get(self, "traffic_title")

    @property
    @pulumi.getter(name="useExistingPolicySet")
    def use_existing_policy_set(self) -> Optional[bool]:
        return pulumi.get(self, "use_existing_policy_set")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorIncludeResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorIncludeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if id is not None:
            _setter("id", id)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorInstantResult(dict):
    def __init__(__self__, *,
                 custom_link_relations: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 prefetch_cacheable: Optional[bool] = None,
                 prefetch_html: Optional[bool] = None,
                 prefetch_no_store: Optional[bool] = None,
                 prefetch_no_store_extensions: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorInstantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_link_relations=custom_link_relations,
            locked=locked,
            prefetch_cacheable=prefetch_cacheable,
            prefetch_html=prefetch_html,
            prefetch_no_store=prefetch_no_store,
            prefetch_no_store_extensions=prefetch_no_store_extensions,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_link_relations: Optional[Sequence[str]] = None,
             locked: Optional[bool] = None,
             prefetch_cacheable: Optional[bool] = None,
             prefetch_html: Optional[bool] = None,
             prefetch_no_store: Optional[bool] = None,
             prefetch_no_store_extensions: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customLinkRelations' in kwargs:
            custom_link_relations = kwargs['customLinkRelations']
        if 'prefetchCacheable' in kwargs:
            prefetch_cacheable = kwargs['prefetchCacheable']
        if 'prefetchHtml' in kwargs:
            prefetch_html = kwargs['prefetchHtml']
        if 'prefetchNoStore' in kwargs:
            prefetch_no_store = kwargs['prefetchNoStore']
        if 'prefetchNoStoreExtensions' in kwargs:
            prefetch_no_store_extensions = kwargs['prefetchNoStoreExtensions']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if custom_link_relations is not None:
            _setter("custom_link_relations", custom_link_relations)
        if locked is not None:
            _setter("locked", locked)
        if prefetch_cacheable is not None:
            _setter("prefetch_cacheable", prefetch_cacheable)
        if prefetch_html is not None:
            _setter("prefetch_html", prefetch_html)
        if prefetch_no_store is not None:
            _setter("prefetch_no_store", prefetch_no_store)
        if prefetch_no_store_extensions is not None:
            _setter("prefetch_no_store_extensions", prefetch_no_store_extensions)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="customLinkRelations")
    def custom_link_relations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_link_relations")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="prefetchCacheable")
    def prefetch_cacheable(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_cacheable")

    @property
    @pulumi.getter(name="prefetchHtml")
    def prefetch_html(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_html")

    @property
    @pulumi.getter(name="prefetchNoStore")
    def prefetch_no_store(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_no_store")

    @property
    @pulumi.getter(name="prefetchNoStoreExtensions")
    def prefetch_no_store_extensions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prefetch_no_store_extensions")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorInstantConfigResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorInstantConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationResult(dict):
    def __init__(__self__, *,
                 enable_partial_object_caching: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 minimum_size: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_versioning: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_partial_object_caching=enable_partial_object_caching,
            enabled=enabled,
            locked=locked,
            maximum_size=maximum_size,
            minimum_size=minimum_size,
            template_uuid=template_uuid,
            use_versioning=use_versioning,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_partial_object_caching: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             maximum_size: Optional[str] = None,
             minimum_size: Optional[str] = None,
             template_uuid: Optional[str] = None,
             use_versioning: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enablePartialObjectCaching' in kwargs:
            enable_partial_object_caching = kwargs['enablePartialObjectCaching']
        if 'maximumSize' in kwargs:
            maximum_size = kwargs['maximumSize']
        if 'minimumSize' in kwargs:
            minimum_size = kwargs['minimumSize']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useVersioning' in kwargs:
            use_versioning = kwargs['useVersioning']

        if enable_partial_object_caching is not None:
            _setter("enable_partial_object_caching", enable_partial_object_caching)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if maximum_size is not None:
            _setter("maximum_size", maximum_size)
        if minimum_size is not None:
            _setter("minimum_size", minimum_size)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_versioning is not None:
            _setter("use_versioning", use_versioning)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="enablePartialObjectCaching")
    def enable_partial_object_caching(self) -> Optional[str]:
        return pulumi.get(self, "enable_partial_object_caching")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @property
    @pulumi.getter(name="minimumSize")
    def minimum_size(self) -> Optional[str]:
        return pulumi.get(self, "minimum_size")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useVersioning")
    def use_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "use_versioning")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationAdvancedResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 fragment_size: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 prefetch_after_request: Optional[int] = None,
                 prefetch_during_request: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationAdvancedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            fragment_size=fragment_size,
            locked=locked,
            object_size=object_size,
            prefetch_after_request=prefetch_after_request,
            prefetch_during_request=prefetch_during_request,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             fragment_size: Optional[str] = None,
             locked: Optional[bool] = None,
             object_size: Optional[str] = None,
             prefetch_after_request: Optional[int] = None,
             prefetch_during_request: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fragmentSize' in kwargs:
            fragment_size = kwargs['fragmentSize']
        if 'objectSize' in kwargs:
            object_size = kwargs['objectSize']
        if 'prefetchAfterRequest' in kwargs:
            prefetch_after_request = kwargs['prefetchAfterRequest']
        if 'prefetchDuringRequest' in kwargs:
            prefetch_during_request = kwargs['prefetchDuringRequest']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if fragment_size is not None:
            _setter("fragment_size", fragment_size)
        if locked is not None:
            _setter("locked", locked)
        if object_size is not None:
            _setter("object_size", object_size)
        if prefetch_after_request is not None:
            _setter("prefetch_after_request", prefetch_after_request)
        if prefetch_during_request is not None:
            _setter("prefetch_during_request", prefetch_during_request)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="fragmentSize")
    def fragment_size(self) -> Optional[str]:
        return pulumi.get(self, "fragment_size")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="prefetchAfterRequest")
    def prefetch_after_request(self) -> Optional[int]:
        return pulumi.get(self, "prefetch_after_request")

    @property
    @pulumi.getter(name="prefetchDuringRequest")
    def prefetch_during_request(self) -> Optional[int]:
        return pulumi.get(self, "prefetch_during_request")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateResult(dict):
    def __init__(__self__, *,
                 bitrate_tables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateBitrateTableResult']] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 threshold_tables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateThresholdTableResult']] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bitrate_tables=bitrate_tables,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            threshold_tables=threshold_tables,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bitrate_tables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateBitrateTableResult']] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             threshold_tables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateThresholdTableResult']] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bitrateTables' in kwargs:
            bitrate_tables = kwargs['bitrateTables']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'thresholdTables' in kwargs:
            threshold_tables = kwargs['thresholdTables']

        if bitrate_tables is not None:
            _setter("bitrate_tables", bitrate_tables)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if threshold_tables is not None:
            _setter("threshold_tables", threshold_tables)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="bitrateTables")
    def bitrate_tables(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateBitrateTableResult']]:
        return pulumi.get(self, "bitrate_tables")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="thresholdTables")
    def threshold_tables(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateThresholdTableResult']]:
        return pulumi.get(self, "threshold_tables")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateBitrateTableResult(dict):
    def __init__(__self__, *,
                 bitrate_unit: Optional[str] = None,
                 bitrate_value: Optional[float] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateBitrateTableResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bitrate_unit=bitrate_unit,
            bitrate_value=bitrate_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bitrate_unit: Optional[str] = None,
             bitrate_value: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bitrateUnit' in kwargs:
            bitrate_unit = kwargs['bitrateUnit']
        if 'bitrateValue' in kwargs:
            bitrate_value = kwargs['bitrateValue']

        if bitrate_unit is not None:
            _setter("bitrate_unit", bitrate_unit)
        if bitrate_value is not None:
            _setter("bitrate_value", bitrate_value)

    @property
    @pulumi.getter(name="bitrateUnit")
    def bitrate_unit(self) -> Optional[str]:
        return pulumi.get(self, "bitrate_unit")

    @property
    @pulumi.getter(name="bitrateValue")
    def bitrate_value(self) -> Optional[float]:
        return pulumi.get(self, "bitrate_value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateThresholdTableResult(dict):
    def __init__(__self__, *,
                 threshold_unit: Optional[str] = None,
                 threshold_value: Optional[int] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateThresholdTableResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            threshold_unit=threshold_unit,
            threshold_value=threshold_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             threshold_unit: Optional[str] = None,
             threshold_value: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'thresholdUnit' in kwargs:
            threshold_unit = kwargs['thresholdUnit']
        if 'thresholdValue' in kwargs:
            threshold_value = kwargs['thresholdValue']

        if threshold_unit is not None:
            _setter("threshold_unit", threshold_unit)
        if threshold_value is not None:
            _setter("threshold_value", threshold_value)

    @property
    @pulumi.getter(name="thresholdUnit")
    def threshold_unit(self) -> Optional[str]:
        return pulumi.get(self, "threshold_unit")

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> Optional[int]:
        return pulumi.get(self, "threshold_value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLogCustomResult(dict):
    def __init__(__self__, *,
                 custom_log_field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 log_custom_log_field: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorLogCustomResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_log_field=custom_log_field,
            locked=locked,
            log_custom_log_field=log_custom_log_field,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_log_field: Optional[str] = None,
             locked: Optional[bool] = None,
             log_custom_log_field: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customLogField' in kwargs:
            custom_log_field = kwargs['customLogField']
        if 'logCustomLogField' in kwargs:
            log_custom_log_field = kwargs['logCustomLogField']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if custom_log_field is not None:
            _setter("custom_log_field", custom_log_field)
        if locked is not None:
            _setter("locked", locked)
        if log_custom_log_field is not None:
            _setter("log_custom_log_field", log_custom_log_field)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="customLogField")
    def custom_log_field(self) -> Optional[str]:
        return pulumi.get(self, "custom_log_field")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="logCustomLogField")
    def log_custom_log_field(self) -> Optional[bool]:
        return pulumi.get(self, "log_custom_log_field")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMPulseResult(dict):
    def __init__(__self__, *,
                 api_key: Optional[str] = None,
                 buffer_size: Optional[str] = None,
                 config_override: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 loader_version: Optional[str] = None,
                 locked: Optional[bool] = None,
                 require_pci: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 title_optional: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorMPulseResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            api_key=api_key,
            buffer_size=buffer_size,
            config_override=config_override,
            enabled=enabled,
            loader_version=loader_version,
            locked=locked,
            require_pci=require_pci,
            template_uuid=template_uuid,
            title_optional=title_optional,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             api_key: Optional[str] = None,
             buffer_size: Optional[str] = None,
             config_override: Optional[str] = None,
             enabled: Optional[bool] = None,
             loader_version: Optional[str] = None,
             locked: Optional[bool] = None,
             require_pci: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             title_optional: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiKey' in kwargs:
            api_key = kwargs['apiKey']
        if 'bufferSize' in kwargs:
            buffer_size = kwargs['bufferSize']
        if 'configOverride' in kwargs:
            config_override = kwargs['configOverride']
        if 'loaderVersion' in kwargs:
            loader_version = kwargs['loaderVersion']
        if 'requirePci' in kwargs:
            require_pci = kwargs['requirePci']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'titleOptional' in kwargs:
            title_optional = kwargs['titleOptional']

        if api_key is not None:
            _setter("api_key", api_key)
        if buffer_size is not None:
            _setter("buffer_size", buffer_size)
        if config_override is not None:
            _setter("config_override", config_override)
        if enabled is not None:
            _setter("enabled", enabled)
        if loader_version is not None:
            _setter("loader_version", loader_version)
        if locked is not None:
            _setter("locked", locked)
        if require_pci is not None:
            _setter("require_pci", require_pci)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if title_optional is not None:
            _setter("title_optional", title_optional)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[str]:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "buffer_size")

    @property
    @pulumi.getter(name="configOverride")
    def config_override(self) -> Optional[str]:
        return pulumi.get(self, "config_override")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="loaderVersion")
    def loader_version(self) -> Optional[str]:
        return pulumi.get(self, "loader_version")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="requirePci")
    def require_pci(self) -> Optional[bool]:
        return pulumi.get(self, "require_pci")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="titleOptional")
    def title_optional(self) -> Optional[str]:
        return pulumi.get(self, "title_optional")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorManifestPersonalizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 hls_enable_debug_headers: Optional[bool] = None,
                 hls_enabled: Optional[bool] = None,
                 hls_filter_in_bitrate_ranges: Optional[str] = None,
                 hls_filter_in_bitrates: Optional[str] = None,
                 hls_mode: Optional[str] = None,
                 hls_preferred_bitrate: Optional[str] = None,
                 hls_query_param_enabled: Optional[bool] = None,
                 hls_query_param_secret_key: Optional[str] = None,
                 hls_query_param_transition_key: Optional[str] = None,
                 hls_show_advanced: Optional[bool] = None,
                 hls_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorManifestPersonalizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            hls_enable_debug_headers=hls_enable_debug_headers,
            hls_enabled=hls_enabled,
            hls_filter_in_bitrate_ranges=hls_filter_in_bitrate_ranges,
            hls_filter_in_bitrates=hls_filter_in_bitrates,
            hls_mode=hls_mode,
            hls_preferred_bitrate=hls_preferred_bitrate,
            hls_query_param_enabled=hls_query_param_enabled,
            hls_query_param_secret_key=hls_query_param_secret_key,
            hls_query_param_transition_key=hls_query_param_transition_key,
            hls_show_advanced=hls_show_advanced,
            hls_title=hls_title,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             hls_enable_debug_headers: Optional[bool] = None,
             hls_enabled: Optional[bool] = None,
             hls_filter_in_bitrate_ranges: Optional[str] = None,
             hls_filter_in_bitrates: Optional[str] = None,
             hls_mode: Optional[str] = None,
             hls_preferred_bitrate: Optional[str] = None,
             hls_query_param_enabled: Optional[bool] = None,
             hls_query_param_secret_key: Optional[str] = None,
             hls_query_param_transition_key: Optional[str] = None,
             hls_show_advanced: Optional[bool] = None,
             hls_title: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hlsEnableDebugHeaders' in kwargs:
            hls_enable_debug_headers = kwargs['hlsEnableDebugHeaders']
        if 'hlsEnabled' in kwargs:
            hls_enabled = kwargs['hlsEnabled']
        if 'hlsFilterInBitrateRanges' in kwargs:
            hls_filter_in_bitrate_ranges = kwargs['hlsFilterInBitrateRanges']
        if 'hlsFilterInBitrates' in kwargs:
            hls_filter_in_bitrates = kwargs['hlsFilterInBitrates']
        if 'hlsMode' in kwargs:
            hls_mode = kwargs['hlsMode']
        if 'hlsPreferredBitrate' in kwargs:
            hls_preferred_bitrate = kwargs['hlsPreferredBitrate']
        if 'hlsQueryParamEnabled' in kwargs:
            hls_query_param_enabled = kwargs['hlsQueryParamEnabled']
        if 'hlsQueryParamSecretKey' in kwargs:
            hls_query_param_secret_key = kwargs['hlsQueryParamSecretKey']
        if 'hlsQueryParamTransitionKey' in kwargs:
            hls_query_param_transition_key = kwargs['hlsQueryParamTransitionKey']
        if 'hlsShowAdvanced' in kwargs:
            hls_show_advanced = kwargs['hlsShowAdvanced']
        if 'hlsTitle' in kwargs:
            hls_title = kwargs['hlsTitle']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if hls_enable_debug_headers is not None:
            _setter("hls_enable_debug_headers", hls_enable_debug_headers)
        if hls_enabled is not None:
            _setter("hls_enabled", hls_enabled)
        if hls_filter_in_bitrate_ranges is not None:
            _setter("hls_filter_in_bitrate_ranges", hls_filter_in_bitrate_ranges)
        if hls_filter_in_bitrates is not None:
            _setter("hls_filter_in_bitrates", hls_filter_in_bitrates)
        if hls_mode is not None:
            _setter("hls_mode", hls_mode)
        if hls_preferred_bitrate is not None:
            _setter("hls_preferred_bitrate", hls_preferred_bitrate)
        if hls_query_param_enabled is not None:
            _setter("hls_query_param_enabled", hls_query_param_enabled)
        if hls_query_param_secret_key is not None:
            _setter("hls_query_param_secret_key", hls_query_param_secret_key)
        if hls_query_param_transition_key is not None:
            _setter("hls_query_param_transition_key", hls_query_param_transition_key)
        if hls_show_advanced is not None:
            _setter("hls_show_advanced", hls_show_advanced)
        if hls_title is not None:
            _setter("hls_title", hls_title)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="hlsEnableDebugHeaders")
    def hls_enable_debug_headers(self) -> Optional[bool]:
        return pulumi.get(self, "hls_enable_debug_headers")

    @property
    @pulumi.getter(name="hlsEnabled")
    def hls_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "hls_enabled")

    @property
    @pulumi.getter(name="hlsFilterInBitrateRanges")
    def hls_filter_in_bitrate_ranges(self) -> Optional[str]:
        return pulumi.get(self, "hls_filter_in_bitrate_ranges")

    @property
    @pulumi.getter(name="hlsFilterInBitrates")
    def hls_filter_in_bitrates(self) -> Optional[str]:
        return pulumi.get(self, "hls_filter_in_bitrates")

    @property
    @pulumi.getter(name="hlsMode")
    def hls_mode(self) -> Optional[str]:
        return pulumi.get(self, "hls_mode")

    @property
    @pulumi.getter(name="hlsPreferredBitrate")
    def hls_preferred_bitrate(self) -> Optional[str]:
        return pulumi.get(self, "hls_preferred_bitrate")

    @property
    @pulumi.getter(name="hlsQueryParamEnabled")
    def hls_query_param_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "hls_query_param_enabled")

    @property
    @pulumi.getter(name="hlsQueryParamSecretKey")
    def hls_query_param_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "hls_query_param_secret_key")

    @property
    @pulumi.getter(name="hlsQueryParamTransitionKey")
    def hls_query_param_transition_key(self) -> Optional[str]:
        return pulumi.get(self, "hls_query_param_transition_key")

    @property
    @pulumi.getter(name="hlsShowAdvanced")
    def hls_show_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "hls_show_advanced")

    @property
    @pulumi.getter(name="hlsTitle")
    def hls_title(self) -> Optional[str]:
        return pulumi.get(self, "hls_title")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorManifestReroutingResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 partner: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 username: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorManifestReroutingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            partner=partner,
            template_uuid=template_uuid,
            username=username,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             partner: Optional[str] = None,
             template_uuid: Optional[str] = None,
             username: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if partner is not None:
            _setter("partner", partner)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if username is not None:
            _setter("username", username)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def partner(self) -> Optional[str]:
        return pulumi.get(self, "partner")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorManualServerPushResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 serverpushlists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorManualServerPushResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            serverpushlists=serverpushlists,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             serverpushlists: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if serverpushlists is not None:
            _setter("serverpushlists", serverpushlists)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def serverpushlists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "serverpushlists")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationQuicOptoutResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 optout: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationQuicOptoutResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            optout=optout,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             optout: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if optout is not None:
            _setter("optout", optout)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def optout(self) -> Optional[str]:
        return pulumi.get(self, "optout")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMediaClientResult(dict):
    def __init__(__self__, *,
                 beacon_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_hybrid_http_udp: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorMediaClientResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            beacon_id=beacon_id,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            use_hybrid_http_udp=use_hybrid_http_udp,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             beacon_id: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             use_hybrid_http_udp: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'beaconId' in kwargs:
            beacon_id = kwargs['beaconId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useHybridHttpUdp' in kwargs:
            use_hybrid_http_udp = kwargs['useHybridHttpUdp']

        if beacon_id is not None:
            _setter("beacon_id", beacon_id)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_hybrid_http_udp is not None:
            _setter("use_hybrid_http_udp", use_hybrid_http_udp)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="beaconId")
    def beacon_id(self) -> Optional[str]:
        return pulumi.get(self, "beacon_id")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useHybridHttpUdp")
    def use_hybrid_http_udp(self) -> Optional[bool]:
        return pulumi.get(self, "use_hybrid_http_udp")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMediaFileRetrievalOptimizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorMediaFileRetrievalOptimizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMediaOriginFailoverResult(dict):
    def __init__(__self__, *,
                 cache_error_response: Optional[bool] = None,
                 cache_window: Optional[str] = None,
                 client_response_code: Optional[str] = None,
                 detect_object_unavailable: Optional[bool] = None,
                 detect_object_unavailable_title: Optional[str] = None,
                 detect_origin_unavailable: Optional[bool] = None,
                 detect_origin_unavailable_title: Optional[str] = None,
                 detect_origin_unresponsive: Optional[bool] = None,
                 detect_origin_unresponsive_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_unavailable_alternate_host: Optional[str] = None,
                 object_unavailable_backup_host: Optional[str] = None,
                 object_unavailable_blacklist_origin_ip: Optional[bool] = None,
                 object_unavailable_blacklist_window: Optional[str] = None,
                 object_unavailable_change_protocol: Optional[bool] = None,
                 object_unavailable_detection_level: Optional[str] = None,
                 object_unavailable_include_query_string: Optional[bool] = None,
                 object_unavailable_modified_path: Optional[str] = None,
                 object_unavailable_modify_request_path: Optional[bool] = None,
                 object_unavailable_protocol: Optional[str] = None,
                 object_unavailable_recovery: Optional[str] = None,
                 object_unavailable_redirect_method: Optional[int] = None,
                 object_unavailable_response_codes: Optional[Sequence[str]] = None,
                 object_unavailable_retry_limit: Optional[str] = None,
                 origin_unavailable_alternate_host: Optional[str] = None,
                 origin_unavailable_backup_host: Optional[str] = None,
                 origin_unavailable_blacklist_origin_ip: Optional[bool] = None,
                 origin_unavailable_blacklist_window: Optional[str] = None,
                 origin_unavailable_change_protocol: Optional[bool] = None,
                 origin_unavailable_detection_level: Optional[str] = None,
                 origin_unavailable_include_query_string: Optional[bool] = None,
                 origin_unavailable_modified_path: Optional[str] = None,
                 origin_unavailable_modify_request_path: Optional[bool] = None,
                 origin_unavailable_protocol: Optional[str] = None,
                 origin_unavailable_recovery: Optional[str] = None,
                 origin_unavailable_redirect_method: Optional[int] = None,
                 origin_unavailable_response_codes: Optional[Sequence[str]] = None,
                 origin_unavailable_retry_limit: Optional[str] = None,
                 origin_unresponsive_alternate_host: Optional[str] = None,
                 origin_unresponsive_backup_host: Optional[str] = None,
                 origin_unresponsive_blacklist_origin_ip: Optional[bool] = None,
                 origin_unresponsive_blacklist_window: Optional[str] = None,
                 origin_unresponsive_change_protocol: Optional[bool] = None,
                 origin_unresponsive_detection_level: Optional[str] = None,
                 origin_unresponsive_include_query_string: Optional[bool] = None,
                 origin_unresponsive_modified_path: Optional[str] = None,
                 origin_unresponsive_modify_request_path: Optional[bool] = None,
                 origin_unresponsive_protocol: Optional[str] = None,
                 origin_unresponsive_recovery: Optional[str] = None,
                 origin_unresponsive_redirect_method: Optional[int] = None,
                 origin_unresponsive_retry_limit: Optional[str] = None,
                 other_options: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorMediaOriginFailoverResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cache_error_response=cache_error_response,
            cache_window=cache_window,
            client_response_code=client_response_code,
            detect_object_unavailable=detect_object_unavailable,
            detect_object_unavailable_title=detect_object_unavailable_title,
            detect_origin_unavailable=detect_origin_unavailable,
            detect_origin_unavailable_title=detect_origin_unavailable_title,
            detect_origin_unresponsive=detect_origin_unresponsive,
            detect_origin_unresponsive_title=detect_origin_unresponsive_title,
            locked=locked,
            object_unavailable_alternate_host=object_unavailable_alternate_host,
            object_unavailable_backup_host=object_unavailable_backup_host,
            object_unavailable_blacklist_origin_ip=object_unavailable_blacklist_origin_ip,
            object_unavailable_blacklist_window=object_unavailable_blacklist_window,
            object_unavailable_change_protocol=object_unavailable_change_protocol,
            object_unavailable_detection_level=object_unavailable_detection_level,
            object_unavailable_include_query_string=object_unavailable_include_query_string,
            object_unavailable_modified_path=object_unavailable_modified_path,
            object_unavailable_modify_request_path=object_unavailable_modify_request_path,
            object_unavailable_protocol=object_unavailable_protocol,
            object_unavailable_recovery=object_unavailable_recovery,
            object_unavailable_redirect_method=object_unavailable_redirect_method,
            object_unavailable_response_codes=object_unavailable_response_codes,
            object_unavailable_retry_limit=object_unavailable_retry_limit,
            origin_unavailable_alternate_host=origin_unavailable_alternate_host,
            origin_unavailable_backup_host=origin_unavailable_backup_host,
            origin_unavailable_blacklist_origin_ip=origin_unavailable_blacklist_origin_ip,
            origin_unavailable_blacklist_window=origin_unavailable_blacklist_window,
            origin_unavailable_change_protocol=origin_unavailable_change_protocol,
            origin_unavailable_detection_level=origin_unavailable_detection_level,
            origin_unavailable_include_query_string=origin_unavailable_include_query_string,
            origin_unavailable_modified_path=origin_unavailable_modified_path,
            origin_unavailable_modify_request_path=origin_unavailable_modify_request_path,
            origin_unavailable_protocol=origin_unavailable_protocol,
            origin_unavailable_recovery=origin_unavailable_recovery,
            origin_unavailable_redirect_method=origin_unavailable_redirect_method,
            origin_unavailable_response_codes=origin_unavailable_response_codes,
            origin_unavailable_retry_limit=origin_unavailable_retry_limit,
            origin_unresponsive_alternate_host=origin_unresponsive_alternate_host,
            origin_unresponsive_backup_host=origin_unresponsive_backup_host,
            origin_unresponsive_blacklist_origin_ip=origin_unresponsive_blacklist_origin_ip,
            origin_unresponsive_blacklist_window=origin_unresponsive_blacklist_window,
            origin_unresponsive_change_protocol=origin_unresponsive_change_protocol,
            origin_unresponsive_detection_level=origin_unresponsive_detection_level,
            origin_unresponsive_include_query_string=origin_unresponsive_include_query_string,
            origin_unresponsive_modified_path=origin_unresponsive_modified_path,
            origin_unresponsive_modify_request_path=origin_unresponsive_modify_request_path,
            origin_unresponsive_protocol=origin_unresponsive_protocol,
            origin_unresponsive_recovery=origin_unresponsive_recovery,
            origin_unresponsive_redirect_method=origin_unresponsive_redirect_method,
            origin_unresponsive_retry_limit=origin_unresponsive_retry_limit,
            other_options=other_options,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cache_error_response: Optional[bool] = None,
             cache_window: Optional[str] = None,
             client_response_code: Optional[str] = None,
             detect_object_unavailable: Optional[bool] = None,
             detect_object_unavailable_title: Optional[str] = None,
             detect_origin_unavailable: Optional[bool] = None,
             detect_origin_unavailable_title: Optional[str] = None,
             detect_origin_unresponsive: Optional[bool] = None,
             detect_origin_unresponsive_title: Optional[str] = None,
             locked: Optional[bool] = None,
             object_unavailable_alternate_host: Optional[str] = None,
             object_unavailable_backup_host: Optional[str] = None,
             object_unavailable_blacklist_origin_ip: Optional[bool] = None,
             object_unavailable_blacklist_window: Optional[str] = None,
             object_unavailable_change_protocol: Optional[bool] = None,
             object_unavailable_detection_level: Optional[str] = None,
             object_unavailable_include_query_string: Optional[bool] = None,
             object_unavailable_modified_path: Optional[str] = None,
             object_unavailable_modify_request_path: Optional[bool] = None,
             object_unavailable_protocol: Optional[str] = None,
             object_unavailable_recovery: Optional[str] = None,
             object_unavailable_redirect_method: Optional[int] = None,
             object_unavailable_response_codes: Optional[Sequence[str]] = None,
             object_unavailable_retry_limit: Optional[str] = None,
             origin_unavailable_alternate_host: Optional[str] = None,
             origin_unavailable_backup_host: Optional[str] = None,
             origin_unavailable_blacklist_origin_ip: Optional[bool] = None,
             origin_unavailable_blacklist_window: Optional[str] = None,
             origin_unavailable_change_protocol: Optional[bool] = None,
             origin_unavailable_detection_level: Optional[str] = None,
             origin_unavailable_include_query_string: Optional[bool] = None,
             origin_unavailable_modified_path: Optional[str] = None,
             origin_unavailable_modify_request_path: Optional[bool] = None,
             origin_unavailable_protocol: Optional[str] = None,
             origin_unavailable_recovery: Optional[str] = None,
             origin_unavailable_redirect_method: Optional[int] = None,
             origin_unavailable_response_codes: Optional[Sequence[str]] = None,
             origin_unavailable_retry_limit: Optional[str] = None,
             origin_unresponsive_alternate_host: Optional[str] = None,
             origin_unresponsive_backup_host: Optional[str] = None,
             origin_unresponsive_blacklist_origin_ip: Optional[bool] = None,
             origin_unresponsive_blacklist_window: Optional[str] = None,
             origin_unresponsive_change_protocol: Optional[bool] = None,
             origin_unresponsive_detection_level: Optional[str] = None,
             origin_unresponsive_include_query_string: Optional[bool] = None,
             origin_unresponsive_modified_path: Optional[str] = None,
             origin_unresponsive_modify_request_path: Optional[bool] = None,
             origin_unresponsive_protocol: Optional[str] = None,
             origin_unresponsive_recovery: Optional[str] = None,
             origin_unresponsive_redirect_method: Optional[int] = None,
             origin_unresponsive_retry_limit: Optional[str] = None,
             other_options: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cacheErrorResponse' in kwargs:
            cache_error_response = kwargs['cacheErrorResponse']
        if 'cacheWindow' in kwargs:
            cache_window = kwargs['cacheWindow']
        if 'clientResponseCode' in kwargs:
            client_response_code = kwargs['clientResponseCode']
        if 'detectObjectUnavailable' in kwargs:
            detect_object_unavailable = kwargs['detectObjectUnavailable']
        if 'detectObjectUnavailableTitle' in kwargs:
            detect_object_unavailable_title = kwargs['detectObjectUnavailableTitle']
        if 'detectOriginUnavailable' in kwargs:
            detect_origin_unavailable = kwargs['detectOriginUnavailable']
        if 'detectOriginUnavailableTitle' in kwargs:
            detect_origin_unavailable_title = kwargs['detectOriginUnavailableTitle']
        if 'detectOriginUnresponsive' in kwargs:
            detect_origin_unresponsive = kwargs['detectOriginUnresponsive']
        if 'detectOriginUnresponsiveTitle' in kwargs:
            detect_origin_unresponsive_title = kwargs['detectOriginUnresponsiveTitle']
        if 'objectUnavailableAlternateHost' in kwargs:
            object_unavailable_alternate_host = kwargs['objectUnavailableAlternateHost']
        if 'objectUnavailableBackupHost' in kwargs:
            object_unavailable_backup_host = kwargs['objectUnavailableBackupHost']
        if 'objectUnavailableBlacklistOriginIp' in kwargs:
            object_unavailable_blacklist_origin_ip = kwargs['objectUnavailableBlacklistOriginIp']
        if 'objectUnavailableBlacklistWindow' in kwargs:
            object_unavailable_blacklist_window = kwargs['objectUnavailableBlacklistWindow']
        if 'objectUnavailableChangeProtocol' in kwargs:
            object_unavailable_change_protocol = kwargs['objectUnavailableChangeProtocol']
        if 'objectUnavailableDetectionLevel' in kwargs:
            object_unavailable_detection_level = kwargs['objectUnavailableDetectionLevel']
        if 'objectUnavailableIncludeQueryString' in kwargs:
            object_unavailable_include_query_string = kwargs['objectUnavailableIncludeQueryString']
        if 'objectUnavailableModifiedPath' in kwargs:
            object_unavailable_modified_path = kwargs['objectUnavailableModifiedPath']
        if 'objectUnavailableModifyRequestPath' in kwargs:
            object_unavailable_modify_request_path = kwargs['objectUnavailableModifyRequestPath']
        if 'objectUnavailableProtocol' in kwargs:
            object_unavailable_protocol = kwargs['objectUnavailableProtocol']
        if 'objectUnavailableRecovery' in kwargs:
            object_unavailable_recovery = kwargs['objectUnavailableRecovery']
        if 'objectUnavailableRedirectMethod' in kwargs:
            object_unavailable_redirect_method = kwargs['objectUnavailableRedirectMethod']
        if 'objectUnavailableResponseCodes' in kwargs:
            object_unavailable_response_codes = kwargs['objectUnavailableResponseCodes']
        if 'objectUnavailableRetryLimit' in kwargs:
            object_unavailable_retry_limit = kwargs['objectUnavailableRetryLimit']
        if 'originUnavailableAlternateHost' in kwargs:
            origin_unavailable_alternate_host = kwargs['originUnavailableAlternateHost']
        if 'originUnavailableBackupHost' in kwargs:
            origin_unavailable_backup_host = kwargs['originUnavailableBackupHost']
        if 'originUnavailableBlacklistOriginIp' in kwargs:
            origin_unavailable_blacklist_origin_ip = kwargs['originUnavailableBlacklistOriginIp']
        if 'originUnavailableBlacklistWindow' in kwargs:
            origin_unavailable_blacklist_window = kwargs['originUnavailableBlacklistWindow']
        if 'originUnavailableChangeProtocol' in kwargs:
            origin_unavailable_change_protocol = kwargs['originUnavailableChangeProtocol']
        if 'originUnavailableDetectionLevel' in kwargs:
            origin_unavailable_detection_level = kwargs['originUnavailableDetectionLevel']
        if 'originUnavailableIncludeQueryString' in kwargs:
            origin_unavailable_include_query_string = kwargs['originUnavailableIncludeQueryString']
        if 'originUnavailableModifiedPath' in kwargs:
            origin_unavailable_modified_path = kwargs['originUnavailableModifiedPath']
        if 'originUnavailableModifyRequestPath' in kwargs:
            origin_unavailable_modify_request_path = kwargs['originUnavailableModifyRequestPath']
        if 'originUnavailableProtocol' in kwargs:
            origin_unavailable_protocol = kwargs['originUnavailableProtocol']
        if 'originUnavailableRecovery' in kwargs:
            origin_unavailable_recovery = kwargs['originUnavailableRecovery']
        if 'originUnavailableRedirectMethod' in kwargs:
            origin_unavailable_redirect_method = kwargs['originUnavailableRedirectMethod']
        if 'originUnavailableResponseCodes' in kwargs:
            origin_unavailable_response_codes = kwargs['originUnavailableResponseCodes']
        if 'originUnavailableRetryLimit' in kwargs:
            origin_unavailable_retry_limit = kwargs['originUnavailableRetryLimit']
        if 'originUnresponsiveAlternateHost' in kwargs:
            origin_unresponsive_alternate_host = kwargs['originUnresponsiveAlternateHost']
        if 'originUnresponsiveBackupHost' in kwargs:
            origin_unresponsive_backup_host = kwargs['originUnresponsiveBackupHost']
        if 'originUnresponsiveBlacklistOriginIp' in kwargs:
            origin_unresponsive_blacklist_origin_ip = kwargs['originUnresponsiveBlacklistOriginIp']
        if 'originUnresponsiveBlacklistWindow' in kwargs:
            origin_unresponsive_blacklist_window = kwargs['originUnresponsiveBlacklistWindow']
        if 'originUnresponsiveChangeProtocol' in kwargs:
            origin_unresponsive_change_protocol = kwargs['originUnresponsiveChangeProtocol']
        if 'originUnresponsiveDetectionLevel' in kwargs:
            origin_unresponsive_detection_level = kwargs['originUnresponsiveDetectionLevel']
        if 'originUnresponsiveIncludeQueryString' in kwargs:
            origin_unresponsive_include_query_string = kwargs['originUnresponsiveIncludeQueryString']
        if 'originUnresponsiveModifiedPath' in kwargs:
            origin_unresponsive_modified_path = kwargs['originUnresponsiveModifiedPath']
        if 'originUnresponsiveModifyRequestPath' in kwargs:
            origin_unresponsive_modify_request_path = kwargs['originUnresponsiveModifyRequestPath']
        if 'originUnresponsiveProtocol' in kwargs:
            origin_unresponsive_protocol = kwargs['originUnresponsiveProtocol']
        if 'originUnresponsiveRecovery' in kwargs:
            origin_unresponsive_recovery = kwargs['originUnresponsiveRecovery']
        if 'originUnresponsiveRedirectMethod' in kwargs:
            origin_unresponsive_redirect_method = kwargs['originUnresponsiveRedirectMethod']
        if 'originUnresponsiveRetryLimit' in kwargs:
            origin_unresponsive_retry_limit = kwargs['originUnresponsiveRetryLimit']
        if 'otherOptions' in kwargs:
            other_options = kwargs['otherOptions']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cache_error_response is not None:
            _setter("cache_error_response", cache_error_response)
        if cache_window is not None:
            _setter("cache_window", cache_window)
        if client_response_code is not None:
            _setter("client_response_code", client_response_code)
        if detect_object_unavailable is not None:
            _setter("detect_object_unavailable", detect_object_unavailable)
        if detect_object_unavailable_title is not None:
            _setter("detect_object_unavailable_title", detect_object_unavailable_title)
        if detect_origin_unavailable is not None:
            _setter("detect_origin_unavailable", detect_origin_unavailable)
        if detect_origin_unavailable_title is not None:
            _setter("detect_origin_unavailable_title", detect_origin_unavailable_title)
        if detect_origin_unresponsive is not None:
            _setter("detect_origin_unresponsive", detect_origin_unresponsive)
        if detect_origin_unresponsive_title is not None:
            _setter("detect_origin_unresponsive_title", detect_origin_unresponsive_title)
        if locked is not None:
            _setter("locked", locked)
        if object_unavailable_alternate_host is not None:
            _setter("object_unavailable_alternate_host", object_unavailable_alternate_host)
        if object_unavailable_backup_host is not None:
            _setter("object_unavailable_backup_host", object_unavailable_backup_host)
        if object_unavailable_blacklist_origin_ip is not None:
            _setter("object_unavailable_blacklist_origin_ip", object_unavailable_blacklist_origin_ip)
        if object_unavailable_blacklist_window is not None:
            _setter("object_unavailable_blacklist_window", object_unavailable_blacklist_window)
        if object_unavailable_change_protocol is not None:
            _setter("object_unavailable_change_protocol", object_unavailable_change_protocol)
        if object_unavailable_detection_level is not None:
            _setter("object_unavailable_detection_level", object_unavailable_detection_level)
        if object_unavailable_include_query_string is not None:
            _setter("object_unavailable_include_query_string", object_unavailable_include_query_string)
        if object_unavailable_modified_path is not None:
            _setter("object_unavailable_modified_path", object_unavailable_modified_path)
        if object_unavailable_modify_request_path is not None:
            _setter("object_unavailable_modify_request_path", object_unavailable_modify_request_path)
        if object_unavailable_protocol is not None:
            _setter("object_unavailable_protocol", object_unavailable_protocol)
        if object_unavailable_recovery is not None:
            _setter("object_unavailable_recovery", object_unavailable_recovery)
        if object_unavailable_redirect_method is not None:
            _setter("object_unavailable_redirect_method", object_unavailable_redirect_method)
        if object_unavailable_response_codes is not None:
            _setter("object_unavailable_response_codes", object_unavailable_response_codes)
        if object_unavailable_retry_limit is not None:
            _setter("object_unavailable_retry_limit", object_unavailable_retry_limit)
        if origin_unavailable_alternate_host is not None:
            _setter("origin_unavailable_alternate_host", origin_unavailable_alternate_host)
        if origin_unavailable_backup_host is not None:
            _setter("origin_unavailable_backup_host", origin_unavailable_backup_host)
        if origin_unavailable_blacklist_origin_ip is not None:
            _setter("origin_unavailable_blacklist_origin_ip", origin_unavailable_blacklist_origin_ip)
        if origin_unavailable_blacklist_window is not None:
            _setter("origin_unavailable_blacklist_window", origin_unavailable_blacklist_window)
        if origin_unavailable_change_protocol is not None:
            _setter("origin_unavailable_change_protocol", origin_unavailable_change_protocol)
        if origin_unavailable_detection_level is not None:
            _setter("origin_unavailable_detection_level", origin_unavailable_detection_level)
        if origin_unavailable_include_query_string is not None:
            _setter("origin_unavailable_include_query_string", origin_unavailable_include_query_string)
        if origin_unavailable_modified_path is not None:
            _setter("origin_unavailable_modified_path", origin_unavailable_modified_path)
        if origin_unavailable_modify_request_path is not None:
            _setter("origin_unavailable_modify_request_path", origin_unavailable_modify_request_path)
        if origin_unavailable_protocol is not None:
            _setter("origin_unavailable_protocol", origin_unavailable_protocol)
        if origin_unavailable_recovery is not None:
            _setter("origin_unavailable_recovery", origin_unavailable_recovery)
        if origin_unavailable_redirect_method is not None:
            _setter("origin_unavailable_redirect_method", origin_unavailable_redirect_method)
        if origin_unavailable_response_codes is not None:
            _setter("origin_unavailable_response_codes", origin_unavailable_response_codes)
        if origin_unavailable_retry_limit is not None:
            _setter("origin_unavailable_retry_limit", origin_unavailable_retry_limit)
        if origin_unresponsive_alternate_host is not None:
            _setter("origin_unresponsive_alternate_host", origin_unresponsive_alternate_host)
        if origin_unresponsive_backup_host is not None:
            _setter("origin_unresponsive_backup_host", origin_unresponsive_backup_host)
        if origin_unresponsive_blacklist_origin_ip is not None:
            _setter("origin_unresponsive_blacklist_origin_ip", origin_unresponsive_blacklist_origin_ip)
        if origin_unresponsive_blacklist_window is not None:
            _setter("origin_unresponsive_blacklist_window", origin_unresponsive_blacklist_window)
        if origin_unresponsive_change_protocol is not None:
            _setter("origin_unresponsive_change_protocol", origin_unresponsive_change_protocol)
        if origin_unresponsive_detection_level is not None:
            _setter("origin_unresponsive_detection_level", origin_unresponsive_detection_level)
        if origin_unresponsive_include_query_string is not None:
            _setter("origin_unresponsive_include_query_string", origin_unresponsive_include_query_string)
        if origin_unresponsive_modified_path is not None:
            _setter("origin_unresponsive_modified_path", origin_unresponsive_modified_path)
        if origin_unresponsive_modify_request_path is not None:
            _setter("origin_unresponsive_modify_request_path", origin_unresponsive_modify_request_path)
        if origin_unresponsive_protocol is not None:
            _setter("origin_unresponsive_protocol", origin_unresponsive_protocol)
        if origin_unresponsive_recovery is not None:
            _setter("origin_unresponsive_recovery", origin_unresponsive_recovery)
        if origin_unresponsive_redirect_method is not None:
            _setter("origin_unresponsive_redirect_method", origin_unresponsive_redirect_method)
        if origin_unresponsive_retry_limit is not None:
            _setter("origin_unresponsive_retry_limit", origin_unresponsive_retry_limit)
        if other_options is not None:
            _setter("other_options", other_options)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cacheErrorResponse")
    def cache_error_response(self) -> Optional[bool]:
        return pulumi.get(self, "cache_error_response")

    @property
    @pulumi.getter(name="cacheWindow")
    def cache_window(self) -> Optional[str]:
        return pulumi.get(self, "cache_window")

    @property
    @pulumi.getter(name="clientResponseCode")
    def client_response_code(self) -> Optional[str]:
        return pulumi.get(self, "client_response_code")

    @property
    @pulumi.getter(name="detectObjectUnavailable")
    def detect_object_unavailable(self) -> Optional[bool]:
        return pulumi.get(self, "detect_object_unavailable")

    @property
    @pulumi.getter(name="detectObjectUnavailableTitle")
    def detect_object_unavailable_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_object_unavailable_title")

    @property
    @pulumi.getter(name="detectOriginUnavailable")
    def detect_origin_unavailable(self) -> Optional[bool]:
        return pulumi.get(self, "detect_origin_unavailable")

    @property
    @pulumi.getter(name="detectOriginUnavailableTitle")
    def detect_origin_unavailable_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_origin_unavailable_title")

    @property
    @pulumi.getter(name="detectOriginUnresponsive")
    def detect_origin_unresponsive(self) -> Optional[bool]:
        return pulumi.get(self, "detect_origin_unresponsive")

    @property
    @pulumi.getter(name="detectOriginUnresponsiveTitle")
    def detect_origin_unresponsive_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_origin_unresponsive_title")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectUnavailableAlternateHost")
    def object_unavailable_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_alternate_host")

    @property
    @pulumi.getter(name="objectUnavailableBackupHost")
    def object_unavailable_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_backup_host")

    @property
    @pulumi.getter(name="objectUnavailableBlacklistOriginIp")
    def object_unavailable_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_blacklist_origin_ip")

    @property
    @pulumi.getter(name="objectUnavailableBlacklistWindow")
    def object_unavailable_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_blacklist_window")

    @property
    @pulumi.getter(name="objectUnavailableChangeProtocol")
    def object_unavailable_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_change_protocol")

    @property
    @pulumi.getter(name="objectUnavailableDetectionLevel")
    def object_unavailable_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_detection_level")

    @property
    @pulumi.getter(name="objectUnavailableIncludeQueryString")
    def object_unavailable_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_include_query_string")

    @property
    @pulumi.getter(name="objectUnavailableModifiedPath")
    def object_unavailable_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_modified_path")

    @property
    @pulumi.getter(name="objectUnavailableModifyRequestPath")
    def object_unavailable_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_modify_request_path")

    @property
    @pulumi.getter(name="objectUnavailableProtocol")
    def object_unavailable_protocol(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_protocol")

    @property
    @pulumi.getter(name="objectUnavailableRecovery")
    def object_unavailable_recovery(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_recovery")

    @property
    @pulumi.getter(name="objectUnavailableRedirectMethod")
    def object_unavailable_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "object_unavailable_redirect_method")

    @property
    @pulumi.getter(name="objectUnavailableResponseCodes")
    def object_unavailable_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "object_unavailable_response_codes")

    @property
    @pulumi.getter(name="objectUnavailableRetryLimit")
    def object_unavailable_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_retry_limit")

    @property
    @pulumi.getter(name="originUnavailableAlternateHost")
    def origin_unavailable_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_alternate_host")

    @property
    @pulumi.getter(name="originUnavailableBackupHost")
    def origin_unavailable_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_backup_host")

    @property
    @pulumi.getter(name="originUnavailableBlacklistOriginIp")
    def origin_unavailable_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_blacklist_origin_ip")

    @property
    @pulumi.getter(name="originUnavailableBlacklistWindow")
    def origin_unavailable_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_blacklist_window")

    @property
    @pulumi.getter(name="originUnavailableChangeProtocol")
    def origin_unavailable_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_change_protocol")

    @property
    @pulumi.getter(name="originUnavailableDetectionLevel")
    def origin_unavailable_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_detection_level")

    @property
    @pulumi.getter(name="originUnavailableIncludeQueryString")
    def origin_unavailable_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_include_query_string")

    @property
    @pulumi.getter(name="originUnavailableModifiedPath")
    def origin_unavailable_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_modified_path")

    @property
    @pulumi.getter(name="originUnavailableModifyRequestPath")
    def origin_unavailable_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_modify_request_path")

    @property
    @pulumi.getter(name="originUnavailableProtocol")
    def origin_unavailable_protocol(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_protocol")

    @property
    @pulumi.getter(name="originUnavailableRecovery")
    def origin_unavailable_recovery(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_recovery")

    @property
    @pulumi.getter(name="originUnavailableRedirectMethod")
    def origin_unavailable_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "origin_unavailable_redirect_method")

    @property
    @pulumi.getter(name="originUnavailableResponseCodes")
    def origin_unavailable_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "origin_unavailable_response_codes")

    @property
    @pulumi.getter(name="originUnavailableRetryLimit")
    def origin_unavailable_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_retry_limit")

    @property
    @pulumi.getter(name="originUnresponsiveAlternateHost")
    def origin_unresponsive_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_alternate_host")

    @property
    @pulumi.getter(name="originUnresponsiveBackupHost")
    def origin_unresponsive_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_backup_host")

    @property
    @pulumi.getter(name="originUnresponsiveBlacklistOriginIp")
    def origin_unresponsive_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_blacklist_origin_ip")

    @property
    @pulumi.getter(name="originUnresponsiveBlacklistWindow")
    def origin_unresponsive_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_blacklist_window")

    @property
    @pulumi.getter(name="originUnresponsiveChangeProtocol")
    def origin_unresponsive_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_change_protocol")

    @property
    @pulumi.getter(name="originUnresponsiveDetectionLevel")
    def origin_unresponsive_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_detection_level")

    @property
    @pulumi.getter(name="originUnresponsiveIncludeQueryString")
    def origin_unresponsive_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_include_query_string")

    @property
    @pulumi.getter(name="originUnresponsiveModifiedPath")
    def origin_unresponsive_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_modified_path")

    @property
    @pulumi.getter(name="originUnresponsiveModifyRequestPath")
    def origin_unresponsive_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_modify_request_path")

    @property
    @pulumi.getter(name="originUnresponsiveProtocol")
    def origin_unresponsive_protocol(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_protocol")

    @property
    @pulumi.getter(name="originUnresponsiveRecovery")
    def origin_unresponsive_recovery(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_recovery")

    @property
    @pulumi.getter(name="originUnresponsiveRedirectMethod")
    def origin_unresponsive_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "origin_unresponsive_redirect_method")

    @property
    @pulumi.getter(name="originUnresponsiveRetryLimit")
    def origin_unresponsive_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_retry_limit")

    @property
    @pulumi.getter(name="otherOptions")
    def other_options(self) -> Optional[str]:
        return pulumi.get(self, "other_options")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMetadataCachingResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorMetadataCachingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMobileSdkPerformanceResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 secondary_multipath_to_origin: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorMobileSdkPerformanceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            secondary_multipath_to_origin=secondary_multipath_to_origin,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             secondary_multipath_to_origin: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'secondaryMultipathToOrigin' in kwargs:
            secondary_multipath_to_origin = kwargs['secondaryMultipathToOrigin']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if secondary_multipath_to_origin is not None:
            _setter("secondary_multipath_to_origin", secondary_multipath_to_origin)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="secondaryMultipathToOrigin")
    def secondary_multipath_to_origin(self) -> Optional[bool]:
        return pulumi.get(self, "secondary_multipath_to_origin")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingRequestHeaderResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 standard_pass_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingRequestHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            avoid_duplicate_headers=avoid_duplicate_headers,
            custom_header_name=custom_header_name,
            header_value=header_value,
            locked=locked,
            new_header_value=new_header_value,
            standard_add_header_name=standard_add_header_name,
            standard_delete_header_name=standard_delete_header_name,
            standard_modify_header_name=standard_modify_header_name,
            standard_pass_header_name=standard_pass_header_name,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[str] = None,
             avoid_duplicate_headers: Optional[bool] = None,
             custom_header_name: Optional[str] = None,
             header_value: Optional[str] = None,
             locked: Optional[bool] = None,
             new_header_value: Optional[str] = None,
             standard_add_header_name: Optional[str] = None,
             standard_delete_header_name: Optional[str] = None,
             standard_modify_header_name: Optional[str] = None,
             standard_pass_header_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'avoidDuplicateHeaders' in kwargs:
            avoid_duplicate_headers = kwargs['avoidDuplicateHeaders']
        if 'customHeaderName' in kwargs:
            custom_header_name = kwargs['customHeaderName']
        if 'headerValue' in kwargs:
            header_value = kwargs['headerValue']
        if 'newHeaderValue' in kwargs:
            new_header_value = kwargs['newHeaderValue']
        if 'standardAddHeaderName' in kwargs:
            standard_add_header_name = kwargs['standardAddHeaderName']
        if 'standardDeleteHeaderName' in kwargs:
            standard_delete_header_name = kwargs['standardDeleteHeaderName']
        if 'standardModifyHeaderName' in kwargs:
            standard_modify_header_name = kwargs['standardModifyHeaderName']
        if 'standardPassHeaderName' in kwargs:
            standard_pass_header_name = kwargs['standardPassHeaderName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if action is not None:
            _setter("action", action)
        if avoid_duplicate_headers is not None:
            _setter("avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            _setter("custom_header_name", custom_header_name)
        if header_value is not None:
            _setter("header_value", header_value)
        if locked is not None:
            _setter("locked", locked)
        if new_header_value is not None:
            _setter("new_header_value", new_header_value)
        if standard_add_header_name is not None:
            _setter("standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            _setter("standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            _setter("standard_modify_header_name", standard_modify_header_name)
        if standard_pass_header_name is not None:
            _setter("standard_pass_header_name", standard_pass_header_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @property
    @pulumi.getter(name="standardPassHeaderName")
    def standard_pass_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_pass_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingResponseHeaderResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 standard_pass_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingResponseHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            avoid_duplicate_headers=avoid_duplicate_headers,
            custom_header_name=custom_header_name,
            header_value=header_value,
            locked=locked,
            new_header_value=new_header_value,
            standard_add_header_name=standard_add_header_name,
            standard_delete_header_name=standard_delete_header_name,
            standard_modify_header_name=standard_modify_header_name,
            standard_pass_header_name=standard_pass_header_name,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[str] = None,
             avoid_duplicate_headers: Optional[bool] = None,
             custom_header_name: Optional[str] = None,
             header_value: Optional[str] = None,
             locked: Optional[bool] = None,
             new_header_value: Optional[str] = None,
             standard_add_header_name: Optional[str] = None,
             standard_delete_header_name: Optional[str] = None,
             standard_modify_header_name: Optional[str] = None,
             standard_pass_header_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'avoidDuplicateHeaders' in kwargs:
            avoid_duplicate_headers = kwargs['avoidDuplicateHeaders']
        if 'customHeaderName' in kwargs:
            custom_header_name = kwargs['customHeaderName']
        if 'headerValue' in kwargs:
            header_value = kwargs['headerValue']
        if 'newHeaderValue' in kwargs:
            new_header_value = kwargs['newHeaderValue']
        if 'standardAddHeaderName' in kwargs:
            standard_add_header_name = kwargs['standardAddHeaderName']
        if 'standardDeleteHeaderName' in kwargs:
            standard_delete_header_name = kwargs['standardDeleteHeaderName']
        if 'standardModifyHeaderName' in kwargs:
            standard_modify_header_name = kwargs['standardModifyHeaderName']
        if 'standardPassHeaderName' in kwargs:
            standard_pass_header_name = kwargs['standardPassHeaderName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if action is not None:
            _setter("action", action)
        if avoid_duplicate_headers is not None:
            _setter("avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            _setter("custom_header_name", custom_header_name)
        if header_value is not None:
            _setter("header_value", header_value)
        if locked is not None:
            _setter("locked", locked)
        if new_header_value is not None:
            _setter("new_header_value", new_header_value)
        if standard_add_header_name is not None:
            _setter("standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            _setter("standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            _setter("standard_modify_header_name", standard_modify_header_name)
        if standard_pass_header_name is not None:
            _setter("standard_pass_header_name", standard_pass_header_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @property
    @pulumi.getter(name="standardPassHeaderName")
    def standard_pass_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_pass_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingRequestHeaderResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_multiple: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 regex_header_match: Optional[str] = None,
                 regex_header_replace: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingRequestHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            avoid_duplicate_headers=avoid_duplicate_headers,
            custom_header_name=custom_header_name,
            header_value=header_value,
            locked=locked,
            match_multiple=match_multiple,
            new_header_value=new_header_value,
            regex_header_match=regex_header_match,
            regex_header_replace=regex_header_replace,
            standard_add_header_name=standard_add_header_name,
            standard_delete_header_name=standard_delete_header_name,
            standard_modify_header_name=standard_modify_header_name,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[str] = None,
             avoid_duplicate_headers: Optional[bool] = None,
             custom_header_name: Optional[str] = None,
             header_value: Optional[str] = None,
             locked: Optional[bool] = None,
             match_multiple: Optional[bool] = None,
             new_header_value: Optional[str] = None,
             regex_header_match: Optional[str] = None,
             regex_header_replace: Optional[str] = None,
             standard_add_header_name: Optional[str] = None,
             standard_delete_header_name: Optional[str] = None,
             standard_modify_header_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'avoidDuplicateHeaders' in kwargs:
            avoid_duplicate_headers = kwargs['avoidDuplicateHeaders']
        if 'customHeaderName' in kwargs:
            custom_header_name = kwargs['customHeaderName']
        if 'headerValue' in kwargs:
            header_value = kwargs['headerValue']
        if 'matchMultiple' in kwargs:
            match_multiple = kwargs['matchMultiple']
        if 'newHeaderValue' in kwargs:
            new_header_value = kwargs['newHeaderValue']
        if 'regexHeaderMatch' in kwargs:
            regex_header_match = kwargs['regexHeaderMatch']
        if 'regexHeaderReplace' in kwargs:
            regex_header_replace = kwargs['regexHeaderReplace']
        if 'standardAddHeaderName' in kwargs:
            standard_add_header_name = kwargs['standardAddHeaderName']
        if 'standardDeleteHeaderName' in kwargs:
            standard_delete_header_name = kwargs['standardDeleteHeaderName']
        if 'standardModifyHeaderName' in kwargs:
            standard_modify_header_name = kwargs['standardModifyHeaderName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if action is not None:
            _setter("action", action)
        if avoid_duplicate_headers is not None:
            _setter("avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            _setter("custom_header_name", custom_header_name)
        if header_value is not None:
            _setter("header_value", header_value)
        if locked is not None:
            _setter("locked", locked)
        if match_multiple is not None:
            _setter("match_multiple", match_multiple)
        if new_header_value is not None:
            _setter("new_header_value", new_header_value)
        if regex_header_match is not None:
            _setter("regex_header_match", regex_header_match)
        if regex_header_replace is not None:
            _setter("regex_header_replace", regex_header_replace)
        if standard_add_header_name is not None:
            _setter("standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            _setter("standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            _setter("standard_modify_header_name", standard_modify_header_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @property
    @pulumi.getter(name="regexHeaderMatch")
    def regex_header_match(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_match")

    @property
    @pulumi.getter(name="regexHeaderReplace")
    def regex_header_replace(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_replace")

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingResponseHeaderResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_multiple: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 regex_header_match: Optional[str] = None,
                 regex_header_replace: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingResponseHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            avoid_duplicate_headers=avoid_duplicate_headers,
            custom_header_name=custom_header_name,
            header_value=header_value,
            locked=locked,
            match_multiple=match_multiple,
            new_header_value=new_header_value,
            regex_header_match=regex_header_match,
            regex_header_replace=regex_header_replace,
            standard_add_header_name=standard_add_header_name,
            standard_delete_header_name=standard_delete_header_name,
            standard_modify_header_name=standard_modify_header_name,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[str] = None,
             avoid_duplicate_headers: Optional[bool] = None,
             custom_header_name: Optional[str] = None,
             header_value: Optional[str] = None,
             locked: Optional[bool] = None,
             match_multiple: Optional[bool] = None,
             new_header_value: Optional[str] = None,
             regex_header_match: Optional[str] = None,
             regex_header_replace: Optional[str] = None,
             standard_add_header_name: Optional[str] = None,
             standard_delete_header_name: Optional[str] = None,
             standard_modify_header_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'avoidDuplicateHeaders' in kwargs:
            avoid_duplicate_headers = kwargs['avoidDuplicateHeaders']
        if 'customHeaderName' in kwargs:
            custom_header_name = kwargs['customHeaderName']
        if 'headerValue' in kwargs:
            header_value = kwargs['headerValue']
        if 'matchMultiple' in kwargs:
            match_multiple = kwargs['matchMultiple']
        if 'newHeaderValue' in kwargs:
            new_header_value = kwargs['newHeaderValue']
        if 'regexHeaderMatch' in kwargs:
            regex_header_match = kwargs['regexHeaderMatch']
        if 'regexHeaderReplace' in kwargs:
            regex_header_replace = kwargs['regexHeaderReplace']
        if 'standardAddHeaderName' in kwargs:
            standard_add_header_name = kwargs['standardAddHeaderName']
        if 'standardDeleteHeaderName' in kwargs:
            standard_delete_header_name = kwargs['standardDeleteHeaderName']
        if 'standardModifyHeaderName' in kwargs:
            standard_modify_header_name = kwargs['standardModifyHeaderName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if action is not None:
            _setter("action", action)
        if avoid_duplicate_headers is not None:
            _setter("avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            _setter("custom_header_name", custom_header_name)
        if header_value is not None:
            _setter("header_value", header_value)
        if locked is not None:
            _setter("locked", locked)
        if match_multiple is not None:
            _setter("match_multiple", match_multiple)
        if new_header_value is not None:
            _setter("new_header_value", new_header_value)
        if regex_header_match is not None:
            _setter("regex_header_match", regex_header_match)
        if regex_header_replace is not None:
            _setter("regex_header_replace", regex_header_replace)
        if standard_add_header_name is not None:
            _setter("standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            _setter("standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            _setter("standard_modify_header_name", standard_modify_header_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @property
    @pulumi.getter(name="regexHeaderMatch")
    def regex_header_match(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_match")

    @property
    @pulumi.getter(name="regexHeaderReplace")
    def regex_header_replace(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_replace")

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorModifyViaHeaderResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modification_option: Optional[str] = None,
                 rename_header_to: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorModifyViaHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            modification_option=modification_option,
            rename_header_to=rename_header_to,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             modification_option: Optional[str] = None,
             rename_header_to: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'modificationOption' in kwargs:
            modification_option = kwargs['modificationOption']
        if 'renameHeaderTo' in kwargs:
            rename_header_to = kwargs['renameHeaderTo']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if modification_option is not None:
            _setter("modification_option", modification_option)
        if rename_header_to is not None:
            _setter("rename_header_to", rename_header_to)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="modificationOption")
    def modification_option(self) -> Optional[str]:
        return pulumi.get(self, "modification_option")

    @property
    @pulumi.getter(name="renameHeaderTo")
    def rename_header_to(self) -> Optional[str]:
        return pulumi.get(self, "rename_header_to")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginResult(dict):
    def __init__(__self__, *,
                 cache_key_hostname: Optional[str] = None,
                 compress: Optional[bool] = None,
                 custom_certificate_authorities: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityResult']] = None,
                 custom_certificates: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateResult']] = None,
                 custom_forward_host_header: Optional[str] = None,
                 custom_valid_cn_values: Optional[Sequence[str]] = None,
                 enable_true_client_ip: Optional[bool] = None,
                 forward_host_header: Optional[str] = None,
                 hostname: Optional[str] = None,
                 http_port: Optional[int] = None,
                 https_port: Optional[int] = None,
                 ip_version: Optional[str] = None,
                 locked: Optional[bool] = None,
                 mslorigin: Optional[str] = None,
                 net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginNetStorageResult'] = None,
                 origin_certificate: Optional[str] = None,
                 origin_certs_to_honor: Optional[str] = None,
                 origin_id: Optional[str] = None,
                 origin_sni: Optional[bool] = None,
                 origin_type: Optional[str] = None,
                 ports: Optional[str] = None,
                 saas_cname_enabled: Optional[bool] = None,
                 saas_cname_level: Optional[int] = None,
                 saas_cookie: Optional[str] = None,
                 saas_query_string: Optional[str] = None,
                 saas_regex: Optional[str] = None,
                 saas_replace: Optional[str] = None,
                 saas_suffix: Optional[str] = None,
                 saas_type: Optional[str] = None,
                 second_hostname: Optional[str] = None,
                 second_hostname_enabled: Optional[bool] = None,
                 standard_certificate_authorities: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 true_client_ip_client_setting: Optional[bool] = None,
                 true_client_ip_header: Optional[str] = None,
                 use_unique_cache_key: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 verification_mode: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorOriginResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cache_key_hostname=cache_key_hostname,
            compress=compress,
            custom_certificate_authorities=custom_certificate_authorities,
            custom_certificates=custom_certificates,
            custom_forward_host_header=custom_forward_host_header,
            custom_valid_cn_values=custom_valid_cn_values,
            enable_true_client_ip=enable_true_client_ip,
            forward_host_header=forward_host_header,
            hostname=hostname,
            http_port=http_port,
            https_port=https_port,
            ip_version=ip_version,
            locked=locked,
            mslorigin=mslorigin,
            net_storage=net_storage,
            origin_certificate=origin_certificate,
            origin_certs_to_honor=origin_certs_to_honor,
            origin_id=origin_id,
            origin_sni=origin_sni,
            origin_type=origin_type,
            ports=ports,
            saas_cname_enabled=saas_cname_enabled,
            saas_cname_level=saas_cname_level,
            saas_cookie=saas_cookie,
            saas_query_string=saas_query_string,
            saas_regex=saas_regex,
            saas_replace=saas_replace,
            saas_suffix=saas_suffix,
            saas_type=saas_type,
            second_hostname=second_hostname,
            second_hostname_enabled=second_hostname_enabled,
            standard_certificate_authorities=standard_certificate_authorities,
            template_uuid=template_uuid,
            true_client_ip_client_setting=true_client_ip_client_setting,
            true_client_ip_header=true_client_ip_header,
            use_unique_cache_key=use_unique_cache_key,
            uuid=uuid,
            verification_mode=verification_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cache_key_hostname: Optional[str] = None,
             compress: Optional[bool] = None,
             custom_certificate_authorities: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityResult']] = None,
             custom_certificates: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateResult']] = None,
             custom_forward_host_header: Optional[str] = None,
             custom_valid_cn_values: Optional[Sequence[str]] = None,
             enable_true_client_ip: Optional[bool] = None,
             forward_host_header: Optional[str] = None,
             hostname: Optional[str] = None,
             http_port: Optional[int] = None,
             https_port: Optional[int] = None,
             ip_version: Optional[str] = None,
             locked: Optional[bool] = None,
             mslorigin: Optional[str] = None,
             net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginNetStorageResult'] = None,
             origin_certificate: Optional[str] = None,
             origin_certs_to_honor: Optional[str] = None,
             origin_id: Optional[str] = None,
             origin_sni: Optional[bool] = None,
             origin_type: Optional[str] = None,
             ports: Optional[str] = None,
             saas_cname_enabled: Optional[bool] = None,
             saas_cname_level: Optional[int] = None,
             saas_cookie: Optional[str] = None,
             saas_query_string: Optional[str] = None,
             saas_regex: Optional[str] = None,
             saas_replace: Optional[str] = None,
             saas_suffix: Optional[str] = None,
             saas_type: Optional[str] = None,
             second_hostname: Optional[str] = None,
             second_hostname_enabled: Optional[bool] = None,
             standard_certificate_authorities: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             true_client_ip_client_setting: Optional[bool] = None,
             true_client_ip_header: Optional[str] = None,
             use_unique_cache_key: Optional[bool] = None,
             uuid: Optional[str] = None,
             verification_mode: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cacheKeyHostname' in kwargs:
            cache_key_hostname = kwargs['cacheKeyHostname']
        if 'customCertificateAuthorities' in kwargs:
            custom_certificate_authorities = kwargs['customCertificateAuthorities']
        if 'customCertificates' in kwargs:
            custom_certificates = kwargs['customCertificates']
        if 'customForwardHostHeader' in kwargs:
            custom_forward_host_header = kwargs['customForwardHostHeader']
        if 'customValidCnValues' in kwargs:
            custom_valid_cn_values = kwargs['customValidCnValues']
        if 'enableTrueClientIp' in kwargs:
            enable_true_client_ip = kwargs['enableTrueClientIp']
        if 'forwardHostHeader' in kwargs:
            forward_host_header = kwargs['forwardHostHeader']
        if 'httpPort' in kwargs:
            http_port = kwargs['httpPort']
        if 'httpsPort' in kwargs:
            https_port = kwargs['httpsPort']
        if 'ipVersion' in kwargs:
            ip_version = kwargs['ipVersion']
        if 'netStorage' in kwargs:
            net_storage = kwargs['netStorage']
        if 'originCertificate' in kwargs:
            origin_certificate = kwargs['originCertificate']
        if 'originCertsToHonor' in kwargs:
            origin_certs_to_honor = kwargs['originCertsToHonor']
        if 'originId' in kwargs:
            origin_id = kwargs['originId']
        if 'originSni' in kwargs:
            origin_sni = kwargs['originSni']
        if 'originType' in kwargs:
            origin_type = kwargs['originType']
        if 'saasCnameEnabled' in kwargs:
            saas_cname_enabled = kwargs['saasCnameEnabled']
        if 'saasCnameLevel' in kwargs:
            saas_cname_level = kwargs['saasCnameLevel']
        if 'saasCookie' in kwargs:
            saas_cookie = kwargs['saasCookie']
        if 'saasQueryString' in kwargs:
            saas_query_string = kwargs['saasQueryString']
        if 'saasRegex' in kwargs:
            saas_regex = kwargs['saasRegex']
        if 'saasReplace' in kwargs:
            saas_replace = kwargs['saasReplace']
        if 'saasSuffix' in kwargs:
            saas_suffix = kwargs['saasSuffix']
        if 'saasType' in kwargs:
            saas_type = kwargs['saasType']
        if 'secondHostname' in kwargs:
            second_hostname = kwargs['secondHostname']
        if 'secondHostnameEnabled' in kwargs:
            second_hostname_enabled = kwargs['secondHostnameEnabled']
        if 'standardCertificateAuthorities' in kwargs:
            standard_certificate_authorities = kwargs['standardCertificateAuthorities']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'trueClientIpClientSetting' in kwargs:
            true_client_ip_client_setting = kwargs['trueClientIpClientSetting']
        if 'trueClientIpHeader' in kwargs:
            true_client_ip_header = kwargs['trueClientIpHeader']
        if 'useUniqueCacheKey' in kwargs:
            use_unique_cache_key = kwargs['useUniqueCacheKey']
        if 'verificationMode' in kwargs:
            verification_mode = kwargs['verificationMode']

        if cache_key_hostname is not None:
            _setter("cache_key_hostname", cache_key_hostname)
        if compress is not None:
            _setter("compress", compress)
        if custom_certificate_authorities is not None:
            _setter("custom_certificate_authorities", custom_certificate_authorities)
        if custom_certificates is not None:
            _setter("custom_certificates", custom_certificates)
        if custom_forward_host_header is not None:
            _setter("custom_forward_host_header", custom_forward_host_header)
        if custom_valid_cn_values is not None:
            _setter("custom_valid_cn_values", custom_valid_cn_values)
        if enable_true_client_ip is not None:
            _setter("enable_true_client_ip", enable_true_client_ip)
        if forward_host_header is not None:
            _setter("forward_host_header", forward_host_header)
        if hostname is not None:
            _setter("hostname", hostname)
        if http_port is not None:
            _setter("http_port", http_port)
        if https_port is not None:
            _setter("https_port", https_port)
        if ip_version is not None:
            _setter("ip_version", ip_version)
        if locked is not None:
            _setter("locked", locked)
        if mslorigin is not None:
            _setter("mslorigin", mslorigin)
        if net_storage is not None:
            _setter("net_storage", net_storage)
        if origin_certificate is not None:
            _setter("origin_certificate", origin_certificate)
        if origin_certs_to_honor is not None:
            _setter("origin_certs_to_honor", origin_certs_to_honor)
        if origin_id is not None:
            _setter("origin_id", origin_id)
        if origin_sni is not None:
            _setter("origin_sni", origin_sni)
        if origin_type is not None:
            _setter("origin_type", origin_type)
        if ports is not None:
            _setter("ports", ports)
        if saas_cname_enabled is not None:
            _setter("saas_cname_enabled", saas_cname_enabled)
        if saas_cname_level is not None:
            _setter("saas_cname_level", saas_cname_level)
        if saas_cookie is not None:
            _setter("saas_cookie", saas_cookie)
        if saas_query_string is not None:
            _setter("saas_query_string", saas_query_string)
        if saas_regex is not None:
            _setter("saas_regex", saas_regex)
        if saas_replace is not None:
            _setter("saas_replace", saas_replace)
        if saas_suffix is not None:
            _setter("saas_suffix", saas_suffix)
        if saas_type is not None:
            _setter("saas_type", saas_type)
        if second_hostname is not None:
            _setter("second_hostname", second_hostname)
        if second_hostname_enabled is not None:
            _setter("second_hostname_enabled", second_hostname_enabled)
        if standard_certificate_authorities is not None:
            _setter("standard_certificate_authorities", standard_certificate_authorities)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if true_client_ip_client_setting is not None:
            _setter("true_client_ip_client_setting", true_client_ip_client_setting)
        if true_client_ip_header is not None:
            _setter("true_client_ip_header", true_client_ip_header)
        if use_unique_cache_key is not None:
            _setter("use_unique_cache_key", use_unique_cache_key)
        if uuid is not None:
            _setter("uuid", uuid)
        if verification_mode is not None:
            _setter("verification_mode", verification_mode)

    @property
    @pulumi.getter(name="cacheKeyHostname")
    def cache_key_hostname(self) -> Optional[str]:
        return pulumi.get(self, "cache_key_hostname")

    @property
    @pulumi.getter
    def compress(self) -> Optional[bool]:
        return pulumi.get(self, "compress")

    @property
    @pulumi.getter(name="customCertificateAuthorities")
    def custom_certificate_authorities(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityResult']]:
        return pulumi.get(self, "custom_certificate_authorities")

    @property
    @pulumi.getter(name="customCertificates")
    def custom_certificates(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateResult']]:
        return pulumi.get(self, "custom_certificates")

    @property
    @pulumi.getter(name="customForwardHostHeader")
    def custom_forward_host_header(self) -> Optional[str]:
        return pulumi.get(self, "custom_forward_host_header")

    @property
    @pulumi.getter(name="customValidCnValues")
    def custom_valid_cn_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_valid_cn_values")

    @property
    @pulumi.getter(name="enableTrueClientIp")
    def enable_true_client_ip(self) -> Optional[bool]:
        return pulumi.get(self, "enable_true_client_ip")

    @property
    @pulumi.getter(name="forwardHostHeader")
    def forward_host_header(self) -> Optional[str]:
        return pulumi.get(self, "forward_host_header")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[int]:
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def mslorigin(self) -> Optional[str]:
        return pulumi.get(self, "mslorigin")

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginNetStorageResult']:
        return pulumi.get(self, "net_storage")

    @property
    @pulumi.getter(name="originCertificate")
    def origin_certificate(self) -> Optional[str]:
        return pulumi.get(self, "origin_certificate")

    @property
    @pulumi.getter(name="originCertsToHonor")
    def origin_certs_to_honor(self) -> Optional[str]:
        return pulumi.get(self, "origin_certs_to_honor")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="originSni")
    def origin_sni(self) -> Optional[bool]:
        return pulumi.get(self, "origin_sni")

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional[str]:
        return pulumi.get(self, "origin_type")

    @property
    @pulumi.getter
    def ports(self) -> Optional[str]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="saasCnameEnabled")
    def saas_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "saas_cname_enabled")

    @property
    @pulumi.getter(name="saasCnameLevel")
    def saas_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "saas_cname_level")

    @property
    @pulumi.getter(name="saasCookie")
    def saas_cookie(self) -> Optional[str]:
        return pulumi.get(self, "saas_cookie")

    @property
    @pulumi.getter(name="saasQueryString")
    def saas_query_string(self) -> Optional[str]:
        return pulumi.get(self, "saas_query_string")

    @property
    @pulumi.getter(name="saasRegex")
    def saas_regex(self) -> Optional[str]:
        return pulumi.get(self, "saas_regex")

    @property
    @pulumi.getter(name="saasReplace")
    def saas_replace(self) -> Optional[str]:
        return pulumi.get(self, "saas_replace")

    @property
    @pulumi.getter(name="saasSuffix")
    def saas_suffix(self) -> Optional[str]:
        return pulumi.get(self, "saas_suffix")

    @property
    @pulumi.getter(name="saasType")
    def saas_type(self) -> Optional[str]:
        return pulumi.get(self, "saas_type")

    @property
    @pulumi.getter(name="secondHostname")
    def second_hostname(self) -> Optional[str]:
        return pulumi.get(self, "second_hostname")

    @property
    @pulumi.getter(name="secondHostnameEnabled")
    def second_hostname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "second_hostname_enabled")

    @property
    @pulumi.getter(name="standardCertificateAuthorities")
    def standard_certificate_authorities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "standard_certificate_authorities")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="trueClientIpClientSetting")
    def true_client_ip_client_setting(self) -> Optional[bool]:
        return pulumi.get(self, "true_client_ip_client_setting")

    @property
    @pulumi.getter(name="trueClientIpHeader")
    def true_client_ip_header(self) -> Optional[str]:
        return pulumi.get(self, "true_client_ip_header")

    @property
    @pulumi.getter(name="useUniqueCacheKey")
    def use_unique_cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "use_unique_cache_key")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="verificationMode")
    def verification_mode(self) -> Optional[str]:
        return pulumi.get(self, "verification_mode")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsResult(dict):
    def __init__(__self__, *,
                 access_key_encrypted_storage: Optional[bool] = None,
                 adc_title: Optional[str] = None,
                 authentication_method: Optional[str] = None,
                 authentication_method_title: Optional[str] = None,
                 aws_access_key_id: Optional[str] = None,
                 aws_access_key_version_guid: Optional[str] = None,
                 aws_ar_region: Optional[str] = None,
                 aws_host: Optional[str] = None,
                 aws_region: Optional[str] = None,
                 aws_secret_access_key: Optional[str] = None,
                 aws_service: Optional[str] = None,
                 country: Optional[str] = None,
                 custom_sign_strings: Optional[Sequence[str]] = None,
                 direct_connect_geo: Optional[str] = None,
                 encoding_version: Optional[int] = None,
                 end_point_service: Optional[str] = None,
                 gcs_access_key_version_guid: Optional[str] = None,
                 gcs_hmac_key_access_id: Optional[str] = None,
                 gcs_hmac_key_secret: Optional[str] = None,
                 hostname_tag: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 mslkey: Optional[str] = None,
                 mslname: Optional[str] = None,
                 nonce: Optional[str] = None,
                 origin_location_title: Optional[str] = None,
                 property_id_tag: Optional[bool] = None,
                 role_arn: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_custom_sign_string: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_key_encrypted_storage=access_key_encrypted_storage,
            adc_title=adc_title,
            authentication_method=authentication_method,
            authentication_method_title=authentication_method_title,
            aws_access_key_id=aws_access_key_id,
            aws_access_key_version_guid=aws_access_key_version_guid,
            aws_ar_region=aws_ar_region,
            aws_host=aws_host,
            aws_region=aws_region,
            aws_secret_access_key=aws_secret_access_key,
            aws_service=aws_service,
            country=country,
            custom_sign_strings=custom_sign_strings,
            direct_connect_geo=direct_connect_geo,
            encoding_version=encoding_version,
            end_point_service=end_point_service,
            gcs_access_key_version_guid=gcs_access_key_version_guid,
            gcs_hmac_key_access_id=gcs_hmac_key_access_id,
            gcs_hmac_key_secret=gcs_hmac_key_secret,
            hostname_tag=hostname_tag,
            locked=locked,
            mslkey=mslkey,
            mslname=mslname,
            nonce=nonce,
            origin_location_title=origin_location_title,
            property_id_tag=property_id_tag,
            role_arn=role_arn,
            secret_key=secret_key,
            template_uuid=template_uuid,
            use_custom_sign_string=use_custom_sign_string,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_key_encrypted_storage: Optional[bool] = None,
             adc_title: Optional[str] = None,
             authentication_method: Optional[str] = None,
             authentication_method_title: Optional[str] = None,
             aws_access_key_id: Optional[str] = None,
             aws_access_key_version_guid: Optional[str] = None,
             aws_ar_region: Optional[str] = None,
             aws_host: Optional[str] = None,
             aws_region: Optional[str] = None,
             aws_secret_access_key: Optional[str] = None,
             aws_service: Optional[str] = None,
             country: Optional[str] = None,
             custom_sign_strings: Optional[Sequence[str]] = None,
             direct_connect_geo: Optional[str] = None,
             encoding_version: Optional[int] = None,
             end_point_service: Optional[str] = None,
             gcs_access_key_version_guid: Optional[str] = None,
             gcs_hmac_key_access_id: Optional[str] = None,
             gcs_hmac_key_secret: Optional[str] = None,
             hostname_tag: Optional[bool] = None,
             locked: Optional[bool] = None,
             mslkey: Optional[str] = None,
             mslname: Optional[str] = None,
             nonce: Optional[str] = None,
             origin_location_title: Optional[str] = None,
             property_id_tag: Optional[bool] = None,
             role_arn: Optional[str] = None,
             secret_key: Optional[str] = None,
             template_uuid: Optional[str] = None,
             use_custom_sign_string: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessKeyEncryptedStorage' in kwargs:
            access_key_encrypted_storage = kwargs['accessKeyEncryptedStorage']
        if 'adcTitle' in kwargs:
            adc_title = kwargs['adcTitle']
        if 'authenticationMethod' in kwargs:
            authentication_method = kwargs['authenticationMethod']
        if 'authenticationMethodTitle' in kwargs:
            authentication_method_title = kwargs['authenticationMethodTitle']
        if 'awsAccessKeyId' in kwargs:
            aws_access_key_id = kwargs['awsAccessKeyId']
        if 'awsAccessKeyVersionGuid' in kwargs:
            aws_access_key_version_guid = kwargs['awsAccessKeyVersionGuid']
        if 'awsArRegion' in kwargs:
            aws_ar_region = kwargs['awsArRegion']
        if 'awsHost' in kwargs:
            aws_host = kwargs['awsHost']
        if 'awsRegion' in kwargs:
            aws_region = kwargs['awsRegion']
        if 'awsSecretAccessKey' in kwargs:
            aws_secret_access_key = kwargs['awsSecretAccessKey']
        if 'awsService' in kwargs:
            aws_service = kwargs['awsService']
        if 'customSignStrings' in kwargs:
            custom_sign_strings = kwargs['customSignStrings']
        if 'directConnectGeo' in kwargs:
            direct_connect_geo = kwargs['directConnectGeo']
        if 'encodingVersion' in kwargs:
            encoding_version = kwargs['encodingVersion']
        if 'endPointService' in kwargs:
            end_point_service = kwargs['endPointService']
        if 'gcsAccessKeyVersionGuid' in kwargs:
            gcs_access_key_version_guid = kwargs['gcsAccessKeyVersionGuid']
        if 'gcsHmacKeyAccessId' in kwargs:
            gcs_hmac_key_access_id = kwargs['gcsHmacKeyAccessId']
        if 'gcsHmacKeySecret' in kwargs:
            gcs_hmac_key_secret = kwargs['gcsHmacKeySecret']
        if 'hostnameTag' in kwargs:
            hostname_tag = kwargs['hostnameTag']
        if 'originLocationTitle' in kwargs:
            origin_location_title = kwargs['originLocationTitle']
        if 'propertyIdTag' in kwargs:
            property_id_tag = kwargs['propertyIdTag']
        if 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useCustomSignString' in kwargs:
            use_custom_sign_string = kwargs['useCustomSignString']

        if access_key_encrypted_storage is not None:
            _setter("access_key_encrypted_storage", access_key_encrypted_storage)
        if adc_title is not None:
            _setter("adc_title", adc_title)
        if authentication_method is not None:
            _setter("authentication_method", authentication_method)
        if authentication_method_title is not None:
            _setter("authentication_method_title", authentication_method_title)
        if aws_access_key_id is not None:
            _setter("aws_access_key_id", aws_access_key_id)
        if aws_access_key_version_guid is not None:
            _setter("aws_access_key_version_guid", aws_access_key_version_guid)
        if aws_ar_region is not None:
            _setter("aws_ar_region", aws_ar_region)
        if aws_host is not None:
            _setter("aws_host", aws_host)
        if aws_region is not None:
            _setter("aws_region", aws_region)
        if aws_secret_access_key is not None:
            _setter("aws_secret_access_key", aws_secret_access_key)
        if aws_service is not None:
            _setter("aws_service", aws_service)
        if country is not None:
            _setter("country", country)
        if custom_sign_strings is not None:
            _setter("custom_sign_strings", custom_sign_strings)
        if direct_connect_geo is not None:
            _setter("direct_connect_geo", direct_connect_geo)
        if encoding_version is not None:
            _setter("encoding_version", encoding_version)
        if end_point_service is not None:
            _setter("end_point_service", end_point_service)
        if gcs_access_key_version_guid is not None:
            _setter("gcs_access_key_version_guid", gcs_access_key_version_guid)
        if gcs_hmac_key_access_id is not None:
            _setter("gcs_hmac_key_access_id", gcs_hmac_key_access_id)
        if gcs_hmac_key_secret is not None:
            _setter("gcs_hmac_key_secret", gcs_hmac_key_secret)
        if hostname_tag is not None:
            _setter("hostname_tag", hostname_tag)
        if locked is not None:
            _setter("locked", locked)
        if mslkey is not None:
            _setter("mslkey", mslkey)
        if mslname is not None:
            _setter("mslname", mslname)
        if nonce is not None:
            _setter("nonce", nonce)
        if origin_location_title is not None:
            _setter("origin_location_title", origin_location_title)
        if property_id_tag is not None:
            _setter("property_id_tag", property_id_tag)
        if role_arn is not None:
            _setter("role_arn", role_arn)
        if secret_key is not None:
            _setter("secret_key", secret_key)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_custom_sign_string is not None:
            _setter("use_custom_sign_string", use_custom_sign_string)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="accessKeyEncryptedStorage")
    def access_key_encrypted_storage(self) -> Optional[bool]:
        return pulumi.get(self, "access_key_encrypted_storage")

    @property
    @pulumi.getter(name="adcTitle")
    def adc_title(self) -> Optional[str]:
        return pulumi.get(self, "adc_title")

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> Optional[str]:
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter(name="authenticationMethodTitle")
    def authentication_method_title(self) -> Optional[str]:
        return pulumi.get(self, "authentication_method_title")

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsAccessKeyVersionGuid")
    def aws_access_key_version_guid(self) -> Optional[str]:
        return pulumi.get(self, "aws_access_key_version_guid")

    @property
    @pulumi.getter(name="awsArRegion")
    def aws_ar_region(self) -> Optional[str]:
        return pulumi.get(self, "aws_ar_region")

    @property
    @pulumi.getter(name="awsHost")
    def aws_host(self) -> Optional[str]:
        return pulumi.get(self, "aws_host")

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[str]:
        return pulumi.get(self, "aws_region")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "aws_secret_access_key")

    @property
    @pulumi.getter(name="awsService")
    def aws_service(self) -> Optional[str]:
        return pulumi.get(self, "aws_service")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="customSignStrings")
    def custom_sign_strings(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_sign_strings")

    @property
    @pulumi.getter(name="directConnectGeo")
    def direct_connect_geo(self) -> Optional[str]:
        return pulumi.get(self, "direct_connect_geo")

    @property
    @pulumi.getter(name="encodingVersion")
    def encoding_version(self) -> Optional[int]:
        return pulumi.get(self, "encoding_version")

    @property
    @pulumi.getter(name="endPointService")
    def end_point_service(self) -> Optional[str]:
        return pulumi.get(self, "end_point_service")

    @property
    @pulumi.getter(name="gcsAccessKeyVersionGuid")
    def gcs_access_key_version_guid(self) -> Optional[str]:
        return pulumi.get(self, "gcs_access_key_version_guid")

    @property
    @pulumi.getter(name="gcsHmacKeyAccessId")
    def gcs_hmac_key_access_id(self) -> Optional[str]:
        return pulumi.get(self, "gcs_hmac_key_access_id")

    @property
    @pulumi.getter(name="gcsHmacKeySecret")
    def gcs_hmac_key_secret(self) -> Optional[str]:
        return pulumi.get(self, "gcs_hmac_key_secret")

    @property
    @pulumi.getter(name="hostnameTag")
    def hostname_tag(self) -> Optional[bool]:
        return pulumi.get(self, "hostname_tag")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def mslkey(self) -> Optional[str]:
        return pulumi.get(self, "mslkey")

    @property
    @pulumi.getter
    def mslname(self) -> Optional[str]:
        return pulumi.get(self, "mslname")

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @property
    @pulumi.getter(name="originLocationTitle")
    def origin_location_title(self) -> Optional[str]:
        return pulumi.get(self, "origin_location_title")

    @property
    @pulumi.getter(name="propertyIdTag")
    def property_id_tag(self) -> Optional[bool]:
        return pulumi.get(self, "property_id_tag")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useCustomSignString")
    def use_custom_sign_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_custom_sign_string")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsWsdResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origintype: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsWsdResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            origintype=origintype,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             origintype: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if origintype is not None:
            _setter("origintype", origintype)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def origintype(self) -> Optional[str]:
        return pulumi.get(self, "origintype")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateResult(dict):
    def __init__(__self__, *,
                 can_be_ca: Optional[bool] = None,
                 can_be_leaf: Optional[bool] = None,
                 issuer_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateIssuerRdnsResult'] = None,
                 not_after: Optional[int] = None,
                 not_before: Optional[int] = None,
                 pem_encoded_cert: Optional[str] = None,
                 public_key: Optional[str] = None,
                 public_key_algorithm: Optional[str] = None,
                 public_key_format: Optional[str] = None,
                 self_signed: Optional[bool] = None,
                 serial_number: Optional[str] = None,
                 sha1_fingerprint: Optional[str] = None,
                 sig_alg_name: Optional[str] = None,
                 subject_alternative_names: Optional[Sequence[str]] = None,
                 subject_cn: Optional[str] = None,
                 subject_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateSubjectRdnsResult'] = None,
                 version: Optional[int] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            can_be_ca=can_be_ca,
            can_be_leaf=can_be_leaf,
            issuer_rdns=issuer_rdns,
            not_after=not_after,
            not_before=not_before,
            pem_encoded_cert=pem_encoded_cert,
            public_key=public_key,
            public_key_algorithm=public_key_algorithm,
            public_key_format=public_key_format,
            self_signed=self_signed,
            serial_number=serial_number,
            sha1_fingerprint=sha1_fingerprint,
            sig_alg_name=sig_alg_name,
            subject_alternative_names=subject_alternative_names,
            subject_cn=subject_cn,
            subject_rdns=subject_rdns,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             can_be_ca: Optional[bool] = None,
             can_be_leaf: Optional[bool] = None,
             issuer_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateIssuerRdnsResult'] = None,
             not_after: Optional[int] = None,
             not_before: Optional[int] = None,
             pem_encoded_cert: Optional[str] = None,
             public_key: Optional[str] = None,
             public_key_algorithm: Optional[str] = None,
             public_key_format: Optional[str] = None,
             self_signed: Optional[bool] = None,
             serial_number: Optional[str] = None,
             sha1_fingerprint: Optional[str] = None,
             sig_alg_name: Optional[str] = None,
             subject_alternative_names: Optional[Sequence[str]] = None,
             subject_cn: Optional[str] = None,
             subject_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateSubjectRdnsResult'] = None,
             version: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'canBeCa' in kwargs:
            can_be_ca = kwargs['canBeCa']
        if 'canBeLeaf' in kwargs:
            can_be_leaf = kwargs['canBeLeaf']
        if 'issuerRdns' in kwargs:
            issuer_rdns = kwargs['issuerRdns']
        if 'notAfter' in kwargs:
            not_after = kwargs['notAfter']
        if 'notBefore' in kwargs:
            not_before = kwargs['notBefore']
        if 'pemEncodedCert' in kwargs:
            pem_encoded_cert = kwargs['pemEncodedCert']
        if 'publicKey' in kwargs:
            public_key = kwargs['publicKey']
        if 'publicKeyAlgorithm' in kwargs:
            public_key_algorithm = kwargs['publicKeyAlgorithm']
        if 'publicKeyFormat' in kwargs:
            public_key_format = kwargs['publicKeyFormat']
        if 'selfSigned' in kwargs:
            self_signed = kwargs['selfSigned']
        if 'serialNumber' in kwargs:
            serial_number = kwargs['serialNumber']
        if 'sha1Fingerprint' in kwargs:
            sha1_fingerprint = kwargs['sha1Fingerprint']
        if 'sigAlgName' in kwargs:
            sig_alg_name = kwargs['sigAlgName']
        if 'subjectAlternativeNames' in kwargs:
            subject_alternative_names = kwargs['subjectAlternativeNames']
        if 'subjectCn' in kwargs:
            subject_cn = kwargs['subjectCn']
        if 'subjectRdns' in kwargs:
            subject_rdns = kwargs['subjectRdns']

        if can_be_ca is not None:
            _setter("can_be_ca", can_be_ca)
        if can_be_leaf is not None:
            _setter("can_be_leaf", can_be_leaf)
        if issuer_rdns is not None:
            _setter("issuer_rdns", issuer_rdns)
        if not_after is not None:
            _setter("not_after", not_after)
        if not_before is not None:
            _setter("not_before", not_before)
        if pem_encoded_cert is not None:
            _setter("pem_encoded_cert", pem_encoded_cert)
        if public_key is not None:
            _setter("public_key", public_key)
        if public_key_algorithm is not None:
            _setter("public_key_algorithm", public_key_algorithm)
        if public_key_format is not None:
            _setter("public_key_format", public_key_format)
        if self_signed is not None:
            _setter("self_signed", self_signed)
        if serial_number is not None:
            _setter("serial_number", serial_number)
        if sha1_fingerprint is not None:
            _setter("sha1_fingerprint", sha1_fingerprint)
        if sig_alg_name is not None:
            _setter("sig_alg_name", sig_alg_name)
        if subject_alternative_names is not None:
            _setter("subject_alternative_names", subject_alternative_names)
        if subject_cn is not None:
            _setter("subject_cn", subject_cn)
        if subject_rdns is not None:
            _setter("subject_rdns", subject_rdns)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter(name="canBeCa")
    def can_be_ca(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_ca")

    @property
    @pulumi.getter(name="canBeLeaf")
    def can_be_leaf(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_leaf")

    @property
    @pulumi.getter(name="issuerRdns")
    def issuer_rdns(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateIssuerRdnsResult']:
        return pulumi.get(self, "issuer_rdns")

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> Optional[int]:
        return pulumi.get(self, "not_after")

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[int]:
        return pulumi.get(self, "not_before")

    @property
    @pulumi.getter(name="pemEncodedCert")
    def pem_encoded_cert(self) -> Optional[str]:
        return pulumi.get(self, "pem_encoded_cert")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="publicKeyAlgorithm")
    def public_key_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "public_key_algorithm")

    @property
    @pulumi.getter(name="publicKeyFormat")
    def public_key_format(self) -> Optional[str]:
        return pulumi.get(self, "public_key_format")

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional[bool]:
        return pulumi.get(self, "self_signed")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="sha1Fingerprint")
    def sha1_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "sha1_fingerprint")

    @property
    @pulumi.getter(name="sigAlgName")
    def sig_alg_name(self) -> Optional[str]:
        return pulumi.get(self, "sig_alg_name")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter(name="subjectCn")
    def subject_cn(self) -> Optional[str]:
        return pulumi.get(self, "subject_cn")

    @property
    @pulumi.getter(name="subjectRdns")
    def subject_rdns(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateSubjectRdnsResult']:
        return pulumi.get(self, "subject_rdns")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityResult(dict):
    def __init__(__self__, *,
                 can_be_ca: Optional[bool] = None,
                 can_be_leaf: Optional[bool] = None,
                 issuer_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult'] = None,
                 not_after: Optional[int] = None,
                 not_before: Optional[int] = None,
                 pem_encoded_cert: Optional[str] = None,
                 public_key: Optional[str] = None,
                 public_key_algorithm: Optional[str] = None,
                 public_key_format: Optional[str] = None,
                 self_signed: Optional[bool] = None,
                 serial_number: Optional[str] = None,
                 sha1_fingerprint: Optional[str] = None,
                 sig_alg_name: Optional[str] = None,
                 subject_alternative_names: Optional[Sequence[str]] = None,
                 subject_cn: Optional[str] = None,
                 subject_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult'] = None,
                 version: Optional[int] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            can_be_ca=can_be_ca,
            can_be_leaf=can_be_leaf,
            issuer_rdns=issuer_rdns,
            not_after=not_after,
            not_before=not_before,
            pem_encoded_cert=pem_encoded_cert,
            public_key=public_key,
            public_key_algorithm=public_key_algorithm,
            public_key_format=public_key_format,
            self_signed=self_signed,
            serial_number=serial_number,
            sha1_fingerprint=sha1_fingerprint,
            sig_alg_name=sig_alg_name,
            subject_alternative_names=subject_alternative_names,
            subject_cn=subject_cn,
            subject_rdns=subject_rdns,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             can_be_ca: Optional[bool] = None,
             can_be_leaf: Optional[bool] = None,
             issuer_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult'] = None,
             not_after: Optional[int] = None,
             not_before: Optional[int] = None,
             pem_encoded_cert: Optional[str] = None,
             public_key: Optional[str] = None,
             public_key_algorithm: Optional[str] = None,
             public_key_format: Optional[str] = None,
             self_signed: Optional[bool] = None,
             serial_number: Optional[str] = None,
             sha1_fingerprint: Optional[str] = None,
             sig_alg_name: Optional[str] = None,
             subject_alternative_names: Optional[Sequence[str]] = None,
             subject_cn: Optional[str] = None,
             subject_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult'] = None,
             version: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'canBeCa' in kwargs:
            can_be_ca = kwargs['canBeCa']
        if 'canBeLeaf' in kwargs:
            can_be_leaf = kwargs['canBeLeaf']
        if 'issuerRdns' in kwargs:
            issuer_rdns = kwargs['issuerRdns']
        if 'notAfter' in kwargs:
            not_after = kwargs['notAfter']
        if 'notBefore' in kwargs:
            not_before = kwargs['notBefore']
        if 'pemEncodedCert' in kwargs:
            pem_encoded_cert = kwargs['pemEncodedCert']
        if 'publicKey' in kwargs:
            public_key = kwargs['publicKey']
        if 'publicKeyAlgorithm' in kwargs:
            public_key_algorithm = kwargs['publicKeyAlgorithm']
        if 'publicKeyFormat' in kwargs:
            public_key_format = kwargs['publicKeyFormat']
        if 'selfSigned' in kwargs:
            self_signed = kwargs['selfSigned']
        if 'serialNumber' in kwargs:
            serial_number = kwargs['serialNumber']
        if 'sha1Fingerprint' in kwargs:
            sha1_fingerprint = kwargs['sha1Fingerprint']
        if 'sigAlgName' in kwargs:
            sig_alg_name = kwargs['sigAlgName']
        if 'subjectAlternativeNames' in kwargs:
            subject_alternative_names = kwargs['subjectAlternativeNames']
        if 'subjectCn' in kwargs:
            subject_cn = kwargs['subjectCn']
        if 'subjectRdns' in kwargs:
            subject_rdns = kwargs['subjectRdns']

        if can_be_ca is not None:
            _setter("can_be_ca", can_be_ca)
        if can_be_leaf is not None:
            _setter("can_be_leaf", can_be_leaf)
        if issuer_rdns is not None:
            _setter("issuer_rdns", issuer_rdns)
        if not_after is not None:
            _setter("not_after", not_after)
        if not_before is not None:
            _setter("not_before", not_before)
        if pem_encoded_cert is not None:
            _setter("pem_encoded_cert", pem_encoded_cert)
        if public_key is not None:
            _setter("public_key", public_key)
        if public_key_algorithm is not None:
            _setter("public_key_algorithm", public_key_algorithm)
        if public_key_format is not None:
            _setter("public_key_format", public_key_format)
        if self_signed is not None:
            _setter("self_signed", self_signed)
        if serial_number is not None:
            _setter("serial_number", serial_number)
        if sha1_fingerprint is not None:
            _setter("sha1_fingerprint", sha1_fingerprint)
        if sig_alg_name is not None:
            _setter("sig_alg_name", sig_alg_name)
        if subject_alternative_names is not None:
            _setter("subject_alternative_names", subject_alternative_names)
        if subject_cn is not None:
            _setter("subject_cn", subject_cn)
        if subject_rdns is not None:
            _setter("subject_rdns", subject_rdns)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter(name="canBeCa")
    def can_be_ca(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_ca")

    @property
    @pulumi.getter(name="canBeLeaf")
    def can_be_leaf(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_leaf")

    @property
    @pulumi.getter(name="issuerRdns")
    def issuer_rdns(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult']:
        return pulumi.get(self, "issuer_rdns")

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> Optional[int]:
        return pulumi.get(self, "not_after")

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[int]:
        return pulumi.get(self, "not_before")

    @property
    @pulumi.getter(name="pemEncodedCert")
    def pem_encoded_cert(self) -> Optional[str]:
        return pulumi.get(self, "pem_encoded_cert")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="publicKeyAlgorithm")
    def public_key_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "public_key_algorithm")

    @property
    @pulumi.getter(name="publicKeyFormat")
    def public_key_format(self) -> Optional[str]:
        return pulumi.get(self, "public_key_format")

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional[bool]:
        return pulumi.get(self, "self_signed")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="sha1Fingerprint")
    def sha1_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "sha1_fingerprint")

    @property
    @pulumi.getter(name="sigAlgName")
    def sig_alg_name(self) -> Optional[str]:
        return pulumi.get(self, "sig_alg_name")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter(name="subjectCn")
    def subject_cn(self) -> Optional[str]:
        return pulumi.get(self, "subject_cn")

    @property
    @pulumi.getter(name="subjectRdns")
    def subject_rdns(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult']:
        return pulumi.get(self, "subject_rdns")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult(dict):
    def __init__(__self__, *,
                 c: Optional[str] = None,
                 cn: Optional[str] = None,
                 o: Optional[str] = None,
                 ou: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            c=c,
            cn=cn,
            o=o,
            ou=ou,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             c: Optional[str] = None,
             cn: Optional[str] = None,
             o: Optional[str] = None,
             ou: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if c is not None:
            _setter("c", c)
        if cn is not None:
            _setter("cn", cn)
        if o is not None:
            _setter("o", o)
        if ou is not None:
            _setter("ou", ou)

    @property
    @pulumi.getter
    def c(self) -> Optional[str]:
        return pulumi.get(self, "c")

    @property
    @pulumi.getter
    def cn(self) -> Optional[str]:
        return pulumi.get(self, "cn")

    @property
    @pulumi.getter
    def o(self) -> Optional[str]:
        return pulumi.get(self, "o")

    @property
    @pulumi.getter
    def ou(self) -> Optional[str]:
        return pulumi.get(self, "ou")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult(dict):
    def __init__(__self__, *,
                 c: Optional[str] = None,
                 cn: Optional[str] = None,
                 o: Optional[str] = None,
                 ou: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            c=c,
            cn=cn,
            o=o,
            ou=ou,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             c: Optional[str] = None,
             cn: Optional[str] = None,
             o: Optional[str] = None,
             ou: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if c is not None:
            _setter("c", c)
        if cn is not None:
            _setter("cn", cn)
        if o is not None:
            _setter("o", o)
        if ou is not None:
            _setter("ou", ou)

    @property
    @pulumi.getter
    def c(self) -> Optional[str]:
        return pulumi.get(self, "c")

    @property
    @pulumi.getter
    def cn(self) -> Optional[str]:
        return pulumi.get(self, "cn")

    @property
    @pulumi.getter
    def o(self) -> Optional[str]:
        return pulumi.get(self, "o")

    @property
    @pulumi.getter
    def ou(self) -> Optional[str]:
        return pulumi.get(self, "ou")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateIssuerRdnsResult(dict):
    def __init__(__self__, *,
                 c: Optional[str] = None,
                 cn: Optional[str] = None,
                 o: Optional[str] = None,
                 ou: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateIssuerRdnsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            c=c,
            cn=cn,
            o=o,
            ou=ou,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             c: Optional[str] = None,
             cn: Optional[str] = None,
             o: Optional[str] = None,
             ou: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if c is not None:
            _setter("c", c)
        if cn is not None:
            _setter("cn", cn)
        if o is not None:
            _setter("o", o)
        if ou is not None:
            _setter("ou", ou)

    @property
    @pulumi.getter
    def c(self) -> Optional[str]:
        return pulumi.get(self, "c")

    @property
    @pulumi.getter
    def cn(self) -> Optional[str]:
        return pulumi.get(self, "cn")

    @property
    @pulumi.getter
    def o(self) -> Optional[str]:
        return pulumi.get(self, "o")

    @property
    @pulumi.getter
    def ou(self) -> Optional[str]:
        return pulumi.get(self, "ou")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateSubjectRdnsResult(dict):
    def __init__(__self__, *,
                 c: Optional[str] = None,
                 cn: Optional[str] = None,
                 o: Optional[str] = None,
                 ou: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateSubjectRdnsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            c=c,
            cn=cn,
            o=o,
            ou=ou,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             c: Optional[str] = None,
             cn: Optional[str] = None,
             o: Optional[str] = None,
             ou: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if c is not None:
            _setter("c", c)
        if cn is not None:
            _setter("cn", cn)
        if o is not None:
            _setter("o", o)
        if ou is not None:
            _setter("ou", ou)

    @property
    @pulumi.getter
    def c(self) -> Optional[str]:
        return pulumi.get(self, "c")

    @property
    @pulumi.getter
    def cn(self) -> Optional[str]:
        return pulumi.get(self, "cn")

    @property
    @pulumi.getter
    def o(self) -> Optional[str]:
        return pulumi.get(self, "o")

    @property
    @pulumi.getter
    def ou(self) -> Optional[str]:
        return pulumi.get(self, "ou")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryMethodResult(dict):
    def __init__(__self__, *,
                 custom_status_code: Optional[str] = None,
                 locked: Optional[bool] = None,
                 recovery_method: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryMethodResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_status_code=custom_status_code,
            locked=locked,
            recovery_method=recovery_method,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_status_code: Optional[str] = None,
             locked: Optional[bool] = None,
             recovery_method: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customStatusCode' in kwargs:
            custom_status_code = kwargs['customStatusCode']
        if 'recoveryMethod' in kwargs:
            recovery_method = kwargs['recoveryMethod']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if custom_status_code is not None:
            _setter("custom_status_code", custom_status_code)
        if locked is not None:
            _setter("locked", locked)
        if recovery_method is not None:
            _setter("recovery_method", recovery_method)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="customStatusCode")
    def custom_status_code(self) -> Optional[str]:
        return pulumi.get(self, "custom_status_code")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="recoveryMethod")
    def recovery_method(self) -> Optional[str]:
        return pulumi.get(self, "recovery_method")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryPolicyResult(dict):
    def __init__(__self__, *,
                 binary_equivalent_content: Optional[bool] = None,
                 enable_ip_avoidance: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 ip_avoidance_error_threshold: Optional[int] = None,
                 ip_avoidance_retry_interval: Optional[int] = None,
                 locked: Optional[bool] = None,
                 monitor_origin_responsiveness: Optional[bool] = None,
                 monitor_response_codes1s: Optional[Sequence[str]] = None,
                 monitor_response_codes2s: Optional[Sequence[str]] = None,
                 monitor_response_codes3s: Optional[Sequence[str]] = None,
                 monitor_status_codes1: Optional[bool] = None,
                 monitor_status_codes1_enable_recovery: Optional[bool] = None,
                 monitor_status_codes1_enable_retry: Optional[bool] = None,
                 monitor_status_codes1_recovery_config_name: Optional[str] = None,
                 monitor_status_codes2: Optional[bool] = None,
                 monitor_status_codes2_enable_recovery: Optional[bool] = None,
                 monitor_status_codes2_enable_retry: Optional[bool] = None,
                 monitor_status_codes2_recovery_config_name: Optional[str] = None,
                 monitor_status_codes3: Optional[bool] = None,
                 monitor_status_codes3_enable_recovery: Optional[bool] = None,
                 monitor_status_codes3_enable_retry: Optional[bool] = None,
                 monitor_status_codes3_recovery_config_name: Optional[str] = None,
                 origin_responsiveness_custom_timeout: Optional[int] = None,
                 origin_responsiveness_enable_recovery: Optional[bool] = None,
                 origin_responsiveness_enable_retry: Optional[bool] = None,
                 origin_responsiveness_monitoring: Optional[str] = None,
                 origin_responsiveness_recovery_config_name: Optional[str] = None,
                 origin_responsiveness_timeout: Optional[str] = None,
                 status_code_monitoring1: Optional[str] = None,
                 status_code_monitoring2: Optional[str] = None,
                 status_code_monitoring3: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tuning_parameters: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            binary_equivalent_content=binary_equivalent_content,
            enable_ip_avoidance=enable_ip_avoidance,
            enabled=enabled,
            ip_avoidance_error_threshold=ip_avoidance_error_threshold,
            ip_avoidance_retry_interval=ip_avoidance_retry_interval,
            locked=locked,
            monitor_origin_responsiveness=monitor_origin_responsiveness,
            monitor_response_codes1s=monitor_response_codes1s,
            monitor_response_codes2s=monitor_response_codes2s,
            monitor_response_codes3s=monitor_response_codes3s,
            monitor_status_codes1=monitor_status_codes1,
            monitor_status_codes1_enable_recovery=monitor_status_codes1_enable_recovery,
            monitor_status_codes1_enable_retry=monitor_status_codes1_enable_retry,
            monitor_status_codes1_recovery_config_name=monitor_status_codes1_recovery_config_name,
            monitor_status_codes2=monitor_status_codes2,
            monitor_status_codes2_enable_recovery=monitor_status_codes2_enable_recovery,
            monitor_status_codes2_enable_retry=monitor_status_codes2_enable_retry,
            monitor_status_codes2_recovery_config_name=monitor_status_codes2_recovery_config_name,
            monitor_status_codes3=monitor_status_codes3,
            monitor_status_codes3_enable_recovery=monitor_status_codes3_enable_recovery,
            monitor_status_codes3_enable_retry=monitor_status_codes3_enable_retry,
            monitor_status_codes3_recovery_config_name=monitor_status_codes3_recovery_config_name,
            origin_responsiveness_custom_timeout=origin_responsiveness_custom_timeout,
            origin_responsiveness_enable_recovery=origin_responsiveness_enable_recovery,
            origin_responsiveness_enable_retry=origin_responsiveness_enable_retry,
            origin_responsiveness_monitoring=origin_responsiveness_monitoring,
            origin_responsiveness_recovery_config_name=origin_responsiveness_recovery_config_name,
            origin_responsiveness_timeout=origin_responsiveness_timeout,
            status_code_monitoring1=status_code_monitoring1,
            status_code_monitoring2=status_code_monitoring2,
            status_code_monitoring3=status_code_monitoring3,
            template_uuid=template_uuid,
            tuning_parameters=tuning_parameters,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             binary_equivalent_content: Optional[bool] = None,
             enable_ip_avoidance: Optional[bool] = None,
             enabled: Optional[bool] = None,
             ip_avoidance_error_threshold: Optional[int] = None,
             ip_avoidance_retry_interval: Optional[int] = None,
             locked: Optional[bool] = None,
             monitor_origin_responsiveness: Optional[bool] = None,
             monitor_response_codes1s: Optional[Sequence[str]] = None,
             monitor_response_codes2s: Optional[Sequence[str]] = None,
             monitor_response_codes3s: Optional[Sequence[str]] = None,
             monitor_status_codes1: Optional[bool] = None,
             monitor_status_codes1_enable_recovery: Optional[bool] = None,
             monitor_status_codes1_enable_retry: Optional[bool] = None,
             monitor_status_codes1_recovery_config_name: Optional[str] = None,
             monitor_status_codes2: Optional[bool] = None,
             monitor_status_codes2_enable_recovery: Optional[bool] = None,
             monitor_status_codes2_enable_retry: Optional[bool] = None,
             monitor_status_codes2_recovery_config_name: Optional[str] = None,
             monitor_status_codes3: Optional[bool] = None,
             monitor_status_codes3_enable_recovery: Optional[bool] = None,
             monitor_status_codes3_enable_retry: Optional[bool] = None,
             monitor_status_codes3_recovery_config_name: Optional[str] = None,
             origin_responsiveness_custom_timeout: Optional[int] = None,
             origin_responsiveness_enable_recovery: Optional[bool] = None,
             origin_responsiveness_enable_retry: Optional[bool] = None,
             origin_responsiveness_monitoring: Optional[str] = None,
             origin_responsiveness_recovery_config_name: Optional[str] = None,
             origin_responsiveness_timeout: Optional[str] = None,
             status_code_monitoring1: Optional[str] = None,
             status_code_monitoring2: Optional[str] = None,
             status_code_monitoring3: Optional[str] = None,
             template_uuid: Optional[str] = None,
             tuning_parameters: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'binaryEquivalentContent' in kwargs:
            binary_equivalent_content = kwargs['binaryEquivalentContent']
        if 'enableIpAvoidance' in kwargs:
            enable_ip_avoidance = kwargs['enableIpAvoidance']
        if 'ipAvoidanceErrorThreshold' in kwargs:
            ip_avoidance_error_threshold = kwargs['ipAvoidanceErrorThreshold']
        if 'ipAvoidanceRetryInterval' in kwargs:
            ip_avoidance_retry_interval = kwargs['ipAvoidanceRetryInterval']
        if 'monitorOriginResponsiveness' in kwargs:
            monitor_origin_responsiveness = kwargs['monitorOriginResponsiveness']
        if 'monitorResponseCodes1s' in kwargs:
            monitor_response_codes1s = kwargs['monitorResponseCodes1s']
        if 'monitorResponseCodes2s' in kwargs:
            monitor_response_codes2s = kwargs['monitorResponseCodes2s']
        if 'monitorResponseCodes3s' in kwargs:
            monitor_response_codes3s = kwargs['monitorResponseCodes3s']
        if 'monitorStatusCodes1' in kwargs:
            monitor_status_codes1 = kwargs['monitorStatusCodes1']
        if 'monitorStatusCodes1EnableRecovery' in kwargs:
            monitor_status_codes1_enable_recovery = kwargs['monitorStatusCodes1EnableRecovery']
        if 'monitorStatusCodes1EnableRetry' in kwargs:
            monitor_status_codes1_enable_retry = kwargs['monitorStatusCodes1EnableRetry']
        if 'monitorStatusCodes1RecoveryConfigName' in kwargs:
            monitor_status_codes1_recovery_config_name = kwargs['monitorStatusCodes1RecoveryConfigName']
        if 'monitorStatusCodes2' in kwargs:
            monitor_status_codes2 = kwargs['monitorStatusCodes2']
        if 'monitorStatusCodes2EnableRecovery' in kwargs:
            monitor_status_codes2_enable_recovery = kwargs['monitorStatusCodes2EnableRecovery']
        if 'monitorStatusCodes2EnableRetry' in kwargs:
            monitor_status_codes2_enable_retry = kwargs['monitorStatusCodes2EnableRetry']
        if 'monitorStatusCodes2RecoveryConfigName' in kwargs:
            monitor_status_codes2_recovery_config_name = kwargs['monitorStatusCodes2RecoveryConfigName']
        if 'monitorStatusCodes3' in kwargs:
            monitor_status_codes3 = kwargs['monitorStatusCodes3']
        if 'monitorStatusCodes3EnableRecovery' in kwargs:
            monitor_status_codes3_enable_recovery = kwargs['monitorStatusCodes3EnableRecovery']
        if 'monitorStatusCodes3EnableRetry' in kwargs:
            monitor_status_codes3_enable_retry = kwargs['monitorStatusCodes3EnableRetry']
        if 'monitorStatusCodes3RecoveryConfigName' in kwargs:
            monitor_status_codes3_recovery_config_name = kwargs['monitorStatusCodes3RecoveryConfigName']
        if 'originResponsivenessCustomTimeout' in kwargs:
            origin_responsiveness_custom_timeout = kwargs['originResponsivenessCustomTimeout']
        if 'originResponsivenessEnableRecovery' in kwargs:
            origin_responsiveness_enable_recovery = kwargs['originResponsivenessEnableRecovery']
        if 'originResponsivenessEnableRetry' in kwargs:
            origin_responsiveness_enable_retry = kwargs['originResponsivenessEnableRetry']
        if 'originResponsivenessMonitoring' in kwargs:
            origin_responsiveness_monitoring = kwargs['originResponsivenessMonitoring']
        if 'originResponsivenessRecoveryConfigName' in kwargs:
            origin_responsiveness_recovery_config_name = kwargs['originResponsivenessRecoveryConfigName']
        if 'originResponsivenessTimeout' in kwargs:
            origin_responsiveness_timeout = kwargs['originResponsivenessTimeout']
        if 'statusCodeMonitoring1' in kwargs:
            status_code_monitoring1 = kwargs['statusCodeMonitoring1']
        if 'statusCodeMonitoring2' in kwargs:
            status_code_monitoring2 = kwargs['statusCodeMonitoring2']
        if 'statusCodeMonitoring3' in kwargs:
            status_code_monitoring3 = kwargs['statusCodeMonitoring3']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'tuningParameters' in kwargs:
            tuning_parameters = kwargs['tuningParameters']

        if binary_equivalent_content is not None:
            _setter("binary_equivalent_content", binary_equivalent_content)
        if enable_ip_avoidance is not None:
            _setter("enable_ip_avoidance", enable_ip_avoidance)
        if enabled is not None:
            _setter("enabled", enabled)
        if ip_avoidance_error_threshold is not None:
            _setter("ip_avoidance_error_threshold", ip_avoidance_error_threshold)
        if ip_avoidance_retry_interval is not None:
            _setter("ip_avoidance_retry_interval", ip_avoidance_retry_interval)
        if locked is not None:
            _setter("locked", locked)
        if monitor_origin_responsiveness is not None:
            _setter("monitor_origin_responsiveness", monitor_origin_responsiveness)
        if monitor_response_codes1s is not None:
            _setter("monitor_response_codes1s", monitor_response_codes1s)
        if monitor_response_codes2s is not None:
            _setter("monitor_response_codes2s", monitor_response_codes2s)
        if monitor_response_codes3s is not None:
            _setter("monitor_response_codes3s", monitor_response_codes3s)
        if monitor_status_codes1 is not None:
            _setter("monitor_status_codes1", monitor_status_codes1)
        if monitor_status_codes1_enable_recovery is not None:
            _setter("monitor_status_codes1_enable_recovery", monitor_status_codes1_enable_recovery)
        if monitor_status_codes1_enable_retry is not None:
            _setter("monitor_status_codes1_enable_retry", monitor_status_codes1_enable_retry)
        if monitor_status_codes1_recovery_config_name is not None:
            _setter("monitor_status_codes1_recovery_config_name", monitor_status_codes1_recovery_config_name)
        if monitor_status_codes2 is not None:
            _setter("monitor_status_codes2", monitor_status_codes2)
        if monitor_status_codes2_enable_recovery is not None:
            _setter("monitor_status_codes2_enable_recovery", monitor_status_codes2_enable_recovery)
        if monitor_status_codes2_enable_retry is not None:
            _setter("monitor_status_codes2_enable_retry", monitor_status_codes2_enable_retry)
        if monitor_status_codes2_recovery_config_name is not None:
            _setter("monitor_status_codes2_recovery_config_name", monitor_status_codes2_recovery_config_name)
        if monitor_status_codes3 is not None:
            _setter("monitor_status_codes3", monitor_status_codes3)
        if monitor_status_codes3_enable_recovery is not None:
            _setter("monitor_status_codes3_enable_recovery", monitor_status_codes3_enable_recovery)
        if monitor_status_codes3_enable_retry is not None:
            _setter("monitor_status_codes3_enable_retry", monitor_status_codes3_enable_retry)
        if monitor_status_codes3_recovery_config_name is not None:
            _setter("monitor_status_codes3_recovery_config_name", monitor_status_codes3_recovery_config_name)
        if origin_responsiveness_custom_timeout is not None:
            _setter("origin_responsiveness_custom_timeout", origin_responsiveness_custom_timeout)
        if origin_responsiveness_enable_recovery is not None:
            _setter("origin_responsiveness_enable_recovery", origin_responsiveness_enable_recovery)
        if origin_responsiveness_enable_retry is not None:
            _setter("origin_responsiveness_enable_retry", origin_responsiveness_enable_retry)
        if origin_responsiveness_monitoring is not None:
            _setter("origin_responsiveness_monitoring", origin_responsiveness_monitoring)
        if origin_responsiveness_recovery_config_name is not None:
            _setter("origin_responsiveness_recovery_config_name", origin_responsiveness_recovery_config_name)
        if origin_responsiveness_timeout is not None:
            _setter("origin_responsiveness_timeout", origin_responsiveness_timeout)
        if status_code_monitoring1 is not None:
            _setter("status_code_monitoring1", status_code_monitoring1)
        if status_code_monitoring2 is not None:
            _setter("status_code_monitoring2", status_code_monitoring2)
        if status_code_monitoring3 is not None:
            _setter("status_code_monitoring3", status_code_monitoring3)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if tuning_parameters is not None:
            _setter("tuning_parameters", tuning_parameters)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="binaryEquivalentContent")
    def binary_equivalent_content(self) -> Optional[bool]:
        return pulumi.get(self, "binary_equivalent_content")

    @property
    @pulumi.getter(name="enableIpAvoidance")
    def enable_ip_avoidance(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_avoidance")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ipAvoidanceErrorThreshold")
    def ip_avoidance_error_threshold(self) -> Optional[int]:
        return pulumi.get(self, "ip_avoidance_error_threshold")

    @property
    @pulumi.getter(name="ipAvoidanceRetryInterval")
    def ip_avoidance_retry_interval(self) -> Optional[int]:
        return pulumi.get(self, "ip_avoidance_retry_interval")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="monitorOriginResponsiveness")
    def monitor_origin_responsiveness(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_origin_responsiveness")

    @property
    @pulumi.getter(name="monitorResponseCodes1s")
    def monitor_response_codes1s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes1s")

    @property
    @pulumi.getter(name="monitorResponseCodes2s")
    def monitor_response_codes2s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes2s")

    @property
    @pulumi.getter(name="monitorResponseCodes3s")
    def monitor_response_codes3s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes3s")

    @property
    @pulumi.getter(name="monitorStatusCodes1")
    def monitor_status_codes1(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1")

    @property
    @pulumi.getter(name="monitorStatusCodes1EnableRecovery")
    def monitor_status_codes1_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1_enable_recovery")

    @property
    @pulumi.getter(name="monitorStatusCodes1EnableRetry")
    def monitor_status_codes1_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1_enable_retry")

    @property
    @pulumi.getter(name="monitorStatusCodes1RecoveryConfigName")
    def monitor_status_codes1_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes1_recovery_config_name")

    @property
    @pulumi.getter(name="monitorStatusCodes2")
    def monitor_status_codes2(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2")

    @property
    @pulumi.getter(name="monitorStatusCodes2EnableRecovery")
    def monitor_status_codes2_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2_enable_recovery")

    @property
    @pulumi.getter(name="monitorStatusCodes2EnableRetry")
    def monitor_status_codes2_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2_enable_retry")

    @property
    @pulumi.getter(name="monitorStatusCodes2RecoveryConfigName")
    def monitor_status_codes2_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes2_recovery_config_name")

    @property
    @pulumi.getter(name="monitorStatusCodes3")
    def monitor_status_codes3(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3")

    @property
    @pulumi.getter(name="monitorStatusCodes3EnableRecovery")
    def monitor_status_codes3_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3_enable_recovery")

    @property
    @pulumi.getter(name="monitorStatusCodes3EnableRetry")
    def monitor_status_codes3_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3_enable_retry")

    @property
    @pulumi.getter(name="monitorStatusCodes3RecoveryConfigName")
    def monitor_status_codes3_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes3_recovery_config_name")

    @property
    @pulumi.getter(name="originResponsivenessCustomTimeout")
    def origin_responsiveness_custom_timeout(self) -> Optional[int]:
        return pulumi.get(self, "origin_responsiveness_custom_timeout")

    @property
    @pulumi.getter(name="originResponsivenessEnableRecovery")
    def origin_responsiveness_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "origin_responsiveness_enable_recovery")

    @property
    @pulumi.getter(name="originResponsivenessEnableRetry")
    def origin_responsiveness_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "origin_responsiveness_enable_retry")

    @property
    @pulumi.getter(name="originResponsivenessMonitoring")
    def origin_responsiveness_monitoring(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_monitoring")

    @property
    @pulumi.getter(name="originResponsivenessRecoveryConfigName")
    def origin_responsiveness_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_recovery_config_name")

    @property
    @pulumi.getter(name="originResponsivenessTimeout")
    def origin_responsiveness_timeout(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_timeout")

    @property
    @pulumi.getter(name="statusCodeMonitoring1")
    def status_code_monitoring1(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring1")

    @property
    @pulumi.getter(name="statusCodeMonitoring2")
    def status_code_monitoring2(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring2")

    @property
    @pulumi.getter(name="statusCodeMonitoring3")
    def status_code_monitoring3(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring3")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tuningParameters")
    def tuning_parameters(self) -> Optional[str]:
        return pulumi.get(self, "tuning_parameters")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginIpAclResult(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorOriginIpAclResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable=enable,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enable is not None:
            _setter("enable", enable)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorOriginNetStorageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code=cp_code,
            download_domain_name=download_domain_name,
            g2o_token=g2o_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code: Optional[int] = None,
             download_domain_name: Optional[str] = None,
             g2o_token: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCode' in kwargs:
            cp_code = kwargs['cpCode']
        if 'downloadDomainName' in kwargs:
            download_domain_name = kwargs['downloadDomainName']
        if 'g2oToken' in kwargs:
            g2o_token = kwargs['g2oToken']

        if cp_code is not None:
            _setter("cp_code", cp_code)
        if download_domain_name is not None:
            _setter("download_domain_name", download_domain_name)
        if g2o_token is not None:
            _setter("g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPersistentClientConnectionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorPersistentClientConnectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            timeout=timeout,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             timeout: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if timeout is not None:
            _setter("timeout", timeout)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPersistentConnectionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorPersistentConnectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            timeout=timeout,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             timeout: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if timeout is not None:
            _setter("timeout", timeout)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPersonallyIdentifiableInformationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorPersonallyIdentifiableInformationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 failover_duration: Optional[int] = None,
                 failover_enabled: Optional[bool] = None,
                 failover_response_codes: Optional[Sequence[str]] = None,
                 failover_title: Optional[str] = None,
                 is_shared_policy: Optional[bool] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 population_cookie_type: Optional[str] = None,
                 population_duration: Optional[str] = None,
                 population_expiration_date: Optional[str] = None,
                 population_refresh: Optional[bool] = None,
                 population_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloudlet_policy=cloudlet_policy,
            cloudlet_shared_policy=cloudlet_shared_policy,
            enabled=enabled,
            failover_duration=failover_duration,
            failover_enabled=failover_enabled,
            failover_response_codes=failover_response_codes,
            failover_title=failover_title,
            is_shared_policy=is_shared_policy,
            label=label,
            locked=locked,
            population_cookie_type=population_cookie_type,
            population_duration=population_duration,
            population_expiration_date=population_expiration_date,
            population_refresh=population_refresh,
            population_title=population_title,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseCloudletPolicyResult'] = None,
             cloudlet_shared_policy: Optional[int] = None,
             enabled: Optional[bool] = None,
             failover_duration: Optional[int] = None,
             failover_enabled: Optional[bool] = None,
             failover_response_codes: Optional[Sequence[str]] = None,
             failover_title: Optional[str] = None,
             is_shared_policy: Optional[bool] = None,
             label: Optional[str] = None,
             locked: Optional[bool] = None,
             population_cookie_type: Optional[str] = None,
             population_duration: Optional[str] = None,
             population_expiration_date: Optional[str] = None,
             population_refresh: Optional[bool] = None,
             population_title: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'cloudletSharedPolicy' in kwargs:
            cloudlet_shared_policy = kwargs['cloudletSharedPolicy']
        if 'failoverDuration' in kwargs:
            failover_duration = kwargs['failoverDuration']
        if 'failoverEnabled' in kwargs:
            failover_enabled = kwargs['failoverEnabled']
        if 'failoverResponseCodes' in kwargs:
            failover_response_codes = kwargs['failoverResponseCodes']
        if 'failoverTitle' in kwargs:
            failover_title = kwargs['failoverTitle']
        if 'isSharedPolicy' in kwargs:
            is_shared_policy = kwargs['isSharedPolicy']
        if 'populationCookieType' in kwargs:
            population_cookie_type = kwargs['populationCookieType']
        if 'populationDuration' in kwargs:
            population_duration = kwargs['populationDuration']
        if 'populationExpirationDate' in kwargs:
            population_expiration_date = kwargs['populationExpirationDate']
        if 'populationRefresh' in kwargs:
            population_refresh = kwargs['populationRefresh']
        if 'populationTitle' in kwargs:
            population_title = kwargs['populationTitle']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            _setter("cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if failover_duration is not None:
            _setter("failover_duration", failover_duration)
        if failover_enabled is not None:
            _setter("failover_enabled", failover_enabled)
        if failover_response_codes is not None:
            _setter("failover_response_codes", failover_response_codes)
        if failover_title is not None:
            _setter("failover_title", failover_title)
        if is_shared_policy is not None:
            _setter("is_shared_policy", is_shared_policy)
        if label is not None:
            _setter("label", label)
        if locked is not None:
            _setter("locked", locked)
        if population_cookie_type is not None:
            _setter("population_cookie_type", population_cookie_type)
        if population_duration is not None:
            _setter("population_duration", population_duration)
        if population_expiration_date is not None:
            _setter("population_expiration_date", population_expiration_date)
        if population_refresh is not None:
            _setter("population_refresh", population_refresh)
        if population_title is not None:
            _setter("population_title", population_title)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failoverDuration")
    def failover_duration(self) -> Optional[int]:
        return pulumi.get(self, "failover_duration")

    @property
    @pulumi.getter(name="failoverEnabled")
    def failover_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "failover_enabled")

    @property
    @pulumi.getter(name="failoverResponseCodes")
    def failover_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "failover_response_codes")

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="populationCookieType")
    def population_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_type")

    @property
    @pulumi.getter(name="populationDuration")
    def population_duration(self) -> Optional[str]:
        return pulumi.get(self, "population_duration")

    @property
    @pulumi.getter(name="populationExpirationDate")
    def population_expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "population_expiration_date")

    @property
    @pulumi.getter(name="populationRefresh")
    def population_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "population_refresh")

    @property
    @pulumi.getter(name="populationTitle")
    def population_title(self) -> Optional[str]:
        return pulumi.get(self, "population_title")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPreconnectResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 preconnectlists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorPreconnectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            preconnectlists=preconnectlists,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             preconnectlists: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if preconnectlists is not None:
            _setter("preconnectlists", preconnectlists)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def preconnectlists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "preconnectlists")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPredictiveContentDeliveryResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorPredictiveContentDeliveryResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPredictivePrefetchingResult(dict):
    def __init__(__self__, *,
                 accuracy_target: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorPredictivePrefetchingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accuracy_target=accuracy_target,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accuracy_target: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accuracyTarget' in kwargs:
            accuracy_target = kwargs['accuracyTarget']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if accuracy_target is not None:
            _setter("accuracy_target", accuracy_target)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="accuracyTarget")
    def accuracy_target(self) -> Optional[str]:
        return pulumi.get(self, "accuracy_target")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchableResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchableResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPrefreshCacheResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 prefreshval: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorPrefreshCacheResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            prefreshval=prefreshval,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             prefreshval: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if prefreshval is not None:
            _setter("prefreshval", prefreshval)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def prefreshval(self) -> Optional[int]:
        return pulumi.get(self, "prefreshval")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorQualityResult(dict):
    def __init__(__self__, *,
                 audience_settings: Optional[str] = None,
                 catalog_size: Optional[str] = None,
                 content_settings: Optional[str] = None,
                 content_type: Optional[str] = None,
                 country: Optional[str] = None,
                 delivery_format: Optional[str] = None,
                 delivery_type: Optional[str] = None,
                 download_type: Optional[str] = None,
                 end_user_location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 maximum_concurrent_users: Optional[str] = None,
                 object_size: Optional[str] = None,
                 optimize_for: Optional[str] = None,
                 origin_settings: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 refresh_rate: Optional[str] = None,
                 segment_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorQualityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            audience_settings=audience_settings,
            catalog_size=catalog_size,
            content_settings=content_settings,
            content_type=content_type,
            country=country,
            delivery_format=delivery_format,
            delivery_type=delivery_type,
            download_type=download_type,
            end_user_location=end_user_location,
            locked=locked,
            maximum_concurrent_users=maximum_concurrent_users,
            object_size=object_size,
            optimize_for=optimize_for,
            origin_settings=origin_settings,
            popularity_distribution=popularity_distribution,
            refresh_rate=refresh_rate,
            segment_duration=segment_duration,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             audience_settings: Optional[str] = None,
             catalog_size: Optional[str] = None,
             content_settings: Optional[str] = None,
             content_type: Optional[str] = None,
             country: Optional[str] = None,
             delivery_format: Optional[str] = None,
             delivery_type: Optional[str] = None,
             download_type: Optional[str] = None,
             end_user_location: Optional[str] = None,
             locked: Optional[bool] = None,
             maximum_concurrent_users: Optional[str] = None,
             object_size: Optional[str] = None,
             optimize_for: Optional[str] = None,
             origin_settings: Optional[str] = None,
             popularity_distribution: Optional[str] = None,
             refresh_rate: Optional[str] = None,
             segment_duration: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'audienceSettings' in kwargs:
            audience_settings = kwargs['audienceSettings']
        if 'catalogSize' in kwargs:
            catalog_size = kwargs['catalogSize']
        if 'contentSettings' in kwargs:
            content_settings = kwargs['contentSettings']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'deliveryFormat' in kwargs:
            delivery_format = kwargs['deliveryFormat']
        if 'deliveryType' in kwargs:
            delivery_type = kwargs['deliveryType']
        if 'downloadType' in kwargs:
            download_type = kwargs['downloadType']
        if 'endUserLocation' in kwargs:
            end_user_location = kwargs['endUserLocation']
        if 'maximumConcurrentUsers' in kwargs:
            maximum_concurrent_users = kwargs['maximumConcurrentUsers']
        if 'objectSize' in kwargs:
            object_size = kwargs['objectSize']
        if 'optimizeFor' in kwargs:
            optimize_for = kwargs['optimizeFor']
        if 'originSettings' in kwargs:
            origin_settings = kwargs['originSettings']
        if 'popularityDistribution' in kwargs:
            popularity_distribution = kwargs['popularityDistribution']
        if 'refreshRate' in kwargs:
            refresh_rate = kwargs['refreshRate']
        if 'segmentDuration' in kwargs:
            segment_duration = kwargs['segmentDuration']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if audience_settings is not None:
            _setter("audience_settings", audience_settings)
        if catalog_size is not None:
            _setter("catalog_size", catalog_size)
        if content_settings is not None:
            _setter("content_settings", content_settings)
        if content_type is not None:
            _setter("content_type", content_type)
        if country is not None:
            _setter("country", country)
        if delivery_format is not None:
            _setter("delivery_format", delivery_format)
        if delivery_type is not None:
            _setter("delivery_type", delivery_type)
        if download_type is not None:
            _setter("download_type", download_type)
        if end_user_location is not None:
            _setter("end_user_location", end_user_location)
        if locked is not None:
            _setter("locked", locked)
        if maximum_concurrent_users is not None:
            _setter("maximum_concurrent_users", maximum_concurrent_users)
        if object_size is not None:
            _setter("object_size", object_size)
        if optimize_for is not None:
            _setter("optimize_for", optimize_for)
        if origin_settings is not None:
            _setter("origin_settings", origin_settings)
        if popularity_distribution is not None:
            _setter("popularity_distribution", popularity_distribution)
        if refresh_rate is not None:
            _setter("refresh_rate", refresh_rate)
        if segment_duration is not None:
            _setter("segment_duration", segment_duration)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="audienceSettings")
    def audience_settings(self) -> Optional[str]:
        return pulumi.get(self, "audience_settings")

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentSettings")
    def content_settings(self) -> Optional[str]:
        return pulumi.get(self, "content_settings")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="deliveryFormat")
    def delivery_format(self) -> Optional[str]:
        return pulumi.get(self, "delivery_format")

    @property
    @pulumi.getter(name="deliveryType")
    def delivery_type(self) -> Optional[str]:
        return pulumi.get(self, "delivery_type")

    @property
    @pulumi.getter(name="downloadType")
    def download_type(self) -> Optional[str]:
        return pulumi.get(self, "download_type")

    @property
    @pulumi.getter(name="endUserLocation")
    def end_user_location(self) -> Optional[str]:
        return pulumi.get(self, "end_user_location")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumConcurrentUsers")
    def maximum_concurrent_users(self) -> Optional[str]:
        return pulumi.get(self, "maximum_concurrent_users")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="optimizeFor")
    def optimize_for(self) -> Optional[str]:
        return pulumi.get(self, "optimize_for")

    @property
    @pulumi.getter(name="originSettings")
    def origin_settings(self) -> Optional[str]:
        return pulumi.get(self, "origin_settings")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[str]:
        return pulumi.get(self, "refresh_rate")

    @property
    @pulumi.getter(name="segmentDuration")
    def segment_duration(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorQuicBetaResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 quic_offer_percentage: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorQuicBetaResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            quic_offer_percentage=quic_offer_percentage,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             quic_offer_percentage: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'quicOfferPercentage' in kwargs:
            quic_offer_percentage = kwargs['quicOfferPercentage']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if quic_offer_percentage is not None:
            _setter("quic_offer_percentage", quic_offer_percentage)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="quicOfferPercentage")
    def quic_offer_percentage(self) -> Optional[int]:
        return pulumi.get(self, "quic_offer_percentage")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRandomSeekResult(dict):
    def __init__(__self__, *,
                 flv: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 mp4: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorRandomSeekResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            flv=flv,
            locked=locked,
            maximum_size=maximum_size,
            mp4=mp4,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             flv: Optional[bool] = None,
             locked: Optional[bool] = None,
             maximum_size: Optional[str] = None,
             mp4: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maximumSize' in kwargs:
            maximum_size = kwargs['maximumSize']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if flv is not None:
            _setter("flv", flv)
        if locked is not None:
            _setter("locked", locked)
        if maximum_size is not None:
            _setter("maximum_size", maximum_size)
        if mp4 is not None:
            _setter("mp4", mp4)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def flv(self) -> Optional[bool]:
        return pulumi.get(self, "flv")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @property
    @pulumi.getter
    def mp4(self) -> Optional[bool]:
        return pulumi.get(self, "mp4")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRapidResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorRapidResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorReadTimeoutResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorReadTimeoutResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRealTimeReportingResult(dict):
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 beacon_sampling_percentage: Optional[float] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorRealTimeReportingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            advanced=advanced,
            beacon_sampling_percentage=beacon_sampling_percentage,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             advanced: Optional[bool] = None,
             beacon_sampling_percentage: Optional[float] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'beaconSamplingPercentage' in kwargs:
            beacon_sampling_percentage = kwargs['beaconSamplingPercentage']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if advanced is not None:
            _setter("advanced", advanced)
        if beacon_sampling_percentage is not None:
            _setter("beacon_sampling_percentage", beacon_sampling_percentage)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="beaconSamplingPercentage")
    def beacon_sampling_percentage(self) -> Optional[float]:
        return pulumi.get(self, "beacon_sampling_percentage")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRealUserMonitoringResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorRealUserMonitoringResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRedirectResult(dict):
    def __init__(__self__, *,
                 destination_hostname: Optional[str] = None,
                 destination_hostname_other: Optional[str] = None,
                 destination_hostname_sibling: Optional[str] = None,
                 destination_hostname_subdomain: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 destination_path_other: Optional[str] = None,
                 destination_path_prefix: Optional[str] = None,
                 destination_path_suffix: Optional[str] = None,
                 destination_path_suffix_status: Optional[str] = None,
                 destination_protocol: Optional[str] = None,
                 locked: Optional[bool] = None,
                 mobile_default_choice: Optional[str] = None,
                 query_string: Optional[str] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorRedirectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_hostname=destination_hostname,
            destination_hostname_other=destination_hostname_other,
            destination_hostname_sibling=destination_hostname_sibling,
            destination_hostname_subdomain=destination_hostname_subdomain,
            destination_path=destination_path,
            destination_path_other=destination_path_other,
            destination_path_prefix=destination_path_prefix,
            destination_path_suffix=destination_path_suffix,
            destination_path_suffix_status=destination_path_suffix_status,
            destination_protocol=destination_protocol,
            locked=locked,
            mobile_default_choice=mobile_default_choice,
            query_string=query_string,
            response_code=response_code,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_hostname: Optional[str] = None,
             destination_hostname_other: Optional[str] = None,
             destination_hostname_sibling: Optional[str] = None,
             destination_hostname_subdomain: Optional[str] = None,
             destination_path: Optional[str] = None,
             destination_path_other: Optional[str] = None,
             destination_path_prefix: Optional[str] = None,
             destination_path_suffix: Optional[str] = None,
             destination_path_suffix_status: Optional[str] = None,
             destination_protocol: Optional[str] = None,
             locked: Optional[bool] = None,
             mobile_default_choice: Optional[str] = None,
             query_string: Optional[str] = None,
             response_code: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'destinationHostname' in kwargs:
            destination_hostname = kwargs['destinationHostname']
        if 'destinationHostnameOther' in kwargs:
            destination_hostname_other = kwargs['destinationHostnameOther']
        if 'destinationHostnameSibling' in kwargs:
            destination_hostname_sibling = kwargs['destinationHostnameSibling']
        if 'destinationHostnameSubdomain' in kwargs:
            destination_hostname_subdomain = kwargs['destinationHostnameSubdomain']
        if 'destinationPath' in kwargs:
            destination_path = kwargs['destinationPath']
        if 'destinationPathOther' in kwargs:
            destination_path_other = kwargs['destinationPathOther']
        if 'destinationPathPrefix' in kwargs:
            destination_path_prefix = kwargs['destinationPathPrefix']
        if 'destinationPathSuffix' in kwargs:
            destination_path_suffix = kwargs['destinationPathSuffix']
        if 'destinationPathSuffixStatus' in kwargs:
            destination_path_suffix_status = kwargs['destinationPathSuffixStatus']
        if 'destinationProtocol' in kwargs:
            destination_protocol = kwargs['destinationProtocol']
        if 'mobileDefaultChoice' in kwargs:
            mobile_default_choice = kwargs['mobileDefaultChoice']
        if 'queryString' in kwargs:
            query_string = kwargs['queryString']
        if 'responseCode' in kwargs:
            response_code = kwargs['responseCode']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if destination_hostname is not None:
            _setter("destination_hostname", destination_hostname)
        if destination_hostname_other is not None:
            _setter("destination_hostname_other", destination_hostname_other)
        if destination_hostname_sibling is not None:
            _setter("destination_hostname_sibling", destination_hostname_sibling)
        if destination_hostname_subdomain is not None:
            _setter("destination_hostname_subdomain", destination_hostname_subdomain)
        if destination_path is not None:
            _setter("destination_path", destination_path)
        if destination_path_other is not None:
            _setter("destination_path_other", destination_path_other)
        if destination_path_prefix is not None:
            _setter("destination_path_prefix", destination_path_prefix)
        if destination_path_suffix is not None:
            _setter("destination_path_suffix", destination_path_suffix)
        if destination_path_suffix_status is not None:
            _setter("destination_path_suffix_status", destination_path_suffix_status)
        if destination_protocol is not None:
            _setter("destination_protocol", destination_protocol)
        if locked is not None:
            _setter("locked", locked)
        if mobile_default_choice is not None:
            _setter("mobile_default_choice", mobile_default_choice)
        if query_string is not None:
            _setter("query_string", query_string)
        if response_code is not None:
            _setter("response_code", response_code)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="destinationHostname")
    def destination_hostname(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname")

    @property
    @pulumi.getter(name="destinationHostnameOther")
    def destination_hostname_other(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_other")

    @property
    @pulumi.getter(name="destinationHostnameSibling")
    def destination_hostname_sibling(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_sibling")

    @property
    @pulumi.getter(name="destinationHostnameSubdomain")
    def destination_hostname_subdomain(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_subdomain")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="destinationPathOther")
    def destination_path_other(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_other")

    @property
    @pulumi.getter(name="destinationPathPrefix")
    def destination_path_prefix(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_prefix")

    @property
    @pulumi.getter(name="destinationPathSuffix")
    def destination_path_suffix(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_suffix")

    @property
    @pulumi.getter(name="destinationPathSuffixStatus")
    def destination_path_suffix_status(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_suffix_status")

    @property
    @pulumi.getter(name="destinationProtocol")
    def destination_protocol(self) -> Optional[str]:
        return pulumi.get(self, "destination_protocol")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mobileDefaultChoice")
    def mobile_default_choice(self) -> Optional[str]:
        return pulumi.get(self, "mobile_default_choice")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[str]:
        return pulumi.get(self, "query_string")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRedirectplusResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorRedirectplusResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            enabled=enabled,
            locked=locked,
            response_code=response_code,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             response_code: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'responseCode' in kwargs:
            response_code = kwargs['responseCode']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if destination is not None:
            _setter("destination", destination)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if response_code is not None:
            _setter("response_code", response_code)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRefererCheckingResult(dict):
    def __init__(__self__, *,
                 allow_children: Optional[bool] = None,
                 domains: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 strict: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorRefererCheckingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_children=allow_children,
            domains=domains,
            enabled=enabled,
            locked=locked,
            strict=strict,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_children: Optional[bool] = None,
             domains: Optional[Sequence[str]] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             strict: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowChildren' in kwargs:
            allow_children = kwargs['allowChildren']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if allow_children is not None:
            _setter("allow_children", allow_children)
        if domains is not None:
            _setter("domains", domains)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if strict is not None:
            _setter("strict", strict)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowChildren")
    def allow_children(self) -> Optional[bool]:
        return pulumi.get(self, "allow_children")

    @property
    @pulumi.getter
    def domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def strict(self) -> Optional[bool]:
        return pulumi.get(self, "strict")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRemoveQueryParameterResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 parameters: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorRemoveQueryParameterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            parameters=parameters,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             parameters: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if parameters is not None:
            _setter("parameters", parameters)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRemoveVaryResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorRemoveVaryResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorReportResult(dict):
    def __init__(__self__, *,
                 cookies: Optional[Sequence[str]] = None,
                 custom_log_field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 log_accept_language: Optional[bool] = None,
                 log_cookies: Optional[str] = None,
                 log_custom_log_field: Optional[bool] = None,
                 log_edge_ip: Optional[bool] = None,
                 log_host: Optional[bool] = None,
                 log_referer: Optional[bool] = None,
                 log_user_agent: Optional[bool] = None,
                 log_x_forwarded_for: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorReportResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookies=cookies,
            custom_log_field=custom_log_field,
            locked=locked,
            log_accept_language=log_accept_language,
            log_cookies=log_cookies,
            log_custom_log_field=log_custom_log_field,
            log_edge_ip=log_edge_ip,
            log_host=log_host,
            log_referer=log_referer,
            log_user_agent=log_user_agent,
            log_x_forwarded_for=log_x_forwarded_for,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookies: Optional[Sequence[str]] = None,
             custom_log_field: Optional[str] = None,
             locked: Optional[bool] = None,
             log_accept_language: Optional[bool] = None,
             log_cookies: Optional[str] = None,
             log_custom_log_field: Optional[bool] = None,
             log_edge_ip: Optional[bool] = None,
             log_host: Optional[bool] = None,
             log_referer: Optional[bool] = None,
             log_user_agent: Optional[bool] = None,
             log_x_forwarded_for: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customLogField' in kwargs:
            custom_log_field = kwargs['customLogField']
        if 'logAcceptLanguage' in kwargs:
            log_accept_language = kwargs['logAcceptLanguage']
        if 'logCookies' in kwargs:
            log_cookies = kwargs['logCookies']
        if 'logCustomLogField' in kwargs:
            log_custom_log_field = kwargs['logCustomLogField']
        if 'logEdgeIp' in kwargs:
            log_edge_ip = kwargs['logEdgeIp']
        if 'logHost' in kwargs:
            log_host = kwargs['logHost']
        if 'logReferer' in kwargs:
            log_referer = kwargs['logReferer']
        if 'logUserAgent' in kwargs:
            log_user_agent = kwargs['logUserAgent']
        if 'logXForwardedFor' in kwargs:
            log_x_forwarded_for = kwargs['logXForwardedFor']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cookies is not None:
            _setter("cookies", cookies)
        if custom_log_field is not None:
            _setter("custom_log_field", custom_log_field)
        if locked is not None:
            _setter("locked", locked)
        if log_accept_language is not None:
            _setter("log_accept_language", log_accept_language)
        if log_cookies is not None:
            _setter("log_cookies", log_cookies)
        if log_custom_log_field is not None:
            _setter("log_custom_log_field", log_custom_log_field)
        if log_edge_ip is not None:
            _setter("log_edge_ip", log_edge_ip)
        if log_host is not None:
            _setter("log_host", log_host)
        if log_referer is not None:
            _setter("log_referer", log_referer)
        if log_user_agent is not None:
            _setter("log_user_agent", log_user_agent)
        if log_x_forwarded_for is not None:
            _setter("log_x_forwarded_for", log_x_forwarded_for)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def cookies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cookies")

    @property
    @pulumi.getter(name="customLogField")
    def custom_log_field(self) -> Optional[str]:
        return pulumi.get(self, "custom_log_field")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="logAcceptLanguage")
    def log_accept_language(self) -> Optional[bool]:
        return pulumi.get(self, "log_accept_language")

    @property
    @pulumi.getter(name="logCookies")
    def log_cookies(self) -> Optional[str]:
        return pulumi.get(self, "log_cookies")

    @property
    @pulumi.getter(name="logCustomLogField")
    def log_custom_log_field(self) -> Optional[bool]:
        return pulumi.get(self, "log_custom_log_field")

    @property
    @pulumi.getter(name="logEdgeIp")
    def log_edge_ip(self) -> Optional[bool]:
        return pulumi.get(self, "log_edge_ip")

    @property
    @pulumi.getter(name="logHost")
    def log_host(self) -> Optional[bool]:
        return pulumi.get(self, "log_host")

    @property
    @pulumi.getter(name="logReferer")
    def log_referer(self) -> Optional[bool]:
        return pulumi.get(self, "log_referer")

    @property
    @pulumi.getter(name="logUserAgent")
    def log_user_agent(self) -> Optional[bool]:
        return pulumi.get(self, "log_user_agent")

    @property
    @pulumi.getter(name="logXForwardedFor")
    def log_x_forwarded_for(self) -> Optional[bool]:
        return pulumi.get(self, "log_x_forwarded_for")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlResult(dict):
    def __init__(__self__, *,
                 branded403_file: Optional[str] = None,
                 branded403_status_code: Optional[int] = None,
                 branded403_url: Optional[str] = None,
                 branded_deny_cache_ttl: Optional[int] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enable_branded403: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlNetStorageResult'] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            branded403_file=branded403_file,
            branded403_status_code=branded403_status_code,
            branded403_url=branded403_url,
            branded_deny_cache_ttl=branded_deny_cache_ttl,
            cloudlet_policy=cloudlet_policy,
            cloudlet_shared_policy=cloudlet_shared_policy,
            enable_branded403=enable_branded403,
            enabled=enabled,
            is_shared_policy=is_shared_policy,
            locked=locked,
            net_storage=net_storage,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             branded403_file: Optional[str] = None,
             branded403_status_code: Optional[int] = None,
             branded403_url: Optional[str] = None,
             branded_deny_cache_ttl: Optional[int] = None,
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlCloudletPolicyResult'] = None,
             cloudlet_shared_policy: Optional[int] = None,
             enable_branded403: Optional[bool] = None,
             enabled: Optional[bool] = None,
             is_shared_policy: Optional[bool] = None,
             locked: Optional[bool] = None,
             net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlNetStorageResult'] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'branded403File' in kwargs:
            branded403_file = kwargs['branded403File']
        if 'branded403StatusCode' in kwargs:
            branded403_status_code = kwargs['branded403StatusCode']
        if 'branded403Url' in kwargs:
            branded403_url = kwargs['branded403Url']
        if 'brandedDenyCacheTtl' in kwargs:
            branded_deny_cache_ttl = kwargs['brandedDenyCacheTtl']
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'cloudletSharedPolicy' in kwargs:
            cloudlet_shared_policy = kwargs['cloudletSharedPolicy']
        if 'enableBranded403' in kwargs:
            enable_branded403 = kwargs['enableBranded403']
        if 'isSharedPolicy' in kwargs:
            is_shared_policy = kwargs['isSharedPolicy']
        if 'netStorage' in kwargs:
            net_storage = kwargs['netStorage']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if branded403_file is not None:
            _setter("branded403_file", branded403_file)
        if branded403_status_code is not None:
            _setter("branded403_status_code", branded403_status_code)
        if branded403_url is not None:
            _setter("branded403_url", branded403_url)
        if branded_deny_cache_ttl is not None:
            _setter("branded_deny_cache_ttl", branded_deny_cache_ttl)
        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            _setter("cloudlet_shared_policy", cloudlet_shared_policy)
        if enable_branded403 is not None:
            _setter("enable_branded403", enable_branded403)
        if enabled is not None:
            _setter("enabled", enabled)
        if is_shared_policy is not None:
            _setter("is_shared_policy", is_shared_policy)
        if locked is not None:
            _setter("locked", locked)
        if net_storage is not None:
            _setter("net_storage", net_storage)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="branded403File")
    def branded403_file(self) -> Optional[str]:
        return pulumi.get(self, "branded403_file")

    @property
    @pulumi.getter(name="branded403StatusCode")
    def branded403_status_code(self) -> Optional[int]:
        return pulumi.get(self, "branded403_status_code")

    @property
    @pulumi.getter(name="branded403Url")
    def branded403_url(self) -> Optional[str]:
        return pulumi.get(self, "branded403_url")

    @property
    @pulumi.getter(name="brandedDenyCacheTtl")
    def branded_deny_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "branded_deny_cache_ttl")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter(name="enableBranded403")
    def enable_branded403(self) -> Optional[bool]:
        return pulumi.get(self, "enable_branded403")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlNetStorageResult']:
        return pulumi.get(self, "net_storage")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlNetStorageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code=cp_code,
            download_domain_name=download_domain_name,
            g2o_token=g2o_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code: Optional[int] = None,
             download_domain_name: Optional[str] = None,
             g2o_token: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCode' in kwargs:
            cp_code = kwargs['cpCode']
        if 'downloadDomainName' in kwargs:
            download_domain_name = kwargs['downloadDomainName']
        if 'g2oToken' in kwargs:
            g2o_token = kwargs['g2oToken']

        if cp_code is not None:
            _setter("cp_code", cp_code)
        if download_domain_name is not None:
            _setter("download_domain_name", download_domain_name)
        if g2o_token is not None:
            _setter("g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRequestTypeMarkerResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 request_type: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorRequestTypeMarkerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            request_type=request_type,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             request_type: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'requestType' in kwargs:
            request_type = kwargs['requestType']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if request_type is not None:
            _setter("request_type", request_type)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[str]:
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerExtendedCompatibilityResult(dict):
    def __init__(__self__, *,
                 enable_all_features: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerExtendedCompatibilityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_all_features=enable_all_features,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_all_features: Optional[bool] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enableAllFeatures' in kwargs:
            enable_all_features = kwargs['enableAllFeatures']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enable_all_features is not None:
            _setter("enable_all_features", enable_all_features)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="enableAllFeatures")
    def enable_all_features(self) -> Optional[bool]:
        return pulumi.get(self, "enable_all_features")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorResponseCodeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 override206: Optional[bool] = None,
                 status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorResponseCodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            override206=override206,
            status_code=status_code,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             override206: Optional[bool] = None,
             status_code: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'statusCode' in kwargs:
            status_code = kwargs['statusCode']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if override206 is not None:
            _setter("override206", override206)
        if status_code is not None:
            _setter("status_code", status_code)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def override206(self) -> Optional[bool]:
        return pulumi.get(self, "override206")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorResponseCookieResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 default_domain: Optional[bool] = None,
                 default_path: Optional[bool] = None,
                 domain: Optional[str] = None,
                 duration: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 expiration_date: Optional[str] = None,
                 expires: Optional[str] = None,
                 format: Optional[str] = None,
                 http_only: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 path: Optional[str] = None,
                 same_site: Optional[str] = None,
                 secure: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorResponseCookieResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_name=cookie_name,
            default_domain=default_domain,
            default_path=default_path,
            domain=domain,
            duration=duration,
            enabled=enabled,
            expiration_date=expiration_date,
            expires=expires,
            format=format,
            http_only=http_only,
            locked=locked,
            path=path,
            same_site=same_site,
            secure=secure,
            template_uuid=template_uuid,
            type=type,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_name: Optional[str] = None,
             default_domain: Optional[bool] = None,
             default_path: Optional[bool] = None,
             domain: Optional[str] = None,
             duration: Optional[str] = None,
             enabled: Optional[bool] = None,
             expiration_date: Optional[str] = None,
             expires: Optional[str] = None,
             format: Optional[str] = None,
             http_only: Optional[bool] = None,
             locked: Optional[bool] = None,
             path: Optional[str] = None,
             same_site: Optional[str] = None,
             secure: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cookieName' in kwargs:
            cookie_name = kwargs['cookieName']
        if 'defaultDomain' in kwargs:
            default_domain = kwargs['defaultDomain']
        if 'defaultPath' in kwargs:
            default_path = kwargs['defaultPath']
        if 'expirationDate' in kwargs:
            expiration_date = kwargs['expirationDate']
        if 'httpOnly' in kwargs:
            http_only = kwargs['httpOnly']
        if 'sameSite' in kwargs:
            same_site = kwargs['sameSite']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if cookie_name is not None:
            _setter("cookie_name", cookie_name)
        if default_domain is not None:
            _setter("default_domain", default_domain)
        if default_path is not None:
            _setter("default_path", default_path)
        if domain is not None:
            _setter("domain", domain)
        if duration is not None:
            _setter("duration", duration)
        if enabled is not None:
            _setter("enabled", enabled)
        if expiration_date is not None:
            _setter("expiration_date", expiration_date)
        if expires is not None:
            _setter("expires", expires)
        if format is not None:
            _setter("format", format)
        if http_only is not None:
            _setter("http_only", http_only)
        if locked is not None:
            _setter("locked", locked)
        if path is not None:
            _setter("path", path)
        if same_site is not None:
            _setter("same_site", same_site)
        if secure is not None:
            _setter("secure", secure)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if type is not None:
            _setter("type", type)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="defaultDomain")
    def default_domain(self) -> Optional[bool]:
        return pulumi.get(self, "default_domain")

    @property
    @pulumi.getter(name="defaultPath")
    def default_path(self) -> Optional[bool]:
        return pulumi.get(self, "default_path")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter
    def expires(self) -> Optional[str]:
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="httpOnly")
    def http_only(self) -> Optional[bool]:
        return pulumi.get(self, "http_only")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="sameSite")
    def same_site(self) -> Optional[str]:
        return pulumi.get(self, "same_site")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRestrictObjectCachingResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorRestrictObjectCachingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            maximum_size=maximum_size,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             maximum_size: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maximumSize' in kwargs:
            maximum_size = kwargs['maximumSize']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if maximum_size is not None:
            _setter("maximum_size", maximum_size)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorReturnCacheStatusResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 response_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorReturnCacheStatusResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            response_header_name=response_header_name,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             response_header_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'responseHeaderName' in kwargs:
            response_header_name = kwargs['responseHeaderName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if response_header_name is not None:
            _setter("response_header_name", response_header_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="responseHeaderName")
    def response_header_name(self) -> Optional[str]:
        return pulumi.get(self, "response_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRewriteUrlResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 keep_query_string: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match: Optional[str] = None,
                 match_multiple: Optional[bool] = None,
                 match_regex: Optional[str] = None,
                 target_path: Optional[str] = None,
                 target_path_prepend: Optional[str] = None,
                 target_regex: Optional[str] = None,
                 target_url: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorRewriteUrlResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior=behavior,
            keep_query_string=keep_query_string,
            locked=locked,
            match=match,
            match_multiple=match_multiple,
            match_regex=match_regex,
            target_path=target_path,
            target_path_prepend=target_path_prepend,
            target_regex=target_regex,
            target_url=target_url,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior: Optional[str] = None,
             keep_query_string: Optional[bool] = None,
             locked: Optional[bool] = None,
             match: Optional[str] = None,
             match_multiple: Optional[bool] = None,
             match_regex: Optional[str] = None,
             target_path: Optional[str] = None,
             target_path_prepend: Optional[str] = None,
             target_regex: Optional[str] = None,
             target_url: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'keepQueryString' in kwargs:
            keep_query_string = kwargs['keepQueryString']
        if 'matchMultiple' in kwargs:
            match_multiple = kwargs['matchMultiple']
        if 'matchRegex' in kwargs:
            match_regex = kwargs['matchRegex']
        if 'targetPath' in kwargs:
            target_path = kwargs['targetPath']
        if 'targetPathPrepend' in kwargs:
            target_path_prepend = kwargs['targetPathPrepend']
        if 'targetRegex' in kwargs:
            target_regex = kwargs['targetRegex']
        if 'targetUrl' in kwargs:
            target_url = kwargs['targetUrl']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if behavior is not None:
            _setter("behavior", behavior)
        if keep_query_string is not None:
            _setter("keep_query_string", keep_query_string)
        if locked is not None:
            _setter("locked", locked)
        if match is not None:
            _setter("match", match)
        if match_multiple is not None:
            _setter("match_multiple", match_multiple)
        if match_regex is not None:
            _setter("match_regex", match_regex)
        if target_path is not None:
            _setter("target_path", target_path)
        if target_path_prepend is not None:
            _setter("target_path_prepend", target_path_prepend)
        if target_regex is not None:
            _setter("target_regex", target_regex)
        if target_url is not None:
            _setter("target_url", target_url)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter(name="keepQueryString")
    def keep_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "keep_query_string")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @property
    @pulumi.getter(name="matchRegex")
    def match_regex(self) -> Optional[str]:
        return pulumi.get(self, "match_regex")

    @property
    @pulumi.getter(name="targetPath")
    def target_path(self) -> Optional[str]:
        return pulumi.get(self, "target_path")

    @property
    @pulumi.getter(name="targetPathPrepend")
    def target_path_prepend(self) -> Optional[str]:
        return pulumi.get(self, "target_path_prepend")

    @property
    @pulumi.getter(name="targetRegex")
    def target_regex(self) -> Optional[str]:
        return pulumi.get(self, "target_regex")

    @property
    @pulumi.getter(name="targetUrl")
    def target_url(self) -> Optional[str]:
        return pulumi.get(self, "target_url")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRumCustomResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 rum_group_name: Optional[str] = None,
                 rum_sample_rate: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorRumCustomResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            rum_group_name=rum_group_name,
            rum_sample_rate=rum_sample_rate,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             rum_group_name: Optional[str] = None,
             rum_sample_rate: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rumGroupName' in kwargs:
            rum_group_name = kwargs['rumGroupName']
        if 'rumSampleRate' in kwargs:
            rum_sample_rate = kwargs['rumSampleRate']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if rum_group_name is not None:
            _setter("rum_group_name", rum_group_name)
        if rum_sample_rate is not None:
            _setter("rum_sample_rate", rum_sample_rate)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="rumGroupName")
    def rum_group_name(self) -> Optional[str]:
        return pulumi.get(self, "rum_group_name")

    @property
    @pulumi.getter(name="rumSampleRate")
    def rum_sample_rate(self) -> Optional[int]:
        return pulumi.get(self, "rum_sample_rate")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSaasDefinitionsResult(dict):
    def __init__(__self__, *,
                 application_action: Optional[str] = None,
                 application_cname_enabled: Optional[bool] = None,
                 application_cname_level: Optional[int] = None,
                 application_cookie: Optional[str] = None,
                 application_query_string: Optional[str] = None,
                 application_regex: Optional[str] = None,
                 application_replace: Optional[str] = None,
                 application_title: Optional[str] = None,
                 customer_action: Optional[str] = None,
                 customer_cname_enabled: Optional[bool] = None,
                 customer_cname_level: Optional[int] = None,
                 customer_cookie: Optional[str] = None,
                 customer_query_string: Optional[str] = None,
                 customer_regex: Optional[str] = None,
                 customer_replace: Optional[str] = None,
                 customer_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 users_action: Optional[str] = None,
                 users_cname_enabled: Optional[bool] = None,
                 users_cname_level: Optional[int] = None,
                 users_cookie: Optional[str] = None,
                 users_query_string: Optional[str] = None,
                 users_regex: Optional[str] = None,
                 users_replace: Optional[str] = None,
                 users_title: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorSaasDefinitionsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            application_action=application_action,
            application_cname_enabled=application_cname_enabled,
            application_cname_level=application_cname_level,
            application_cookie=application_cookie,
            application_query_string=application_query_string,
            application_regex=application_regex,
            application_replace=application_replace,
            application_title=application_title,
            customer_action=customer_action,
            customer_cname_enabled=customer_cname_enabled,
            customer_cname_level=customer_cname_level,
            customer_cookie=customer_cookie,
            customer_query_string=customer_query_string,
            customer_regex=customer_regex,
            customer_replace=customer_replace,
            customer_title=customer_title,
            locked=locked,
            template_uuid=template_uuid,
            users_action=users_action,
            users_cname_enabled=users_cname_enabled,
            users_cname_level=users_cname_level,
            users_cookie=users_cookie,
            users_query_string=users_query_string,
            users_regex=users_regex,
            users_replace=users_replace,
            users_title=users_title,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             application_action: Optional[str] = None,
             application_cname_enabled: Optional[bool] = None,
             application_cname_level: Optional[int] = None,
             application_cookie: Optional[str] = None,
             application_query_string: Optional[str] = None,
             application_regex: Optional[str] = None,
             application_replace: Optional[str] = None,
             application_title: Optional[str] = None,
             customer_action: Optional[str] = None,
             customer_cname_enabled: Optional[bool] = None,
             customer_cname_level: Optional[int] = None,
             customer_cookie: Optional[str] = None,
             customer_query_string: Optional[str] = None,
             customer_regex: Optional[str] = None,
             customer_replace: Optional[str] = None,
             customer_title: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             users_action: Optional[str] = None,
             users_cname_enabled: Optional[bool] = None,
             users_cname_level: Optional[int] = None,
             users_cookie: Optional[str] = None,
             users_query_string: Optional[str] = None,
             users_regex: Optional[str] = None,
             users_replace: Optional[str] = None,
             users_title: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'applicationAction' in kwargs:
            application_action = kwargs['applicationAction']
        if 'applicationCnameEnabled' in kwargs:
            application_cname_enabled = kwargs['applicationCnameEnabled']
        if 'applicationCnameLevel' in kwargs:
            application_cname_level = kwargs['applicationCnameLevel']
        if 'applicationCookie' in kwargs:
            application_cookie = kwargs['applicationCookie']
        if 'applicationQueryString' in kwargs:
            application_query_string = kwargs['applicationQueryString']
        if 'applicationRegex' in kwargs:
            application_regex = kwargs['applicationRegex']
        if 'applicationReplace' in kwargs:
            application_replace = kwargs['applicationReplace']
        if 'applicationTitle' in kwargs:
            application_title = kwargs['applicationTitle']
        if 'customerAction' in kwargs:
            customer_action = kwargs['customerAction']
        if 'customerCnameEnabled' in kwargs:
            customer_cname_enabled = kwargs['customerCnameEnabled']
        if 'customerCnameLevel' in kwargs:
            customer_cname_level = kwargs['customerCnameLevel']
        if 'customerCookie' in kwargs:
            customer_cookie = kwargs['customerCookie']
        if 'customerQueryString' in kwargs:
            customer_query_string = kwargs['customerQueryString']
        if 'customerRegex' in kwargs:
            customer_regex = kwargs['customerRegex']
        if 'customerReplace' in kwargs:
            customer_replace = kwargs['customerReplace']
        if 'customerTitle' in kwargs:
            customer_title = kwargs['customerTitle']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'usersAction' in kwargs:
            users_action = kwargs['usersAction']
        if 'usersCnameEnabled' in kwargs:
            users_cname_enabled = kwargs['usersCnameEnabled']
        if 'usersCnameLevel' in kwargs:
            users_cname_level = kwargs['usersCnameLevel']
        if 'usersCookie' in kwargs:
            users_cookie = kwargs['usersCookie']
        if 'usersQueryString' in kwargs:
            users_query_string = kwargs['usersQueryString']
        if 'usersRegex' in kwargs:
            users_regex = kwargs['usersRegex']
        if 'usersReplace' in kwargs:
            users_replace = kwargs['usersReplace']
        if 'usersTitle' in kwargs:
            users_title = kwargs['usersTitle']

        if application_action is not None:
            _setter("application_action", application_action)
        if application_cname_enabled is not None:
            _setter("application_cname_enabled", application_cname_enabled)
        if application_cname_level is not None:
            _setter("application_cname_level", application_cname_level)
        if application_cookie is not None:
            _setter("application_cookie", application_cookie)
        if application_query_string is not None:
            _setter("application_query_string", application_query_string)
        if application_regex is not None:
            _setter("application_regex", application_regex)
        if application_replace is not None:
            _setter("application_replace", application_replace)
        if application_title is not None:
            _setter("application_title", application_title)
        if customer_action is not None:
            _setter("customer_action", customer_action)
        if customer_cname_enabled is not None:
            _setter("customer_cname_enabled", customer_cname_enabled)
        if customer_cname_level is not None:
            _setter("customer_cname_level", customer_cname_level)
        if customer_cookie is not None:
            _setter("customer_cookie", customer_cookie)
        if customer_query_string is not None:
            _setter("customer_query_string", customer_query_string)
        if customer_regex is not None:
            _setter("customer_regex", customer_regex)
        if customer_replace is not None:
            _setter("customer_replace", customer_replace)
        if customer_title is not None:
            _setter("customer_title", customer_title)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if users_action is not None:
            _setter("users_action", users_action)
        if users_cname_enabled is not None:
            _setter("users_cname_enabled", users_cname_enabled)
        if users_cname_level is not None:
            _setter("users_cname_level", users_cname_level)
        if users_cookie is not None:
            _setter("users_cookie", users_cookie)
        if users_query_string is not None:
            _setter("users_query_string", users_query_string)
        if users_regex is not None:
            _setter("users_regex", users_regex)
        if users_replace is not None:
            _setter("users_replace", users_replace)
        if users_title is not None:
            _setter("users_title", users_title)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="applicationAction")
    def application_action(self) -> Optional[str]:
        return pulumi.get(self, "application_action")

    @property
    @pulumi.getter(name="applicationCnameEnabled")
    def application_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "application_cname_enabled")

    @property
    @pulumi.getter(name="applicationCnameLevel")
    def application_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "application_cname_level")

    @property
    @pulumi.getter(name="applicationCookie")
    def application_cookie(self) -> Optional[str]:
        return pulumi.get(self, "application_cookie")

    @property
    @pulumi.getter(name="applicationQueryString")
    def application_query_string(self) -> Optional[str]:
        return pulumi.get(self, "application_query_string")

    @property
    @pulumi.getter(name="applicationRegex")
    def application_regex(self) -> Optional[str]:
        return pulumi.get(self, "application_regex")

    @property
    @pulumi.getter(name="applicationReplace")
    def application_replace(self) -> Optional[str]:
        return pulumi.get(self, "application_replace")

    @property
    @pulumi.getter(name="applicationTitle")
    def application_title(self) -> Optional[str]:
        return pulumi.get(self, "application_title")

    @property
    @pulumi.getter(name="customerAction")
    def customer_action(self) -> Optional[str]:
        return pulumi.get(self, "customer_action")

    @property
    @pulumi.getter(name="customerCnameEnabled")
    def customer_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "customer_cname_enabled")

    @property
    @pulumi.getter(name="customerCnameLevel")
    def customer_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "customer_cname_level")

    @property
    @pulumi.getter(name="customerCookie")
    def customer_cookie(self) -> Optional[str]:
        return pulumi.get(self, "customer_cookie")

    @property
    @pulumi.getter(name="customerQueryString")
    def customer_query_string(self) -> Optional[str]:
        return pulumi.get(self, "customer_query_string")

    @property
    @pulumi.getter(name="customerRegex")
    def customer_regex(self) -> Optional[str]:
        return pulumi.get(self, "customer_regex")

    @property
    @pulumi.getter(name="customerReplace")
    def customer_replace(self) -> Optional[str]:
        return pulumi.get(self, "customer_replace")

    @property
    @pulumi.getter(name="customerTitle")
    def customer_title(self) -> Optional[str]:
        return pulumi.get(self, "customer_title")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="usersAction")
    def users_action(self) -> Optional[str]:
        return pulumi.get(self, "users_action")

    @property
    @pulumi.getter(name="usersCnameEnabled")
    def users_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "users_cname_enabled")

    @property
    @pulumi.getter(name="usersCnameLevel")
    def users_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "users_cname_level")

    @property
    @pulumi.getter(name="usersCookie")
    def users_cookie(self) -> Optional[str]:
        return pulumi.get(self, "users_cookie")

    @property
    @pulumi.getter(name="usersQueryString")
    def users_query_string(self) -> Optional[str]:
        return pulumi.get(self, "users_query_string")

    @property
    @pulumi.getter(name="usersRegex")
    def users_regex(self) -> Optional[str]:
        return pulumi.get(self, "users_regex")

    @property
    @pulumi.getter(name="usersReplace")
    def users_replace(self) -> Optional[str]:
        return pulumi.get(self, "users_replace")

    @property
    @pulumi.getter(name="usersTitle")
    def users_title(self) -> Optional[str]:
        return pulumi.get(self, "users_title")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudClientResult(dict):
    def __init__(__self__, *,
                 allow_override_origin_cache_key: Optional[bool] = None,
                 connector_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 origin_host_header: Optional[str] = None,
                 origin_type: Optional[str] = None,
                 sf3c_origin_host: Optional[str] = None,
                 sf3c_origin_host_header: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudClientResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_override_origin_cache_key=allow_override_origin_cache_key,
            connector_id=connector_id,
            enabled=enabled,
            locked=locked,
            origin_host_header=origin_host_header,
            origin_type=origin_type,
            sf3c_origin_host=sf3c_origin_host,
            sf3c_origin_host_header=sf3c_origin_host_header,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_override_origin_cache_key: Optional[bool] = None,
             connector_id: Optional[str] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             origin_host_header: Optional[str] = None,
             origin_type: Optional[str] = None,
             sf3c_origin_host: Optional[str] = None,
             sf3c_origin_host_header: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowOverrideOriginCacheKey' in kwargs:
            allow_override_origin_cache_key = kwargs['allowOverrideOriginCacheKey']
        if 'connectorId' in kwargs:
            connector_id = kwargs['connectorId']
        if 'originHostHeader' in kwargs:
            origin_host_header = kwargs['originHostHeader']
        if 'originType' in kwargs:
            origin_type = kwargs['originType']
        if 'sf3cOriginHost' in kwargs:
            sf3c_origin_host = kwargs['sf3cOriginHost']
        if 'sf3cOriginHostHeader' in kwargs:
            sf3c_origin_host_header = kwargs['sf3cOriginHostHeader']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if allow_override_origin_cache_key is not None:
            _setter("allow_override_origin_cache_key", allow_override_origin_cache_key)
        if connector_id is not None:
            _setter("connector_id", connector_id)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if origin_host_header is not None:
            _setter("origin_host_header", origin_host_header)
        if origin_type is not None:
            _setter("origin_type", origin_type)
        if sf3c_origin_host is not None:
            _setter("sf3c_origin_host", sf3c_origin_host)
        if sf3c_origin_host_header is not None:
            _setter("sf3c_origin_host_header", sf3c_origin_host_header)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowOverrideOriginCacheKey")
    def allow_override_origin_cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "allow_override_origin_cache_key")

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[str]:
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originHostHeader")
    def origin_host_header(self) -> Optional[str]:
        return pulumi.get(self, "origin_host_header")

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional[str]:
        return pulumi.get(self, "origin_type")

    @property
    @pulumi.getter(name="sf3cOriginHost")
    def sf3c_origin_host(self) -> Optional[str]:
        return pulumi.get(self, "sf3c_origin_host")

    @property
    @pulumi.getter(name="sf3cOriginHostHeader")
    def sf3c_origin_host_header(self) -> Optional[str]:
        return pulumi.get(self, "sf3c_origin_host_header")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderHostHeaderResult(dict):
    def __init__(__self__, *,
                 host_header_source: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderHostHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_header_source=host_header_source,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_header_source: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hostHeaderSource' in kwargs:
            host_header_source = kwargs['hostHeaderSource']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if host_header_source is not None:
            _setter("host_header_source", host_header_source)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="hostHeaderSource")
    def host_header_source(self) -> Optional[str]:
        return pulumi.get(self, "host_header_source")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSavePostDcaProcessingResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorSavePostDcaProcessingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorScheduleInvalidationResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 refresh_method: Optional[str] = None,
                 repeat: Optional[bool] = None,
                 repeat_interval: Optional[str] = None,
                 start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorScheduleInvalidationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            refresh_method=refresh_method,
            repeat=repeat,
            repeat_interval=repeat_interval,
            start=start,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             refresh_method: Optional[str] = None,
             repeat: Optional[bool] = None,
             repeat_interval: Optional[str] = None,
             start: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'refreshMethod' in kwargs:
            refresh_method = kwargs['refreshMethod']
        if 'repeatInterval' in kwargs:
            repeat_interval = kwargs['repeatInterval']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if refresh_method is not None:
            _setter("refresh_method", refresh_method)
        if repeat is not None:
            _setter("repeat", repeat)
        if repeat_interval is not None:
            _setter("repeat_interval", repeat_interval)
        if start is not None:
            _setter("start", start)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="refreshMethod")
    def refresh_method(self) -> Optional[str]:
        return pulumi.get(self, "refresh_method")

    @property
    @pulumi.getter
    def repeat(self) -> Optional[bool]:
        return pulumi.get(self, "repeat")

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[str]:
        return pulumi.get(self, "repeat_interval")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorScriptManagementResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 serviceworker: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 timestamp: Optional[int] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorScriptManagementResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            serviceworker=serviceworker,
            template_uuid=template_uuid,
            timestamp=timestamp,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             serviceworker: Optional[str] = None,
             template_uuid: Optional[str] = None,
             timestamp: Optional[int] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if serviceworker is not None:
            _setter("serviceworker", serviceworker)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if timestamp is not None:
            _setter("timestamp", timestamp)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def serviceworker(self) -> Optional[str]:
        return pulumi.get(self, "serviceworker")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[int]:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedContentProtectionResult(dict):
    def __init__(__self__, *,
                 acl: Optional[bool] = None,
                 dash_media_encryption: Optional[bool] = None,
                 data_payload: Optional[bool] = None,
                 enable_token_in_uri: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 field_carry_over: Optional[str] = None,
                 header_for_salts: Optional[Sequence[str]] = None,
                 hls_master_manifest_files: Optional[Sequence[str]] = None,
                 hls_media_encryption: Optional[bool] = None,
                 ip: Optional[bool] = None,
                 key: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_encryption_title: Optional[str] = None,
                 revoked_list_id: Optional[int] = None,
                 salt: Optional[str] = None,
                 session_id: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_auth_hls_title: Optional[str] = None,
                 token_authentication_title: Optional[str] = None,
                 token_revocation_enabled: Optional[bool] = None,
                 token_revocation_title: Optional[str] = None,
                 transition_key: Optional[str] = None,
                 use_advanced: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedContentProtectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acl=acl,
            dash_media_encryption=dash_media_encryption,
            data_payload=data_payload,
            enable_token_in_uri=enable_token_in_uri,
            enabled=enabled,
            field_carry_over=field_carry_over,
            header_for_salts=header_for_salts,
            hls_master_manifest_files=hls_master_manifest_files,
            hls_media_encryption=hls_media_encryption,
            ip=ip,
            key=key,
            locked=locked,
            media_encryption_title=media_encryption_title,
            revoked_list_id=revoked_list_id,
            salt=salt,
            session_id=session_id,
            template_uuid=template_uuid,
            token_auth_hls_title=token_auth_hls_title,
            token_authentication_title=token_authentication_title,
            token_revocation_enabled=token_revocation_enabled,
            token_revocation_title=token_revocation_title,
            transition_key=transition_key,
            use_advanced=use_advanced,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acl: Optional[bool] = None,
             dash_media_encryption: Optional[bool] = None,
             data_payload: Optional[bool] = None,
             enable_token_in_uri: Optional[bool] = None,
             enabled: Optional[bool] = None,
             field_carry_over: Optional[str] = None,
             header_for_salts: Optional[Sequence[str]] = None,
             hls_master_manifest_files: Optional[Sequence[str]] = None,
             hls_media_encryption: Optional[bool] = None,
             ip: Optional[bool] = None,
             key: Optional[str] = None,
             locked: Optional[bool] = None,
             media_encryption_title: Optional[str] = None,
             revoked_list_id: Optional[int] = None,
             salt: Optional[str] = None,
             session_id: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             token_auth_hls_title: Optional[str] = None,
             token_authentication_title: Optional[str] = None,
             token_revocation_enabled: Optional[bool] = None,
             token_revocation_title: Optional[str] = None,
             transition_key: Optional[str] = None,
             use_advanced: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dashMediaEncryption' in kwargs:
            dash_media_encryption = kwargs['dashMediaEncryption']
        if 'dataPayload' in kwargs:
            data_payload = kwargs['dataPayload']
        if 'enableTokenInUri' in kwargs:
            enable_token_in_uri = kwargs['enableTokenInUri']
        if 'fieldCarryOver' in kwargs:
            field_carry_over = kwargs['fieldCarryOver']
        if 'headerForSalts' in kwargs:
            header_for_salts = kwargs['headerForSalts']
        if 'hlsMasterManifestFiles' in kwargs:
            hls_master_manifest_files = kwargs['hlsMasterManifestFiles']
        if 'hlsMediaEncryption' in kwargs:
            hls_media_encryption = kwargs['hlsMediaEncryption']
        if 'mediaEncryptionTitle' in kwargs:
            media_encryption_title = kwargs['mediaEncryptionTitle']
        if 'revokedListId' in kwargs:
            revoked_list_id = kwargs['revokedListId']
        if 'sessionId' in kwargs:
            session_id = kwargs['sessionId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'tokenAuthHlsTitle' in kwargs:
            token_auth_hls_title = kwargs['tokenAuthHlsTitle']
        if 'tokenAuthenticationTitle' in kwargs:
            token_authentication_title = kwargs['tokenAuthenticationTitle']
        if 'tokenRevocationEnabled' in kwargs:
            token_revocation_enabled = kwargs['tokenRevocationEnabled']
        if 'tokenRevocationTitle' in kwargs:
            token_revocation_title = kwargs['tokenRevocationTitle']
        if 'transitionKey' in kwargs:
            transition_key = kwargs['transitionKey']
        if 'useAdvanced' in kwargs:
            use_advanced = kwargs['useAdvanced']

        if acl is not None:
            _setter("acl", acl)
        if dash_media_encryption is not None:
            _setter("dash_media_encryption", dash_media_encryption)
        if data_payload is not None:
            _setter("data_payload", data_payload)
        if enable_token_in_uri is not None:
            _setter("enable_token_in_uri", enable_token_in_uri)
        if enabled is not None:
            _setter("enabled", enabled)
        if field_carry_over is not None:
            _setter("field_carry_over", field_carry_over)
        if header_for_salts is not None:
            _setter("header_for_salts", header_for_salts)
        if hls_master_manifest_files is not None:
            _setter("hls_master_manifest_files", hls_master_manifest_files)
        if hls_media_encryption is not None:
            _setter("hls_media_encryption", hls_media_encryption)
        if ip is not None:
            _setter("ip", ip)
        if key is not None:
            _setter("key", key)
        if locked is not None:
            _setter("locked", locked)
        if media_encryption_title is not None:
            _setter("media_encryption_title", media_encryption_title)
        if revoked_list_id is not None:
            _setter("revoked_list_id", revoked_list_id)
        if salt is not None:
            _setter("salt", salt)
        if session_id is not None:
            _setter("session_id", session_id)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if token_auth_hls_title is not None:
            _setter("token_auth_hls_title", token_auth_hls_title)
        if token_authentication_title is not None:
            _setter("token_authentication_title", token_authentication_title)
        if token_revocation_enabled is not None:
            _setter("token_revocation_enabled", token_revocation_enabled)
        if token_revocation_title is not None:
            _setter("token_revocation_title", token_revocation_title)
        if transition_key is not None:
            _setter("transition_key", transition_key)
        if use_advanced is not None:
            _setter("use_advanced", use_advanced)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def acl(self) -> Optional[bool]:
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter(name="dashMediaEncryption")
    def dash_media_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "dash_media_encryption")

    @property
    @pulumi.getter(name="dataPayload")
    def data_payload(self) -> Optional[bool]:
        return pulumi.get(self, "data_payload")

    @property
    @pulumi.getter(name="enableTokenInUri")
    def enable_token_in_uri(self) -> Optional[bool]:
        return pulumi.get(self, "enable_token_in_uri")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="fieldCarryOver")
    def field_carry_over(self) -> Optional[str]:
        return pulumi.get(self, "field_carry_over")

    @property
    @pulumi.getter(name="headerForSalts")
    def header_for_salts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "header_for_salts")

    @property
    @pulumi.getter(name="hlsMasterManifestFiles")
    def hls_master_manifest_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hls_master_manifest_files")

    @property
    @pulumi.getter(name="hlsMediaEncryption")
    def hls_media_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "hls_media_encryption")

    @property
    @pulumi.getter
    def ip(self) -> Optional[bool]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mediaEncryptionTitle")
    def media_encryption_title(self) -> Optional[str]:
        return pulumi.get(self, "media_encryption_title")

    @property
    @pulumi.getter(name="revokedListId")
    def revoked_list_id(self) -> Optional[int]:
        return pulumi.get(self, "revoked_list_id")

    @property
    @pulumi.getter
    def salt(self) -> Optional[str]:
        return pulumi.get(self, "salt")

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[bool]:
        return pulumi.get(self, "session_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tokenAuthHlsTitle")
    def token_auth_hls_title(self) -> Optional[str]:
        return pulumi.get(self, "token_auth_hls_title")

    @property
    @pulumi.getter(name="tokenAuthenticationTitle")
    def token_authentication_title(self) -> Optional[str]:
        return pulumi.get(self, "token_authentication_title")

    @property
    @pulumi.getter(name="tokenRevocationEnabled")
    def token_revocation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "token_revocation_enabled")

    @property
    @pulumi.getter(name="tokenRevocationTitle")
    def token_revocation_title(self) -> Optional[str]:
        return pulumi.get(self, "token_revocation_title")

    @property
    @pulumi.getter(name="transitionKey")
    def transition_key(self) -> Optional[str]:
        return pulumi.get(self, "transition_key")

    @property
    @pulumi.getter(name="useAdvanced")
    def use_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "use_advanced")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaOptimizationResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 dvr_type: Optional[str] = None,
                 dvr_window: Optional[str] = None,
                 enable_ull_streaming: Optional[bool] = None,
                 end_time: Optional[str] = None,
                 live_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 show_advanced: Optional[bool] = None,
                 start_time: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaOptimizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior=behavior,
            dvr_type=dvr_type,
            dvr_window=dvr_window,
            enable_ull_streaming=enable_ull_streaming,
            end_time=end_time,
            live_type=live_type,
            locked=locked,
            show_advanced=show_advanced,
            start_time=start_time,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior: Optional[str] = None,
             dvr_type: Optional[str] = None,
             dvr_window: Optional[str] = None,
             enable_ull_streaming: Optional[bool] = None,
             end_time: Optional[str] = None,
             live_type: Optional[str] = None,
             locked: Optional[bool] = None,
             show_advanced: Optional[bool] = None,
             start_time: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dvrType' in kwargs:
            dvr_type = kwargs['dvrType']
        if 'dvrWindow' in kwargs:
            dvr_window = kwargs['dvrWindow']
        if 'enableUllStreaming' in kwargs:
            enable_ull_streaming = kwargs['enableUllStreaming']
        if 'endTime' in kwargs:
            end_time = kwargs['endTime']
        if 'liveType' in kwargs:
            live_type = kwargs['liveType']
        if 'showAdvanced' in kwargs:
            show_advanced = kwargs['showAdvanced']
        if 'startTime' in kwargs:
            start_time = kwargs['startTime']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if behavior is not None:
            _setter("behavior", behavior)
        if dvr_type is not None:
            _setter("dvr_type", dvr_type)
        if dvr_window is not None:
            _setter("dvr_window", dvr_window)
        if enable_ull_streaming is not None:
            _setter("enable_ull_streaming", enable_ull_streaming)
        if end_time is not None:
            _setter("end_time", end_time)
        if live_type is not None:
            _setter("live_type", live_type)
        if locked is not None:
            _setter("locked", locked)
        if show_advanced is not None:
            _setter("show_advanced", show_advanced)
        if start_time is not None:
            _setter("start_time", start_time)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter(name="dvrType")
    def dvr_type(self) -> Optional[str]:
        return pulumi.get(self, "dvr_type")

    @property
    @pulumi.getter(name="dvrWindow")
    def dvr_window(self) -> Optional[str]:
        return pulumi.get(self, "dvr_window")

    @property
    @pulumi.getter(name="enableUllStreaming")
    def enable_ull_streaming(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ull_streaming")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="liveType")
    def live_type(self) -> Optional[str]:
        return pulumi.get(self, "live_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="showAdvanced")
    def show_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "show_advanced")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaStreamingPrefetchResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaStreamingPrefetchResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSetVariableResult(dict):
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 case_sensitive: Optional[bool] = None,
                 certificate_field_name: Optional[str] = None,
                 cookie_name: Optional[str] = None,
                 device_profile: Optional[str] = None,
                 encryption_key: Optional[str] = None,
                 encryption_mode: Optional[str] = None,
                 end_index: Optional[str] = None,
                 except_chars: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 force_chars: Optional[str] = None,
                 format_string: Optional[str] = None,
                 generator: Optional[str] = None,
                 global_substitution: Optional[bool] = None,
                 header_name: Optional[str] = None,
                 hmac_algorithm: Optional[str] = None,
                 hmac_key: Optional[str] = None,
                 initialization_vector: Optional[str] = None,
                 ip_version: Optional[str] = None,
                 ipv4_prefix: Optional[int] = None,
                 ipv6_prefix: Optional[int] = None,
                 location_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 max: Optional[int] = None,
                 max_random_number: Optional[str] = None,
                 min: Optional[int] = None,
                 min_random_number: Optional[str] = None,
                 nonce: Optional[str] = None,
                 number_of_bytes: Optional[int] = None,
                 operand_one: Optional[str] = None,
                 param_name: Optional[str] = None,
                 path_component_offset: Optional[str] = None,
                 prepend_bytes: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex: Optional[str] = None,
                 replacement: Optional[str] = None,
                 response_header_name: Optional[str] = None,
                 separator: Optional[str] = None,
                 set_cookie_name: Optional[str] = None,
                 start_index: Optional[str] = None,
                 sub_string: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 transform: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value_source: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 variable_value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorSetVariableResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            algorithm=algorithm,
            case_sensitive=case_sensitive,
            certificate_field_name=certificate_field_name,
            cookie_name=cookie_name,
            device_profile=device_profile,
            encryption_key=encryption_key,
            encryption_mode=encryption_mode,
            end_index=end_index,
            except_chars=except_chars,
            extract_location=extract_location,
            force_chars=force_chars,
            format_string=format_string,
            generator=generator,
            global_substitution=global_substitution,
            header_name=header_name,
            hmac_algorithm=hmac_algorithm,
            hmac_key=hmac_key,
            initialization_vector=initialization_vector,
            ip_version=ip_version,
            ipv4_prefix=ipv4_prefix,
            ipv6_prefix=ipv6_prefix,
            location_id=location_id,
            locked=locked,
            max=max,
            max_random_number=max_random_number,
            min=min,
            min_random_number=min_random_number,
            nonce=nonce,
            number_of_bytes=number_of_bytes,
            operand_one=operand_one,
            param_name=param_name,
            path_component_offset=path_component_offset,
            prepend_bytes=prepend_bytes,
            query_parameter_name=query_parameter_name,
            regex=regex,
            replacement=replacement,
            response_header_name=response_header_name,
            separator=separator,
            set_cookie_name=set_cookie_name,
            start_index=start_index,
            sub_string=sub_string,
            template_uuid=template_uuid,
            transform=transform,
            uuid=uuid,
            value_source=value_source,
            variable_name=variable_name,
            variable_value=variable_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             algorithm: Optional[str] = None,
             case_sensitive: Optional[bool] = None,
             certificate_field_name: Optional[str] = None,
             cookie_name: Optional[str] = None,
             device_profile: Optional[str] = None,
             encryption_key: Optional[str] = None,
             encryption_mode: Optional[str] = None,
             end_index: Optional[str] = None,
             except_chars: Optional[str] = None,
             extract_location: Optional[str] = None,
             force_chars: Optional[str] = None,
             format_string: Optional[str] = None,
             generator: Optional[str] = None,
             global_substitution: Optional[bool] = None,
             header_name: Optional[str] = None,
             hmac_algorithm: Optional[str] = None,
             hmac_key: Optional[str] = None,
             initialization_vector: Optional[str] = None,
             ip_version: Optional[str] = None,
             ipv4_prefix: Optional[int] = None,
             ipv6_prefix: Optional[int] = None,
             location_id: Optional[str] = None,
             locked: Optional[bool] = None,
             max: Optional[int] = None,
             max_random_number: Optional[str] = None,
             min: Optional[int] = None,
             min_random_number: Optional[str] = None,
             nonce: Optional[str] = None,
             number_of_bytes: Optional[int] = None,
             operand_one: Optional[str] = None,
             param_name: Optional[str] = None,
             path_component_offset: Optional[str] = None,
             prepend_bytes: Optional[bool] = None,
             query_parameter_name: Optional[str] = None,
             regex: Optional[str] = None,
             replacement: Optional[str] = None,
             response_header_name: Optional[str] = None,
             separator: Optional[str] = None,
             set_cookie_name: Optional[str] = None,
             start_index: Optional[str] = None,
             sub_string: Optional[str] = None,
             template_uuid: Optional[str] = None,
             transform: Optional[str] = None,
             uuid: Optional[str] = None,
             value_source: Optional[str] = None,
             variable_name: Optional[str] = None,
             variable_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'caseSensitive' in kwargs:
            case_sensitive = kwargs['caseSensitive']
        if 'certificateFieldName' in kwargs:
            certificate_field_name = kwargs['certificateFieldName']
        if 'cookieName' in kwargs:
            cookie_name = kwargs['cookieName']
        if 'deviceProfile' in kwargs:
            device_profile = kwargs['deviceProfile']
        if 'encryptionKey' in kwargs:
            encryption_key = kwargs['encryptionKey']
        if 'encryptionMode' in kwargs:
            encryption_mode = kwargs['encryptionMode']
        if 'endIndex' in kwargs:
            end_index = kwargs['endIndex']
        if 'exceptChars' in kwargs:
            except_chars = kwargs['exceptChars']
        if 'extractLocation' in kwargs:
            extract_location = kwargs['extractLocation']
        if 'forceChars' in kwargs:
            force_chars = kwargs['forceChars']
        if 'formatString' in kwargs:
            format_string = kwargs['formatString']
        if 'globalSubstitution' in kwargs:
            global_substitution = kwargs['globalSubstitution']
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'hmacAlgorithm' in kwargs:
            hmac_algorithm = kwargs['hmacAlgorithm']
        if 'hmacKey' in kwargs:
            hmac_key = kwargs['hmacKey']
        if 'initializationVector' in kwargs:
            initialization_vector = kwargs['initializationVector']
        if 'ipVersion' in kwargs:
            ip_version = kwargs['ipVersion']
        if 'ipv4Prefix' in kwargs:
            ipv4_prefix = kwargs['ipv4Prefix']
        if 'ipv6Prefix' in kwargs:
            ipv6_prefix = kwargs['ipv6Prefix']
        if 'locationId' in kwargs:
            location_id = kwargs['locationId']
        if 'maxRandomNumber' in kwargs:
            max_random_number = kwargs['maxRandomNumber']
        if 'minRandomNumber' in kwargs:
            min_random_number = kwargs['minRandomNumber']
        if 'numberOfBytes' in kwargs:
            number_of_bytes = kwargs['numberOfBytes']
        if 'operandOne' in kwargs:
            operand_one = kwargs['operandOne']
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'pathComponentOffset' in kwargs:
            path_component_offset = kwargs['pathComponentOffset']
        if 'prependBytes' in kwargs:
            prepend_bytes = kwargs['prependBytes']
        if 'queryParameterName' in kwargs:
            query_parameter_name = kwargs['queryParameterName']
        if 'responseHeaderName' in kwargs:
            response_header_name = kwargs['responseHeaderName']
        if 'setCookieName' in kwargs:
            set_cookie_name = kwargs['setCookieName']
        if 'startIndex' in kwargs:
            start_index = kwargs['startIndex']
        if 'subString' in kwargs:
            sub_string = kwargs['subString']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'valueSource' in kwargs:
            value_source = kwargs['valueSource']
        if 'variableName' in kwargs:
            variable_name = kwargs['variableName']
        if 'variableValue' in kwargs:
            variable_value = kwargs['variableValue']

        if algorithm is not None:
            _setter("algorithm", algorithm)
        if case_sensitive is not None:
            _setter("case_sensitive", case_sensitive)
        if certificate_field_name is not None:
            _setter("certificate_field_name", certificate_field_name)
        if cookie_name is not None:
            _setter("cookie_name", cookie_name)
        if device_profile is not None:
            _setter("device_profile", device_profile)
        if encryption_key is not None:
            _setter("encryption_key", encryption_key)
        if encryption_mode is not None:
            _setter("encryption_mode", encryption_mode)
        if end_index is not None:
            _setter("end_index", end_index)
        if except_chars is not None:
            _setter("except_chars", except_chars)
        if extract_location is not None:
            _setter("extract_location", extract_location)
        if force_chars is not None:
            _setter("force_chars", force_chars)
        if format_string is not None:
            _setter("format_string", format_string)
        if generator is not None:
            _setter("generator", generator)
        if global_substitution is not None:
            _setter("global_substitution", global_substitution)
        if header_name is not None:
            _setter("header_name", header_name)
        if hmac_algorithm is not None:
            _setter("hmac_algorithm", hmac_algorithm)
        if hmac_key is not None:
            _setter("hmac_key", hmac_key)
        if initialization_vector is not None:
            _setter("initialization_vector", initialization_vector)
        if ip_version is not None:
            _setter("ip_version", ip_version)
        if ipv4_prefix is not None:
            _setter("ipv4_prefix", ipv4_prefix)
        if ipv6_prefix is not None:
            _setter("ipv6_prefix", ipv6_prefix)
        if location_id is not None:
            _setter("location_id", location_id)
        if locked is not None:
            _setter("locked", locked)
        if max is not None:
            _setter("max", max)
        if max_random_number is not None:
            _setter("max_random_number", max_random_number)
        if min is not None:
            _setter("min", min)
        if min_random_number is not None:
            _setter("min_random_number", min_random_number)
        if nonce is not None:
            _setter("nonce", nonce)
        if number_of_bytes is not None:
            _setter("number_of_bytes", number_of_bytes)
        if operand_one is not None:
            _setter("operand_one", operand_one)
        if param_name is not None:
            _setter("param_name", param_name)
        if path_component_offset is not None:
            _setter("path_component_offset", path_component_offset)
        if prepend_bytes is not None:
            _setter("prepend_bytes", prepend_bytes)
        if query_parameter_name is not None:
            _setter("query_parameter_name", query_parameter_name)
        if regex is not None:
            _setter("regex", regex)
        if replacement is not None:
            _setter("replacement", replacement)
        if response_header_name is not None:
            _setter("response_header_name", response_header_name)
        if separator is not None:
            _setter("separator", separator)
        if set_cookie_name is not None:
            _setter("set_cookie_name", set_cookie_name)
        if start_index is not None:
            _setter("start_index", start_index)
        if sub_string is not None:
            _setter("sub_string", sub_string)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if transform is not None:
            _setter("transform", transform)
        if uuid is not None:
            _setter("uuid", uuid)
        if value_source is not None:
            _setter("value_source", value_source)
        if variable_name is not None:
            _setter("variable_name", variable_name)
        if variable_value is not None:
            _setter("variable_value", variable_value)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="certificateFieldName")
    def certificate_field_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_field_name")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="deviceProfile")
    def device_profile(self) -> Optional[str]:
        return pulumi.get(self, "device_profile")

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[str]:
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter(name="encryptionMode")
    def encryption_mode(self) -> Optional[str]:
        return pulumi.get(self, "encryption_mode")

    @property
    @pulumi.getter(name="endIndex")
    def end_index(self) -> Optional[str]:
        return pulumi.get(self, "end_index")

    @property
    @pulumi.getter(name="exceptChars")
    def except_chars(self) -> Optional[str]:
        return pulumi.get(self, "except_chars")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="forceChars")
    def force_chars(self) -> Optional[str]:
        return pulumi.get(self, "force_chars")

    @property
    @pulumi.getter(name="formatString")
    def format_string(self) -> Optional[str]:
        return pulumi.get(self, "format_string")

    @property
    @pulumi.getter
    def generator(self) -> Optional[str]:
        return pulumi.get(self, "generator")

    @property
    @pulumi.getter(name="globalSubstitution")
    def global_substitution(self) -> Optional[bool]:
        return pulumi.get(self, "global_substitution")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="hmacAlgorithm")
    def hmac_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hmac_algorithm")

    @property
    @pulumi.getter(name="hmacKey")
    def hmac_key(self) -> Optional[str]:
        return pulumi.get(self, "hmac_key")

    @property
    @pulumi.getter(name="initializationVector")
    def initialization_vector(self) -> Optional[str]:
        return pulumi.get(self, "initialization_vector")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="ipv4Prefix")
    def ipv4_prefix(self) -> Optional[int]:
        return pulumi.get(self, "ipv4_prefix")

    @property
    @pulumi.getter(name="ipv6Prefix")
    def ipv6_prefix(self) -> Optional[int]:
        return pulumi.get(self, "ipv6_prefix")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[str]:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter(name="maxRandomNumber")
    def max_random_number(self) -> Optional[str]:
        return pulumi.get(self, "max_random_number")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="minRandomNumber")
    def min_random_number(self) -> Optional[str]:
        return pulumi.get(self, "min_random_number")

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @property
    @pulumi.getter(name="numberOfBytes")
    def number_of_bytes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_bytes")

    @property
    @pulumi.getter(name="operandOne")
    def operand_one(self) -> Optional[str]:
        return pulumi.get(self, "operand_one")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="pathComponentOffset")
    def path_component_offset(self) -> Optional[str]:
        return pulumi.get(self, "path_component_offset")

    @property
    @pulumi.getter(name="prependBytes")
    def prepend_bytes(self) -> Optional[bool]:
        return pulumi.get(self, "prepend_bytes")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def replacement(self) -> Optional[str]:
        return pulumi.get(self, "replacement")

    @property
    @pulumi.getter(name="responseHeaderName")
    def response_header_name(self) -> Optional[str]:
        return pulumi.get(self, "response_header_name")

    @property
    @pulumi.getter
    def separator(self) -> Optional[str]:
        return pulumi.get(self, "separator")

    @property
    @pulumi.getter(name="setCookieName")
    def set_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "set_cookie_name")

    @property
    @pulumi.getter(name="startIndex")
    def start_index(self) -> Optional[str]:
        return pulumi.get(self, "start_index")

    @property
    @pulumi.getter(name="subString")
    def sub_string(self) -> Optional[str]:
        return pulumi.get(self, "sub_string")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def transform(self) -> Optional[str]:
        return pulumi.get(self, "transform")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="valueSource")
    def value_source(self) -> Optional[str]:
        return pulumi.get(self, "value_source")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @property
    @pulumi.getter(name="variableValue")
    def variable_value(self) -> Optional[str]:
        return pulumi.get(self, "variable_value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSimulateErrorCodeResult(dict):
    def __init__(__self__, *,
                 error_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorSimulateErrorCodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            error_type=error_type,
            locked=locked,
            template_uuid=template_uuid,
            timeout=timeout,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             error_type: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             timeout: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'errorType' in kwargs:
            error_type = kwargs['errorType']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if error_type is not None:
            _setter("error_type", error_type)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if timeout is not None:
            _setter("timeout", timeout)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> Optional[str]:
        return pulumi.get(self, "error_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 nossmap: Optional[str] = None,
                 ssmap: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldSsmapResult'] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            nossmap=nossmap,
            ssmap=ssmap,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             nossmap: Optional[str] = None,
             ssmap: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldSsmapResult'] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if nossmap is not None:
            _setter("nossmap", nossmap)
        if ssmap is not None:
            _setter("ssmap", ssmap)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def nossmap(self) -> Optional[str]:
        return pulumi.get(self, "nossmap")

    @property
    @pulumi.getter
    def ssmap(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldSsmapResult']:
        return pulumi.get(self, "ssmap")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldSsmapResult(dict):
    def __init__(__self__, *,
                 china_cdn_map: Optional[str] = None,
                 has_mixed_hosts: Optional[bool] = None,
                 name: Optional[str] = None,
                 src: Optional[str] = None,
                 srmap: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldSsmapResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            china_cdn_map=china_cdn_map,
            has_mixed_hosts=has_mixed_hosts,
            name=name,
            src=src,
            srmap=srmap,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             china_cdn_map: Optional[str] = None,
             has_mixed_hosts: Optional[bool] = None,
             name: Optional[str] = None,
             src: Optional[str] = None,
             srmap: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'chinaCdnMap' in kwargs:
            china_cdn_map = kwargs['chinaCdnMap']
        if 'hasMixedHosts' in kwargs:
            has_mixed_hosts = kwargs['hasMixedHosts']

        if china_cdn_map is not None:
            _setter("china_cdn_map", china_cdn_map)
        if has_mixed_hosts is not None:
            _setter("has_mixed_hosts", has_mixed_hosts)
        if name is not None:
            _setter("name", name)
        if src is not None:
            _setter("src", src)
        if srmap is not None:
            _setter("srmap", srmap)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="chinaCdnMap")
    def china_cdn_map(self) -> Optional[str]:
        return pulumi.get(self, "china_cdn_map")

    @property
    @pulumi.getter(name="hasMixedHosts")
    def has_mixed_hosts(self) -> Optional[bool]:
        return pulumi.get(self, "has_mixed_hosts")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def src(self) -> Optional[str]:
        return pulumi.get(self, "src")

    @property
    @pulumi.getter
    def srmap(self) -> Optional[str]:
        return pulumi.get(self, "srmap")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationResult(dict):
    def __init__(__self__, *,
                 allow_https_downgrade: Optional[bool] = None,
                 allow_https_upgrade: Optional[bool] = None,
                 cache_sharing_duration: Optional[int] = None,
                 cache_sharing_start_time: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 is_certificate_sni_only: Optional[bool] = None,
                 is_tiered_distribution_used: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 migration_duration: Optional[int] = None,
                 migration_from: Optional[str] = None,
                 migration_start_time: Optional[str] = None,
                 td_location: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_https_downgrade=allow_https_downgrade,
            allow_https_upgrade=allow_https_upgrade,
            cache_sharing_duration=cache_sharing_duration,
            cache_sharing_start_time=cache_sharing_start_time,
            enabled=enabled,
            is_certificate_sni_only=is_certificate_sni_only,
            is_tiered_distribution_used=is_tiered_distribution_used,
            locked=locked,
            migration_duration=migration_duration,
            migration_from=migration_from,
            migration_start_time=migration_start_time,
            td_location=td_location,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_https_downgrade: Optional[bool] = None,
             allow_https_upgrade: Optional[bool] = None,
             cache_sharing_duration: Optional[int] = None,
             cache_sharing_start_time: Optional[str] = None,
             enabled: Optional[bool] = None,
             is_certificate_sni_only: Optional[bool] = None,
             is_tiered_distribution_used: Optional[bool] = None,
             locked: Optional[bool] = None,
             migration_duration: Optional[int] = None,
             migration_from: Optional[str] = None,
             migration_start_time: Optional[str] = None,
             td_location: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowHttpsDowngrade' in kwargs:
            allow_https_downgrade = kwargs['allowHttpsDowngrade']
        if 'allowHttpsUpgrade' in kwargs:
            allow_https_upgrade = kwargs['allowHttpsUpgrade']
        if 'cacheSharingDuration' in kwargs:
            cache_sharing_duration = kwargs['cacheSharingDuration']
        if 'cacheSharingStartTime' in kwargs:
            cache_sharing_start_time = kwargs['cacheSharingStartTime']
        if 'isCertificateSniOnly' in kwargs:
            is_certificate_sni_only = kwargs['isCertificateSniOnly']
        if 'isTieredDistributionUsed' in kwargs:
            is_tiered_distribution_used = kwargs['isTieredDistributionUsed']
        if 'migrationDuration' in kwargs:
            migration_duration = kwargs['migrationDuration']
        if 'migrationFrom' in kwargs:
            migration_from = kwargs['migrationFrom']
        if 'migrationStartTime' in kwargs:
            migration_start_time = kwargs['migrationStartTime']
        if 'tdLocation' in kwargs:
            td_location = kwargs['tdLocation']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if allow_https_downgrade is not None:
            _setter("allow_https_downgrade", allow_https_downgrade)
        if allow_https_upgrade is not None:
            _setter("allow_https_upgrade", allow_https_upgrade)
        if cache_sharing_duration is not None:
            _setter("cache_sharing_duration", cache_sharing_duration)
        if cache_sharing_start_time is not None:
            _setter("cache_sharing_start_time", cache_sharing_start_time)
        if enabled is not None:
            _setter("enabled", enabled)
        if is_certificate_sni_only is not None:
            _setter("is_certificate_sni_only", is_certificate_sni_only)
        if is_tiered_distribution_used is not None:
            _setter("is_tiered_distribution_used", is_tiered_distribution_used)
        if locked is not None:
            _setter("locked", locked)
        if migration_duration is not None:
            _setter("migration_duration", migration_duration)
        if migration_from is not None:
            _setter("migration_from", migration_from)
        if migration_start_time is not None:
            _setter("migration_start_time", migration_start_time)
        if td_location is not None:
            _setter("td_location", td_location)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowHttpsDowngrade")
    def allow_https_downgrade(self) -> Optional[bool]:
        return pulumi.get(self, "allow_https_downgrade")

    @property
    @pulumi.getter(name="allowHttpsUpgrade")
    def allow_https_upgrade(self) -> Optional[bool]:
        return pulumi.get(self, "allow_https_upgrade")

    @property
    @pulumi.getter(name="cacheSharingDuration")
    def cache_sharing_duration(self) -> Optional[int]:
        return pulumi.get(self, "cache_sharing_duration")

    @property
    @pulumi.getter(name="cacheSharingStartTime")
    def cache_sharing_start_time(self) -> Optional[str]:
        return pulumi.get(self, "cache_sharing_start_time")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isCertificateSniOnly")
    def is_certificate_sni_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_certificate_sni_only")

    @property
    @pulumi.getter(name="isTieredDistributionUsed")
    def is_tiered_distribution_used(self) -> Optional[bool]:
        return pulumi.get(self, "is_tiered_distribution_used")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="migrationDuration")
    def migration_duration(self) -> Optional[int]:
        return pulumi.get(self, "migration_duration")

    @property
    @pulumi.getter(name="migrationFrom")
    def migration_from(self) -> Optional[str]:
        return pulumi.get(self, "migration_from")

    @property
    @pulumi.getter(name="migrationStartTime")
    def migration_start_time(self) -> Optional[str]:
        return pulumi.get(self, "migration_start_time")

    @property
    @pulumi.getter(name="tdLocation")
    def td_location(self) -> Optional[str]:
        return pulumi.get(self, "td_location")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationOverrideResult(dict):
    def __init__(__self__, *,
                 info: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationOverrideResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info=info,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if info is not None:
            _setter("info", info)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def info(self) -> Optional[str]:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorStrictHeaderParsingResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 strict_mode: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 valid_mode: Optional[bool] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorStrictHeaderParsingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            strict_mode=strict_mode,
            template_uuid=template_uuid,
            uuid=uuid,
            valid_mode=valid_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             strict_mode: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             valid_mode: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'strictMode' in kwargs:
            strict_mode = kwargs['strictMode']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'validMode' in kwargs:
            valid_mode = kwargs['validMode']

        if locked is not None:
            _setter("locked", locked)
        if strict_mode is not None:
            _setter("strict_mode", strict_mode)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if valid_mode is not None:
            _setter("valid_mode", valid_mode)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="strictMode")
    def strict_mode(self) -> Optional[bool]:
        return pulumi.get(self, "strict_mode")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="validMode")
    def valid_mode(self) -> Optional[bool]:
        return pulumi.get(self, "valid_mode")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSubCustomerResult(dict):
    def __init__(__self__, *,
                 access_control: Optional[bool] = None,
                 cache_key: Optional[bool] = None,
                 caching: Optional[bool] = None,
                 content_compressor: Optional[bool] = None,
                 dynamic_web_content: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 geo_location: Optional[bool] = None,
                 ip: Optional[bool] = None,
                 large_file_delivery: Optional[bool] = None,
                 live_video_delivery: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modify_path: Optional[bool] = None,
                 on_demand_video_delivery: Optional[bool] = None,
                 origin: Optional[bool] = None,
                 partner_domain_suffix: Optional[str] = None,
                 referrer: Optional[bool] = None,
                 refresh_content: Optional[bool] = None,
                 site_failover: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_authorization: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 web_application_firewall: Optional[bool] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorSubCustomerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_control=access_control,
            cache_key=cache_key,
            caching=caching,
            content_compressor=content_compressor,
            dynamic_web_content=dynamic_web_content,
            enabled=enabled,
            geo_location=geo_location,
            ip=ip,
            large_file_delivery=large_file_delivery,
            live_video_delivery=live_video_delivery,
            locked=locked,
            modify_path=modify_path,
            on_demand_video_delivery=on_demand_video_delivery,
            origin=origin,
            partner_domain_suffix=partner_domain_suffix,
            referrer=referrer,
            refresh_content=refresh_content,
            site_failover=site_failover,
            template_uuid=template_uuid,
            token_authorization=token_authorization,
            uuid=uuid,
            web_application_firewall=web_application_firewall,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_control: Optional[bool] = None,
             cache_key: Optional[bool] = None,
             caching: Optional[bool] = None,
             content_compressor: Optional[bool] = None,
             dynamic_web_content: Optional[bool] = None,
             enabled: Optional[bool] = None,
             geo_location: Optional[bool] = None,
             ip: Optional[bool] = None,
             large_file_delivery: Optional[bool] = None,
             live_video_delivery: Optional[bool] = None,
             locked: Optional[bool] = None,
             modify_path: Optional[bool] = None,
             on_demand_video_delivery: Optional[bool] = None,
             origin: Optional[bool] = None,
             partner_domain_suffix: Optional[str] = None,
             referrer: Optional[bool] = None,
             refresh_content: Optional[bool] = None,
             site_failover: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             token_authorization: Optional[bool] = None,
             uuid: Optional[str] = None,
             web_application_firewall: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessControl' in kwargs:
            access_control = kwargs['accessControl']
        if 'cacheKey' in kwargs:
            cache_key = kwargs['cacheKey']
        if 'contentCompressor' in kwargs:
            content_compressor = kwargs['contentCompressor']
        if 'dynamicWebContent' in kwargs:
            dynamic_web_content = kwargs['dynamicWebContent']
        if 'geoLocation' in kwargs:
            geo_location = kwargs['geoLocation']
        if 'largeFileDelivery' in kwargs:
            large_file_delivery = kwargs['largeFileDelivery']
        if 'liveVideoDelivery' in kwargs:
            live_video_delivery = kwargs['liveVideoDelivery']
        if 'modifyPath' in kwargs:
            modify_path = kwargs['modifyPath']
        if 'onDemandVideoDelivery' in kwargs:
            on_demand_video_delivery = kwargs['onDemandVideoDelivery']
        if 'partnerDomainSuffix' in kwargs:
            partner_domain_suffix = kwargs['partnerDomainSuffix']
        if 'refreshContent' in kwargs:
            refresh_content = kwargs['refreshContent']
        if 'siteFailover' in kwargs:
            site_failover = kwargs['siteFailover']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'tokenAuthorization' in kwargs:
            token_authorization = kwargs['tokenAuthorization']
        if 'webApplicationFirewall' in kwargs:
            web_application_firewall = kwargs['webApplicationFirewall']

        if access_control is not None:
            _setter("access_control", access_control)
        if cache_key is not None:
            _setter("cache_key", cache_key)
        if caching is not None:
            _setter("caching", caching)
        if content_compressor is not None:
            _setter("content_compressor", content_compressor)
        if dynamic_web_content is not None:
            _setter("dynamic_web_content", dynamic_web_content)
        if enabled is not None:
            _setter("enabled", enabled)
        if geo_location is not None:
            _setter("geo_location", geo_location)
        if ip is not None:
            _setter("ip", ip)
        if large_file_delivery is not None:
            _setter("large_file_delivery", large_file_delivery)
        if live_video_delivery is not None:
            _setter("live_video_delivery", live_video_delivery)
        if locked is not None:
            _setter("locked", locked)
        if modify_path is not None:
            _setter("modify_path", modify_path)
        if on_demand_video_delivery is not None:
            _setter("on_demand_video_delivery", on_demand_video_delivery)
        if origin is not None:
            _setter("origin", origin)
        if partner_domain_suffix is not None:
            _setter("partner_domain_suffix", partner_domain_suffix)
        if referrer is not None:
            _setter("referrer", referrer)
        if refresh_content is not None:
            _setter("refresh_content", refresh_content)
        if site_failover is not None:
            _setter("site_failover", site_failover)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if token_authorization is not None:
            _setter("token_authorization", token_authorization)
        if uuid is not None:
            _setter("uuid", uuid)
        if web_application_firewall is not None:
            _setter("web_application_firewall", web_application_firewall)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> Optional[bool]:
        return pulumi.get(self, "access_control")

    @property
    @pulumi.getter(name="cacheKey")
    def cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "cache_key")

    @property
    @pulumi.getter
    def caching(self) -> Optional[bool]:
        return pulumi.get(self, "caching")

    @property
    @pulumi.getter(name="contentCompressor")
    def content_compressor(self) -> Optional[bool]:
        return pulumi.get(self, "content_compressor")

    @property
    @pulumi.getter(name="dynamicWebContent")
    def dynamic_web_content(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_web_content")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="geoLocation")
    def geo_location(self) -> Optional[bool]:
        return pulumi.get(self, "geo_location")

    @property
    @pulumi.getter
    def ip(self) -> Optional[bool]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="largeFileDelivery")
    def large_file_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "large_file_delivery")

    @property
    @pulumi.getter(name="liveVideoDelivery")
    def live_video_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "live_video_delivery")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="modifyPath")
    def modify_path(self) -> Optional[bool]:
        return pulumi.get(self, "modify_path")

    @property
    @pulumi.getter(name="onDemandVideoDelivery")
    def on_demand_video_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "on_demand_video_delivery")

    @property
    @pulumi.getter
    def origin(self) -> Optional[bool]:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="partnerDomainSuffix")
    def partner_domain_suffix(self) -> Optional[str]:
        return pulumi.get(self, "partner_domain_suffix")

    @property
    @pulumi.getter
    def referrer(self) -> Optional[bool]:
        return pulumi.get(self, "referrer")

    @property
    @pulumi.getter(name="refreshContent")
    def refresh_content(self) -> Optional[bool]:
        return pulumi.get(self, "refresh_content")

    @property
    @pulumi.getter(name="siteFailover")
    def site_failover(self) -> Optional[bool]:
        return pulumi.get(self, "site_failover")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tokenAuthorization")
    def token_authorization(self) -> Optional[bool]:
        return pulumi.get(self, "token_authorization")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="webApplicationFirewall")
    def web_application_firewall(self) -> Optional[bool]:
        return pulumi.get(self, "web_application_firewall")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSureRouteResult(dict):
    def __init__(__self__, *,
                 allow_fcm_parent_override: Optional[bool] = None,
                 custom_map: Optional[str] = None,
                 custom_stat_key: Optional[str] = None,
                 enable_custom_key: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 force_ssl_forward: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 race_stat_ttl: Optional[str] = None,
                 sr_download_link_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 test_object_url: Optional[str] = None,
                 to_host: Optional[str] = None,
                 to_host_status: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorSureRouteResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_fcm_parent_override=allow_fcm_parent_override,
            custom_map=custom_map,
            custom_stat_key=custom_stat_key,
            enable_custom_key=enable_custom_key,
            enabled=enabled,
            force_ssl_forward=force_ssl_forward,
            locked=locked,
            race_stat_ttl=race_stat_ttl,
            sr_download_link_title=sr_download_link_title,
            template_uuid=template_uuid,
            test_object_url=test_object_url,
            to_host=to_host,
            to_host_status=to_host_status,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_fcm_parent_override: Optional[bool] = None,
             custom_map: Optional[str] = None,
             custom_stat_key: Optional[str] = None,
             enable_custom_key: Optional[bool] = None,
             enabled: Optional[bool] = None,
             force_ssl_forward: Optional[bool] = None,
             locked: Optional[bool] = None,
             race_stat_ttl: Optional[str] = None,
             sr_download_link_title: Optional[str] = None,
             template_uuid: Optional[str] = None,
             test_object_url: Optional[str] = None,
             to_host: Optional[str] = None,
             to_host_status: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowFcmParentOverride' in kwargs:
            allow_fcm_parent_override = kwargs['allowFcmParentOverride']
        if 'customMap' in kwargs:
            custom_map = kwargs['customMap']
        if 'customStatKey' in kwargs:
            custom_stat_key = kwargs['customStatKey']
        if 'enableCustomKey' in kwargs:
            enable_custom_key = kwargs['enableCustomKey']
        if 'forceSslForward' in kwargs:
            force_ssl_forward = kwargs['forceSslForward']
        if 'raceStatTtl' in kwargs:
            race_stat_ttl = kwargs['raceStatTtl']
        if 'srDownloadLinkTitle' in kwargs:
            sr_download_link_title = kwargs['srDownloadLinkTitle']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'testObjectUrl' in kwargs:
            test_object_url = kwargs['testObjectUrl']
        if 'toHost' in kwargs:
            to_host = kwargs['toHost']
        if 'toHostStatus' in kwargs:
            to_host_status = kwargs['toHostStatus']

        if allow_fcm_parent_override is not None:
            _setter("allow_fcm_parent_override", allow_fcm_parent_override)
        if custom_map is not None:
            _setter("custom_map", custom_map)
        if custom_stat_key is not None:
            _setter("custom_stat_key", custom_stat_key)
        if enable_custom_key is not None:
            _setter("enable_custom_key", enable_custom_key)
        if enabled is not None:
            _setter("enabled", enabled)
        if force_ssl_forward is not None:
            _setter("force_ssl_forward", force_ssl_forward)
        if locked is not None:
            _setter("locked", locked)
        if race_stat_ttl is not None:
            _setter("race_stat_ttl", race_stat_ttl)
        if sr_download_link_title is not None:
            _setter("sr_download_link_title", sr_download_link_title)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if test_object_url is not None:
            _setter("test_object_url", test_object_url)
        if to_host is not None:
            _setter("to_host", to_host)
        if to_host_status is not None:
            _setter("to_host_status", to_host_status)
        if type is not None:
            _setter("type", type)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowFcmParentOverride")
    def allow_fcm_parent_override(self) -> Optional[bool]:
        return pulumi.get(self, "allow_fcm_parent_override")

    @property
    @pulumi.getter(name="customMap")
    def custom_map(self) -> Optional[str]:
        return pulumi.get(self, "custom_map")

    @property
    @pulumi.getter(name="customStatKey")
    def custom_stat_key(self) -> Optional[str]:
        return pulumi.get(self, "custom_stat_key")

    @property
    @pulumi.getter(name="enableCustomKey")
    def enable_custom_key(self) -> Optional[bool]:
        return pulumi.get(self, "enable_custom_key")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forceSslForward")
    def force_ssl_forward(self) -> Optional[bool]:
        return pulumi.get(self, "force_ssl_forward")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="raceStatTtl")
    def race_stat_ttl(self) -> Optional[str]:
        return pulumi.get(self, "race_stat_ttl")

    @property
    @pulumi.getter(name="srDownloadLinkTitle")
    def sr_download_link_title(self) -> Optional[str]:
        return pulumi.get(self, "sr_download_link_title")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="testObjectUrl")
    def test_object_url(self) -> Optional[str]:
        return pulumi.get(self, "test_object_url")

    @property
    @pulumi.getter(name="toHost")
    def to_host(self) -> Optional[str]:
        return pulumi.get(self, "to_host")

    @property
    @pulumi.getter(name="toHostStatus")
    def to_host_status(self) -> Optional[str]:
        return pulumi.get(self, "to_host_status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTcpOptimizationResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorTcpOptimizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display=display,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if display is not None:
            _setter("display", display)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTeaLeafResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ibm_customer_id: Optional[int] = None,
                 limit_to_dynamic: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorTeaLeafResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            ibm_customer_id=ibm_customer_id,
            limit_to_dynamic=limit_to_dynamic,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             ibm_customer_id: Optional[int] = None,
             limit_to_dynamic: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ibmCustomerId' in kwargs:
            ibm_customer_id = kwargs['ibmCustomerId']
        if 'limitToDynamic' in kwargs:
            limit_to_dynamic = kwargs['limitToDynamic']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if ibm_customer_id is not None:
            _setter("ibm_customer_id", ibm_customer_id)
        if limit_to_dynamic is not None:
            _setter("limit_to_dynamic", limit_to_dynamic)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ibmCustomerId")
    def ibm_customer_id(self) -> Optional[int]:
        return pulumi.get(self, "ibm_customer_id")

    @property
    @pulumi.getter(name="limitToDynamic")
    def limit_to_dynamic(self) -> Optional[bool]:
        return pulumi.get(self, "limit_to_dynamic")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tiered_distribution_map: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            tiered_distribution_map=tiered_distribution_map,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             tiered_distribution_map: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'tieredDistributionMap' in kwargs:
            tiered_distribution_map = kwargs['tieredDistributionMap']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if tiered_distribution_map is not None:
            _setter("tiered_distribution_map", tiered_distribution_map)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tieredDistributionMap")
    def tiered_distribution_map(self) -> Optional[str]:
        return pulumi.get(self, "tiered_distribution_map")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionAdvancedResult(dict):
    def __init__(__self__, *,
                 allowall: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 method: Optional[str] = None,
                 policy: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tiered_distribution_map: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionAdvancedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowall=allowall,
            enabled=enabled,
            locked=locked,
            method=method,
            policy=policy,
            template_uuid=template_uuid,
            tiered_distribution_map=tiered_distribution_map,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowall: Optional[bool] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             method: Optional[str] = None,
             policy: Optional[str] = None,
             template_uuid: Optional[str] = None,
             tiered_distribution_map: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'tieredDistributionMap' in kwargs:
            tiered_distribution_map = kwargs['tieredDistributionMap']

        if allowall is not None:
            _setter("allowall", allowall)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if method is not None:
            _setter("method", method)
        if policy is not None:
            _setter("policy", policy)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if tiered_distribution_map is not None:
            _setter("tiered_distribution_map", tiered_distribution_map)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def allowall(self) -> Optional[bool]:
        return pulumi.get(self, "allowall")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tieredDistributionMap")
    def tiered_distribution_map(self) -> Optional[str]:
        return pulumi.get(self, "tiered_distribution_map")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionCustomizationResult(dict):
    def __init__(__self__, *,
                 cloudwrapper_map_migration_title: Optional[str] = None,
                 custom_map_enabled: Optional[bool] = None,
                 custom_map_name: Optional[str] = None,
                 hash_algorithm: Optional[str] = None,
                 location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 map_migration_enabled: Optional[bool] = None,
                 migration_end_date: Optional[str] = None,
                 migration_start_date: Optional[str] = None,
                 migration_within_cw_maps_enabled: Optional[bool] = None,
                 serial_end: Optional[str] = None,
                 serial_start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tier1_title: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionCustomizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloudwrapper_map_migration_title=cloudwrapper_map_migration_title,
            custom_map_enabled=custom_map_enabled,
            custom_map_name=custom_map_name,
            hash_algorithm=hash_algorithm,
            location=location,
            locked=locked,
            map_migration_enabled=map_migration_enabled,
            migration_end_date=migration_end_date,
            migration_start_date=migration_start_date,
            migration_within_cw_maps_enabled=migration_within_cw_maps_enabled,
            serial_end=serial_end,
            serial_start=serial_start,
            template_uuid=template_uuid,
            tier1_title=tier1_title,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloudwrapper_map_migration_title: Optional[str] = None,
             custom_map_enabled: Optional[bool] = None,
             custom_map_name: Optional[str] = None,
             hash_algorithm: Optional[str] = None,
             location: Optional[str] = None,
             locked: Optional[bool] = None,
             map_migration_enabled: Optional[bool] = None,
             migration_end_date: Optional[str] = None,
             migration_start_date: Optional[str] = None,
             migration_within_cw_maps_enabled: Optional[bool] = None,
             serial_end: Optional[str] = None,
             serial_start: Optional[str] = None,
             template_uuid: Optional[str] = None,
             tier1_title: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudwrapperMapMigrationTitle' in kwargs:
            cloudwrapper_map_migration_title = kwargs['cloudwrapperMapMigrationTitle']
        if 'customMapEnabled' in kwargs:
            custom_map_enabled = kwargs['customMapEnabled']
        if 'customMapName' in kwargs:
            custom_map_name = kwargs['customMapName']
        if 'hashAlgorithm' in kwargs:
            hash_algorithm = kwargs['hashAlgorithm']
        if 'mapMigrationEnabled' in kwargs:
            map_migration_enabled = kwargs['mapMigrationEnabled']
        if 'migrationEndDate' in kwargs:
            migration_end_date = kwargs['migrationEndDate']
        if 'migrationStartDate' in kwargs:
            migration_start_date = kwargs['migrationStartDate']
        if 'migrationWithinCwMapsEnabled' in kwargs:
            migration_within_cw_maps_enabled = kwargs['migrationWithinCwMapsEnabled']
        if 'serialEnd' in kwargs:
            serial_end = kwargs['serialEnd']
        if 'serialStart' in kwargs:
            serial_start = kwargs['serialStart']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'tier1Title' in kwargs:
            tier1_title = kwargs['tier1Title']

        if cloudwrapper_map_migration_title is not None:
            _setter("cloudwrapper_map_migration_title", cloudwrapper_map_migration_title)
        if custom_map_enabled is not None:
            _setter("custom_map_enabled", custom_map_enabled)
        if custom_map_name is not None:
            _setter("custom_map_name", custom_map_name)
        if hash_algorithm is not None:
            _setter("hash_algorithm", hash_algorithm)
        if location is not None:
            _setter("location", location)
        if locked is not None:
            _setter("locked", locked)
        if map_migration_enabled is not None:
            _setter("map_migration_enabled", map_migration_enabled)
        if migration_end_date is not None:
            _setter("migration_end_date", migration_end_date)
        if migration_start_date is not None:
            _setter("migration_start_date", migration_start_date)
        if migration_within_cw_maps_enabled is not None:
            _setter("migration_within_cw_maps_enabled", migration_within_cw_maps_enabled)
        if serial_end is not None:
            _setter("serial_end", serial_end)
        if serial_start is not None:
            _setter("serial_start", serial_start)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if tier1_title is not None:
            _setter("tier1_title", tier1_title)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="cloudwrapperMapMigrationTitle")
    def cloudwrapper_map_migration_title(self) -> Optional[str]:
        return pulumi.get(self, "cloudwrapper_map_migration_title")

    @property
    @pulumi.getter(name="customMapEnabled")
    def custom_map_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "custom_map_enabled")

    @property
    @pulumi.getter(name="customMapName")
    def custom_map_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_map_name")

    @property
    @pulumi.getter(name="hashAlgorithm")
    def hash_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hash_algorithm")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mapMigrationEnabled")
    def map_migration_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "map_migration_enabled")

    @property
    @pulumi.getter(name="migrationEndDate")
    def migration_end_date(self) -> Optional[str]:
        return pulumi.get(self, "migration_end_date")

    @property
    @pulumi.getter(name="migrationStartDate")
    def migration_start_date(self) -> Optional[str]:
        return pulumi.get(self, "migration_start_date")

    @property
    @pulumi.getter(name="migrationWithinCwMapsEnabled")
    def migration_within_cw_maps_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "migration_within_cw_maps_enabled")

    @property
    @pulumi.getter(name="serialEnd")
    def serial_end(self) -> Optional[str]:
        return pulumi.get(self, "serial_end")

    @property
    @pulumi.getter(name="serialStart")
    def serial_start(self) -> Optional[str]:
        return pulumi.get(self, "serial_start")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tier1Title")
    def tier1_title(self) -> Optional[str]:
        return pulumi.get(self, "tier1_title")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTimeoutResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorTimeoutResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorUidConfigurationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 legal_text: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorUidConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            extract_location=extract_location,
            header_name=header_name,
            legal_text=legal_text,
            locked=locked,
            query_parameter_name=query_parameter_name,
            template_uuid=template_uuid,
            uuid=uuid,
            variable_name=variable_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             extract_location: Optional[str] = None,
             header_name: Optional[str] = None,
             legal_text: Optional[str] = None,
             locked: Optional[bool] = None,
             query_parameter_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             variable_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'extractLocation' in kwargs:
            extract_location = kwargs['extractLocation']
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'legalText' in kwargs:
            legal_text = kwargs['legalText']
        if 'queryParameterName' in kwargs:
            query_parameter_name = kwargs['queryParameterName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'variableName' in kwargs:
            variable_name = kwargs['variableName']

        if enabled is not None:
            _setter("enabled", enabled)
        if extract_location is not None:
            _setter("extract_location", extract_location)
        if header_name is not None:
            _setter("header_name", header_name)
        if legal_text is not None:
            _setter("legal_text", legal_text)
        if locked is not None:
            _setter("locked", locked)
        if query_parameter_name is not None:
            _setter("query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if variable_name is not None:
            _setter("variable_name", variable_name)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="legalText")
    def legal_text(self) -> Optional[str]:
        return pulumi.get(self, "legal_text")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorValidateEntityTagResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorValidateEntityTagResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenResult(dict):
    def __init__(__self__, *,
                 enable_es256: Optional[bool] = None,
                 enable_rs256: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 jwt: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_es256=enable_es256,
            enable_rs256=enable_rs256,
            extract_location=extract_location,
            header_name=header_name,
            jwt=jwt,
            locked=locked,
            query_parameter_name=query_parameter_name,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_es256: Optional[bool] = None,
             enable_rs256: Optional[bool] = None,
             extract_location: Optional[str] = None,
             header_name: Optional[str] = None,
             jwt: Optional[str] = None,
             locked: Optional[bool] = None,
             query_parameter_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enableEs256' in kwargs:
            enable_es256 = kwargs['enableEs256']
        if 'enableRs256' in kwargs:
            enable_rs256 = kwargs['enableRs256']
        if 'extractLocation' in kwargs:
            extract_location = kwargs['extractLocation']
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'queryParameterName' in kwargs:
            query_parameter_name = kwargs['queryParameterName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enable_es256 is not None:
            _setter("enable_es256", enable_es256)
        if enable_rs256 is not None:
            _setter("enable_rs256", enable_rs256)
        if extract_location is not None:
            _setter("extract_location", extract_location)
        if header_name is not None:
            _setter("header_name", header_name)
        if jwt is not None:
            _setter("jwt", jwt)
        if locked is not None:
            _setter("locked", locked)
        if query_parameter_name is not None:
            _setter("query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="enableEs256")
    def enable_es256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_es256")

    @property
    @pulumi.getter(name="enableRs256")
    def enable_rs256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_rs256")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def jwt(self) -> Optional[str]:
        return pulumi.get(self, "jwt")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenForDcpResult(dict):
    def __init__(__self__, *,
                 authorizations: Optional[str] = None,
                 client_id: Optional[str] = None,
                 custom_header: Optional[bool] = None,
                 enable_es256: Optional[bool] = None,
                 enable_rs256: Optional[bool] = None,
                 extract_authorizations: Optional[bool] = None,
                 extract_client_id: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 extract_user_name: Optional[bool] = None,
                 header_name: Optional[str] = None,
                 jwt: Optional[str] = None,
                 locked: Optional[bool] = None,
                 primary_location: Optional[str] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 user_name: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenForDcpResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authorizations=authorizations,
            client_id=client_id,
            custom_header=custom_header,
            enable_es256=enable_es256,
            enable_rs256=enable_rs256,
            extract_authorizations=extract_authorizations,
            extract_client_id=extract_client_id,
            extract_location=extract_location,
            extract_user_name=extract_user_name,
            header_name=header_name,
            jwt=jwt,
            locked=locked,
            primary_location=primary_location,
            query_parameter_name=query_parameter_name,
            template_uuid=template_uuid,
            user_name=user_name,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authorizations: Optional[str] = None,
             client_id: Optional[str] = None,
             custom_header: Optional[bool] = None,
             enable_es256: Optional[bool] = None,
             enable_rs256: Optional[bool] = None,
             extract_authorizations: Optional[bool] = None,
             extract_client_id: Optional[bool] = None,
             extract_location: Optional[str] = None,
             extract_user_name: Optional[bool] = None,
             header_name: Optional[str] = None,
             jwt: Optional[str] = None,
             locked: Optional[bool] = None,
             primary_location: Optional[str] = None,
             query_parameter_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             user_name: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if 'customHeader' in kwargs:
            custom_header = kwargs['customHeader']
        if 'enableEs256' in kwargs:
            enable_es256 = kwargs['enableEs256']
        if 'enableRs256' in kwargs:
            enable_rs256 = kwargs['enableRs256']
        if 'extractAuthorizations' in kwargs:
            extract_authorizations = kwargs['extractAuthorizations']
        if 'extractClientId' in kwargs:
            extract_client_id = kwargs['extractClientId']
        if 'extractLocation' in kwargs:
            extract_location = kwargs['extractLocation']
        if 'extractUserName' in kwargs:
            extract_user_name = kwargs['extractUserName']
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'primaryLocation' in kwargs:
            primary_location = kwargs['primaryLocation']
        if 'queryParameterName' in kwargs:
            query_parameter_name = kwargs['queryParameterName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'userName' in kwargs:
            user_name = kwargs['userName']

        if authorizations is not None:
            _setter("authorizations", authorizations)
        if client_id is not None:
            _setter("client_id", client_id)
        if custom_header is not None:
            _setter("custom_header", custom_header)
        if enable_es256 is not None:
            _setter("enable_es256", enable_es256)
        if enable_rs256 is not None:
            _setter("enable_rs256", enable_rs256)
        if extract_authorizations is not None:
            _setter("extract_authorizations", extract_authorizations)
        if extract_client_id is not None:
            _setter("extract_client_id", extract_client_id)
        if extract_location is not None:
            _setter("extract_location", extract_location)
        if extract_user_name is not None:
            _setter("extract_user_name", extract_user_name)
        if header_name is not None:
            _setter("header_name", header_name)
        if jwt is not None:
            _setter("jwt", jwt)
        if locked is not None:
            _setter("locked", locked)
        if primary_location is not None:
            _setter("primary_location", primary_location)
        if query_parameter_name is not None:
            _setter("query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if user_name is not None:
            _setter("user_name", user_name)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def authorizations(self) -> Optional[str]:
        return pulumi.get(self, "authorizations")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="customHeader")
    def custom_header(self) -> Optional[bool]:
        return pulumi.get(self, "custom_header")

    @property
    @pulumi.getter(name="enableEs256")
    def enable_es256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_es256")

    @property
    @pulumi.getter(name="enableRs256")
    def enable_rs256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_rs256")

    @property
    @pulumi.getter(name="extractAuthorizations")
    def extract_authorizations(self) -> Optional[bool]:
        return pulumi.get(self, "extract_authorizations")

    @property
    @pulumi.getter(name="extractClientId")
    def extract_client_id(self) -> Optional[bool]:
        return pulumi.get(self, "extract_client_id")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="extractUserName")
    def extract_user_name(self) -> Optional[bool]:
        return pulumi.get(self, "extract_user_name")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def jwt(self) -> Optional[str]:
        return pulumi.get(self, "jwt")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="primaryLocation")
    def primary_location(self) -> Optional[str]:
        return pulumi.get(self, "primary_location")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVerifyTokenAuthorizationResult(dict):
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 escape_hmac_inputs: Optional[bool] = None,
                 failure_response: Optional[bool] = None,
                 ignore_query_string: Optional[bool] = None,
                 key: Optional[str] = None,
                 location: Optional[str] = None,
                 location_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 salt: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 transition_key: Optional[str] = None,
                 use_advanced: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorVerifyTokenAuthorizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            algorithm=algorithm,
            escape_hmac_inputs=escape_hmac_inputs,
            failure_response=failure_response,
            ignore_query_string=ignore_query_string,
            key=key,
            location=location,
            location_id=location_id,
            locked=locked,
            salt=salt,
            template_uuid=template_uuid,
            transition_key=transition_key,
            use_advanced=use_advanced,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             algorithm: Optional[str] = None,
             escape_hmac_inputs: Optional[bool] = None,
             failure_response: Optional[bool] = None,
             ignore_query_string: Optional[bool] = None,
             key: Optional[str] = None,
             location: Optional[str] = None,
             location_id: Optional[str] = None,
             locked: Optional[bool] = None,
             salt: Optional[str] = None,
             template_uuid: Optional[str] = None,
             transition_key: Optional[str] = None,
             use_advanced: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'escapeHmacInputs' in kwargs:
            escape_hmac_inputs = kwargs['escapeHmacInputs']
        if 'failureResponse' in kwargs:
            failure_response = kwargs['failureResponse']
        if 'ignoreQueryString' in kwargs:
            ignore_query_string = kwargs['ignoreQueryString']
        if 'locationId' in kwargs:
            location_id = kwargs['locationId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'transitionKey' in kwargs:
            transition_key = kwargs['transitionKey']
        if 'useAdvanced' in kwargs:
            use_advanced = kwargs['useAdvanced']

        if algorithm is not None:
            _setter("algorithm", algorithm)
        if escape_hmac_inputs is not None:
            _setter("escape_hmac_inputs", escape_hmac_inputs)
        if failure_response is not None:
            _setter("failure_response", failure_response)
        if ignore_query_string is not None:
            _setter("ignore_query_string", ignore_query_string)
        if key is not None:
            _setter("key", key)
        if location is not None:
            _setter("location", location)
        if location_id is not None:
            _setter("location_id", location_id)
        if locked is not None:
            _setter("locked", locked)
        if salt is not None:
            _setter("salt", salt)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if transition_key is not None:
            _setter("transition_key", transition_key)
        if use_advanced is not None:
            _setter("use_advanced", use_advanced)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="escapeHmacInputs")
    def escape_hmac_inputs(self) -> Optional[bool]:
        return pulumi.get(self, "escape_hmac_inputs")

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional[bool]:
        return pulumi.get(self, "failure_response")

    @property
    @pulumi.getter(name="ignoreQueryString")
    def ignore_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_query_string")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[str]:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def salt(self) -> Optional[str]:
        return pulumi.get(self, "salt")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="transitionKey")
    def transition_key(self) -> Optional[str]:
        return pulumi.get(self, "transition_key")

    @property
    @pulumi.getter(name="useAdvanced")
    def use_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "use_advanced")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomResult(dict):
    def __init__(__self__, *,
                 access_title: Optional[str] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 custom_cookie_domain: Optional[str] = None,
                 domain_config: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_auto_prolong: Optional[bool] = None,
                 session_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_assets_paths: Optional[Sequence[str]] = None,
                 waiting_room_path: Optional[str] = None,
                 waiting_room_title: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_title=access_title,
            cloudlet_shared_policy=cloudlet_shared_policy,
            custom_cookie_domain=custom_cookie_domain,
            domain_config=domain_config,
            locked=locked,
            session_auto_prolong=session_auto_prolong,
            session_duration=session_duration,
            template_uuid=template_uuid,
            uuid=uuid,
            waiting_room_assets_paths=waiting_room_assets_paths,
            waiting_room_path=waiting_room_path,
            waiting_room_title=waiting_room_title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_title: Optional[str] = None,
             cloudlet_shared_policy: Optional[int] = None,
             custom_cookie_domain: Optional[str] = None,
             domain_config: Optional[str] = None,
             locked: Optional[bool] = None,
             session_auto_prolong: Optional[bool] = None,
             session_duration: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             waiting_room_assets_paths: Optional[Sequence[str]] = None,
             waiting_room_path: Optional[str] = None,
             waiting_room_title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessTitle' in kwargs:
            access_title = kwargs['accessTitle']
        if 'cloudletSharedPolicy' in kwargs:
            cloudlet_shared_policy = kwargs['cloudletSharedPolicy']
        if 'customCookieDomain' in kwargs:
            custom_cookie_domain = kwargs['customCookieDomain']
        if 'domainConfig' in kwargs:
            domain_config = kwargs['domainConfig']
        if 'sessionAutoProlong' in kwargs:
            session_auto_prolong = kwargs['sessionAutoProlong']
        if 'sessionDuration' in kwargs:
            session_duration = kwargs['sessionDuration']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'waitingRoomAssetsPaths' in kwargs:
            waiting_room_assets_paths = kwargs['waitingRoomAssetsPaths']
        if 'waitingRoomPath' in kwargs:
            waiting_room_path = kwargs['waitingRoomPath']
        if 'waitingRoomTitle' in kwargs:
            waiting_room_title = kwargs['waitingRoomTitle']

        if access_title is not None:
            _setter("access_title", access_title)
        if cloudlet_shared_policy is not None:
            _setter("cloudlet_shared_policy", cloudlet_shared_policy)
        if custom_cookie_domain is not None:
            _setter("custom_cookie_domain", custom_cookie_domain)
        if domain_config is not None:
            _setter("domain_config", domain_config)
        if locked is not None:
            _setter("locked", locked)
        if session_auto_prolong is not None:
            _setter("session_auto_prolong", session_auto_prolong)
        if session_duration is not None:
            _setter("session_duration", session_duration)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if waiting_room_assets_paths is not None:
            _setter("waiting_room_assets_paths", waiting_room_assets_paths)
        if waiting_room_path is not None:
            _setter("waiting_room_path", waiting_room_path)
        if waiting_room_title is not None:
            _setter("waiting_room_title", waiting_room_title)

    @property
    @pulumi.getter(name="accessTitle")
    def access_title(self) -> Optional[str]:
        return pulumi.get(self, "access_title")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter(name="customCookieDomain")
    def custom_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_cookie_domain")

    @property
    @pulumi.getter(name="domainConfig")
    def domain_config(self) -> Optional[str]:
        return pulumi.get(self, "domain_config")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="sessionAutoProlong")
    def session_auto_prolong(self) -> Optional[bool]:
        return pulumi.get(self, "session_auto_prolong")

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[int]:
        return pulumi.get(self, "session_duration")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="waitingRoomAssetsPaths")
    def waiting_room_assets_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "waiting_room_assets_paths")

    @property
    @pulumi.getter(name="waitingRoomPath")
    def waiting_room_path(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_path")

    @property
    @pulumi.getter(name="waitingRoomTitle")
    def waiting_room_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_title")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomWithEdgeWorkersResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomWithEdgeWorkersResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationResult(dict):
    def __init__(__self__, *,
                 allowed_user_cookie_advanced: Optional[bool] = None,
                 allowed_user_cookie_automatic_salt: Optional[bool] = None,
                 allowed_user_cookie_domain: Optional[str] = None,
                 allowed_user_cookie_domain_type: Optional[str] = None,
                 allowed_user_cookie_duration: Optional[int] = None,
                 allowed_user_cookie_enabled: Optional[bool] = None,
                 allowed_user_cookie_http_only: Optional[bool] = None,
                 allowed_user_cookie_label: Optional[str] = None,
                 allowed_user_cookie_management_title: Optional[str] = None,
                 allowed_user_cookie_refresh: Optional[bool] = None,
                 allowed_user_cookie_salt: Optional[str] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 user_identification_by_cookie: Optional[bool] = None,
                 user_identification_by_headers: Optional[bool] = None,
                 user_identification_by_ip: Optional[bool] = None,
                 user_identification_by_params: Optional[bool] = None,
                 user_identification_key_cookie: Optional[str] = None,
                 user_identification_key_headers: Optional[Sequence[str]] = None,
                 user_identification_key_params: Optional[Sequence[str]] = None,
                 user_identification_title: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_cache_ttl: Optional[int] = None,
                 waiting_room_cookie_advanced: Optional[bool] = None,
                 waiting_room_cookie_automatic_salt: Optional[bool] = None,
                 waiting_room_cookie_domain: Optional[str] = None,
                 waiting_room_cookie_domain_type: Optional[str] = None,
                 waiting_room_cookie_duration: Optional[int] = None,
                 waiting_room_cookie_enabled: Optional[bool] = None,
                 waiting_room_cookie_http_only: Optional[bool] = None,
                 waiting_room_cookie_label: Optional[str] = None,
                 waiting_room_cookie_management_title: Optional[str] = None,
                 waiting_room_cookie_salt: Optional[str] = None,
                 waiting_room_cookie_share_label: Optional[bool] = None,
                 waiting_room_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeResult'] = None,
                 waiting_room_directory: Optional[str] = None,
                 waiting_room_management_title: Optional[str] = None,
                 waiting_room_net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorageResult'] = None,
                 waiting_room_status_code: Optional[int] = None,
                 waiting_room_use_cp_code: Optional[bool] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_user_cookie_advanced=allowed_user_cookie_advanced,
            allowed_user_cookie_automatic_salt=allowed_user_cookie_automatic_salt,
            allowed_user_cookie_domain=allowed_user_cookie_domain,
            allowed_user_cookie_domain_type=allowed_user_cookie_domain_type,
            allowed_user_cookie_duration=allowed_user_cookie_duration,
            allowed_user_cookie_enabled=allowed_user_cookie_enabled,
            allowed_user_cookie_http_only=allowed_user_cookie_http_only,
            allowed_user_cookie_label=allowed_user_cookie_label,
            allowed_user_cookie_management_title=allowed_user_cookie_management_title,
            allowed_user_cookie_refresh=allowed_user_cookie_refresh,
            allowed_user_cookie_salt=allowed_user_cookie_salt,
            cloudlet_policy=cloudlet_policy,
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            user_identification_by_cookie=user_identification_by_cookie,
            user_identification_by_headers=user_identification_by_headers,
            user_identification_by_ip=user_identification_by_ip,
            user_identification_by_params=user_identification_by_params,
            user_identification_key_cookie=user_identification_key_cookie,
            user_identification_key_headers=user_identification_key_headers,
            user_identification_key_params=user_identification_key_params,
            user_identification_title=user_identification_title,
            uuid=uuid,
            waiting_room_cache_ttl=waiting_room_cache_ttl,
            waiting_room_cookie_advanced=waiting_room_cookie_advanced,
            waiting_room_cookie_automatic_salt=waiting_room_cookie_automatic_salt,
            waiting_room_cookie_domain=waiting_room_cookie_domain,
            waiting_room_cookie_domain_type=waiting_room_cookie_domain_type,
            waiting_room_cookie_duration=waiting_room_cookie_duration,
            waiting_room_cookie_enabled=waiting_room_cookie_enabled,
            waiting_room_cookie_http_only=waiting_room_cookie_http_only,
            waiting_room_cookie_label=waiting_room_cookie_label,
            waiting_room_cookie_management_title=waiting_room_cookie_management_title,
            waiting_room_cookie_salt=waiting_room_cookie_salt,
            waiting_room_cookie_share_label=waiting_room_cookie_share_label,
            waiting_room_cp_code=waiting_room_cp_code,
            waiting_room_directory=waiting_room_directory,
            waiting_room_management_title=waiting_room_management_title,
            waiting_room_net_storage=waiting_room_net_storage,
            waiting_room_status_code=waiting_room_status_code,
            waiting_room_use_cp_code=waiting_room_use_cp_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_user_cookie_advanced: Optional[bool] = None,
             allowed_user_cookie_automatic_salt: Optional[bool] = None,
             allowed_user_cookie_domain: Optional[str] = None,
             allowed_user_cookie_domain_type: Optional[str] = None,
             allowed_user_cookie_duration: Optional[int] = None,
             allowed_user_cookie_enabled: Optional[bool] = None,
             allowed_user_cookie_http_only: Optional[bool] = None,
             allowed_user_cookie_label: Optional[str] = None,
             allowed_user_cookie_management_title: Optional[str] = None,
             allowed_user_cookie_refresh: Optional[bool] = None,
             allowed_user_cookie_salt: Optional[str] = None,
             cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicyResult'] = None,
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             user_identification_by_cookie: Optional[bool] = None,
             user_identification_by_headers: Optional[bool] = None,
             user_identification_by_ip: Optional[bool] = None,
             user_identification_by_params: Optional[bool] = None,
             user_identification_key_cookie: Optional[str] = None,
             user_identification_key_headers: Optional[Sequence[str]] = None,
             user_identification_key_params: Optional[Sequence[str]] = None,
             user_identification_title: Optional[str] = None,
             uuid: Optional[str] = None,
             waiting_room_cache_ttl: Optional[int] = None,
             waiting_room_cookie_advanced: Optional[bool] = None,
             waiting_room_cookie_automatic_salt: Optional[bool] = None,
             waiting_room_cookie_domain: Optional[str] = None,
             waiting_room_cookie_domain_type: Optional[str] = None,
             waiting_room_cookie_duration: Optional[int] = None,
             waiting_room_cookie_enabled: Optional[bool] = None,
             waiting_room_cookie_http_only: Optional[bool] = None,
             waiting_room_cookie_label: Optional[str] = None,
             waiting_room_cookie_management_title: Optional[str] = None,
             waiting_room_cookie_salt: Optional[str] = None,
             waiting_room_cookie_share_label: Optional[bool] = None,
             waiting_room_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeResult'] = None,
             waiting_room_directory: Optional[str] = None,
             waiting_room_management_title: Optional[str] = None,
             waiting_room_net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorageResult'] = None,
             waiting_room_status_code: Optional[int] = None,
             waiting_room_use_cp_code: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowedUserCookieAdvanced' in kwargs:
            allowed_user_cookie_advanced = kwargs['allowedUserCookieAdvanced']
        if 'allowedUserCookieAutomaticSalt' in kwargs:
            allowed_user_cookie_automatic_salt = kwargs['allowedUserCookieAutomaticSalt']
        if 'allowedUserCookieDomain' in kwargs:
            allowed_user_cookie_domain = kwargs['allowedUserCookieDomain']
        if 'allowedUserCookieDomainType' in kwargs:
            allowed_user_cookie_domain_type = kwargs['allowedUserCookieDomainType']
        if 'allowedUserCookieDuration' in kwargs:
            allowed_user_cookie_duration = kwargs['allowedUserCookieDuration']
        if 'allowedUserCookieEnabled' in kwargs:
            allowed_user_cookie_enabled = kwargs['allowedUserCookieEnabled']
        if 'allowedUserCookieHttpOnly' in kwargs:
            allowed_user_cookie_http_only = kwargs['allowedUserCookieHttpOnly']
        if 'allowedUserCookieLabel' in kwargs:
            allowed_user_cookie_label = kwargs['allowedUserCookieLabel']
        if 'allowedUserCookieManagementTitle' in kwargs:
            allowed_user_cookie_management_title = kwargs['allowedUserCookieManagementTitle']
        if 'allowedUserCookieRefresh' in kwargs:
            allowed_user_cookie_refresh = kwargs['allowedUserCookieRefresh']
        if 'allowedUserCookieSalt' in kwargs:
            allowed_user_cookie_salt = kwargs['allowedUserCookieSalt']
        if 'cloudletPolicy' in kwargs:
            cloudlet_policy = kwargs['cloudletPolicy']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'userIdentificationByCookie' in kwargs:
            user_identification_by_cookie = kwargs['userIdentificationByCookie']
        if 'userIdentificationByHeaders' in kwargs:
            user_identification_by_headers = kwargs['userIdentificationByHeaders']
        if 'userIdentificationByIp' in kwargs:
            user_identification_by_ip = kwargs['userIdentificationByIp']
        if 'userIdentificationByParams' in kwargs:
            user_identification_by_params = kwargs['userIdentificationByParams']
        if 'userIdentificationKeyCookie' in kwargs:
            user_identification_key_cookie = kwargs['userIdentificationKeyCookie']
        if 'userIdentificationKeyHeaders' in kwargs:
            user_identification_key_headers = kwargs['userIdentificationKeyHeaders']
        if 'userIdentificationKeyParams' in kwargs:
            user_identification_key_params = kwargs['userIdentificationKeyParams']
        if 'userIdentificationTitle' in kwargs:
            user_identification_title = kwargs['userIdentificationTitle']
        if 'waitingRoomCacheTtl' in kwargs:
            waiting_room_cache_ttl = kwargs['waitingRoomCacheTtl']
        if 'waitingRoomCookieAdvanced' in kwargs:
            waiting_room_cookie_advanced = kwargs['waitingRoomCookieAdvanced']
        if 'waitingRoomCookieAutomaticSalt' in kwargs:
            waiting_room_cookie_automatic_salt = kwargs['waitingRoomCookieAutomaticSalt']
        if 'waitingRoomCookieDomain' in kwargs:
            waiting_room_cookie_domain = kwargs['waitingRoomCookieDomain']
        if 'waitingRoomCookieDomainType' in kwargs:
            waiting_room_cookie_domain_type = kwargs['waitingRoomCookieDomainType']
        if 'waitingRoomCookieDuration' in kwargs:
            waiting_room_cookie_duration = kwargs['waitingRoomCookieDuration']
        if 'waitingRoomCookieEnabled' in kwargs:
            waiting_room_cookie_enabled = kwargs['waitingRoomCookieEnabled']
        if 'waitingRoomCookieHttpOnly' in kwargs:
            waiting_room_cookie_http_only = kwargs['waitingRoomCookieHttpOnly']
        if 'waitingRoomCookieLabel' in kwargs:
            waiting_room_cookie_label = kwargs['waitingRoomCookieLabel']
        if 'waitingRoomCookieManagementTitle' in kwargs:
            waiting_room_cookie_management_title = kwargs['waitingRoomCookieManagementTitle']
        if 'waitingRoomCookieSalt' in kwargs:
            waiting_room_cookie_salt = kwargs['waitingRoomCookieSalt']
        if 'waitingRoomCookieShareLabel' in kwargs:
            waiting_room_cookie_share_label = kwargs['waitingRoomCookieShareLabel']
        if 'waitingRoomCpCode' in kwargs:
            waiting_room_cp_code = kwargs['waitingRoomCpCode']
        if 'waitingRoomDirectory' in kwargs:
            waiting_room_directory = kwargs['waitingRoomDirectory']
        if 'waitingRoomManagementTitle' in kwargs:
            waiting_room_management_title = kwargs['waitingRoomManagementTitle']
        if 'waitingRoomNetStorage' in kwargs:
            waiting_room_net_storage = kwargs['waitingRoomNetStorage']
        if 'waitingRoomStatusCode' in kwargs:
            waiting_room_status_code = kwargs['waitingRoomStatusCode']
        if 'waitingRoomUseCpCode' in kwargs:
            waiting_room_use_cp_code = kwargs['waitingRoomUseCpCode']

        if allowed_user_cookie_advanced is not None:
            _setter("allowed_user_cookie_advanced", allowed_user_cookie_advanced)
        if allowed_user_cookie_automatic_salt is not None:
            _setter("allowed_user_cookie_automatic_salt", allowed_user_cookie_automatic_salt)
        if allowed_user_cookie_domain is not None:
            _setter("allowed_user_cookie_domain", allowed_user_cookie_domain)
        if allowed_user_cookie_domain_type is not None:
            _setter("allowed_user_cookie_domain_type", allowed_user_cookie_domain_type)
        if allowed_user_cookie_duration is not None:
            _setter("allowed_user_cookie_duration", allowed_user_cookie_duration)
        if allowed_user_cookie_enabled is not None:
            _setter("allowed_user_cookie_enabled", allowed_user_cookie_enabled)
        if allowed_user_cookie_http_only is not None:
            _setter("allowed_user_cookie_http_only", allowed_user_cookie_http_only)
        if allowed_user_cookie_label is not None:
            _setter("allowed_user_cookie_label", allowed_user_cookie_label)
        if allowed_user_cookie_management_title is not None:
            _setter("allowed_user_cookie_management_title", allowed_user_cookie_management_title)
        if allowed_user_cookie_refresh is not None:
            _setter("allowed_user_cookie_refresh", allowed_user_cookie_refresh)
        if allowed_user_cookie_salt is not None:
            _setter("allowed_user_cookie_salt", allowed_user_cookie_salt)
        if cloudlet_policy is not None:
            _setter("cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if user_identification_by_cookie is not None:
            _setter("user_identification_by_cookie", user_identification_by_cookie)
        if user_identification_by_headers is not None:
            _setter("user_identification_by_headers", user_identification_by_headers)
        if user_identification_by_ip is not None:
            _setter("user_identification_by_ip", user_identification_by_ip)
        if user_identification_by_params is not None:
            _setter("user_identification_by_params", user_identification_by_params)
        if user_identification_key_cookie is not None:
            _setter("user_identification_key_cookie", user_identification_key_cookie)
        if user_identification_key_headers is not None:
            _setter("user_identification_key_headers", user_identification_key_headers)
        if user_identification_key_params is not None:
            _setter("user_identification_key_params", user_identification_key_params)
        if user_identification_title is not None:
            _setter("user_identification_title", user_identification_title)
        if uuid is not None:
            _setter("uuid", uuid)
        if waiting_room_cache_ttl is not None:
            _setter("waiting_room_cache_ttl", waiting_room_cache_ttl)
        if waiting_room_cookie_advanced is not None:
            _setter("waiting_room_cookie_advanced", waiting_room_cookie_advanced)
        if waiting_room_cookie_automatic_salt is not None:
            _setter("waiting_room_cookie_automatic_salt", waiting_room_cookie_automatic_salt)
        if waiting_room_cookie_domain is not None:
            _setter("waiting_room_cookie_domain", waiting_room_cookie_domain)
        if waiting_room_cookie_domain_type is not None:
            _setter("waiting_room_cookie_domain_type", waiting_room_cookie_domain_type)
        if waiting_room_cookie_duration is not None:
            _setter("waiting_room_cookie_duration", waiting_room_cookie_duration)
        if waiting_room_cookie_enabled is not None:
            _setter("waiting_room_cookie_enabled", waiting_room_cookie_enabled)
        if waiting_room_cookie_http_only is not None:
            _setter("waiting_room_cookie_http_only", waiting_room_cookie_http_only)
        if waiting_room_cookie_label is not None:
            _setter("waiting_room_cookie_label", waiting_room_cookie_label)
        if waiting_room_cookie_management_title is not None:
            _setter("waiting_room_cookie_management_title", waiting_room_cookie_management_title)
        if waiting_room_cookie_salt is not None:
            _setter("waiting_room_cookie_salt", waiting_room_cookie_salt)
        if waiting_room_cookie_share_label is not None:
            _setter("waiting_room_cookie_share_label", waiting_room_cookie_share_label)
        if waiting_room_cp_code is not None:
            _setter("waiting_room_cp_code", waiting_room_cp_code)
        if waiting_room_directory is not None:
            _setter("waiting_room_directory", waiting_room_directory)
        if waiting_room_management_title is not None:
            _setter("waiting_room_management_title", waiting_room_management_title)
        if waiting_room_net_storage is not None:
            _setter("waiting_room_net_storage", waiting_room_net_storage)
        if waiting_room_status_code is not None:
            _setter("waiting_room_status_code", waiting_room_status_code)
        if waiting_room_use_cp_code is not None:
            _setter("waiting_room_use_cp_code", waiting_room_use_cp_code)

    @property
    @pulumi.getter(name="allowedUserCookieAdvanced")
    def allowed_user_cookie_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_advanced")

    @property
    @pulumi.getter(name="allowedUserCookieAutomaticSalt")
    def allowed_user_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_automatic_salt")

    @property
    @pulumi.getter(name="allowedUserCookieDomain")
    def allowed_user_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_domain")

    @property
    @pulumi.getter(name="allowedUserCookieDomainType")
    def allowed_user_cookie_domain_type(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_domain_type")

    @property
    @pulumi.getter(name="allowedUserCookieDuration")
    def allowed_user_cookie_duration(self) -> Optional[int]:
        return pulumi.get(self, "allowed_user_cookie_duration")

    @property
    @pulumi.getter(name="allowedUserCookieEnabled")
    def allowed_user_cookie_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_enabled")

    @property
    @pulumi.getter(name="allowedUserCookieHttpOnly")
    def allowed_user_cookie_http_only(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_http_only")

    @property
    @pulumi.getter(name="allowedUserCookieLabel")
    def allowed_user_cookie_label(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_label")

    @property
    @pulumi.getter(name="allowedUserCookieManagementTitle")
    def allowed_user_cookie_management_title(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_management_title")

    @property
    @pulumi.getter(name="allowedUserCookieRefresh")
    def allowed_user_cookie_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_refresh")

    @property
    @pulumi.getter(name="allowedUserCookieSalt")
    def allowed_user_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_salt")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="userIdentificationByCookie")
    def user_identification_by_cookie(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_cookie")

    @property
    @pulumi.getter(name="userIdentificationByHeaders")
    def user_identification_by_headers(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_headers")

    @property
    @pulumi.getter(name="userIdentificationByIp")
    def user_identification_by_ip(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_ip")

    @property
    @pulumi.getter(name="userIdentificationByParams")
    def user_identification_by_params(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_params")

    @property
    @pulumi.getter(name="userIdentificationKeyCookie")
    def user_identification_key_cookie(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_key_cookie")

    @property
    @pulumi.getter(name="userIdentificationKeyHeaders")
    def user_identification_key_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_headers")

    @property
    @pulumi.getter(name="userIdentificationKeyParams")
    def user_identification_key_params(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_params")

    @property
    @pulumi.getter(name="userIdentificationTitle")
    def user_identification_title(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_title")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="waitingRoomCacheTtl")
    def waiting_room_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_cache_ttl")

    @property
    @pulumi.getter(name="waitingRoomCookieAdvanced")
    def waiting_room_cookie_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_advanced")

    @property
    @pulumi.getter(name="waitingRoomCookieAutomaticSalt")
    def waiting_room_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_automatic_salt")

    @property
    @pulumi.getter(name="waitingRoomCookieDomain")
    def waiting_room_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_domain")

    @property
    @pulumi.getter(name="waitingRoomCookieDomainType")
    def waiting_room_cookie_domain_type(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_domain_type")

    @property
    @pulumi.getter(name="waitingRoomCookieDuration")
    def waiting_room_cookie_duration(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_cookie_duration")

    @property
    @pulumi.getter(name="waitingRoomCookieEnabled")
    def waiting_room_cookie_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_enabled")

    @property
    @pulumi.getter(name="waitingRoomCookieHttpOnly")
    def waiting_room_cookie_http_only(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_http_only")

    @property
    @pulumi.getter(name="waitingRoomCookieLabel")
    def waiting_room_cookie_label(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_label")

    @property
    @pulumi.getter(name="waitingRoomCookieManagementTitle")
    def waiting_room_cookie_management_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_management_title")

    @property
    @pulumi.getter(name="waitingRoomCookieSalt")
    def waiting_room_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_salt")

    @property
    @pulumi.getter(name="waitingRoomCookieShareLabel")
    def waiting_room_cookie_share_label(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_share_label")

    @property
    @pulumi.getter(name="waitingRoomCpCode")
    def waiting_room_cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeResult']:
        return pulumi.get(self, "waiting_room_cp_code")

    @property
    @pulumi.getter(name="waitingRoomDirectory")
    def waiting_room_directory(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_directory")

    @property
    @pulumi.getter(name="waitingRoomManagementTitle")
    def waiting_room_management_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_management_title")

    @property
    @pulumi.getter(name="waitingRoomNetStorage")
    def waiting_room_net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorageResult']:
        return pulumi.get(self, "waiting_room_net_storage")

    @property
    @pulumi.getter(name="waitingRoomStatusCode")
    def waiting_room_status_code(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_status_code")

    @property
    @pulumi.getter(name="waitingRoomUseCpCode")
    def waiting_room_use_cp_code(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_use_cp_code")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoResult(dict):
    def __init__(__self__, *,
                 access_title: Optional[str] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 custom_cookie_domain: Optional[str] = None,
                 domain_config: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_auto_prolong: Optional[bool] = None,
                 session_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_assets_paths: Optional[Sequence[str]] = None,
                 waiting_room_path: Optional[str] = None,
                 waiting_room_title: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_title=access_title,
            cloudlet_shared_policy=cloudlet_shared_policy,
            custom_cookie_domain=custom_cookie_domain,
            domain_config=domain_config,
            locked=locked,
            session_auto_prolong=session_auto_prolong,
            session_duration=session_duration,
            template_uuid=template_uuid,
            uuid=uuid,
            waiting_room_assets_paths=waiting_room_assets_paths,
            waiting_room_path=waiting_room_path,
            waiting_room_title=waiting_room_title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_title: Optional[str] = None,
             cloudlet_shared_policy: Optional[int] = None,
             custom_cookie_domain: Optional[str] = None,
             domain_config: Optional[str] = None,
             locked: Optional[bool] = None,
             session_auto_prolong: Optional[bool] = None,
             session_duration: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             waiting_room_assets_paths: Optional[Sequence[str]] = None,
             waiting_room_path: Optional[str] = None,
             waiting_room_title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessTitle' in kwargs:
            access_title = kwargs['accessTitle']
        if 'cloudletSharedPolicy' in kwargs:
            cloudlet_shared_policy = kwargs['cloudletSharedPolicy']
        if 'customCookieDomain' in kwargs:
            custom_cookie_domain = kwargs['customCookieDomain']
        if 'domainConfig' in kwargs:
            domain_config = kwargs['domainConfig']
        if 'sessionAutoProlong' in kwargs:
            session_auto_prolong = kwargs['sessionAutoProlong']
        if 'sessionDuration' in kwargs:
            session_duration = kwargs['sessionDuration']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'waitingRoomAssetsPaths' in kwargs:
            waiting_room_assets_paths = kwargs['waitingRoomAssetsPaths']
        if 'waitingRoomPath' in kwargs:
            waiting_room_path = kwargs['waitingRoomPath']
        if 'waitingRoomTitle' in kwargs:
            waiting_room_title = kwargs['waitingRoomTitle']

        if access_title is not None:
            _setter("access_title", access_title)
        if cloudlet_shared_policy is not None:
            _setter("cloudlet_shared_policy", cloudlet_shared_policy)
        if custom_cookie_domain is not None:
            _setter("custom_cookie_domain", custom_cookie_domain)
        if domain_config is not None:
            _setter("domain_config", domain_config)
        if locked is not None:
            _setter("locked", locked)
        if session_auto_prolong is not None:
            _setter("session_auto_prolong", session_auto_prolong)
        if session_duration is not None:
            _setter("session_duration", session_duration)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if waiting_room_assets_paths is not None:
            _setter("waiting_room_assets_paths", waiting_room_assets_paths)
        if waiting_room_path is not None:
            _setter("waiting_room_path", waiting_room_path)
        if waiting_room_title is not None:
            _setter("waiting_room_title", waiting_room_title)

    @property
    @pulumi.getter(name="accessTitle")
    def access_title(self) -> Optional[str]:
        return pulumi.get(self, "access_title")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter(name="customCookieDomain")
    def custom_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_cookie_domain")

    @property
    @pulumi.getter(name="domainConfig")
    def domain_config(self) -> Optional[str]:
        return pulumi.get(self, "domain_config")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="sessionAutoProlong")
    def session_auto_prolong(self) -> Optional[bool]:
        return pulumi.get(self, "session_auto_prolong")

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[int]:
        return pulumi.get(self, "session_duration")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="waitingRoomAssetsPaths")
    def waiting_room_assets_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "waiting_room_assets_paths")

    @property
    @pulumi.getter(name="waitingRoomPath")
    def waiting_room_path(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_path")

    @property
    @pulumi.getter(name="waitingRoomTitle")
    def waiting_room_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_title")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoStandaloneResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoStandaloneResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code=cp_code,
            download_domain_name=download_domain_name,
            g2o_token=g2o_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code: Optional[int] = None,
             download_domain_name: Optional[str] = None,
             g2o_token: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCode' in kwargs:
            cp_code = kwargs['cpCode']
        if 'downloadDomainName' in kwargs:
            download_domain_name = kwargs['downloadDomainName']
        if 'g2oToken' in kwargs:
            g2o_token = kwargs['g2oToken']

        if cp_code is not None:
            _setter("cp_code", cp_code)
        if download_domain_name is not None:
            _setter("download_domain_name", download_domain_name)
        if g2o_token is not None:
            _setter("g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorWatermarkingResult(dict):
    def __init__(__self__, *,
                 ab_variant_location: Optional[str] = None,
                 decryption_password1: Optional[str] = None,
                 decryption_password2: Optional[str] = None,
                 decryption_password_id1: Optional[str] = None,
                 decryption_password_id2: Optional[str] = None,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 miscellaneous_settings_title: Optional[str] = None,
                 pattern_decryption_enable: Optional[bool] = None,
                 pattern_encryption_title: Optional[str] = None,
                 signature_verification_enable: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_signing_title: Optional[str] = None,
                 use_original_as_a: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 verification_key_id1: Optional[str] = None,
                 verification_key_id2: Optional[str] = None,
                 verification_public_key1: Optional[str] = None,
                 verification_public_key2: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorWatermarkingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ab_variant_location=ab_variant_location,
            decryption_password1=decryption_password1,
            decryption_password2=decryption_password2,
            decryption_password_id1=decryption_password_id1,
            decryption_password_id2=decryption_password_id2,
            enable=enable,
            locked=locked,
            miscellaneous_settings_title=miscellaneous_settings_title,
            pattern_decryption_enable=pattern_decryption_enable,
            pattern_encryption_title=pattern_encryption_title,
            signature_verification_enable=signature_verification_enable,
            template_uuid=template_uuid,
            token_signing_title=token_signing_title,
            use_original_as_a=use_original_as_a,
            uuid=uuid,
            verification_key_id1=verification_key_id1,
            verification_key_id2=verification_key_id2,
            verification_public_key1=verification_public_key1,
            verification_public_key2=verification_public_key2,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ab_variant_location: Optional[str] = None,
             decryption_password1: Optional[str] = None,
             decryption_password2: Optional[str] = None,
             decryption_password_id1: Optional[str] = None,
             decryption_password_id2: Optional[str] = None,
             enable: Optional[bool] = None,
             locked: Optional[bool] = None,
             miscellaneous_settings_title: Optional[str] = None,
             pattern_decryption_enable: Optional[bool] = None,
             pattern_encryption_title: Optional[str] = None,
             signature_verification_enable: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             token_signing_title: Optional[str] = None,
             use_original_as_a: Optional[bool] = None,
             uuid: Optional[str] = None,
             verification_key_id1: Optional[str] = None,
             verification_key_id2: Optional[str] = None,
             verification_public_key1: Optional[str] = None,
             verification_public_key2: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'abVariantLocation' in kwargs:
            ab_variant_location = kwargs['abVariantLocation']
        if 'decryptionPassword1' in kwargs:
            decryption_password1 = kwargs['decryptionPassword1']
        if 'decryptionPassword2' in kwargs:
            decryption_password2 = kwargs['decryptionPassword2']
        if 'decryptionPasswordId1' in kwargs:
            decryption_password_id1 = kwargs['decryptionPasswordId1']
        if 'decryptionPasswordId2' in kwargs:
            decryption_password_id2 = kwargs['decryptionPasswordId2']
        if 'miscellaneousSettingsTitle' in kwargs:
            miscellaneous_settings_title = kwargs['miscellaneousSettingsTitle']
        if 'patternDecryptionEnable' in kwargs:
            pattern_decryption_enable = kwargs['patternDecryptionEnable']
        if 'patternEncryptionTitle' in kwargs:
            pattern_encryption_title = kwargs['patternEncryptionTitle']
        if 'signatureVerificationEnable' in kwargs:
            signature_verification_enable = kwargs['signatureVerificationEnable']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'tokenSigningTitle' in kwargs:
            token_signing_title = kwargs['tokenSigningTitle']
        if 'useOriginalAsA' in kwargs:
            use_original_as_a = kwargs['useOriginalAsA']
        if 'verificationKeyId1' in kwargs:
            verification_key_id1 = kwargs['verificationKeyId1']
        if 'verificationKeyId2' in kwargs:
            verification_key_id2 = kwargs['verificationKeyId2']
        if 'verificationPublicKey1' in kwargs:
            verification_public_key1 = kwargs['verificationPublicKey1']
        if 'verificationPublicKey2' in kwargs:
            verification_public_key2 = kwargs['verificationPublicKey2']

        if ab_variant_location is not None:
            _setter("ab_variant_location", ab_variant_location)
        if decryption_password1 is not None:
            _setter("decryption_password1", decryption_password1)
        if decryption_password2 is not None:
            _setter("decryption_password2", decryption_password2)
        if decryption_password_id1 is not None:
            _setter("decryption_password_id1", decryption_password_id1)
        if decryption_password_id2 is not None:
            _setter("decryption_password_id2", decryption_password_id2)
        if enable is not None:
            _setter("enable", enable)
        if locked is not None:
            _setter("locked", locked)
        if miscellaneous_settings_title is not None:
            _setter("miscellaneous_settings_title", miscellaneous_settings_title)
        if pattern_decryption_enable is not None:
            _setter("pattern_decryption_enable", pattern_decryption_enable)
        if pattern_encryption_title is not None:
            _setter("pattern_encryption_title", pattern_encryption_title)
        if signature_verification_enable is not None:
            _setter("signature_verification_enable", signature_verification_enable)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if token_signing_title is not None:
            _setter("token_signing_title", token_signing_title)
        if use_original_as_a is not None:
            _setter("use_original_as_a", use_original_as_a)
        if uuid is not None:
            _setter("uuid", uuid)
        if verification_key_id1 is not None:
            _setter("verification_key_id1", verification_key_id1)
        if verification_key_id2 is not None:
            _setter("verification_key_id2", verification_key_id2)
        if verification_public_key1 is not None:
            _setter("verification_public_key1", verification_public_key1)
        if verification_public_key2 is not None:
            _setter("verification_public_key2", verification_public_key2)

    @property
    @pulumi.getter(name="abVariantLocation")
    def ab_variant_location(self) -> Optional[str]:
        return pulumi.get(self, "ab_variant_location")

    @property
    @pulumi.getter(name="decryptionPassword1")
    def decryption_password1(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password1")

    @property
    @pulumi.getter(name="decryptionPassword2")
    def decryption_password2(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password2")

    @property
    @pulumi.getter(name="decryptionPasswordId1")
    def decryption_password_id1(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password_id1")

    @property
    @pulumi.getter(name="decryptionPasswordId2")
    def decryption_password_id2(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password_id2")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="miscellaneousSettingsTitle")
    def miscellaneous_settings_title(self) -> Optional[str]:
        return pulumi.get(self, "miscellaneous_settings_title")

    @property
    @pulumi.getter(name="patternDecryptionEnable")
    def pattern_decryption_enable(self) -> Optional[bool]:
        return pulumi.get(self, "pattern_decryption_enable")

    @property
    @pulumi.getter(name="patternEncryptionTitle")
    def pattern_encryption_title(self) -> Optional[str]:
        return pulumi.get(self, "pattern_encryption_title")

    @property
    @pulumi.getter(name="signatureVerificationEnable")
    def signature_verification_enable(self) -> Optional[bool]:
        return pulumi.get(self, "signature_verification_enable")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tokenSigningTitle")
    def token_signing_title(self) -> Optional[str]:
        return pulumi.get(self, "token_signing_title")

    @property
    @pulumi.getter(name="useOriginalAsA")
    def use_original_as_a(self) -> Optional[bool]:
        return pulumi.get(self, "use_original_as_a")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="verificationKeyId1")
    def verification_key_id1(self) -> Optional[str]:
        return pulumi.get(self, "verification_key_id1")

    @property
    @pulumi.getter(name="verificationKeyId2")
    def verification_key_id2(self) -> Optional[str]:
        return pulumi.get(self, "verification_key_id2")

    @property
    @pulumi.getter(name="verificationPublicKey1")
    def verification_public_key1(self) -> Optional[str]:
        return pulumi.get(self, "verification_public_key1")

    @property
    @pulumi.getter(name="verificationPublicKey2")
    def verification_public_key2(self) -> Optional[str]:
        return pulumi.get(self, "verification_public_key2")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallResult(dict):
    def __init__(__self__, *,
                 firewall_configuration: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallFirewallConfigurationResult'] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            firewall_configuration=firewall_configuration,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             firewall_configuration: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallFirewallConfigurationResult'] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'firewallConfiguration' in kwargs:
            firewall_configuration = kwargs['firewallConfiguration']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if firewall_configuration is not None:
            _setter("firewall_configuration", firewall_configuration)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="firewallConfiguration")
    def firewall_configuration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallFirewallConfigurationResult']:
        return pulumi.get(self, "firewall_configuration")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallFirewallConfigurationResult(dict):
    def __init__(__self__, *,
                 config_id: Optional[int] = None,
                 file_name: Optional[str] = None,
                 production_status: Optional[str] = None,
                 production_version: Optional[int] = None,
                 staging_status: Optional[str] = None,
                 staging_version: Optional[int] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallFirewallConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_id=config_id,
            file_name=file_name,
            production_status=production_status,
            production_version=production_version,
            staging_status=staging_status,
            staging_version=staging_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_id: Optional[int] = None,
             file_name: Optional[str] = None,
             production_status: Optional[str] = None,
             production_version: Optional[int] = None,
             staging_status: Optional[str] = None,
             staging_version: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'configId' in kwargs:
            config_id = kwargs['configId']
        if 'fileName' in kwargs:
            file_name = kwargs['fileName']
        if 'productionStatus' in kwargs:
            production_status = kwargs['productionStatus']
        if 'productionVersion' in kwargs:
            production_version = kwargs['productionVersion']
        if 'stagingStatus' in kwargs:
            staging_status = kwargs['stagingStatus']
        if 'stagingVersion' in kwargs:
            staging_version = kwargs['stagingVersion']

        if config_id is not None:
            _setter("config_id", config_id)
        if file_name is not None:
            _setter("file_name", file_name)
        if production_status is not None:
            _setter("production_status", production_status)
        if production_version is not None:
            _setter("production_version", production_version)
        if staging_status is not None:
            _setter("staging_status", staging_status)
        if staging_version is not None:
            _setter("staging_version", staging_version)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[int]:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="productionStatus")
    def production_status(self) -> Optional[str]:
        return pulumi.get(self, "production_status")

    @property
    @pulumi.getter(name="productionVersion")
    def production_version(self) -> Optional[int]:
        return pulumi.get(self, "production_version")

    @property
    @pulumi.getter(name="stagingStatus")
    def staging_status(self) -> Optional[str]:
        return pulumi.get(self, "staging_status")

    @property
    @pulumi.getter(name="stagingVersion")
    def staging_version(self) -> Optional[int]:
        return pulumi.get(self, "staging_version")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorWebSocketsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorWebSocketsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorWebdavResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530BehaviorWebdavResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if enabled is not None:
            _setter("enabled", enabled)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionResult(dict):
    def __init__(__self__, *,
                 advanced_im_match: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionAdvancedImMatchResult'] = None,
                 bucket: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionBucketResult'] = None,
                 cacheability: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionCacheabilityResult'] = None,
                 china_cdn_region: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionChinaCdnRegionResult'] = None,
                 client_certificate: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionClientCertificateResult'] = None,
                 client_ip: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionClientIpResult'] = None,
                 client_ip_version: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionClientIpVersionResult'] = None,
                 cloudlets_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionCloudletsOriginResult'] = None,
                 content_delivery_network: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionContentDeliveryNetworkResult'] = None,
                 content_type: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionContentTypeResult'] = None,
                 device_characteristic: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionDeviceCharacteristicResult'] = None,
                 ecmd_auth_groups: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthGroupsResult'] = None,
                 ecmd_auth_scheme: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthSchemeResult'] = None,
                 ecmd_is_authenticated: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdIsAuthenticatedResult'] = None,
                 ecmd_username: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdUsernameResult'] = None,
                 edge_workers_failure: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEdgeWorkersFailureResult'] = None,
                 file_extension: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionFileExtensionResult'] = None,
                 filename: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionFilenameResult'] = None,
                 hostname: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionHostnameResult'] = None,
                 match_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchAdvancedResult'] = None,
                 match_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeResult'] = None,
                 match_response_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchResponseCodeResult'] = None,
                 match_variable: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchVariableResult'] = None,
                 metadata_stage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMetadataStageResult'] = None,
                 origin_timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionOriginTimeoutResult'] = None,
                 path: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionPathResult'] = None,
                 query_string_parameter: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionQueryStringParameterResult'] = None,
                 random: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRandomResult'] = None,
                 recovery_config: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRecoveryConfigResult'] = None,
                 regular_expression: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRegularExpressionResult'] = None,
                 request_cookie: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestCookieResult'] = None,
                 request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestHeaderResult'] = None,
                 request_method: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestMethodResult'] = None,
                 request_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestProtocolResult'] = None,
                 request_type: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestTypeResult'] = None,
                 response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionResponseHeaderResult'] = None,
                 server_location: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionServerLocationResult'] = None,
                 time: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionTimeResult'] = None,
                 token_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionTokenAuthorizationResult'] = None,
                 user_agent: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionUserAgentResult'] = None,
                 user_location: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionUserLocationResult'] = None,
                 user_network: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionUserNetworkResult'] = None,
                 variable_error: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionVariableErrorResult'] = None,
                 virtual_waiting_room_request: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionVirtualWaitingRoomRequestResult'] = None,
                 visitor_prioritization_request: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionVisitorPrioritizationRequestResult'] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            advanced_im_match=advanced_im_match,
            bucket=bucket,
            cacheability=cacheability,
            china_cdn_region=china_cdn_region,
            client_certificate=client_certificate,
            client_ip=client_ip,
            client_ip_version=client_ip_version,
            cloudlets_origin=cloudlets_origin,
            content_delivery_network=content_delivery_network,
            content_type=content_type,
            device_characteristic=device_characteristic,
            ecmd_auth_groups=ecmd_auth_groups,
            ecmd_auth_scheme=ecmd_auth_scheme,
            ecmd_is_authenticated=ecmd_is_authenticated,
            ecmd_username=ecmd_username,
            edge_workers_failure=edge_workers_failure,
            file_extension=file_extension,
            filename=filename,
            hostname=hostname,
            match_advanced=match_advanced,
            match_cp_code=match_cp_code,
            match_response_code=match_response_code,
            match_variable=match_variable,
            metadata_stage=metadata_stage,
            origin_timeout=origin_timeout,
            path=path,
            query_string_parameter=query_string_parameter,
            random=random,
            recovery_config=recovery_config,
            regular_expression=regular_expression,
            request_cookie=request_cookie,
            request_header=request_header,
            request_method=request_method,
            request_protocol=request_protocol,
            request_type=request_type,
            response_header=response_header,
            server_location=server_location,
            time=time,
            token_authorization=token_authorization,
            user_agent=user_agent,
            user_location=user_location,
            user_network=user_network,
            variable_error=variable_error,
            virtual_waiting_room_request=virtual_waiting_room_request,
            visitor_prioritization_request=visitor_prioritization_request,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             advanced_im_match: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionAdvancedImMatchResult'] = None,
             bucket: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionBucketResult'] = None,
             cacheability: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionCacheabilityResult'] = None,
             china_cdn_region: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionChinaCdnRegionResult'] = None,
             client_certificate: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionClientCertificateResult'] = None,
             client_ip: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionClientIpResult'] = None,
             client_ip_version: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionClientIpVersionResult'] = None,
             cloudlets_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionCloudletsOriginResult'] = None,
             content_delivery_network: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionContentDeliveryNetworkResult'] = None,
             content_type: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionContentTypeResult'] = None,
             device_characteristic: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionDeviceCharacteristicResult'] = None,
             ecmd_auth_groups: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthGroupsResult'] = None,
             ecmd_auth_scheme: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthSchemeResult'] = None,
             ecmd_is_authenticated: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdIsAuthenticatedResult'] = None,
             ecmd_username: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdUsernameResult'] = None,
             edge_workers_failure: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEdgeWorkersFailureResult'] = None,
             file_extension: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionFileExtensionResult'] = None,
             filename: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionFilenameResult'] = None,
             hostname: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionHostnameResult'] = None,
             match_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchAdvancedResult'] = None,
             match_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeResult'] = None,
             match_response_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchResponseCodeResult'] = None,
             match_variable: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchVariableResult'] = None,
             metadata_stage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMetadataStageResult'] = None,
             origin_timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionOriginTimeoutResult'] = None,
             path: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionPathResult'] = None,
             query_string_parameter: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionQueryStringParameterResult'] = None,
             random: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRandomResult'] = None,
             recovery_config: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRecoveryConfigResult'] = None,
             regular_expression: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRegularExpressionResult'] = None,
             request_cookie: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestCookieResult'] = None,
             request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestHeaderResult'] = None,
             request_method: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestMethodResult'] = None,
             request_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestProtocolResult'] = None,
             request_type: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestTypeResult'] = None,
             response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionResponseHeaderResult'] = None,
             server_location: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionServerLocationResult'] = None,
             time: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionTimeResult'] = None,
             token_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionTokenAuthorizationResult'] = None,
             user_agent: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionUserAgentResult'] = None,
             user_location: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionUserLocationResult'] = None,
             user_network: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionUserNetworkResult'] = None,
             variable_error: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionVariableErrorResult'] = None,
             virtual_waiting_room_request: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionVirtualWaitingRoomRequestResult'] = None,
             visitor_prioritization_request: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionVisitorPrioritizationRequestResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'advancedImMatch' in kwargs:
            advanced_im_match = kwargs['advancedImMatch']
        if 'chinaCdnRegion' in kwargs:
            china_cdn_region = kwargs['chinaCdnRegion']
        if 'clientCertificate' in kwargs:
            client_certificate = kwargs['clientCertificate']
        if 'clientIp' in kwargs:
            client_ip = kwargs['clientIp']
        if 'clientIpVersion' in kwargs:
            client_ip_version = kwargs['clientIpVersion']
        if 'cloudletsOrigin' in kwargs:
            cloudlets_origin = kwargs['cloudletsOrigin']
        if 'contentDeliveryNetwork' in kwargs:
            content_delivery_network = kwargs['contentDeliveryNetwork']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'deviceCharacteristic' in kwargs:
            device_characteristic = kwargs['deviceCharacteristic']
        if 'ecmdAuthGroups' in kwargs:
            ecmd_auth_groups = kwargs['ecmdAuthGroups']
        if 'ecmdAuthScheme' in kwargs:
            ecmd_auth_scheme = kwargs['ecmdAuthScheme']
        if 'ecmdIsAuthenticated' in kwargs:
            ecmd_is_authenticated = kwargs['ecmdIsAuthenticated']
        if 'ecmdUsername' in kwargs:
            ecmd_username = kwargs['ecmdUsername']
        if 'edgeWorkersFailure' in kwargs:
            edge_workers_failure = kwargs['edgeWorkersFailure']
        if 'fileExtension' in kwargs:
            file_extension = kwargs['fileExtension']
        if 'matchAdvanced' in kwargs:
            match_advanced = kwargs['matchAdvanced']
        if 'matchCpCode' in kwargs:
            match_cp_code = kwargs['matchCpCode']
        if 'matchResponseCode' in kwargs:
            match_response_code = kwargs['matchResponseCode']
        if 'matchVariable' in kwargs:
            match_variable = kwargs['matchVariable']
        if 'metadataStage' in kwargs:
            metadata_stage = kwargs['metadataStage']
        if 'originTimeout' in kwargs:
            origin_timeout = kwargs['originTimeout']
        if 'queryStringParameter' in kwargs:
            query_string_parameter = kwargs['queryStringParameter']
        if 'recoveryConfig' in kwargs:
            recovery_config = kwargs['recoveryConfig']
        if 'regularExpression' in kwargs:
            regular_expression = kwargs['regularExpression']
        if 'requestCookie' in kwargs:
            request_cookie = kwargs['requestCookie']
        if 'requestHeader' in kwargs:
            request_header = kwargs['requestHeader']
        if 'requestMethod' in kwargs:
            request_method = kwargs['requestMethod']
        if 'requestProtocol' in kwargs:
            request_protocol = kwargs['requestProtocol']
        if 'requestType' in kwargs:
            request_type = kwargs['requestType']
        if 'responseHeader' in kwargs:
            response_header = kwargs['responseHeader']
        if 'serverLocation' in kwargs:
            server_location = kwargs['serverLocation']
        if 'tokenAuthorization' in kwargs:
            token_authorization = kwargs['tokenAuthorization']
        if 'userAgent' in kwargs:
            user_agent = kwargs['userAgent']
        if 'userLocation' in kwargs:
            user_location = kwargs['userLocation']
        if 'userNetwork' in kwargs:
            user_network = kwargs['userNetwork']
        if 'variableError' in kwargs:
            variable_error = kwargs['variableError']
        if 'virtualWaitingRoomRequest' in kwargs:
            virtual_waiting_room_request = kwargs['virtualWaitingRoomRequest']
        if 'visitorPrioritizationRequest' in kwargs:
            visitor_prioritization_request = kwargs['visitorPrioritizationRequest']

        if advanced_im_match is not None:
            _setter("advanced_im_match", advanced_im_match)
        if bucket is not None:
            _setter("bucket", bucket)
        if cacheability is not None:
            _setter("cacheability", cacheability)
        if china_cdn_region is not None:
            _setter("china_cdn_region", china_cdn_region)
        if client_certificate is not None:
            _setter("client_certificate", client_certificate)
        if client_ip is not None:
            _setter("client_ip", client_ip)
        if client_ip_version is not None:
            _setter("client_ip_version", client_ip_version)
        if cloudlets_origin is not None:
            _setter("cloudlets_origin", cloudlets_origin)
        if content_delivery_network is not None:
            _setter("content_delivery_network", content_delivery_network)
        if content_type is not None:
            _setter("content_type", content_type)
        if device_characteristic is not None:
            _setter("device_characteristic", device_characteristic)
        if ecmd_auth_groups is not None:
            _setter("ecmd_auth_groups", ecmd_auth_groups)
        if ecmd_auth_scheme is not None:
            _setter("ecmd_auth_scheme", ecmd_auth_scheme)
        if ecmd_is_authenticated is not None:
            _setter("ecmd_is_authenticated", ecmd_is_authenticated)
        if ecmd_username is not None:
            _setter("ecmd_username", ecmd_username)
        if edge_workers_failure is not None:
            _setter("edge_workers_failure", edge_workers_failure)
        if file_extension is not None:
            _setter("file_extension", file_extension)
        if filename is not None:
            _setter("filename", filename)
        if hostname is not None:
            _setter("hostname", hostname)
        if match_advanced is not None:
            _setter("match_advanced", match_advanced)
        if match_cp_code is not None:
            _setter("match_cp_code", match_cp_code)
        if match_response_code is not None:
            _setter("match_response_code", match_response_code)
        if match_variable is not None:
            _setter("match_variable", match_variable)
        if metadata_stage is not None:
            _setter("metadata_stage", metadata_stage)
        if origin_timeout is not None:
            _setter("origin_timeout", origin_timeout)
        if path is not None:
            _setter("path", path)
        if query_string_parameter is not None:
            _setter("query_string_parameter", query_string_parameter)
        if random is not None:
            _setter("random", random)
        if recovery_config is not None:
            _setter("recovery_config", recovery_config)
        if regular_expression is not None:
            _setter("regular_expression", regular_expression)
        if request_cookie is not None:
            _setter("request_cookie", request_cookie)
        if request_header is not None:
            _setter("request_header", request_header)
        if request_method is not None:
            _setter("request_method", request_method)
        if request_protocol is not None:
            _setter("request_protocol", request_protocol)
        if request_type is not None:
            _setter("request_type", request_type)
        if response_header is not None:
            _setter("response_header", response_header)
        if server_location is not None:
            _setter("server_location", server_location)
        if time is not None:
            _setter("time", time)
        if token_authorization is not None:
            _setter("token_authorization", token_authorization)
        if user_agent is not None:
            _setter("user_agent", user_agent)
        if user_location is not None:
            _setter("user_location", user_location)
        if user_network is not None:
            _setter("user_network", user_network)
        if variable_error is not None:
            _setter("variable_error", variable_error)
        if virtual_waiting_room_request is not None:
            _setter("virtual_waiting_room_request", virtual_waiting_room_request)
        if visitor_prioritization_request is not None:
            _setter("visitor_prioritization_request", visitor_prioritization_request)

    @property
    @pulumi.getter(name="advancedImMatch")
    def advanced_im_match(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionAdvancedImMatchResult']:
        return pulumi.get(self, "advanced_im_match")

    @property
    @pulumi.getter
    def bucket(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionBucketResult']:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def cacheability(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionCacheabilityResult']:
        return pulumi.get(self, "cacheability")

    @property
    @pulumi.getter(name="chinaCdnRegion")
    def china_cdn_region(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionChinaCdnRegionResult']:
        return pulumi.get(self, "china_cdn_region")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionClientCertificateResult']:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionClientIpResult']:
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter(name="clientIpVersion")
    def client_ip_version(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionClientIpVersionResult']:
        return pulumi.get(self, "client_ip_version")

    @property
    @pulumi.getter(name="cloudletsOrigin")
    def cloudlets_origin(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionCloudletsOriginResult']:
        return pulumi.get(self, "cloudlets_origin")

    @property
    @pulumi.getter(name="contentDeliveryNetwork")
    def content_delivery_network(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionContentDeliveryNetworkResult']:
        return pulumi.get(self, "content_delivery_network")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionContentTypeResult']:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="deviceCharacteristic")
    def device_characteristic(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionDeviceCharacteristicResult']:
        return pulumi.get(self, "device_characteristic")

    @property
    @pulumi.getter(name="ecmdAuthGroups")
    def ecmd_auth_groups(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthGroupsResult']:
        return pulumi.get(self, "ecmd_auth_groups")

    @property
    @pulumi.getter(name="ecmdAuthScheme")
    def ecmd_auth_scheme(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthSchemeResult']:
        return pulumi.get(self, "ecmd_auth_scheme")

    @property
    @pulumi.getter(name="ecmdIsAuthenticated")
    def ecmd_is_authenticated(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdIsAuthenticatedResult']:
        return pulumi.get(self, "ecmd_is_authenticated")

    @property
    @pulumi.getter(name="ecmdUsername")
    def ecmd_username(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdUsernameResult']:
        return pulumi.get(self, "ecmd_username")

    @property
    @pulumi.getter(name="edgeWorkersFailure")
    def edge_workers_failure(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEdgeWorkersFailureResult']:
        return pulumi.get(self, "edge_workers_failure")

    @property
    @pulumi.getter(name="fileExtension")
    def file_extension(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionFileExtensionResult']:
        return pulumi.get(self, "file_extension")

    @property
    @pulumi.getter
    def filename(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionFilenameResult']:
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def hostname(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionHostnameResult']:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="matchAdvanced")
    def match_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchAdvancedResult']:
        return pulumi.get(self, "match_advanced")

    @property
    @pulumi.getter(name="matchCpCode")
    def match_cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeResult']:
        return pulumi.get(self, "match_cp_code")

    @property
    @pulumi.getter(name="matchResponseCode")
    def match_response_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchResponseCodeResult']:
        return pulumi.get(self, "match_response_code")

    @property
    @pulumi.getter(name="matchVariable")
    def match_variable(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchVariableResult']:
        return pulumi.get(self, "match_variable")

    @property
    @pulumi.getter(name="metadataStage")
    def metadata_stage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMetadataStageResult']:
        return pulumi.get(self, "metadata_stage")

    @property
    @pulumi.getter(name="originTimeout")
    def origin_timeout(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionOriginTimeoutResult']:
        return pulumi.get(self, "origin_timeout")

    @property
    @pulumi.getter
    def path(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionPathResult']:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="queryStringParameter")
    def query_string_parameter(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionQueryStringParameterResult']:
        return pulumi.get(self, "query_string_parameter")

    @property
    @pulumi.getter
    def random(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRandomResult']:
        return pulumi.get(self, "random")

    @property
    @pulumi.getter(name="recoveryConfig")
    def recovery_config(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRecoveryConfigResult']:
        return pulumi.get(self, "recovery_config")

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRegularExpressionResult']:
        return pulumi.get(self, "regular_expression")

    @property
    @pulumi.getter(name="requestCookie")
    def request_cookie(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestCookieResult']:
        return pulumi.get(self, "request_cookie")

    @property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestHeaderResult']:
        return pulumi.get(self, "request_header")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestMethodResult']:
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestProtocolResult']:
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestTypeResult']:
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter(name="responseHeader")
    def response_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionResponseHeaderResult']:
        return pulumi.get(self, "response_header")

    @property
    @pulumi.getter(name="serverLocation")
    def server_location(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionServerLocationResult']:
        return pulumi.get(self, "server_location")

    @property
    @pulumi.getter
    def time(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionTimeResult']:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="tokenAuthorization")
    def token_authorization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionTokenAuthorizationResult']:
        return pulumi.get(self, "token_authorization")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionUserAgentResult']:
        return pulumi.get(self, "user_agent")

    @property
    @pulumi.getter(name="userLocation")
    def user_location(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionUserLocationResult']:
        return pulumi.get(self, "user_location")

    @property
    @pulumi.getter(name="userNetwork")
    def user_network(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionUserNetworkResult']:
        return pulumi.get(self, "user_network")

    @property
    @pulumi.getter(name="variableError")
    def variable_error(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionVariableErrorResult']:
        return pulumi.get(self, "variable_error")

    @property
    @pulumi.getter(name="virtualWaitingRoomRequest")
    def virtual_waiting_room_request(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionVirtualWaitingRoomRequestResult']:
        return pulumi.get(self, "virtual_waiting_room_request")

    @property
    @pulumi.getter(name="visitorPrioritizationRequest")
    def visitor_prioritization_request(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionVisitorPrioritizationRequestResult']:
        return pulumi.get(self, "visitor_prioritization_request")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionAdvancedImMatchResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionAdvancedImMatchResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_on=match_on,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_on: Optional[str] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOn' in kwargs:
            match_on = kwargs['matchOn']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_on is not None:
            _setter("match_on", match_on)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionBucketResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 percentage: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionBucketResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            percentage=percentage,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             percentage: Optional[int] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if percentage is not None:
            _setter("percentage", percentage)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def percentage(self) -> Optional[int]:
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionCacheabilityResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionCacheabilityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionChinaCdnRegionResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionChinaCdnRegionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionClientCertificateResult(dict):
    def __init__(__self__, *,
                 is_certificate_present: Optional[bool] = None,
                 is_certificate_valid: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionClientCertificateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_certificate_present=is_certificate_present,
            is_certificate_valid=is_certificate_valid,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_certificate_present: Optional[bool] = None,
             is_certificate_valid: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isCertificatePresent' in kwargs:
            is_certificate_present = kwargs['isCertificatePresent']
        if 'isCertificateValid' in kwargs:
            is_certificate_valid = kwargs['isCertificateValid']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if is_certificate_present is not None:
            _setter("is_certificate_present", is_certificate_present)
        if is_certificate_valid is not None:
            _setter("is_certificate_valid", is_certificate_valid)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="isCertificatePresent")
    def is_certificate_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_certificate_present")

    @property
    @pulumi.getter(name="isCertificateValid")
    def is_certificate_valid(self) -> Optional[str]:
        return pulumi.get(self, "is_certificate_valid")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionClientIpResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_headers: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionClientIpResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            use_headers=use_headers,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             use_headers: Optional[bool] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useHeaders' in kwargs:
            use_headers = kwargs['useHeaders']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_headers is not None:
            _setter("use_headers", use_headers)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useHeaders")
    def use_headers(self) -> Optional[bool]:
        return pulumi.get(self, "use_headers")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionClientIpVersionResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_x_forwarded_for: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionClientIpVersionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            use_x_forwarded_for=use_x_forwarded_for,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             use_x_forwarded_for: Optional[bool] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useXForwardedFor' in kwargs:
            use_x_forwarded_for = kwargs['useXForwardedFor']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_x_forwarded_for is not None:
            _setter("use_x_forwarded_for", use_x_forwarded_for)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useXForwardedFor")
    def use_x_forwarded_for(self) -> Optional[bool]:
        return pulumi.get(self, "use_x_forwarded_for")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionCloudletsOriginResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionCloudletsOriginResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            origin_id=origin_id,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             origin_id: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'originId' in kwargs:
            origin_id = kwargs['originId']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if origin_id is not None:
            _setter("origin_id", origin_id)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionContentDeliveryNetworkResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 network: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionContentDeliveryNetworkResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            network=network,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             network: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if network is not None:
            _setter("network", network)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionContentTypeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionContentTypeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_case_sensitive=match_case_sensitive,
            match_operator=match_operator,
            match_wildcard=match_wildcard,
            template_uuid=template_uuid,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_case_sensitive: Optional[bool] = None,
             match_operator: Optional[str] = None,
             match_wildcard: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchCaseSensitive' in kwargs:
            match_case_sensitive = kwargs['matchCaseSensitive']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchWildcard' in kwargs:
            match_wildcard = kwargs['matchWildcard']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_case_sensitive is not None:
            _setter("match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_wildcard is not None:
            _setter("match_wildcard", match_wildcard)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionDeviceCharacteristicResult(dict):
    def __init__(__self__, *,
                 boolean_value: Optional[bool] = None,
                 characteristic: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_wildcard: Optional[bool] = None,
                 numeric_match_operator: Optional[str] = None,
                 numeric_value: Optional[int] = None,
                 string_match_operator: Optional[str] = None,
                 string_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 version_match_operator: Optional[str] = None,
                 version_value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionDeviceCharacteristicResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            boolean_value=boolean_value,
            characteristic=characteristic,
            locked=locked,
            match_case_sensitive=match_case_sensitive,
            match_wildcard=match_wildcard,
            numeric_match_operator=numeric_match_operator,
            numeric_value=numeric_value,
            string_match_operator=string_match_operator,
            string_values=string_values,
            template_uuid=template_uuid,
            uuid=uuid,
            version_match_operator=version_match_operator,
            version_value=version_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             boolean_value: Optional[bool] = None,
             characteristic: Optional[str] = None,
             locked: Optional[bool] = None,
             match_case_sensitive: Optional[bool] = None,
             match_wildcard: Optional[bool] = None,
             numeric_match_operator: Optional[str] = None,
             numeric_value: Optional[int] = None,
             string_match_operator: Optional[str] = None,
             string_values: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             version_match_operator: Optional[str] = None,
             version_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'booleanValue' in kwargs:
            boolean_value = kwargs['booleanValue']
        if 'matchCaseSensitive' in kwargs:
            match_case_sensitive = kwargs['matchCaseSensitive']
        if 'matchWildcard' in kwargs:
            match_wildcard = kwargs['matchWildcard']
        if 'numericMatchOperator' in kwargs:
            numeric_match_operator = kwargs['numericMatchOperator']
        if 'numericValue' in kwargs:
            numeric_value = kwargs['numericValue']
        if 'stringMatchOperator' in kwargs:
            string_match_operator = kwargs['stringMatchOperator']
        if 'stringValues' in kwargs:
            string_values = kwargs['stringValues']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'versionMatchOperator' in kwargs:
            version_match_operator = kwargs['versionMatchOperator']
        if 'versionValue' in kwargs:
            version_value = kwargs['versionValue']

        if boolean_value is not None:
            _setter("boolean_value", boolean_value)
        if characteristic is not None:
            _setter("characteristic", characteristic)
        if locked is not None:
            _setter("locked", locked)
        if match_case_sensitive is not None:
            _setter("match_case_sensitive", match_case_sensitive)
        if match_wildcard is not None:
            _setter("match_wildcard", match_wildcard)
        if numeric_match_operator is not None:
            _setter("numeric_match_operator", numeric_match_operator)
        if numeric_value is not None:
            _setter("numeric_value", numeric_value)
        if string_match_operator is not None:
            _setter("string_match_operator", string_match_operator)
        if string_values is not None:
            _setter("string_values", string_values)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if version_match_operator is not None:
            _setter("version_match_operator", version_match_operator)
        if version_value is not None:
            _setter("version_value", version_value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[bool]:
        return pulumi.get(self, "boolean_value")

    @property
    @pulumi.getter
    def characteristic(self) -> Optional[str]:
        return pulumi.get(self, "characteristic")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @property
    @pulumi.getter(name="numericMatchOperator")
    def numeric_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "numeric_match_operator")

    @property
    @pulumi.getter(name="numericValue")
    def numeric_value(self) -> Optional[int]:
        return pulumi.get(self, "numeric_value")

    @property
    @pulumi.getter(name="stringMatchOperator")
    def string_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "string_match_operator")

    @property
    @pulumi.getter(name="stringValues")
    def string_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "string_values")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="versionMatchOperator")
    def version_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "version_match_operator")

    @property
    @pulumi.getter(name="versionValue")
    def version_value(self) -> Optional[str]:
        return pulumi.get(self, "version_value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthGroupsResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthGroupsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthSchemeResult(dict):
    def __init__(__self__, *,
                 auth_scheme: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthSchemeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_scheme=auth_scheme,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_scheme: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authScheme' in kwargs:
            auth_scheme = kwargs['authScheme']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if auth_scheme is not None:
            _setter("auth_scheme", auth_scheme)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="authScheme")
    def auth_scheme(self) -> Optional[str]:
        return pulumi.get(self, "auth_scheme")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionEcmdIsAuthenticatedResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionEcmdIsAuthenticatedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionEcmdUsernameResult(dict):
    def __init__(__self__, *,
                 length: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionEcmdUsernameResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            length=length,
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             length: Optional[str] = None,
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if length is not None:
            _setter("length", length)
        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[str]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionEdgeWorkersFailureResult(dict):
    def __init__(__self__, *,
                 exec_status: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionEdgeWorkersFailureResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exec_status=exec_status,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exec_status: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'execStatus' in kwargs:
            exec_status = kwargs['execStatus']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if exec_status is not None:
            _setter("exec_status", exec_status)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="execStatus")
    def exec_status(self) -> Optional[str]:
        return pulumi.get(self, "exec_status")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionFileExtensionResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionFileExtensionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_case_sensitive=match_case_sensitive,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_case_sensitive: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchCaseSensitive' in kwargs:
            match_case_sensitive = kwargs['matchCaseSensitive']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_case_sensitive is not None:
            _setter("match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionFilenameResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionFilenameResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_case_sensitive=match_case_sensitive,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_case_sensitive: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchCaseSensitive' in kwargs:
            match_case_sensitive = kwargs['matchCaseSensitive']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_case_sensitive is not None:
            _setter("match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionHostnameResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionHostnameResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchAdvancedResult(dict):
    def __init__(__self__, *,
                 close_xml: Optional[str] = None,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 open_xml: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionMatchAdvancedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            close_xml=close_xml,
            description=description,
            locked=locked,
            open_xml=open_xml,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             close_xml: Optional[str] = None,
             description: Optional[str] = None,
             locked: Optional[bool] = None,
             open_xml: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'closeXml' in kwargs:
            close_xml = kwargs['closeXml']
        if 'openXml' in kwargs:
            open_xml = kwargs['openXml']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if close_xml is not None:
            _setter("close_xml", close_xml)
        if description is not None:
            _setter("description", description)
        if locked is not None:
            _setter("locked", locked)
        if open_xml is not None:
            _setter("open_xml", open_xml)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="closeXml")
    def close_xml(self) -> Optional[str]:
        return pulumi.get(self, "close_xml")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="openXml")
    def open_xml(self) -> Optional[str]:
        return pulumi.get(self, "open_xml")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueResult'] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueResult']:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cp_code_limits=cp_code_limits,
            created_date=created_date,
            description=description,
            id=id,
            name=name,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueCpCodeLimitsResult'] = None,
             created_date: Optional[int] = None,
             description: Optional[str] = None,
             id: Optional[int] = None,
             name: Optional[str] = None,
             products: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpCodeLimits' in kwargs:
            cp_code_limits = kwargs['cpCodeLimits']
        if 'createdDate' in kwargs:
            created_date = kwargs['createdDate']

        if cp_code_limits is not None:
            _setter("cp_code_limits", cp_code_limits)
        if created_date is not None:
            _setter("created_date", created_date)
        if description is not None:
            _setter("description", description)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if products is not None:
            _setter("products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueCpCodeLimitsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_capacity=current_capacity,
            limit=limit,
            limit_type=limit_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_capacity: Optional[int] = None,
             limit: Optional[int] = None,
             limit_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'currentCapacity' in kwargs:
            current_capacity = kwargs['currentCapacity']
        if 'limitType' in kwargs:
            limit_type = kwargs['limitType']

        if current_capacity is not None:
            _setter("current_capacity", current_capacity)
        if limit is not None:
            _setter("limit", limit)
        if limit_type is not None:
            _setter("limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchResponseCodeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionMatchResponseCodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            lower_bound=lower_bound,
            match_operator=match_operator,
            template_uuid=template_uuid,
            upper_bound=upper_bound,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             lower_bound: Optional[int] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             upper_bound: Optional[int] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'lowerBound' in kwargs:
            lower_bound = kwargs['lowerBound']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'upperBound' in kwargs:
            upper_bound = kwargs['upperBound']

        if locked is not None:
            _setter("locked", locked)
        if lower_bound is not None:
            _setter("lower_bound", lower_bound)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if upper_bound is not None:
            _setter("upper_bound", upper_bound)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchVariableResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[str] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_expression: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 variable_values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionMatchVariableResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            lower_bound=lower_bound,
            match_case_sensitive=match_case_sensitive,
            match_operator=match_operator,
            match_wildcard=match_wildcard,
            template_uuid=template_uuid,
            upper_bound=upper_bound,
            uuid=uuid,
            variable_expression=variable_expression,
            variable_name=variable_name,
            variable_values=variable_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             lower_bound: Optional[str] = None,
             match_case_sensitive: Optional[bool] = None,
             match_operator: Optional[str] = None,
             match_wildcard: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             upper_bound: Optional[str] = None,
             uuid: Optional[str] = None,
             variable_expression: Optional[str] = None,
             variable_name: Optional[str] = None,
             variable_values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'lowerBound' in kwargs:
            lower_bound = kwargs['lowerBound']
        if 'matchCaseSensitive' in kwargs:
            match_case_sensitive = kwargs['matchCaseSensitive']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchWildcard' in kwargs:
            match_wildcard = kwargs['matchWildcard']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'upperBound' in kwargs:
            upper_bound = kwargs['upperBound']
        if 'variableExpression' in kwargs:
            variable_expression = kwargs['variableExpression']
        if 'variableName' in kwargs:
            variable_name = kwargs['variableName']
        if 'variableValues' in kwargs:
            variable_values = kwargs['variableValues']

        if locked is not None:
            _setter("locked", locked)
        if lower_bound is not None:
            _setter("lower_bound", lower_bound)
        if match_case_sensitive is not None:
            _setter("match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_wildcard is not None:
            _setter("match_wildcard", match_wildcard)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if upper_bound is not None:
            _setter("upper_bound", upper_bound)
        if uuid is not None:
            _setter("uuid", uuid)
        if variable_expression is not None:
            _setter("variable_expression", variable_expression)
        if variable_name is not None:
            _setter("variable_name", variable_name)
        if variable_values is not None:
            _setter("variable_values", variable_values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[str]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[str]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableExpression")
    def variable_expression(self) -> Optional[str]:
        return pulumi.get(self, "variable_expression")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @property
    @pulumi.getter(name="variableValues")
    def variable_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "variable_values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionMetadataStageResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionMetadataStageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionOriginTimeoutResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionOriginTimeoutResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionPathResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 normalize: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionPathResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_case_sensitive=match_case_sensitive,
            match_operator=match_operator,
            normalize=normalize,
            template_uuid=template_uuid,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_case_sensitive: Optional[bool] = None,
             match_operator: Optional[str] = None,
             normalize: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchCaseSensitive' in kwargs:
            match_case_sensitive = kwargs['matchCaseSensitive']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_case_sensitive is not None:
            _setter("match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if normalize is not None:
            _setter("normalize", normalize)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter
    def normalize(self) -> Optional[bool]:
        return pulumi.get(self, "normalize")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionQueryStringParameterResult(dict):
    def __init__(__self__, *,
                 escape_value: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_name: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionQueryStringParameterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            escape_value=escape_value,
            locked=locked,
            lower_bound=lower_bound,
            match_case_sensitive_name=match_case_sensitive_name,
            match_case_sensitive_value=match_case_sensitive_value,
            match_operator=match_operator,
            match_wildcard_name=match_wildcard_name,
            match_wildcard_value=match_wildcard_value,
            parameter_name=parameter_name,
            template_uuid=template_uuid,
            upper_bound=upper_bound,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             escape_value: Optional[bool] = None,
             locked: Optional[bool] = None,
             lower_bound: Optional[int] = None,
             match_case_sensitive_name: Optional[bool] = None,
             match_case_sensitive_value: Optional[bool] = None,
             match_operator: Optional[str] = None,
             match_wildcard_name: Optional[bool] = None,
             match_wildcard_value: Optional[bool] = None,
             parameter_name: Optional[str] = None,
             template_uuid: Optional[str] = None,
             upper_bound: Optional[int] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'escapeValue' in kwargs:
            escape_value = kwargs['escapeValue']
        if 'lowerBound' in kwargs:
            lower_bound = kwargs['lowerBound']
        if 'matchCaseSensitiveName' in kwargs:
            match_case_sensitive_name = kwargs['matchCaseSensitiveName']
        if 'matchCaseSensitiveValue' in kwargs:
            match_case_sensitive_value = kwargs['matchCaseSensitiveValue']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchWildcardName' in kwargs:
            match_wildcard_name = kwargs['matchWildcardName']
        if 'matchWildcardValue' in kwargs:
            match_wildcard_value = kwargs['matchWildcardValue']
        if 'parameterName' in kwargs:
            parameter_name = kwargs['parameterName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'upperBound' in kwargs:
            upper_bound = kwargs['upperBound']

        if escape_value is not None:
            _setter("escape_value", escape_value)
        if locked is not None:
            _setter("locked", locked)
        if lower_bound is not None:
            _setter("lower_bound", lower_bound)
        if match_case_sensitive_name is not None:
            _setter("match_case_sensitive_name", match_case_sensitive_name)
        if match_case_sensitive_value is not None:
            _setter("match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_wildcard_name is not None:
            _setter("match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            _setter("match_wildcard_value", match_wildcard_value)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if upper_bound is not None:
            _setter("upper_bound", upper_bound)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="escapeValue")
    def escape_value(self) -> Optional[bool]:
        return pulumi.get(self, "escape_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchCaseSensitiveName")
    def match_case_sensitive_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_name")

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "parameter_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionRandomResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[int] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionRandomResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[int] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if bucket is not None:
            _setter("bucket", bucket)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[int]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionRecoveryConfigResult(dict):
    def __init__(__self__, *,
                 config_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionRecoveryConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_name=config_name,
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_name: Optional[str] = None,
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'configName' in kwargs:
            config_name = kwargs['configName']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if config_name is not None:
            _setter("config_name", config_name)
        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> Optional[str]:
        return pulumi.get(self, "config_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionRegularExpressionResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match_string: Optional[str] = None,
                 regex: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionRegularExpressionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            case_sensitive=case_sensitive,
            locked=locked,
            match_string=match_string,
            regex=regex,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             case_sensitive: Optional[bool] = None,
             locked: Optional[bool] = None,
             match_string: Optional[str] = None,
             regex: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'caseSensitive' in kwargs:
            case_sensitive = kwargs['caseSensitive']
        if 'matchString' in kwargs:
            match_string = kwargs['matchString']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if case_sensitive is not None:
            _setter("case_sensitive", case_sensitive)
        if locked is not None:
            _setter("locked", locked)
        if match_string is not None:
            _setter("match_string", match_string)
        if regex is not None:
            _setter("regex", regex)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchString")
    def match_string(self) -> Optional[str]:
        return pulumi.get(self, "match_string")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionRequestCookieResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_name: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionRequestCookieResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_name=cookie_name,
            locked=locked,
            lower_bound=lower_bound,
            match_case_sensitive_name=match_case_sensitive_name,
            match_case_sensitive_value=match_case_sensitive_value,
            match_operator=match_operator,
            match_wildcard_name=match_wildcard_name,
            match_wildcard_value=match_wildcard_value,
            template_uuid=template_uuid,
            upper_bound=upper_bound,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_name: Optional[str] = None,
             locked: Optional[bool] = None,
             lower_bound: Optional[int] = None,
             match_case_sensitive_name: Optional[bool] = None,
             match_case_sensitive_value: Optional[bool] = None,
             match_operator: Optional[str] = None,
             match_wildcard_name: Optional[bool] = None,
             match_wildcard_value: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             upper_bound: Optional[int] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cookieName' in kwargs:
            cookie_name = kwargs['cookieName']
        if 'lowerBound' in kwargs:
            lower_bound = kwargs['lowerBound']
        if 'matchCaseSensitiveName' in kwargs:
            match_case_sensitive_name = kwargs['matchCaseSensitiveName']
        if 'matchCaseSensitiveValue' in kwargs:
            match_case_sensitive_value = kwargs['matchCaseSensitiveValue']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchWildcardName' in kwargs:
            match_wildcard_name = kwargs['matchWildcardName']
        if 'matchWildcardValue' in kwargs:
            match_wildcard_value = kwargs['matchWildcardValue']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'upperBound' in kwargs:
            upper_bound = kwargs['upperBound']

        if cookie_name is not None:
            _setter("cookie_name", cookie_name)
        if locked is not None:
            _setter("locked", locked)
        if lower_bound is not None:
            _setter("lower_bound", lower_bound)
        if match_case_sensitive_name is not None:
            _setter("match_case_sensitive_name", match_case_sensitive_name)
        if match_case_sensitive_value is not None:
            _setter("match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_wildcard_name is not None:
            _setter("match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            _setter("match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if upper_bound is not None:
            _setter("upper_bound", upper_bound)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchCaseSensitiveName")
    def match_case_sensitive_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_name")

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionRequestHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionRequestHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_name=header_name,
            locked=locked,
            match_case_sensitive_value=match_case_sensitive_value,
            match_operator=match_operator,
            match_wildcard_name=match_wildcard_name,
            match_wildcard_value=match_wildcard_value,
            template_uuid=template_uuid,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_name: Optional[str] = None,
             locked: Optional[bool] = None,
             match_case_sensitive_value: Optional[bool] = None,
             match_operator: Optional[str] = None,
             match_wildcard_name: Optional[bool] = None,
             match_wildcard_value: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'matchCaseSensitiveValue' in kwargs:
            match_case_sensitive_value = kwargs['matchCaseSensitiveValue']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchWildcardName' in kwargs:
            match_wildcard_name = kwargs['matchWildcardName']
        if 'matchWildcardValue' in kwargs:
            match_wildcard_value = kwargs['matchWildcardValue']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if header_name is not None:
            _setter("header_name", header_name)
        if locked is not None:
            _setter("locked", locked)
        if match_case_sensitive_value is not None:
            _setter("match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_wildcard_name is not None:
            _setter("match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            _setter("match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionRequestMethodResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionRequestMethodResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionRequestProtocolResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionRequestProtocolResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionRequestTypeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionRequestTypeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionResponseHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionResponseHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_name=header_name,
            locked=locked,
            lower_bound=lower_bound,
            match_case_sensitive_value=match_case_sensitive_value,
            match_operator=match_operator,
            match_wildcard_name=match_wildcard_name,
            match_wildcard_value=match_wildcard_value,
            template_uuid=template_uuid,
            upper_bound=upper_bound,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_name: Optional[str] = None,
             locked: Optional[bool] = None,
             lower_bound: Optional[int] = None,
             match_case_sensitive_value: Optional[bool] = None,
             match_operator: Optional[str] = None,
             match_wildcard_name: Optional[bool] = None,
             match_wildcard_value: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             upper_bound: Optional[int] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'lowerBound' in kwargs:
            lower_bound = kwargs['lowerBound']
        if 'matchCaseSensitiveValue' in kwargs:
            match_case_sensitive_value = kwargs['matchCaseSensitiveValue']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchWildcardName' in kwargs:
            match_wildcard_name = kwargs['matchWildcardName']
        if 'matchWildcardValue' in kwargs:
            match_wildcard_value = kwargs['matchWildcardValue']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'upperBound' in kwargs:
            upper_bound = kwargs['upperBound']

        if header_name is not None:
            _setter("header_name", header_name)
        if locked is not None:
            _setter("locked", locked)
        if lower_bound is not None:
            _setter("lower_bound", lower_bound)
        if match_case_sensitive_value is not None:
            _setter("match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_wildcard_name is not None:
            _setter("match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            _setter("match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if upper_bound is not None:
            _setter("upper_bound", upper_bound)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionServerLocationResult(dict):
    def __init__(__self__, *,
                 continents: Optional[Sequence[str]] = None,
                 countries: Optional[Sequence[str]] = None,
                 location_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 regions: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionServerLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            continents=continents,
            countries=countries,
            location_type=location_type,
            locked=locked,
            match_operator=match_operator,
            regions=regions,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             continents: Optional[Sequence[str]] = None,
             countries: Optional[Sequence[str]] = None,
             location_type: Optional[str] = None,
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             regions: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'locationType' in kwargs:
            location_type = kwargs['locationType']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if continents is not None:
            _setter("continents", continents)
        if countries is not None:
            _setter("countries", countries)
        if location_type is not None:
            _setter("location_type", location_type)
        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if regions is not None:
            _setter("regions", regions)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def continents(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "continents")

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "countries")

    @property
    @pulumi.getter(name="locationType")
    def location_type(self) -> Optional[str]:
        return pulumi.get(self, "location_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionTimeResult(dict):
    def __init__(__self__, *,
                 apply_daylight_savings_time: Optional[bool] = None,
                 begin_date: Optional[str] = None,
                 end_date: Optional[str] = None,
                 lasting_date: Optional[str] = None,
                 lasting_duration: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 repeat_begin_date: Optional[str] = None,
                 repeat_duration: Optional[str] = None,
                 repeat_interval: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionTimeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            apply_daylight_savings_time=apply_daylight_savings_time,
            begin_date=begin_date,
            end_date=end_date,
            lasting_date=lasting_date,
            lasting_duration=lasting_duration,
            locked=locked,
            match_operator=match_operator,
            repeat_begin_date=repeat_begin_date,
            repeat_duration=repeat_duration,
            repeat_interval=repeat_interval,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             apply_daylight_savings_time: Optional[bool] = None,
             begin_date: Optional[str] = None,
             end_date: Optional[str] = None,
             lasting_date: Optional[str] = None,
             lasting_duration: Optional[str] = None,
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             repeat_begin_date: Optional[str] = None,
             repeat_duration: Optional[str] = None,
             repeat_interval: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'applyDaylightSavingsTime' in kwargs:
            apply_daylight_savings_time = kwargs['applyDaylightSavingsTime']
        if 'beginDate' in kwargs:
            begin_date = kwargs['beginDate']
        if 'endDate' in kwargs:
            end_date = kwargs['endDate']
        if 'lastingDate' in kwargs:
            lasting_date = kwargs['lastingDate']
        if 'lastingDuration' in kwargs:
            lasting_duration = kwargs['lastingDuration']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'repeatBeginDate' in kwargs:
            repeat_begin_date = kwargs['repeatBeginDate']
        if 'repeatDuration' in kwargs:
            repeat_duration = kwargs['repeatDuration']
        if 'repeatInterval' in kwargs:
            repeat_interval = kwargs['repeatInterval']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if apply_daylight_savings_time is not None:
            _setter("apply_daylight_savings_time", apply_daylight_savings_time)
        if begin_date is not None:
            _setter("begin_date", begin_date)
        if end_date is not None:
            _setter("end_date", end_date)
        if lasting_date is not None:
            _setter("lasting_date", lasting_date)
        if lasting_duration is not None:
            _setter("lasting_duration", lasting_duration)
        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if repeat_begin_date is not None:
            _setter("repeat_begin_date", repeat_begin_date)
        if repeat_duration is not None:
            _setter("repeat_duration", repeat_duration)
        if repeat_interval is not None:
            _setter("repeat_interval", repeat_interval)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="applyDaylightSavingsTime")
    def apply_daylight_savings_time(self) -> Optional[bool]:
        return pulumi.get(self, "apply_daylight_savings_time")

    @property
    @pulumi.getter(name="beginDate")
    def begin_date(self) -> Optional[str]:
        return pulumi.get(self, "begin_date")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="lastingDate")
    def lasting_date(self) -> Optional[str]:
        return pulumi.get(self, "lasting_date")

    @property
    @pulumi.getter(name="lastingDuration")
    def lasting_duration(self) -> Optional[str]:
        return pulumi.get(self, "lasting_duration")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="repeatBeginDate")
    def repeat_begin_date(self) -> Optional[str]:
        return pulumi.get(self, "repeat_begin_date")

    @property
    @pulumi.getter(name="repeatDuration")
    def repeat_duration(self) -> Optional[str]:
        return pulumi.get(self, "repeat_duration")

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[str]:
        return pulumi.get(self, "repeat_interval")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionTokenAuthorizationResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 status_lists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionTokenAuthorizationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_operator=match_operator,
            status_lists=status_lists,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             status_lists: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'statusLists' in kwargs:
            status_lists = kwargs['statusLists']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if status_lists is not None:
            _setter("status_lists", status_lists)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="statusLists")
    def status_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "status_lists")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionUserAgentResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionUserAgentResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_case_sensitive=match_case_sensitive,
            match_operator=match_operator,
            match_wildcard=match_wildcard,
            template_uuid=template_uuid,
            uuid=uuid,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_case_sensitive: Optional[bool] = None,
             match_operator: Optional[str] = None,
             match_wildcard: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchCaseSensitive' in kwargs:
            match_case_sensitive = kwargs['matchCaseSensitive']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'matchWildcard' in kwargs:
            match_wildcard = kwargs['matchWildcard']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_case_sensitive is not None:
            _setter("match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if match_wildcard is not None:
            _setter("match_wildcard", match_wildcard)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionUserLocationResult(dict):
    def __init__(__self__, *,
                 check_ips: Optional[str] = None,
                 continent_values: Optional[Sequence[str]] = None,
                 country_values: Optional[Sequence[str]] = None,
                 field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 region_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 use_only_first_x_forwarded_for_ip: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionUserLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            check_ips=check_ips,
            continent_values=continent_values,
            country_values=country_values,
            field=field,
            locked=locked,
            match_operator=match_operator,
            region_values=region_values,
            template_uuid=template_uuid,
            use_only_first_x_forwarded_for_ip=use_only_first_x_forwarded_for_ip,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             check_ips: Optional[str] = None,
             continent_values: Optional[Sequence[str]] = None,
             country_values: Optional[Sequence[str]] = None,
             field: Optional[str] = None,
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             region_values: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             use_only_first_x_forwarded_for_ip: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'checkIps' in kwargs:
            check_ips = kwargs['checkIps']
        if 'continentValues' in kwargs:
            continent_values = kwargs['continentValues']
        if 'countryValues' in kwargs:
            country_values = kwargs['countryValues']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'regionValues' in kwargs:
            region_values = kwargs['regionValues']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useOnlyFirstXForwardedForIp' in kwargs:
            use_only_first_x_forwarded_for_ip = kwargs['useOnlyFirstXForwardedForIp']

        if check_ips is not None:
            _setter("check_ips", check_ips)
        if continent_values is not None:
            _setter("continent_values", continent_values)
        if country_values is not None:
            _setter("country_values", country_values)
        if field is not None:
            _setter("field", field)
        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if region_values is not None:
            _setter("region_values", region_values)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_only_first_x_forwarded_for_ip is not None:
            _setter("use_only_first_x_forwarded_for_ip", use_only_first_x_forwarded_for_ip)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="continentValues")
    def continent_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "continent_values")

    @property
    @pulumi.getter(name="countryValues")
    def country_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "country_values")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="regionValues")
    def region_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "region_values")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useOnlyFirstXForwardedForIp")
    def use_only_first_x_forwarded_for_ip(self) -> Optional[bool]:
        return pulumi.get(self, "use_only_first_x_forwarded_for_ip")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionUserNetworkResult(dict):
    def __init__(__self__, *,
                 bandwidth_values: Optional[Sequence[str]] = None,
                 check_ips: Optional[str] = None,
                 field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 network_type_values: Optional[Sequence[str]] = None,
                 network_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 use_only_first_x_forwarded_for_ip: Optional[bool] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionUserNetworkResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bandwidth_values=bandwidth_values,
            check_ips=check_ips,
            field=field,
            locked=locked,
            match_operator=match_operator,
            network_type_values=network_type_values,
            network_values=network_values,
            template_uuid=template_uuid,
            use_only_first_x_forwarded_for_ip=use_only_first_x_forwarded_for_ip,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bandwidth_values: Optional[Sequence[str]] = None,
             check_ips: Optional[str] = None,
             field: Optional[str] = None,
             locked: Optional[bool] = None,
             match_operator: Optional[str] = None,
             network_type_values: Optional[Sequence[str]] = None,
             network_values: Optional[Sequence[str]] = None,
             template_uuid: Optional[str] = None,
             use_only_first_x_forwarded_for_ip: Optional[bool] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bandwidthValues' in kwargs:
            bandwidth_values = kwargs['bandwidthValues']
        if 'checkIps' in kwargs:
            check_ips = kwargs['checkIps']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'networkTypeValues' in kwargs:
            network_type_values = kwargs['networkTypeValues']
        if 'networkValues' in kwargs:
            network_values = kwargs['networkValues']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'useOnlyFirstXForwardedForIp' in kwargs:
            use_only_first_x_forwarded_for_ip = kwargs['useOnlyFirstXForwardedForIp']

        if bandwidth_values is not None:
            _setter("bandwidth_values", bandwidth_values)
        if check_ips is not None:
            _setter("check_ips", check_ips)
        if field is not None:
            _setter("field", field)
        if locked is not None:
            _setter("locked", locked)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if network_type_values is not None:
            _setter("network_type_values", network_type_values)
        if network_values is not None:
            _setter("network_values", network_values)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if use_only_first_x_forwarded_for_ip is not None:
            _setter("use_only_first_x_forwarded_for_ip", use_only_first_x_forwarded_for_ip)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="bandwidthValues")
    def bandwidth_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "bandwidth_values")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="networkTypeValues")
    def network_type_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_type_values")

    @property
    @pulumi.getter(name="networkValues")
    def network_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_values")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useOnlyFirstXForwardedForIp")
    def use_only_first_x_forwarded_for_ip(self) -> Optional[bool]:
        return pulumi.get(self, "use_only_first_x_forwarded_for_ip")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionVariableErrorResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 result: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_names: Optional[Sequence[str]] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionVariableErrorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            result=result,
            template_uuid=template_uuid,
            uuid=uuid,
            variable_names=variable_names,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             result: Optional[bool] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             variable_names: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']
        if 'variableNames' in kwargs:
            variable_names = kwargs['variableNames']

        if locked is not None:
            _setter("locked", locked)
        if result is not None:
            _setter("result", result)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)
        if variable_names is not None:
            _setter("variable_names", variable_names)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def result(self) -> Optional[bool]:
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableNames")
    def variable_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "variable_names")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionVirtualWaitingRoomRequestResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionVirtualWaitingRoomRequestResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_on=match_on,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_on: Optional[str] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOn' in kwargs:
            match_on = kwargs['matchOn']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_on is not None:
            _setter("match_on", match_on)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionVisitorPrioritizationRequestResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CriterionVisitorPrioritizationRequestResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            locked=locked,
            match_on=match_on,
            match_operator=match_operator,
            template_uuid=template_uuid,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             locked: Optional[bool] = None,
             match_on: Optional[str] = None,
             match_operator: Optional[str] = None,
             template_uuid: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchOn' in kwargs:
            match_on = kwargs['matchOn']
        if 'matchOperator' in kwargs:
            match_operator = kwargs['matchOperator']
        if 'templateUuid' in kwargs:
            template_uuid = kwargs['templateUuid']

        if locked is not None:
            _setter("locked", locked)
        if match_on is not None:
            _setter("match_on", match_on)
        if match_operator is not None:
            _setter("match_operator", match_operator)
        if template_uuid is not None:
            _setter("template_uuid", template_uuid)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CustomOverrideResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 override_id: Optional[str] = None):
        GetPropertyRulesBuilderRulesV20230530CustomOverrideResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            override_id=override_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             override_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'overrideId' in kwargs:
            override_id = kwargs['overrideId']

        if name is not None:
            _setter("name", name)
        if override_id is not None:
            _setter("override_id", override_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideId")
    def override_id(self) -> Optional[str]:
        return pulumi.get(self, "override_id")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530VariableResult(dict):
    def __init__(__self__, *,
                 description: str,
                 hidden: bool,
                 name: str,
                 sensitive: bool,
                 value: str):
        GetPropertyRulesBuilderRulesV20230530VariableResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            hidden=hidden,
            name=name,
            sensitive=sensitive,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: str,
             hidden: bool,
             name: str,
             sensitive: bool,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("description", description)
        _setter("hidden", hidden)
        _setter("name", name)
        _setter("sensitive", sensitive)
        _setter("value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hidden(self) -> bool:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sensitive(self) -> bool:
        return pulumi.get(self, "sensitive")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesTemplateTemplateResult(dict):
    def __init__(__self__, *,
                 template_data: str,
                 template_dir: str):
        GetPropertyRulesTemplateTemplateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            template_data=template_data,
            template_dir=template_dir,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             template_data: str,
             template_dir: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'templateData' in kwargs:
            template_data = kwargs['templateData']
        if 'templateDir' in kwargs:
            template_dir = kwargs['templateDir']

        _setter("template_data", template_data)
        _setter("template_dir", template_dir)

    @property
    @pulumi.getter(name="templateData")
    def template_data(self) -> str:
        return pulumi.get(self, "template_data")

    @property
    @pulumi.getter(name="templateDir")
    def template_dir(self) -> str:
        return pulumi.get(self, "template_dir")


@pulumi.output_type
class GetPropertyRulesTemplateVariableResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 type: Optional[str] = None):
        GetPropertyRulesTemplateVariableResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             value: str,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("value", value)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


